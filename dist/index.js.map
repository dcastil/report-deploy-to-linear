{
  "version": 3,
  "sources": ["../node_modules/@actions/core/src/utils.ts", "../node_modules/@actions/core/src/command.ts", "../node_modules/uuid/dist/esm-node/rng.js", "../node_modules/uuid/dist/esm-node/regex.js", "../node_modules/uuid/dist/esm-node/validate.js", "../node_modules/uuid/dist/esm-node/stringify.js", "../node_modules/uuid/dist/esm-node/v1.js", "../node_modules/uuid/dist/esm-node/parse.js", "../node_modules/uuid/dist/esm-node/v35.js", "../node_modules/uuid/dist/esm-node/md5.js", "../node_modules/uuid/dist/esm-node/v3.js", "../node_modules/uuid/dist/esm-node/v4.js", "../node_modules/uuid/dist/esm-node/sha1.js", "../node_modules/uuid/dist/esm-node/v5.js", "../node_modules/uuid/dist/esm-node/nil.js", "../node_modules/uuid/dist/esm-node/version.js", "../node_modules/uuid/dist/esm-node/index.js", "../node_modules/@actions/core/src/file-command.ts", "../node_modules/@actions/http-client/src/proxy.ts", "../node_modules/tunnel/lib/tunnel.js", "../node_modules/tunnel/index.js", "../node_modules/undici/lib/core/symbols.js", "../node_modules/undici/lib/core/errors.js", "../node_modules/undici/lib/core/constants.js", "../node_modules/undici/lib/core/util.js", "../node_modules/undici/lib/timers.js", "../node_modules/@fastify/busboy/deps/streamsearch/sbmh.js", "../node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js", "../node_modules/@fastify/busboy/lib/utils/getLimit.js", "../node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js", "../node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js", "../node_modules/@fastify/busboy/lib/utils/decodeText.js", "../node_modules/@fastify/busboy/lib/utils/parseParams.js", "../node_modules/@fastify/busboy/lib/utils/basename.js", "../node_modules/@fastify/busboy/lib/types/multipart.js", "../node_modules/@fastify/busboy/lib/utils/Decoder.js", "../node_modules/@fastify/busboy/lib/types/urlencoded.js", "../node_modules/@fastify/busboy/lib/main.js", "../node_modules/undici/lib/fetch/constants.js", "../node_modules/undici/lib/fetch/global.js", "../node_modules/undici/lib/fetch/util.js", "../node_modules/undici/lib/fetch/symbols.js", "../node_modules/undici/lib/fetch/webidl.js", "../node_modules/undici/lib/fetch/dataURL.js", "../node_modules/undici/lib/fetch/file.js", "../node_modules/undici/lib/fetch/formdata.js", "../node_modules/undici/lib/fetch/body.js", "../node_modules/undici/lib/core/request.js", "../node_modules/undici/lib/dispatcher.js", "../node_modules/undici/lib/dispatcher-base.js", "../node_modules/undici/lib/core/connect.js", "../node_modules/undici/src/llhttp/utils.ts", "../node_modules/undici/src/llhttp/constants.ts", "../node_modules/undici/lib/handler/RedirectHandler.js", "../node_modules/undici/lib/interceptor/redirectInterceptor.js", "../node_modules/undici/lib/llhttp/llhttp-wasm.js", "../node_modules/undici/lib/llhttp/llhttp_simd-wasm.js", "../node_modules/undici/lib/client.js", "../node_modules/undici/lib/node/fixed-queue.js", "../node_modules/undici/lib/pool-stats.js", "../node_modules/undici/lib/pool-base.js", "../node_modules/undici/lib/pool.js", "../node_modules/undici/lib/balanced-pool.js", "../node_modules/undici/lib/compat/dispatcher-weakref.js", "../node_modules/undici/lib/agent.js", "../node_modules/undici/lib/api/readable.js", "../node_modules/undici/lib/api/util.js", "../node_modules/undici/lib/api/abort-signal.js", "../node_modules/undici/lib/api/api-request.js", "../node_modules/undici/lib/api/api-stream.js", "../node_modules/undici/lib/api/api-pipeline.js", "../node_modules/undici/lib/api/api-upgrade.js", "../node_modules/undici/lib/api/api-connect.js", "../node_modules/undici/lib/api/index.js", "../node_modules/undici/lib/mock/mock-errors.js", "../node_modules/undici/lib/mock/mock-symbols.js", "../node_modules/undici/lib/mock/mock-utils.js", "../node_modules/undici/lib/mock/mock-interceptor.js", "../node_modules/undici/lib/mock/mock-client.js", "../node_modules/undici/lib/mock/mock-pool.js", "../node_modules/undici/lib/mock/pluralizer.js", "../node_modules/undici/lib/mock/pending-interceptors-formatter.js", "../node_modules/undici/lib/mock/mock-agent.js", "../node_modules/undici/lib/proxy-agent.js", "../node_modules/undici/lib/handler/RetryHandler.js", "../node_modules/undici/lib/global.js", "../node_modules/undici/lib/handler/DecoratorHandler.js", "../node_modules/undici/lib/fetch/headers.js", "../node_modules/undici/lib/fetch/response.js", "../node_modules/undici/lib/fetch/request.js", "../node_modules/undici/lib/fetch/index.js", "../node_modules/undici/lib/fileapi/symbols.js", "../node_modules/undici/lib/fileapi/progressevent.js", "../node_modules/undici/lib/fileapi/encoding.js", "../node_modules/undici/lib/fileapi/util.js", "../node_modules/undici/lib/fileapi/filereader.js", "../node_modules/undici/lib/cache/symbols.js", "../node_modules/undici/lib/cache/util.js", "../node_modules/undici/lib/cache/cache.js", "../node_modules/undici/lib/cache/cachestorage.js", "../node_modules/undici/lib/cookies/constants.js", "../node_modules/undici/lib/cookies/util.js", "../node_modules/undici/lib/cookies/parse.js", "../node_modules/undici/lib/cookies/index.js", "../node_modules/undici/lib/websocket/constants.js", "../node_modules/undici/lib/websocket/symbols.js", "../node_modules/undici/lib/websocket/events.js", "../node_modules/undici/lib/websocket/util.js", "../node_modules/undici/lib/websocket/connection.js", "../node_modules/undici/lib/websocket/frame.js", "../node_modules/undici/lib/websocket/receiver.js", "../node_modules/undici/lib/websocket/websocket.js", "../node_modules/undici/index.js", "../node_modules/@actions/http-client/src/index.ts", "../node_modules/@actions/http-client/src/auth.ts", "../node_modules/@actions/core/src/oidc-utils.ts", "../node_modules/@actions/core/src/summary.ts", "../node_modules/@actions/core/src/path-utils.ts", "../node_modules/@actions/core/src/core.ts", "../node_modules/@actions/github/src/context.ts", "../node_modules/@actions/github/src/internal/utils.ts", "../node_modules/@actions/github/node_modules/universal-user-agent/dist-src/index.js", "../node_modules/@actions/github/node_modules/before-after-hook/lib/register.js", "../node_modules/@actions/github/node_modules/before-after-hook/lib/add.js", "../node_modules/@actions/github/node_modules/before-after-hook/lib/remove.js", "../node_modules/@actions/github/node_modules/before-after-hook/index.js", "../node_modules/@actions/github/node_modules/@octokit/endpoint/dist-node/index.js", "../node_modules/deprecation/dist-node/index.js", "../node_modules/wrappy/wrappy.js", "../node_modules/once/once.js", "../node_modules/@actions/github/node_modules/@octokit/request-error/dist-node/index.js", "../node_modules/@actions/github/node_modules/@octokit/request/dist-node/index.js", "../node_modules/@actions/github/node_modules/@octokit/graphql/dist-node/index.js", "../node_modules/@actions/github/node_modules/@octokit/auth-token/dist-node/index.js", "../node_modules/@actions/github/node_modules/@octokit/core/dist-node/index.js", "../node_modules/@actions/github/node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js", "../node_modules/@actions/github/node_modules/@octokit/plugin-paginate-rest/dist-node/index.js", "../node_modules/@actions/github/src/utils.ts", "../node_modules/@actions/github/src/github.ts", "../node_modules/effect/src/Function.ts", "../node_modules/effect/src/Equivalence.ts", "../node_modules/effect/src/internal/doNotation.ts", "../node_modules/effect/src/internal/version.ts", "../node_modules/effect/src/GlobalValue.ts", "../node_modules/effect/src/Predicate.ts", "../node_modules/effect/src/internal/errors.ts", "../node_modules/effect/src/Utils.ts", "../node_modules/effect/src/Hash.ts", "../node_modules/effect/src/Equal.ts", "../node_modules/effect/src/Inspectable.ts", "../node_modules/effect/src/Pipeable.ts", "../node_modules/effect/src/internal/opCodes/effect.ts", "../node_modules/effect/src/internal/effectable.ts", "../node_modules/effect/src/internal/option.ts", "../node_modules/effect/src/internal/either.ts", "../node_modules/effect/src/Either.ts", "../node_modules/effect/src/internal/array.ts", "../node_modules/effect/src/Order.ts", "../node_modules/effect/src/Option.ts", "../node_modules/effect/src/Tuple.ts", "../node_modules/effect/src/Array.ts", "../node_modules/effect/src/Boolean.ts", "../node_modules/effect/src/Context.ts", "../node_modules/effect/src/internal/context.ts", "../node_modules/effect/src/Chunk.ts", "../node_modules/effect/src/Duration.ts", "../node_modules/effect/src/internal/hashMap/config.ts", "../node_modules/effect/src/internal/hashMap/bitwise.ts", "../node_modules/effect/src/internal/stack.ts", "../node_modules/effect/src/internal/hashMap/array.ts", "../node_modules/effect/src/internal/hashMap/node.ts", "../node_modules/effect/src/internal/hashMap.ts", "../node_modules/effect/src/internal/hashSet.ts", "../node_modules/effect/src/HashSet.ts", "../node_modules/effect/src/MutableRef.ts", "../node_modules/effect/src/internal/fiberId.ts", "../node_modules/effect/src/FiberId.ts", "../node_modules/effect/src/HashMap.ts", "../node_modules/effect/src/List.ts", "../node_modules/effect/src/internal/data.ts", "../node_modules/effect/src/internal/differ/contextPatch.ts", "../node_modules/effect/src/internal/differ/hashSetPatch.ts", "../node_modules/effect/src/internal/differ/readonlyArrayPatch.ts", "../node_modules/effect/src/internal/differ.ts", "../node_modules/effect/src/internal/runtimeFlagsPatch.ts", "../node_modules/effect/src/internal/runtimeFlags.ts", "../node_modules/effect/src/RuntimeFlagsPatch.ts", "../node_modules/effect/src/internal/blockedRequests.ts", "../node_modules/effect/src/internal/opCodes/cause.ts", "../node_modules/effect/src/internal/cause.ts", "../node_modules/effect/src/internal/opCodes/deferred.ts", "../node_modules/effect/src/internal/deferred.ts", "../node_modules/effect/src/internal/singleShotGen.ts", "../node_modules/effect/src/internal/tracer.ts", "../node_modules/effect/src/internal/core.ts", "../node_modules/effect/src/Deferred.ts", "../node_modules/effect/src/Exit.ts", "../node_modules/effect/src/MutableHashMap.ts", "../node_modules/effect/src/MutableList.ts", "../node_modules/effect/src/MutableQueue.ts", "../node_modules/effect/src/internal/clock.ts", "../node_modules/effect/src/Number.ts", "../node_modules/effect/src/RegExp.ts", "../node_modules/effect/src/internal/opCodes/configError.ts", "../node_modules/effect/src/internal/configError.ts", "../node_modules/effect/src/internal/configProvider/pathPatch.ts", "../node_modules/effect/src/internal/opCodes/config.ts", "../node_modules/effect/src/internal/string-utils.ts", "../node_modules/effect/src/internal/configProvider.ts", "../node_modules/effect/src/internal/defaultServices/console.ts", "../node_modules/effect/src/internal/random.ts", "../node_modules/effect/src/internal/defaultServices.ts", "../node_modules/effect/src/Clock.ts", "../node_modules/effect/src/internal/fiberRefs.ts", "../node_modules/effect/src/FiberRefs.ts", "../node_modules/effect/src/LogLevel.ts", "../node_modules/effect/src/internal/logSpan.ts", "../node_modules/effect/src/LogSpan.ts", "../node_modules/effect/src/Readable.ts", "../node_modules/effect/src/internal/ref.ts", "../node_modules/effect/src/Ref.ts", "../node_modules/effect/src/Tracer.ts", "../node_modules/effect/src/internal/fiberRefs/patch.ts", "../node_modules/effect/src/internal/metric/label.ts", "../node_modules/effect/src/internal/core-effect.ts", "../node_modules/effect/src/Effectable.ts", "../node_modules/effect/src/internal/executionStrategy.ts", "../node_modules/effect/src/ExecutionStrategy.ts", "../node_modules/effect/src/FiberRefsPatch.ts", "../node_modules/effect/src/internal/fiberStatus.ts", "../node_modules/effect/src/FiberStatus.ts", "../node_modules/effect/src/Micro.ts", "../node_modules/effect/src/Scheduler.ts", "../node_modules/effect/src/internal/completedRequestMap.ts", "../node_modules/effect/src/internal/concurrency.ts", "../node_modules/effect/src/internal/fiberMessage.ts", "../node_modules/effect/src/internal/fiberScope.ts", "../node_modules/effect/src/internal/fiber.ts", "../node_modules/effect/src/internal/logger.ts", "../node_modules/effect/src/internal/metric/boundaries.ts", "../node_modules/effect/src/internal/metric/keyType.ts", "../node_modules/effect/src/internal/metric/key.ts", "../node_modules/effect/src/internal/metric/state.ts", "../node_modules/effect/src/internal/metric/hook.ts", "../node_modules/effect/src/internal/metric/pair.ts", "../node_modules/effect/src/internal/metric/registry.ts", "../node_modules/effect/src/internal/metric.ts", "../node_modules/effect/src/internal/request.ts", "../node_modules/effect/src/internal/redBlackTree/iterator.ts", "../node_modules/effect/src/internal/redBlackTree/node.ts", "../node_modules/effect/src/internal/redBlackTree.ts", "../node_modules/effect/src/RedBlackTree.ts", "../node_modules/effect/src/SortedSet.ts", "../node_modules/effect/src/internal/supervisor.ts", "../node_modules/effect/src/Differ.ts", "../node_modules/effect/src/internal/supervisor/patch.ts", "../node_modules/effect/src/internal/fiberRuntime.ts", "../node_modules/effect/src/internal/cache.ts", "../node_modules/effect/src/Cause.ts", "../node_modules/effect/src/Effect.ts", "../node_modules/effect/src/internal/schedule/interval.ts", "../node_modules/effect/src/ScheduleInterval.ts", "../node_modules/effect/src/internal/schedule/intervals.ts", "../node_modules/effect/src/ScheduleIntervals.ts", "../node_modules/effect/src/internal/schedule/decision.ts", "../node_modules/effect/src/ScheduleDecision.ts", "../node_modules/effect/src/Scope.ts", "../node_modules/effect/src/internal/schedule.ts", "../node_modules/effect/src/internal/effect/circular.ts", "../node_modules/effect/src/internal/opCodes/layer.ts", "../node_modules/effect/src/Fiber.ts", "../node_modules/effect/src/internal/runtime.ts", "../node_modules/effect/src/internal/synchronizedRef.ts", "../node_modules/effect/src/internal/layer.ts", "../node_modules/effect/src/internal/console.ts", "../node_modules/effect/src/internal/query.ts", "../node_modules/effect/src/Request.ts", "../node_modules/effect/src/Layer.ts", "../node_modules/effect/src/internal/layer/circular.ts", "../node_modules/effect/src/Config.ts", "../node_modules/effect/src/ConfigError.ts", "../node_modules/effect/src/internal/redacted.ts", "../node_modules/effect/src/internal/secret.ts", "../node_modules/effect/src/internal/config.ts", "../node_modules/effect/src/ConfigProvider.ts", "../node_modules/effect/src/ConfigProviderPathPatch.ts", "../node_modules/effect/src/Logger.ts", "../node_modules/effect/src/internal/logger-circular.ts", "../node_modules/effect/src/Redacted.ts", "../src/error-handling.ts", "../src/utils.ts", "../src/services/inputs.ts", "../src/services/logger.ts", "../src/program.ts", "../node_modules/@effect/platform-node/src/NodeRuntime.ts", "../node_modules/@effect/platform/src/Runtime.ts", "../node_modules/@effect/platform-node-shared/src/internal/runtime.ts", "../node_modules/@effect/platform-node-shared/src/NodeRuntime.ts", "../src/run-main.ts", "../src/services/config-provider.ts", "../src/services/github-client.ts", "../src/index.ts"],
  "sourcesContent": [null, null, "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "import crypto from 'crypto';\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('md5').update(bytes).digest();\n}\n\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nconst v3 = v35('v3', 0x30, md5);\nexport default v3;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "import crypto from 'crypto';\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('sha1').update(bytes).digest();\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nconst v5 = v35('v5', 0x50, sha1);\nexport default v5;", "export default '00000000-0000-0000-0000-000000000000';", "import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;", "export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';", null, null, "'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n", "module.exports = require('./lib/tunnel');\n", "module.exports = {\n  kClose: Symbol('close'),\n  kDestroy: Symbol('destroy'),\n  kDispatch: Symbol('dispatch'),\n  kUrl: Symbol('url'),\n  kWriting: Symbol('writing'),\n  kResuming: Symbol('resuming'),\n  kQueue: Symbol('queue'),\n  kConnect: Symbol('connect'),\n  kConnecting: Symbol('connecting'),\n  kHeadersList: Symbol('headers list'),\n  kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),\n  kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),\n  kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),\n  kKeepAliveTimeoutValue: Symbol('keep alive timeout'),\n  kKeepAlive: Symbol('keep alive'),\n  kHeadersTimeout: Symbol('headers timeout'),\n  kBodyTimeout: Symbol('body timeout'),\n  kServerName: Symbol('server name'),\n  kLocalAddress: Symbol('local address'),\n  kHost: Symbol('host'),\n  kNoRef: Symbol('no ref'),\n  kBodyUsed: Symbol('used'),\n  kRunning: Symbol('running'),\n  kBlocking: Symbol('blocking'),\n  kPending: Symbol('pending'),\n  kSize: Symbol('size'),\n  kBusy: Symbol('busy'),\n  kQueued: Symbol('queued'),\n  kFree: Symbol('free'),\n  kConnected: Symbol('connected'),\n  kClosed: Symbol('closed'),\n  kNeedDrain: Symbol('need drain'),\n  kReset: Symbol('reset'),\n  kDestroyed: Symbol.for('nodejs.stream.destroyed'),\n  kMaxHeadersSize: Symbol('max headers size'),\n  kRunningIdx: Symbol('running index'),\n  kPendingIdx: Symbol('pending index'),\n  kError: Symbol('error'),\n  kClients: Symbol('clients'),\n  kClient: Symbol('client'),\n  kParser: Symbol('parser'),\n  kOnDestroyed: Symbol('destroy callbacks'),\n  kPipelining: Symbol('pipelining'),\n  kSocket: Symbol('socket'),\n  kHostHeader: Symbol('host header'),\n  kConnector: Symbol('connector'),\n  kStrictContentLength: Symbol('strict content length'),\n  kMaxRedirections: Symbol('maxRedirections'),\n  kMaxRequests: Symbol('maxRequestsPerClient'),\n  kProxy: Symbol('proxy agent options'),\n  kCounter: Symbol('socket request counter'),\n  kInterceptors: Symbol('dispatch interceptors'),\n  kMaxResponseSize: Symbol('max response size'),\n  kHTTP2Session: Symbol('http2Session'),\n  kHTTP2SessionState: Symbol('http2Session state'),\n  kHTTP2BuildRequest: Symbol('http2 build request'),\n  kHTTP1BuildRequest: Symbol('http1 build request'),\n  kHTTP2CopyHeaders: Symbol('http2 copy headers'),\n  kHTTPConnVersion: Symbol('http connection version'),\n  kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),\n  kConstruct: Symbol('constructable')\n}\n", "'use strict'\n\nclass UndiciError extends Error {\n  constructor (message) {\n    super(message)\n    this.name = 'UndiciError'\n    this.code = 'UND_ERR'\n  }\n}\n\nclass ConnectTimeoutError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ConnectTimeoutError)\n    this.name = 'ConnectTimeoutError'\n    this.message = message || 'Connect Timeout Error'\n    this.code = 'UND_ERR_CONNECT_TIMEOUT'\n  }\n}\n\nclass HeadersTimeoutError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, HeadersTimeoutError)\n    this.name = 'HeadersTimeoutError'\n    this.message = message || 'Headers Timeout Error'\n    this.code = 'UND_ERR_HEADERS_TIMEOUT'\n  }\n}\n\nclass HeadersOverflowError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, HeadersOverflowError)\n    this.name = 'HeadersOverflowError'\n    this.message = message || 'Headers Overflow Error'\n    this.code = 'UND_ERR_HEADERS_OVERFLOW'\n  }\n}\n\nclass BodyTimeoutError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, BodyTimeoutError)\n    this.name = 'BodyTimeoutError'\n    this.message = message || 'Body Timeout Error'\n    this.code = 'UND_ERR_BODY_TIMEOUT'\n  }\n}\n\nclass ResponseStatusCodeError extends UndiciError {\n  constructor (message, statusCode, headers, body) {\n    super(message)\n    Error.captureStackTrace(this, ResponseStatusCodeError)\n    this.name = 'ResponseStatusCodeError'\n    this.message = message || 'Response Status Code Error'\n    this.code = 'UND_ERR_RESPONSE_STATUS_CODE'\n    this.body = body\n    this.status = statusCode\n    this.statusCode = statusCode\n    this.headers = headers\n  }\n}\n\nclass InvalidArgumentError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, InvalidArgumentError)\n    this.name = 'InvalidArgumentError'\n    this.message = message || 'Invalid Argument Error'\n    this.code = 'UND_ERR_INVALID_ARG'\n  }\n}\n\nclass InvalidReturnValueError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, InvalidReturnValueError)\n    this.name = 'InvalidReturnValueError'\n    this.message = message || 'Invalid Return Value Error'\n    this.code = 'UND_ERR_INVALID_RETURN_VALUE'\n  }\n}\n\nclass RequestAbortedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, RequestAbortedError)\n    this.name = 'AbortError'\n    this.message = message || 'Request aborted'\n    this.code = 'UND_ERR_ABORTED'\n  }\n}\n\nclass InformationalError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, InformationalError)\n    this.name = 'InformationalError'\n    this.message = message || 'Request information'\n    this.code = 'UND_ERR_INFO'\n  }\n}\n\nclass RequestContentLengthMismatchError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, RequestContentLengthMismatchError)\n    this.name = 'RequestContentLengthMismatchError'\n    this.message = message || 'Request body length does not match content-length header'\n    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH'\n  }\n}\n\nclass ResponseContentLengthMismatchError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ResponseContentLengthMismatchError)\n    this.name = 'ResponseContentLengthMismatchError'\n    this.message = message || 'Response body length does not match content-length header'\n    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH'\n  }\n}\n\nclass ClientDestroyedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ClientDestroyedError)\n    this.name = 'ClientDestroyedError'\n    this.message = message || 'The client is destroyed'\n    this.code = 'UND_ERR_DESTROYED'\n  }\n}\n\nclass ClientClosedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ClientClosedError)\n    this.name = 'ClientClosedError'\n    this.message = message || 'The client is closed'\n    this.code = 'UND_ERR_CLOSED'\n  }\n}\n\nclass SocketError extends UndiciError {\n  constructor (message, socket) {\n    super(message)\n    Error.captureStackTrace(this, SocketError)\n    this.name = 'SocketError'\n    this.message = message || 'Socket error'\n    this.code = 'UND_ERR_SOCKET'\n    this.socket = socket\n  }\n}\n\nclass NotSupportedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, NotSupportedError)\n    this.name = 'NotSupportedError'\n    this.message = message || 'Not supported error'\n    this.code = 'UND_ERR_NOT_SUPPORTED'\n  }\n}\n\nclass BalancedPoolMissingUpstreamError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, NotSupportedError)\n    this.name = 'MissingUpstreamError'\n    this.message = message || 'No upstream has been added to the BalancedPool'\n    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM'\n  }\n}\n\nclass HTTPParserError extends Error {\n  constructor (message, code, data) {\n    super(message)\n    Error.captureStackTrace(this, HTTPParserError)\n    this.name = 'HTTPParserError'\n    this.code = code ? `HPE_${code}` : undefined\n    this.data = data ? data.toString() : undefined\n  }\n}\n\nclass ResponseExceededMaxSizeError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ResponseExceededMaxSizeError)\n    this.name = 'ResponseExceededMaxSizeError'\n    this.message = message || 'Response content exceeded max size'\n    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE'\n  }\n}\n\nclass RequestRetryError extends UndiciError {\n  constructor (message, code, { headers, data }) {\n    super(message)\n    Error.captureStackTrace(this, RequestRetryError)\n    this.name = 'RequestRetryError'\n    this.message = message || 'Request retry error'\n    this.code = 'UND_ERR_REQ_RETRY'\n    this.statusCode = code\n    this.data = data\n    this.headers = headers\n  }\n}\n\nmodule.exports = {\n  HTTPParserError,\n  UndiciError,\n  HeadersTimeoutError,\n  HeadersOverflowError,\n  BodyTimeoutError,\n  RequestContentLengthMismatchError,\n  ConnectTimeoutError,\n  ResponseStatusCodeError,\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError,\n  ClientDestroyedError,\n  ClientClosedError,\n  InformationalError,\n  SocketError,\n  NotSupportedError,\n  ResponseContentLengthMismatchError,\n  BalancedPoolMissingUpstreamError,\n  ResponseExceededMaxSizeError,\n  RequestRetryError\n}\n", "'use strict'\n\n/** @type {Record<string, string | undefined>} */\nconst headerNameLowerCasedRecord = {}\n\n// https://developer.mozilla.org/docs/Web/HTTP/Headers\nconst wellknownHeaderNames = [\n  'Accept',\n  'Accept-Encoding',\n  'Accept-Language',\n  'Accept-Ranges',\n  'Access-Control-Allow-Credentials',\n  'Access-Control-Allow-Headers',\n  'Access-Control-Allow-Methods',\n  'Access-Control-Allow-Origin',\n  'Access-Control-Expose-Headers',\n  'Access-Control-Max-Age',\n  'Access-Control-Request-Headers',\n  'Access-Control-Request-Method',\n  'Age',\n  'Allow',\n  'Alt-Svc',\n  'Alt-Used',\n  'Authorization',\n  'Cache-Control',\n  'Clear-Site-Data',\n  'Connection',\n  'Content-Disposition',\n  'Content-Encoding',\n  'Content-Language',\n  'Content-Length',\n  'Content-Location',\n  'Content-Range',\n  'Content-Security-Policy',\n  'Content-Security-Policy-Report-Only',\n  'Content-Type',\n  'Cookie',\n  'Cross-Origin-Embedder-Policy',\n  'Cross-Origin-Opener-Policy',\n  'Cross-Origin-Resource-Policy',\n  'Date',\n  'Device-Memory',\n  'Downlink',\n  'ECT',\n  'ETag',\n  'Expect',\n  'Expect-CT',\n  'Expires',\n  'Forwarded',\n  'From',\n  'Host',\n  'If-Match',\n  'If-Modified-Since',\n  'If-None-Match',\n  'If-Range',\n  'If-Unmodified-Since',\n  'Keep-Alive',\n  'Last-Modified',\n  'Link',\n  'Location',\n  'Max-Forwards',\n  'Origin',\n  'Permissions-Policy',\n  'Pragma',\n  'Proxy-Authenticate',\n  'Proxy-Authorization',\n  'RTT',\n  'Range',\n  'Referer',\n  'Referrer-Policy',\n  'Refresh',\n  'Retry-After',\n  'Sec-WebSocket-Accept',\n  'Sec-WebSocket-Extensions',\n  'Sec-WebSocket-Key',\n  'Sec-WebSocket-Protocol',\n  'Sec-WebSocket-Version',\n  'Server',\n  'Server-Timing',\n  'Service-Worker-Allowed',\n  'Service-Worker-Navigation-Preload',\n  'Set-Cookie',\n  'SourceMap',\n  'Strict-Transport-Security',\n  'Supports-Loading-Mode',\n  'TE',\n  'Timing-Allow-Origin',\n  'Trailer',\n  'Transfer-Encoding',\n  'Upgrade',\n  'Upgrade-Insecure-Requests',\n  'User-Agent',\n  'Vary',\n  'Via',\n  'WWW-Authenticate',\n  'X-Content-Type-Options',\n  'X-DNS-Prefetch-Control',\n  'X-Frame-Options',\n  'X-Permitted-Cross-Domain-Policies',\n  'X-Powered-By',\n  'X-Requested-With',\n  'X-XSS-Protection'\n]\n\nfor (let i = 0; i < wellknownHeaderNames.length; ++i) {\n  const key = wellknownHeaderNames[i]\n  const lowerCasedKey = key.toLowerCase()\n  headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] =\n    lowerCasedKey\n}\n\n// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.\nObject.setPrototypeOf(headerNameLowerCasedRecord, null)\n\nmodule.exports = {\n  wellknownHeaderNames,\n  headerNameLowerCasedRecord\n}\n", "'use strict'\n\nconst assert = require('assert')\nconst { kDestroyed, kBodyUsed } = require('./symbols')\nconst { IncomingMessage } = require('http')\nconst stream = require('stream')\nconst net = require('net')\nconst { InvalidArgumentError } = require('./errors')\nconst { Blob } = require('buffer')\nconst nodeUtil = require('util')\nconst { stringify } = require('querystring')\nconst { headerNameLowerCasedRecord } = require('./constants')\n\nconst [nodeMajor, nodeMinor] = process.versions.node.split('.').map(v => Number(v))\n\nfunction nop () {}\n\nfunction isStream (obj) {\n  return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function'\n}\n\n// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)\nfunction isBlobLike (object) {\n  return (Blob && object instanceof Blob) || (\n    object &&\n    typeof object === 'object' &&\n    (typeof object.stream === 'function' ||\n      typeof object.arrayBuffer === 'function') &&\n    /^(Blob|File)$/.test(object[Symbol.toStringTag])\n  )\n}\n\nfunction buildURL (url, queryParams) {\n  if (url.includes('?') || url.includes('#')) {\n    throw new Error('Query params cannot be passed when url already contains \"?\" or \"#\".')\n  }\n\n  const stringified = stringify(queryParams)\n\n  if (stringified) {\n    url += '?' + stringified\n  }\n\n  return url\n}\n\nfunction parseURL (url) {\n  if (typeof url === 'string') {\n    url = new URL(url)\n\n    if (!/^https?:/.test(url.origin || url.protocol)) {\n      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')\n    }\n\n    return url\n  }\n\n  if (!url || typeof url !== 'object') {\n    throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.')\n  }\n\n  if (!/^https?:/.test(url.origin || url.protocol)) {\n    throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')\n  }\n\n  if (!(url instanceof URL)) {\n    if (url.port != null && url.port !== '' && !Number.isFinite(parseInt(url.port))) {\n      throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.')\n    }\n\n    if (url.path != null && typeof url.path !== 'string') {\n      throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.')\n    }\n\n    if (url.pathname != null && typeof url.pathname !== 'string') {\n      throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.')\n    }\n\n    if (url.hostname != null && typeof url.hostname !== 'string') {\n      throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.')\n    }\n\n    if (url.origin != null && typeof url.origin !== 'string') {\n      throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.')\n    }\n\n    const port = url.port != null\n      ? url.port\n      : (url.protocol === 'https:' ? 443 : 80)\n    let origin = url.origin != null\n      ? url.origin\n      : `${url.protocol}//${url.hostname}:${port}`\n    let path = url.path != null\n      ? url.path\n      : `${url.pathname || ''}${url.search || ''}`\n\n    if (origin.endsWith('/')) {\n      origin = origin.substring(0, origin.length - 1)\n    }\n\n    if (path && !path.startsWith('/')) {\n      path = `/${path}`\n    }\n    // new URL(path, origin) is unsafe when `path` contains an absolute URL\n    // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:\n    // If first parameter is a relative URL, second param is required, and will be used as the base URL.\n    // If first parameter is an absolute URL, a given second param will be ignored.\n    url = new URL(origin + path)\n  }\n\n  return url\n}\n\nfunction parseOrigin (url) {\n  url = parseURL(url)\n\n  if (url.pathname !== '/' || url.search || url.hash) {\n    throw new InvalidArgumentError('invalid url')\n  }\n\n  return url\n}\n\nfunction getHostname (host) {\n  if (host[0] === '[') {\n    const idx = host.indexOf(']')\n\n    assert(idx !== -1)\n    return host.substring(1, idx)\n  }\n\n  const idx = host.indexOf(':')\n  if (idx === -1) return host\n\n  return host.substring(0, idx)\n}\n\n// IP addresses are not valid server names per RFC6066\n// > Currently, the only server names supported are DNS hostnames\nfunction getServerName (host) {\n  if (!host) {\n    return null\n  }\n\n  assert.strictEqual(typeof host, 'string')\n\n  const servername = getHostname(host)\n  if (net.isIP(servername)) {\n    return ''\n  }\n\n  return servername\n}\n\nfunction deepClone (obj) {\n  return JSON.parse(JSON.stringify(obj))\n}\n\nfunction isAsyncIterable (obj) {\n  return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function')\n}\n\nfunction isIterable (obj) {\n  return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'))\n}\n\nfunction bodyLength (body) {\n  if (body == null) {\n    return 0\n  } else if (isStream(body)) {\n    const state = body._readableState\n    return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length)\n      ? state.length\n      : null\n  } else if (isBlobLike(body)) {\n    return body.size != null ? body.size : null\n  } else if (isBuffer(body)) {\n    return body.byteLength\n  }\n\n  return null\n}\n\nfunction isDestroyed (stream) {\n  return !stream || !!(stream.destroyed || stream[kDestroyed])\n}\n\nfunction isReadableAborted (stream) {\n  const state = stream && stream._readableState\n  return isDestroyed(stream) && state && !state.endEmitted\n}\n\nfunction destroy (stream, err) {\n  if (stream == null || !isStream(stream) || isDestroyed(stream)) {\n    return\n  }\n\n  if (typeof stream.destroy === 'function') {\n    if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {\n      // See: https://github.com/nodejs/node/pull/38505/files\n      stream.socket = null\n    }\n\n    stream.destroy(err)\n  } else if (err) {\n    process.nextTick((stream, err) => {\n      stream.emit('error', err)\n    }, stream, err)\n  }\n\n  if (stream.destroyed !== true) {\n    stream[kDestroyed] = true\n  }\n}\n\nconst KEEPALIVE_TIMEOUT_EXPR = /timeout=(\\d+)/\nfunction parseKeepAliveTimeout (val) {\n  const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR)\n  return m ? parseInt(m[1], 10) * 1000 : null\n}\n\n/**\n * Retrieves a header name and returns its lowercase value.\n * @param {string | Buffer} value Header name\n * @returns {string}\n */\nfunction headerNameToString (value) {\n  return headerNameLowerCasedRecord[value] || value.toLowerCase()\n}\n\nfunction parseHeaders (headers, obj = {}) {\n  // For H2 support\n  if (!Array.isArray(headers)) return headers\n\n  for (let i = 0; i < headers.length; i += 2) {\n    const key = headers[i].toString().toLowerCase()\n    let val = obj[key]\n\n    if (!val) {\n      if (Array.isArray(headers[i + 1])) {\n        obj[key] = headers[i + 1].map(x => x.toString('utf8'))\n      } else {\n        obj[key] = headers[i + 1].toString('utf8')\n      }\n    } else {\n      if (!Array.isArray(val)) {\n        val = [val]\n        obj[key] = val\n      }\n      val.push(headers[i + 1].toString('utf8'))\n    }\n  }\n\n  // See https://github.com/nodejs/node/pull/46528\n  if ('content-length' in obj && 'content-disposition' in obj) {\n    obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1')\n  }\n\n  return obj\n}\n\nfunction parseRawHeaders (headers) {\n  const ret = []\n  let hasContentLength = false\n  let contentDispositionIdx = -1\n\n  for (let n = 0; n < headers.length; n += 2) {\n    const key = headers[n + 0].toString()\n    const val = headers[n + 1].toString('utf8')\n\n    if (key.length === 14 && (key === 'content-length' || key.toLowerCase() === 'content-length')) {\n      ret.push(key, val)\n      hasContentLength = true\n    } else if (key.length === 19 && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {\n      contentDispositionIdx = ret.push(key, val) - 1\n    } else {\n      ret.push(key, val)\n    }\n  }\n\n  // See https://github.com/nodejs/node/pull/46528\n  if (hasContentLength && contentDispositionIdx !== -1) {\n    ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1')\n  }\n\n  return ret\n}\n\nfunction isBuffer (buffer) {\n  // See, https://github.com/mcollina/undici/pull/319\n  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer)\n}\n\nfunction validateHandler (handler, method, upgrade) {\n  if (!handler || typeof handler !== 'object') {\n    throw new InvalidArgumentError('handler must be an object')\n  }\n\n  if (typeof handler.onConnect !== 'function') {\n    throw new InvalidArgumentError('invalid onConnect method')\n  }\n\n  if (typeof handler.onError !== 'function') {\n    throw new InvalidArgumentError('invalid onError method')\n  }\n\n  if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {\n    throw new InvalidArgumentError('invalid onBodySent method')\n  }\n\n  if (upgrade || method === 'CONNECT') {\n    if (typeof handler.onUpgrade !== 'function') {\n      throw new InvalidArgumentError('invalid onUpgrade method')\n    }\n  } else {\n    if (typeof handler.onHeaders !== 'function') {\n      throw new InvalidArgumentError('invalid onHeaders method')\n    }\n\n    if (typeof handler.onData !== 'function') {\n      throw new InvalidArgumentError('invalid onData method')\n    }\n\n    if (typeof handler.onComplete !== 'function') {\n      throw new InvalidArgumentError('invalid onComplete method')\n    }\n  }\n}\n\n// A body is disturbed if it has been read from and it cannot\n// be re-used without losing state or data.\nfunction isDisturbed (body) {\n  return !!(body && (\n    stream.isDisturbed\n      ? stream.isDisturbed(body) || body[kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?\n      : body[kBodyUsed] ||\n        body.readableDidRead ||\n        (body._readableState && body._readableState.dataEmitted) ||\n        isReadableAborted(body)\n  ))\n}\n\nfunction isErrored (body) {\n  return !!(body && (\n    stream.isErrored\n      ? stream.isErrored(body)\n      : /state: 'errored'/.test(nodeUtil.inspect(body)\n      )))\n}\n\nfunction isReadable (body) {\n  return !!(body && (\n    stream.isReadable\n      ? stream.isReadable(body)\n      : /state: 'readable'/.test(nodeUtil.inspect(body)\n      )))\n}\n\nfunction getSocketInfo (socket) {\n  return {\n    localAddress: socket.localAddress,\n    localPort: socket.localPort,\n    remoteAddress: socket.remoteAddress,\n    remotePort: socket.remotePort,\n    remoteFamily: socket.remoteFamily,\n    timeout: socket.timeout,\n    bytesWritten: socket.bytesWritten,\n    bytesRead: socket.bytesRead\n  }\n}\n\nasync function * convertIterableToBuffer (iterable) {\n  for await (const chunk of iterable) {\n    yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)\n  }\n}\n\nlet ReadableStream\nfunction ReadableStreamFrom (iterable) {\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  if (ReadableStream.from) {\n    return ReadableStream.from(convertIterableToBuffer(iterable))\n  }\n\n  let iterator\n  return new ReadableStream(\n    {\n      async start () {\n        iterator = iterable[Symbol.asyncIterator]()\n      },\n      async pull (controller) {\n        const { done, value } = await iterator.next()\n        if (done) {\n          queueMicrotask(() => {\n            controller.close()\n          })\n        } else {\n          const buf = Buffer.isBuffer(value) ? value : Buffer.from(value)\n          controller.enqueue(new Uint8Array(buf))\n        }\n        return controller.desiredSize > 0\n      },\n      async cancel (reason) {\n        await iterator.return()\n      }\n    },\n    0\n  )\n}\n\n// The chunk should be a FormData instance and contains\n// all the required methods.\nfunction isFormDataLike (object) {\n  return (\n    object &&\n    typeof object === 'object' &&\n    typeof object.append === 'function' &&\n    typeof object.delete === 'function' &&\n    typeof object.get === 'function' &&\n    typeof object.getAll === 'function' &&\n    typeof object.has === 'function' &&\n    typeof object.set === 'function' &&\n    object[Symbol.toStringTag] === 'FormData'\n  )\n}\n\nfunction throwIfAborted (signal) {\n  if (!signal) { return }\n  if (typeof signal.throwIfAborted === 'function') {\n    signal.throwIfAborted()\n  } else {\n    if (signal.aborted) {\n      // DOMException not available < v17.0.0\n      const err = new Error('The operation was aborted')\n      err.name = 'AbortError'\n      throw err\n    }\n  }\n}\n\nfunction addAbortListener (signal, listener) {\n  if ('addEventListener' in signal) {\n    signal.addEventListener('abort', listener, { once: true })\n    return () => signal.removeEventListener('abort', listener)\n  }\n  signal.addListener('abort', listener)\n  return () => signal.removeListener('abort', listener)\n}\n\nconst hasToWellFormed = !!String.prototype.toWellFormed\n\n/**\n * @param {string} val\n */\nfunction toUSVString (val) {\n  if (hasToWellFormed) {\n    return `${val}`.toWellFormed()\n  } else if (nodeUtil.toUSVString) {\n    return nodeUtil.toUSVString(val)\n  }\n\n  return `${val}`\n}\n\n// Parsed accordingly to RFC 9110\n// https://www.rfc-editor.org/rfc/rfc9110#field.content-range\nfunction parseRangeHeader (range) {\n  if (range == null || range === '') return { start: 0, end: null, size: null }\n\n  const m = range ? range.match(/^bytes (\\d+)-(\\d+)\\/(\\d+)?$/) : null\n  return m\n    ? {\n        start: parseInt(m[1]),\n        end: m[2] ? parseInt(m[2]) : null,\n        size: m[3] ? parseInt(m[3]) : null\n      }\n    : null\n}\n\nconst kEnumerableProperty = Object.create(null)\nkEnumerableProperty.enumerable = true\n\nmodule.exports = {\n  kEnumerableProperty,\n  nop,\n  isDisturbed,\n  isErrored,\n  isReadable,\n  toUSVString,\n  isReadableAborted,\n  isBlobLike,\n  parseOrigin,\n  parseURL,\n  getServerName,\n  isStream,\n  isIterable,\n  isAsyncIterable,\n  isDestroyed,\n  headerNameToString,\n  parseRawHeaders,\n  parseHeaders,\n  parseKeepAliveTimeout,\n  destroy,\n  bodyLength,\n  deepClone,\n  ReadableStreamFrom,\n  isBuffer,\n  validateHandler,\n  getSocketInfo,\n  isFormDataLike,\n  buildURL,\n  throwIfAborted,\n  addAbortListener,\n  parseRangeHeader,\n  nodeMajor,\n  nodeMinor,\n  nodeHasAutoSelectFamily: nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 13),\n  safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE']\n}\n", "'use strict'\n\nlet fastNow = Date.now()\nlet fastNowTimeout\n\nconst fastTimers = []\n\nfunction onTimeout () {\n  fastNow = Date.now()\n\n  let len = fastTimers.length\n  let idx = 0\n  while (idx < len) {\n    const timer = fastTimers[idx]\n\n    if (timer.state === 0) {\n      timer.state = fastNow + timer.delay\n    } else if (timer.state > 0 && fastNow >= timer.state) {\n      timer.state = -1\n      timer.callback(timer.opaque)\n    }\n\n    if (timer.state === -1) {\n      timer.state = -2\n      if (idx !== len - 1) {\n        fastTimers[idx] = fastTimers.pop()\n      } else {\n        fastTimers.pop()\n      }\n      len -= 1\n    } else {\n      idx += 1\n    }\n  }\n\n  if (fastTimers.length > 0) {\n    refreshTimeout()\n  }\n}\n\nfunction refreshTimeout () {\n  if (fastNowTimeout && fastNowTimeout.refresh) {\n    fastNowTimeout.refresh()\n  } else {\n    clearTimeout(fastNowTimeout)\n    fastNowTimeout = setTimeout(onTimeout, 1e3)\n    if (fastNowTimeout.unref) {\n      fastNowTimeout.unref()\n    }\n  }\n}\n\nclass Timeout {\n  constructor (callback, delay, opaque) {\n    this.callback = callback\n    this.delay = delay\n    this.opaque = opaque\n\n    //  -2 not in timer list\n    //  -1 in timer list but inactive\n    //   0 in timer list waiting for time\n    // > 0 in timer list waiting for time to expire\n    this.state = -2\n\n    this.refresh()\n  }\n\n  refresh () {\n    if (this.state === -2) {\n      fastTimers.push(this)\n      if (!fastNowTimeout || fastTimers.length === 1) {\n        refreshTimeout()\n      }\n    }\n\n    this.state = 0\n  }\n\n  clear () {\n    this.state = -1\n  }\n}\n\nmodule.exports = {\n  setTimeout (callback, delay, opaque) {\n    return delay < 1e3\n      ? setTimeout(callback, delay, opaque)\n      : new Timeout(callback, delay, opaque)\n  },\n  clearTimeout (timeout) {\n    if (timeout instanceof Timeout) {\n      timeout.clear()\n    } else {\n      clearTimeout(timeout)\n    }\n  }\n}\n", "'use strict'\n\n/**\n * Copyright Brian White. All rights reserved.\n *\n * @see https://github.com/mscdex/streamsearch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n * Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation\n * by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool\n */\nconst EventEmitter = require('node:events').EventEmitter\nconst inherits = require('node:util').inherits\n\nfunction SBMH (needle) {\n  if (typeof needle === 'string') {\n    needle = Buffer.from(needle)\n  }\n\n  if (!Buffer.isBuffer(needle)) {\n    throw new TypeError('The needle has to be a String or a Buffer.')\n  }\n\n  const needleLength = needle.length\n\n  if (needleLength === 0) {\n    throw new Error('The needle cannot be an empty String/Buffer.')\n  }\n\n  if (needleLength > 256) {\n    throw new Error('The needle cannot have a length bigger than 256.')\n  }\n\n  this.maxMatches = Infinity\n  this.matches = 0\n\n  this._occ = new Array(256)\n    .fill(needleLength) // Initialize occurrence table.\n  this._lookbehind_size = 0\n  this._needle = needle\n  this._bufpos = 0\n\n  this._lookbehind = Buffer.alloc(needleLength)\n\n  // Populate occurrence table with analysis of the needle,\n  // ignoring last letter.\n  for (var i = 0; i < needleLength - 1; ++i) { // eslint-disable-line no-var\n    this._occ[needle[i]] = needleLength - 1 - i\n  }\n}\ninherits(SBMH, EventEmitter)\n\nSBMH.prototype.reset = function () {\n  this._lookbehind_size = 0\n  this.matches = 0\n  this._bufpos = 0\n}\n\nSBMH.prototype.push = function (chunk, pos) {\n  if (!Buffer.isBuffer(chunk)) {\n    chunk = Buffer.from(chunk, 'binary')\n  }\n  const chlen = chunk.length\n  this._bufpos = pos || 0\n  let r\n  while (r !== chlen && this.matches < this.maxMatches) { r = this._sbmh_feed(chunk) }\n  return r\n}\n\nSBMH.prototype._sbmh_feed = function (data) {\n  const len = data.length\n  const needle = this._needle\n  const needleLength = needle.length\n  const lastNeedleChar = needle[needleLength - 1]\n\n  // Positive: points to a position in `data`\n  //           pos == 3 points to data[3]\n  // Negative: points to a position in the lookbehind buffer\n  //           pos == -2 points to lookbehind[lookbehind_size - 2]\n  let pos = -this._lookbehind_size\n  let ch\n\n  if (pos < 0) {\n    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool\n    // search with character lookup code that considers both the\n    // lookbehind buffer and the current round's haystack data.\n    //\n    // Loop until\n    //   there is a match.\n    // or until\n    //   we've moved past the position that requires the\n    //   lookbehind buffer. In this case we switch to the\n    //   optimized loop.\n    // or until\n    //   the character to look at lies outside the haystack.\n    while (pos < 0 && pos <= len - needleLength) {\n      ch = this._sbmh_lookup_char(data, pos + needleLength - 1)\n\n      if (\n        ch === lastNeedleChar &&\n        this._sbmh_memcmp(data, pos, needleLength - 1)\n      ) {\n        this._lookbehind_size = 0\n        ++this.matches\n        this.emit('info', true)\n\n        return (this._bufpos = pos + needleLength)\n      }\n      pos += this._occ[ch]\n    }\n\n    // No match.\n\n    if (pos < 0) {\n      // There's too few data for Boyer-Moore-Horspool to run,\n      // so let's use a different algorithm to skip as much as\n      // we can.\n      // Forward pos until\n      //   the trailing part of lookbehind + data\n      //   looks like the beginning of the needle\n      // or until\n      //   pos == 0\n      while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) { ++pos }\n    }\n\n    if (pos >= 0) {\n      // Discard lookbehind buffer.\n      this.emit('info', false, this._lookbehind, 0, this._lookbehind_size)\n      this._lookbehind_size = 0\n    } else {\n      // Cut off part of the lookbehind buffer that has\n      // been processed and append the entire haystack\n      // into it.\n      const bytesToCutOff = this._lookbehind_size + pos\n      if (bytesToCutOff > 0) {\n        // The cut off data is guaranteed not to contain the needle.\n        this.emit('info', false, this._lookbehind, 0, bytesToCutOff)\n      }\n\n      this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff,\n        this._lookbehind_size - bytesToCutOff)\n      this._lookbehind_size -= bytesToCutOff\n\n      data.copy(this._lookbehind, this._lookbehind_size)\n      this._lookbehind_size += len\n\n      this._bufpos = len\n      return len\n    }\n  }\n\n  pos += (pos >= 0) * this._bufpos\n\n  // Lookbehind buffer is now empty. We only need to check if the\n  // needle is in the haystack.\n  if (data.indexOf(needle, pos) !== -1) {\n    pos = data.indexOf(needle, pos)\n    ++this.matches\n    if (pos > 0) { this.emit('info', true, data, this._bufpos, pos) } else { this.emit('info', true) }\n\n    return (this._bufpos = pos + needleLength)\n  } else {\n    pos = len - needleLength\n  }\n\n  // There was no match. If there's trailing haystack data that we cannot\n  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing\n  // data is less than the needle size) then match using a modified\n  // algorithm that starts matching from the beginning instead of the end.\n  // Whatever trailing data is left after running this algorithm is added to\n  // the lookbehind buffer.\n  while (\n    pos < len &&\n    (\n      data[pos] !== needle[0] ||\n      (\n        (Buffer.compare(\n          data.subarray(pos, pos + len - pos),\n          needle.subarray(0, len - pos)\n        ) !== 0)\n      )\n    )\n  ) {\n    ++pos\n  }\n  if (pos < len) {\n    data.copy(this._lookbehind, 0, pos, pos + (len - pos))\n    this._lookbehind_size = len - pos\n  }\n\n  // Everything until pos is guaranteed not to contain needle data.\n  if (pos > 0) { this.emit('info', false, data, this._bufpos, pos < len ? pos : len) }\n\n  this._bufpos = len\n  return len\n}\n\nSBMH.prototype._sbmh_lookup_char = function (data, pos) {\n  return (pos < 0)\n    ? this._lookbehind[this._lookbehind_size + pos]\n    : data[pos]\n}\n\nSBMH.prototype._sbmh_memcmp = function (data, pos, len) {\n  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var\n    if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) { return false }\n  }\n  return true\n}\n\nmodule.exports = SBMH\n", "'use strict'\n\nconst inherits = require('node:util').inherits\nconst ReadableStream = require('node:stream').Readable\n\nfunction PartStream (opts) {\n  ReadableStream.call(this, opts)\n}\ninherits(PartStream, ReadableStream)\n\nPartStream.prototype._read = function (n) {}\n\nmodule.exports = PartStream\n", "'use strict'\n\nmodule.exports = function getLimit (limits, name, defaultLimit) {\n  if (\n    !limits ||\n    limits[name] === undefined ||\n    limits[name] === null\n  ) { return defaultLimit }\n\n  if (\n    typeof limits[name] !== 'number' ||\n    isNaN(limits[name])\n  ) { throw new TypeError('Limit ' + name + ' is not a valid number') }\n\n  return limits[name]\n}\n", "'use strict'\n\nconst EventEmitter = require('node:events').EventEmitter\nconst inherits = require('node:util').inherits\nconst getLimit = require('../../../lib/utils/getLimit')\n\nconst StreamSearch = require('../../streamsearch/sbmh')\n\nconst B_DCRLF = Buffer.from('\\r\\n\\r\\n')\nconst RE_CRLF = /\\r\\n/g\nconst RE_HDR = /^([^:]+):[ \\t]?([\\x00-\\xFF]+)?$/ // eslint-disable-line no-control-regex\n\nfunction HeaderParser (cfg) {\n  EventEmitter.call(this)\n\n  cfg = cfg || {}\n  const self = this\n  this.nread = 0\n  this.maxed = false\n  this.npairs = 0\n  this.maxHeaderPairs = getLimit(cfg, 'maxHeaderPairs', 2000)\n  this.maxHeaderSize = getLimit(cfg, 'maxHeaderSize', 80 * 1024)\n  this.buffer = ''\n  this.header = {}\n  this.finished = false\n  this.ss = new StreamSearch(B_DCRLF)\n  this.ss.on('info', function (isMatch, data, start, end) {\n    if (data && !self.maxed) {\n      if (self.nread + end - start >= self.maxHeaderSize) {\n        end = self.maxHeaderSize - self.nread + start\n        self.nread = self.maxHeaderSize\n        self.maxed = true\n      } else { self.nread += (end - start) }\n\n      self.buffer += data.toString('binary', start, end)\n    }\n    if (isMatch) { self._finish() }\n  })\n}\ninherits(HeaderParser, EventEmitter)\n\nHeaderParser.prototype.push = function (data) {\n  const r = this.ss.push(data)\n  if (this.finished) { return r }\n}\n\nHeaderParser.prototype.reset = function () {\n  this.finished = false\n  this.buffer = ''\n  this.header = {}\n  this.ss.reset()\n}\n\nHeaderParser.prototype._finish = function () {\n  if (this.buffer) { this._parseHeader() }\n  this.ss.matches = this.ss.maxMatches\n  const header = this.header\n  this.header = {}\n  this.buffer = ''\n  this.finished = true\n  this.nread = this.npairs = 0\n  this.maxed = false\n  this.emit('header', header)\n}\n\nHeaderParser.prototype._parseHeader = function () {\n  if (this.npairs === this.maxHeaderPairs) { return }\n\n  const lines = this.buffer.split(RE_CRLF)\n  const len = lines.length\n  let m, h\n\n  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var\n    if (lines[i].length === 0) { continue }\n    if (lines[i][0] === '\\t' || lines[i][0] === ' ') {\n      // folded header content\n      // RFC2822 says to just remove the CRLF and not the whitespace following\n      // it, so we follow the RFC and include the leading whitespace ...\n      if (h) {\n        this.header[h][this.header[h].length - 1] += lines[i]\n        continue\n      }\n    }\n\n    const posColon = lines[i].indexOf(':')\n    if (\n      posColon === -1 ||\n      posColon === 0\n    ) {\n      return\n    }\n    m = RE_HDR.exec(lines[i])\n    h = m[1].toLowerCase()\n    this.header[h] = this.header[h] || []\n    this.header[h].push((m[2] || ''))\n    if (++this.npairs === this.maxHeaderPairs) { break }\n  }\n}\n\nmodule.exports = HeaderParser\n", "'use strict'\n\nconst WritableStream = require('node:stream').Writable\nconst inherits = require('node:util').inherits\n\nconst StreamSearch = require('../../streamsearch/sbmh')\n\nconst PartStream = require('./PartStream')\nconst HeaderParser = require('./HeaderParser')\n\nconst DASH = 45\nconst B_ONEDASH = Buffer.from('-')\nconst B_CRLF = Buffer.from('\\r\\n')\nconst EMPTY_FN = function () {}\n\nfunction Dicer (cfg) {\n  if (!(this instanceof Dicer)) { return new Dicer(cfg) }\n  WritableStream.call(this, cfg)\n\n  if (!cfg || (!cfg.headerFirst && typeof cfg.boundary !== 'string')) { throw new TypeError('Boundary required') }\n\n  if (typeof cfg.boundary === 'string') { this.setBoundary(cfg.boundary) } else { this._bparser = undefined }\n\n  this._headerFirst = cfg.headerFirst\n\n  this._dashes = 0\n  this._parts = 0\n  this._finished = false\n  this._realFinish = false\n  this._isPreamble = true\n  this._justMatched = false\n  this._firstWrite = true\n  this._inHeader = true\n  this._part = undefined\n  this._cb = undefined\n  this._ignoreData = false\n  this._partOpts = { highWaterMark: cfg.partHwm }\n  this._pause = false\n\n  const self = this\n  this._hparser = new HeaderParser(cfg)\n  this._hparser.on('header', function (header) {\n    self._inHeader = false\n    self._part.emit('header', header)\n  })\n}\ninherits(Dicer, WritableStream)\n\nDicer.prototype.emit = function (ev) {\n  if (ev === 'finish' && !this._realFinish) {\n    if (!this._finished) {\n      const self = this\n      process.nextTick(function () {\n        self.emit('error', new Error('Unexpected end of multipart data'))\n        if (self._part && !self._ignoreData) {\n          const type = (self._isPreamble ? 'Preamble' : 'Part')\n          self._part.emit('error', new Error(type + ' terminated early due to unexpected end of multipart data'))\n          self._part.push(null)\n          process.nextTick(function () {\n            self._realFinish = true\n            self.emit('finish')\n            self._realFinish = false\n          })\n          return\n        }\n        self._realFinish = true\n        self.emit('finish')\n        self._realFinish = false\n      })\n    }\n  } else { WritableStream.prototype.emit.apply(this, arguments) }\n}\n\nDicer.prototype._write = function (data, encoding, cb) {\n  // ignore unexpected data (e.g. extra trailer data after finished)\n  if (!this._hparser && !this._bparser) { return cb() }\n\n  if (this._headerFirst && this._isPreamble) {\n    if (!this._part) {\n      this._part = new PartStream(this._partOpts)\n      if (this.listenerCount('preamble') !== 0) { this.emit('preamble', this._part) } else { this._ignore() }\n    }\n    const r = this._hparser.push(data)\n    if (!this._inHeader && r !== undefined && r < data.length) { data = data.slice(r) } else { return cb() }\n  }\n\n  // allows for \"easier\" testing\n  if (this._firstWrite) {\n    this._bparser.push(B_CRLF)\n    this._firstWrite = false\n  }\n\n  this._bparser.push(data)\n\n  if (this._pause) { this._cb = cb } else { cb() }\n}\n\nDicer.prototype.reset = function () {\n  this._part = undefined\n  this._bparser = undefined\n  this._hparser = undefined\n}\n\nDicer.prototype.setBoundary = function (boundary) {\n  const self = this\n  this._bparser = new StreamSearch('\\r\\n--' + boundary)\n  this._bparser.on('info', function (isMatch, data, start, end) {\n    self._oninfo(isMatch, data, start, end)\n  })\n}\n\nDicer.prototype._ignore = function () {\n  if (this._part && !this._ignoreData) {\n    this._ignoreData = true\n    this._part.on('error', EMPTY_FN)\n    // we must perform some kind of read on the stream even though we are\n    // ignoring the data, otherwise node's Readable stream will not emit 'end'\n    // after pushing null to the stream\n    this._part.resume()\n  }\n}\n\nDicer.prototype._oninfo = function (isMatch, data, start, end) {\n  let buf; const self = this; let i = 0; let r; let shouldWriteMore = true\n\n  if (!this._part && this._justMatched && data) {\n    while (this._dashes < 2 && (start + i) < end) {\n      if (data[start + i] === DASH) {\n        ++i\n        ++this._dashes\n      } else {\n        if (this._dashes) { buf = B_ONEDASH }\n        this._dashes = 0\n        break\n      }\n    }\n    if (this._dashes === 2) {\n      if ((start + i) < end && this.listenerCount('trailer') !== 0) { this.emit('trailer', data.slice(start + i, end)) }\n      this.reset()\n      this._finished = true\n      // no more parts will be added\n      if (self._parts === 0) {\n        self._realFinish = true\n        self.emit('finish')\n        self._realFinish = false\n      }\n    }\n    if (this._dashes) { return }\n  }\n  if (this._justMatched) { this._justMatched = false }\n  if (!this._part) {\n    this._part = new PartStream(this._partOpts)\n    this._part._read = function (n) {\n      self._unpause()\n    }\n    if (this._isPreamble && this.listenerCount('preamble') !== 0) {\n      this.emit('preamble', this._part)\n    } else if (this._isPreamble !== true && this.listenerCount('part') !== 0) {\n      this.emit('part', this._part)\n    } else {\n      this._ignore()\n    }\n    if (!this._isPreamble) { this._inHeader = true }\n  }\n  if (data && start < end && !this._ignoreData) {\n    if (this._isPreamble || !this._inHeader) {\n      if (buf) { shouldWriteMore = this._part.push(buf) }\n      shouldWriteMore = this._part.push(data.slice(start, end))\n      if (!shouldWriteMore) { this._pause = true }\n    } else if (!this._isPreamble && this._inHeader) {\n      if (buf) { this._hparser.push(buf) }\n      r = this._hparser.push(data.slice(start, end))\n      if (!this._inHeader && r !== undefined && r < end) { this._oninfo(false, data, start + r, end) }\n    }\n  }\n  if (isMatch) {\n    this._hparser.reset()\n    if (this._isPreamble) { this._isPreamble = false } else {\n      if (start !== end) {\n        ++this._parts\n        this._part.on('end', function () {\n          if (--self._parts === 0) {\n            if (self._finished) {\n              self._realFinish = true\n              self.emit('finish')\n              self._realFinish = false\n            } else {\n              self._unpause()\n            }\n          }\n        })\n      }\n    }\n    this._part.push(null)\n    this._part = undefined\n    this._ignoreData = false\n    this._justMatched = true\n    this._dashes = 0\n  }\n}\n\nDicer.prototype._unpause = function () {\n  if (!this._pause) { return }\n\n  this._pause = false\n  if (this._cb) {\n    const cb = this._cb\n    this._cb = undefined\n    cb()\n  }\n}\n\nmodule.exports = Dicer\n", "'use strict'\n\n// Node has always utf-8\nconst utf8Decoder = new TextDecoder('utf-8')\nconst textDecoders = new Map([\n  ['utf-8', utf8Decoder],\n  ['utf8', utf8Decoder]\n])\n\nfunction getDecoder (charset) {\n  let lc\n  while (true) {\n    switch (charset) {\n      case 'utf-8':\n      case 'utf8':\n        return decoders.utf8\n      case 'latin1':\n      case 'ascii': // TODO: Make these a separate, strict decoder?\n      case 'us-ascii':\n      case 'iso-8859-1':\n      case 'iso8859-1':\n      case 'iso88591':\n      case 'iso_8859-1':\n      case 'windows-1252':\n      case 'iso_8859-1:1987':\n      case 'cp1252':\n      case 'x-cp1252':\n        return decoders.latin1\n      case 'utf16le':\n      case 'utf-16le':\n      case 'ucs2':\n      case 'ucs-2':\n        return decoders.utf16le\n      case 'base64':\n        return decoders.base64\n      default:\n        if (lc === undefined) {\n          lc = true\n          charset = charset.toLowerCase()\n          continue\n        }\n        return decoders.other.bind(charset)\n    }\n  }\n}\n\nconst decoders = {\n  utf8: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.utf8Slice(0, data.length)\n  },\n\n  latin1: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      return data\n    }\n    return data.latin1Slice(0, data.length)\n  },\n\n  utf16le: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.ucs2Slice(0, data.length)\n  },\n\n  base64: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.base64Slice(0, data.length)\n  },\n\n  other: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n\n    if (textDecoders.has(this.toString())) {\n      try {\n        return textDecoders.get(this).decode(data)\n      } catch {}\n    }\n    return typeof data === 'string'\n      ? data\n      : data.toString()\n  }\n}\n\nfunction decodeText (text, sourceEncoding, destEncoding) {\n  if (text) {\n    return getDecoder(destEncoding)(text, sourceEncoding)\n  }\n  return text\n}\n\nmodule.exports = decodeText\n", "/* eslint-disable object-property-newline */\n'use strict'\n\nconst decodeText = require('./decodeText')\n\nconst RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g\n\nconst EncodedLookup = {\n  '%00': '\\x00', '%01': '\\x01', '%02': '\\x02', '%03': '\\x03', '%04': '\\x04',\n  '%05': '\\x05', '%06': '\\x06', '%07': '\\x07', '%08': '\\x08', '%09': '\\x09',\n  '%0a': '\\x0a', '%0A': '\\x0a', '%0b': '\\x0b', '%0B': '\\x0b', '%0c': '\\x0c',\n  '%0C': '\\x0c', '%0d': '\\x0d', '%0D': '\\x0d', '%0e': '\\x0e', '%0E': '\\x0e',\n  '%0f': '\\x0f', '%0F': '\\x0f', '%10': '\\x10', '%11': '\\x11', '%12': '\\x12',\n  '%13': '\\x13', '%14': '\\x14', '%15': '\\x15', '%16': '\\x16', '%17': '\\x17',\n  '%18': '\\x18', '%19': '\\x19', '%1a': '\\x1a', '%1A': '\\x1a', '%1b': '\\x1b',\n  '%1B': '\\x1b', '%1c': '\\x1c', '%1C': '\\x1c', '%1d': '\\x1d', '%1D': '\\x1d',\n  '%1e': '\\x1e', '%1E': '\\x1e', '%1f': '\\x1f', '%1F': '\\x1f', '%20': '\\x20',\n  '%21': '\\x21', '%22': '\\x22', '%23': '\\x23', '%24': '\\x24', '%25': '\\x25',\n  '%26': '\\x26', '%27': '\\x27', '%28': '\\x28', '%29': '\\x29', '%2a': '\\x2a',\n  '%2A': '\\x2a', '%2b': '\\x2b', '%2B': '\\x2b', '%2c': '\\x2c', '%2C': '\\x2c',\n  '%2d': '\\x2d', '%2D': '\\x2d', '%2e': '\\x2e', '%2E': '\\x2e', '%2f': '\\x2f',\n  '%2F': '\\x2f', '%30': '\\x30', '%31': '\\x31', '%32': '\\x32', '%33': '\\x33',\n  '%34': '\\x34', '%35': '\\x35', '%36': '\\x36', '%37': '\\x37', '%38': '\\x38',\n  '%39': '\\x39', '%3a': '\\x3a', '%3A': '\\x3a', '%3b': '\\x3b', '%3B': '\\x3b',\n  '%3c': '\\x3c', '%3C': '\\x3c', '%3d': '\\x3d', '%3D': '\\x3d', '%3e': '\\x3e',\n  '%3E': '\\x3e', '%3f': '\\x3f', '%3F': '\\x3f', '%40': '\\x40', '%41': '\\x41',\n  '%42': '\\x42', '%43': '\\x43', '%44': '\\x44', '%45': '\\x45', '%46': '\\x46',\n  '%47': '\\x47', '%48': '\\x48', '%49': '\\x49', '%4a': '\\x4a', '%4A': '\\x4a',\n  '%4b': '\\x4b', '%4B': '\\x4b', '%4c': '\\x4c', '%4C': '\\x4c', '%4d': '\\x4d',\n  '%4D': '\\x4d', '%4e': '\\x4e', '%4E': '\\x4e', '%4f': '\\x4f', '%4F': '\\x4f',\n  '%50': '\\x50', '%51': '\\x51', '%52': '\\x52', '%53': '\\x53', '%54': '\\x54',\n  '%55': '\\x55', '%56': '\\x56', '%57': '\\x57', '%58': '\\x58', '%59': '\\x59',\n  '%5a': '\\x5a', '%5A': '\\x5a', '%5b': '\\x5b', '%5B': '\\x5b', '%5c': '\\x5c',\n  '%5C': '\\x5c', '%5d': '\\x5d', '%5D': '\\x5d', '%5e': '\\x5e', '%5E': '\\x5e',\n  '%5f': '\\x5f', '%5F': '\\x5f', '%60': '\\x60', '%61': '\\x61', '%62': '\\x62',\n  '%63': '\\x63', '%64': '\\x64', '%65': '\\x65', '%66': '\\x66', '%67': '\\x67',\n  '%68': '\\x68', '%69': '\\x69', '%6a': '\\x6a', '%6A': '\\x6a', '%6b': '\\x6b',\n  '%6B': '\\x6b', '%6c': '\\x6c', '%6C': '\\x6c', '%6d': '\\x6d', '%6D': '\\x6d',\n  '%6e': '\\x6e', '%6E': '\\x6e', '%6f': '\\x6f', '%6F': '\\x6f', '%70': '\\x70',\n  '%71': '\\x71', '%72': '\\x72', '%73': '\\x73', '%74': '\\x74', '%75': '\\x75',\n  '%76': '\\x76', '%77': '\\x77', '%78': '\\x78', '%79': '\\x79', '%7a': '\\x7a',\n  '%7A': '\\x7a', '%7b': '\\x7b', '%7B': '\\x7b', '%7c': '\\x7c', '%7C': '\\x7c',\n  '%7d': '\\x7d', '%7D': '\\x7d', '%7e': '\\x7e', '%7E': '\\x7e', '%7f': '\\x7f',\n  '%7F': '\\x7f', '%80': '\\x80', '%81': '\\x81', '%82': '\\x82', '%83': '\\x83',\n  '%84': '\\x84', '%85': '\\x85', '%86': '\\x86', '%87': '\\x87', '%88': '\\x88',\n  '%89': '\\x89', '%8a': '\\x8a', '%8A': '\\x8a', '%8b': '\\x8b', '%8B': '\\x8b',\n  '%8c': '\\x8c', '%8C': '\\x8c', '%8d': '\\x8d', '%8D': '\\x8d', '%8e': '\\x8e',\n  '%8E': '\\x8e', '%8f': '\\x8f', '%8F': '\\x8f', '%90': '\\x90', '%91': '\\x91',\n  '%92': '\\x92', '%93': '\\x93', '%94': '\\x94', '%95': '\\x95', '%96': '\\x96',\n  '%97': '\\x97', '%98': '\\x98', '%99': '\\x99', '%9a': '\\x9a', '%9A': '\\x9a',\n  '%9b': '\\x9b', '%9B': '\\x9b', '%9c': '\\x9c', '%9C': '\\x9c', '%9d': '\\x9d',\n  '%9D': '\\x9d', '%9e': '\\x9e', '%9E': '\\x9e', '%9f': '\\x9f', '%9F': '\\x9f',\n  '%a0': '\\xa0', '%A0': '\\xa0', '%a1': '\\xa1', '%A1': '\\xa1', '%a2': '\\xa2',\n  '%A2': '\\xa2', '%a3': '\\xa3', '%A3': '\\xa3', '%a4': '\\xa4', '%A4': '\\xa4',\n  '%a5': '\\xa5', '%A5': '\\xa5', '%a6': '\\xa6', '%A6': '\\xa6', '%a7': '\\xa7',\n  '%A7': '\\xa7', '%a8': '\\xa8', '%A8': '\\xa8', '%a9': '\\xa9', '%A9': '\\xa9',\n  '%aa': '\\xaa', '%Aa': '\\xaa', '%aA': '\\xaa', '%AA': '\\xaa', '%ab': '\\xab',\n  '%Ab': '\\xab', '%aB': '\\xab', '%AB': '\\xab', '%ac': '\\xac', '%Ac': '\\xac',\n  '%aC': '\\xac', '%AC': '\\xac', '%ad': '\\xad', '%Ad': '\\xad', '%aD': '\\xad',\n  '%AD': '\\xad', '%ae': '\\xae', '%Ae': '\\xae', '%aE': '\\xae', '%AE': '\\xae',\n  '%af': '\\xaf', '%Af': '\\xaf', '%aF': '\\xaf', '%AF': '\\xaf', '%b0': '\\xb0',\n  '%B0': '\\xb0', '%b1': '\\xb1', '%B1': '\\xb1', '%b2': '\\xb2', '%B2': '\\xb2',\n  '%b3': '\\xb3', '%B3': '\\xb3', '%b4': '\\xb4', '%B4': '\\xb4', '%b5': '\\xb5',\n  '%B5': '\\xb5', '%b6': '\\xb6', '%B6': '\\xb6', '%b7': '\\xb7', '%B7': '\\xb7',\n  '%b8': '\\xb8', '%B8': '\\xb8', '%b9': '\\xb9', '%B9': '\\xb9', '%ba': '\\xba',\n  '%Ba': '\\xba', '%bA': '\\xba', '%BA': '\\xba', '%bb': '\\xbb', '%Bb': '\\xbb',\n  '%bB': '\\xbb', '%BB': '\\xbb', '%bc': '\\xbc', '%Bc': '\\xbc', '%bC': '\\xbc',\n  '%BC': '\\xbc', '%bd': '\\xbd', '%Bd': '\\xbd', '%bD': '\\xbd', '%BD': '\\xbd',\n  '%be': '\\xbe', '%Be': '\\xbe', '%bE': '\\xbe', '%BE': '\\xbe', '%bf': '\\xbf',\n  '%Bf': '\\xbf', '%bF': '\\xbf', '%BF': '\\xbf', '%c0': '\\xc0', '%C0': '\\xc0',\n  '%c1': '\\xc1', '%C1': '\\xc1', '%c2': '\\xc2', '%C2': '\\xc2', '%c3': '\\xc3',\n  '%C3': '\\xc3', '%c4': '\\xc4', '%C4': '\\xc4', '%c5': '\\xc5', '%C5': '\\xc5',\n  '%c6': '\\xc6', '%C6': '\\xc6', '%c7': '\\xc7', '%C7': '\\xc7', '%c8': '\\xc8',\n  '%C8': '\\xc8', '%c9': '\\xc9', '%C9': '\\xc9', '%ca': '\\xca', '%Ca': '\\xca',\n  '%cA': '\\xca', '%CA': '\\xca', '%cb': '\\xcb', '%Cb': '\\xcb', '%cB': '\\xcb',\n  '%CB': '\\xcb', '%cc': '\\xcc', '%Cc': '\\xcc', '%cC': '\\xcc', '%CC': '\\xcc',\n  '%cd': '\\xcd', '%Cd': '\\xcd', '%cD': '\\xcd', '%CD': '\\xcd', '%ce': '\\xce',\n  '%Ce': '\\xce', '%cE': '\\xce', '%CE': '\\xce', '%cf': '\\xcf', '%Cf': '\\xcf',\n  '%cF': '\\xcf', '%CF': '\\xcf', '%d0': '\\xd0', '%D0': '\\xd0', '%d1': '\\xd1',\n  '%D1': '\\xd1', '%d2': '\\xd2', '%D2': '\\xd2', '%d3': '\\xd3', '%D3': '\\xd3',\n  '%d4': '\\xd4', '%D4': '\\xd4', '%d5': '\\xd5', '%D5': '\\xd5', '%d6': '\\xd6',\n  '%D6': '\\xd6', '%d7': '\\xd7', '%D7': '\\xd7', '%d8': '\\xd8', '%D8': '\\xd8',\n  '%d9': '\\xd9', '%D9': '\\xd9', '%da': '\\xda', '%Da': '\\xda', '%dA': '\\xda',\n  '%DA': '\\xda', '%db': '\\xdb', '%Db': '\\xdb', '%dB': '\\xdb', '%DB': '\\xdb',\n  '%dc': '\\xdc', '%Dc': '\\xdc', '%dC': '\\xdc', '%DC': '\\xdc', '%dd': '\\xdd',\n  '%Dd': '\\xdd', '%dD': '\\xdd', '%DD': '\\xdd', '%de': '\\xde', '%De': '\\xde',\n  '%dE': '\\xde', '%DE': '\\xde', '%df': '\\xdf', '%Df': '\\xdf', '%dF': '\\xdf',\n  '%DF': '\\xdf', '%e0': '\\xe0', '%E0': '\\xe0', '%e1': '\\xe1', '%E1': '\\xe1',\n  '%e2': '\\xe2', '%E2': '\\xe2', '%e3': '\\xe3', '%E3': '\\xe3', '%e4': '\\xe4',\n  '%E4': '\\xe4', '%e5': '\\xe5', '%E5': '\\xe5', '%e6': '\\xe6', '%E6': '\\xe6',\n  '%e7': '\\xe7', '%E7': '\\xe7', '%e8': '\\xe8', '%E8': '\\xe8', '%e9': '\\xe9',\n  '%E9': '\\xe9', '%ea': '\\xea', '%Ea': '\\xea', '%eA': '\\xea', '%EA': '\\xea',\n  '%eb': '\\xeb', '%Eb': '\\xeb', '%eB': '\\xeb', '%EB': '\\xeb', '%ec': '\\xec',\n  '%Ec': '\\xec', '%eC': '\\xec', '%EC': '\\xec', '%ed': '\\xed', '%Ed': '\\xed',\n  '%eD': '\\xed', '%ED': '\\xed', '%ee': '\\xee', '%Ee': '\\xee', '%eE': '\\xee',\n  '%EE': '\\xee', '%ef': '\\xef', '%Ef': '\\xef', '%eF': '\\xef', '%EF': '\\xef',\n  '%f0': '\\xf0', '%F0': '\\xf0', '%f1': '\\xf1', '%F1': '\\xf1', '%f2': '\\xf2',\n  '%F2': '\\xf2', '%f3': '\\xf3', '%F3': '\\xf3', '%f4': '\\xf4', '%F4': '\\xf4',\n  '%f5': '\\xf5', '%F5': '\\xf5', '%f6': '\\xf6', '%F6': '\\xf6', '%f7': '\\xf7',\n  '%F7': '\\xf7', '%f8': '\\xf8', '%F8': '\\xf8', '%f9': '\\xf9', '%F9': '\\xf9',\n  '%fa': '\\xfa', '%Fa': '\\xfa', '%fA': '\\xfa', '%FA': '\\xfa', '%fb': '\\xfb',\n  '%Fb': '\\xfb', '%fB': '\\xfb', '%FB': '\\xfb', '%fc': '\\xfc', '%Fc': '\\xfc',\n  '%fC': '\\xfc', '%FC': '\\xfc', '%fd': '\\xfd', '%Fd': '\\xfd', '%fD': '\\xfd',\n  '%FD': '\\xfd', '%fe': '\\xfe', '%Fe': '\\xfe', '%fE': '\\xfe', '%FE': '\\xfe',\n  '%ff': '\\xff', '%Ff': '\\xff', '%fF': '\\xff', '%FF': '\\xff'\n}\n\nfunction encodedReplacer (match) {\n  return EncodedLookup[match]\n}\n\nconst STATE_KEY = 0\nconst STATE_VALUE = 1\nconst STATE_CHARSET = 2\nconst STATE_LANG = 3\n\nfunction parseParams (str) {\n  const res = []\n  let state = STATE_KEY\n  let charset = ''\n  let inquote = false\n  let escaping = false\n  let p = 0\n  let tmp = ''\n  const len = str.length\n\n  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var\n    const char = str[i]\n    if (char === '\\\\' && inquote) {\n      if (escaping) { escaping = false } else {\n        escaping = true\n        continue\n      }\n    } else if (char === '\"') {\n      if (!escaping) {\n        if (inquote) {\n          inquote = false\n          state = STATE_KEY\n        } else { inquote = true }\n        continue\n      } else { escaping = false }\n    } else {\n      if (escaping && inquote) { tmp += '\\\\' }\n      escaping = false\n      if ((state === STATE_CHARSET || state === STATE_LANG) && char === \"'\") {\n        if (state === STATE_CHARSET) {\n          state = STATE_LANG\n          charset = tmp.substring(1)\n        } else { state = STATE_VALUE }\n        tmp = ''\n        continue\n      } else if (state === STATE_KEY &&\n        (char === '*' || char === '=') &&\n        res.length) {\n        state = char === '*'\n          ? STATE_CHARSET\n          : STATE_VALUE\n        res[p] = [tmp, undefined]\n        tmp = ''\n        continue\n      } else if (!inquote && char === ';') {\n        state = STATE_KEY\n        if (charset) {\n          if (tmp.length) {\n            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),\n              'binary',\n              charset)\n          }\n          charset = ''\n        } else if (tmp.length) {\n          tmp = decodeText(tmp, 'binary', 'utf8')\n        }\n        if (res[p] === undefined) { res[p] = tmp } else { res[p][1] = tmp }\n        tmp = ''\n        ++p\n        continue\n      } else if (!inquote && (char === ' ' || char === '\\t')) { continue }\n    }\n    tmp += char\n  }\n  if (charset && tmp.length) {\n    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),\n      'binary',\n      charset)\n  } else if (tmp) {\n    tmp = decodeText(tmp, 'binary', 'utf8')\n  }\n\n  if (res[p] === undefined) {\n    if (tmp) { res[p] = tmp }\n  } else { res[p][1] = tmp }\n\n  return res\n}\n\nmodule.exports = parseParams\n", "'use strict'\n\nmodule.exports = function basename (path) {\n  if (typeof path !== 'string') { return '' }\n  for (var i = path.length - 1; i >= 0; --i) { // eslint-disable-line no-var\n    switch (path.charCodeAt(i)) {\n      case 0x2F: // '/'\n      case 0x5C: // '\\'\n        path = path.slice(i + 1)\n        return (path === '..' || path === '.' ? '' : path)\n    }\n  }\n  return (path === '..' || path === '.' ? '' : path)\n}\n", "'use strict'\n\n// TODO:\n//  * support 1 nested multipart level\n//    (see second multipart example here:\n//     http://www.w3.org/TR/html401/interact/forms.html#didx-multipartform-data)\n//  * support limits.fieldNameSize\n//     -- this will require modifications to utils.parseParams\n\nconst { Readable } = require('node:stream')\nconst { inherits } = require('node:util')\n\nconst Dicer = require('../../deps/dicer/lib/Dicer')\n\nconst parseParams = require('../utils/parseParams')\nconst decodeText = require('../utils/decodeText')\nconst basename = require('../utils/basename')\nconst getLimit = require('../utils/getLimit')\n\nconst RE_BOUNDARY = /^boundary$/i\nconst RE_FIELD = /^form-data$/i\nconst RE_CHARSET = /^charset$/i\nconst RE_FILENAME = /^filename$/i\nconst RE_NAME = /^name$/i\n\nMultipart.detect = /^multipart\\/form-data/i\nfunction Multipart (boy, cfg) {\n  let i\n  let len\n  const self = this\n  let boundary\n  const limits = cfg.limits\n  const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => (contentType === 'application/octet-stream' || fileName !== undefined))\n  const parsedConType = cfg.parsedConType || []\n  const defCharset = cfg.defCharset || 'utf8'\n  const preservePath = cfg.preservePath\n  const fileOpts = { highWaterMark: cfg.fileHwm }\n\n  for (i = 0, len = parsedConType.length; i < len; ++i) {\n    if (Array.isArray(parsedConType[i]) &&\n      RE_BOUNDARY.test(parsedConType[i][0])) {\n      boundary = parsedConType[i][1]\n      break\n    }\n  }\n\n  function checkFinished () {\n    if (nends === 0 && finished && !boy._done) {\n      finished = false\n      self.end()\n    }\n  }\n\n  if (typeof boundary !== 'string') { throw new Error('Multipart: Boundary not found') }\n\n  const fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)\n  const fileSizeLimit = getLimit(limits, 'fileSize', Infinity)\n  const filesLimit = getLimit(limits, 'files', Infinity)\n  const fieldsLimit = getLimit(limits, 'fields', Infinity)\n  const partsLimit = getLimit(limits, 'parts', Infinity)\n  const headerPairsLimit = getLimit(limits, 'headerPairs', 2000)\n  const headerSizeLimit = getLimit(limits, 'headerSize', 80 * 1024)\n\n  let nfiles = 0\n  let nfields = 0\n  let nends = 0\n  let curFile\n  let curField\n  let finished = false\n\n  this._needDrain = false\n  this._pause = false\n  this._cb = undefined\n  this._nparts = 0\n  this._boy = boy\n\n  const parserCfg = {\n    boundary,\n    maxHeaderPairs: headerPairsLimit,\n    maxHeaderSize: headerSizeLimit,\n    partHwm: fileOpts.highWaterMark,\n    highWaterMark: cfg.highWaterMark\n  }\n\n  this.parser = new Dicer(parserCfg)\n  this.parser.on('drain', function () {\n    self._needDrain = false\n    if (self._cb && !self._pause) {\n      const cb = self._cb\n      self._cb = undefined\n      cb()\n    }\n  }).on('part', function onPart (part) {\n    if (++self._nparts > partsLimit) {\n      self.parser.removeListener('part', onPart)\n      self.parser.on('part', skipPart)\n      boy.hitPartsLimit = true\n      boy.emit('partsLimit')\n      return skipPart(part)\n    }\n\n    // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let\n    // us emit 'end' early since we know the part has ended if we are already\n    // seeing the next part\n    if (curField) {\n      const field = curField\n      field.emit('end')\n      field.removeAllListeners('end')\n    }\n\n    part.on('header', function (header) {\n      let contype\n      let fieldname\n      let parsed\n      let charset\n      let encoding\n      let filename\n      let nsize = 0\n\n      if (header['content-type']) {\n        parsed = parseParams(header['content-type'][0])\n        if (parsed[0]) {\n          contype = parsed[0].toLowerCase()\n          for (i = 0, len = parsed.length; i < len; ++i) {\n            if (RE_CHARSET.test(parsed[i][0])) {\n              charset = parsed[i][1].toLowerCase()\n              break\n            }\n          }\n        }\n      }\n\n      if (contype === undefined) { contype = 'text/plain' }\n      if (charset === undefined) { charset = defCharset }\n\n      if (header['content-disposition']) {\n        parsed = parseParams(header['content-disposition'][0])\n        if (!RE_FIELD.test(parsed[0])) { return skipPart(part) }\n        for (i = 0, len = parsed.length; i < len; ++i) {\n          if (RE_NAME.test(parsed[i][0])) {\n            fieldname = parsed[i][1]\n          } else if (RE_FILENAME.test(parsed[i][0])) {\n            filename = parsed[i][1]\n            if (!preservePath) { filename = basename(filename) }\n          }\n        }\n      } else { return skipPart(part) }\n\n      if (header['content-transfer-encoding']) { encoding = header['content-transfer-encoding'][0].toLowerCase() } else { encoding = '7bit' }\n\n      let onData,\n        onEnd\n\n      if (isPartAFile(fieldname, contype, filename)) {\n        // file/binary field\n        if (nfiles === filesLimit) {\n          if (!boy.hitFilesLimit) {\n            boy.hitFilesLimit = true\n            boy.emit('filesLimit')\n          }\n          return skipPart(part)\n        }\n\n        ++nfiles\n\n        if (boy.listenerCount('file') === 0) {\n          self.parser._ignore()\n          return\n        }\n\n        ++nends\n        const file = new FileStream(fileOpts)\n        curFile = file\n        file.on('end', function () {\n          --nends\n          self._pause = false\n          checkFinished()\n          if (self._cb && !self._needDrain) {\n            const cb = self._cb\n            self._cb = undefined\n            cb()\n          }\n        })\n        file._read = function (n) {\n          if (!self._pause) { return }\n          self._pause = false\n          if (self._cb && !self._needDrain) {\n            const cb = self._cb\n            self._cb = undefined\n            cb()\n          }\n        }\n        boy.emit('file', fieldname, file, filename, encoding, contype)\n\n        onData = function (data) {\n          if ((nsize += data.length) > fileSizeLimit) {\n            const extralen = fileSizeLimit - nsize + data.length\n            if (extralen > 0) { file.push(data.slice(0, extralen)) }\n            file.truncated = true\n            file.bytesRead = fileSizeLimit\n            part.removeAllListeners('data')\n            file.emit('limit')\n            return\n          } else if (!file.push(data)) { self._pause = true }\n\n          file.bytesRead = nsize\n        }\n\n        onEnd = function () {\n          curFile = undefined\n          file.push(null)\n        }\n      } else {\n        // non-file field\n        if (nfields === fieldsLimit) {\n          if (!boy.hitFieldsLimit) {\n            boy.hitFieldsLimit = true\n            boy.emit('fieldsLimit')\n          }\n          return skipPart(part)\n        }\n\n        ++nfields\n        ++nends\n        let buffer = ''\n        let truncated = false\n        curField = part\n\n        onData = function (data) {\n          if ((nsize += data.length) > fieldSizeLimit) {\n            const extralen = (fieldSizeLimit - (nsize - data.length))\n            buffer += data.toString('binary', 0, extralen)\n            truncated = true\n            part.removeAllListeners('data')\n          } else { buffer += data.toString('binary') }\n        }\n\n        onEnd = function () {\n          curField = undefined\n          if (buffer.length) { buffer = decodeText(buffer, 'binary', charset) }\n          boy.emit('field', fieldname, buffer, false, truncated, encoding, contype)\n          --nends\n          checkFinished()\n        }\n      }\n\n      /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become\n         broken. Streams2/streams3 is a huge black box of confusion, but\n         somehow overriding the sync state seems to fix things again (and still\n         seems to work for previous node versions).\n      */\n      part._readableState.sync = false\n\n      part.on('data', onData)\n      part.on('end', onEnd)\n    }).on('error', function (err) {\n      if (curFile) { curFile.emit('error', err) }\n    })\n  }).on('error', function (err) {\n    boy.emit('error', err)\n  }).on('finish', function () {\n    finished = true\n    checkFinished()\n  })\n}\n\nMultipart.prototype.write = function (chunk, cb) {\n  const r = this.parser.write(chunk)\n  if (r && !this._pause) {\n    cb()\n  } else {\n    this._needDrain = !r\n    this._cb = cb\n  }\n}\n\nMultipart.prototype.end = function () {\n  const self = this\n\n  if (self.parser.writable) {\n    self.parser.end()\n  } else if (!self._boy._done) {\n    process.nextTick(function () {\n      self._boy._done = true\n      self._boy.emit('finish')\n    })\n  }\n}\n\nfunction skipPart (part) {\n  part.resume()\n}\n\nfunction FileStream (opts) {\n  Readable.call(this, opts)\n\n  this.bytesRead = 0\n\n  this.truncated = false\n}\n\ninherits(FileStream, Readable)\n\nFileStream.prototype._read = function (n) {}\n\nmodule.exports = Multipart\n", "'use strict'\n\nconst RE_PLUS = /\\+/g\n\nconst HEX = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n]\n\nfunction Decoder () {\n  this.buffer = undefined\n}\nDecoder.prototype.write = function (str) {\n  // Replace '+' with ' ' before decoding\n  str = str.replace(RE_PLUS, ' ')\n  let res = ''\n  let i = 0; let p = 0; const len = str.length\n  for (; i < len; ++i) {\n    if (this.buffer !== undefined) {\n      if (!HEX[str.charCodeAt(i)]) {\n        res += '%' + this.buffer\n        this.buffer = undefined\n        --i // retry character\n      } else {\n        this.buffer += str[i]\n        ++p\n        if (this.buffer.length === 2) {\n          res += String.fromCharCode(parseInt(this.buffer, 16))\n          this.buffer = undefined\n        }\n      }\n    } else if (str[i] === '%') {\n      if (i > p) {\n        res += str.substring(p, i)\n        p = i\n      }\n      this.buffer = ''\n      ++p\n    }\n  }\n  if (p < len && this.buffer === undefined) { res += str.substring(p) }\n  return res\n}\nDecoder.prototype.reset = function () {\n  this.buffer = undefined\n}\n\nmodule.exports = Decoder\n", "'use strict'\n\nconst Decoder = require('../utils/Decoder')\nconst decodeText = require('../utils/decodeText')\nconst getLimit = require('../utils/getLimit')\n\nconst RE_CHARSET = /^charset$/i\n\nUrlEncoded.detect = /^application\\/x-www-form-urlencoded/i\nfunction UrlEncoded (boy, cfg) {\n  const limits = cfg.limits\n  const parsedConType = cfg.parsedConType\n  this.boy = boy\n\n  this.fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)\n  this.fieldNameSizeLimit = getLimit(limits, 'fieldNameSize', 100)\n  this.fieldsLimit = getLimit(limits, 'fields', Infinity)\n\n  let charset\n  for (var i = 0, len = parsedConType.length; i < len; ++i) { // eslint-disable-line no-var\n    if (Array.isArray(parsedConType[i]) &&\n        RE_CHARSET.test(parsedConType[i][0])) {\n      charset = parsedConType[i][1].toLowerCase()\n      break\n    }\n  }\n\n  if (charset === undefined) { charset = cfg.defCharset || 'utf8' }\n\n  this.decoder = new Decoder()\n  this.charset = charset\n  this._fields = 0\n  this._state = 'key'\n  this._checkingBytes = true\n  this._bytesKey = 0\n  this._bytesVal = 0\n  this._key = ''\n  this._val = ''\n  this._keyTrunc = false\n  this._valTrunc = false\n  this._hitLimit = false\n}\n\nUrlEncoded.prototype.write = function (data, cb) {\n  if (this._fields === this.fieldsLimit) {\n    if (!this.boy.hitFieldsLimit) {\n      this.boy.hitFieldsLimit = true\n      this.boy.emit('fieldsLimit')\n    }\n    return cb()\n  }\n\n  let idxeq; let idxamp; let i; let p = 0; const len = data.length\n\n  while (p < len) {\n    if (this._state === 'key') {\n      idxeq = idxamp = undefined\n      for (i = p; i < len; ++i) {\n        if (!this._checkingBytes) { ++p }\n        if (data[i] === 0x3D/* = */) {\n          idxeq = i\n          break\n        } else if (data[i] === 0x26/* & */) {\n          idxamp = i\n          break\n        }\n        if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {\n          this._hitLimit = true\n          break\n        } else if (this._checkingBytes) { ++this._bytesKey }\n      }\n\n      if (idxeq !== undefined) {\n        // key with assignment\n        if (idxeq > p) { this._key += this.decoder.write(data.toString('binary', p, idxeq)) }\n        this._state = 'val'\n\n        this._hitLimit = false\n        this._checkingBytes = true\n        this._val = ''\n        this._bytesVal = 0\n        this._valTrunc = false\n        this.decoder.reset()\n\n        p = idxeq + 1\n      } else if (idxamp !== undefined) {\n        // key with no assignment\n        ++this._fields\n        let key; const keyTrunc = this._keyTrunc\n        if (idxamp > p) { key = (this._key += this.decoder.write(data.toString('binary', p, idxamp))) } else { key = this._key }\n\n        this._hitLimit = false\n        this._checkingBytes = true\n        this._key = ''\n        this._bytesKey = 0\n        this._keyTrunc = false\n        this.decoder.reset()\n\n        if (key.length) {\n          this.boy.emit('field', decodeText(key, 'binary', this.charset),\n            '',\n            keyTrunc,\n            false)\n        }\n\n        p = idxamp + 1\n        if (this._fields === this.fieldsLimit) { return cb() }\n      } else if (this._hitLimit) {\n        // we may not have hit the actual limit if there are encoded bytes...\n        if (i > p) { this._key += this.decoder.write(data.toString('binary', p, i)) }\n        p = i\n        if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {\n          // yep, we actually did hit the limit\n          this._checkingBytes = false\n          this._keyTrunc = true\n        }\n      } else {\n        if (p < len) { this._key += this.decoder.write(data.toString('binary', p)) }\n        p = len\n      }\n    } else {\n      idxamp = undefined\n      for (i = p; i < len; ++i) {\n        if (!this._checkingBytes) { ++p }\n        if (data[i] === 0x26/* & */) {\n          idxamp = i\n          break\n        }\n        if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {\n          this._hitLimit = true\n          break\n        } else if (this._checkingBytes) { ++this._bytesVal }\n      }\n\n      if (idxamp !== undefined) {\n        ++this._fields\n        if (idxamp > p) { this._val += this.decoder.write(data.toString('binary', p, idxamp)) }\n        this.boy.emit('field', decodeText(this._key, 'binary', this.charset),\n          decodeText(this._val, 'binary', this.charset),\n          this._keyTrunc,\n          this._valTrunc)\n        this._state = 'key'\n\n        this._hitLimit = false\n        this._checkingBytes = true\n        this._key = ''\n        this._bytesKey = 0\n        this._keyTrunc = false\n        this.decoder.reset()\n\n        p = idxamp + 1\n        if (this._fields === this.fieldsLimit) { return cb() }\n      } else if (this._hitLimit) {\n        // we may not have hit the actual limit if there are encoded bytes...\n        if (i > p) { this._val += this.decoder.write(data.toString('binary', p, i)) }\n        p = i\n        if ((this._val === '' && this.fieldSizeLimit === 0) ||\n            (this._bytesVal = this._val.length) === this.fieldSizeLimit) {\n          // yep, we actually did hit the limit\n          this._checkingBytes = false\n          this._valTrunc = true\n        }\n      } else {\n        if (p < len) { this._val += this.decoder.write(data.toString('binary', p)) }\n        p = len\n      }\n    }\n  }\n  cb()\n}\n\nUrlEncoded.prototype.end = function () {\n  if (this.boy._done) { return }\n\n  if (this._state === 'key' && this._key.length > 0) {\n    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),\n      '',\n      this._keyTrunc,\n      false)\n  } else if (this._state === 'val') {\n    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),\n      decodeText(this._val, 'binary', this.charset),\n      this._keyTrunc,\n      this._valTrunc)\n  }\n  this.boy._done = true\n  this.boy.emit('finish')\n}\n\nmodule.exports = UrlEncoded\n", "'use strict'\n\nconst WritableStream = require('node:stream').Writable\nconst { inherits } = require('node:util')\nconst Dicer = require('../deps/dicer/lib/Dicer')\n\nconst MultipartParser = require('./types/multipart')\nconst UrlencodedParser = require('./types/urlencoded')\nconst parseParams = require('./utils/parseParams')\n\nfunction Busboy (opts) {\n  if (!(this instanceof Busboy)) { return new Busboy(opts) }\n\n  if (typeof opts !== 'object') {\n    throw new TypeError('Busboy expected an options-Object.')\n  }\n  if (typeof opts.headers !== 'object') {\n    throw new TypeError('Busboy expected an options-Object with headers-attribute.')\n  }\n  if (typeof opts.headers['content-type'] !== 'string') {\n    throw new TypeError('Missing Content-Type-header.')\n  }\n\n  const {\n    headers,\n    ...streamOptions\n  } = opts\n\n  this.opts = {\n    autoDestroy: false,\n    ...streamOptions\n  }\n  WritableStream.call(this, this.opts)\n\n  this._done = false\n  this._parser = this.getParserByHeaders(headers)\n  this._finished = false\n}\ninherits(Busboy, WritableStream)\n\nBusboy.prototype.emit = function (ev) {\n  if (ev === 'finish') {\n    if (!this._done) {\n      this._parser?.end()\n      return\n    } else if (this._finished) {\n      return\n    }\n    this._finished = true\n  }\n  WritableStream.prototype.emit.apply(this, arguments)\n}\n\nBusboy.prototype.getParserByHeaders = function (headers) {\n  const parsed = parseParams(headers['content-type'])\n\n  const cfg = {\n    defCharset: this.opts.defCharset,\n    fileHwm: this.opts.fileHwm,\n    headers,\n    highWaterMark: this.opts.highWaterMark,\n    isPartAFile: this.opts.isPartAFile,\n    limits: this.opts.limits,\n    parsedConType: parsed,\n    preservePath: this.opts.preservePath\n  }\n\n  if (MultipartParser.detect.test(parsed[0])) {\n    return new MultipartParser(this, cfg)\n  }\n  if (UrlencodedParser.detect.test(parsed[0])) {\n    return new UrlencodedParser(this, cfg)\n  }\n  throw new Error('Unsupported Content-Type.')\n}\n\nBusboy.prototype._write = function (chunk, encoding, cb) {\n  this._parser.write(chunk, cb)\n}\n\nmodule.exports = Busboy\nmodule.exports.default = Busboy\nmodule.exports.Busboy = Busboy\n\nmodule.exports.Dicer = Dicer\n", "'use strict'\n\nconst { MessageChannel, receiveMessageOnPort } = require('worker_threads')\n\nconst corsSafeListedMethods = ['GET', 'HEAD', 'POST']\nconst corsSafeListedMethodsSet = new Set(corsSafeListedMethods)\n\nconst nullBodyStatus = [101, 204, 205, 304]\n\nconst redirectStatus = [301, 302, 303, 307, 308]\nconst redirectStatusSet = new Set(redirectStatus)\n\n// https://fetch.spec.whatwg.org/#block-bad-port\nconst badPorts = [\n  '1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79',\n  '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137',\n  '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532',\n  '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723',\n  '2049', '3659', '4045', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6697',\n  '10080'\n]\n\nconst badPortsSet = new Set(badPorts)\n\n// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies\nconst referrerPolicy = [\n  '',\n  'no-referrer',\n  'no-referrer-when-downgrade',\n  'same-origin',\n  'origin',\n  'strict-origin',\n  'origin-when-cross-origin',\n  'strict-origin-when-cross-origin',\n  'unsafe-url'\n]\nconst referrerPolicySet = new Set(referrerPolicy)\n\nconst requestRedirect = ['follow', 'manual', 'error']\n\nconst safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE']\nconst safeMethodsSet = new Set(safeMethods)\n\nconst requestMode = ['navigate', 'same-origin', 'no-cors', 'cors']\n\nconst requestCredentials = ['omit', 'same-origin', 'include']\n\nconst requestCache = [\n  'default',\n  'no-store',\n  'reload',\n  'no-cache',\n  'force-cache',\n  'only-if-cached'\n]\n\n// https://fetch.spec.whatwg.org/#request-body-header-name\nconst requestBodyHeader = [\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-type',\n  // See https://github.com/nodejs/undici/issues/2021\n  // 'Content-Length' is a forbidden header name, which is typically\n  // removed in the Headers implementation. However, undici doesn't\n  // filter out headers, so we add it here.\n  'content-length'\n]\n\n// https://fetch.spec.whatwg.org/#enumdef-requestduplex\nconst requestDuplex = [\n  'half'\n]\n\n// http://fetch.spec.whatwg.org/#forbidden-method\nconst forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK']\nconst forbiddenMethodsSet = new Set(forbiddenMethods)\n\nconst subresource = [\n  'audio',\n  'audioworklet',\n  'font',\n  'image',\n  'manifest',\n  'paintworklet',\n  'script',\n  'style',\n  'track',\n  'video',\n  'xslt',\n  ''\n]\nconst subresourceSet = new Set(subresource)\n\n/** @type {globalThis['DOMException']} */\nconst DOMException = globalThis.DOMException ?? (() => {\n  // DOMException was only made a global in Node v17.0.0,\n  // but fetch supports >= v16.8.\n  try {\n    atob('~')\n  } catch (err) {\n    return Object.getPrototypeOf(err).constructor\n  }\n})()\n\nlet channel\n\n/** @type {globalThis['structuredClone']} */\nconst structuredClone =\n  globalThis.structuredClone ??\n  // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js\n  // structuredClone was added in v17.0.0, but fetch supports v16.8\n  function structuredClone (value, options = undefined) {\n    if (arguments.length === 0) {\n      throw new TypeError('missing argument')\n    }\n\n    if (!channel) {\n      channel = new MessageChannel()\n    }\n    channel.port1.unref()\n    channel.port2.unref()\n    channel.port1.postMessage(value, options?.transfer)\n    return receiveMessageOnPort(channel.port2).message\n  }\n\nmodule.exports = {\n  DOMException,\n  structuredClone,\n  subresource,\n  forbiddenMethods,\n  requestBodyHeader,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  redirectStatus,\n  corsSafeListedMethods,\n  nullBodyStatus,\n  safeMethods,\n  badPorts,\n  requestDuplex,\n  subresourceSet,\n  badPortsSet,\n  redirectStatusSet,\n  corsSafeListedMethodsSet,\n  safeMethodsSet,\n  forbiddenMethodsSet,\n  referrerPolicySet\n}\n", "'use strict'\n\n// In case of breaking changes, increase the version\n// number to avoid conflicts.\nconst globalOrigin = Symbol.for('undici.globalOrigin.1')\n\nfunction getGlobalOrigin () {\n  return globalThis[globalOrigin]\n}\n\nfunction setGlobalOrigin (newOrigin) {\n  if (newOrigin === undefined) {\n    Object.defineProperty(globalThis, globalOrigin, {\n      value: undefined,\n      writable: true,\n      enumerable: false,\n      configurable: false\n    })\n\n    return\n  }\n\n  const parsedURL = new URL(newOrigin)\n\n  if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {\n    throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`)\n  }\n\n  Object.defineProperty(globalThis, globalOrigin, {\n    value: parsedURL,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  })\n}\n\nmodule.exports = {\n  getGlobalOrigin,\n  setGlobalOrigin\n}\n", "'use strict'\n\nconst { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require('./constants')\nconst { getGlobalOrigin } = require('./global')\nconst { performance } = require('perf_hooks')\nconst { isBlobLike, toUSVString, ReadableStreamFrom } = require('../core/util')\nconst assert = require('assert')\nconst { isUint8Array } = require('util/types')\n\nlet supportedHashes = []\n\n// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable\n/** @type {import('crypto')|undefined} */\nlet crypto\n\ntry {\n  crypto = require('crypto')\n  const possibleRelevantHashes = ['sha256', 'sha384', 'sha512']\n  supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash))\n/* c8 ignore next 3 */\n} catch {\n}\n\nfunction responseURL (response) {\n  // https://fetch.spec.whatwg.org/#responses\n  // A response has an associated URL. It is a pointer to the last URL\n  // in response\u2019s URL list and null if response\u2019s URL list is empty.\n  const urlList = response.urlList\n  const length = urlList.length\n  return length === 0 ? null : urlList[length - 1].toString()\n}\n\n// https://fetch.spec.whatwg.org/#concept-response-location-url\nfunction responseLocationURL (response, requestFragment) {\n  // 1. If response\u2019s status is not a redirect status, then return null.\n  if (!redirectStatusSet.has(response.status)) {\n    return null\n  }\n\n  // 2. Let location be the result of extracting header list values given\n  // `Location` and response\u2019s header list.\n  let location = response.headersList.get('location')\n\n  // 3. If location is a header value, then set location to the result of\n  //    parsing location with response\u2019s URL.\n  if (location !== null && isValidHeaderValue(location)) {\n    location = new URL(location, responseURL(response))\n  }\n\n  // 4. If location is a URL whose fragment is null, then set location\u2019s\n  // fragment to requestFragment.\n  if (location && !location.hash) {\n    location.hash = requestFragment\n  }\n\n  // 5. Return location.\n  return location\n}\n\n/** @returns {URL} */\nfunction requestCurrentURL (request) {\n  return request.urlList[request.urlList.length - 1]\n}\n\nfunction requestBadPort (request) {\n  // 1. Let url be request\u2019s current URL.\n  const url = requestCurrentURL(request)\n\n  // 2. If url\u2019s scheme is an HTTP(S) scheme and url\u2019s port is a bad port,\n  // then return blocked.\n  if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {\n    return 'blocked'\n  }\n\n  // 3. Return allowed.\n  return 'allowed'\n}\n\nfunction isErrorLike (object) {\n  return object instanceof Error || (\n    object?.constructor?.name === 'Error' ||\n    object?.constructor?.name === 'DOMException'\n  )\n}\n\n// Check whether |statusText| is a ByteString and\n// matches the Reason-Phrase token production.\n// RFC 2616: https://tools.ietf.org/html/rfc2616\n// RFC 7230: https://tools.ietf.org/html/rfc7230\n// \"reason-phrase = *( HTAB / SP / VCHAR / obs-text )\"\n// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116\nfunction isValidReasonPhrase (statusText) {\n  for (let i = 0; i < statusText.length; ++i) {\n    const c = statusText.charCodeAt(i)\n    if (\n      !(\n        (\n          c === 0x09 || // HTAB\n          (c >= 0x20 && c <= 0x7e) || // SP / VCHAR\n          (c >= 0x80 && c <= 0xff)\n        ) // obs-text\n      )\n    ) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n * @param {number} c\n */\nfunction isTokenCharCode (c) {\n  switch (c) {\n    case 0x22:\n    case 0x28:\n    case 0x29:\n    case 0x2c:\n    case 0x2f:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x7b:\n    case 0x7d:\n      // DQUOTE and \"(),/:;<=>?@[\\]{}\"\n      return false\n    default:\n      // VCHAR %x21-7E\n      return c >= 0x21 && c <= 0x7e\n  }\n}\n\n/**\n * @param {string} characters\n */\nfunction isValidHTTPToken (characters) {\n  if (characters.length === 0) {\n    return false\n  }\n  for (let i = 0; i < characters.length; ++i) {\n    if (!isTokenCharCode(characters.charCodeAt(i))) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#header-name\n * @param {string} potentialValue\n */\nfunction isValidHeaderName (potentialValue) {\n  return isValidHTTPToken(potentialValue)\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#header-value\n * @param {string} potentialValue\n */\nfunction isValidHeaderValue (potentialValue) {\n  // - Has no leading or trailing HTTP tab or space bytes.\n  // - Contains no 0x00 (NUL) or HTTP newline bytes.\n  if (\n    potentialValue.startsWith('\\t') ||\n    potentialValue.startsWith(' ') ||\n    potentialValue.endsWith('\\t') ||\n    potentialValue.endsWith(' ')\n  ) {\n    return false\n  }\n\n  if (\n    potentialValue.includes('\\0') ||\n    potentialValue.includes('\\r') ||\n    potentialValue.includes('\\n')\n  ) {\n    return false\n  }\n\n  return true\n}\n\n// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect\nfunction setRequestReferrerPolicyOnRedirect (request, actualResponse) {\n  //  Given a request request and a response actualResponse, this algorithm\n  //  updates request\u2019s referrer policy according to the Referrer-Policy\n  //  header (if any) in actualResponse.\n\n  // 1. Let policy be the result of executing \u00A7 8.1 Parse a referrer policy\n  // from a Referrer-Policy header on actualResponse.\n\n  // 8.1 Parse a referrer policy from a Referrer-Policy header\n  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response\u2019s header list.\n  const { headersList } = actualResponse\n  // 2. Let policy be the empty string.\n  // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.\n  // 4. Return policy.\n  const policyHeader = (headersList.get('referrer-policy') ?? '').split(',')\n\n  // Note: As the referrer-policy can contain multiple policies\n  // separated by comma, we need to loop through all of them\n  // and pick the first valid one.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy\n  let policy = ''\n  if (policyHeader.length > 0) {\n    // The right-most policy takes precedence.\n    // The left-most policy is the fallback.\n    for (let i = policyHeader.length; i !== 0; i--) {\n      const token = policyHeader[i - 1].trim()\n      if (referrerPolicyTokens.has(token)) {\n        policy = token\n        break\n      }\n    }\n  }\n\n  // 2. If policy is not the empty string, then set request\u2019s referrer policy to policy.\n  if (policy !== '') {\n    request.referrerPolicy = policy\n  }\n}\n\n// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check\nfunction crossOriginResourcePolicyCheck () {\n  // TODO\n  return 'allowed'\n}\n\n// https://fetch.spec.whatwg.org/#concept-cors-check\nfunction corsCheck () {\n  // TODO\n  return 'success'\n}\n\n// https://fetch.spec.whatwg.org/#concept-tao-check\nfunction TAOCheck () {\n  // TODO\n  return 'success'\n}\n\nfunction appendFetchMetadata (httpRequest) {\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header\n  //  TODO\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header\n\n  //  1. Assert: r\u2019s url is a potentially trustworthy URL.\n  //  TODO\n\n  //  2. Let header be a Structured Header whose value is a token.\n  let header = null\n\n  //  3. Set header\u2019s value to r\u2019s mode.\n  header = httpRequest.mode\n\n  //  4. Set a structured field value `Sec-Fetch-Mode`/header in r\u2019s header list.\n  httpRequest.headersList.set('sec-fetch-mode', header)\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header\n  //  TODO\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header\n  //  TODO\n}\n\n// https://fetch.spec.whatwg.org/#append-a-request-origin-header\nfunction appendRequestOriginHeader (request) {\n  // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.\n  let serializedOrigin = request.origin\n\n  // 2. If request\u2019s response tainting is \"cors\" or request\u2019s mode is \"websocket\", then append (`Origin`, serializedOrigin) to request\u2019s header list.\n  if (request.responseTainting === 'cors' || request.mode === 'websocket') {\n    if (serializedOrigin) {\n      request.headersList.append('origin', serializedOrigin)\n    }\n\n  // 3. Otherwise, if request\u2019s method is neither `GET` nor `HEAD`, then:\n  } else if (request.method !== 'GET' && request.method !== 'HEAD') {\n    // 1. Switch on request\u2019s referrer policy:\n    switch (request.referrerPolicy) {\n      case 'no-referrer':\n        // Set serializedOrigin to `null`.\n        serializedOrigin = null\n        break\n      case 'no-referrer-when-downgrade':\n      case 'strict-origin':\n      case 'strict-origin-when-cross-origin':\n        // If request\u2019s origin is a tuple origin, its scheme is \"https\", and request\u2019s current URL\u2019s scheme is not \"https\", then set serializedOrigin to `null`.\n        if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {\n          serializedOrigin = null\n        }\n        break\n      case 'same-origin':\n        // If request\u2019s origin is not same origin with request\u2019s current URL\u2019s origin, then set serializedOrigin to `null`.\n        if (!sameOrigin(request, requestCurrentURL(request))) {\n          serializedOrigin = null\n        }\n        break\n      default:\n        // Do nothing.\n    }\n\n    if (serializedOrigin) {\n      // 2. Append (`Origin`, serializedOrigin) to request\u2019s header list.\n      request.headersList.append('origin', serializedOrigin)\n    }\n  }\n}\n\nfunction coarsenedSharedCurrentTime (crossOriginIsolatedCapability) {\n  // TODO\n  return performance.now()\n}\n\n// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info\nfunction createOpaqueTimingInfo (timingInfo) {\n  return {\n    startTime: timingInfo.startTime ?? 0,\n    redirectStartTime: 0,\n    redirectEndTime: 0,\n    postRedirectStartTime: timingInfo.startTime ?? 0,\n    finalServiceWorkerStartTime: 0,\n    finalNetworkResponseStartTime: 0,\n    finalNetworkRequestStartTime: 0,\n    endTime: 0,\n    encodedBodySize: 0,\n    decodedBodySize: 0,\n    finalConnectionTimingInfo: null\n  }\n}\n\n// https://html.spec.whatwg.org/multipage/origin.html#policy-container\nfunction makePolicyContainer () {\n  // Note: the fetch spec doesn't make use of embedder policy or CSP list\n  return {\n    referrerPolicy: 'strict-origin-when-cross-origin'\n  }\n}\n\n// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container\nfunction clonePolicyContainer (policyContainer) {\n  return {\n    referrerPolicy: policyContainer.referrerPolicy\n  }\n}\n\n// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer\nfunction determineRequestsReferrer (request) {\n  // 1. Let policy be request's referrer policy.\n  const policy = request.referrerPolicy\n\n  // Note: policy cannot (shouldn't) be null or an empty string.\n  assert(policy)\n\n  // 2. Let environment be request\u2019s client.\n\n  let referrerSource = null\n\n  // 3. Switch on request\u2019s referrer:\n  if (request.referrer === 'client') {\n    // Note: node isn't a browser and doesn't implement document/iframes,\n    // so we bypass this step and replace it with our own.\n\n    const globalOrigin = getGlobalOrigin()\n\n    if (!globalOrigin || globalOrigin.origin === 'null') {\n      return 'no-referrer'\n    }\n\n    // note: we need to clone it as it's mutated\n    referrerSource = new URL(globalOrigin)\n  } else if (request.referrer instanceof URL) {\n    // Let referrerSource be request\u2019s referrer.\n    referrerSource = request.referrer\n  }\n\n  // 4. Let request\u2019s referrerURL be the result of stripping referrerSource for\n  //    use as a referrer.\n  let referrerURL = stripURLForReferrer(referrerSource)\n\n  // 5. Let referrerOrigin be the result of stripping referrerSource for use as\n  //    a referrer, with the origin-only flag set to true.\n  const referrerOrigin = stripURLForReferrer(referrerSource, true)\n\n  // 6. If the result of serializing referrerURL is a string whose length is\n  //    greater than 4096, set referrerURL to referrerOrigin.\n  if (referrerURL.toString().length > 4096) {\n    referrerURL = referrerOrigin\n  }\n\n  const areSameOrigin = sameOrigin(request, referrerURL)\n  const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) &&\n    !isURLPotentiallyTrustworthy(request.url)\n\n  // 8. Execute the switch statements corresponding to the value of policy:\n  switch (policy) {\n    case 'origin': return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true)\n    case 'unsafe-url': return referrerURL\n    case 'same-origin':\n      return areSameOrigin ? referrerOrigin : 'no-referrer'\n    case 'origin-when-cross-origin':\n      return areSameOrigin ? referrerURL : referrerOrigin\n    case 'strict-origin-when-cross-origin': {\n      const currentURL = requestCurrentURL(request)\n\n      // 1. If the origin of referrerURL and the origin of request\u2019s current\n      //    URL are the same, then return referrerURL.\n      if (sameOrigin(referrerURL, currentURL)) {\n        return referrerURL\n      }\n\n      // 2. If referrerURL is a potentially trustworthy URL and request\u2019s\n      //    current URL is not a potentially trustworthy URL, then return no\n      //    referrer.\n      if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {\n        return 'no-referrer'\n      }\n\n      // 3. Return referrerOrigin.\n      return referrerOrigin\n    }\n    case 'strict-origin': // eslint-disable-line\n      /**\n         * 1. If referrerURL is a potentially trustworthy URL and\n         * request\u2019s current URL is not a potentially trustworthy URL,\n         * then return no referrer.\n         * 2. Return referrerOrigin\n        */\n    case 'no-referrer-when-downgrade': // eslint-disable-line\n      /**\n       * 1. If referrerURL is a potentially trustworthy URL and\n       * request\u2019s current URL is not a potentially trustworthy URL,\n       * then return no referrer.\n       * 2. Return referrerOrigin\n      */\n\n    default: // eslint-disable-line\n      return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin\n  }\n}\n\n/**\n * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url\n * @param {URL} url\n * @param {boolean|undefined} originOnly\n */\nfunction stripURLForReferrer (url, originOnly) {\n  // 1. Assert: url is a URL.\n  assert(url instanceof URL)\n\n  // 2. If url\u2019s scheme is a local scheme, then return no referrer.\n  if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {\n    return 'no-referrer'\n  }\n\n  // 3. Set url\u2019s username to the empty string.\n  url.username = ''\n\n  // 4. Set url\u2019s password to the empty string.\n  url.password = ''\n\n  // 5. Set url\u2019s fragment to null.\n  url.hash = ''\n\n  // 6. If the origin-only flag is true, then:\n  if (originOnly) {\n    // 1. Set url\u2019s path to \u00AB the empty string \u00BB.\n    url.pathname = ''\n\n    // 2. Set url\u2019s query to null.\n    url.search = ''\n  }\n\n  // 7. Return url.\n  return url\n}\n\nfunction isURLPotentiallyTrustworthy (url) {\n  if (!(url instanceof URL)) {\n    return false\n  }\n\n  // If child of about, return true\n  if (url.href === 'about:blank' || url.href === 'about:srcdoc') {\n    return true\n  }\n\n  // If scheme is data, return true\n  if (url.protocol === 'data:') return true\n\n  // If file, return true\n  if (url.protocol === 'file:') return true\n\n  return isOriginPotentiallyTrustworthy(url.origin)\n\n  function isOriginPotentiallyTrustworthy (origin) {\n    // If origin is explicitly null, return false\n    if (origin == null || origin === 'null') return false\n\n    const originAsURL = new URL(origin)\n\n    // If secure, return true\n    if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {\n      return true\n    }\n\n    // If localhost or variants, return true\n    if (/^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^\\[(?:0*:)*?:?0*1\\]$/.test(originAsURL.hostname) ||\n     (originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.')) ||\n     (originAsURL.hostname.endsWith('.localhost'))) {\n      return true\n    }\n\n    // If any other, return false\n    return false\n  }\n}\n\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist\n * @param {Uint8Array} bytes\n * @param {string} metadataList\n */\nfunction bytesMatch (bytes, metadataList) {\n  // If node is not built with OpenSSL support, we cannot check\n  // a request's integrity, so allow it by default (the spec will\n  // allow requests if an invalid hash is given, as precedence).\n  /* istanbul ignore if: only if node is built with --without-ssl */\n  if (crypto === undefined) {\n    return true\n  }\n\n  // 1. Let parsedMetadata be the result of parsing metadataList.\n  const parsedMetadata = parseMetadata(metadataList)\n\n  // 2. If parsedMetadata is no metadata, return true.\n  if (parsedMetadata === 'no metadata') {\n    return true\n  }\n\n  // 3. If response is not eligible for integrity validation, return false.\n  // TODO\n\n  // 4. If parsedMetadata is the empty set, return true.\n  if (parsedMetadata.length === 0) {\n    return true\n  }\n\n  // 5. Let metadata be the result of getting the strongest\n  //    metadata from parsedMetadata.\n  const strongest = getStrongestMetadata(parsedMetadata)\n  const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest)\n\n  // 6. For each item in metadata:\n  for (const item of metadata) {\n    // 1. Let algorithm be the alg component of item.\n    const algorithm = item.algo\n\n    // 2. Let expectedValue be the val component of item.\n    const expectedValue = item.hash\n\n    // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e\n    // \"be liberal with padding\". This is annoying, and it's not even in the spec.\n\n    // 3. Let actualValue be the result of applying algorithm to bytes.\n    let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64')\n\n    if (actualValue[actualValue.length - 1] === '=') {\n      if (actualValue[actualValue.length - 2] === '=') {\n        actualValue = actualValue.slice(0, -2)\n      } else {\n        actualValue = actualValue.slice(0, -1)\n      }\n    }\n\n    // 4. If actualValue is a case-sensitive match for expectedValue,\n    //    return true.\n    if (compareBase64Mixed(actualValue, expectedValue)) {\n      return true\n    }\n  }\n\n  // 7. Return false.\n  return false\n}\n\n// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options\n// https://www.w3.org/TR/CSP2/#source-list-syntax\n// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1\nconst parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\\s|$)( +[!-~]*)?)?/i\n\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n * @param {string} metadata\n */\nfunction parseMetadata (metadata) {\n  // 1. Let result be the empty set.\n  /** @type {{ algo: string, hash: string }[]} */\n  const result = []\n\n  // 2. Let empty be equal to true.\n  let empty = true\n\n  // 3. For each token returned by splitting metadata on spaces:\n  for (const token of metadata.split(' ')) {\n    // 1. Set empty to false.\n    empty = false\n\n    // 2. Parse token as a hash-with-options.\n    const parsedToken = parseHashWithOptions.exec(token)\n\n    // 3. If token does not parse, continue to the next token.\n    if (\n      parsedToken === null ||\n      parsedToken.groups === undefined ||\n      parsedToken.groups.algo === undefined\n    ) {\n      // Note: Chromium blocks the request at this point, but Firefox\n      // gives a warning that an invalid integrity was given. The\n      // correct behavior is to ignore these, and subsequently not\n      // check the integrity of the resource.\n      continue\n    }\n\n    // 4. Let algorithm be the hash-algo component of token.\n    const algorithm = parsedToken.groups.algo.toLowerCase()\n\n    // 5. If algorithm is a hash function recognized by the user\n    //    agent, add the parsed token to result.\n    if (supportedHashes.includes(algorithm)) {\n      result.push(parsedToken.groups)\n    }\n  }\n\n  // 4. Return no metadata if empty is true, otherwise return result.\n  if (empty === true) {\n    return 'no metadata'\n  }\n\n  return result\n}\n\n/**\n * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList\n */\nfunction getStrongestMetadata (metadataList) {\n  // Let algorithm be the algo component of the first item in metadataList.\n  // Can be sha256\n  let algorithm = metadataList[0].algo\n  // If the algorithm is sha512, then it is the strongest\n  // and we can return immediately\n  if (algorithm[3] === '5') {\n    return algorithm\n  }\n\n  for (let i = 1; i < metadataList.length; ++i) {\n    const metadata = metadataList[i]\n    // If the algorithm is sha512, then it is the strongest\n    // and we can break the loop immediately\n    if (metadata.algo[3] === '5') {\n      algorithm = 'sha512'\n      break\n    // If the algorithm is sha384, then a potential sha256 or sha384 is ignored\n    } else if (algorithm[3] === '3') {\n      continue\n    // algorithm is sha256, check if algorithm is sha384 and if so, set it as\n    // the strongest\n    } else if (metadata.algo[3] === '3') {\n      algorithm = 'sha384'\n    }\n  }\n  return algorithm\n}\n\nfunction filterMetadataListByAlgorithm (metadataList, algorithm) {\n  if (metadataList.length === 1) {\n    return metadataList\n  }\n\n  let pos = 0\n  for (let i = 0; i < metadataList.length; ++i) {\n    if (metadataList[i].algo === algorithm) {\n      metadataList[pos++] = metadataList[i]\n    }\n  }\n\n  metadataList.length = pos\n\n  return metadataList\n}\n\n/**\n * Compares two base64 strings, allowing for base64url\n * in the second string.\n *\n* @param {string} actualValue always base64\n * @param {string} expectedValue base64 or base64url\n * @returns {boolean}\n */\nfunction compareBase64Mixed (actualValue, expectedValue) {\n  if (actualValue.length !== expectedValue.length) {\n    return false\n  }\n  for (let i = 0; i < actualValue.length; ++i) {\n    if (actualValue[i] !== expectedValue[i]) {\n      if (\n        (actualValue[i] === '+' && expectedValue[i] === '-') ||\n        (actualValue[i] === '/' && expectedValue[i] === '_')\n      ) {\n        continue\n      }\n      return false\n    }\n  }\n\n  return true\n}\n\n// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request\nfunction tryUpgradeRequestToAPotentiallyTrustworthyURL (request) {\n  // TODO\n}\n\n/**\n * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}\n * @param {URL} A\n * @param {URL} B\n */\nfunction sameOrigin (A, B) {\n  // 1. If A and B are the same opaque origin, then return true.\n  if (A.origin === B.origin && A.origin === 'null') {\n    return true\n  }\n\n  // 2. If A and B are both tuple origins and their schemes,\n  //    hosts, and port are identical, then return true.\n  if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {\n    return true\n  }\n\n  // 3. Return false.\n  return false\n}\n\nfunction createDeferredPromise () {\n  let res\n  let rej\n  const promise = new Promise((resolve, reject) => {\n    res = resolve\n    rej = reject\n  })\n\n  return { promise, resolve: res, reject: rej }\n}\n\nfunction isAborted (fetchParams) {\n  return fetchParams.controller.state === 'aborted'\n}\n\nfunction isCancelled (fetchParams) {\n  return fetchParams.controller.state === 'aborted' ||\n    fetchParams.controller.state === 'terminated'\n}\n\nconst normalizeMethodRecord = {\n  delete: 'DELETE',\n  DELETE: 'DELETE',\n  get: 'GET',\n  GET: 'GET',\n  head: 'HEAD',\n  HEAD: 'HEAD',\n  options: 'OPTIONS',\n  OPTIONS: 'OPTIONS',\n  post: 'POST',\n  POST: 'POST',\n  put: 'PUT',\n  PUT: 'PUT'\n}\n\n// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.\nObject.setPrototypeOf(normalizeMethodRecord, null)\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-method-normalize\n * @param {string} method\n */\nfunction normalizeMethod (method) {\n  return normalizeMethodRecord[method.toLowerCase()] ?? method\n}\n\n// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string\nfunction serializeJavascriptValueToJSONString (value) {\n  // 1. Let result be ? Call(%JSON.stringify%, undefined, \u00AB value \u00BB).\n  const result = JSON.stringify(value)\n\n  // 2. If result is undefined, then throw a TypeError.\n  if (result === undefined) {\n    throw new TypeError('Value is not JSON serializable')\n  }\n\n  // 3. Assert: result is a string.\n  assert(typeof result === 'string')\n\n  // 4. Return result.\n  return result\n}\n\n// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object\nconst esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))\n\n/**\n * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object\n * @param {() => unknown[]} iterator\n * @param {string} name name of the instance\n * @param {'key'|'value'|'key+value'} kind\n */\nfunction makeIterator (iterator, name, kind) {\n  const object = {\n    index: 0,\n    kind,\n    target: iterator\n  }\n\n  const i = {\n    next () {\n      // 1. Let interface be the interface for which the iterator prototype object exists.\n\n      // 2. Let thisValue be the this value.\n\n      // 3. Let object be ? ToObject(thisValue).\n\n      // 4. If object is a platform object, then perform a security\n      //    check, passing:\n\n      // 5. If object is not a default iterator object for interface,\n      //    then throw a TypeError.\n      if (Object.getPrototypeOf(this) !== i) {\n        throw new TypeError(\n          `'next' called on an object that does not implement interface ${name} Iterator.`\n        )\n      }\n\n      // 6. Let index be object\u2019s index.\n      // 7. Let kind be object\u2019s kind.\n      // 8. Let values be object\u2019s target's value pairs to iterate over.\n      const { index, kind, target } = object\n      const values = target()\n\n      // 9. Let len be the length of values.\n      const len = values.length\n\n      // 10. If index is greater than or equal to len, then return\n      //     CreateIterResultObject(undefined, true).\n      if (index >= len) {\n        return { value: undefined, done: true }\n      }\n\n      // 11. Let pair be the entry in values at index index.\n      const pair = values[index]\n\n      // 12. Set object\u2019s index to index + 1.\n      object.index = index + 1\n\n      // 13. Return the iterator result for pair and kind.\n      return iteratorResult(pair, kind)\n    },\n    // The class string of an iterator prototype object for a given interface is the\n    // result of concatenating the identifier of the interface and the string \" Iterator\".\n    [Symbol.toStringTag]: `${name} Iterator`\n  }\n\n  // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.\n  Object.setPrototypeOf(i, esIteratorPrototype)\n  // esIteratorPrototype needs to be the prototype of i\n  // which is the prototype of an empty object. Yes, it's confusing.\n  return Object.setPrototypeOf({}, i)\n}\n\n// https://webidl.spec.whatwg.org/#iterator-result\nfunction iteratorResult (pair, kind) {\n  let result\n\n  // 1. Let result be a value determined by the value of kind:\n  switch (kind) {\n    case 'key': {\n      // 1. Let idlKey be pair\u2019s key.\n      // 2. Let key be the result of converting idlKey to an\n      //    ECMAScript value.\n      // 3. result is key.\n      result = pair[0]\n      break\n    }\n    case 'value': {\n      // 1. Let idlValue be pair\u2019s value.\n      // 2. Let value be the result of converting idlValue to\n      //    an ECMAScript value.\n      // 3. result is value.\n      result = pair[1]\n      break\n    }\n    case 'key+value': {\n      // 1. Let idlKey be pair\u2019s key.\n      // 2. Let idlValue be pair\u2019s value.\n      // 3. Let key be the result of converting idlKey to an\n      //    ECMAScript value.\n      // 4. Let value be the result of converting idlValue to\n      //    an ECMAScript value.\n      // 5. Let array be ! ArrayCreate(2).\n      // 6. Call ! CreateDataProperty(array, \"0\", key).\n      // 7. Call ! CreateDataProperty(array, \"1\", value).\n      // 8. result is array.\n      result = pair\n      break\n    }\n  }\n\n  // 2. Return CreateIterResultObject(result, false).\n  return { value: result, done: false }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#body-fully-read\n */\nasync function fullyReadBody (body, processBody, processBodyError) {\n  // 1. If taskDestination is null, then set taskDestination to\n  //    the result of starting a new parallel queue.\n\n  // 2. Let successSteps given a byte sequence bytes be to queue a\n  //    fetch task to run processBody given bytes, with taskDestination.\n  const successSteps = processBody\n\n  // 3. Let errorSteps be to queue a fetch task to run processBodyError,\n  //    with taskDestination.\n  const errorSteps = processBodyError\n\n  // 4. Let reader be the result of getting a reader for body\u2019s stream.\n  //    If that threw an exception, then run errorSteps with that\n  //    exception and return.\n  let reader\n\n  try {\n    reader = body.stream.getReader()\n  } catch (e) {\n    errorSteps(e)\n    return\n  }\n\n  // 5. Read all bytes from reader, given successSteps and errorSteps.\n  try {\n    const result = await readAllBytes(reader)\n    successSteps(result)\n  } catch (e) {\n    errorSteps(e)\n  }\n}\n\n/** @type {ReadableStream} */\nlet ReadableStream = globalThis.ReadableStream\n\nfunction isReadableStreamLike (stream) {\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  return stream instanceof ReadableStream || (\n    stream[Symbol.toStringTag] === 'ReadableStream' &&\n    typeof stream.tee === 'function'\n  )\n}\n\nconst MAXIMUM_ARGUMENT_LENGTH = 65535\n\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-decode\n * @param {number[]|Uint8Array} input\n */\nfunction isomorphicDecode (input) {\n  // 1. To isomorphic decode a byte sequence input, return a string whose code point\n  //    length is equal to input\u2019s length and whose code points have the same values\n  //    as the values of input\u2019s bytes, in the same order.\n\n  if (input.length < MAXIMUM_ARGUMENT_LENGTH) {\n    return String.fromCharCode(...input)\n  }\n\n  return input.reduce((previous, current) => previous + String.fromCharCode(current), '')\n}\n\n/**\n * @param {ReadableStreamController<Uint8Array>} controller\n */\nfunction readableStreamClose (controller) {\n  try {\n    controller.close()\n  } catch (err) {\n    // TODO: add comment explaining why this error occurs.\n    if (!err.message.includes('Controller is already closed')) {\n      throw err\n    }\n  }\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-encode\n * @param {string} input\n */\nfunction isomorphicEncode (input) {\n  // 1. Assert: input contains no code points greater than U+00FF.\n  for (let i = 0; i < input.length; i++) {\n    assert(input.charCodeAt(i) <= 0xFF)\n  }\n\n  // 2. Return a byte sequence whose length is equal to input\u2019s code\n  //    point length and whose bytes have the same values as the\n  //    values of input\u2019s code points, in the same order\n  return input\n}\n\n/**\n * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes\n * @see https://streams.spec.whatwg.org/#read-loop\n * @param {ReadableStreamDefaultReader} reader\n */\nasync function readAllBytes (reader) {\n  const bytes = []\n  let byteLength = 0\n\n  while (true) {\n    const { done, value: chunk } = await reader.read()\n\n    if (done) {\n      // 1. Call successSteps with bytes.\n      return Buffer.concat(bytes, byteLength)\n    }\n\n    // 1. If chunk is not a Uint8Array object, call failureSteps\n    //    with a TypeError and abort these steps.\n    if (!isUint8Array(chunk)) {\n      throw new TypeError('Received non-Uint8Array chunk')\n    }\n\n    // 2. Append the bytes represented by chunk to bytes.\n    bytes.push(chunk)\n    byteLength += chunk.length\n\n    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#is-local\n * @param {URL} url\n */\nfunction urlIsLocal (url) {\n  assert('protocol' in url) // ensure it's a url object\n\n  const protocol = url.protocol\n\n  return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:'\n}\n\n/**\n * @param {string|URL} url\n */\nfunction urlHasHttpsScheme (url) {\n  if (typeof url === 'string') {\n    return url.startsWith('https:')\n  }\n\n  return url.protocol === 'https:'\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-scheme\n * @param {URL} url\n */\nfunction urlIsHttpHttpsScheme (url) {\n  assert('protocol' in url) // ensure it's a url object\n\n  const protocol = url.protocol\n\n  return protocol === 'http:' || protocol === 'https:'\n}\n\n/**\n * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.\n */\nconst hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key))\n\nmodule.exports = {\n  isAborted,\n  isCancelled,\n  createDeferredPromise,\n  ReadableStreamFrom,\n  toUSVString,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  coarsenedSharedCurrentTime,\n  determineRequestsReferrer,\n  makePolicyContainer,\n  clonePolicyContainer,\n  appendFetchMetadata,\n  appendRequestOriginHeader,\n  TAOCheck,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  createOpaqueTimingInfo,\n  setRequestReferrerPolicyOnRedirect,\n  isValidHTTPToken,\n  requestBadPort,\n  requestCurrentURL,\n  responseURL,\n  responseLocationURL,\n  isBlobLike,\n  isURLPotentiallyTrustworthy,\n  isValidReasonPhrase,\n  sameOrigin,\n  normalizeMethod,\n  serializeJavascriptValueToJSONString,\n  makeIterator,\n  isValidHeaderName,\n  isValidHeaderValue,\n  hasOwn,\n  isErrorLike,\n  fullyReadBody,\n  bytesMatch,\n  isReadableStreamLike,\n  readableStreamClose,\n  isomorphicEncode,\n  isomorphicDecode,\n  urlIsLocal,\n  urlHasHttpsScheme,\n  urlIsHttpHttpsScheme,\n  readAllBytes,\n  normalizeMethodRecord,\n  parseMetadata\n}\n", "'use strict'\n\nmodule.exports = {\n  kUrl: Symbol('url'),\n  kHeaders: Symbol('headers'),\n  kSignal: Symbol('signal'),\n  kState: Symbol('state'),\n  kGuard: Symbol('guard'),\n  kRealm: Symbol('realm')\n}\n", "'use strict'\n\nconst { types } = require('util')\nconst { hasOwn, toUSVString } = require('./util')\n\n/** @type {import('../../types/webidl').Webidl} */\nconst webidl = {}\nwebidl.converters = {}\nwebidl.util = {}\nwebidl.errors = {}\n\nwebidl.errors.exception = function (message) {\n  return new TypeError(`${message.header}: ${message.message}`)\n}\n\nwebidl.errors.conversionFailed = function (context) {\n  const plural = context.types.length === 1 ? '' : ' one of'\n  const message =\n    `${context.argument} could not be converted to` +\n    `${plural}: ${context.types.join(', ')}.`\n\n  return webidl.errors.exception({\n    header: context.prefix,\n    message\n  })\n}\n\nwebidl.errors.invalidArgument = function (context) {\n  return webidl.errors.exception({\n    header: context.prefix,\n    message: `\"${context.value}\" is an invalid ${context.type}.`\n  })\n}\n\n// https://webidl.spec.whatwg.org/#implements\nwebidl.brandCheck = function (V, I, opts = undefined) {\n  if (opts?.strict !== false && !(V instanceof I)) {\n    throw new TypeError('Illegal invocation')\n  } else {\n    return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag]\n  }\n}\n\nwebidl.argumentLengthCheck = function ({ length }, min, ctx) {\n  if (length < min) {\n    throw webidl.errors.exception({\n      message: `${min} argument${min !== 1 ? 's' : ''} required, ` +\n               `but${length ? ' only' : ''} ${length} found.`,\n      ...ctx\n    })\n  }\n}\n\nwebidl.illegalConstructor = function () {\n  throw webidl.errors.exception({\n    header: 'TypeError',\n    message: 'Illegal constructor'\n  })\n}\n\n// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\nwebidl.util.Type = function (V) {\n  switch (typeof V) {\n    case 'undefined': return 'Undefined'\n    case 'boolean': return 'Boolean'\n    case 'string': return 'String'\n    case 'symbol': return 'Symbol'\n    case 'number': return 'Number'\n    case 'bigint': return 'BigInt'\n    case 'function':\n    case 'object': {\n      if (V === null) {\n        return 'Null'\n      }\n\n      return 'Object'\n    }\n  }\n}\n\n// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\nwebidl.util.ConvertToInt = function (V, bitLength, signedness, opts = {}) {\n  let upperBound\n  let lowerBound\n\n  // 1. If bitLength is 64, then:\n  if (bitLength === 64) {\n    // 1. Let upperBound be 2^53 \u2212 1.\n    upperBound = Math.pow(2, 53) - 1\n\n    // 2. If signedness is \"unsigned\", then let lowerBound be 0.\n    if (signedness === 'unsigned') {\n      lowerBound = 0\n    } else {\n      // 3. Otherwise let lowerBound be \u22122^53 + 1.\n      lowerBound = Math.pow(-2, 53) + 1\n    }\n  } else if (signedness === 'unsigned') {\n    // 2. Otherwise, if signedness is \"unsigned\", then:\n\n    // 1. Let lowerBound be 0.\n    lowerBound = 0\n\n    // 2. Let upperBound be 2^bitLength \u2212 1.\n    upperBound = Math.pow(2, bitLength) - 1\n  } else {\n    // 3. Otherwise:\n\n    // 1. Let lowerBound be -2^bitLength \u2212 1.\n    lowerBound = Math.pow(-2, bitLength) - 1\n\n    // 2. Let upperBound be 2^bitLength \u2212 1 \u2212 1.\n    upperBound = Math.pow(2, bitLength - 1) - 1\n  }\n\n  // 4. Let x be ? ToNumber(V).\n  let x = Number(V)\n\n  // 5. If x is \u22120, then set x to +0.\n  if (x === 0) {\n    x = 0\n  }\n\n  // 6. If the conversion is to an IDL type associated\n  //    with the [EnforceRange] extended attribute, then:\n  if (opts.enforceRange === true) {\n    // 1. If x is NaN, +\u221E, or \u2212\u221E, then throw a TypeError.\n    if (\n      Number.isNaN(x) ||\n      x === Number.POSITIVE_INFINITY ||\n      x === Number.NEGATIVE_INFINITY\n    ) {\n      throw webidl.errors.exception({\n        header: 'Integer conversion',\n        message: `Could not convert ${V} to an integer.`\n      })\n    }\n\n    // 2. Set x to IntegerPart(x).\n    x = webidl.util.IntegerPart(x)\n\n    // 3. If x < lowerBound or x > upperBound, then\n    //    throw a TypeError.\n    if (x < lowerBound || x > upperBound) {\n      throw webidl.errors.exception({\n        header: 'Integer conversion',\n        message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`\n      })\n    }\n\n    // 4. Return x.\n    return x\n  }\n\n  // 7. If x is not NaN and the conversion is to an IDL\n  //    type associated with the [Clamp] extended\n  //    attribute, then:\n  if (!Number.isNaN(x) && opts.clamp === true) {\n    // 1. Set x to min(max(x, lowerBound), upperBound).\n    x = Math.min(Math.max(x, lowerBound), upperBound)\n\n    // 2. Round x to the nearest integer, choosing the\n    //    even integer if it lies halfway between two,\n    //    and choosing +0 rather than \u22120.\n    if (Math.floor(x) % 2 === 0) {\n      x = Math.floor(x)\n    } else {\n      x = Math.ceil(x)\n    }\n\n    // 3. Return x.\n    return x\n  }\n\n  // 8. If x is NaN, +0, +\u221E, or \u2212\u221E, then return +0.\n  if (\n    Number.isNaN(x) ||\n    (x === 0 && Object.is(0, x)) ||\n    x === Number.POSITIVE_INFINITY ||\n    x === Number.NEGATIVE_INFINITY\n  ) {\n    return 0\n  }\n\n  // 9. Set x to IntegerPart(x).\n  x = webidl.util.IntegerPart(x)\n\n  // 10. Set x to x modulo 2^bitLength.\n  x = x % Math.pow(2, bitLength)\n\n  // 11. If signedness is \"signed\" and x \u2265 2^bitLength \u2212 1,\n  //    then return x \u2212 2^bitLength.\n  if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {\n    return x - Math.pow(2, bitLength)\n  }\n\n  // 12. Otherwise, return x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart\nwebidl.util.IntegerPart = function (n) {\n  // 1. Let r be floor(abs(n)).\n  const r = Math.floor(Math.abs(n))\n\n  // 2. If n < 0, then return -1 \u00D7 r.\n  if (n < 0) {\n    return -1 * r\n  }\n\n  // 3. Otherwise, return r.\n  return r\n}\n\n// https://webidl.spec.whatwg.org/#es-sequence\nwebidl.sequenceConverter = function (converter) {\n  return (V) => {\n    // 1. If Type(V) is not Object, throw a TypeError.\n    if (webidl.util.Type(V) !== 'Object') {\n      throw webidl.errors.exception({\n        header: 'Sequence',\n        message: `Value of type ${webidl.util.Type(V)} is not an Object.`\n      })\n    }\n\n    // 2. Let method be ? GetMethod(V, @@iterator).\n    /** @type {Generator} */\n    const method = V?.[Symbol.iterator]?.()\n    const seq = []\n\n    // 3. If method is undefined, throw a TypeError.\n    if (\n      method === undefined ||\n      typeof method.next !== 'function'\n    ) {\n      throw webidl.errors.exception({\n        header: 'Sequence',\n        message: 'Object is not an iterator.'\n      })\n    }\n\n    // https://webidl.spec.whatwg.org/#create-sequence-from-iterable\n    while (true) {\n      const { done, value } = method.next()\n\n      if (done) {\n        break\n      }\n\n      seq.push(converter(value))\n    }\n\n    return seq\n  }\n}\n\n// https://webidl.spec.whatwg.org/#es-to-record\nwebidl.recordConverter = function (keyConverter, valueConverter) {\n  return (O) => {\n    // 1. If Type(O) is not Object, throw a TypeError.\n    if (webidl.util.Type(O) !== 'Object') {\n      throw webidl.errors.exception({\n        header: 'Record',\n        message: `Value of type ${webidl.util.Type(O)} is not an Object.`\n      })\n    }\n\n    // 2. Let result be a new empty instance of record<K, V>.\n    const result = {}\n\n    if (!types.isProxy(O)) {\n      // Object.keys only returns enumerable properties\n      const keys = Object.keys(O)\n\n      for (const key of keys) {\n        // 1. Let typedKey be key converted to an IDL value of type K.\n        const typedKey = keyConverter(key)\n\n        // 2. Let value be ? Get(O, key).\n        // 3. Let typedValue be value converted to an IDL value of type V.\n        const typedValue = valueConverter(O[key])\n\n        // 4. Set result[typedKey] to typedValue.\n        result[typedKey] = typedValue\n      }\n\n      // 5. Return result.\n      return result\n    }\n\n    // 3. Let keys be ? O.[[OwnPropertyKeys]]().\n    const keys = Reflect.ownKeys(O)\n\n    // 4. For each key of keys.\n    for (const key of keys) {\n      // 1. Let desc be ? O.[[GetOwnProperty]](key).\n      const desc = Reflect.getOwnPropertyDescriptor(O, key)\n\n      // 2. If desc is not undefined and desc.[[Enumerable]] is true:\n      if (desc?.enumerable) {\n        // 1. Let typedKey be key converted to an IDL value of type K.\n        const typedKey = keyConverter(key)\n\n        // 2. Let value be ? Get(O, key).\n        // 3. Let typedValue be value converted to an IDL value of type V.\n        const typedValue = valueConverter(O[key])\n\n        // 4. Set result[typedKey] to typedValue.\n        result[typedKey] = typedValue\n      }\n    }\n\n    // 5. Return result.\n    return result\n  }\n}\n\nwebidl.interfaceConverter = function (i) {\n  return (V, opts = {}) => {\n    if (opts.strict !== false && !(V instanceof i)) {\n      throw webidl.errors.exception({\n        header: i.name,\n        message: `Expected ${V} to be an instance of ${i.name}.`\n      })\n    }\n\n    return V\n  }\n}\n\nwebidl.dictionaryConverter = function (converters) {\n  return (dictionary) => {\n    const type = webidl.util.Type(dictionary)\n    const dict = {}\n\n    if (type === 'Null' || type === 'Undefined') {\n      return dict\n    } else if (type !== 'Object') {\n      throw webidl.errors.exception({\n        header: 'Dictionary',\n        message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`\n      })\n    }\n\n    for (const options of converters) {\n      const { key, defaultValue, required, converter } = options\n\n      if (required === true) {\n        if (!hasOwn(dictionary, key)) {\n          throw webidl.errors.exception({\n            header: 'Dictionary',\n            message: `Missing required key \"${key}\".`\n          })\n        }\n      }\n\n      let value = dictionary[key]\n      const hasDefault = hasOwn(options, 'defaultValue')\n\n      // Only use defaultValue if value is undefined and\n      // a defaultValue options was provided.\n      if (hasDefault && value !== null) {\n        value = value ?? defaultValue\n      }\n\n      // A key can be optional and have no default value.\n      // When this happens, do not perform a conversion,\n      // and do not assign the key a value.\n      if (required || hasDefault || value !== undefined) {\n        value = converter(value)\n\n        if (\n          options.allowedValues &&\n          !options.allowedValues.includes(value)\n        ) {\n          throw webidl.errors.exception({\n            header: 'Dictionary',\n            message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`\n          })\n        }\n\n        dict[key] = value\n      }\n    }\n\n    return dict\n  }\n}\n\nwebidl.nullableConverter = function (converter) {\n  return (V) => {\n    if (V === null) {\n      return V\n    }\n\n    return converter(V)\n  }\n}\n\n// https://webidl.spec.whatwg.org/#es-DOMString\nwebidl.converters.DOMString = function (V, opts = {}) {\n  // 1. If V is null and the conversion is to an IDL type\n  //    associated with the [LegacyNullToEmptyString]\n  //    extended attribute, then return the DOMString value\n  //    that represents the empty string.\n  if (V === null && opts.legacyNullToEmptyString) {\n    return ''\n  }\n\n  // 2. Let x be ? ToString(V).\n  if (typeof V === 'symbol') {\n    throw new TypeError('Could not convert argument of type symbol to string.')\n  }\n\n  // 3. Return the IDL DOMString value that represents the\n  //    same sequence of code units as the one the\n  //    ECMAScript String value x represents.\n  return String(V)\n}\n\n// https://webidl.spec.whatwg.org/#es-ByteString\nwebidl.converters.ByteString = function (V) {\n  // 1. Let x be ? ToString(V).\n  // Note: DOMString converter perform ? ToString(V)\n  const x = webidl.converters.DOMString(V)\n\n  // 2. If the value of any element of x is greater than\n  //    255, then throw a TypeError.\n  for (let index = 0; index < x.length; index++) {\n    if (x.charCodeAt(index) > 255) {\n      throw new TypeError(\n        'Cannot convert argument to a ByteString because the character at ' +\n        `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`\n      )\n    }\n  }\n\n  // 3. Return an IDL ByteString value whose length is the\n  //    length of x, and where the value of each element is\n  //    the value of the corresponding element of x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-USVString\nwebidl.converters.USVString = toUSVString\n\n// https://webidl.spec.whatwg.org/#es-boolean\nwebidl.converters.boolean = function (V) {\n  // 1. Let x be the result of computing ToBoolean(V).\n  const x = Boolean(V)\n\n  // 2. Return the IDL boolean value that is the one that represents\n  //    the same truth value as the ECMAScript Boolean value x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-any\nwebidl.converters.any = function (V) {\n  return V\n}\n\n// https://webidl.spec.whatwg.org/#es-long-long\nwebidl.converters['long long'] = function (V) {\n  // 1. Let x be ? ConvertToInt(V, 64, \"signed\").\n  const x = webidl.util.ConvertToInt(V, 64, 'signed')\n\n  // 2. Return the IDL long long value that represents\n  //    the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-unsigned-long-long\nwebidl.converters['unsigned long long'] = function (V) {\n  // 1. Let x be ? ConvertToInt(V, 64, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 64, 'unsigned')\n\n  // 2. Return the IDL unsigned long long value that\n  //    represents the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-unsigned-long\nwebidl.converters['unsigned long'] = function (V) {\n  // 1. Let x be ? ConvertToInt(V, 32, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 32, 'unsigned')\n\n  // 2. Return the IDL unsigned long value that\n  //    represents the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-unsigned-short\nwebidl.converters['unsigned short'] = function (V, opts) {\n  // 1. Let x be ? ConvertToInt(V, 16, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts)\n\n  // 2. Return the IDL unsigned short value that represents\n  //    the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#idl-ArrayBuffer\nwebidl.converters.ArrayBuffer = function (V, opts = {}) {\n  // 1. If Type(V) is not Object, or V does not have an\n  //    [[ArrayBufferData]] internal slot, then throw a\n  //    TypeError.\n  // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances\n  // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances\n  if (\n    webidl.util.Type(V) !== 'Object' ||\n    !types.isAnyArrayBuffer(V)\n  ) {\n    throw webidl.errors.conversionFailed({\n      prefix: `${V}`,\n      argument: `${V}`,\n      types: ['ArrayBuffer']\n    })\n  }\n\n  // 2. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V) is true, then throw a\n  //    TypeError.\n  if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    })\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V) is true, then throw a\n  //    TypeError.\n  // Note: resizable ArrayBuffers are currently a proposal.\n\n  // 4. Return the IDL ArrayBuffer value that is a\n  //    reference to the same object as V.\n  return V\n}\n\nwebidl.converters.TypedArray = function (V, T, opts = {}) {\n  // 1. Let T be the IDL type V is being converted to.\n\n  // 2. If Type(V) is not Object, or V does not have a\n  //    [[TypedArrayName]] internal slot with a value\n  //    equal to T\u2019s name, then throw a TypeError.\n  if (\n    webidl.util.Type(V) !== 'Object' ||\n    !types.isTypedArray(V) ||\n    V.constructor.name !== T.name\n  ) {\n    throw webidl.errors.conversionFailed({\n      prefix: `${T.name}`,\n      argument: `${V}`,\n      types: [T.name]\n    })\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    })\n  }\n\n  // 4. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  // Note: resizable array buffers are currently a proposal\n\n  // 5. Return the IDL value of type T that is a reference\n  //    to the same object as V.\n  return V\n}\n\nwebidl.converters.DataView = function (V, opts = {}) {\n  // 1. If Type(V) is not Object, or V does not have a\n  //    [[DataView]] internal slot, then throw a TypeError.\n  if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {\n    throw webidl.errors.exception({\n      header: 'DataView',\n      message: 'Object is not a DataView.'\n    })\n  }\n\n  // 2. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,\n  //    then throw a TypeError.\n  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    })\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  // Note: resizable ArrayBuffers are currently a proposal\n\n  // 4. Return the IDL DataView value that is a reference\n  //    to the same object as V.\n  return V\n}\n\n// https://webidl.spec.whatwg.org/#BufferSource\nwebidl.converters.BufferSource = function (V, opts = {}) {\n  if (types.isAnyArrayBuffer(V)) {\n    return webidl.converters.ArrayBuffer(V, opts)\n  }\n\n  if (types.isTypedArray(V)) {\n    return webidl.converters.TypedArray(V, V.constructor)\n  }\n\n  if (types.isDataView(V)) {\n    return webidl.converters.DataView(V, opts)\n  }\n\n  throw new TypeError(`Could not convert ${V} to a BufferSource.`)\n}\n\nwebidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(\n  webidl.converters.ByteString\n)\n\nwebidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(\n  webidl.converters['sequence<ByteString>']\n)\n\nwebidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(\n  webidl.converters.ByteString,\n  webidl.converters.ByteString\n)\n\nmodule.exports = {\n  webidl\n}\n", "const assert = require('assert')\nconst { atob } = require('buffer')\nconst { isomorphicDecode } = require('./util')\n\nconst encoder = new TextEncoder()\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-token-code-point\n */\nconst HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/\nconst HTTP_WHITESPACE_REGEX = /(\\u000A|\\u000D|\\u0009|\\u0020)/ // eslint-disable-line\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point\n */\nconst HTTP_QUOTED_STRING_TOKENS = /[\\u0009|\\u0020-\\u007E|\\u0080-\\u00FF]/ // eslint-disable-line\n\n// https://fetch.spec.whatwg.org/#data-url-processor\n/** @param {URL} dataURL */\nfunction dataURLProcessor (dataURL) {\n  // 1. Assert: dataURL\u2019s scheme is \"data\".\n  assert(dataURL.protocol === 'data:')\n\n  // 2. Let input be the result of running the URL\n  // serializer on dataURL with exclude fragment\n  // set to true.\n  let input = URLSerializer(dataURL, true)\n\n  // 3. Remove the leading \"data:\" string from input.\n  input = input.slice(5)\n\n  // 4. Let position point at the start of input.\n  const position = { position: 0 }\n\n  // 5. Let mimeType be the result of collecting a\n  // sequence of code points that are not equal\n  // to U+002C (,), given position.\n  let mimeType = collectASequenceOfCodePointsFast(\n    ',',\n    input,\n    position\n  )\n\n  // 6. Strip leading and trailing ASCII whitespace\n  // from mimeType.\n  // Undici implementation note: we need to store the\n  // length because if the mimetype has spaces removed,\n  // the wrong amount will be sliced from the input in\n  // step #9\n  const mimeTypeLength = mimeType.length\n  mimeType = removeASCIIWhitespace(mimeType, true, true)\n\n  // 7. If position is past the end of input, then\n  // return failure\n  if (position.position >= input.length) {\n    return 'failure'\n  }\n\n  // 8. Advance position by 1.\n  position.position++\n\n  // 9. Let encodedBody be the remainder of input.\n  const encodedBody = input.slice(mimeTypeLength + 1)\n\n  // 10. Let body be the percent-decoding of encodedBody.\n  let body = stringPercentDecode(encodedBody)\n\n  // 11. If mimeType ends with U+003B (;), followed by\n  // zero or more U+0020 SPACE, followed by an ASCII\n  // case-insensitive match for \"base64\", then:\n  if (/;(\\u0020){0,}base64$/i.test(mimeType)) {\n    // 1. Let stringBody be the isomorphic decode of body.\n    const stringBody = isomorphicDecode(body)\n\n    // 2. Set body to the forgiving-base64 decode of\n    // stringBody.\n    body = forgivingBase64(stringBody)\n\n    // 3. If body is failure, then return failure.\n    if (body === 'failure') {\n      return 'failure'\n    }\n\n    // 4. Remove the last 6 code points from mimeType.\n    mimeType = mimeType.slice(0, -6)\n\n    // 5. Remove trailing U+0020 SPACE code points from mimeType,\n    // if any.\n    mimeType = mimeType.replace(/(\\u0020)+$/, '')\n\n    // 6. Remove the last U+003B (;) code point from mimeType.\n    mimeType = mimeType.slice(0, -1)\n  }\n\n  // 12. If mimeType starts with U+003B (;), then prepend\n  // \"text/plain\" to mimeType.\n  if (mimeType.startsWith(';')) {\n    mimeType = 'text/plain' + mimeType\n  }\n\n  // 13. Let mimeTypeRecord be the result of parsing\n  // mimeType.\n  let mimeTypeRecord = parseMIMEType(mimeType)\n\n  // 14. If mimeTypeRecord is failure, then set\n  // mimeTypeRecord to text/plain;charset=US-ASCII.\n  if (mimeTypeRecord === 'failure') {\n    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII')\n  }\n\n  // 15. Return a new data: URL struct whose MIME\n  // type is mimeTypeRecord and body is body.\n  // https://fetch.spec.whatwg.org/#data-url-struct\n  return { mimeType: mimeTypeRecord, body }\n}\n\n// https://url.spec.whatwg.org/#concept-url-serializer\n/**\n * @param {URL} url\n * @param {boolean} excludeFragment\n */\nfunction URLSerializer (url, excludeFragment = false) {\n  if (!excludeFragment) {\n    return url.href\n  }\n\n  const href = url.href\n  const hashLength = url.hash.length\n\n  return hashLength === 0 ? href : href.substring(0, href.length - hashLength)\n}\n\n// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points\n/**\n * @param {(char: string) => boolean} condition\n * @param {string} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfCodePoints (condition, input, position) {\n  // 1. Let result be the empty string.\n  let result = ''\n\n  // 2. While position doesn\u2019t point past the end of input and the\n  // code point at position within input meets the condition condition:\n  while (position.position < input.length && condition(input[position.position])) {\n    // 1. Append that code point to the end of result.\n    result += input[position.position]\n\n    // 2. Advance position by 1.\n    position.position++\n  }\n\n  // 3. Return result.\n  return result\n}\n\n/**\n * A faster collectASequenceOfCodePoints that only works when comparing a single character.\n * @param {string} char\n * @param {string} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfCodePointsFast (char, input, position) {\n  const idx = input.indexOf(char, position.position)\n  const start = position.position\n\n  if (idx === -1) {\n    position.position = input.length\n    return input.slice(start)\n  }\n\n  position.position = idx\n  return input.slice(start, position.position)\n}\n\n// https://url.spec.whatwg.org/#string-percent-decode\n/** @param {string} input */\nfunction stringPercentDecode (input) {\n  // 1. Let bytes be the UTF-8 encoding of input.\n  const bytes = encoder.encode(input)\n\n  // 2. Return the percent-decoding of bytes.\n  return percentDecode(bytes)\n}\n\n// https://url.spec.whatwg.org/#percent-decode\n/** @param {Uint8Array} input */\nfunction percentDecode (input) {\n  // 1. Let output be an empty byte sequence.\n  /** @type {number[]} */\n  const output = []\n\n  // 2. For each byte byte in input:\n  for (let i = 0; i < input.length; i++) {\n    const byte = input[i]\n\n    // 1. If byte is not 0x25 (%), then append byte to output.\n    if (byte !== 0x25) {\n      output.push(byte)\n\n    // 2. Otherwise, if byte is 0x25 (%) and the next two bytes\n    // after byte in input are not in the ranges\n    // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),\n    // and 0x61 (a) to 0x66 (f), all inclusive, append byte\n    // to output.\n    } else if (\n      byte === 0x25 &&\n      !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))\n    ) {\n      output.push(0x25)\n\n    // 3. Otherwise:\n    } else {\n      // 1. Let bytePoint be the two bytes after byte in input,\n      // decoded, and then interpreted as hexadecimal number.\n      const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2])\n      const bytePoint = Number.parseInt(nextTwoBytes, 16)\n\n      // 2. Append a byte whose value is bytePoint to output.\n      output.push(bytePoint)\n\n      // 3. Skip the next two bytes in input.\n      i += 2\n    }\n  }\n\n  // 3. Return output.\n  return Uint8Array.from(output)\n}\n\n// https://mimesniff.spec.whatwg.org/#parse-a-mime-type\n/** @param {string} input */\nfunction parseMIMEType (input) {\n  // 1. Remove any leading and trailing HTTP whitespace\n  // from input.\n  input = removeHTTPWhitespace(input, true, true)\n\n  // 2. Let position be a position variable for input,\n  // initially pointing at the start of input.\n  const position = { position: 0 }\n\n  // 3. Let type be the result of collecting a sequence\n  // of code points that are not U+002F (/) from\n  // input, given position.\n  const type = collectASequenceOfCodePointsFast(\n    '/',\n    input,\n    position\n  )\n\n  // 4. If type is the empty string or does not solely\n  // contain HTTP token code points, then return failure.\n  // https://mimesniff.spec.whatwg.org/#http-token-code-point\n  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {\n    return 'failure'\n  }\n\n  // 5. If position is past the end of input, then return\n  // failure\n  if (position.position > input.length) {\n    return 'failure'\n  }\n\n  // 6. Advance position by 1. (This skips past U+002F (/).)\n  position.position++\n\n  // 7. Let subtype be the result of collecting a sequence of\n  // code points that are not U+003B (;) from input, given\n  // position.\n  let subtype = collectASequenceOfCodePointsFast(\n    ';',\n    input,\n    position\n  )\n\n  // 8. Remove any trailing HTTP whitespace from subtype.\n  subtype = removeHTTPWhitespace(subtype, false, true)\n\n  // 9. If subtype is the empty string or does not solely\n  // contain HTTP token code points, then return failure.\n  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {\n    return 'failure'\n  }\n\n  const typeLowercase = type.toLowerCase()\n  const subtypeLowercase = subtype.toLowerCase()\n\n  // 10. Let mimeType be a new MIME type record whose type\n  // is type, in ASCII lowercase, and subtype is subtype,\n  // in ASCII lowercase.\n  // https://mimesniff.spec.whatwg.org/#mime-type\n  const mimeType = {\n    type: typeLowercase,\n    subtype: subtypeLowercase,\n    /** @type {Map<string, string>} */\n    parameters: new Map(),\n    // https://mimesniff.spec.whatwg.org/#mime-type-essence\n    essence: `${typeLowercase}/${subtypeLowercase}`\n  }\n\n  // 11. While position is not past the end of input:\n  while (position.position < input.length) {\n    // 1. Advance position by 1. (This skips past U+003B (;).)\n    position.position++\n\n    // 2. Collect a sequence of code points that are HTTP\n    // whitespace from input given position.\n    collectASequenceOfCodePoints(\n      // https://fetch.spec.whatwg.org/#http-whitespace\n      char => HTTP_WHITESPACE_REGEX.test(char),\n      input,\n      position\n    )\n\n    // 3. Let parameterName be the result of collecting a\n    // sequence of code points that are not U+003B (;)\n    // or U+003D (=) from input, given position.\n    let parameterName = collectASequenceOfCodePoints(\n      (char) => char !== ';' && char !== '=',\n      input,\n      position\n    )\n\n    // 4. Set parameterName to parameterName, in ASCII\n    // lowercase.\n    parameterName = parameterName.toLowerCase()\n\n    // 5. If position is not past the end of input, then:\n    if (position.position < input.length) {\n      // 1. If the code point at position within input is\n      // U+003B (;), then continue.\n      if (input[position.position] === ';') {\n        continue\n      }\n\n      // 2. Advance position by 1. (This skips past U+003D (=).)\n      position.position++\n    }\n\n    // 6. If position is past the end of input, then break.\n    if (position.position > input.length) {\n      break\n    }\n\n    // 7. Let parameterValue be null.\n    let parameterValue = null\n\n    // 8. If the code point at position within input is\n    // U+0022 (\"), then:\n    if (input[position.position] === '\"') {\n      // 1. Set parameterValue to the result of collecting\n      // an HTTP quoted string from input, given position\n      // and the extract-value flag.\n      parameterValue = collectAnHTTPQuotedString(input, position, true)\n\n      // 2. Collect a sequence of code points that are not\n      // U+003B (;) from input, given position.\n      collectASequenceOfCodePointsFast(\n        ';',\n        input,\n        position\n      )\n\n    // 9. Otherwise:\n    } else {\n      // 1. Set parameterValue to the result of collecting\n      // a sequence of code points that are not U+003B (;)\n      // from input, given position.\n      parameterValue = collectASequenceOfCodePointsFast(\n        ';',\n        input,\n        position\n      )\n\n      // 2. Remove any trailing HTTP whitespace from parameterValue.\n      parameterValue = removeHTTPWhitespace(parameterValue, false, true)\n\n      // 3. If parameterValue is the empty string, then continue.\n      if (parameterValue.length === 0) {\n        continue\n      }\n    }\n\n    // 10. If all of the following are true\n    // - parameterName is not the empty string\n    // - parameterName solely contains HTTP token code points\n    // - parameterValue solely contains HTTP quoted-string token code points\n    // - mimeType\u2019s parameters[parameterName] does not exist\n    // then set mimeType\u2019s parameters[parameterName] to parameterValue.\n    if (\n      parameterName.length !== 0 &&\n      HTTP_TOKEN_CODEPOINTS.test(parameterName) &&\n      (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&\n      !mimeType.parameters.has(parameterName)\n    ) {\n      mimeType.parameters.set(parameterName, parameterValue)\n    }\n  }\n\n  // 12. Return mimeType.\n  return mimeType\n}\n\n// https://infra.spec.whatwg.org/#forgiving-base64-decode\n/** @param {string} data */\nfunction forgivingBase64 (data) {\n  // 1. Remove all ASCII whitespace from data.\n  data = data.replace(/[\\u0009\\u000A\\u000C\\u000D\\u0020]/g, '')  // eslint-disable-line\n\n  // 2. If data\u2019s code point length divides by 4 leaving\n  // no remainder, then:\n  if (data.length % 4 === 0) {\n    // 1. If data ends with one or two U+003D (=) code points,\n    // then remove them from data.\n    data = data.replace(/=?=$/, '')\n  }\n\n  // 3. If data\u2019s code point length divides by 4 leaving\n  // a remainder of 1, then return failure.\n  if (data.length % 4 === 1) {\n    return 'failure'\n  }\n\n  // 4. If data contains a code point that is not one of\n  //  U+002B (+)\n  //  U+002F (/)\n  //  ASCII alphanumeric\n  // then return failure.\n  if (/[^+/0-9A-Za-z]/.test(data)) {\n    return 'failure'\n  }\n\n  const binary = atob(data)\n  const bytes = new Uint8Array(binary.length)\n\n  for (let byte = 0; byte < binary.length; byte++) {\n    bytes[byte] = binary.charCodeAt(byte)\n  }\n\n  return bytes\n}\n\n// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string\n// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string\n/**\n * @param {string} input\n * @param {{ position: number }} position\n * @param {boolean?} extractValue\n */\nfunction collectAnHTTPQuotedString (input, position, extractValue) {\n  // 1. Let positionStart be position.\n  const positionStart = position.position\n\n  // 2. Let value be the empty string.\n  let value = ''\n\n  // 3. Assert: the code point at position within input\n  // is U+0022 (\").\n  assert(input[position.position] === '\"')\n\n  // 4. Advance position by 1.\n  position.position++\n\n  // 5. While true:\n  while (true) {\n    // 1. Append the result of collecting a sequence of code points\n    // that are not U+0022 (\") or U+005C (\\) from input, given\n    // position, to value.\n    value += collectASequenceOfCodePoints(\n      (char) => char !== '\"' && char !== '\\\\',\n      input,\n      position\n    )\n\n    // 2. If position is past the end of input, then break.\n    if (position.position >= input.length) {\n      break\n    }\n\n    // 3. Let quoteOrBackslash be the code point at position within\n    // input.\n    const quoteOrBackslash = input[position.position]\n\n    // 4. Advance position by 1.\n    position.position++\n\n    // 5. If quoteOrBackslash is U+005C (\\), then:\n    if (quoteOrBackslash === '\\\\') {\n      // 1. If position is past the end of input, then append\n      // U+005C (\\) to value and break.\n      if (position.position >= input.length) {\n        value += '\\\\'\n        break\n      }\n\n      // 2. Append the code point at position within input to value.\n      value += input[position.position]\n\n      // 3. Advance position by 1.\n      position.position++\n\n    // 6. Otherwise:\n    } else {\n      // 1. Assert: quoteOrBackslash is U+0022 (\").\n      assert(quoteOrBackslash === '\"')\n\n      // 2. Break.\n      break\n    }\n  }\n\n  // 6. If the extract-value flag is set, then return value.\n  if (extractValue) {\n    return value\n  }\n\n  // 7. Return the code points from positionStart to position,\n  // inclusive, within input.\n  return input.slice(positionStart, position.position)\n}\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type\n */\nfunction serializeAMimeType (mimeType) {\n  assert(mimeType !== 'failure')\n  const { parameters, essence } = mimeType\n\n  // 1. Let serialization be the concatenation of mimeType\u2019s\n  //    type, U+002F (/), and mimeType\u2019s subtype.\n  let serialization = essence\n\n  // 2. For each name \u2192 value of mimeType\u2019s parameters:\n  for (let [name, value] of parameters.entries()) {\n    // 1. Append U+003B (;) to serialization.\n    serialization += ';'\n\n    // 2. Append name to serialization.\n    serialization += name\n\n    // 3. Append U+003D (=) to serialization.\n    serialization += '='\n\n    // 4. If value does not solely contain HTTP token code\n    //    points or value is the empty string, then:\n    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {\n      // 1. Precede each occurence of U+0022 (\") or\n      //    U+005C (\\) in value with U+005C (\\).\n      value = value.replace(/(\\\\|\")/g, '\\\\$1')\n\n      // 2. Prepend U+0022 (\") to value.\n      value = '\"' + value\n\n      // 3. Append U+0022 (\") to value.\n      value += '\"'\n    }\n\n    // 5. Append value to serialization.\n    serialization += value\n  }\n\n  // 3. Return serialization.\n  return serialization\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} char\n */\nfunction isHTTPWhiteSpace (char) {\n  return char === '\\r' || char === '\\n' || char === '\\t' || char === ' '\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} str\n */\nfunction removeHTTPWhitespace (str, leading = true, trailing = true) {\n  let lead = 0\n  let trail = str.length - 1\n\n  if (leading) {\n    for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);\n  }\n\n  if (trailing) {\n    for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);\n  }\n\n  return str.slice(lead, trail + 1)\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n * @param {string} char\n */\nfunction isASCIIWhitespace (char) {\n  return char === '\\r' || char === '\\n' || char === '\\t' || char === '\\f' || char === ' '\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\n */\nfunction removeASCIIWhitespace (str, leading = true, trailing = true) {\n  let lead = 0\n  let trail = str.length - 1\n\n  if (leading) {\n    for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);\n  }\n\n  if (trailing) {\n    for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);\n  }\n\n  return str.slice(lead, trail + 1)\n}\n\nmodule.exports = {\n  dataURLProcessor,\n  URLSerializer,\n  collectASequenceOfCodePoints,\n  collectASequenceOfCodePointsFast,\n  stringPercentDecode,\n  parseMIMEType,\n  collectAnHTTPQuotedString,\n  serializeAMimeType\n}\n", "'use strict'\n\nconst { Blob, File: NativeFile } = require('buffer')\nconst { types } = require('util')\nconst { kState } = require('./symbols')\nconst { isBlobLike } = require('./util')\nconst { webidl } = require('./webidl')\nconst { parseMIMEType, serializeAMimeType } = require('./dataURL')\nconst { kEnumerableProperty } = require('../core/util')\nconst encoder = new TextEncoder()\n\nclass File extends Blob {\n  constructor (fileBits, fileName, options = {}) {\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    webidl.argumentLengthCheck(arguments, 2, { header: 'File constructor' })\n\n    fileBits = webidl.converters['sequence<BlobPart>'](fileBits)\n    fileName = webidl.converters.USVString(fileName)\n    options = webidl.converters.FilePropertyBag(options)\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // Note: Blob handles this for us\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    2. Convert every character in t to ASCII lowercase.\n    let t = options.type\n    let d\n\n    // eslint-disable-next-line no-labels\n    substep: {\n      if (t) {\n        t = parseMIMEType(t)\n\n        if (t === 'failure') {\n          t = ''\n          // eslint-disable-next-line no-labels\n          break substep\n        }\n\n        t = serializeAMimeType(t).toLowerCase()\n      }\n\n      //    3. If the lastModified member is provided, let d be set to the\n      //    lastModified dictionary member. If it is not provided, set d to the\n      //    current date and time represented as the number of milliseconds since\n      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n      d = options.lastModified\n    }\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    super(processBlobParts(fileBits, options), { type: t })\n    this[kState] = {\n      name: n,\n      lastModified: d,\n      type: t\n    }\n  }\n\n  get name () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].lastModified\n  }\n\n  get type () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].type\n  }\n}\n\nclass FileLike {\n  constructor (blobLike, fileName, options = {}) {\n    // TODO: argument idl type check\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n    const t = options.type\n\n    //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified ?? Date.now()\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    }\n  }\n\n  stream (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.stream(...args)\n  }\n\n  arrayBuffer (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.arrayBuffer(...args)\n  }\n\n  slice (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.slice(...args)\n  }\n\n  text (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.text(...args)\n  }\n\n  get size () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.size\n  }\n\n  get type () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.type\n  }\n\n  get name () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n}\n\nObject.defineProperties(File.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'File',\n    configurable: true\n  },\n  name: kEnumerableProperty,\n  lastModified: kEnumerableProperty\n})\n\nwebidl.converters.Blob = webidl.interfaceConverter(Blob)\n\nwebidl.converters.BlobPart = function (V, opts) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, { strict: false })\n    }\n\n    if (\n      ArrayBuffer.isView(V) ||\n      types.isAnyArrayBuffer(V)\n    ) {\n      return webidl.converters.BufferSource(V, opts)\n    }\n  }\n\n  return webidl.converters.USVString(V, opts)\n}\n\nwebidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(\n  webidl.converters.BlobPart\n)\n\n// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag\nwebidl.converters.FilePropertyBag = webidl.dictionaryConverter([\n  {\n    key: 'lastModified',\n    converter: webidl.converters['long long'],\n    get defaultValue () {\n      return Date.now()\n    }\n  },\n  {\n    key: 'type',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'endings',\n    converter: (value) => {\n      value = webidl.converters.DOMString(value)\n      value = value.toLowerCase()\n\n      if (value !== 'native') {\n        value = 'transparent'\n      }\n\n      return value\n    },\n    defaultValue: 'transparent'\n  }\n])\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#process-blob-parts\n * @param {(NodeJS.TypedArray|Blob|string)[]} parts\n * @param {{ type: string, endings: string }} options\n */\nfunction processBlobParts (parts, options) {\n  // 1. Let bytes be an empty sequence of bytes.\n  /** @type {NodeJS.TypedArray[]} */\n  const bytes = []\n\n  // 2. For each element in parts:\n  for (const element of parts) {\n    // 1. If element is a USVString, run the following substeps:\n    if (typeof element === 'string') {\n      // 1. Let s be element.\n      let s = element\n\n      // 2. If the endings member of options is \"native\", set s\n      //    to the result of converting line endings to native\n      //    of element.\n      if (options.endings === 'native') {\n        s = convertLineEndingsNative(s)\n      }\n\n      // 3. Append the result of UTF-8 encoding s to bytes.\n      bytes.push(encoder.encode(s))\n    } else if (\n      types.isAnyArrayBuffer(element) ||\n      types.isTypedArray(element)\n    ) {\n      // 2. If element is a BufferSource, get a copy of the\n      //    bytes held by the buffer source, and append those\n      //    bytes to bytes.\n      if (!element.buffer) { // ArrayBuffer\n        bytes.push(new Uint8Array(element))\n      } else {\n        bytes.push(\n          new Uint8Array(element.buffer, element.byteOffset, element.byteLength)\n        )\n      }\n    } else if (isBlobLike(element)) {\n      // 3. If element is a Blob, append the bytes it represents\n      //    to bytes.\n      bytes.push(element)\n    }\n  }\n\n  // 3. Return bytes.\n  return bytes\n}\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native\n * @param {string} s\n */\nfunction convertLineEndingsNative (s) {\n  // 1. Let native line ending be be the code point U+000A LF.\n  let nativeLineEnding = '\\n'\n\n  // 2. If the underlying platform\u2019s conventions are to\n  //    represent newlines as a carriage return and line feed\n  //    sequence, set native line ending to the code point\n  //    U+000D CR followed by the code point U+000A LF.\n  if (process.platform === 'win32') {\n    nativeLineEnding = '\\r\\n'\n  }\n\n  return s.replace(/\\r?\\n/g, nativeLineEnding)\n}\n\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction isFileLike (object) {\n  return (\n    (NativeFile && object instanceof NativeFile) ||\n    object instanceof File || (\n      object &&\n      (typeof object.stream === 'function' ||\n      typeof object.arrayBuffer === 'function') &&\n      object[Symbol.toStringTag] === 'File'\n    )\n  )\n}\n\nmodule.exports = { File, FileLike, isFileLike }\n", "'use strict'\n\nconst { isBlobLike, toUSVString, makeIterator } = require('./util')\nconst { kState } = require('./symbols')\nconst { File: UndiciFile, FileLike, isFileLike } = require('./file')\nconst { webidl } = require('./webidl')\nconst { Blob, File: NativeFile } = require('buffer')\n\n/** @type {globalThis['File']} */\nconst File = NativeFile ?? UndiciFile\n\n// https://xhr.spec.whatwg.org/#formdata\nclass FormData {\n  constructor (form) {\n    if (form !== undefined) {\n      throw webidl.errors.conversionFailed({\n        prefix: 'FormData constructor',\n        argument: 'Argument 1',\n        types: ['undefined']\n      })\n    }\n\n    this[kState] = []\n  }\n\n  append (name, value, filename = undefined) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.append' })\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name)\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, { strict: false })\n      : webidl.converters.USVString(value)\n    filename = arguments.length === 3\n      ? webidl.converters.USVString(filename)\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with\n    // name, value, and filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. Append entry to this\u2019s entry list.\n    this[kState].push(entry)\n  }\n\n  delete (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.delete' })\n\n    name = webidl.converters.USVString(name)\n\n    // The delete(name) method steps are to remove all entries whose name\n    // is name from this\u2019s entry list.\n    this[kState] = this[kState].filter(entry => entry.name !== name)\n  }\n\n  get (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.get' })\n\n    name = webidl.converters.USVString(name)\n\n    // 1. If there is no entry whose name is name in this\u2019s entry list,\n    // then return null.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx === -1) {\n      return null\n    }\n\n    // 2. Return the value of the first entry whose name is name from\n    // this\u2019s entry list.\n    return this[kState][idx].value\n  }\n\n  getAll (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.getAll' })\n\n    name = webidl.converters.USVString(name)\n\n    // 1. If there is no entry whose name is name in this\u2019s entry list,\n    // then return the empty list.\n    // 2. Return the values of all entries whose name is name, in order,\n    // from this\u2019s entry list.\n    return this[kState]\n      .filter((entry) => entry.name === name)\n      .map((entry) => entry.value)\n  }\n\n  has (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.has' })\n\n    name = webidl.converters.USVString(name)\n\n    // The has(name) method steps are to return true if there is an entry\n    // whose name is name in this\u2019s entry list; otherwise false.\n    return this[kState].findIndex((entry) => entry.name === name) !== -1\n  }\n\n  set (name, value, filename = undefined) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.set' })\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // The set(name, value) and set(name, blobValue, filename) method steps\n    // are:\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name)\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, { strict: false })\n      : webidl.converters.USVString(value)\n    filename = arguments.length === 3\n      ? toUSVString(filename)\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with name, value, and\n    // filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. If there are entries in this\u2019s entry list whose name is name, then\n    // replace the first such entry with entry and remove the others.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx !== -1) {\n      this[kState] = [\n        ...this[kState].slice(0, idx),\n        entry,\n        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)\n      ]\n    } else {\n      // 4. Otherwise, append entry to this\u2019s entry list.\n      this[kState].push(entry)\n    }\n  }\n\n  entries () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'key+value'\n    )\n  }\n\n  keys () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'key'\n    )\n  }\n\n  values () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'value'\n    )\n  }\n\n  /**\n   * @param {(value: string, key: string, self: FormData) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach (callbackFn, thisArg = globalThis) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.forEach' })\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.\"\n      )\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this])\n    }\n  }\n}\n\nFormData.prototype[Symbol.iterator] = FormData.prototype.entries\n\nObject.defineProperties(FormData.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'FormData',\n    configurable: true\n  }\n})\n\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */\nfunction makeEntry (name, value, filename) {\n  // 1. Set name to the result of converting name into a scalar value string.\n  // \"To convert a string into a scalar value string, replace any surrogates\n  //  with U+FFFD.\"\n  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end\n  name = Buffer.from(name).toString('utf8')\n\n  // 2. If value is a string, then set value to the result of converting\n  //    value into a scalar value string.\n  if (typeof value === 'string') {\n    value = Buffer.from(value).toString('utf8')\n  } else {\n    // 3. Otherwise:\n\n    // 1. If value is not a File object, then set value to a new File object,\n    //    representing the same bytes, whose name attribute value is \"blob\"\n    if (!isFileLike(value)) {\n      value = value instanceof Blob\n        ? new File([value], 'blob', { type: value.type })\n        : new FileLike(value, 'blob', { type: value.type })\n    }\n\n    // 2. If filename is given, then set value to a new File object,\n    //    representing the same bytes, whose name attribute is filename.\n    if (filename !== undefined) {\n      /** @type {FilePropertyBag} */\n      const options = {\n        type: value.type,\n        lastModified: value.lastModified\n      }\n\n      value = (NativeFile && value instanceof NativeFile) || value instanceof UndiciFile\n        ? new File([value], filename, options)\n        : new FileLike(value, filename, options)\n    }\n  }\n\n  // 4. Return an entry whose name is name and whose value is value.\n  return { name, value }\n}\n\nmodule.exports = { FormData }\n", "'use strict'\n\nconst Busboy = require('@fastify/busboy')\nconst util = require('../core/util')\nconst {\n  ReadableStreamFrom,\n  isBlobLike,\n  isReadableStreamLike,\n  readableStreamClose,\n  createDeferredPromise,\n  fullyReadBody\n} = require('./util')\nconst { FormData } = require('./formdata')\nconst { kState } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { DOMException, structuredClone } = require('./constants')\nconst { Blob, File: NativeFile } = require('buffer')\nconst { kBodyUsed } = require('../core/symbols')\nconst assert = require('assert')\nconst { isErrored } = require('../core/util')\nconst { isUint8Array, isArrayBuffer } = require('util/types')\nconst { File: UndiciFile } = require('./file')\nconst { parseMIMEType, serializeAMimeType } = require('./dataURL')\n\nlet ReadableStream = globalThis.ReadableStream\n\n/** @type {globalThis['File']} */\nconst File = NativeFile ?? UndiciFile\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\n// https://fetch.spec.whatwg.org/#concept-bodyinit-extract\nfunction extractBody (object, keepalive = false) {\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  // 1. Let stream be null.\n  let stream = null\n\n  // 2. If object is a ReadableStream object, then set stream to object.\n  if (object instanceof ReadableStream) {\n    stream = object\n  } else if (isBlobLike(object)) {\n    // 3. Otherwise, if object is a Blob object, set stream to the\n    //    result of running object\u2019s get stream.\n    stream = object.stream()\n  } else {\n    // 4. Otherwise, set stream to a new ReadableStream object, and set\n    //    up stream.\n    stream = new ReadableStream({\n      async pull (controller) {\n        controller.enqueue(\n          typeof source === 'string' ? textEncoder.encode(source) : source\n        )\n        queueMicrotask(() => readableStreamClose(controller))\n      },\n      start () {},\n      type: undefined\n    })\n  }\n\n  // 5. Assert: stream is a ReadableStream object.\n  assert(isReadableStreamLike(stream))\n\n  // 6. Let action be null.\n  let action = null\n\n  // 7. Let source be null.\n  let source = null\n\n  // 8. Let length be null.\n  let length = null\n\n  // 9. Let type be null.\n  let type = null\n\n  // 10. Switch on object:\n  if (typeof object === 'string') {\n    // Set source to the UTF-8 encoding of object.\n    // Note: setting source to a Uint8Array here breaks some mocking assumptions.\n    source = object\n\n    // Set type to `text/plain;charset=UTF-8`.\n    type = 'text/plain;charset=UTF-8'\n  } else if (object instanceof URLSearchParams) {\n    // URLSearchParams\n\n    // spec says to run application/x-www-form-urlencoded on body.list\n    // this is implemented in Node.js as apart of an URLSearchParams instance toString method\n    // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490\n    // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100\n\n    // Set source to the result of running the application/x-www-form-urlencoded serializer with object\u2019s list.\n    source = object.toString()\n\n    // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.\n    type = 'application/x-www-form-urlencoded;charset=UTF-8'\n  } else if (isArrayBuffer(object)) {\n    // BufferSource/ArrayBuffer\n\n    // Set source to a copy of the bytes held by object.\n    source = new Uint8Array(object.slice())\n  } else if (ArrayBuffer.isView(object)) {\n    // BufferSource/ArrayBufferView\n\n    // Set source to a copy of the bytes held by object.\n    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength))\n  } else if (util.isFormDataLike(object)) {\n    const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`\n    const prefix = `--${boundary}\\r\\nContent-Disposition: form-data`\n\n    /*! formdata-polyfill. MIT License. Jimmy W\u00E4rting <https://jimmy.warting.se/opensource> */\n    const escape = (str) =>\n      str.replace(/\\n/g, '%0A').replace(/\\r/g, '%0D').replace(/\"/g, '%22')\n    const normalizeLinefeeds = (value) => value.replace(/\\r?\\n|\\r/g, '\\r\\n')\n\n    // Set action to this step: run the multipart/form-data\n    // encoding algorithm, with object\u2019s entry list and UTF-8.\n    // - This ensures that the body is immutable and can't be changed afterwords\n    // - That the content-length is calculated in advance.\n    // - And that all parts are pre-encoded and ready to be sent.\n\n    const blobParts = []\n    const rn = new Uint8Array([13, 10]) // '\\r\\n'\n    length = 0\n    let hasUnknownSizeValue = false\n\n    for (const [name, value] of object) {\n      if (typeof value === 'string') {\n        const chunk = textEncoder.encode(prefix +\n          `; name=\"${escape(normalizeLinefeeds(name))}\"` +\n          `\\r\\n\\r\\n${normalizeLinefeeds(value)}\\r\\n`)\n        blobParts.push(chunk)\n        length += chunk.byteLength\n      } else {\n        const chunk = textEncoder.encode(`${prefix}; name=\"${escape(normalizeLinefeeds(name))}\"` +\n          (value.name ? `; filename=\"${escape(value.name)}\"` : '') + '\\r\\n' +\n          `Content-Type: ${\n            value.type || 'application/octet-stream'\n          }\\r\\n\\r\\n`)\n        blobParts.push(chunk, value, rn)\n        if (typeof value.size === 'number') {\n          length += chunk.byteLength + value.size + rn.byteLength\n        } else {\n          hasUnknownSizeValue = true\n        }\n      }\n    }\n\n    const chunk = textEncoder.encode(`--${boundary}--`)\n    blobParts.push(chunk)\n    length += chunk.byteLength\n    if (hasUnknownSizeValue) {\n      length = null\n    }\n\n    // Set source to object.\n    source = object\n\n    action = async function * () {\n      for (const part of blobParts) {\n        if (part.stream) {\n          yield * part.stream()\n        } else {\n          yield part\n        }\n      }\n    }\n\n    // Set type to `multipart/form-data; boundary=`,\n    // followed by the multipart/form-data boundary string generated\n    // by the multipart/form-data encoding algorithm.\n    type = 'multipart/form-data; boundary=' + boundary\n  } else if (isBlobLike(object)) {\n    // Blob\n\n    // Set source to object.\n    source = object\n\n    // Set length to object\u2019s size.\n    length = object.size\n\n    // If object\u2019s type attribute is not the empty byte sequence, set\n    // type to its value.\n    if (object.type) {\n      type = object.type\n    }\n  } else if (typeof object[Symbol.asyncIterator] === 'function') {\n    // If keepalive is true, then throw a TypeError.\n    if (keepalive) {\n      throw new TypeError('keepalive')\n    }\n\n    // If object is disturbed or locked, then throw a TypeError.\n    if (util.isDisturbed(object) || object.locked) {\n      throw new TypeError(\n        'Response body object should not be disturbed or locked'\n      )\n    }\n\n    stream =\n      object instanceof ReadableStream ? object : ReadableStreamFrom(object)\n  }\n\n  // 11. If source is a byte sequence, then set action to a\n  // step that returns source and length to source\u2019s length.\n  if (typeof source === 'string' || util.isBuffer(source)) {\n    length = Buffer.byteLength(source)\n  }\n\n  // 12. If action is non-null, then run these steps in in parallel:\n  if (action != null) {\n    // Run action.\n    let iterator\n    stream = new ReadableStream({\n      async start () {\n        iterator = action(object)[Symbol.asyncIterator]()\n      },\n      async pull (controller) {\n        const { value, done } = await iterator.next()\n        if (done) {\n          // When running action is done, close stream.\n          queueMicrotask(() => {\n            controller.close()\n          })\n        } else {\n          // Whenever one or more bytes are available and stream is not errored,\n          // enqueue a Uint8Array wrapping an ArrayBuffer containing the available\n          // bytes into stream.\n          if (!isErrored(stream)) {\n            controller.enqueue(new Uint8Array(value))\n          }\n        }\n        return controller.desiredSize > 0\n      },\n      async cancel (reason) {\n        await iterator.return()\n      },\n      type: undefined\n    })\n  }\n\n  // 13. Let body be a body whose stream is stream, source is source,\n  // and length is length.\n  const body = { stream, source, length }\n\n  // 14. Return (body, type).\n  return [body, type]\n}\n\n// https://fetch.spec.whatwg.org/#bodyinit-safely-extract\nfunction safelyExtractBody (object, keepalive = false) {\n  if (!ReadableStream) {\n    // istanbul ignore next\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  // To safely extract a body and a `Content-Type` value from\n  // a byte sequence or BodyInit object object, run these steps:\n\n  // 1. If object is a ReadableStream object, then:\n  if (object instanceof ReadableStream) {\n    // Assert: object is neither disturbed nor locked.\n    // istanbul ignore next\n    assert(!util.isDisturbed(object), 'The body has already been consumed.')\n    // istanbul ignore next\n    assert(!object.locked, 'The stream is locked.')\n  }\n\n  // 2. Return the results of extracting object.\n  return extractBody(object, keepalive)\n}\n\nfunction cloneBody (body) {\n  // To clone a body body, run these steps:\n\n  // https://fetch.spec.whatwg.org/#concept-body-clone\n\n  // 1. Let \u00AB out1, out2 \u00BB be the result of teeing body\u2019s stream.\n  const [out1, out2] = body.stream.tee()\n  const out2Clone = structuredClone(out2, { transfer: [out2] })\n  // This, for whatever reasons, unrefs out2Clone which allows\n  // the process to exit by itself.\n  const [, finalClone] = out2Clone.tee()\n\n  // 2. Set body\u2019s stream to out1.\n  body.stream = out1\n\n  // 3. Return a body whose stream is out2 and other members are copied from body.\n  return {\n    stream: finalClone,\n    length: body.length,\n    source: body.source\n  }\n}\n\nasync function * consumeBody (body) {\n  if (body) {\n    if (isUint8Array(body)) {\n      yield body\n    } else {\n      const stream = body.stream\n\n      if (util.isDisturbed(stream)) {\n        throw new TypeError('The body has already been consumed.')\n      }\n\n      if (stream.locked) {\n        throw new TypeError('The stream is locked.')\n      }\n\n      // Compat.\n      stream[kBodyUsed] = true\n\n      yield * stream\n    }\n  }\n}\n\nfunction throwIfAborted (state) {\n  if (state.aborted) {\n    throw new DOMException('The operation was aborted.', 'AbortError')\n  }\n}\n\nfunction bodyMixinMethods (instance) {\n  const methods = {\n    blob () {\n      // The blob() method steps are to return the result of\n      // running consume body with this and the following step\n      // given a byte sequence bytes: return a Blob whose\n      // contents are bytes and whose type attribute is this\u2019s\n      // MIME type.\n      return specConsumeBody(this, (bytes) => {\n        let mimeType = bodyMimeType(this)\n\n        if (mimeType === 'failure') {\n          mimeType = ''\n        } else if (mimeType) {\n          mimeType = serializeAMimeType(mimeType)\n        }\n\n        // Return a Blob whose contents are bytes and type attribute\n        // is mimeType.\n        return new Blob([bytes], { type: mimeType })\n      }, instance)\n    },\n\n    arrayBuffer () {\n      // The arrayBuffer() method steps are to return the result\n      // of running consume body with this and the following step\n      // given a byte sequence bytes: return a new ArrayBuffer\n      // whose contents are bytes.\n      return specConsumeBody(this, (bytes) => {\n        return new Uint8Array(bytes).buffer\n      }, instance)\n    },\n\n    text () {\n      // The text() method steps are to return the result of running\n      // consume body with this and UTF-8 decode.\n      return specConsumeBody(this, utf8DecodeBytes, instance)\n    },\n\n    json () {\n      // The json() method steps are to return the result of running\n      // consume body with this and parse JSON from bytes.\n      return specConsumeBody(this, parseJSONFromBytes, instance)\n    },\n\n    async formData () {\n      webidl.brandCheck(this, instance)\n\n      throwIfAborted(this[kState])\n\n      const contentType = this.headers.get('Content-Type')\n\n      // If mimeType\u2019s essence is \"multipart/form-data\", then:\n      if (/multipart\\/form-data/.test(contentType)) {\n        const headers = {}\n        for (const [key, value] of this.headers) headers[key.toLowerCase()] = value\n\n        const responseFormData = new FormData()\n\n        let busboy\n\n        try {\n          busboy = new Busboy({\n            headers,\n            preservePath: true\n          })\n        } catch (err) {\n          throw new DOMException(`${err}`, 'AbortError')\n        }\n\n        busboy.on('field', (name, value) => {\n          responseFormData.append(name, value)\n        })\n        busboy.on('file', (name, value, filename, encoding, mimeType) => {\n          const chunks = []\n\n          if (encoding === 'base64' || encoding.toLowerCase() === 'base64') {\n            let base64chunk = ''\n\n            value.on('data', (chunk) => {\n              base64chunk += chunk.toString().replace(/[\\r\\n]/gm, '')\n\n              const end = base64chunk.length - base64chunk.length % 4\n              chunks.push(Buffer.from(base64chunk.slice(0, end), 'base64'))\n\n              base64chunk = base64chunk.slice(end)\n            })\n            value.on('end', () => {\n              chunks.push(Buffer.from(base64chunk, 'base64'))\n              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))\n            })\n          } else {\n            value.on('data', (chunk) => {\n              chunks.push(chunk)\n            })\n            value.on('end', () => {\n              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))\n            })\n          }\n        })\n\n        const busboyResolve = new Promise((resolve, reject) => {\n          busboy.on('finish', resolve)\n          busboy.on('error', (err) => reject(new TypeError(err)))\n        })\n\n        if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk)\n        busboy.end()\n        await busboyResolve\n\n        return responseFormData\n      } else if (/application\\/x-www-form-urlencoded/.test(contentType)) {\n        // Otherwise, if mimeType\u2019s essence is \"application/x-www-form-urlencoded\", then:\n\n        // 1. Let entries be the result of parsing bytes.\n        let entries\n        try {\n          let text = ''\n          // application/x-www-form-urlencoded parser will keep the BOM.\n          // https://url.spec.whatwg.org/#concept-urlencoded-parser\n          // Note that streaming decoder is stateful and cannot be reused\n          const streamingDecoder = new TextDecoder('utf-8', { ignoreBOM: true })\n\n          for await (const chunk of consumeBody(this[kState].body)) {\n            if (!isUint8Array(chunk)) {\n              throw new TypeError('Expected Uint8Array chunk')\n            }\n            text += streamingDecoder.decode(chunk, { stream: true })\n          }\n          text += streamingDecoder.decode()\n          entries = new URLSearchParams(text)\n        } catch (err) {\n          // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.\n          // 2. If entries is failure, then throw a TypeError.\n          throw Object.assign(new TypeError(), { cause: err })\n        }\n\n        // 3. Return a new FormData object whose entries are entries.\n        const formData = new FormData()\n        for (const [name, value] of entries) {\n          formData.append(name, value)\n        }\n        return formData\n      } else {\n        // Wait a tick before checking if the request has been aborted.\n        // Otherwise, a TypeError can be thrown when an AbortError should.\n        await Promise.resolve()\n\n        throwIfAborted(this[kState])\n\n        // Otherwise, throw a TypeError.\n        throw webidl.errors.exception({\n          header: `${instance.name}.formData`,\n          message: 'Could not parse content as FormData.'\n        })\n      }\n    }\n  }\n\n  return methods\n}\n\nfunction mixinBody (prototype) {\n  Object.assign(prototype.prototype, bodyMixinMethods(prototype))\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-consume-body\n * @param {Response|Request} object\n * @param {(value: unknown) => unknown} convertBytesToJSValue\n * @param {Response|Request} instance\n */\nasync function specConsumeBody (object, convertBytesToJSValue, instance) {\n  webidl.brandCheck(object, instance)\n\n  throwIfAborted(object[kState])\n\n  // 1. If object is unusable, then return a promise rejected\n  //    with a TypeError.\n  if (bodyUnusable(object[kState].body)) {\n    throw new TypeError('Body is unusable')\n  }\n\n  // 2. Let promise be a new promise.\n  const promise = createDeferredPromise()\n\n  // 3. Let errorSteps given error be to reject promise with error.\n  const errorSteps = (error) => promise.reject(error)\n\n  // 4. Let successSteps given a byte sequence data be to resolve\n  //    promise with the result of running convertBytesToJSValue\n  //    with data. If that threw an exception, then run errorSteps\n  //    with that exception.\n  const successSteps = (data) => {\n    try {\n      promise.resolve(convertBytesToJSValue(data))\n    } catch (e) {\n      errorSteps(e)\n    }\n  }\n\n  // 5. If object\u2019s body is null, then run successSteps with an\n  //    empty byte sequence.\n  if (object[kState].body == null) {\n    successSteps(new Uint8Array())\n    return promise.promise\n  }\n\n  // 6. Otherwise, fully read object\u2019s body given successSteps,\n  //    errorSteps, and object\u2019s relevant global object.\n  await fullyReadBody(object[kState].body, successSteps, errorSteps)\n\n  // 7. Return promise.\n  return promise.promise\n}\n\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction bodyUnusable (body) {\n  // An object including the Body interface mixin is\n  // said to be unusable if its body is non-null and\n  // its body\u2019s stream is disturbed or locked.\n  return body != null && (body.stream.locked || util.isDisturbed(body.stream))\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#utf-8-decode\n * @param {Buffer} buffer\n */\nfunction utf8DecodeBytes (buffer) {\n  if (buffer.length === 0) {\n    return ''\n  }\n\n  // 1. Let buffer be the result of peeking three bytes from\n  //    ioQueue, converted to a byte sequence.\n\n  // 2. If buffer is 0xEF 0xBB 0xBF, then read three\n  //    bytes from ioQueue. (Do nothing with those bytes.)\n  if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\n    buffer = buffer.subarray(3)\n  }\n\n  // 3. Process a queue with an instance of UTF-8\u2019s\n  //    decoder, ioQueue, output, and \"replacement\".\n  const output = textDecoder.decode(buffer)\n\n  // 4. Return output.\n  return output\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value\n * @param {Uint8Array} bytes\n */\nfunction parseJSONFromBytes (bytes) {\n  return JSON.parse(utf8DecodeBytes(bytes))\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-mime-type\n * @param {import('./response').Response|import('./request').Request} object\n */\nfunction bodyMimeType (object) {\n  const { headersList } = object[kState]\n  const contentType = headersList.get('content-type')\n\n  if (contentType === null) {\n    return 'failure'\n  }\n\n  return parseMIMEType(contentType)\n}\n\nmodule.exports = {\n  extractBody,\n  safelyExtractBody,\n  cloneBody,\n  mixinBody\n}\n", "'use strict'\n\nconst {\n  InvalidArgumentError,\n  NotSupportedError\n} = require('./errors')\nconst assert = require('assert')\nconst { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require('./symbols')\nconst util = require('./util')\n\n// tokenRegExp and headerCharRegex have been lifted from\n// https://github.com/nodejs/node/blob/main/lib/_http_common.js\n\n/**\n * Verifies that the given val is a valid HTTP token\n * per the rules defined in RFC 7230\n * See https://tools.ietf.org/html/rfc7230#section-3.2.6\n */\nconst tokenRegExp = /^[\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]+$/\n\n/**\n * Matches if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n */\nconst headerCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/\n\n// Verifies that a given path is valid does not contain control chars \\x00 to \\x20\nconst invalidPathRegex = /[^\\u0021-\\u00ff]/\n\nconst kHandler = Symbol('handler')\n\nconst channels = {}\n\nlet extractBody\n\ntry {\n  const diagnosticsChannel = require('diagnostics_channel')\n  channels.create = diagnosticsChannel.channel('undici:request:create')\n  channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent')\n  channels.headers = diagnosticsChannel.channel('undici:request:headers')\n  channels.trailers = diagnosticsChannel.channel('undici:request:trailers')\n  channels.error = diagnosticsChannel.channel('undici:request:error')\n} catch {\n  channels.create = { hasSubscribers: false }\n  channels.bodySent = { hasSubscribers: false }\n  channels.headers = { hasSubscribers: false }\n  channels.trailers = { hasSubscribers: false }\n  channels.error = { hasSubscribers: false }\n}\n\nclass Request {\n  constructor (origin, {\n    path,\n    method,\n    body,\n    headers,\n    query,\n    idempotent,\n    blocking,\n    upgrade,\n    headersTimeout,\n    bodyTimeout,\n    reset,\n    throwOnError,\n    expectContinue\n  }, handler) {\n    if (typeof path !== 'string') {\n      throw new InvalidArgumentError('path must be a string')\n    } else if (\n      path[0] !== '/' &&\n      !(path.startsWith('http://') || path.startsWith('https://')) &&\n      method !== 'CONNECT'\n    ) {\n      throw new InvalidArgumentError('path must be an absolute URL or start with a slash')\n    } else if (invalidPathRegex.exec(path) !== null) {\n      throw new InvalidArgumentError('invalid request path')\n    }\n\n    if (typeof method !== 'string') {\n      throw new InvalidArgumentError('method must be a string')\n    } else if (tokenRegExp.exec(method) === null) {\n      throw new InvalidArgumentError('invalid request method')\n    }\n\n    if (upgrade && typeof upgrade !== 'string') {\n      throw new InvalidArgumentError('upgrade must be a string')\n    }\n\n    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {\n      throw new InvalidArgumentError('invalid headersTimeout')\n    }\n\n    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {\n      throw new InvalidArgumentError('invalid bodyTimeout')\n    }\n\n    if (reset != null && typeof reset !== 'boolean') {\n      throw new InvalidArgumentError('invalid reset')\n    }\n\n    if (expectContinue != null && typeof expectContinue !== 'boolean') {\n      throw new InvalidArgumentError('invalid expectContinue')\n    }\n\n    this.headersTimeout = headersTimeout\n\n    this.bodyTimeout = bodyTimeout\n\n    this.throwOnError = throwOnError === true\n\n    this.method = method\n\n    this.abort = null\n\n    if (body == null) {\n      this.body = null\n    } else if (util.isStream(body)) {\n      this.body = body\n\n      const rState = this.body._readableState\n      if (!rState || !rState.autoDestroy) {\n        this.endHandler = function autoDestroy () {\n          util.destroy(this)\n        }\n        this.body.on('end', this.endHandler)\n      }\n\n      this.errorHandler = err => {\n        if (this.abort) {\n          this.abort(err)\n        } else {\n          this.error = err\n        }\n      }\n      this.body.on('error', this.errorHandler)\n    } else if (util.isBuffer(body)) {\n      this.body = body.byteLength ? body : null\n    } else if (ArrayBuffer.isView(body)) {\n      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null\n    } else if (body instanceof ArrayBuffer) {\n      this.body = body.byteLength ? Buffer.from(body) : null\n    } else if (typeof body === 'string') {\n      this.body = body.length ? Buffer.from(body) : null\n    } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {\n      this.body = body\n    } else {\n      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable')\n    }\n\n    this.completed = false\n\n    this.aborted = false\n\n    this.upgrade = upgrade || null\n\n    this.path = query ? util.buildURL(path, query) : path\n\n    this.origin = origin\n\n    this.idempotent = idempotent == null\n      ? method === 'HEAD' || method === 'GET'\n      : idempotent\n\n    this.blocking = blocking == null ? false : blocking\n\n    this.reset = reset == null ? null : reset\n\n    this.host = null\n\n    this.contentLength = null\n\n    this.contentType = null\n\n    this.headers = ''\n\n    // Only for H2\n    this.expectContinue = expectContinue != null ? expectContinue : false\n\n    if (Array.isArray(headers)) {\n      if (headers.length % 2 !== 0) {\n        throw new InvalidArgumentError('headers array must be even')\n      }\n      for (let i = 0; i < headers.length; i += 2) {\n        processHeader(this, headers[i], headers[i + 1])\n      }\n    } else if (headers && typeof headers === 'object') {\n      const keys = Object.keys(headers)\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        processHeader(this, key, headers[key])\n      }\n    } else if (headers != null) {\n      throw new InvalidArgumentError('headers must be an object or an array')\n    }\n\n    if (util.isFormDataLike(this.body)) {\n      if (util.nodeMajor < 16 || (util.nodeMajor === 16 && util.nodeMinor < 8)) {\n        throw new InvalidArgumentError('Form-Data bodies are only supported in node v16.8 and newer.')\n      }\n\n      if (!extractBody) {\n        extractBody = require('../fetch/body.js').extractBody\n      }\n\n      const [bodyStream, contentType] = extractBody(body)\n      if (this.contentType == null) {\n        this.contentType = contentType\n        this.headers += `content-type: ${contentType}\\r\\n`\n      }\n      this.body = bodyStream.stream\n      this.contentLength = bodyStream.length\n    } else if (util.isBlobLike(body) && this.contentType == null && body.type) {\n      this.contentType = body.type\n      this.headers += `content-type: ${body.type}\\r\\n`\n    }\n\n    util.validateHandler(handler, method, upgrade)\n\n    this.servername = util.getServerName(this.host)\n\n    this[kHandler] = handler\n\n    if (channels.create.hasSubscribers) {\n      channels.create.publish({ request: this })\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this[kHandler].onBodySent) {\n      try {\n        return this[kHandler].onBodySent(chunk)\n      } catch (err) {\n        this.abort(err)\n      }\n    }\n  }\n\n  onRequestSent () {\n    if (channels.bodySent.hasSubscribers) {\n      channels.bodySent.publish({ request: this })\n    }\n\n    if (this[kHandler].onRequestSent) {\n      try {\n        return this[kHandler].onRequestSent()\n      } catch (err) {\n        this.abort(err)\n      }\n    }\n  }\n\n  onConnect (abort) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    if (this.error) {\n      abort(this.error)\n    } else {\n      this.abort = abort\n      return this[kHandler].onConnect(abort)\n    }\n  }\n\n  onHeaders (statusCode, headers, resume, statusText) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    if (channels.headers.hasSubscribers) {\n      channels.headers.publish({ request: this, response: { statusCode, headers, statusText } })\n    }\n\n    try {\n      return this[kHandler].onHeaders(statusCode, headers, resume, statusText)\n    } catch (err) {\n      this.abort(err)\n    }\n  }\n\n  onData (chunk) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    try {\n      return this[kHandler].onData(chunk)\n    } catch (err) {\n      this.abort(err)\n      return false\n    }\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    return this[kHandler].onUpgrade(statusCode, headers, socket)\n  }\n\n  onComplete (trailers) {\n    this.onFinally()\n\n    assert(!this.aborted)\n\n    this.completed = true\n    if (channels.trailers.hasSubscribers) {\n      channels.trailers.publish({ request: this, trailers })\n    }\n\n    try {\n      return this[kHandler].onComplete(trailers)\n    } catch (err) {\n      // TODO (fix): This might be a bad idea?\n      this.onError(err)\n    }\n  }\n\n  onError (error) {\n    this.onFinally()\n\n    if (channels.error.hasSubscribers) {\n      channels.error.publish({ request: this, error })\n    }\n\n    if (this.aborted) {\n      return\n    }\n    this.aborted = true\n\n    return this[kHandler].onError(error)\n  }\n\n  onFinally () {\n    if (this.errorHandler) {\n      this.body.off('error', this.errorHandler)\n      this.errorHandler = null\n    }\n\n    if (this.endHandler) {\n      this.body.off('end', this.endHandler)\n      this.endHandler = null\n    }\n  }\n\n  // TODO: adjust to support H2\n  addHeader (key, value) {\n    processHeader(this, key, value)\n    return this\n  }\n\n  static [kHTTP1BuildRequest] (origin, opts, handler) {\n    // TODO: Migrate header parsing here, to make Requests\n    // HTTP agnostic\n    return new Request(origin, opts, handler)\n  }\n\n  static [kHTTP2BuildRequest] (origin, opts, handler) {\n    const headers = opts.headers\n    opts = { ...opts, headers: null }\n\n    const request = new Request(origin, opts, handler)\n\n    request.headers = {}\n\n    if (Array.isArray(headers)) {\n      if (headers.length % 2 !== 0) {\n        throw new InvalidArgumentError('headers array must be even')\n      }\n      for (let i = 0; i < headers.length; i += 2) {\n        processHeader(request, headers[i], headers[i + 1], true)\n      }\n    } else if (headers && typeof headers === 'object') {\n      const keys = Object.keys(headers)\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        processHeader(request, key, headers[key], true)\n      }\n    } else if (headers != null) {\n      throw new InvalidArgumentError('headers must be an object or an array')\n    }\n\n    return request\n  }\n\n  static [kHTTP2CopyHeaders] (raw) {\n    const rawHeaders = raw.split('\\r\\n')\n    const headers = {}\n\n    for (const header of rawHeaders) {\n      const [key, value] = header.split(': ')\n\n      if (value == null || value.length === 0) continue\n\n      if (headers[key]) headers[key] += `,${value}`\n      else headers[key] = value\n    }\n\n    return headers\n  }\n}\n\nfunction processHeaderValue (key, val, skipAppend) {\n  if (val && typeof val === 'object') {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  }\n\n  val = val != null ? `${val}` : ''\n\n  if (headerCharRegex.exec(val) !== null) {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  }\n\n  return skipAppend ? val : `${key}: ${val}\\r\\n`\n}\n\nfunction processHeader (request, key, val, skipAppend = false) {\n  if (val && (typeof val === 'object' && !Array.isArray(val))) {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  } else if (val === undefined) {\n    return\n  }\n\n  if (\n    request.host === null &&\n    key.length === 4 &&\n    key.toLowerCase() === 'host'\n  ) {\n    if (headerCharRegex.exec(val) !== null) {\n      throw new InvalidArgumentError(`invalid ${key} header`)\n    }\n    // Consumed by Client\n    request.host = val\n  } else if (\n    request.contentLength === null &&\n    key.length === 14 &&\n    key.toLowerCase() === 'content-length'\n  ) {\n    request.contentLength = parseInt(val, 10)\n    if (!Number.isFinite(request.contentLength)) {\n      throw new InvalidArgumentError('invalid content-length header')\n    }\n  } else if (\n    request.contentType === null &&\n    key.length === 12 &&\n    key.toLowerCase() === 'content-type'\n  ) {\n    request.contentType = val\n    if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)\n    else request.headers += processHeaderValue(key, val)\n  } else if (\n    key.length === 17 &&\n    key.toLowerCase() === 'transfer-encoding'\n  ) {\n    throw new InvalidArgumentError('invalid transfer-encoding header')\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'connection'\n  ) {\n    const value = typeof val === 'string' ? val.toLowerCase() : null\n    if (value !== 'close' && value !== 'keep-alive') {\n      throw new InvalidArgumentError('invalid connection header')\n    } else if (value === 'close') {\n      request.reset = true\n    }\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'keep-alive'\n  ) {\n    throw new InvalidArgumentError('invalid keep-alive header')\n  } else if (\n    key.length === 7 &&\n    key.toLowerCase() === 'upgrade'\n  ) {\n    throw new InvalidArgumentError('invalid upgrade header')\n  } else if (\n    key.length === 6 &&\n    key.toLowerCase() === 'expect'\n  ) {\n    throw new NotSupportedError('expect header not supported')\n  } else if (tokenRegExp.exec(key) === null) {\n    throw new InvalidArgumentError('invalid header key')\n  } else {\n    if (Array.isArray(val)) {\n      for (let i = 0; i < val.length; i++) {\n        if (skipAppend) {\n          if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`\n          else request.headers[key] = processHeaderValue(key, val[i], skipAppend)\n        } else {\n          request.headers += processHeaderValue(key, val[i])\n        }\n      }\n    } else {\n      if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)\n      else request.headers += processHeaderValue(key, val)\n    }\n  }\n}\n\nmodule.exports = Request\n", "'use strict'\n\nconst EventEmitter = require('events')\n\nclass Dispatcher extends EventEmitter {\n  dispatch () {\n    throw new Error('not implemented')\n  }\n\n  close () {\n    throw new Error('not implemented')\n  }\n\n  destroy () {\n    throw new Error('not implemented')\n  }\n}\n\nmodule.exports = Dispatcher\n", "'use strict'\n\nconst Dispatcher = require('./dispatcher')\nconst {\n  ClientDestroyedError,\n  ClientClosedError,\n  InvalidArgumentError\n} = require('./core/errors')\nconst { kDestroy, kClose, kDispatch, kInterceptors } = require('./core/symbols')\n\nconst kDestroyed = Symbol('destroyed')\nconst kClosed = Symbol('closed')\nconst kOnDestroyed = Symbol('onDestroyed')\nconst kOnClosed = Symbol('onClosed')\nconst kInterceptedDispatch = Symbol('Intercepted Dispatch')\n\nclass DispatcherBase extends Dispatcher {\n  constructor () {\n    super()\n\n    this[kDestroyed] = false\n    this[kOnDestroyed] = null\n    this[kClosed] = false\n    this[kOnClosed] = []\n  }\n\n  get destroyed () {\n    return this[kDestroyed]\n  }\n\n  get closed () {\n    return this[kClosed]\n  }\n\n  get interceptors () {\n    return this[kInterceptors]\n  }\n\n  set interceptors (newInterceptors) {\n    if (newInterceptors) {\n      for (let i = newInterceptors.length - 1; i >= 0; i--) {\n        const interceptor = this[kInterceptors][i]\n        if (typeof interceptor !== 'function') {\n          throw new InvalidArgumentError('interceptor must be an function')\n        }\n      }\n    }\n\n    this[kInterceptors] = newInterceptors\n  }\n\n  close (callback) {\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        this.close((err, data) => {\n          return err ? reject(err) : resolve(data)\n        })\n      })\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    if (this[kDestroyed]) {\n      queueMicrotask(() => callback(new ClientDestroyedError(), null))\n      return\n    }\n\n    if (this[kClosed]) {\n      if (this[kOnClosed]) {\n        this[kOnClosed].push(callback)\n      } else {\n        queueMicrotask(() => callback(null, null))\n      }\n      return\n    }\n\n    this[kClosed] = true\n    this[kOnClosed].push(callback)\n\n    const onClosed = () => {\n      const callbacks = this[kOnClosed]\n      this[kOnClosed] = null\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](null, null)\n      }\n    }\n\n    // Should not error.\n    this[kClose]()\n      .then(() => this.destroy())\n      .then(() => {\n        queueMicrotask(onClosed)\n      })\n  }\n\n  destroy (err, callback) {\n    if (typeof err === 'function') {\n      callback = err\n      err = null\n    }\n\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        this.destroy(err, (err, data) => {\n          return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data)\n        })\n      })\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    if (this[kDestroyed]) {\n      if (this[kOnDestroyed]) {\n        this[kOnDestroyed].push(callback)\n      } else {\n        queueMicrotask(() => callback(null, null))\n      }\n      return\n    }\n\n    if (!err) {\n      err = new ClientDestroyedError()\n    }\n\n    this[kDestroyed] = true\n    this[kOnDestroyed] = this[kOnDestroyed] || []\n    this[kOnDestroyed].push(callback)\n\n    const onDestroyed = () => {\n      const callbacks = this[kOnDestroyed]\n      this[kOnDestroyed] = null\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](null, null)\n      }\n    }\n\n    // Should not error.\n    this[kDestroy](err).then(() => {\n      queueMicrotask(onDestroyed)\n    })\n  }\n\n  [kInterceptedDispatch] (opts, handler) {\n    if (!this[kInterceptors] || this[kInterceptors].length === 0) {\n      this[kInterceptedDispatch] = this[kDispatch]\n      return this[kDispatch](opts, handler)\n    }\n\n    let dispatch = this[kDispatch].bind(this)\n    for (let i = this[kInterceptors].length - 1; i >= 0; i--) {\n      dispatch = this[kInterceptors][i](dispatch)\n    }\n    this[kInterceptedDispatch] = dispatch\n    return dispatch(opts, handler)\n  }\n\n  dispatch (opts, handler) {\n    if (!handler || typeof handler !== 'object') {\n      throw new InvalidArgumentError('handler must be an object')\n    }\n\n    try {\n      if (!opts || typeof opts !== 'object') {\n        throw new InvalidArgumentError('opts must be an object.')\n      }\n\n      if (this[kDestroyed] || this[kOnDestroyed]) {\n        throw new ClientDestroyedError()\n      }\n\n      if (this[kClosed]) {\n        throw new ClientClosedError()\n      }\n\n      return this[kInterceptedDispatch](opts, handler)\n    } catch (err) {\n      if (typeof handler.onError !== 'function') {\n        throw new InvalidArgumentError('invalid onError method')\n      }\n\n      handler.onError(err)\n\n      return false\n    }\n  }\n}\n\nmodule.exports = DispatcherBase\n", "'use strict'\n\nconst net = require('net')\nconst assert = require('assert')\nconst util = require('./util')\nconst { InvalidArgumentError, ConnectTimeoutError } = require('./errors')\n\nlet tls // include tls conditionally since it is not always available\n\n// TODO: session re-use does not wait for the first\n// connection to resolve the session and might therefore\n// resolve the same servername multiple times even when\n// re-use is enabled.\n\nlet SessionCache\n// FIXME: remove workaround when the Node bug is fixed\n// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\nif (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {\n  SessionCache = class WeakSessionCache {\n    constructor (maxCachedSessions) {\n      this._maxCachedSessions = maxCachedSessions\n      this._sessionCache = new Map()\n      this._sessionRegistry = new global.FinalizationRegistry((key) => {\n        if (this._sessionCache.size < this._maxCachedSessions) {\n          return\n        }\n\n        const ref = this._sessionCache.get(key)\n        if (ref !== undefined && ref.deref() === undefined) {\n          this._sessionCache.delete(key)\n        }\n      })\n    }\n\n    get (sessionKey) {\n      const ref = this._sessionCache.get(sessionKey)\n      return ref ? ref.deref() : null\n    }\n\n    set (sessionKey, session) {\n      if (this._maxCachedSessions === 0) {\n        return\n      }\n\n      this._sessionCache.set(sessionKey, new WeakRef(session))\n      this._sessionRegistry.register(session, sessionKey)\n    }\n  }\n} else {\n  SessionCache = class SimpleSessionCache {\n    constructor (maxCachedSessions) {\n      this._maxCachedSessions = maxCachedSessions\n      this._sessionCache = new Map()\n    }\n\n    get (sessionKey) {\n      return this._sessionCache.get(sessionKey)\n    }\n\n    set (sessionKey, session) {\n      if (this._maxCachedSessions === 0) {\n        return\n      }\n\n      if (this._sessionCache.size >= this._maxCachedSessions) {\n        // remove the oldest session\n        const { value: oldestKey } = this._sessionCache.keys().next()\n        this._sessionCache.delete(oldestKey)\n      }\n\n      this._sessionCache.set(sessionKey, session)\n    }\n  }\n}\n\nfunction buildConnector ({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {\n  if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {\n    throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero')\n  }\n\n  const options = { path: socketPath, ...opts }\n  const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions)\n  timeout = timeout == null ? 10e3 : timeout\n  allowH2 = allowH2 != null ? allowH2 : false\n  return function connect ({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {\n    let socket\n    if (protocol === 'https:') {\n      if (!tls) {\n        tls = require('tls')\n      }\n      servername = servername || options.servername || util.getServerName(host) || null\n\n      const sessionKey = servername || hostname\n      const session = sessionCache.get(sessionKey) || null\n\n      assert(sessionKey)\n\n      socket = tls.connect({\n        highWaterMark: 16384, // TLS in node can't have bigger HWM anyway...\n        ...options,\n        servername,\n        session,\n        localAddress,\n        // TODO(HTTP/2): Add support for h2c\n        ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],\n        socket: httpSocket, // upgrade socket connection\n        port: port || 443,\n        host: hostname\n      })\n\n      socket\n        .on('session', function (session) {\n          // TODO (fix): Can a session become invalid once established? Don't think so?\n          sessionCache.set(sessionKey, session)\n        })\n    } else {\n      assert(!httpSocket, 'httpSocket can only be sent on TLS update')\n      socket = net.connect({\n        highWaterMark: 64 * 1024, // Same as nodejs fs streams.\n        ...options,\n        localAddress,\n        port: port || 80,\n        host: hostname\n      })\n    }\n\n    // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket\n    if (options.keepAlive == null || options.keepAlive) {\n      const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay\n      socket.setKeepAlive(true, keepAliveInitialDelay)\n    }\n\n    const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout)\n\n    socket\n      .setNoDelay(true)\n      .once(protocol === 'https:' ? 'secureConnect' : 'connect', function () {\n        cancelTimeout()\n\n        if (callback) {\n          const cb = callback\n          callback = null\n          cb(null, this)\n        }\n      })\n      .on('error', function (err) {\n        cancelTimeout()\n\n        if (callback) {\n          const cb = callback\n          callback = null\n          cb(err)\n        }\n      })\n\n    return socket\n  }\n}\n\nfunction setupTimeout (onConnectTimeout, timeout) {\n  if (!timeout) {\n    return () => {}\n  }\n\n  let s1 = null\n  let s2 = null\n  const timeoutId = setTimeout(() => {\n    // setImmediate is added to make sure that we priotorise socket error events over timeouts\n    s1 = setImmediate(() => {\n      if (process.platform === 'win32') {\n        // Windows needs an extra setImmediate probably due to implementation differences in the socket logic\n        s2 = setImmediate(() => onConnectTimeout())\n      } else {\n        onConnectTimeout()\n      }\n    })\n  }, timeout)\n  return () => {\n    clearTimeout(timeoutId)\n    clearImmediate(s1)\n    clearImmediate(s2)\n  }\n}\n\nfunction onConnectTimeout (socket) {\n  util.destroy(socket, new ConnectTimeoutError())\n}\n\nmodule.exports = buildConnector\n", null, null, "'use strict'\n\nconst util = require('../core/util')\nconst { kBodyUsed } = require('../core/symbols')\nconst assert = require('assert')\nconst { InvalidArgumentError } = require('../core/errors')\nconst EE = require('events')\n\nconst redirectableStatusCodes = [300, 301, 302, 303, 307, 308]\n\nconst kBody = Symbol('body')\n\nclass BodyAsyncIterable {\n  constructor (body) {\n    this[kBody] = body\n    this[kBodyUsed] = false\n  }\n\n  async * [Symbol.asyncIterator] () {\n    assert(!this[kBodyUsed], 'disturbed')\n    this[kBodyUsed] = true\n    yield * this[kBody]\n  }\n}\n\nclass RedirectHandler {\n  constructor (dispatch, maxRedirections, opts, handler) {\n    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number')\n    }\n\n    util.validateHandler(handler, opts.method, opts.upgrade)\n\n    this.dispatch = dispatch\n    this.location = null\n    this.abort = null\n    this.opts = { ...opts, maxRedirections: 0 } // opts must be a copy\n    this.maxRedirections = maxRedirections\n    this.handler = handler\n    this.history = []\n\n    if (util.isStream(this.opts.body)) {\n      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp\n      // so that it can be dispatched again?\n      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?\n      if (util.bodyLength(this.opts.body) === 0) {\n        this.opts.body\n          .on('data', function () {\n            assert(false)\n          })\n      }\n\n      if (typeof this.opts.body.readableDidRead !== 'boolean') {\n        this.opts.body[kBodyUsed] = false\n        EE.prototype.on.call(this.opts.body, 'data', function () {\n          this[kBodyUsed] = true\n        })\n      }\n    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {\n      // TODO (fix): We can't access ReadableStream internal state\n      // to determine whether or not it has been disturbed. This is just\n      // a workaround.\n      this.opts.body = new BodyAsyncIterable(this.opts.body)\n    } else if (\n      this.opts.body &&\n      typeof this.opts.body !== 'string' &&\n      !ArrayBuffer.isView(this.opts.body) &&\n      util.isIterable(this.opts.body)\n    ) {\n      // TODO: Should we allow re-using iterable if !this.opts.idempotent\n      // or through some other flag?\n      this.opts.body = new BodyAsyncIterable(this.opts.body)\n    }\n  }\n\n  onConnect (abort) {\n    this.abort = abort\n    this.handler.onConnect(abort, { history: this.history })\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    this.handler.onUpgrade(statusCode, headers, socket)\n  }\n\n  onError (error) {\n    this.handler.onError(error)\n  }\n\n  onHeaders (statusCode, headers, resume, statusText) {\n    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body)\n      ? null\n      : parseLocation(statusCode, headers)\n\n    if (this.opts.origin) {\n      this.history.push(new URL(this.opts.path, this.opts.origin))\n    }\n\n    if (!this.location) {\n      return this.handler.onHeaders(statusCode, headers, resume, statusText)\n    }\n\n    const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)))\n    const path = search ? `${pathname}${search}` : pathname\n\n    // Remove headers referring to the original URL.\n    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.\n    // https://tools.ietf.org/html/rfc7231#section-6.4\n    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin)\n    this.opts.path = path\n    this.opts.origin = origin\n    this.opts.maxRedirections = 0\n    this.opts.query = null\n\n    // https://tools.ietf.org/html/rfc7231#section-6.4.4\n    // In case of HTTP 303, always replace method to be either HEAD or GET\n    if (statusCode === 303 && this.opts.method !== 'HEAD') {\n      this.opts.method = 'GET'\n      this.opts.body = null\n    }\n  }\n\n  onData (chunk) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response bodies.\n\n        Redirection is used to serve the requested resource from another URL, so it is assumes that\n        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.\n\n        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually\n        (which means it's optional and not mandated) contain just an hyperlink to the value of\n        the Location response header, so the body can be ignored safely.\n\n        For status 300, which is \"Multiple Choices\", the spec mentions both generating a Location\n        response header AND a response body with the other possible location to follow.\n        Since the spec explicitily chooses not to specify a format for such body and leave it to\n        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.\n      */\n    } else {\n      return this.handler.onData(chunk)\n    }\n  }\n\n  onComplete (trailers) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections\n        and neither are useful if present.\n\n        See comment on onData method above for more detailed informations.\n      */\n\n      this.location = null\n      this.abort = null\n\n      this.dispatch(this.opts, this)\n    } else {\n      this.handler.onComplete(trailers)\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this.handler.onBodySent) {\n      this.handler.onBodySent(chunk)\n    }\n  }\n}\n\nfunction parseLocation (statusCode, headers) {\n  if (redirectableStatusCodes.indexOf(statusCode) === -1) {\n    return null\n  }\n\n  for (let i = 0; i < headers.length; i += 2) {\n    if (headers[i].toString().toLowerCase() === 'location') {\n      return headers[i + 1]\n    }\n  }\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4.4\nfunction shouldRemoveHeader (header, removeContent, unknownOrigin) {\n  if (header.length === 4) {\n    return util.headerNameToString(header) === 'host'\n  }\n  if (removeContent && util.headerNameToString(header).startsWith('content-')) {\n    return true\n  }\n  if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {\n    const name = util.headerNameToString(header)\n    return name === 'authorization' || name === 'cookie' || name === 'proxy-authorization'\n  }\n  return false\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4\nfunction cleanRequestHeaders (headers, removeContent, unknownOrigin) {\n  const ret = []\n  if (Array.isArray(headers)) {\n    for (let i = 0; i < headers.length; i += 2) {\n      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {\n        ret.push(headers[i], headers[i + 1])\n      }\n    }\n  } else if (headers && typeof headers === 'object') {\n    for (const key of Object.keys(headers)) {\n      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {\n        ret.push(key, headers[key])\n      }\n    }\n  } else {\n    assert(headers == null, 'headers must be an object or an array')\n  }\n  return ret\n}\n\nmodule.exports = RedirectHandler\n", "'use strict'\n\nconst RedirectHandler = require('../handler/RedirectHandler')\n\nfunction createRedirectInterceptor ({ maxRedirections: defaultMaxRedirections }) {\n  return (dispatch) => {\n    return function Intercept (opts, handler) {\n      const { maxRedirections = defaultMaxRedirections } = opts\n\n      if (!maxRedirections) {\n        return dispatch(opts, handler)\n      }\n\n      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler)\n      opts = { ...opts, maxRedirections: 0 } // Stop sub dispatcher from also redirecting.\n      return dispatch(opts, redirectHandler)\n    }\n  }\n}\n\nmodule.exports = createRedirectInterceptor\n", "module.exports = ''\n", "module.exports = ''\n", "// @ts-check\n\n'use strict'\n\n/* global WebAssembly */\n\nconst assert = require('assert')\nconst net = require('net')\nconst http = require('http')\nconst { pipeline } = require('stream')\nconst util = require('./core/util')\nconst timers = require('./timers')\nconst Request = require('./core/request')\nconst DispatcherBase = require('./dispatcher-base')\nconst {\n  RequestContentLengthMismatchError,\n  ResponseContentLengthMismatchError,\n  InvalidArgumentError,\n  RequestAbortedError,\n  HeadersTimeoutError,\n  HeadersOverflowError,\n  SocketError,\n  InformationalError,\n  BodyTimeoutError,\n  HTTPParserError,\n  ResponseExceededMaxSizeError,\n  ClientDestroyedError\n} = require('./core/errors')\nconst buildConnector = require('./core/connect')\nconst {\n  kUrl,\n  kReset,\n  kServerName,\n  kClient,\n  kBusy,\n  kParser,\n  kConnect,\n  kBlocking,\n  kResuming,\n  kRunning,\n  kPending,\n  kSize,\n  kWriting,\n  kQueue,\n  kConnected,\n  kConnecting,\n  kNeedDrain,\n  kNoRef,\n  kKeepAliveDefaultTimeout,\n  kHostHeader,\n  kPendingIdx,\n  kRunningIdx,\n  kError,\n  kPipelining,\n  kSocket,\n  kKeepAliveTimeoutValue,\n  kMaxHeadersSize,\n  kKeepAliveMaxTimeout,\n  kKeepAliveTimeoutThreshold,\n  kHeadersTimeout,\n  kBodyTimeout,\n  kStrictContentLength,\n  kConnector,\n  kMaxRedirections,\n  kMaxRequests,\n  kCounter,\n  kClose,\n  kDestroy,\n  kDispatch,\n  kInterceptors,\n  kLocalAddress,\n  kMaxResponseSize,\n  kHTTPConnVersion,\n  // HTTP2\n  kHost,\n  kHTTP2Session,\n  kHTTP2SessionState,\n  kHTTP2BuildRequest,\n  kHTTP2CopyHeaders,\n  kHTTP1BuildRequest\n} = require('./core/symbols')\n\n/** @type {import('http2')} */\nlet http2\ntry {\n  http2 = require('http2')\n} catch {\n  // @ts-ignore\n  http2 = { constants: {} }\n}\n\nconst {\n  constants: {\n    HTTP2_HEADER_AUTHORITY,\n    HTTP2_HEADER_METHOD,\n    HTTP2_HEADER_PATH,\n    HTTP2_HEADER_SCHEME,\n    HTTP2_HEADER_CONTENT_LENGTH,\n    HTTP2_HEADER_EXPECT,\n    HTTP2_HEADER_STATUS\n  }\n} = http2\n\n// Experimental\nlet h2ExperimentalWarned = false\n\nconst FastBuffer = Buffer[Symbol.species]\n\nconst kClosedResolve = Symbol('kClosedResolve')\n\nconst channels = {}\n\ntry {\n  const diagnosticsChannel = require('diagnostics_channel')\n  channels.sendHeaders = diagnosticsChannel.channel('undici:client:sendHeaders')\n  channels.beforeConnect = diagnosticsChannel.channel('undici:client:beforeConnect')\n  channels.connectError = diagnosticsChannel.channel('undici:client:connectError')\n  channels.connected = diagnosticsChannel.channel('undici:client:connected')\n} catch {\n  channels.sendHeaders = { hasSubscribers: false }\n  channels.beforeConnect = { hasSubscribers: false }\n  channels.connectError = { hasSubscribers: false }\n  channels.connected = { hasSubscribers: false }\n}\n\n/**\n * @type {import('../types/client').default}\n */\nclass Client extends DispatcherBase {\n  /**\n   *\n   * @param {string|URL} url\n   * @param {import('../types/client').Client.Options} options\n   */\n  constructor (url, {\n    interceptors,\n    maxHeaderSize,\n    headersTimeout,\n    socketTimeout,\n    requestTimeout,\n    connectTimeout,\n    bodyTimeout,\n    idleTimeout,\n    keepAlive,\n    keepAliveTimeout,\n    maxKeepAliveTimeout,\n    keepAliveMaxTimeout,\n    keepAliveTimeoutThreshold,\n    socketPath,\n    pipelining,\n    tls,\n    strictContentLength,\n    maxCachedSessions,\n    maxRedirections,\n    connect,\n    maxRequestsPerClient,\n    localAddress,\n    maxResponseSize,\n    autoSelectFamily,\n    autoSelectFamilyAttemptTimeout,\n    // h2\n    allowH2,\n    maxConcurrentStreams\n  } = {}) {\n    super()\n\n    if (keepAlive !== undefined) {\n      throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead')\n    }\n\n    if (socketTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead')\n    }\n\n    if (requestTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead')\n    }\n\n    if (idleTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead')\n    }\n\n    if (maxKeepAliveTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead')\n    }\n\n    if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {\n      throw new InvalidArgumentError('invalid maxHeaderSize')\n    }\n\n    if (socketPath != null && typeof socketPath !== 'string') {\n      throw new InvalidArgumentError('invalid socketPath')\n    }\n\n    if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {\n      throw new InvalidArgumentError('invalid connectTimeout')\n    }\n\n    if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {\n      throw new InvalidArgumentError('invalid keepAliveTimeout')\n    }\n\n    if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {\n      throw new InvalidArgumentError('invalid keepAliveMaxTimeout')\n    }\n\n    if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {\n      throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold')\n    }\n\n    if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {\n      throw new InvalidArgumentError('headersTimeout must be a positive integer or zero')\n    }\n\n    if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {\n      throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero')\n    }\n\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object')\n    }\n\n    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number')\n    }\n\n    if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {\n      throw new InvalidArgumentError('maxRequestsPerClient must be a positive number')\n    }\n\n    if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {\n      throw new InvalidArgumentError('localAddress must be valid string IP address')\n    }\n\n    if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {\n      throw new InvalidArgumentError('maxResponseSize must be a positive number')\n    }\n\n    if (\n      autoSelectFamilyAttemptTimeout != null &&\n      (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)\n    ) {\n      throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number')\n    }\n\n    // h2\n    if (allowH2 != null && typeof allowH2 !== 'boolean') {\n      throw new InvalidArgumentError('allowH2 must be a valid boolean value')\n    }\n\n    if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {\n      throw new InvalidArgumentError('maxConcurrentStreams must be a possitive integer, greater than 0')\n    }\n\n    if (typeof connect !== 'function') {\n      connect = buildConnector({\n        ...tls,\n        maxCachedSessions,\n        allowH2,\n        socketPath,\n        timeout: connectTimeout,\n        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),\n        ...connect\n      })\n    }\n\n    this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client)\n      ? interceptors.Client\n      : [createRedirectInterceptor({ maxRedirections })]\n    this[kUrl] = util.parseOrigin(url)\n    this[kConnector] = connect\n    this[kSocket] = null\n    this[kPipelining] = pipelining != null ? pipelining : 1\n    this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize\n    this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout\n    this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout\n    this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold\n    this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout]\n    this[kServerName] = null\n    this[kLocalAddress] = localAddress != null ? localAddress : null\n    this[kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming\n    this[kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming\n    this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\\r\\n`\n    this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3\n    this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3\n    this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength\n    this[kMaxRedirections] = maxRedirections\n    this[kMaxRequests] = maxRequestsPerClient\n    this[kClosedResolve] = null\n    this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1\n    this[kHTTPConnVersion] = 'h1'\n\n    // HTTP/2\n    this[kHTTP2Session] = null\n    this[kHTTP2SessionState] = !allowH2\n      ? null\n      : {\n        // streams: null, // Fixed queue of streams - For future support of `push`\n          openStreams: 0, // Keep track of them to decide wether or not unref the session\n          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server\n        }\n    this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}`\n\n    // kQueue is built up of 3 sections separated by\n    // the kRunningIdx and kPendingIdx indices.\n    // |   complete   |   running   |   pending   |\n    //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length\n    // kRunningIdx points to the first running element.\n    // kPendingIdx points to the first pending element.\n    // This implements a fast queue with an amortized\n    // time of O(1).\n\n    this[kQueue] = []\n    this[kRunningIdx] = 0\n    this[kPendingIdx] = 0\n  }\n\n  get pipelining () {\n    return this[kPipelining]\n  }\n\n  set pipelining (value) {\n    this[kPipelining] = value\n    resume(this, true)\n  }\n\n  get [kPending] () {\n    return this[kQueue].length - this[kPendingIdx]\n  }\n\n  get [kRunning] () {\n    return this[kPendingIdx] - this[kRunningIdx]\n  }\n\n  get [kSize] () {\n    return this[kQueue].length - this[kRunningIdx]\n  }\n\n  get [kConnected] () {\n    return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed\n  }\n\n  get [kBusy] () {\n    const socket = this[kSocket]\n    return (\n      (socket && (socket[kReset] || socket[kWriting] || socket[kBlocking])) ||\n      (this[kSize] >= (this[kPipelining] || 1)) ||\n      this[kPending] > 0\n    )\n  }\n\n  /* istanbul ignore: only used for test */\n  [kConnect] (cb) {\n    connect(this)\n    this.once('connect', cb)\n  }\n\n  [kDispatch] (opts, handler) {\n    const origin = opts.origin || this[kUrl].origin\n\n    const request = this[kHTTPConnVersion] === 'h2'\n      ? Request[kHTTP2BuildRequest](origin, opts, handler)\n      : Request[kHTTP1BuildRequest](origin, opts, handler)\n\n    this[kQueue].push(request)\n    if (this[kResuming]) {\n      // Do nothing.\n    } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {\n      // Wait a tick in case stream/iterator is ended in the same tick.\n      this[kResuming] = 1\n      process.nextTick(resume, this)\n    } else {\n      resume(this, true)\n    }\n\n    if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {\n      this[kNeedDrain] = 2\n    }\n\n    return this[kNeedDrain] < 2\n  }\n\n  async [kClose] () {\n    // TODO: for H2 we need to gracefully flush the remaining enqueued\n    // request and close each stream.\n    return new Promise((resolve) => {\n      if (!this[kSize]) {\n        resolve(null)\n      } else {\n        this[kClosedResolve] = resolve\n      }\n    })\n  }\n\n  async [kDestroy] (err) {\n    return new Promise((resolve) => {\n      const requests = this[kQueue].splice(this[kPendingIdx])\n      for (let i = 0; i < requests.length; i++) {\n        const request = requests[i]\n        errorRequest(this, request, err)\n      }\n\n      const callback = () => {\n        if (this[kClosedResolve]) {\n          // TODO (fix): Should we error here with ClientDestroyedError?\n          this[kClosedResolve]()\n          this[kClosedResolve] = null\n        }\n        resolve()\n      }\n\n      if (this[kHTTP2Session] != null) {\n        util.destroy(this[kHTTP2Session], err)\n        this[kHTTP2Session] = null\n        this[kHTTP2SessionState] = null\n      }\n\n      if (!this[kSocket]) {\n        queueMicrotask(callback)\n      } else {\n        util.destroy(this[kSocket].on('close', callback), err)\n      }\n\n      resume(this)\n    })\n  }\n}\n\nfunction onHttp2SessionError (err) {\n  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')\n\n  this[kSocket][kError] = err\n\n  onError(this[kClient], err)\n}\n\nfunction onHttp2FrameError (type, code, id) {\n  const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`)\n\n  if (id === 0) {\n    this[kSocket][kError] = err\n    onError(this[kClient], err)\n  }\n}\n\nfunction onHttp2SessionEnd () {\n  util.destroy(this, new SocketError('other side closed'))\n  util.destroy(this[kSocket], new SocketError('other side closed'))\n}\n\nfunction onHTTP2GoAway (code) {\n  const client = this[kClient]\n  const err = new InformationalError(`HTTP/2: \"GOAWAY\" frame received with code ${code}`)\n  client[kSocket] = null\n  client[kHTTP2Session] = null\n\n  if (client.destroyed) {\n    assert(this[kPending] === 0)\n\n    // Fail entire queue.\n    const requests = client[kQueue].splice(client[kRunningIdx])\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i]\n      errorRequest(this, request, err)\n    }\n  } else if (client[kRunning] > 0) {\n    // Fail head of pipeline.\n    const request = client[kQueue][client[kRunningIdx]]\n    client[kQueue][client[kRunningIdx]++] = null\n\n    errorRequest(client, request, err)\n  }\n\n  client[kPendingIdx] = client[kRunningIdx]\n\n  assert(client[kRunning] === 0)\n\n  client.emit('disconnect',\n    client[kUrl],\n    [client],\n    err\n  )\n\n  resume(client)\n}\n\nconst constants = require('./llhttp/constants')\nconst createRedirectInterceptor = require('./interceptor/redirectInterceptor')\nconst EMPTY_BUF = Buffer.alloc(0)\n\nasync function lazyllhttp () {\n  const llhttpWasmData = process.env.JEST_WORKER_ID ? require('./llhttp/llhttp-wasm.js') : undefined\n\n  let mod\n  try {\n    mod = await WebAssembly.compile(Buffer.from(require('./llhttp/llhttp_simd-wasm.js'), 'base64'))\n  } catch (e) {\n    /* istanbul ignore next */\n\n    // We could check if the error was caused by the simd option not\n    // being enabled, but the occurring of this other error\n    // * https://github.com/emscripten-core/emscripten/issues/11495\n    // got me to remove that check to avoid breaking Node 12.\n    mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require('./llhttp/llhttp-wasm.js'), 'base64'))\n  }\n\n  return await WebAssembly.instantiate(mod, {\n    env: {\n      /* eslint-disable camelcase */\n\n      wasm_on_url: (p, at, len) => {\n        /* istanbul ignore next */\n        return 0\n      },\n      wasm_on_status: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_message_begin: (p) => {\n        assert.strictEqual(currentParser.ptr, p)\n        return currentParser.onMessageBegin() || 0\n      },\n      wasm_on_header_field: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_header_value: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {\n        assert.strictEqual(currentParser.ptr, p)\n        return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0\n      },\n      wasm_on_body: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_message_complete: (p) => {\n        assert.strictEqual(currentParser.ptr, p)\n        return currentParser.onMessageComplete() || 0\n      }\n\n      /* eslint-enable camelcase */\n    }\n  })\n}\n\nlet llhttpInstance = null\nlet llhttpPromise = lazyllhttp()\nllhttpPromise.catch()\n\nlet currentParser = null\nlet currentBufferRef = null\nlet currentBufferSize = 0\nlet currentBufferPtr = null\n\nconst TIMEOUT_HEADERS = 1\nconst TIMEOUT_BODY = 2\nconst TIMEOUT_IDLE = 3\n\nclass Parser {\n  constructor (client, socket, { exports }) {\n    assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0)\n\n    this.llhttp = exports\n    this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE)\n    this.client = client\n    this.socket = socket\n    this.timeout = null\n    this.timeoutValue = null\n    this.timeoutType = null\n    this.statusCode = null\n    this.statusText = ''\n    this.upgrade = false\n    this.headers = []\n    this.headersSize = 0\n    this.headersMaxSize = client[kMaxHeadersSize]\n    this.shouldKeepAlive = false\n    this.paused = false\n    this.resume = this.resume.bind(this)\n\n    this.bytesRead = 0\n\n    this.keepAlive = ''\n    this.contentLength = ''\n    this.connection = ''\n    this.maxResponseSize = client[kMaxResponseSize]\n  }\n\n  setTimeout (value, type) {\n    this.timeoutType = type\n    if (value !== this.timeoutValue) {\n      timers.clearTimeout(this.timeout)\n      if (value) {\n        this.timeout = timers.setTimeout(onParserTimeout, value, this)\n        // istanbul ignore else: only for jest\n        if (this.timeout.unref) {\n          this.timeout.unref()\n        }\n      } else {\n        this.timeout = null\n      }\n      this.timeoutValue = value\n    } else if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n  }\n\n  resume () {\n    if (this.socket.destroyed || !this.paused) {\n      return\n    }\n\n    assert(this.ptr != null)\n    assert(currentParser == null)\n\n    this.llhttp.llhttp_resume(this.ptr)\n\n    assert(this.timeoutType === TIMEOUT_BODY)\n    if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n\n    this.paused = false\n    this.execute(this.socket.read() || EMPTY_BUF) // Flush parser.\n    this.readMore()\n  }\n\n  readMore () {\n    while (!this.paused && this.ptr) {\n      const chunk = this.socket.read()\n      if (chunk === null) {\n        break\n      }\n      this.execute(chunk)\n    }\n  }\n\n  execute (data) {\n    assert(this.ptr != null)\n    assert(currentParser == null)\n    assert(!this.paused)\n\n    const { socket, llhttp } = this\n\n    if (data.length > currentBufferSize) {\n      if (currentBufferPtr) {\n        llhttp.free(currentBufferPtr)\n      }\n      currentBufferSize = Math.ceil(data.length / 4096) * 4096\n      currentBufferPtr = llhttp.malloc(currentBufferSize)\n    }\n\n    new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data)\n\n    // Call `execute` on the wasm parser.\n    // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,\n    // and finally the length of bytes to parse.\n    // The return value is an error code or `constants.ERROR.OK`.\n    try {\n      let ret\n\n      try {\n        currentBufferRef = data\n        currentParser = this\n        ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length)\n        /* eslint-disable-next-line no-useless-catch */\n      } catch (err) {\n        /* istanbul ignore next: difficult to make a test case for */\n        throw err\n      } finally {\n        currentParser = null\n        currentBufferRef = null\n      }\n\n      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr\n\n      if (ret === constants.ERROR.PAUSED_UPGRADE) {\n        this.onUpgrade(data.slice(offset))\n      } else if (ret === constants.ERROR.PAUSED) {\n        this.paused = true\n        socket.unshift(data.slice(offset))\n      } else if (ret !== constants.ERROR.OK) {\n        const ptr = llhttp.llhttp_get_error_reason(this.ptr)\n        let message = ''\n        /* istanbul ignore else: difficult to make a test case for */\n        if (ptr) {\n          const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0)\n          message =\n            'Response does not match the HTTP/1.1 protocol (' +\n            Buffer.from(llhttp.memory.buffer, ptr, len).toString() +\n            ')'\n        }\n        throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset))\n      }\n    } catch (err) {\n      util.destroy(socket, err)\n    }\n  }\n\n  destroy () {\n    assert(this.ptr != null)\n    assert(currentParser == null)\n\n    this.llhttp.llhttp_free(this.ptr)\n    this.ptr = null\n\n    timers.clearTimeout(this.timeout)\n    this.timeout = null\n    this.timeoutValue = null\n    this.timeoutType = null\n\n    this.paused = false\n  }\n\n  onStatus (buf) {\n    this.statusText = buf.toString()\n  }\n\n  onMessageBegin () {\n    const { socket, client } = this\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (socket.destroyed) {\n      return -1\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n    if (!request) {\n      return -1\n    }\n  }\n\n  onHeaderField (buf) {\n    const len = this.headers.length\n\n    if ((len & 1) === 0) {\n      this.headers.push(buf)\n    } else {\n      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])\n    }\n\n    this.trackHeader(buf.length)\n  }\n\n  onHeaderValue (buf) {\n    let len = this.headers.length\n\n    if ((len & 1) === 1) {\n      this.headers.push(buf)\n      len += 1\n    } else {\n      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])\n    }\n\n    const key = this.headers[len - 2]\n    if (key.length === 10 && key.toString().toLowerCase() === 'keep-alive') {\n      this.keepAlive += buf.toString()\n    } else if (key.length === 10 && key.toString().toLowerCase() === 'connection') {\n      this.connection += buf.toString()\n    } else if (key.length === 14 && key.toString().toLowerCase() === 'content-length') {\n      this.contentLength += buf.toString()\n    }\n\n    this.trackHeader(buf.length)\n  }\n\n  trackHeader (len) {\n    this.headersSize += len\n    if (this.headersSize >= this.headersMaxSize) {\n      util.destroy(this.socket, new HeadersOverflowError())\n    }\n  }\n\n  onUpgrade (head) {\n    const { upgrade, client, socket, headers, statusCode } = this\n\n    assert(upgrade)\n\n    const request = client[kQueue][client[kRunningIdx]]\n    assert(request)\n\n    assert(!socket.destroyed)\n    assert(socket === client[kSocket])\n    assert(!this.paused)\n    assert(request.upgrade || request.method === 'CONNECT')\n\n    this.statusCode = null\n    this.statusText = ''\n    this.shouldKeepAlive = null\n\n    assert(this.headers.length % 2 === 0)\n    this.headers = []\n    this.headersSize = 0\n\n    socket.unshift(head)\n\n    socket[kParser].destroy()\n    socket[kParser] = null\n\n    socket[kClient] = null\n    socket[kError] = null\n    socket\n      .removeListener('error', onSocketError)\n      .removeListener('readable', onSocketReadable)\n      .removeListener('end', onSocketEnd)\n      .removeListener('close', onSocketClose)\n\n    client[kSocket] = null\n    client[kQueue][client[kRunningIdx]++] = null\n    client.emit('disconnect', client[kUrl], [client], new InformationalError('upgrade'))\n\n    try {\n      request.onUpgrade(statusCode, headers, socket)\n    } catch (err) {\n      util.destroy(socket, err)\n    }\n\n    resume(client)\n  }\n\n  onHeadersComplete (statusCode, upgrade, shouldKeepAlive) {\n    const { client, socket, headers, statusText } = this\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (socket.destroyed) {\n      return -1\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (!request) {\n      return -1\n    }\n\n    assert(!this.upgrade)\n    assert(this.statusCode < 200)\n\n    if (statusCode === 100) {\n      util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)))\n      return -1\n    }\n\n    /* this can only happen if server is misbehaving */\n    if (upgrade && !request.upgrade) {\n      util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)))\n      return -1\n    }\n\n    assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS)\n\n    this.statusCode = statusCode\n    this.shouldKeepAlive = (\n      shouldKeepAlive ||\n      // Override llhttp value which does not allow keepAlive for HEAD.\n      (request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive')\n    )\n\n    if (this.statusCode >= 200) {\n      const bodyTimeout = request.bodyTimeout != null\n        ? request.bodyTimeout\n        : client[kBodyTimeout]\n      this.setTimeout(bodyTimeout, TIMEOUT_BODY)\n    } else if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n\n    if (request.method === 'CONNECT') {\n      assert(client[kRunning] === 1)\n      this.upgrade = true\n      return 2\n    }\n\n    if (upgrade) {\n      assert(client[kRunning] === 1)\n      this.upgrade = true\n      return 2\n    }\n\n    assert(this.headers.length % 2 === 0)\n    this.headers = []\n    this.headersSize = 0\n\n    if (this.shouldKeepAlive && client[kPipelining]) {\n      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null\n\n      if (keepAliveTimeout != null) {\n        const timeout = Math.min(\n          keepAliveTimeout - client[kKeepAliveTimeoutThreshold],\n          client[kKeepAliveMaxTimeout]\n        )\n        if (timeout <= 0) {\n          socket[kReset] = true\n        } else {\n          client[kKeepAliveTimeoutValue] = timeout\n        }\n      } else {\n        client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout]\n      }\n    } else {\n      // Stop more requests from being dispatched.\n      socket[kReset] = true\n    }\n\n    const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false\n\n    if (request.aborted) {\n      return -1\n    }\n\n    if (request.method === 'HEAD') {\n      return 1\n    }\n\n    if (statusCode < 200) {\n      return 1\n    }\n\n    if (socket[kBlocking]) {\n      socket[kBlocking] = false\n      resume(client)\n    }\n\n    return pause ? constants.ERROR.PAUSED : 0\n  }\n\n  onBody (buf) {\n    const { client, socket, statusCode, maxResponseSize } = this\n\n    if (socket.destroyed) {\n      return -1\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n    assert(request)\n\n    assert.strictEqual(this.timeoutType, TIMEOUT_BODY)\n    if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n\n    assert(statusCode >= 200)\n\n    if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {\n      util.destroy(socket, new ResponseExceededMaxSizeError())\n      return -1\n    }\n\n    this.bytesRead += buf.length\n\n    if (request.onData(buf) === false) {\n      return constants.ERROR.PAUSED\n    }\n  }\n\n  onMessageComplete () {\n    const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this\n\n    if (socket.destroyed && (!statusCode || shouldKeepAlive)) {\n      return -1\n    }\n\n    if (upgrade) {\n      return\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n    assert(request)\n\n    assert(statusCode >= 100)\n\n    this.statusCode = null\n    this.statusText = ''\n    this.bytesRead = 0\n    this.contentLength = ''\n    this.keepAlive = ''\n    this.connection = ''\n\n    assert(this.headers.length % 2 === 0)\n    this.headers = []\n    this.headersSize = 0\n\n    if (statusCode < 200) {\n      return\n    }\n\n    /* istanbul ignore next: should be handled by llhttp? */\n    if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {\n      util.destroy(socket, new ResponseContentLengthMismatchError())\n      return -1\n    }\n\n    request.onComplete(headers)\n\n    client[kQueue][client[kRunningIdx]++] = null\n\n    if (socket[kWriting]) {\n      assert.strictEqual(client[kRunning], 0)\n      // Response completed before request.\n      util.destroy(socket, new InformationalError('reset'))\n      return constants.ERROR.PAUSED\n    } else if (!shouldKeepAlive) {\n      util.destroy(socket, new InformationalError('reset'))\n      return constants.ERROR.PAUSED\n    } else if (socket[kReset] && client[kRunning] === 0) {\n      // Destroy socket once all requests have completed.\n      // The request at the tail of the pipeline is the one\n      // that requested reset and no further requests should\n      // have been queued since then.\n      util.destroy(socket, new InformationalError('reset'))\n      return constants.ERROR.PAUSED\n    } else if (client[kPipelining] === 1) {\n      // We must wait a full event loop cycle to reuse this socket to make sure\n      // that non-spec compliant servers are not closing the connection even if they\n      // said they won't.\n      setImmediate(resume, client)\n    } else {\n      resume(client)\n    }\n  }\n}\n\nfunction onParserTimeout (parser) {\n  const { socket, timeoutType, client } = parser\n\n  /* istanbul ignore else */\n  if (timeoutType === TIMEOUT_HEADERS) {\n    if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {\n      assert(!parser.paused, 'cannot be paused while waiting for headers')\n      util.destroy(socket, new HeadersTimeoutError())\n    }\n  } else if (timeoutType === TIMEOUT_BODY) {\n    if (!parser.paused) {\n      util.destroy(socket, new BodyTimeoutError())\n    }\n  } else if (timeoutType === TIMEOUT_IDLE) {\n    assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue])\n    util.destroy(socket, new InformationalError('socket idle timeout'))\n  }\n}\n\nfunction onSocketReadable () {\n  const { [kParser]: parser } = this\n  if (parser) {\n    parser.readMore()\n  }\n}\n\nfunction onSocketError (err) {\n  const { [kClient]: client, [kParser]: parser } = this\n\n  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')\n\n  if (client[kHTTPConnVersion] !== 'h2') {\n    // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded\n    // to the user.\n    if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so for as a valid response.\n      parser.onMessageComplete()\n      return\n    }\n  }\n\n  this[kError] = err\n\n  onError(this[kClient], err)\n}\n\nfunction onError (client, err) {\n  if (\n    client[kRunning] === 0 &&\n    err.code !== 'UND_ERR_INFO' &&\n    err.code !== 'UND_ERR_SOCKET'\n  ) {\n    // Error is not caused by running request and not a recoverable\n    // socket error.\n\n    assert(client[kPendingIdx] === client[kRunningIdx])\n\n    const requests = client[kQueue].splice(client[kRunningIdx])\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i]\n      errorRequest(client, request, err)\n    }\n    assert(client[kSize] === 0)\n  }\n}\n\nfunction onSocketEnd () {\n  const { [kParser]: parser, [kClient]: client } = this\n\n  if (client[kHTTPConnVersion] !== 'h2') {\n    if (parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so far as a valid response.\n      parser.onMessageComplete()\n      return\n    }\n  }\n\n  util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)))\n}\n\nfunction onSocketClose () {\n  const { [kClient]: client, [kParser]: parser } = this\n\n  if (client[kHTTPConnVersion] === 'h1' && parser) {\n    if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so far as a valid response.\n      parser.onMessageComplete()\n    }\n\n    this[kParser].destroy()\n    this[kParser] = null\n  }\n\n  const err = this[kError] || new SocketError('closed', util.getSocketInfo(this))\n\n  client[kSocket] = null\n\n  if (client.destroyed) {\n    assert(client[kPending] === 0)\n\n    // Fail entire queue.\n    const requests = client[kQueue].splice(client[kRunningIdx])\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i]\n      errorRequest(client, request, err)\n    }\n  } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {\n    // Fail head of pipeline.\n    const request = client[kQueue][client[kRunningIdx]]\n    client[kQueue][client[kRunningIdx]++] = null\n\n    errorRequest(client, request, err)\n  }\n\n  client[kPendingIdx] = client[kRunningIdx]\n\n  assert(client[kRunning] === 0)\n\n  client.emit('disconnect', client[kUrl], [client], err)\n\n  resume(client)\n}\n\nasync function connect (client) {\n  assert(!client[kConnecting])\n  assert(!client[kSocket])\n\n  let { host, hostname, protocol, port } = client[kUrl]\n\n  // Resolve ipv6\n  if (hostname[0] === '[') {\n    const idx = hostname.indexOf(']')\n\n    assert(idx !== -1)\n    const ip = hostname.substring(1, idx)\n\n    assert(net.isIP(ip))\n    hostname = ip\n  }\n\n  client[kConnecting] = true\n\n  if (channels.beforeConnect.hasSubscribers) {\n    channels.beforeConnect.publish({\n      connectParams: {\n        host,\n        hostname,\n        protocol,\n        port,\n        servername: client[kServerName],\n        localAddress: client[kLocalAddress]\n      },\n      connector: client[kConnector]\n    })\n  }\n\n  try {\n    const socket = await new Promise((resolve, reject) => {\n      client[kConnector]({\n        host,\n        hostname,\n        protocol,\n        port,\n        servername: client[kServerName],\n        localAddress: client[kLocalAddress]\n      }, (err, socket) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(socket)\n        }\n      })\n    })\n\n    if (client.destroyed) {\n      util.destroy(socket.on('error', () => {}), new ClientDestroyedError())\n      return\n    }\n\n    client[kConnecting] = false\n\n    assert(socket)\n\n    const isH2 = socket.alpnProtocol === 'h2'\n    if (isH2) {\n      if (!h2ExperimentalWarned) {\n        h2ExperimentalWarned = true\n        process.emitWarning('H2 support is experimental, expect them to change at any time.', {\n          code: 'UNDICI-H2'\n        })\n      }\n\n      const session = http2.connect(client[kUrl], {\n        createConnection: () => socket,\n        peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams\n      })\n\n      client[kHTTPConnVersion] = 'h2'\n      session[kClient] = client\n      session[kSocket] = socket\n      session.on('error', onHttp2SessionError)\n      session.on('frameError', onHttp2FrameError)\n      session.on('end', onHttp2SessionEnd)\n      session.on('goaway', onHTTP2GoAway)\n      session.on('close', onSocketClose)\n      session.unref()\n\n      client[kHTTP2Session] = session\n      socket[kHTTP2Session] = session\n    } else {\n      if (!llhttpInstance) {\n        llhttpInstance = await llhttpPromise\n        llhttpPromise = null\n      }\n\n      socket[kNoRef] = false\n      socket[kWriting] = false\n      socket[kReset] = false\n      socket[kBlocking] = false\n      socket[kParser] = new Parser(client, socket, llhttpInstance)\n    }\n\n    socket[kCounter] = 0\n    socket[kMaxRequests] = client[kMaxRequests]\n    socket[kClient] = client\n    socket[kError] = null\n\n    socket\n      .on('error', onSocketError)\n      .on('readable', onSocketReadable)\n      .on('end', onSocketEnd)\n      .on('close', onSocketClose)\n\n    client[kSocket] = socket\n\n    if (channels.connected.hasSubscribers) {\n      channels.connected.publish({\n        connectParams: {\n          host,\n          hostname,\n          protocol,\n          port,\n          servername: client[kServerName],\n          localAddress: client[kLocalAddress]\n        },\n        connector: client[kConnector],\n        socket\n      })\n    }\n    client.emit('connect', client[kUrl], [client])\n  } catch (err) {\n    if (client.destroyed) {\n      return\n    }\n\n    client[kConnecting] = false\n\n    if (channels.connectError.hasSubscribers) {\n      channels.connectError.publish({\n        connectParams: {\n          host,\n          hostname,\n          protocol,\n          port,\n          servername: client[kServerName],\n          localAddress: client[kLocalAddress]\n        },\n        connector: client[kConnector],\n        error: err\n      })\n    }\n\n    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {\n      assert(client[kRunning] === 0)\n      while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {\n        const request = client[kQueue][client[kPendingIdx]++]\n        errorRequest(client, request, err)\n      }\n    } else {\n      onError(client, err)\n    }\n\n    client.emit('connectionError', client[kUrl], [client], err)\n  }\n\n  resume(client)\n}\n\nfunction emitDrain (client) {\n  client[kNeedDrain] = 0\n  client.emit('drain', client[kUrl], [client])\n}\n\nfunction resume (client, sync) {\n  if (client[kResuming] === 2) {\n    return\n  }\n\n  client[kResuming] = 2\n\n  _resume(client, sync)\n  client[kResuming] = 0\n\n  if (client[kRunningIdx] > 256) {\n    client[kQueue].splice(0, client[kRunningIdx])\n    client[kPendingIdx] -= client[kRunningIdx]\n    client[kRunningIdx] = 0\n  }\n}\n\nfunction _resume (client, sync) {\n  while (true) {\n    if (client.destroyed) {\n      assert(client[kPending] === 0)\n      return\n    }\n\n    if (client[kClosedResolve] && !client[kSize]) {\n      client[kClosedResolve]()\n      client[kClosedResolve] = null\n      return\n    }\n\n    const socket = client[kSocket]\n\n    if (socket && !socket.destroyed && socket.alpnProtocol !== 'h2') {\n      if (client[kSize] === 0) {\n        if (!socket[kNoRef] && socket.unref) {\n          socket.unref()\n          socket[kNoRef] = true\n        }\n      } else if (socket[kNoRef] && socket.ref) {\n        socket.ref()\n        socket[kNoRef] = false\n      }\n\n      if (client[kSize] === 0) {\n        if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {\n          socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE)\n        }\n      } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {\n        if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {\n          const request = client[kQueue][client[kRunningIdx]]\n          const headersTimeout = request.headersTimeout != null\n            ? request.headersTimeout\n            : client[kHeadersTimeout]\n          socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS)\n        }\n      }\n    }\n\n    if (client[kBusy]) {\n      client[kNeedDrain] = 2\n    } else if (client[kNeedDrain] === 2) {\n      if (sync) {\n        client[kNeedDrain] = 1\n        process.nextTick(emitDrain, client)\n      } else {\n        emitDrain(client)\n      }\n      continue\n    }\n\n    if (client[kPending] === 0) {\n      return\n    }\n\n    if (client[kRunning] >= (client[kPipelining] || 1)) {\n      return\n    }\n\n    const request = client[kQueue][client[kPendingIdx]]\n\n    if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {\n      if (client[kRunning] > 0) {\n        return\n      }\n\n      client[kServerName] = request.servername\n\n      if (socket && socket.servername !== request.servername) {\n        util.destroy(socket, new InformationalError('servername changed'))\n        return\n      }\n    }\n\n    if (client[kConnecting]) {\n      return\n    }\n\n    if (!socket && !client[kHTTP2Session]) {\n      connect(client)\n      return\n    }\n\n    if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {\n      return\n    }\n\n    if (client[kRunning] > 0 && !request.idempotent) {\n      // Non-idempotent request cannot be retried.\n      // Ensure that no other requests are inflight and\n      // could cause failure.\n      return\n    }\n\n    if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {\n      // Don't dispatch an upgrade until all preceding requests have completed.\n      // A misbehaving server might upgrade the connection before all pipelined\n      // request has completed.\n      return\n    }\n\n    if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 &&\n      (util.isStream(request.body) || util.isAsyncIterable(request.body))) {\n      // Request with stream or iterator body can error while other requests\n      // are inflight and indirectly error those as well.\n      // Ensure this doesn't happen by waiting for inflight\n      // to complete before dispatching.\n\n      // Request with stream or iterator body cannot be retried.\n      // Ensure that no other requests are inflight and\n      // could cause failure.\n      return\n    }\n\n    if (!request.aborted && write(client, request)) {\n      client[kPendingIdx]++\n    } else {\n      client[kQueue].splice(client[kPendingIdx], 1)\n    }\n  }\n}\n\n// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2\nfunction shouldSendContentLength (method) {\n  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT'\n}\n\nfunction write (client, request) {\n  if (client[kHTTPConnVersion] === 'h2') {\n    writeH2(client, client[kHTTP2Session], request)\n    return\n  }\n\n  const { body, method, path, host, upgrade, headers, blocking, reset } = request\n\n  // https://tools.ietf.org/html/rfc7231#section-4.3.1\n  // https://tools.ietf.org/html/rfc7231#section-4.3.2\n  // https://tools.ietf.org/html/rfc7231#section-4.3.5\n\n  // Sending a payload body on a request that does not\n  // expect it can cause undefined behavior on some\n  // servers and corrupt connection state. Do not\n  // re-use the connection for further requests.\n\n  const expectsPayload = (\n    method === 'PUT' ||\n    method === 'POST' ||\n    method === 'PATCH'\n  )\n\n  if (body && typeof body.read === 'function') {\n    // Try to read EOF in order to get length.\n    body.read(0)\n  }\n\n  const bodyLength = util.bodyLength(body)\n\n  let contentLength = bodyLength\n\n  if (contentLength === null) {\n    contentLength = request.contentLength\n  }\n\n  if (contentLength === 0 && !expectsPayload) {\n    // https://tools.ietf.org/html/rfc7230#section-3.3.2\n    // A user agent SHOULD NOT send a Content-Length header field when\n    // the request message does not contain a payload body and the method\n    // semantics do not anticipate such a body.\n\n    contentLength = null\n  }\n\n  // https://github.com/nodejs/undici/issues/2046\n  // A user agent may send a Content-Length header with 0 value, this should be allowed.\n  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {\n    if (client[kStrictContentLength]) {\n      errorRequest(client, request, new RequestContentLengthMismatchError())\n      return false\n    }\n\n    process.emitWarning(new RequestContentLengthMismatchError())\n  }\n\n  const socket = client[kSocket]\n\n  try {\n    request.onConnect((err) => {\n      if (request.aborted || request.completed) {\n        return\n      }\n\n      errorRequest(client, request, err || new RequestAbortedError())\n\n      util.destroy(socket, new InformationalError('aborted'))\n    })\n  } catch (err) {\n    errorRequest(client, request, err)\n  }\n\n  if (request.aborted) {\n    return false\n  }\n\n  if (method === 'HEAD') {\n    // https://github.com/mcollina/undici/issues/258\n    // Close after a HEAD request to interop with misbehaving servers\n    // that may send a body in the response.\n\n    socket[kReset] = true\n  }\n\n  if (upgrade || method === 'CONNECT') {\n    // On CONNECT or upgrade, block pipeline from dispatching further\n    // requests on this connection.\n\n    socket[kReset] = true\n  }\n\n  if (reset != null) {\n    socket[kReset] = reset\n  }\n\n  if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {\n    socket[kReset] = true\n  }\n\n  if (blocking) {\n    socket[kBlocking] = true\n  }\n\n  let header = `${method} ${path} HTTP/1.1\\r\\n`\n\n  if (typeof host === 'string') {\n    header += `host: ${host}\\r\\n`\n  } else {\n    header += client[kHostHeader]\n  }\n\n  if (upgrade) {\n    header += `connection: upgrade\\r\\nupgrade: ${upgrade}\\r\\n`\n  } else if (client[kPipelining] && !socket[kReset]) {\n    header += 'connection: keep-alive\\r\\n'\n  } else {\n    header += 'connection: close\\r\\n'\n  }\n\n  if (headers) {\n    header += headers\n  }\n\n  if (channels.sendHeaders.hasSubscribers) {\n    channels.sendHeaders.publish({ request, headers: header, socket })\n  }\n\n  /* istanbul ignore else: assertion */\n  if (!body || bodyLength === 0) {\n    if (contentLength === 0) {\n      socket.write(`${header}content-length: 0\\r\\n\\r\\n`, 'latin1')\n    } else {\n      assert(contentLength === null, 'no body must not have content length')\n      socket.write(`${header}\\r\\n`, 'latin1')\n    }\n    request.onRequestSent()\n  } else if (util.isBuffer(body)) {\n    assert(contentLength === body.byteLength, 'buffer body must have content length')\n\n    socket.cork()\n    socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1')\n    socket.write(body)\n    socket.uncork()\n    request.onBodySent(body)\n    request.onRequestSent()\n    if (!expectsPayload) {\n      socket[kReset] = true\n    }\n  } else if (util.isBlobLike(body)) {\n    if (typeof body.stream === 'function') {\n      writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload })\n    } else {\n      writeBlob({ body, client, request, socket, contentLength, header, expectsPayload })\n    }\n  } else if (util.isStream(body)) {\n    writeStream({ body, client, request, socket, contentLength, header, expectsPayload })\n  } else if (util.isIterable(body)) {\n    writeIterable({ body, client, request, socket, contentLength, header, expectsPayload })\n  } else {\n    assert(false)\n  }\n\n  return true\n}\n\nfunction writeH2 (client, session, request) {\n  const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request\n\n  let headers\n  if (typeof reqHeaders === 'string') headers = Request[kHTTP2CopyHeaders](reqHeaders.trim())\n  else headers = reqHeaders\n\n  if (upgrade) {\n    errorRequest(client, request, new Error('Upgrade not supported for H2'))\n    return false\n  }\n\n  try {\n    // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?\n    request.onConnect((err) => {\n      if (request.aborted || request.completed) {\n        return\n      }\n\n      errorRequest(client, request, err || new RequestAbortedError())\n    })\n  } catch (err) {\n    errorRequest(client, request, err)\n  }\n\n  if (request.aborted) {\n    return false\n  }\n\n  /** @type {import('node:http2').ClientHttp2Stream} */\n  let stream\n  const h2State = client[kHTTP2SessionState]\n\n  headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost]\n  headers[HTTP2_HEADER_METHOD] = method\n\n  if (method === 'CONNECT') {\n    session.ref()\n    // we are already connected, streams are pending, first request\n    // will create a new stream. We trigger a request to create the stream and wait until\n    // `ready` event is triggered\n    // We disabled endStream to allow the user to write to the stream\n    stream = session.request(headers, { endStream: false, signal })\n\n    if (stream.id && !stream.pending) {\n      request.onUpgrade(null, null, stream)\n      ++h2State.openStreams\n    } else {\n      stream.once('ready', () => {\n        request.onUpgrade(null, null, stream)\n        ++h2State.openStreams\n      })\n    }\n\n    stream.once('close', () => {\n      h2State.openStreams -= 1\n      // TODO(HTTP/2): unref only if current streams count is 0\n      if (h2State.openStreams === 0) session.unref()\n    })\n\n    return true\n  }\n\n  // https://tools.ietf.org/html/rfc7540#section-8.3\n  // :path and :scheme headers must be omited when sending CONNECT\n\n  headers[HTTP2_HEADER_PATH] = path\n  headers[HTTP2_HEADER_SCHEME] = 'https'\n\n  // https://tools.ietf.org/html/rfc7231#section-4.3.1\n  // https://tools.ietf.org/html/rfc7231#section-4.3.2\n  // https://tools.ietf.org/html/rfc7231#section-4.3.5\n\n  // Sending a payload body on a request that does not\n  // expect it can cause undefined behavior on some\n  // servers and corrupt connection state. Do not\n  // re-use the connection for further requests.\n\n  const expectsPayload = (\n    method === 'PUT' ||\n    method === 'POST' ||\n    method === 'PATCH'\n  )\n\n  if (body && typeof body.read === 'function') {\n    // Try to read EOF in order to get length.\n    body.read(0)\n  }\n\n  let contentLength = util.bodyLength(body)\n\n  if (contentLength == null) {\n    contentLength = request.contentLength\n  }\n\n  if (contentLength === 0 || !expectsPayload) {\n    // https://tools.ietf.org/html/rfc7230#section-3.3.2\n    // A user agent SHOULD NOT send a Content-Length header field when\n    // the request message does not contain a payload body and the method\n    // semantics do not anticipate such a body.\n\n    contentLength = null\n  }\n\n  // https://github.com/nodejs/undici/issues/2046\n  // A user agent may send a Content-Length header with 0 value, this should be allowed.\n  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {\n    if (client[kStrictContentLength]) {\n      errorRequest(client, request, new RequestContentLengthMismatchError())\n      return false\n    }\n\n    process.emitWarning(new RequestContentLengthMismatchError())\n  }\n\n  if (contentLength != null) {\n    assert(body, 'no body must not have content length')\n    headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`\n  }\n\n  session.ref()\n\n  const shouldEndStream = method === 'GET' || method === 'HEAD'\n  if (expectContinue) {\n    headers[HTTP2_HEADER_EXPECT] = '100-continue'\n    stream = session.request(headers, { endStream: shouldEndStream, signal })\n\n    stream.once('continue', writeBodyH2)\n  } else {\n    stream = session.request(headers, {\n      endStream: shouldEndStream,\n      signal\n    })\n    writeBodyH2()\n  }\n\n  // Increment counter as we have new several streams open\n  ++h2State.openStreams\n\n  stream.once('response', headers => {\n    const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers\n\n    if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), '') === false) {\n      stream.pause()\n    }\n  })\n\n  stream.once('end', () => {\n    request.onComplete([])\n  })\n\n  stream.on('data', (chunk) => {\n    if (request.onData(chunk) === false) {\n      stream.pause()\n    }\n  })\n\n  stream.once('close', () => {\n    h2State.openStreams -= 1\n    // TODO(HTTP/2): unref only if current streams count is 0\n    if (h2State.openStreams === 0) {\n      session.unref()\n    }\n  })\n\n  stream.once('error', function (err) {\n    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {\n      h2State.streams -= 1\n      util.destroy(stream, err)\n    }\n  })\n\n  stream.once('frameError', (type, code) => {\n    const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`)\n    errorRequest(client, request, err)\n\n    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {\n      h2State.streams -= 1\n      util.destroy(stream, err)\n    }\n  })\n\n  // stream.on('aborted', () => {\n  //   // TODO(HTTP/2): Support aborted\n  // })\n\n  // stream.on('timeout', () => {\n  //   // TODO(HTTP/2): Support timeout\n  // })\n\n  // stream.on('push', headers => {\n  //   // TODO(HTTP/2): Suppor push\n  // })\n\n  // stream.on('trailers', headers => {\n  //   // TODO(HTTP/2): Support trailers\n  // })\n\n  return true\n\n  function writeBodyH2 () {\n    /* istanbul ignore else: assertion */\n    if (!body) {\n      request.onRequestSent()\n    } else if (util.isBuffer(body)) {\n      assert(contentLength === body.byteLength, 'buffer body must have content length')\n      stream.cork()\n      stream.write(body)\n      stream.uncork()\n      stream.end()\n      request.onBodySent(body)\n      request.onRequestSent()\n    } else if (util.isBlobLike(body)) {\n      if (typeof body.stream === 'function') {\n        writeIterable({\n          client,\n          request,\n          contentLength,\n          h2stream: stream,\n          expectsPayload,\n          body: body.stream(),\n          socket: client[kSocket],\n          header: ''\n        })\n      } else {\n        writeBlob({\n          body,\n          client,\n          request,\n          contentLength,\n          expectsPayload,\n          h2stream: stream,\n          header: '',\n          socket: client[kSocket]\n        })\n      }\n    } else if (util.isStream(body)) {\n      writeStream({\n        body,\n        client,\n        request,\n        contentLength,\n        expectsPayload,\n        socket: client[kSocket],\n        h2stream: stream,\n        header: ''\n      })\n    } else if (util.isIterable(body)) {\n      writeIterable({\n        body,\n        client,\n        request,\n        contentLength,\n        expectsPayload,\n        header: '',\n        h2stream: stream,\n        socket: client[kSocket]\n      })\n    } else {\n      assert(false)\n    }\n  }\n}\n\nfunction writeStream ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined')\n\n  if (client[kHTTPConnVersion] === 'h2') {\n    // For HTTP/2, is enough to pipe the stream\n    const pipe = pipeline(\n      body,\n      h2stream,\n      (err) => {\n        if (err) {\n          util.destroy(body, err)\n          util.destroy(h2stream, err)\n        } else {\n          request.onRequestSent()\n        }\n      }\n    )\n\n    pipe.on('data', onPipeData)\n    pipe.once('end', () => {\n      pipe.removeListener('data', onPipeData)\n      util.destroy(pipe)\n    })\n\n    function onPipeData (chunk) {\n      request.onBodySent(chunk)\n    }\n\n    return\n  }\n\n  let finished = false\n\n  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })\n\n  const onData = function (chunk) {\n    if (finished) {\n      return\n    }\n\n    try {\n      if (!writer.write(chunk) && this.pause) {\n        this.pause()\n      }\n    } catch (err) {\n      util.destroy(this, err)\n    }\n  }\n  const onDrain = function () {\n    if (finished) {\n      return\n    }\n\n    if (body.resume) {\n      body.resume()\n    }\n  }\n  const onAbort = function () {\n    if (finished) {\n      return\n    }\n    const err = new RequestAbortedError()\n    queueMicrotask(() => onFinished(err))\n  }\n  const onFinished = function (err) {\n    if (finished) {\n      return\n    }\n\n    finished = true\n\n    assert(socket.destroyed || (socket[kWriting] && client[kRunning] <= 1))\n\n    socket\n      .off('drain', onDrain)\n      .off('error', onFinished)\n\n    body\n      .removeListener('data', onData)\n      .removeListener('end', onFinished)\n      .removeListener('error', onFinished)\n      .removeListener('close', onAbort)\n\n    if (!err) {\n      try {\n        writer.end()\n      } catch (er) {\n        err = er\n      }\n    }\n\n    writer.destroy(err)\n\n    if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {\n      util.destroy(body, err)\n    } else {\n      util.destroy(body)\n    }\n  }\n\n  body\n    .on('data', onData)\n    .on('end', onFinished)\n    .on('error', onFinished)\n    .on('close', onAbort)\n\n  if (body.resume) {\n    body.resume()\n  }\n\n  socket\n    .on('drain', onDrain)\n    .on('error', onFinished)\n}\n\nasync function writeBlob ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n  assert(contentLength === body.size, 'blob body must have content length')\n\n  const isH2 = client[kHTTPConnVersion] === 'h2'\n  try {\n    if (contentLength != null && contentLength !== body.size) {\n      throw new RequestContentLengthMismatchError()\n    }\n\n    const buffer = Buffer.from(await body.arrayBuffer())\n\n    if (isH2) {\n      h2stream.cork()\n      h2stream.write(buffer)\n      h2stream.uncork()\n    } else {\n      socket.cork()\n      socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1')\n      socket.write(buffer)\n      socket.uncork()\n    }\n\n    request.onBodySent(buffer)\n    request.onRequestSent()\n\n    if (!expectsPayload) {\n      socket[kReset] = true\n    }\n\n    resume(client)\n  } catch (err) {\n    util.destroy(isH2 ? h2stream : socket, err)\n  }\n}\n\nasync function writeIterable ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined')\n\n  let callback = null\n  function onDrain () {\n    if (callback) {\n      const cb = callback\n      callback = null\n      cb()\n    }\n  }\n\n  const waitForDrain = () => new Promise((resolve, reject) => {\n    assert(callback === null)\n\n    if (socket[kError]) {\n      reject(socket[kError])\n    } else {\n      callback = resolve\n    }\n  })\n\n  if (client[kHTTPConnVersion] === 'h2') {\n    h2stream\n      .on('close', onDrain)\n      .on('drain', onDrain)\n\n    try {\n      // It's up to the user to somehow abort the async iterable.\n      for await (const chunk of body) {\n        if (socket[kError]) {\n          throw socket[kError]\n        }\n\n        const res = h2stream.write(chunk)\n        request.onBodySent(chunk)\n        if (!res) {\n          await waitForDrain()\n        }\n      }\n    } catch (err) {\n      h2stream.destroy(err)\n    } finally {\n      request.onRequestSent()\n      h2stream.end()\n      h2stream\n        .off('close', onDrain)\n        .off('drain', onDrain)\n    }\n\n    return\n  }\n\n  socket\n    .on('close', onDrain)\n    .on('drain', onDrain)\n\n  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })\n  try {\n    // It's up to the user to somehow abort the async iterable.\n    for await (const chunk of body) {\n      if (socket[kError]) {\n        throw socket[kError]\n      }\n\n      if (!writer.write(chunk)) {\n        await waitForDrain()\n      }\n    }\n\n    writer.end()\n  } catch (err) {\n    writer.destroy(err)\n  } finally {\n    socket\n      .off('close', onDrain)\n      .off('drain', onDrain)\n  }\n}\n\nclass AsyncWriter {\n  constructor ({ socket, request, contentLength, client, expectsPayload, header }) {\n    this.socket = socket\n    this.request = request\n    this.contentLength = contentLength\n    this.client = client\n    this.bytesWritten = 0\n    this.expectsPayload = expectsPayload\n    this.header = header\n\n    socket[kWriting] = true\n  }\n\n  write (chunk) {\n    const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this\n\n    if (socket[kError]) {\n      throw socket[kError]\n    }\n\n    if (socket.destroyed) {\n      return false\n    }\n\n    const len = Buffer.byteLength(chunk)\n    if (!len) {\n      return true\n    }\n\n    // We should defer writing chunks.\n    if (contentLength !== null && bytesWritten + len > contentLength) {\n      if (client[kStrictContentLength]) {\n        throw new RequestContentLengthMismatchError()\n      }\n\n      process.emitWarning(new RequestContentLengthMismatchError())\n    }\n\n    socket.cork()\n\n    if (bytesWritten === 0) {\n      if (!expectsPayload) {\n        socket[kReset] = true\n      }\n\n      if (contentLength === null) {\n        socket.write(`${header}transfer-encoding: chunked\\r\\n`, 'latin1')\n      } else {\n        socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1')\n      }\n    }\n\n    if (contentLength === null) {\n      socket.write(`\\r\\n${len.toString(16)}\\r\\n`, 'latin1')\n    }\n\n    this.bytesWritten += len\n\n    const ret = socket.write(chunk)\n\n    socket.uncork()\n\n    request.onBodySent(chunk)\n\n    if (!ret) {\n      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n        // istanbul ignore else: only for jest\n        if (socket[kParser].timeout.refresh) {\n          socket[kParser].timeout.refresh()\n        }\n      }\n    }\n\n    return ret\n  }\n\n  end () {\n    const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this\n    request.onRequestSent()\n\n    socket[kWriting] = false\n\n    if (socket[kError]) {\n      throw socket[kError]\n    }\n\n    if (socket.destroyed) {\n      return\n    }\n\n    if (bytesWritten === 0) {\n      if (expectsPayload) {\n        // https://tools.ietf.org/html/rfc7230#section-3.3.2\n        // A user agent SHOULD send a Content-Length in a request message when\n        // no Transfer-Encoding is sent and the request method defines a meaning\n        // for an enclosed payload body.\n\n        socket.write(`${header}content-length: 0\\r\\n\\r\\n`, 'latin1')\n      } else {\n        socket.write(`${header}\\r\\n`, 'latin1')\n      }\n    } else if (contentLength === null) {\n      socket.write('\\r\\n0\\r\\n\\r\\n', 'latin1')\n    }\n\n    if (contentLength !== null && bytesWritten !== contentLength) {\n      if (client[kStrictContentLength]) {\n        throw new RequestContentLengthMismatchError()\n      } else {\n        process.emitWarning(new RequestContentLengthMismatchError())\n      }\n    }\n\n    if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n      // istanbul ignore else: only for jest\n      if (socket[kParser].timeout.refresh) {\n        socket[kParser].timeout.refresh()\n      }\n    }\n\n    resume(client)\n  }\n\n  destroy (err) {\n    const { socket, client } = this\n\n    socket[kWriting] = false\n\n    if (err) {\n      assert(client[kRunning] <= 1, 'pipeline should only contain this request')\n      util.destroy(socket, err)\n    }\n  }\n}\n\nfunction errorRequest (client, request, err) {\n  try {\n    request.onError(err)\n    assert(request.aborted)\n  } catch (err) {\n    client.emit('error', err)\n  }\n}\n\nmodule.exports = Client\n", "/* eslint-disable */\n\n'use strict'\n\n// Extracted from node/lib/internal/fixed_queue.js\n\n// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.\nconst kSize = 2048;\nconst kMask = kSize - 1;\n\n// The FixedQueue is implemented as a singly-linked list of fixed-size\n// circular buffers. It looks something like this:\n//\n//  head                                                       tail\n//    |                                                          |\n//    v                                                          v\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\n// +-----------+               +-----------+                  +-----------+\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |       bottom --> |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |    ...    |               |    ...    |                  |    ...    |\n// |   item    |               |   item    |                  |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |  [empty]  | <-- top       |   item    |                  |   item    |\n// |  [empty]  |               |   item    |                  |   item    |\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\n// +-----------+               +-----------+                  +-----------+\n//\n// Or, if there is only one circular buffer, it looks something\n// like either of these:\n//\n//  head   tail                                 head   tail\n//    |     |                                     |     |\n//    v     v                                     v     v\n// +-----------+                               +-----------+\n// |  [null]   |                               |  [null]   |\n// +-----------+                               +-----------+\n// |  [empty]  |                               |   item    |\n// |  [empty]  |                               |   item    |\n// |   item    | <-- bottom            top --> |  [empty]  |\n// |   item    |                               |  [empty]  |\n// |  [empty]  | <-- top            bottom --> |   item    |\n// |  [empty]  |                               |   item    |\n// +-----------+                               +-----------+\n//\n// Adding a value means moving `top` forward by one, removing means\n// moving `bottom` forward by one. After reaching the end, the queue\n// wraps around.\n//\n// When `top === bottom` the current queue is empty and when\n// `top + 1 === bottom` it's full. This wastes a single space of storage\n// but allows much quicker checks.\n\nclass FixedCircularBuffer {\n  constructor() {\n    this.bottom = 0;\n    this.top = 0;\n    this.list = new Array(kSize);\n    this.next = null;\n  }\n\n  isEmpty() {\n    return this.top === this.bottom;\n  }\n\n  isFull() {\n    return ((this.top + 1) & kMask) === this.bottom;\n  }\n\n  push(data) {\n    this.list[this.top] = data;\n    this.top = (this.top + 1) & kMask;\n  }\n\n  shift() {\n    const nextItem = this.list[this.bottom];\n    if (nextItem === undefined)\n      return null;\n    this.list[this.bottom] = undefined;\n    this.bottom = (this.bottom + 1) & kMask;\n    return nextItem;\n  }\n}\n\nmodule.exports = class FixedQueue {\n  constructor() {\n    this.head = this.tail = new FixedCircularBuffer();\n  }\n\n  isEmpty() {\n    return this.head.isEmpty();\n  }\n\n  push(data) {\n    if (this.head.isFull()) {\n      // Head is full: Creates a new queue, sets the old queue's `.next` to it,\n      // and sets it as the new main queue.\n      this.head = this.head.next = new FixedCircularBuffer();\n    }\n    this.head.push(data);\n  }\n\n  shift() {\n    const tail = this.tail;\n    const next = tail.shift();\n    if (tail.isEmpty() && tail.next !== null) {\n      // If there is another queue, it forms the new tail.\n      this.tail = tail.next;\n    }\n    return next;\n  }\n};\n", "const { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require('./core/symbols')\nconst kPool = Symbol('pool')\n\nclass PoolStats {\n  constructor (pool) {\n    this[kPool] = pool\n  }\n\n  get connected () {\n    return this[kPool][kConnected]\n  }\n\n  get free () {\n    return this[kPool][kFree]\n  }\n\n  get pending () {\n    return this[kPool][kPending]\n  }\n\n  get queued () {\n    return this[kPool][kQueued]\n  }\n\n  get running () {\n    return this[kPool][kRunning]\n  }\n\n  get size () {\n    return this[kPool][kSize]\n  }\n}\n\nmodule.exports = PoolStats\n", "'use strict'\n\nconst DispatcherBase = require('./dispatcher-base')\nconst FixedQueue = require('./node/fixed-queue')\nconst { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require('./core/symbols')\nconst PoolStats = require('./pool-stats')\n\nconst kClients = Symbol('clients')\nconst kNeedDrain = Symbol('needDrain')\nconst kQueue = Symbol('queue')\nconst kClosedResolve = Symbol('closed resolve')\nconst kOnDrain = Symbol('onDrain')\nconst kOnConnect = Symbol('onConnect')\nconst kOnDisconnect = Symbol('onDisconnect')\nconst kOnConnectionError = Symbol('onConnectionError')\nconst kGetDispatcher = Symbol('get dispatcher')\nconst kAddClient = Symbol('add client')\nconst kRemoveClient = Symbol('remove client')\nconst kStats = Symbol('stats')\n\nclass PoolBase extends DispatcherBase {\n  constructor () {\n    super()\n\n    this[kQueue] = new FixedQueue()\n    this[kClients] = []\n    this[kQueued] = 0\n\n    const pool = this\n\n    this[kOnDrain] = function onDrain (origin, targets) {\n      const queue = pool[kQueue]\n\n      let needDrain = false\n\n      while (!needDrain) {\n        const item = queue.shift()\n        if (!item) {\n          break\n        }\n        pool[kQueued]--\n        needDrain = !this.dispatch(item.opts, item.handler)\n      }\n\n      this[kNeedDrain] = needDrain\n\n      if (!this[kNeedDrain] && pool[kNeedDrain]) {\n        pool[kNeedDrain] = false\n        pool.emit('drain', origin, [pool, ...targets])\n      }\n\n      if (pool[kClosedResolve] && queue.isEmpty()) {\n        Promise\n          .all(pool[kClients].map(c => c.close()))\n          .then(pool[kClosedResolve])\n      }\n    }\n\n    this[kOnConnect] = (origin, targets) => {\n      pool.emit('connect', origin, [pool, ...targets])\n    }\n\n    this[kOnDisconnect] = (origin, targets, err) => {\n      pool.emit('disconnect', origin, [pool, ...targets], err)\n    }\n\n    this[kOnConnectionError] = (origin, targets, err) => {\n      pool.emit('connectionError', origin, [pool, ...targets], err)\n    }\n\n    this[kStats] = new PoolStats(this)\n  }\n\n  get [kBusy] () {\n    return this[kNeedDrain]\n  }\n\n  get [kConnected] () {\n    return this[kClients].filter(client => client[kConnected]).length\n  }\n\n  get [kFree] () {\n    return this[kClients].filter(client => client[kConnected] && !client[kNeedDrain]).length\n  }\n\n  get [kPending] () {\n    let ret = this[kQueued]\n    for (const { [kPending]: pending } of this[kClients]) {\n      ret += pending\n    }\n    return ret\n  }\n\n  get [kRunning] () {\n    let ret = 0\n    for (const { [kRunning]: running } of this[kClients]) {\n      ret += running\n    }\n    return ret\n  }\n\n  get [kSize] () {\n    let ret = this[kQueued]\n    for (const { [kSize]: size } of this[kClients]) {\n      ret += size\n    }\n    return ret\n  }\n\n  get stats () {\n    return this[kStats]\n  }\n\n  async [kClose] () {\n    if (this[kQueue].isEmpty()) {\n      return Promise.all(this[kClients].map(c => c.close()))\n    } else {\n      return new Promise((resolve) => {\n        this[kClosedResolve] = resolve\n      })\n    }\n  }\n\n  async [kDestroy] (err) {\n    while (true) {\n      const item = this[kQueue].shift()\n      if (!item) {\n        break\n      }\n      item.handler.onError(err)\n    }\n\n    return Promise.all(this[kClients].map(c => c.destroy(err)))\n  }\n\n  [kDispatch] (opts, handler) {\n    const dispatcher = this[kGetDispatcher]()\n\n    if (!dispatcher) {\n      this[kNeedDrain] = true\n      this[kQueue].push({ opts, handler })\n      this[kQueued]++\n    } else if (!dispatcher.dispatch(opts, handler)) {\n      dispatcher[kNeedDrain] = true\n      this[kNeedDrain] = !this[kGetDispatcher]()\n    }\n\n    return !this[kNeedDrain]\n  }\n\n  [kAddClient] (client) {\n    client\n      .on('drain', this[kOnDrain])\n      .on('connect', this[kOnConnect])\n      .on('disconnect', this[kOnDisconnect])\n      .on('connectionError', this[kOnConnectionError])\n\n    this[kClients].push(client)\n\n    if (this[kNeedDrain]) {\n      process.nextTick(() => {\n        if (this[kNeedDrain]) {\n          this[kOnDrain](client[kUrl], [this, client])\n        }\n      })\n    }\n\n    return this\n  }\n\n  [kRemoveClient] (client) {\n    client.close(() => {\n      const idx = this[kClients].indexOf(client)\n      if (idx !== -1) {\n        this[kClients].splice(idx, 1)\n      }\n    })\n\n    this[kNeedDrain] = this[kClients].some(dispatcher => (\n      !dispatcher[kNeedDrain] &&\n      dispatcher.closed !== true &&\n      dispatcher.destroyed !== true\n    ))\n  }\n}\n\nmodule.exports = {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n}\n", "'use strict'\n\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kGetDispatcher\n} = require('./pool-base')\nconst Client = require('./client')\nconst {\n  InvalidArgumentError\n} = require('./core/errors')\nconst util = require('./core/util')\nconst { kUrl, kInterceptors } = require('./core/symbols')\nconst buildConnector = require('./core/connect')\n\nconst kOptions = Symbol('options')\nconst kConnections = Symbol('connections')\nconst kFactory = Symbol('factory')\n\nfunction defaultFactory (origin, opts) {\n  return new Client(origin, opts)\n}\n\nclass Pool extends PoolBase {\n  constructor (origin, {\n    connections,\n    factory = defaultFactory,\n    connect,\n    connectTimeout,\n    tls,\n    maxCachedSessions,\n    socketPath,\n    autoSelectFamily,\n    autoSelectFamilyAttemptTimeout,\n    allowH2,\n    ...options\n  } = {}) {\n    super()\n\n    if (connections != null && (!Number.isFinite(connections) || connections < 0)) {\n      throw new InvalidArgumentError('invalid connections')\n    }\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object')\n    }\n\n    if (typeof connect !== 'function') {\n      connect = buildConnector({\n        ...tls,\n        maxCachedSessions,\n        allowH2,\n        socketPath,\n        timeout: connectTimeout,\n        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),\n        ...connect\n      })\n    }\n\n    this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool)\n      ? options.interceptors.Pool\n      : []\n    this[kConnections] = connections || null\n    this[kUrl] = util.parseOrigin(origin)\n    this[kOptions] = { ...util.deepClone(options), connect, allowH2 }\n    this[kOptions].interceptors = options.interceptors\n      ? { ...options.interceptors }\n      : undefined\n    this[kFactory] = factory\n  }\n\n  [kGetDispatcher] () {\n    let dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain])\n\n    if (dispatcher) {\n      return dispatcher\n    }\n\n    if (!this[kConnections] || this[kClients].length < this[kConnections]) {\n      dispatcher = this[kFactory](this[kUrl], this[kOptions])\n      this[kAddClient](dispatcher)\n    }\n\n    return dispatcher\n  }\n}\n\nmodule.exports = Pool\n", "'use strict'\n\nconst {\n  BalancedPoolMissingUpstreamError,\n  InvalidArgumentError\n} = require('./core/errors')\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n} = require('./pool-base')\nconst Pool = require('./pool')\nconst { kUrl, kInterceptors } = require('./core/symbols')\nconst { parseOrigin } = require('./core/util')\nconst kFactory = Symbol('factory')\n\nconst kOptions = Symbol('options')\nconst kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor')\nconst kCurrentWeight = Symbol('kCurrentWeight')\nconst kIndex = Symbol('kIndex')\nconst kWeight = Symbol('kWeight')\nconst kMaxWeightPerServer = Symbol('kMaxWeightPerServer')\nconst kErrorPenalty = Symbol('kErrorPenalty')\n\nfunction getGreatestCommonDivisor (a, b) {\n  if (b === 0) return a\n  return getGreatestCommonDivisor(b, a % b)\n}\n\nfunction defaultFactory (origin, opts) {\n  return new Pool(origin, opts)\n}\n\nclass BalancedPool extends PoolBase {\n  constructor (upstreams = [], { factory = defaultFactory, ...opts } = {}) {\n    super()\n\n    this[kOptions] = opts\n    this[kIndex] = -1\n    this[kCurrentWeight] = 0\n\n    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100\n    this[kErrorPenalty] = this[kOptions].errorPenalty || 15\n\n    if (!Array.isArray(upstreams)) {\n      upstreams = [upstreams]\n    }\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool)\n      ? opts.interceptors.BalancedPool\n      : []\n    this[kFactory] = factory\n\n    for (const upstream of upstreams) {\n      this.addUpstream(upstream)\n    }\n    this._updateBalancedPoolStats()\n  }\n\n  addUpstream (upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin\n\n    if (this[kClients].find((pool) => (\n      pool[kUrl].origin === upstreamOrigin &&\n      pool.closed !== true &&\n      pool.destroyed !== true\n    ))) {\n      return this\n    }\n    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]))\n\n    this[kAddClient](pool)\n    pool.on('connect', () => {\n      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty])\n    })\n\n    pool.on('connectionError', () => {\n      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])\n      this._updateBalancedPoolStats()\n    })\n\n    pool.on('disconnect', (...args) => {\n      const err = args[2]\n      if (err && err.code === 'UND_ERR_SOCKET') {\n        // decrease the weight of the pool.\n        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])\n        this._updateBalancedPoolStats()\n      }\n    })\n\n    for (const client of this[kClients]) {\n      client[kWeight] = this[kMaxWeightPerServer]\n    }\n\n    this._updateBalancedPoolStats()\n\n    return this\n  }\n\n  _updateBalancedPoolStats () {\n    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0)\n  }\n\n  removeUpstream (upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin\n\n    const pool = this[kClients].find((pool) => (\n      pool[kUrl].origin === upstreamOrigin &&\n      pool.closed !== true &&\n      pool.destroyed !== true\n    ))\n\n    if (pool) {\n      this[kRemoveClient](pool)\n    }\n\n    return this\n  }\n\n  get upstreams () {\n    return this[kClients]\n      .filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true)\n      .map((p) => p[kUrl].origin)\n  }\n\n  [kGetDispatcher] () {\n    // We validate that pools is greater than 0,\n    // otherwise we would have to wait until an upstream\n    // is added, which might never happen.\n    if (this[kClients].length === 0) {\n      throw new BalancedPoolMissingUpstreamError()\n    }\n\n    const dispatcher = this[kClients].find(dispatcher => (\n      !dispatcher[kNeedDrain] &&\n      dispatcher.closed !== true &&\n      dispatcher.destroyed !== true\n    ))\n\n    if (!dispatcher) {\n      return\n    }\n\n    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true)\n\n    if (allClientsBusy) {\n      return\n    }\n\n    let counter = 0\n\n    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain])\n\n    while (counter++ < this[kClients].length) {\n      this[kIndex] = (this[kIndex] + 1) % this[kClients].length\n      const pool = this[kClients][this[kIndex]]\n\n      // find pool index with the largest weight\n      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {\n        maxWeightIndex = this[kIndex]\n      }\n\n      // decrease the current weight every `this[kClients].length`.\n      if (this[kIndex] === 0) {\n        // Set the current weight to the next lower weight.\n        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor]\n\n        if (this[kCurrentWeight] <= 0) {\n          this[kCurrentWeight] = this[kMaxWeightPerServer]\n        }\n      }\n      if (pool[kWeight] >= this[kCurrentWeight] && (!pool[kNeedDrain])) {\n        return pool\n      }\n    }\n\n    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight]\n    this[kIndex] = maxWeightIndex\n    return this[kClients][maxWeightIndex]\n  }\n}\n\nmodule.exports = BalancedPool\n", "'use strict'\n\n/* istanbul ignore file: only for Node 12 */\n\nconst { kConnected, kSize } = require('../core/symbols')\n\nclass CompatWeakRef {\n  constructor (value) {\n    this.value = value\n  }\n\n  deref () {\n    return this.value[kConnected] === 0 && this.value[kSize] === 0\n      ? undefined\n      : this.value\n  }\n}\n\nclass CompatFinalizer {\n  constructor (finalizer) {\n    this.finalizer = finalizer\n  }\n\n  register (dispatcher, key) {\n    if (dispatcher.on) {\n      dispatcher.on('disconnect', () => {\n        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {\n          this.finalizer(key)\n        }\n      })\n    }\n  }\n}\n\nmodule.exports = function () {\n  // FIXME: remove workaround when the Node bug is fixed\n  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\n  if (process.env.NODE_V8_COVERAGE) {\n    return {\n      WeakRef: CompatWeakRef,\n      FinalizationRegistry: CompatFinalizer\n    }\n  }\n  return {\n    WeakRef: global.WeakRef || CompatWeakRef,\n    FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer\n  }\n}\n", "'use strict'\n\nconst { InvalidArgumentError } = require('./core/errors')\nconst { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require('./core/symbols')\nconst DispatcherBase = require('./dispatcher-base')\nconst Pool = require('./pool')\nconst Client = require('./client')\nconst util = require('./core/util')\nconst createRedirectInterceptor = require('./interceptor/redirectInterceptor')\nconst { WeakRef, FinalizationRegistry } = require('./compat/dispatcher-weakref')()\n\nconst kOnConnect = Symbol('onConnect')\nconst kOnDisconnect = Symbol('onDisconnect')\nconst kOnConnectionError = Symbol('onConnectionError')\nconst kMaxRedirections = Symbol('maxRedirections')\nconst kOnDrain = Symbol('onDrain')\nconst kFactory = Symbol('factory')\nconst kFinalizer = Symbol('finalizer')\nconst kOptions = Symbol('options')\n\nfunction defaultFactory (origin, opts) {\n  return opts && opts.connections === 1\n    ? new Client(origin, opts)\n    : new Pool(origin, opts)\n}\n\nclass Agent extends DispatcherBase {\n  constructor ({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {\n    super()\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object')\n    }\n\n    if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number')\n    }\n\n    if (connect && typeof connect !== 'function') {\n      connect = { ...connect }\n    }\n\n    this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent)\n      ? options.interceptors.Agent\n      : [createRedirectInterceptor({ maxRedirections })]\n\n    this[kOptions] = { ...util.deepClone(options), connect }\n    this[kOptions].interceptors = options.interceptors\n      ? { ...options.interceptors }\n      : undefined\n    this[kMaxRedirections] = maxRedirections\n    this[kFactory] = factory\n    this[kClients] = new Map()\n    this[kFinalizer] = new FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */ key => {\n      const ref = this[kClients].get(key)\n      if (ref !== undefined && ref.deref() === undefined) {\n        this[kClients].delete(key)\n      }\n    })\n\n    const agent = this\n\n    this[kOnDrain] = (origin, targets) => {\n      agent.emit('drain', origin, [agent, ...targets])\n    }\n\n    this[kOnConnect] = (origin, targets) => {\n      agent.emit('connect', origin, [agent, ...targets])\n    }\n\n    this[kOnDisconnect] = (origin, targets, err) => {\n      agent.emit('disconnect', origin, [agent, ...targets], err)\n    }\n\n    this[kOnConnectionError] = (origin, targets, err) => {\n      agent.emit('connectionError', origin, [agent, ...targets], err)\n    }\n  }\n\n  get [kRunning] () {\n    let ret = 0\n    for (const ref of this[kClients].values()) {\n      const client = ref.deref()\n      /* istanbul ignore next: gc is undeterministic */\n      if (client) {\n        ret += client[kRunning]\n      }\n    }\n    return ret\n  }\n\n  [kDispatch] (opts, handler) {\n    let key\n    if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {\n      key = String(opts.origin)\n    } else {\n      throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.')\n    }\n\n    const ref = this[kClients].get(key)\n\n    let dispatcher = ref ? ref.deref() : null\n    if (!dispatcher) {\n      dispatcher = this[kFactory](opts.origin, this[kOptions])\n        .on('drain', this[kOnDrain])\n        .on('connect', this[kOnConnect])\n        .on('disconnect', this[kOnDisconnect])\n        .on('connectionError', this[kOnConnectionError])\n\n      this[kClients].set(key, new WeakRef(dispatcher))\n      this[kFinalizer].register(dispatcher, key)\n    }\n\n    return dispatcher.dispatch(opts, handler)\n  }\n\n  async [kClose] () {\n    const closePromises = []\n    for (const ref of this[kClients].values()) {\n      const client = ref.deref()\n      /* istanbul ignore else: gc is undeterministic */\n      if (client) {\n        closePromises.push(client.close())\n      }\n    }\n\n    await Promise.all(closePromises)\n  }\n\n  async [kDestroy] (err) {\n    const destroyPromises = []\n    for (const ref of this[kClients].values()) {\n      const client = ref.deref()\n      /* istanbul ignore else: gc is undeterministic */\n      if (client) {\n        destroyPromises.push(client.destroy(err))\n      }\n    }\n\n    await Promise.all(destroyPromises)\n  }\n}\n\nmodule.exports = Agent\n", "// Ported from https://github.com/nodejs/undici/pull/907\n\n'use strict'\n\nconst assert = require('assert')\nconst { Readable } = require('stream')\nconst { RequestAbortedError, NotSupportedError, InvalidArgumentError } = require('../core/errors')\nconst util = require('../core/util')\nconst { ReadableStreamFrom, toUSVString } = require('../core/util')\n\nlet Blob\n\nconst kConsume = Symbol('kConsume')\nconst kReading = Symbol('kReading')\nconst kBody = Symbol('kBody')\nconst kAbort = Symbol('abort')\nconst kContentType = Symbol('kContentType')\n\nconst noop = () => {}\n\nmodule.exports = class BodyReadable extends Readable {\n  constructor ({\n    resume,\n    abort,\n    contentType = '',\n    highWaterMark = 64 * 1024 // Same as nodejs fs streams.\n  }) {\n    super({\n      autoDestroy: true,\n      read: resume,\n      highWaterMark\n    })\n\n    this._readableState.dataEmitted = false\n\n    this[kAbort] = abort\n    this[kConsume] = null\n    this[kBody] = null\n    this[kContentType] = contentType\n\n    // Is stream being consumed through Readable API?\n    // This is an optimization so that we avoid checking\n    // for 'data' and 'readable' listeners in the hot path\n    // inside push().\n    this[kReading] = false\n  }\n\n  destroy (err) {\n    if (this.destroyed) {\n      // Node < 16\n      return this\n    }\n\n    if (!err && !this._readableState.endEmitted) {\n      err = new RequestAbortedError()\n    }\n\n    if (err) {\n      this[kAbort]()\n    }\n\n    return super.destroy(err)\n  }\n\n  emit (ev, ...args) {\n    if (ev === 'data') {\n      // Node < 16.7\n      this._readableState.dataEmitted = true\n    } else if (ev === 'error') {\n      // Node < 16\n      this._readableState.errorEmitted = true\n    }\n    return super.emit(ev, ...args)\n  }\n\n  on (ev, ...args) {\n    if (ev === 'data' || ev === 'readable') {\n      this[kReading] = true\n    }\n    return super.on(ev, ...args)\n  }\n\n  addListener (ev, ...args) {\n    return this.on(ev, ...args)\n  }\n\n  off (ev, ...args) {\n    const ret = super.off(ev, ...args)\n    if (ev === 'data' || ev === 'readable') {\n      this[kReading] = (\n        this.listenerCount('data') > 0 ||\n        this.listenerCount('readable') > 0\n      )\n    }\n    return ret\n  }\n\n  removeListener (ev, ...args) {\n    return this.off(ev, ...args)\n  }\n\n  push (chunk) {\n    if (this[kConsume] && chunk !== null && this.readableLength === 0) {\n      consumePush(this[kConsume], chunk)\n      return this[kReading] ? super.push(chunk) : true\n    }\n    return super.push(chunk)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-text\n  async text () {\n    return consume(this, 'text')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-json\n  async json () {\n    return consume(this, 'json')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-blob\n  async blob () {\n    return consume(this, 'blob')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer\n  async arrayBuffer () {\n    return consume(this, 'arrayBuffer')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-formdata\n  async formData () {\n    // TODO: Implement.\n    throw new NotSupportedError()\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-bodyused\n  get bodyUsed () {\n    return util.isDisturbed(this)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-body\n  get body () {\n    if (!this[kBody]) {\n      this[kBody] = ReadableStreamFrom(this)\n      if (this[kConsume]) {\n        // TODO: Is this the best way to force a lock?\n        this[kBody].getReader() // Ensure stream is locked.\n        assert(this[kBody].locked)\n      }\n    }\n    return this[kBody]\n  }\n\n  dump (opts) {\n    let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144\n    const signal = opts && opts.signal\n\n    if (signal) {\n      try {\n        if (typeof signal !== 'object' || !('aborted' in signal)) {\n          throw new InvalidArgumentError('signal must be an AbortSignal')\n        }\n        util.throwIfAborted(signal)\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n\n    if (this.closed) {\n      return Promise.resolve(null)\n    }\n\n    return new Promise((resolve, reject) => {\n      const signalListenerCleanup = signal\n        ? util.addAbortListener(signal, () => {\n          this.destroy()\n        })\n        : noop\n\n      this\n        .on('close', function () {\n          signalListenerCleanup()\n          if (signal && signal.aborted) {\n            reject(signal.reason || Object.assign(new Error('The operation was aborted'), { name: 'AbortError' }))\n          } else {\n            resolve(null)\n          }\n        })\n        .on('error', noop)\n        .on('data', function (chunk) {\n          limit -= chunk.length\n          if (limit <= 0) {\n            this.destroy()\n          }\n        })\n        .resume()\n    })\n  }\n}\n\n// https://streams.spec.whatwg.org/#readablestream-locked\nfunction isLocked (self) {\n  // Consume is an implicit lock.\n  return (self[kBody] && self[kBody].locked === true) || self[kConsume]\n}\n\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction isUnusable (self) {\n  return util.isDisturbed(self) || isLocked(self)\n}\n\nasync function consume (stream, type) {\n  if (isUnusable(stream)) {\n    throw new TypeError('unusable')\n  }\n\n  assert(!stream[kConsume])\n\n  return new Promise((resolve, reject) => {\n    stream[kConsume] = {\n      type,\n      stream,\n      resolve,\n      reject,\n      length: 0,\n      body: []\n    }\n\n    stream\n      .on('error', function (err) {\n        consumeFinish(this[kConsume], err)\n      })\n      .on('close', function () {\n        if (this[kConsume].body !== null) {\n          consumeFinish(this[kConsume], new RequestAbortedError())\n        }\n      })\n\n    process.nextTick(consumeStart, stream[kConsume])\n  })\n}\n\nfunction consumeStart (consume) {\n  if (consume.body === null) {\n    return\n  }\n\n  const { _readableState: state } = consume.stream\n\n  for (const chunk of state.buffer) {\n    consumePush(consume, chunk)\n  }\n\n  if (state.endEmitted) {\n    consumeEnd(this[kConsume])\n  } else {\n    consume.stream.on('end', function () {\n      consumeEnd(this[kConsume])\n    })\n  }\n\n  consume.stream.resume()\n\n  while (consume.stream.read() != null) {\n    // Loop\n  }\n}\n\nfunction consumeEnd (consume) {\n  const { type, body, resolve, stream, length } = consume\n\n  try {\n    if (type === 'text') {\n      resolve(toUSVString(Buffer.concat(body)))\n    } else if (type === 'json') {\n      resolve(JSON.parse(Buffer.concat(body)))\n    } else if (type === 'arrayBuffer') {\n      const dst = new Uint8Array(length)\n\n      let pos = 0\n      for (const buf of body) {\n        dst.set(buf, pos)\n        pos += buf.byteLength\n      }\n\n      resolve(dst.buffer)\n    } else if (type === 'blob') {\n      if (!Blob) {\n        Blob = require('buffer').Blob\n      }\n      resolve(new Blob(body, { type: stream[kContentType] }))\n    }\n\n    consumeFinish(consume)\n  } catch (err) {\n    stream.destroy(err)\n  }\n}\n\nfunction consumePush (consume, chunk) {\n  consume.length += chunk.length\n  consume.body.push(chunk)\n}\n\nfunction consumeFinish (consume, err) {\n  if (consume.body === null) {\n    return\n  }\n\n  if (err) {\n    consume.reject(err)\n  } else {\n    consume.resolve()\n  }\n\n  consume.type = null\n  consume.stream = null\n  consume.resolve = null\n  consume.reject = null\n  consume.length = 0\n  consume.body = null\n}\n", "const assert = require('assert')\nconst {\n  ResponseStatusCodeError\n} = require('../core/errors')\nconst { toUSVString } = require('../core/util')\n\nasync function getResolveErrorBodyCallback ({ callback, body, contentType, statusCode, statusMessage, headers }) {\n  assert(body)\n\n  let chunks = []\n  let limit = 0\n\n  for await (const chunk of body) {\n    chunks.push(chunk)\n    limit += chunk.length\n    if (limit > 128 * 1024) {\n      chunks = null\n      break\n    }\n  }\n\n  if (statusCode === 204 || !contentType || !chunks) {\n    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))\n    return\n  }\n\n  try {\n    if (contentType.startsWith('application/json')) {\n      const payload = JSON.parse(toUSVString(Buffer.concat(chunks)))\n      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))\n      return\n    }\n\n    if (contentType.startsWith('text/')) {\n      const payload = toUSVString(Buffer.concat(chunks))\n      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))\n      return\n    }\n  } catch (err) {\n    // Process in a fallback if error\n  }\n\n  process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))\n}\n\nmodule.exports = { getResolveErrorBodyCallback }\n", "const { addAbortListener } = require('../core/util')\nconst { RequestAbortedError } = require('../core/errors')\n\nconst kListener = Symbol('kListener')\nconst kSignal = Symbol('kSignal')\n\nfunction abort (self) {\n  if (self.abort) {\n    self.abort()\n  } else {\n    self.onError(new RequestAbortedError())\n  }\n}\n\nfunction addSignal (self, signal) {\n  self[kSignal] = null\n  self[kListener] = null\n\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    abort(self)\n    return\n  }\n\n  self[kSignal] = signal\n  self[kListener] = () => {\n    abort(self)\n  }\n\n  addAbortListener(self[kSignal], self[kListener])\n}\n\nfunction removeSignal (self) {\n  if (!self[kSignal]) {\n    return\n  }\n\n  if ('removeEventListener' in self[kSignal]) {\n    self[kSignal].removeEventListener('abort', self[kListener])\n  } else {\n    self[kSignal].removeListener('abort', self[kListener])\n  }\n\n  self[kSignal] = null\n  self[kListener] = null\n}\n\nmodule.exports = {\n  addSignal,\n  removeSignal\n}\n", "'use strict'\n\nconst Readable = require('./readable')\nconst {\n  InvalidArgumentError,\n  RequestAbortedError\n} = require('../core/errors')\nconst util = require('../core/util')\nconst { getResolveErrorBodyCallback } = require('./util')\nconst { AsyncResource } = require('async_hooks')\nconst { addSignal, removeSignal } = require('./abort-signal')\n\nclass RequestHandler extends AsyncResource {\n  constructor (opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts\n\n    try {\n      if (typeof callback !== 'function') {\n        throw new InvalidArgumentError('invalid callback')\n      }\n\n      if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {\n        throw new InvalidArgumentError('invalid highWaterMark')\n      }\n\n      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n      }\n\n      if (method === 'CONNECT') {\n        throw new InvalidArgumentError('invalid method')\n      }\n\n      if (onInfo && typeof onInfo !== 'function') {\n        throw new InvalidArgumentError('invalid onInfo callback')\n      }\n\n      super('UNDICI_REQUEST')\n    } catch (err) {\n      if (util.isStream(body)) {\n        util.destroy(body.on('error', util.nop), err)\n      }\n      throw err\n    }\n\n    this.responseHeaders = responseHeaders || null\n    this.opaque = opaque || null\n    this.callback = callback\n    this.res = null\n    this.abort = null\n    this.body = body\n    this.trailers = {}\n    this.context = null\n    this.onInfo = onInfo || null\n    this.throwOnError = throwOnError\n    this.highWaterMark = highWaterMark\n\n    if (util.isStream(body)) {\n      body.on('error', (err) => {\n        this.onError(err)\n      })\n    }\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders (statusCode, rawHeaders, resume, statusMessage) {\n    const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this\n\n    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        this.onInfo({ statusCode, headers })\n      }\n      return\n    }\n\n    const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers\n    const contentType = parsedHeaders['content-type']\n    const body = new Readable({ resume, abort, contentType, highWaterMark })\n\n    this.callback = null\n    this.res = body\n    if (callback !== null) {\n      if (this.throwOnError && statusCode >= 400) {\n        this.runInAsyncScope(getResolveErrorBodyCallback, null,\n          { callback, body, contentType, statusCode, statusMessage, headers }\n        )\n      } else {\n        this.runInAsyncScope(callback, null, null, {\n          statusCode,\n          headers,\n          trailers: this.trailers,\n          opaque,\n          body,\n          context\n        })\n      }\n    }\n  }\n\n  onData (chunk) {\n    const { res } = this\n    return res.push(chunk)\n  }\n\n  onComplete (trailers) {\n    const { res } = this\n\n    removeSignal(this)\n\n    util.parseHeaders(trailers, this.trailers)\n\n    res.push(null)\n  }\n\n  onError (err) {\n    const { res, callback, body, opaque } = this\n\n    removeSignal(this)\n\n    if (callback) {\n      // TODO: Does this need queueMicrotask?\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n\n    if (res) {\n      this.res = null\n      // Ensure all queued handlers are invoked before destroying res.\n      queueMicrotask(() => {\n        util.destroy(res, err)\n      })\n    }\n\n    if (body) {\n      this.body = null\n      util.destroy(body, err)\n    }\n  }\n}\n\nfunction request (opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      request.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    this.dispatch(opts, new RequestHandler(opts, callback))\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = request\nmodule.exports.RequestHandler = RequestHandler\n", "'use strict'\n\nconst { finished, PassThrough } = require('stream')\nconst {\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError\n} = require('../core/errors')\nconst util = require('../core/util')\nconst { getResolveErrorBodyCallback } = require('./util')\nconst { AsyncResource } = require('async_hooks')\nconst { addSignal, removeSignal } = require('./abort-signal')\n\nclass StreamHandler extends AsyncResource {\n  constructor (opts, factory, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts\n\n    try {\n      if (typeof callback !== 'function') {\n        throw new InvalidArgumentError('invalid callback')\n      }\n\n      if (typeof factory !== 'function') {\n        throw new InvalidArgumentError('invalid factory')\n      }\n\n      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n      }\n\n      if (method === 'CONNECT') {\n        throw new InvalidArgumentError('invalid method')\n      }\n\n      if (onInfo && typeof onInfo !== 'function') {\n        throw new InvalidArgumentError('invalid onInfo callback')\n      }\n\n      super('UNDICI_STREAM')\n    } catch (err) {\n      if (util.isStream(body)) {\n        util.destroy(body.on('error', util.nop), err)\n      }\n      throw err\n    }\n\n    this.responseHeaders = responseHeaders || null\n    this.opaque = opaque || null\n    this.factory = factory\n    this.callback = callback\n    this.res = null\n    this.abort = null\n    this.context = null\n    this.trailers = null\n    this.body = body\n    this.onInfo = onInfo || null\n    this.throwOnError = throwOnError || false\n\n    if (util.isStream(body)) {\n      body.on('error', (err) => {\n        this.onError(err)\n      })\n    }\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders (statusCode, rawHeaders, resume, statusMessage) {\n    const { factory, opaque, context, callback, responseHeaders } = this\n\n    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        this.onInfo({ statusCode, headers })\n      }\n      return\n    }\n\n    this.factory = null\n\n    let res\n\n    if (this.throwOnError && statusCode >= 400) {\n      const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers\n      const contentType = parsedHeaders['content-type']\n      res = new PassThrough()\n\n      this.callback = null\n      this.runInAsyncScope(getResolveErrorBodyCallback, null,\n        { callback, body: res, contentType, statusCode, statusMessage, headers }\n      )\n    } else {\n      if (factory === null) {\n        return\n      }\n\n      res = this.runInAsyncScope(factory, null, {\n        statusCode,\n        headers,\n        opaque,\n        context\n      })\n\n      if (\n        !res ||\n        typeof res.write !== 'function' ||\n        typeof res.end !== 'function' ||\n        typeof res.on !== 'function'\n      ) {\n        throw new InvalidReturnValueError('expected Writable')\n      }\n\n      // TODO: Avoid finished. It registers an unnecessary amount of listeners.\n      finished(res, { readable: false }, (err) => {\n        const { callback, res, opaque, trailers, abort } = this\n\n        this.res = null\n        if (err || !res.readable) {\n          util.destroy(res, err)\n        }\n\n        this.callback = null\n        this.runInAsyncScope(callback, null, err || null, { opaque, trailers })\n\n        if (err) {\n          abort()\n        }\n      })\n    }\n\n    res.on('drain', resume)\n\n    this.res = res\n\n    const needDrain = res.writableNeedDrain !== undefined\n      ? res.writableNeedDrain\n      : res._writableState && res._writableState.needDrain\n\n    return needDrain !== true\n  }\n\n  onData (chunk) {\n    const { res } = this\n\n    return res ? res.write(chunk) : true\n  }\n\n  onComplete (trailers) {\n    const { res } = this\n\n    removeSignal(this)\n\n    if (!res) {\n      return\n    }\n\n    this.trailers = util.parseHeaders(trailers)\n\n    res.end()\n  }\n\n  onError (err) {\n    const { res, callback, opaque, body } = this\n\n    removeSignal(this)\n\n    this.factory = null\n\n    if (res) {\n      this.res = null\n      util.destroy(res, err)\n    } else if (callback) {\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n\n    if (body) {\n      this.body = null\n      util.destroy(body, err)\n    }\n  }\n}\n\nfunction stream (opts, factory, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      stream.call(this, opts, factory, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    this.dispatch(opts, new StreamHandler(opts, factory, callback))\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = stream\n", "'use strict'\n\nconst {\n  Readable,\n  Duplex,\n  PassThrough\n} = require('stream')\nconst {\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError\n} = require('../core/errors')\nconst util = require('../core/util')\nconst { AsyncResource } = require('async_hooks')\nconst { addSignal, removeSignal } = require('./abort-signal')\nconst assert = require('assert')\n\nconst kResume = Symbol('resume')\n\nclass PipelineRequest extends Readable {\n  constructor () {\n    super({ autoDestroy: true })\n\n    this[kResume] = null\n  }\n\n  _read () {\n    const { [kResume]: resume } = this\n\n    if (resume) {\n      this[kResume] = null\n      resume()\n    }\n  }\n\n  _destroy (err, callback) {\n    this._read()\n\n    callback(err)\n  }\n}\n\nclass PipelineResponse extends Readable {\n  constructor (resume) {\n    super({ autoDestroy: true })\n    this[kResume] = resume\n  }\n\n  _read () {\n    this[kResume]()\n  }\n\n  _destroy (err, callback) {\n    if (!err && !this._readableState.endEmitted) {\n      err = new RequestAbortedError()\n    }\n\n    callback(err)\n  }\n}\n\nclass PipelineHandler extends AsyncResource {\n  constructor (opts, handler) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (typeof handler !== 'function') {\n      throw new InvalidArgumentError('invalid handler')\n    }\n\n    const { signal, method, opaque, onInfo, responseHeaders } = opts\n\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n    }\n\n    if (method === 'CONNECT') {\n      throw new InvalidArgumentError('invalid method')\n    }\n\n    if (onInfo && typeof onInfo !== 'function') {\n      throw new InvalidArgumentError('invalid onInfo callback')\n    }\n\n    super('UNDICI_PIPELINE')\n\n    this.opaque = opaque || null\n    this.responseHeaders = responseHeaders || null\n    this.handler = handler\n    this.abort = null\n    this.context = null\n    this.onInfo = onInfo || null\n\n    this.req = new PipelineRequest().on('error', util.nop)\n\n    this.ret = new Duplex({\n      readableObjectMode: opts.objectMode,\n      autoDestroy: true,\n      read: () => {\n        const { body } = this\n\n        if (body && body.resume) {\n          body.resume()\n        }\n      },\n      write: (chunk, encoding, callback) => {\n        const { req } = this\n\n        if (req.push(chunk, encoding) || req._readableState.destroyed) {\n          callback()\n        } else {\n          req[kResume] = callback\n        }\n      },\n      destroy: (err, callback) => {\n        const { body, req, res, ret, abort } = this\n\n        if (!err && !ret._readableState.endEmitted) {\n          err = new RequestAbortedError()\n        }\n\n        if (abort && err) {\n          abort()\n        }\n\n        util.destroy(body, err)\n        util.destroy(req, err)\n        util.destroy(res, err)\n\n        removeSignal(this)\n\n        callback(err)\n      }\n    }).on('prefinish', () => {\n      const { req } = this\n\n      // Node < 15 does not call _final in same tick.\n      req.push(null)\n    })\n\n    this.res = null\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    const { ret, res } = this\n\n    assert(!res, 'pipeline cannot be retried')\n\n    if (ret.destroyed) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders (statusCode, rawHeaders, resume) {\n    const { opaque, handler, context } = this\n\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n        this.onInfo({ statusCode, headers })\n      }\n      return\n    }\n\n    this.res = new PipelineResponse(resume)\n\n    let body\n    try {\n      this.handler = null\n      const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n      body = this.runInAsyncScope(handler, null, {\n        statusCode,\n        headers,\n        opaque,\n        body: this.res,\n        context\n      })\n    } catch (err) {\n      this.res.on('error', util.nop)\n      throw err\n    }\n\n    if (!body || typeof body.on !== 'function') {\n      throw new InvalidReturnValueError('expected Readable')\n    }\n\n    body\n      .on('data', (chunk) => {\n        const { ret, body } = this\n\n        if (!ret.push(chunk) && body.pause) {\n          body.pause()\n        }\n      })\n      .on('error', (err) => {\n        const { ret } = this\n\n        util.destroy(ret, err)\n      })\n      .on('end', () => {\n        const { ret } = this\n\n        ret.push(null)\n      })\n      .on('close', () => {\n        const { ret } = this\n\n        if (!ret._readableState.ended) {\n          util.destroy(ret, new RequestAbortedError())\n        }\n      })\n\n    this.body = body\n  }\n\n  onData (chunk) {\n    const { res } = this\n    return res.push(chunk)\n  }\n\n  onComplete (trailers) {\n    const { res } = this\n    res.push(null)\n  }\n\n  onError (err) {\n    const { ret } = this\n    this.handler = null\n    util.destroy(ret, err)\n  }\n}\n\nfunction pipeline (opts, handler) {\n  try {\n    const pipelineHandler = new PipelineHandler(opts, handler)\n    this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler)\n    return pipelineHandler.ret\n  } catch (err) {\n    return new PassThrough().destroy(err)\n  }\n}\n\nmodule.exports = pipeline\n", "'use strict'\n\nconst { InvalidArgumentError, RequestAbortedError, SocketError } = require('../core/errors')\nconst { AsyncResource } = require('async_hooks')\nconst util = require('../core/util')\nconst { addSignal, removeSignal } = require('./abort-signal')\nconst assert = require('assert')\n\nclass UpgradeHandler extends AsyncResource {\n  constructor (opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    const { signal, opaque, responseHeaders } = opts\n\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n    }\n\n    super('UNDICI_UPGRADE')\n\n    this.responseHeaders = responseHeaders || null\n    this.opaque = opaque || null\n    this.callback = callback\n    this.abort = null\n    this.context = null\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = null\n  }\n\n  onHeaders () {\n    throw new SocketError('bad upgrade', null)\n  }\n\n  onUpgrade (statusCode, rawHeaders, socket) {\n    const { callback, opaque, context } = this\n\n    assert.strictEqual(statusCode, 101)\n\n    removeSignal(this)\n\n    this.callback = null\n    const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n    this.runInAsyncScope(callback, null, null, {\n      headers,\n      socket,\n      opaque,\n      context\n    })\n  }\n\n  onError (err) {\n    const { callback, opaque } = this\n\n    removeSignal(this)\n\n    if (callback) {\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n  }\n}\n\nfunction upgrade (opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      upgrade.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    const upgradeHandler = new UpgradeHandler(opts, callback)\n    this.dispatch({\n      ...opts,\n      method: opts.method || 'GET',\n      upgrade: opts.protocol || 'Websocket'\n    }, upgradeHandler)\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = upgrade\n", "'use strict'\n\nconst { AsyncResource } = require('async_hooks')\nconst { InvalidArgumentError, RequestAbortedError, SocketError } = require('../core/errors')\nconst util = require('../core/util')\nconst { addSignal, removeSignal } = require('./abort-signal')\n\nclass ConnectHandler extends AsyncResource {\n  constructor (opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    const { signal, opaque, responseHeaders } = opts\n\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n    }\n\n    super('UNDICI_CONNECT')\n\n    this.opaque = opaque || null\n    this.responseHeaders = responseHeaders || null\n    this.callback = callback\n    this.abort = null\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders () {\n    throw new SocketError('bad connect', null)\n  }\n\n  onUpgrade (statusCode, rawHeaders, socket) {\n    const { callback, opaque, context } = this\n\n    removeSignal(this)\n\n    this.callback = null\n\n    let headers = rawHeaders\n    // Indicates is an HTTP2Session\n    if (headers != null) {\n      headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n    }\n\n    this.runInAsyncScope(callback, null, null, {\n      statusCode,\n      headers,\n      socket,\n      opaque,\n      context\n    })\n  }\n\n  onError (err) {\n    const { callback, opaque } = this\n\n    removeSignal(this)\n\n    if (callback) {\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n  }\n}\n\nfunction connect (opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      connect.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    const connectHandler = new ConnectHandler(opts, callback)\n    this.dispatch({ ...opts, method: 'CONNECT' }, connectHandler)\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = connect\n", "'use strict'\n\nmodule.exports.request = require('./api-request')\nmodule.exports.stream = require('./api-stream')\nmodule.exports.pipeline = require('./api-pipeline')\nmodule.exports.upgrade = require('./api-upgrade')\nmodule.exports.connect = require('./api-connect')\n", "'use strict'\n\nconst { UndiciError } = require('../core/errors')\n\nclass MockNotMatchedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, MockNotMatchedError)\n    this.name = 'MockNotMatchedError'\n    this.message = message || 'The request does not match any registered mock dispatches'\n    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED'\n  }\n}\n\nmodule.exports = {\n  MockNotMatchedError\n}\n", "'use strict'\n\nmodule.exports = {\n  kAgent: Symbol('agent'),\n  kOptions: Symbol('options'),\n  kFactory: Symbol('factory'),\n  kDispatches: Symbol('dispatches'),\n  kDispatchKey: Symbol('dispatch key'),\n  kDefaultHeaders: Symbol('default headers'),\n  kDefaultTrailers: Symbol('default trailers'),\n  kContentLength: Symbol('content length'),\n  kMockAgent: Symbol('mock agent'),\n  kMockAgentSet: Symbol('mock agent set'),\n  kMockAgentGet: Symbol('mock agent get'),\n  kMockDispatch: Symbol('mock dispatch'),\n  kClose: Symbol('close'),\n  kOriginalClose: Symbol('original agent close'),\n  kOrigin: Symbol('origin'),\n  kIsMockActive: Symbol('is mock active'),\n  kNetConnect: Symbol('net connect'),\n  kGetNetConnect: Symbol('get net connect'),\n  kConnected: Symbol('connected')\n}\n", "'use strict'\n\nconst { MockNotMatchedError } = require('./mock-errors')\nconst {\n  kDispatches,\n  kMockAgent,\n  kOriginalDispatch,\n  kOrigin,\n  kGetNetConnect\n} = require('./mock-symbols')\nconst { buildURL, nop } = require('../core/util')\nconst { STATUS_CODES } = require('http')\nconst {\n  types: {\n    isPromise\n  }\n} = require('util')\n\nfunction matchValue (match, value) {\n  if (typeof match === 'string') {\n    return match === value\n  }\n  if (match instanceof RegExp) {\n    return match.test(value)\n  }\n  if (typeof match === 'function') {\n    return match(value) === true\n  }\n  return false\n}\n\nfunction lowerCaseEntries (headers) {\n  return Object.fromEntries(\n    Object.entries(headers).map(([headerName, headerValue]) => {\n      return [headerName.toLocaleLowerCase(), headerValue]\n    })\n  )\n}\n\n/**\n * @param {import('../../index').Headers|string[]|Record<string, string>} headers\n * @param {string} key\n */\nfunction getHeaderByName (headers, key) {\n  if (Array.isArray(headers)) {\n    for (let i = 0; i < headers.length; i += 2) {\n      if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {\n        return headers[i + 1]\n      }\n    }\n\n    return undefined\n  } else if (typeof headers.get === 'function') {\n    return headers.get(key)\n  } else {\n    return lowerCaseEntries(headers)[key.toLocaleLowerCase()]\n  }\n}\n\n/** @param {string[]} headers */\nfunction buildHeadersFromArray (headers) { // fetch HeadersList\n  const clone = headers.slice()\n  const entries = []\n  for (let index = 0; index < clone.length; index += 2) {\n    entries.push([clone[index], clone[index + 1]])\n  }\n  return Object.fromEntries(entries)\n}\n\nfunction matchHeaders (mockDispatch, headers) {\n  if (typeof mockDispatch.headers === 'function') {\n    if (Array.isArray(headers)) { // fetch HeadersList\n      headers = buildHeadersFromArray(headers)\n    }\n    return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {})\n  }\n  if (typeof mockDispatch.headers === 'undefined') {\n    return true\n  }\n  if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {\n    return false\n  }\n\n  for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {\n    const headerValue = getHeaderByName(headers, matchHeaderName)\n\n    if (!matchValue(matchHeaderValue, headerValue)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction safeUrl (path) {\n  if (typeof path !== 'string') {\n    return path\n  }\n\n  const pathSegments = path.split('?')\n\n  if (pathSegments.length !== 2) {\n    return path\n  }\n\n  const qp = new URLSearchParams(pathSegments.pop())\n  qp.sort()\n  return [...pathSegments, qp.toString()].join('?')\n}\n\nfunction matchKey (mockDispatch, { path, method, body, headers }) {\n  const pathMatch = matchValue(mockDispatch.path, path)\n  const methodMatch = matchValue(mockDispatch.method, method)\n  const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true\n  const headersMatch = matchHeaders(mockDispatch, headers)\n  return pathMatch && methodMatch && bodyMatch && headersMatch\n}\n\nfunction getResponseData (data) {\n  if (Buffer.isBuffer(data)) {\n    return data\n  } else if (typeof data === 'object') {\n    return JSON.stringify(data)\n  } else {\n    return data.toString()\n  }\n}\n\nfunction getMockDispatch (mockDispatches, key) {\n  const basePath = key.query ? buildURL(key.path, key.query) : key.path\n  const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath\n\n  // Match path\n  let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath))\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`)\n  }\n\n  // Match method\n  matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method))\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`)\n  }\n\n  // Match body\n  matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== 'undefined' ? matchValue(body, key.body) : true)\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`)\n  }\n\n  // Match headers\n  matchedMockDispatches = matchedMockDispatches.filter((mockDispatch) => matchHeaders(mockDispatch, key.headers))\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers}'`)\n  }\n\n  return matchedMockDispatches[0]\n}\n\nfunction addMockDispatch (mockDispatches, key, data) {\n  const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false }\n  const replyData = typeof data === 'function' ? { callback: data } : { ...data }\n  const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } }\n  mockDispatches.push(newMockDispatch)\n  return newMockDispatch\n}\n\nfunction deleteMockDispatch (mockDispatches, key) {\n  const index = mockDispatches.findIndex(dispatch => {\n    if (!dispatch.consumed) {\n      return false\n    }\n    return matchKey(dispatch, key)\n  })\n  if (index !== -1) {\n    mockDispatches.splice(index, 1)\n  }\n}\n\nfunction buildKey (opts) {\n  const { path, method, body, headers, query } = opts\n  return {\n    path,\n    method,\n    body,\n    headers,\n    query\n  }\n}\n\nfunction generateKeyValues (data) {\n  return Object.entries(data).reduce((keyValuePairs, [key, value]) => [\n    ...keyValuePairs,\n    Buffer.from(`${key}`),\n    Array.isArray(value) ? value.map(x => Buffer.from(`${x}`)) : Buffer.from(`${value}`)\n  ], [])\n}\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n * @param {number} statusCode\n */\nfunction getStatusText (statusCode) {\n  return STATUS_CODES[statusCode] || 'unknown'\n}\n\nasync function getResponse (body) {\n  const buffers = []\n  for await (const data of body) {\n    buffers.push(data)\n  }\n  return Buffer.concat(buffers).toString('utf8')\n}\n\n/**\n * Mock dispatch function used to simulate undici dispatches\n */\nfunction mockDispatch (opts, handler) {\n  // Get mock dispatch from built key\n  const key = buildKey(opts)\n  const mockDispatch = getMockDispatch(this[kDispatches], key)\n\n  mockDispatch.timesInvoked++\n\n  // Here's where we resolve a callback if a callback is present for the dispatch data.\n  if (mockDispatch.data.callback) {\n    mockDispatch.data = { ...mockDispatch.data, ...mockDispatch.data.callback(opts) }\n  }\n\n  // Parse mockDispatch data\n  const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch\n  const { timesInvoked, times } = mockDispatch\n\n  // If it's used up and not persistent, mark as consumed\n  mockDispatch.consumed = !persist && timesInvoked >= times\n  mockDispatch.pending = timesInvoked < times\n\n  // If specified, trigger dispatch error\n  if (error !== null) {\n    deleteMockDispatch(this[kDispatches], key)\n    handler.onError(error)\n    return true\n  }\n\n  // Handle the request with a delay if necessary\n  if (typeof delay === 'number' && delay > 0) {\n    setTimeout(() => {\n      handleReply(this[kDispatches])\n    }, delay)\n  } else {\n    handleReply(this[kDispatches])\n  }\n\n  function handleReply (mockDispatches, _data = data) {\n    // fetch's HeadersList is a 1D string array\n    const optsHeaders = Array.isArray(opts.headers)\n      ? buildHeadersFromArray(opts.headers)\n      : opts.headers\n    const body = typeof _data === 'function'\n      ? _data({ ...opts, headers: optsHeaders })\n      : _data\n\n    // util.types.isPromise is likely needed for jest.\n    if (isPromise(body)) {\n      // If handleReply is asynchronous, throwing an error\n      // in the callback will reject the promise, rather than\n      // synchronously throw the error, which breaks some tests.\n      // Rather, we wait for the callback to resolve if it is a\n      // promise, and then re-run handleReply with the new body.\n      body.then((newData) => handleReply(mockDispatches, newData))\n      return\n    }\n\n    const responseData = getResponseData(body)\n    const responseHeaders = generateKeyValues(headers)\n    const responseTrailers = generateKeyValues(trailers)\n\n    handler.abort = nop\n    handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode))\n    handler.onData(Buffer.from(responseData))\n    handler.onComplete(responseTrailers)\n    deleteMockDispatch(mockDispatches, key)\n  }\n\n  function resume () {}\n\n  return true\n}\n\nfunction buildMockDispatch () {\n  const agent = this[kMockAgent]\n  const origin = this[kOrigin]\n  const originalDispatch = this[kOriginalDispatch]\n\n  return function dispatch (opts, handler) {\n    if (agent.isMockActive) {\n      try {\n        mockDispatch.call(this, opts, handler)\n      } catch (error) {\n        if (error instanceof MockNotMatchedError) {\n          const netConnect = agent[kGetNetConnect]()\n          if (netConnect === false) {\n            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`)\n          }\n          if (checkNetConnect(netConnect, origin)) {\n            originalDispatch.call(this, opts, handler)\n          } else {\n            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`)\n          }\n        } else {\n          throw error\n        }\n      }\n    } else {\n      originalDispatch.call(this, opts, handler)\n    }\n  }\n}\n\nfunction checkNetConnect (netConnect, origin) {\n  const url = new URL(origin)\n  if (netConnect === true) {\n    return true\n  } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {\n    return true\n  }\n  return false\n}\n\nfunction buildMockOptions (opts) {\n  if (opts) {\n    const { agent, ...mockOptions } = opts\n    return mockOptions\n  }\n}\n\nmodule.exports = {\n  getResponseData,\n  getMockDispatch,\n  addMockDispatch,\n  deleteMockDispatch,\n  buildKey,\n  generateKeyValues,\n  matchValue,\n  getResponse,\n  getStatusText,\n  mockDispatch,\n  buildMockDispatch,\n  checkNetConnect,\n  buildMockOptions,\n  getHeaderByName\n}\n", "'use strict'\n\nconst { getResponseData, buildKey, addMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kDispatchKey,\n  kDefaultHeaders,\n  kDefaultTrailers,\n  kContentLength,\n  kMockDispatch\n} = require('./mock-symbols')\nconst { InvalidArgumentError } = require('../core/errors')\nconst { buildURL } = require('../core/util')\n\n/**\n * Defines the scope API for an interceptor reply\n */\nclass MockScope {\n  constructor (mockDispatch) {\n    this[kMockDispatch] = mockDispatch\n  }\n\n  /**\n   * Delay a reply by a set amount in ms.\n   */\n  delay (waitInMs) {\n    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].delay = waitInMs\n    return this\n  }\n\n  /**\n   * For a defined reply, never mark as consumed.\n   */\n  persist () {\n    this[kMockDispatch].persist = true\n    return this\n  }\n\n  /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */\n  times (repeatTimes) {\n    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].times = repeatTimes\n    return this\n  }\n}\n\n/**\n * Defines an interceptor for a Mock\n */\nclass MockInterceptor {\n  constructor (opts, mockDispatches) {\n    if (typeof opts !== 'object') {\n      throw new InvalidArgumentError('opts must be an object')\n    }\n    if (typeof opts.path === 'undefined') {\n      throw new InvalidArgumentError('opts.path must be defined')\n    }\n    if (typeof opts.method === 'undefined') {\n      opts.method = 'GET'\n    }\n    // See https://github.com/nodejs/undici/issues/1245\n    // As per RFC 3986, clients are not supposed to send URI\n    // fragments to servers when they retrieve a document,\n    if (typeof opts.path === 'string') {\n      if (opts.query) {\n        opts.path = buildURL(opts.path, opts.query)\n      } else {\n        // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811\n        const parsedURL = new URL(opts.path, 'data://')\n        opts.path = parsedURL.pathname + parsedURL.search\n      }\n    }\n    if (typeof opts.method === 'string') {\n      opts.method = opts.method.toUpperCase()\n    }\n\n    this[kDispatchKey] = buildKey(opts)\n    this[kDispatches] = mockDispatches\n    this[kDefaultHeaders] = {}\n    this[kDefaultTrailers] = {}\n    this[kContentLength] = false\n  }\n\n  createMockScopeDispatchData (statusCode, data, responseOptions = {}) {\n    const responseData = getResponseData(data)\n    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {}\n    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers }\n    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers }\n\n    return { statusCode, data, headers, trailers }\n  }\n\n  validateReplyParameters (statusCode, data, responseOptions) {\n    if (typeof statusCode === 'undefined') {\n      throw new InvalidArgumentError('statusCode must be defined')\n    }\n    if (typeof data === 'undefined') {\n      throw new InvalidArgumentError('data must be defined')\n    }\n    if (typeof responseOptions !== 'object') {\n      throw new InvalidArgumentError('responseOptions must be an object')\n    }\n  }\n\n  /**\n   * Mock an undici request with a defined reply.\n   */\n  reply (replyData) {\n    // Values of reply aren't available right now as they\n    // can only be available when the reply callback is invoked.\n    if (typeof replyData === 'function') {\n      // We'll first wrap the provided callback in another function,\n      // this function will properly resolve the data from the callback\n      // when invoked.\n      const wrappedDefaultsCallback = (opts) => {\n        // Our reply options callback contains the parameter for statusCode, data and options.\n        const resolvedData = replyData(opts)\n\n        // Check if it is in the right format\n        if (typeof resolvedData !== 'object') {\n          throw new InvalidArgumentError('reply options callback must return an object')\n        }\n\n        const { statusCode, data = '', responseOptions = {} } = resolvedData\n        this.validateReplyParameters(statusCode, data, responseOptions)\n        // Since the values can be obtained immediately we return them\n        // from this higher order function that will be resolved later.\n        return {\n          ...this.createMockScopeDispatchData(statusCode, data, responseOptions)\n        }\n      }\n\n      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback)\n      return new MockScope(newMockDispatch)\n    }\n\n    // We can have either one or three parameters, if we get here,\n    // we should have 1-3 parameters. So we spread the arguments of\n    // this function to obtain the parameters, since replyData will always\n    // just be the statusCode.\n    const [statusCode, data = '', responseOptions = {}] = [...arguments]\n    this.validateReplyParameters(statusCode, data, responseOptions)\n\n    // Send in-already provided data like usual\n    const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions)\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData)\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Mock an undici request with a defined error.\n   */\n  replyWithError (error) {\n    if (typeof error === 'undefined') {\n      throw new InvalidArgumentError('error must be defined')\n    }\n\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error })\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */\n  defaultReplyHeaders (headers) {\n    if (typeof headers === 'undefined') {\n      throw new InvalidArgumentError('headers must be defined')\n    }\n\n    this[kDefaultHeaders] = headers\n    return this\n  }\n\n  /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */\n  defaultReplyTrailers (trailers) {\n    if (typeof trailers === 'undefined') {\n      throw new InvalidArgumentError('trailers must be defined')\n    }\n\n    this[kDefaultTrailers] = trailers\n    return this\n  }\n\n  /**\n   * Set reply content length header for replies on the interceptor\n   */\n  replyContentLength () {\n    this[kContentLength] = true\n    return this\n  }\n}\n\nmodule.exports.MockInterceptor = MockInterceptor\nmodule.exports.MockScope = MockScope\n", "'use strict'\n\nconst { promisify } = require('util')\nconst Client = require('../client')\nconst { buildMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kMockAgent,\n  kClose,\n  kOriginalClose,\n  kOrigin,\n  kOriginalDispatch,\n  kConnected\n} = require('./mock-symbols')\nconst { MockInterceptor } = require('./mock-interceptor')\nconst Symbols = require('../core/symbols')\nconst { InvalidArgumentError } = require('../core/errors')\n\n/**\n * MockClient provides an API that extends the Client to influence the mockDispatches.\n */\nclass MockClient extends Client {\n  constructor (origin, opts) {\n    super(origin, opts)\n\n    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n\n    this[kMockAgent] = opts.agent\n    this[kOrigin] = origin\n    this[kDispatches] = []\n    this[kConnected] = 1\n    this[kOriginalDispatch] = this.dispatch\n    this[kOriginalClose] = this.close.bind(this)\n\n    this.dispatch = buildMockDispatch.call(this)\n    this.close = this[kClose]\n  }\n\n  get [Symbols.kConnected] () {\n    return this[kConnected]\n  }\n\n  /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */\n  intercept (opts) {\n    return new MockInterceptor(opts, this[kDispatches])\n  }\n\n  async [kClose] () {\n    await promisify(this[kOriginalClose])()\n    this[kConnected] = 0\n    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])\n  }\n}\n\nmodule.exports = MockClient\n", "'use strict'\n\nconst { promisify } = require('util')\nconst Pool = require('../pool')\nconst { buildMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kMockAgent,\n  kClose,\n  kOriginalClose,\n  kOrigin,\n  kOriginalDispatch,\n  kConnected\n} = require('./mock-symbols')\nconst { MockInterceptor } = require('./mock-interceptor')\nconst Symbols = require('../core/symbols')\nconst { InvalidArgumentError } = require('../core/errors')\n\n/**\n * MockPool provides an API that extends the Pool to influence the mockDispatches.\n */\nclass MockPool extends Pool {\n  constructor (origin, opts) {\n    super(origin, opts)\n\n    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n\n    this[kMockAgent] = opts.agent\n    this[kOrigin] = origin\n    this[kDispatches] = []\n    this[kConnected] = 1\n    this[kOriginalDispatch] = this.dispatch\n    this[kOriginalClose] = this.close.bind(this)\n\n    this.dispatch = buildMockDispatch.call(this)\n    this.close = this[kClose]\n  }\n\n  get [Symbols.kConnected] () {\n    return this[kConnected]\n  }\n\n  /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */\n  intercept (opts) {\n    return new MockInterceptor(opts, this[kDispatches])\n  }\n\n  async [kClose] () {\n    await promisify(this[kOriginalClose])()\n    this[kConnected] = 0\n    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])\n  }\n}\n\nmodule.exports = MockPool\n", "'use strict'\n\nconst singulars = {\n  pronoun: 'it',\n  is: 'is',\n  was: 'was',\n  this: 'this'\n}\n\nconst plurals = {\n  pronoun: 'they',\n  is: 'are',\n  was: 'were',\n  this: 'these'\n}\n\nmodule.exports = class Pluralizer {\n  constructor (singular, plural) {\n    this.singular = singular\n    this.plural = plural\n  }\n\n  pluralize (count) {\n    const one = count === 1\n    const keys = one ? singulars : plurals\n    const noun = one ? this.singular : this.plural\n    return { ...keys, count, noun }\n  }\n}\n", "'use strict'\n\nconst { Transform } = require('stream')\nconst { Console } = require('console')\n\n/**\n * Gets the output of `console.table(\u2026)` as a string.\n */\nmodule.exports = class PendingInterceptorsFormatter {\n  constructor ({ disableColors } = {}) {\n    this.transform = new Transform({\n      transform (chunk, _enc, cb) {\n        cb(null, chunk)\n      }\n    })\n\n    this.logger = new Console({\n      stdout: this.transform,\n      inspectOptions: {\n        colors: !disableColors && !process.env.CI\n      }\n    })\n  }\n\n  format (pendingInterceptors) {\n    const withPrettyHeaders = pendingInterceptors.map(\n      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({\n        Method: method,\n        Origin: origin,\n        Path: path,\n        'Status code': statusCode,\n        Persistent: persist ? '\u2705' : '\u274C',\n        Invocations: timesInvoked,\n        Remaining: persist ? Infinity : times - timesInvoked\n      }))\n\n    this.logger.table(withPrettyHeaders)\n    return this.transform.read().toString()\n  }\n}\n", "'use strict'\n\nconst { kClients } = require('../core/symbols')\nconst Agent = require('../agent')\nconst {\n  kAgent,\n  kMockAgentSet,\n  kMockAgentGet,\n  kDispatches,\n  kIsMockActive,\n  kNetConnect,\n  kGetNetConnect,\n  kOptions,\n  kFactory\n} = require('./mock-symbols')\nconst MockClient = require('./mock-client')\nconst MockPool = require('./mock-pool')\nconst { matchValue, buildMockOptions } = require('./mock-utils')\nconst { InvalidArgumentError, UndiciError } = require('../core/errors')\nconst Dispatcher = require('../dispatcher')\nconst Pluralizer = require('./pluralizer')\nconst PendingInterceptorsFormatter = require('./pending-interceptors-formatter')\n\nclass FakeWeakRef {\n  constructor (value) {\n    this.value = value\n  }\n\n  deref () {\n    return this.value\n  }\n}\n\nclass MockAgent extends Dispatcher {\n  constructor (opts) {\n    super(opts)\n\n    this[kNetConnect] = true\n    this[kIsMockActive] = true\n\n    // Instantiate Agent and encapsulate\n    if ((opts && opts.agent && typeof opts.agent.dispatch !== 'function')) {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n    const agent = opts && opts.agent ? opts.agent : new Agent(opts)\n    this[kAgent] = agent\n\n    this[kClients] = agent[kClients]\n    this[kOptions] = buildMockOptions(opts)\n  }\n\n  get (origin) {\n    let dispatcher = this[kMockAgentGet](origin)\n\n    if (!dispatcher) {\n      dispatcher = this[kFactory](origin)\n      this[kMockAgentSet](origin, dispatcher)\n    }\n    return dispatcher\n  }\n\n  dispatch (opts, handler) {\n    // Call MockAgent.get to perform additional setup before dispatching as normal\n    this.get(opts.origin)\n    return this[kAgent].dispatch(opts, handler)\n  }\n\n  async close () {\n    await this[kAgent].close()\n    this[kClients].clear()\n  }\n\n  deactivate () {\n    this[kIsMockActive] = false\n  }\n\n  activate () {\n    this[kIsMockActive] = true\n  }\n\n  enableNetConnect (matcher) {\n    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n      if (Array.isArray(this[kNetConnect])) {\n        this[kNetConnect].push(matcher)\n      } else {\n        this[kNetConnect] = [matcher]\n      }\n    } else if (typeof matcher === 'undefined') {\n      this[kNetConnect] = true\n    } else {\n      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')\n    }\n  }\n\n  disableNetConnect () {\n    this[kNetConnect] = false\n  }\n\n  // This is required to bypass issues caused by using global symbols - see:\n  // https://github.com/nodejs/undici/issues/1447\n  get isMockActive () {\n    return this[kIsMockActive]\n  }\n\n  [kMockAgentSet] (origin, dispatcher) {\n    this[kClients].set(origin, new FakeWeakRef(dispatcher))\n  }\n\n  [kFactory] (origin) {\n    const mockOptions = Object.assign({ agent: this }, this[kOptions])\n    return this[kOptions] && this[kOptions].connections === 1\n      ? new MockClient(origin, mockOptions)\n      : new MockPool(origin, mockOptions)\n  }\n\n  [kMockAgentGet] (origin) {\n    // First check if we can immediately find it\n    const ref = this[kClients].get(origin)\n    if (ref) {\n      return ref.deref()\n    }\n\n    // If the origin is not a string create a dummy parent pool and return to user\n    if (typeof origin !== 'string') {\n      const dispatcher = this[kFactory]('http://localhost:9999')\n      this[kMockAgentSet](origin, dispatcher)\n      return dispatcher\n    }\n\n    // If we match, create a pool and assign the same dispatches\n    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {\n      const nonExplicitDispatcher = nonExplicitRef.deref()\n      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {\n        const dispatcher = this[kFactory](origin)\n        this[kMockAgentSet](origin, dispatcher)\n        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]\n        return dispatcher\n      }\n    }\n  }\n\n  [kGetNetConnect] () {\n    return this[kNetConnect]\n  }\n\n  pendingInterceptors () {\n    const mockAgentClients = this[kClients]\n\n    return Array.from(mockAgentClients.entries())\n      .flatMap(([origin, scope]) => scope.deref()[kDispatches].map(dispatch => ({ ...dispatch, origin })))\n      .filter(({ pending }) => pending)\n  }\n\n  assertNoPendingInterceptors ({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {\n    const pending = this.pendingInterceptors()\n\n    if (pending.length === 0) {\n      return\n    }\n\n    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length)\n\n    throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim())\n  }\n}\n\nmodule.exports = MockAgent\n", "'use strict'\n\nconst { kProxy, kClose, kDestroy, kInterceptors } = require('./core/symbols')\nconst { URL } = require('url')\nconst Agent = require('./agent')\nconst Pool = require('./pool')\nconst DispatcherBase = require('./dispatcher-base')\nconst { InvalidArgumentError, RequestAbortedError } = require('./core/errors')\nconst buildConnector = require('./core/connect')\n\nconst kAgent = Symbol('proxy agent')\nconst kClient = Symbol('proxy client')\nconst kProxyHeaders = Symbol('proxy headers')\nconst kRequestTls = Symbol('request tls settings')\nconst kProxyTls = Symbol('proxy tls settings')\nconst kConnectEndpoint = Symbol('connect endpoint function')\n\nfunction defaultProtocolPort (protocol) {\n  return protocol === 'https:' ? 443 : 80\n}\n\nfunction buildProxyOptions (opts) {\n  if (typeof opts === 'string') {\n    opts = { uri: opts }\n  }\n\n  if (!opts || !opts.uri) {\n    throw new InvalidArgumentError('Proxy opts.uri is mandatory')\n  }\n\n  return {\n    uri: opts.uri,\n    protocol: opts.protocol || 'https'\n  }\n}\n\nfunction defaultFactory (origin, opts) {\n  return new Pool(origin, opts)\n}\n\nclass ProxyAgent extends DispatcherBase {\n  constructor (opts) {\n    super(opts)\n    this[kProxy] = buildProxyOptions(opts)\n    this[kAgent] = new Agent(opts)\n    this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent)\n      ? opts.interceptors.ProxyAgent\n      : []\n\n    if (typeof opts === 'string') {\n      opts = { uri: opts }\n    }\n\n    if (!opts || !opts.uri) {\n      throw new InvalidArgumentError('Proxy opts.uri is mandatory')\n    }\n\n    const { clientFactory = defaultFactory } = opts\n\n    if (typeof clientFactory !== 'function') {\n      throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.')\n    }\n\n    this[kRequestTls] = opts.requestTls\n    this[kProxyTls] = opts.proxyTls\n    this[kProxyHeaders] = opts.headers || {}\n\n    const resolvedUrl = new URL(opts.uri)\n    const { origin, port, host, username, password } = resolvedUrl\n\n    if (opts.auth && opts.token) {\n      throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token')\n    } else if (opts.auth) {\n      /* @deprecated in favour of opts.token */\n      this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`\n    } else if (opts.token) {\n      this[kProxyHeaders]['proxy-authorization'] = opts.token\n    } else if (username && password) {\n      this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`\n    }\n\n    const connect = buildConnector({ ...opts.proxyTls })\n    this[kConnectEndpoint] = buildConnector({ ...opts.requestTls })\n    this[kClient] = clientFactory(resolvedUrl, { connect })\n    this[kAgent] = new Agent({\n      ...opts,\n      connect: async (opts, callback) => {\n        let requestedHost = opts.host\n        if (!opts.port) {\n          requestedHost += `:${defaultProtocolPort(opts.protocol)}`\n        }\n        try {\n          const { socket, statusCode } = await this[kClient].connect({\n            origin,\n            port,\n            path: requestedHost,\n            signal: opts.signal,\n            headers: {\n              ...this[kProxyHeaders],\n              host\n            }\n          })\n          if (statusCode !== 200) {\n            socket.on('error', () => {}).destroy()\n            callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`))\n          }\n          if (opts.protocol !== 'https:') {\n            callback(null, socket)\n            return\n          }\n          let servername\n          if (this[kRequestTls]) {\n            servername = this[kRequestTls].servername\n          } else {\n            servername = opts.servername\n          }\n          this[kConnectEndpoint]({ ...opts, servername, httpSocket: socket }, callback)\n        } catch (err) {\n          callback(err)\n        }\n      }\n    })\n  }\n\n  dispatch (opts, handler) {\n    const { host } = new URL(opts.origin)\n    const headers = buildHeaders(opts.headers)\n    throwIfProxyAuthIsSent(headers)\n    return this[kAgent].dispatch(\n      {\n        ...opts,\n        headers: {\n          ...headers,\n          host\n        }\n      },\n      handler\n    )\n  }\n\n  async [kClose] () {\n    await this[kAgent].close()\n    await this[kClient].close()\n  }\n\n  async [kDestroy] () {\n    await this[kAgent].destroy()\n    await this[kClient].destroy()\n  }\n}\n\n/**\n * @param {string[] | Record<string, string>} headers\n * @returns {Record<string, string>}\n */\nfunction buildHeaders (headers) {\n  // When using undici.fetch, the headers list is stored\n  // as an array.\n  if (Array.isArray(headers)) {\n    /** @type {Record<string, string>} */\n    const headersPair = {}\n\n    for (let i = 0; i < headers.length; i += 2) {\n      headersPair[headers[i]] = headers[i + 1]\n    }\n\n    return headersPair\n  }\n\n  return headers\n}\n\n/**\n * @param {Record<string, string>} headers\n *\n * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers\n * Nevertheless, it was changed and to avoid a security vulnerability by end users\n * this check was created.\n * It should be removed in the next major version for performance reasons\n */\nfunction throwIfProxyAuthIsSent (headers) {\n  const existProxyAuth = headers && Object.keys(headers)\n    .find((key) => key.toLowerCase() === 'proxy-authorization')\n  if (existProxyAuth) {\n    throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor')\n  }\n}\n\nmodule.exports = ProxyAgent\n", "const assert = require('assert')\n\nconst { kRetryHandlerDefaultRetry } = require('../core/symbols')\nconst { RequestRetryError } = require('../core/errors')\nconst { isDisturbed, parseHeaders, parseRangeHeader } = require('../core/util')\n\nfunction calculateRetryAfterHeader (retryAfter) {\n  const current = Date.now()\n  const diff = new Date(retryAfter).getTime() - current\n\n  return diff\n}\n\nclass RetryHandler {\n  constructor (opts, handlers) {\n    const { retryOptions, ...dispatchOpts } = opts\n    const {\n      // Retry scoped\n      retry: retryFn,\n      maxRetries,\n      maxTimeout,\n      minTimeout,\n      timeoutFactor,\n      // Response scoped\n      methods,\n      errorCodes,\n      retryAfter,\n      statusCodes\n    } = retryOptions ?? {}\n\n    this.dispatch = handlers.dispatch\n    this.handler = handlers.handler\n    this.opts = dispatchOpts\n    this.abort = null\n    this.aborted = false\n    this.retryOpts = {\n      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],\n      retryAfter: retryAfter ?? true,\n      maxTimeout: maxTimeout ?? 30 * 1000, // 30s,\n      timeout: minTimeout ?? 500, // .5s\n      timeoutFactor: timeoutFactor ?? 2,\n      maxRetries: maxRetries ?? 5,\n      // What errors we should retry\n      methods: methods ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],\n      // Indicates which errors to retry\n      statusCodes: statusCodes ?? [500, 502, 503, 504, 429],\n      // List of errors to retry\n      errorCodes: errorCodes ?? [\n        'ECONNRESET',\n        'ECONNREFUSED',\n        'ENOTFOUND',\n        'ENETDOWN',\n        'ENETUNREACH',\n        'EHOSTDOWN',\n        'EHOSTUNREACH',\n        'EPIPE'\n      ]\n    }\n\n    this.retryCount = 0\n    this.start = 0\n    this.end = null\n    this.etag = null\n    this.resume = null\n\n    // Handle possible onConnect duplication\n    this.handler.onConnect(reason => {\n      this.aborted = true\n      if (this.abort) {\n        this.abort(reason)\n      } else {\n        this.reason = reason\n      }\n    })\n  }\n\n  onRequestSent () {\n    if (this.handler.onRequestSent) {\n      this.handler.onRequestSent()\n    }\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    if (this.handler.onUpgrade) {\n      this.handler.onUpgrade(statusCode, headers, socket)\n    }\n  }\n\n  onConnect (abort) {\n    if (this.aborted) {\n      abort(this.reason)\n    } else {\n      this.abort = abort\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this.handler.onBodySent) return this.handler.onBodySent(chunk)\n  }\n\n  static [kRetryHandlerDefaultRetry] (err, { state, opts }, cb) {\n    const { statusCode, code, headers } = err\n    const { method, retryOptions } = opts\n    const {\n      maxRetries,\n      timeout,\n      maxTimeout,\n      timeoutFactor,\n      statusCodes,\n      errorCodes,\n      methods\n    } = retryOptions\n    let { counter, currentTimeout } = state\n\n    currentTimeout =\n      currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout\n\n    // Any code that is not a Undici's originated and allowed to retry\n    if (\n      code &&\n      code !== 'UND_ERR_REQ_RETRY' &&\n      code !== 'UND_ERR_SOCKET' &&\n      !errorCodes.includes(code)\n    ) {\n      cb(err)\n      return\n    }\n\n    // If a set of method are provided and the current method is not in the list\n    if (Array.isArray(methods) && !methods.includes(method)) {\n      cb(err)\n      return\n    }\n\n    // If a set of status code are provided and the current status code is not in the list\n    if (\n      statusCode != null &&\n      Array.isArray(statusCodes) &&\n      !statusCodes.includes(statusCode)\n    ) {\n      cb(err)\n      return\n    }\n\n    // If we reached the max number of retries\n    if (counter > maxRetries) {\n      cb(err)\n      return\n    }\n\n    let retryAfterHeader = headers != null && headers['retry-after']\n    if (retryAfterHeader) {\n      retryAfterHeader = Number(retryAfterHeader)\n      retryAfterHeader = isNaN(retryAfterHeader)\n        ? calculateRetryAfterHeader(retryAfterHeader)\n        : retryAfterHeader * 1e3 // Retry-After is in seconds\n    }\n\n    const retryTimeout =\n      retryAfterHeader > 0\n        ? Math.min(retryAfterHeader, maxTimeout)\n        : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout)\n\n    state.currentTimeout = retryTimeout\n\n    setTimeout(() => cb(null), retryTimeout)\n  }\n\n  onHeaders (statusCode, rawHeaders, resume, statusMessage) {\n    const headers = parseHeaders(rawHeaders)\n\n    this.retryCount += 1\n\n    if (statusCode >= 300) {\n      this.abort(\n        new RequestRetryError('Request failed', statusCode, {\n          headers,\n          count: this.retryCount\n        })\n      )\n      return false\n    }\n\n    // Checkpoint for resume from where we left it\n    if (this.resume != null) {\n      this.resume = null\n\n      if (statusCode !== 206) {\n        return true\n      }\n\n      const contentRange = parseRangeHeader(headers['content-range'])\n      // If no content range\n      if (!contentRange) {\n        this.abort(\n          new RequestRetryError('Content-Range mismatch', statusCode, {\n            headers,\n            count: this.retryCount\n          })\n        )\n        return false\n      }\n\n      // Let's start with a weak etag check\n      if (this.etag != null && this.etag !== headers.etag) {\n        this.abort(\n          new RequestRetryError('ETag mismatch', statusCode, {\n            headers,\n            count: this.retryCount\n          })\n        )\n        return false\n      }\n\n      const { start, size, end = size } = contentRange\n\n      assert(this.start === start, 'content-range mismatch')\n      assert(this.end == null || this.end === end, 'content-range mismatch')\n\n      this.resume = resume\n      return true\n    }\n\n    if (this.end == null) {\n      if (statusCode === 206) {\n        // First time we receive 206\n        const range = parseRangeHeader(headers['content-range'])\n\n        if (range == null) {\n          return this.handler.onHeaders(\n            statusCode,\n            rawHeaders,\n            resume,\n            statusMessage\n          )\n        }\n\n        const { start, size, end = size } = range\n\n        assert(\n          start != null && Number.isFinite(start) && this.start !== start,\n          'content-range mismatch'\n        )\n        assert(Number.isFinite(start))\n        assert(\n          end != null && Number.isFinite(end) && this.end !== end,\n          'invalid content-length'\n        )\n\n        this.start = start\n        this.end = end\n      }\n\n      // We make our best to checkpoint the body for further range headers\n      if (this.end == null) {\n        const contentLength = headers['content-length']\n        this.end = contentLength != null ? Number(contentLength) : null\n      }\n\n      assert(Number.isFinite(this.start))\n      assert(\n        this.end == null || Number.isFinite(this.end),\n        'invalid content-length'\n      )\n\n      this.resume = resume\n      this.etag = headers.etag != null ? headers.etag : null\n\n      return this.handler.onHeaders(\n        statusCode,\n        rawHeaders,\n        resume,\n        statusMessage\n      )\n    }\n\n    const err = new RequestRetryError('Request failed', statusCode, {\n      headers,\n      count: this.retryCount\n    })\n\n    this.abort(err)\n\n    return false\n  }\n\n  onData (chunk) {\n    this.start += chunk.length\n\n    return this.handler.onData(chunk)\n  }\n\n  onComplete (rawTrailers) {\n    this.retryCount = 0\n    return this.handler.onComplete(rawTrailers)\n  }\n\n  onError (err) {\n    if (this.aborted || isDisturbed(this.opts.body)) {\n      return this.handler.onError(err)\n    }\n\n    this.retryOpts.retry(\n      err,\n      {\n        state: { counter: this.retryCount++, currentTimeout: this.retryAfter },\n        opts: { retryOptions: this.retryOpts, ...this.opts }\n      },\n      onRetry.bind(this)\n    )\n\n    function onRetry (err) {\n      if (err != null || this.aborted || isDisturbed(this.opts.body)) {\n        return this.handler.onError(err)\n      }\n\n      if (this.start !== 0) {\n        this.opts = {\n          ...this.opts,\n          headers: {\n            ...this.opts.headers,\n            range: `bytes=${this.start}-${this.end ?? ''}`\n          }\n        }\n      }\n\n      try {\n        this.dispatch(this.opts, this)\n      } catch (err) {\n        this.handler.onError(err)\n      }\n    }\n  }\n}\n\nmodule.exports = RetryHandler\n", "'use strict'\n\n// We include a version number for the Dispatcher API. In case of breaking changes,\n// this version number must be increased to avoid conflicts.\nconst globalDispatcher = Symbol.for('undici.globalDispatcher.1')\nconst { InvalidArgumentError } = require('./core/errors')\nconst Agent = require('./agent')\n\nif (getGlobalDispatcher() === undefined) {\n  setGlobalDispatcher(new Agent())\n}\n\nfunction setGlobalDispatcher (agent) {\n  if (!agent || typeof agent.dispatch !== 'function') {\n    throw new InvalidArgumentError('Argument agent must implement Agent')\n  }\n  Object.defineProperty(globalThis, globalDispatcher, {\n    value: agent,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  })\n}\n\nfunction getGlobalDispatcher () {\n  return globalThis[globalDispatcher]\n}\n\nmodule.exports = {\n  setGlobalDispatcher,\n  getGlobalDispatcher\n}\n", "'use strict'\n\nmodule.exports = class DecoratorHandler {\n  constructor (handler) {\n    this.handler = handler\n  }\n\n  onConnect (...args) {\n    return this.handler.onConnect(...args)\n  }\n\n  onError (...args) {\n    return this.handler.onError(...args)\n  }\n\n  onUpgrade (...args) {\n    return this.handler.onUpgrade(...args)\n  }\n\n  onHeaders (...args) {\n    return this.handler.onHeaders(...args)\n  }\n\n  onData (...args) {\n    return this.handler.onData(...args)\n  }\n\n  onComplete (...args) {\n    return this.handler.onComplete(...args)\n  }\n\n  onBodySent (...args) {\n    return this.handler.onBodySent(...args)\n  }\n}\n", "// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst { kGuard } = require('./symbols')\nconst { kEnumerableProperty } = require('../core/util')\nconst {\n  makeIterator,\n  isValidHeaderName,\n  isValidHeaderValue\n} = require('./util')\nconst { webidl } = require('./webidl')\nconst assert = require('assert')\n\nconst kHeadersMap = Symbol('headers map')\nconst kHeadersSortedMap = Symbol('headers map sorted')\n\n/**\n * @param {number} code\n */\nfunction isHTTPWhiteSpaceCharCode (code) {\n  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */\nfunction headerValueNormalize (potentialValue) {\n  //  To normalize a byte sequence potentialValue, remove\n  //  any leading and trailing HTTP whitespace bytes from\n  //  potentialValue.\n  let i = 0; let j = potentialValue.length\n\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i\n\n  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j)\n}\n\nfunction fill (headers, object) {\n  // To fill a Headers object headers with a given object object, run these steps:\n\n  // 1. If object is a sequence, then for each header in object:\n  // Note: webidl conversion to array has already been done.\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; ++i) {\n      const header = object[i]\n      // 1. If header does not contain exactly two items, then throw a TypeError.\n      if (header.length !== 2) {\n        throw webidl.errors.exception({\n          header: 'Headers constructor',\n          message: `expected name/value pair to be length 2, found ${header.length}.`\n        })\n      }\n\n      // 2. Append (header\u2019s first item, header\u2019s second item) to headers.\n      appendHeader(headers, header[0], header[1])\n    }\n  } else if (typeof object === 'object' && object !== null) {\n    // Note: null should throw\n\n    // 2. Otherwise, object is a record, then for each key \u2192 value in object,\n    //    append (key, value) to headers\n    const keys = Object.keys(object)\n    for (let i = 0; i < keys.length; ++i) {\n      appendHeader(headers, keys[i], object[keys[i]])\n    }\n  } else {\n    throw webidl.errors.conversionFailed({\n      prefix: 'Headers constructor',\n      argument: 'Argument 1',\n      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n    })\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-headers-append\n */\nfunction appendHeader (headers, name, value) {\n  // 1. Normalize value.\n  value = headerValueNormalize(value)\n\n  // 2. If name is not a header name or value is not a\n  //    header value, then throw a TypeError.\n  if (!isValidHeaderName(name)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value: name,\n      type: 'header name'\n    })\n  } else if (!isValidHeaderValue(value)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value,\n      type: 'header value'\n    })\n  }\n\n  // 3. If headers\u2019s guard is \"immutable\", then throw a TypeError.\n  // 4. Otherwise, if headers\u2019s guard is \"request\" and name is a\n  //    forbidden header name, return.\n  // Note: undici does not implement forbidden header names\n  if (headers[kGuard] === 'immutable') {\n    throw new TypeError('immutable')\n  } else if (headers[kGuard] === 'request-no-cors') {\n    // 5. Otherwise, if headers\u2019s guard is \"request-no-cors\":\n    // TODO\n  }\n\n  // 6. Otherwise, if headers\u2019s guard is \"response\" and name is a\n  //    forbidden response-header name, return.\n\n  // 7. Append (name, value) to headers\u2019s header list.\n  return headers[kHeadersList].append(name, value)\n\n  // 8. If headers\u2019s guard is \"request-no-cors\", then remove\n  //    privileged no-CORS request headers from headers\n}\n\nclass HeadersList {\n  /** @type {[string, string][]|null} */\n  cookies = null\n\n  constructor (init) {\n    if (init instanceof HeadersList) {\n      this[kHeadersMap] = new Map(init[kHeadersMap])\n      this[kHeadersSortedMap] = init[kHeadersSortedMap]\n      this.cookies = init.cookies === null ? null : [...init.cookies]\n    } else {\n      this[kHeadersMap] = new Map(init)\n      this[kHeadersSortedMap] = null\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#header-list-contains\n  contains (name) {\n    // A header list list contains a header name name if list\n    // contains a header whose name is a byte-case-insensitive\n    // match for name.\n    name = name.toLowerCase()\n\n    return this[kHeadersMap].has(name)\n  }\n\n  clear () {\n    this[kHeadersMap].clear()\n    this[kHeadersSortedMap] = null\n    this.cookies = null\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-append\n  append (name, value) {\n    this[kHeadersSortedMap] = null\n\n    // 1. If list contains name, then set name to the first such\n    //    header\u2019s name.\n    const lowercaseName = name.toLowerCase()\n    const exists = this[kHeadersMap].get(lowercaseName)\n\n    // 2. Append (name, value) to list.\n    if (exists) {\n      const delimiter = lowercaseName === 'cookie' ? '; ' : ', '\n      this[kHeadersMap].set(lowercaseName, {\n        name: exists.name,\n        value: `${exists.value}${delimiter}${value}`\n      })\n    } else {\n      this[kHeadersMap].set(lowercaseName, { name, value })\n    }\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies ??= []\n      this.cookies.push(value)\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-set\n  set (name, value) {\n    this[kHeadersSortedMap] = null\n    const lowercaseName = name.toLowerCase()\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies = [value]\n    }\n\n    // 1. If list contains name, then set the value of\n    //    the first such header to value and remove the\n    //    others.\n    // 2. Otherwise, append header (name, value) to list.\n    this[kHeadersMap].set(lowercaseName, { name, value })\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-delete\n  delete (name) {\n    this[kHeadersSortedMap] = null\n\n    name = name.toLowerCase()\n\n    if (name === 'set-cookie') {\n      this.cookies = null\n    }\n\n    this[kHeadersMap].delete(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-get\n  get (name) {\n    const value = this[kHeadersMap].get(name.toLowerCase())\n\n    // 1. If list does not contain name, then return null.\n    // 2. Return the values of all headers in list whose name\n    //    is a byte-case-insensitive match for name,\n    //    separated from each other by 0x2C 0x20, in order.\n    return value === undefined ? null : value.value\n  }\n\n  * [Symbol.iterator] () {\n    // use the lowercased name\n    for (const [name, { value }] of this[kHeadersMap]) {\n      yield [name, value]\n    }\n  }\n\n  get entries () {\n    const headers = {}\n\n    if (this[kHeadersMap].size) {\n      for (const { name, value } of this[kHeadersMap].values()) {\n        headers[name] = value\n      }\n    }\n\n    return headers\n  }\n}\n\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n  constructor (init = undefined) {\n    if (init === kConstruct) {\n      return\n    }\n    this[kHeadersList] = new HeadersList()\n\n    // The new Headers(init) constructor steps are:\n\n    // 1. Set this\u2019s guard to \"none\".\n    this[kGuard] = 'none'\n\n    // 2. If init is given, then fill this with init.\n    if (init !== undefined) {\n      init = webidl.converters.HeadersInit(init)\n      fill(this, init)\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-append\n  append (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.append' })\n\n    name = webidl.converters.ByteString(name)\n    value = webidl.converters.ByteString(value)\n\n    return appendHeader(this, name, value)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-delete\n  delete (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.delete',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. If this\u2019s guard is \"immutable\", then throw a TypeError.\n    // 3. Otherwise, if this\u2019s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 4. Otherwise, if this\u2019s guard is \"request-no-cors\", name\n    //    is not a no-CORS-safelisted request-header name, and\n    //    name is not a privileged no-CORS request-header name,\n    //    return.\n    // 5. Otherwise, if this\u2019s guard is \"response\" and name is\n    //    a forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 6. If this\u2019s header list does not contain name, then\n    //    return.\n    if (!this[kHeadersList].contains(name)) {\n      return\n    }\n\n    // 7. Delete name from this\u2019s header list.\n    // 8. If this\u2019s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this.\n    this[kHeadersList].delete(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-get\n  get (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.get' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.get',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return the result of getting name from this\u2019s header\n    //    list.\n    return this[kHeadersList].get(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-has\n  has (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.has' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.has',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return true if this\u2019s header list contains name;\n    //    otherwise false.\n    return this[kHeadersList].contains(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-set\n  set (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.set' })\n\n    name = webidl.converters.ByteString(name)\n    value = webidl.converters.ByteString(value)\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value)\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value: name,\n        type: 'header name'\n      })\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value,\n        type: 'header value'\n      })\n    }\n\n    // 3. If this\u2019s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if this\u2019s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if this\u2019s guard is \"request-no-cors\" and\n    //    name/value is not a no-CORS-safelisted request-header,\n    //    return.\n    // 6. Otherwise, if this\u2019s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 7. Set (name, value) in this\u2019s header list.\n    // 8. If this\u2019s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this\n    this[kHeadersList].set(name, value)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n  getSetCookie () {\n    webidl.brandCheck(this, Headers)\n\n    // 1. If this\u2019s header list does not contain `Set-Cookie`, then return \u00AB \u00BB.\n    // 2. Return the values of all headers in this\u2019s header list whose name is\n    //    a byte-case-insensitive match for `Set-Cookie`, in order.\n\n    const list = this[kHeadersList].cookies\n\n    if (list) {\n      return [...list]\n    }\n\n    return []\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n  get [kHeadersSortedMap] () {\n    if (this[kHeadersList][kHeadersSortedMap]) {\n      return this[kHeadersList][kHeadersSortedMap]\n    }\n\n    // 1. Let headers be an empty list of headers with the key being the name\n    //    and value the value.\n    const headers = []\n\n    // 2. Let names be the result of convert header names to a sorted-lowercase\n    //    set with all the names of the headers in list.\n    const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1)\n    const cookies = this[kHeadersList].cookies\n\n    // 3. For each name of names:\n    for (let i = 0; i < names.length; ++i) {\n      const [name, value] = names[i]\n      // 1. If name is `set-cookie`, then:\n      if (name === 'set-cookie') {\n        // 1. Let values be a list of all values of headers in list whose name\n        //    is a byte-case-insensitive match for name, in order.\n\n        // 2. For each value of values:\n        // 1. Append (name, value) to headers.\n        for (let j = 0; j < cookies.length; ++j) {\n          headers.push([name, cookies[j]])\n        }\n      } else {\n        // 2. Otherwise:\n\n        // 1. Let value be the result of getting name from list.\n\n        // 2. Assert: value is non-null.\n        assert(value !== null)\n\n        // 3. Append (name, value) to headers.\n        headers.push([name, value])\n      }\n    }\n\n    this[kHeadersList][kHeadersSortedMap] = headers\n\n    // 4. Return headers.\n    return headers\n  }\n\n  keys () {\n    webidl.brandCheck(this, Headers)\n\n    if (this[kGuard] === 'immutable') {\n      const value = this[kHeadersSortedMap]\n      return makeIterator(() => value, 'Headers',\n        'key')\n    }\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'key'\n    )\n  }\n\n  values () {\n    webidl.brandCheck(this, Headers)\n\n    if (this[kGuard] === 'immutable') {\n      const value = this[kHeadersSortedMap]\n      return makeIterator(() => value, 'Headers',\n        'value')\n    }\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'value'\n    )\n  }\n\n  entries () {\n    webidl.brandCheck(this, Headers)\n\n    if (this[kGuard] === 'immutable') {\n      const value = this[kHeadersSortedMap]\n      return makeIterator(() => value, 'Headers',\n        'key+value')\n    }\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'key+value'\n    )\n  }\n\n  /**\n   * @param {(value: string, key: string, self: Headers) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach (callbackFn, thisArg = globalThis) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' })\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.\"\n      )\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this])\n    }\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    webidl.brandCheck(this, Headers)\n\n    return this[kHeadersList]\n  }\n}\n\nHeaders.prototype[Symbol.iterator] = Headers.prototype.entries\n\nObject.defineProperties(Headers.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  getSetCookie: kEnumerableProperty,\n  keys: kEnumerableProperty,\n  values: kEnumerableProperty,\n  entries: kEnumerableProperty,\n  forEach: kEnumerableProperty,\n  [Symbol.iterator]: { enumerable: false },\n  [Symbol.toStringTag]: {\n    value: 'Headers',\n    configurable: true\n  }\n})\n\nwebidl.converters.HeadersInit = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (V[Symbol.iterator]) {\n      return webidl.converters['sequence<sequence<ByteString>>'](V)\n    }\n\n    return webidl.converters['record<ByteString, ByteString>'](V)\n  }\n\n  throw webidl.errors.conversionFailed({\n    prefix: 'Headers constructor',\n    argument: 'Argument 1',\n    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n  })\n}\n\nmodule.exports = {\n  fill,\n  Headers,\n  HeadersList\n}\n", "'use strict'\n\nconst { Headers, HeadersList, fill } = require('./headers')\nconst { extractBody, cloneBody, mixinBody } = require('./body')\nconst util = require('../core/util')\nconst { kEnumerableProperty } = util\nconst {\n  isValidReasonPhrase,\n  isCancelled,\n  isAborted,\n  isBlobLike,\n  serializeJavascriptValueToJSONString,\n  isErrorLike,\n  isomorphicEncode\n} = require('./util')\nconst {\n  redirectStatusSet,\n  nullBodyStatus,\n  DOMException\n} = require('./constants')\nconst { kState, kHeaders, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { FormData } = require('./formdata')\nconst { getGlobalOrigin } = require('./global')\nconst { URLSerializer } = require('./dataURL')\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst assert = require('assert')\nconst { types } = require('util')\n\nconst ReadableStream = globalThis.ReadableStream || require('stream/web').ReadableStream\nconst textEncoder = new TextEncoder('utf-8')\n\n// https://fetch.spec.whatwg.org/#response-class\nclass Response {\n  // Creates network error Response.\n  static error () {\n    // TODO\n    const relevantRealm = { settingsObject: {} }\n\n    // The static error() method steps are to return the result of creating a\n    // Response object, given a new network error, \"immutable\", and this\u2019s\n    // relevant Realm.\n    const responseObject = new Response()\n    responseObject[kState] = makeNetworkError()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n    return responseObject\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response-json\n  static json (data, init = {}) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.json' })\n\n    if (init !== null) {\n      init = webidl.converters.ResponseInit(init)\n    }\n\n    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.\n    const bytes = textEncoder.encode(\n      serializeJavascriptValueToJSONString(data)\n    )\n\n    // 2. Let body be the result of extracting bytes.\n    const body = extractBody(bytes)\n\n    // 3. Let responseObject be the result of creating a Response object, given a new response,\n    //    \"response\", and this\u2019s relevant Realm.\n    const relevantRealm = { settingsObject: {} }\n    const responseObject = new Response()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kGuard] = 'response'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 4. Perform initialize a response given responseObject, init, and (body, \"application/json\").\n    initializeResponse(responseObject, init, { body: body[0], type: 'application/json' })\n\n    // 5. Return responseObject.\n    return responseObject\n  }\n\n  // Creates a redirect Response that redirects to url with status status.\n  static redirect (url, status = 302) {\n    const relevantRealm = { settingsObject: {} }\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.redirect' })\n\n    url = webidl.converters.USVString(url)\n    status = webidl.converters['unsigned short'](status)\n\n    // 1. Let parsedURL be the result of parsing url with current settings\n    // object\u2019s API base URL.\n    // 2. If parsedURL is failure, then throw a TypeError.\n    // TODO: base-URL?\n    let parsedURL\n    try {\n      parsedURL = new URL(url, getGlobalOrigin())\n    } catch (err) {\n      throw Object.assign(new TypeError('Failed to parse URL from ' + url), {\n        cause: err\n      })\n    }\n\n    // 3. If status is not a redirect status, then throw a RangeError.\n    if (!redirectStatusSet.has(status)) {\n      throw new RangeError('Invalid status code ' + status)\n    }\n\n    // 4. Let responseObject be the result of creating a Response object,\n    // given a new response, \"immutable\", and this\u2019s relevant Realm.\n    const responseObject = new Response()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 5. Set responseObject\u2019s response\u2019s status to status.\n    responseObject[kState].status = status\n\n    // 6. Let value be parsedURL, serialized and isomorphic encoded.\n    const value = isomorphicEncode(URLSerializer(parsedURL))\n\n    // 7. Append `Location`/value to responseObject\u2019s response\u2019s header list.\n    responseObject[kState].headersList.append('location', value)\n\n    // 8. Return responseObject.\n    return responseObject\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response\n  constructor (body = null, init = {}) {\n    if (body !== null) {\n      body = webidl.converters.BodyInit(body)\n    }\n\n    init = webidl.converters.ResponseInit(init)\n\n    // TODO\n    this[kRealm] = { settingsObject: {} }\n\n    // 1. Set this\u2019s response to a new response.\n    this[kState] = makeResponse({})\n\n    // 2. Set this\u2019s headers to a new Headers object with this\u2019s relevant\n    // Realm, whose header list is this\u2019s response\u2019s header list and guard\n    // is \"response\".\n    this[kHeaders] = new Headers(kConstruct)\n    this[kHeaders][kGuard] = 'response'\n    this[kHeaders][kHeadersList] = this[kState].headersList\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 3. Let bodyWithType be null.\n    let bodyWithType = null\n\n    // 4. If body is non-null, then set bodyWithType to the result of extracting body.\n    if (body != null) {\n      const [extractedBody, type] = extractBody(body)\n      bodyWithType = { body: extractedBody, type }\n    }\n\n    // 5. Perform initialize a response given this, init, and bodyWithType.\n    initializeResponse(this, init, bodyWithType)\n  }\n\n  // Returns response\u2019s type, e.g., \"cors\".\n  get type () {\n    webidl.brandCheck(this, Response)\n\n    // The type getter steps are to return this\u2019s response\u2019s type.\n    return this[kState].type\n  }\n\n  // Returns response\u2019s URL, if it has one; otherwise the empty string.\n  get url () {\n    webidl.brandCheck(this, Response)\n\n    const urlList = this[kState].urlList\n\n    // The url getter steps are to return the empty string if this\u2019s\n    // response\u2019s URL is null; otherwise this\u2019s response\u2019s URL,\n    // serialized with exclude fragment set to true.\n    const url = urlList[urlList.length - 1] ?? null\n\n    if (url === null) {\n      return ''\n    }\n\n    return URLSerializer(url, true)\n  }\n\n  // Returns whether response was obtained through a redirect.\n  get redirected () {\n    webidl.brandCheck(this, Response)\n\n    // The redirected getter steps are to return true if this\u2019s response\u2019s URL\n    // list has more than one item; otherwise false.\n    return this[kState].urlList.length > 1\n  }\n\n  // Returns response\u2019s status.\n  get status () {\n    webidl.brandCheck(this, Response)\n\n    // The status getter steps are to return this\u2019s response\u2019s status.\n    return this[kState].status\n  }\n\n  // Returns whether response\u2019s status is an ok status.\n  get ok () {\n    webidl.brandCheck(this, Response)\n\n    // The ok getter steps are to return true if this\u2019s response\u2019s status is an\n    // ok status; otherwise false.\n    return this[kState].status >= 200 && this[kState].status <= 299\n  }\n\n  // Returns response\u2019s status message.\n  get statusText () {\n    webidl.brandCheck(this, Response)\n\n    // The statusText getter steps are to return this\u2019s response\u2019s status\n    // message.\n    return this[kState].statusText\n  }\n\n  // Returns response\u2019s headers as Headers.\n  get headers () {\n    webidl.brandCheck(this, Response)\n\n    // The headers getter steps are to return this\u2019s headers.\n    return this[kHeaders]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Response)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Response)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  // Returns a clone of response.\n  clone () {\n    webidl.brandCheck(this, Response)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || (this.body && this.body.locked)) {\n      throw webidl.errors.exception({\n        header: 'Response.clone',\n        message: 'Body has already been consumed.'\n      })\n    }\n\n    // 2. Let clonedResponse be the result of cloning this\u2019s response.\n    const clonedResponse = cloneResponse(this[kState])\n\n    // 3. Return the result of creating a Response object, given\n    // clonedResponse, this\u2019s headers\u2019s guard, and this\u2019s relevant Realm.\n    const clonedResponseObject = new Response()\n    clonedResponseObject[kState] = clonedResponse\n    clonedResponseObject[kRealm] = this[kRealm]\n    clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList\n    clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    return clonedResponseObject\n  }\n}\n\nmixinBody(Response)\n\nObject.defineProperties(Response.prototype, {\n  type: kEnumerableProperty,\n  url: kEnumerableProperty,\n  status: kEnumerableProperty,\n  ok: kEnumerableProperty,\n  redirected: kEnumerableProperty,\n  statusText: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Response',\n    configurable: true\n  }\n})\n\nObject.defineProperties(Response, {\n  json: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  error: kEnumerableProperty\n})\n\n// https://fetch.spec.whatwg.org/#concept-response-clone\nfunction cloneResponse (response) {\n  // To clone a response response, run these steps:\n\n  // 1. If response is a filtered response, then return a new identical\n  // filtered response whose internal response is a clone of response\u2019s\n  // internal response.\n  if (response.internalResponse) {\n    return filterResponse(\n      cloneResponse(response.internalResponse),\n      response.type\n    )\n  }\n\n  // 2. Let newResponse be a copy of response, except for its body.\n  const newResponse = makeResponse({ ...response, body: null })\n\n  // 3. If response\u2019s body is non-null, then set newResponse\u2019s body to the\n  // result of cloning response\u2019s body.\n  if (response.body != null) {\n    newResponse.body = cloneBody(response.body)\n  }\n\n  // 4. Return newResponse.\n  return newResponse\n}\n\nfunction makeResponse (init) {\n  return {\n    aborted: false,\n    rangeRequested: false,\n    timingAllowPassed: false,\n    requestIncludesCredentials: false,\n    type: 'default',\n    status: 200,\n    timingInfo: null,\n    cacheState: '',\n    statusText: '',\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList(),\n    urlList: init.urlList ? [...init.urlList] : []\n  }\n}\n\nfunction makeNetworkError (reason) {\n  const isError = isErrorLike(reason)\n  return makeResponse({\n    type: 'error',\n    status: 0,\n    error: isError\n      ? reason\n      : new Error(reason ? String(reason) : reason),\n    aborted: reason && reason.name === 'AbortError'\n  })\n}\n\nfunction makeFilteredResponse (response, state) {\n  state = {\n    internalResponse: response,\n    ...state\n  }\n\n  return new Proxy(response, {\n    get (target, p) {\n      return p in state ? state[p] : target[p]\n    },\n    set (target, p, value) {\n      assert(!(p in state))\n      target[p] = value\n      return true\n    }\n  })\n}\n\n// https://fetch.spec.whatwg.org/#concept-filtered-response\nfunction filterResponse (response, type) {\n  // Set response to the following filtered response with response as its\n  // internal response, depending on request\u2019s response tainting:\n  if (type === 'basic') {\n    // A basic filtered response is a filtered response whose type is \"basic\"\n    // and header list excludes any headers in internal response\u2019s header list\n    // whose name is a forbidden response-header name.\n\n    // Note: undici does not implement forbidden response-header names\n    return makeFilteredResponse(response, {\n      type: 'basic',\n      headersList: response.headersList\n    })\n  } else if (type === 'cors') {\n    // A CORS filtered response is a filtered response whose type is \"cors\"\n    // and header list excludes any headers in internal response\u2019s header\n    // list whose name is not a CORS-safelisted response-header name, given\n    // internal response\u2019s CORS-exposed header-name list.\n\n    // Note: undici does not implement CORS-safelisted response-header names\n    return makeFilteredResponse(response, {\n      type: 'cors',\n      headersList: response.headersList\n    })\n  } else if (type === 'opaque') {\n    // An opaque filtered response is a filtered response whose type is\n    // \"opaque\", URL list is the empty list, status is 0, status message\n    // is the empty byte sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaque',\n      urlList: Object.freeze([]),\n      status: 0,\n      statusText: '',\n      body: null\n    })\n  } else if (type === 'opaqueredirect') {\n    // An opaque-redirect filtered response is a filtered response whose type\n    // is \"opaqueredirect\", status is 0, status message is the empty byte\n    // sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaqueredirect',\n      status: 0,\n      statusText: '',\n      headersList: [],\n      body: null\n    })\n  } else {\n    assert(false)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#appropriate-network-error\nfunction makeAppropriateNetworkError (fetchParams, err = null) {\n  // 1. Assert: fetchParams is canceled.\n  assert(isCancelled(fetchParams))\n\n  // 2. Return an aborted network error if fetchParams is aborted;\n  // otherwise return a network error.\n  return isAborted(fetchParams)\n    ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), { cause: err }))\n    : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), { cause: err }))\n}\n\n// https://whatpr.org/fetch/1392.html#initialize-a-response\nfunction initializeResponse (response, init, body) {\n  // 1. If init[\"status\"] is not in the range 200 to 599, inclusive, then\n  //    throw a RangeError.\n  if (init.status !== null && (init.status < 200 || init.status > 599)) {\n    throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.')\n  }\n\n  // 2. If init[\"statusText\"] does not match the reason-phrase token production,\n  //    then throw a TypeError.\n  if ('statusText' in init && init.statusText != null) {\n    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:\n    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n    if (!isValidReasonPhrase(String(init.statusText))) {\n      throw new TypeError('Invalid statusText')\n    }\n  }\n\n  // 3. Set response\u2019s response\u2019s status to init[\"status\"].\n  if ('status' in init && init.status != null) {\n    response[kState].status = init.status\n  }\n\n  // 4. Set response\u2019s response\u2019s status message to init[\"statusText\"].\n  if ('statusText' in init && init.statusText != null) {\n    response[kState].statusText = init.statusText\n  }\n\n  // 5. If init[\"headers\"] exists, then fill response\u2019s headers with init[\"headers\"].\n  if ('headers' in init && init.headers != null) {\n    fill(response[kHeaders], init.headers)\n  }\n\n  // 6. If body was given, then:\n  if (body) {\n    // 1. If response's status is a null body status, then throw a TypeError.\n    if (nullBodyStatus.includes(response.status)) {\n      throw webidl.errors.exception({\n        header: 'Response constructor',\n        message: 'Invalid response status code ' + response.status\n      })\n    }\n\n    // 2. Set response's body to body's body.\n    response[kState].body = body.body\n\n    // 3. If body's type is non-null and response's header list does not contain\n    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.\n    if (body.type != null && !response[kState].headersList.contains('Content-Type')) {\n      response[kState].headersList.append('content-type', body.type)\n    }\n  }\n}\n\nwebidl.converters.ReadableStream = webidl.interfaceConverter(\n  ReadableStream\n)\n\nwebidl.converters.FormData = webidl.interfaceConverter(\n  FormData\n)\n\nwebidl.converters.URLSearchParams = webidl.interfaceConverter(\n  URLSearchParams\n)\n\n// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\nwebidl.converters.XMLHttpRequestBodyInit = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (isBlobLike(V)) {\n    return webidl.converters.Blob(V, { strict: false })\n  }\n\n  if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {\n    return webidl.converters.BufferSource(V)\n  }\n\n  if (util.isFormDataLike(V)) {\n    return webidl.converters.FormData(V, { strict: false })\n  }\n\n  if (V instanceof URLSearchParams) {\n    return webidl.converters.URLSearchParams(V)\n  }\n\n  return webidl.converters.DOMString(V)\n}\n\n// https://fetch.spec.whatwg.org/#bodyinit\nwebidl.converters.BodyInit = function (V) {\n  if (V instanceof ReadableStream) {\n    return webidl.converters.ReadableStream(V)\n  }\n\n  // Note: the spec doesn't include async iterables,\n  // this is an undici extension.\n  if (V?.[Symbol.asyncIterator]) {\n    return V\n  }\n\n  return webidl.converters.XMLHttpRequestBodyInit(V)\n}\n\nwebidl.converters.ResponseInit = webidl.dictionaryConverter([\n  {\n    key: 'status',\n    converter: webidl.converters['unsigned short'],\n    defaultValue: 200\n  },\n  {\n    key: 'statusText',\n    converter: webidl.converters.ByteString,\n    defaultValue: ''\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  }\n])\n\nmodule.exports = {\n  makeNetworkError,\n  makeResponse,\n  makeAppropriateNetworkError,\n  filterResponse,\n  Response,\n  cloneResponse\n}\n", "/* globals AbortController */\n\n'use strict'\n\nconst { extractBody, mixinBody, cloneBody } = require('./body')\nconst { Headers, fill: fillHeaders, HeadersList } = require('./headers')\nconst { FinalizationRegistry } = require('../compat/dispatcher-weakref')()\nconst util = require('../core/util')\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod,\n  makePolicyContainer,\n  normalizeMethodRecord\n} = require('./util')\nconst {\n  forbiddenMethodsSet,\n  corsSafeListedMethodsSet,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = require('./constants')\nconst { kEnumerableProperty } = util\nconst { kHeaders, kSignal, kState, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { getGlobalOrigin } = require('./global')\nconst { URLSerializer } = require('./dataURL')\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst assert = require('assert')\nconst { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require('events')\n\nlet TransformStream = globalThis.TransformStream\n\nconst kAbortController = Symbol('abortController')\n\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {\n  signal.removeEventListener('abort', abort)\n})\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor (input, init = {}) {\n    if (input === kConstruct) {\n      return\n    }\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Request constructor' })\n\n    input = webidl.converters.RequestInfo(input)\n    init = webidl.converters.RequestInit(init)\n\n    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin(),\n        get origin () {\n          return this.baseUrl?.origin\n        },\n        policyContainer: makePolicyContainer()\n      }\n    }\n\n    // 1. Let request be null.\n    let request = null\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null\n\n    // 3. Let baseURL be this\u2019s relevant settings object\u2019s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl\n\n    // 4. Let signal be null.\n    let signal = null\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL\n      try {\n        parsedURL = new URL(input, baseUrl)\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, { cause: err })\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError(\n          'Request cannot be constructed from a URL that includes credentials: ' +\n            input\n        )\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({ urlList: [parsedURL] })\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors'\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request)\n\n      // 8. Set request to input\u2019s request.\n      request = input[kState]\n\n      // 9. Set signal to input\u2019s signal.\n      signal = input[kSignal]\n    }\n\n    // 7. Let origin be this\u2019s relevant settings object\u2019s origin.\n    const origin = this[kRealm].settingsObject.origin\n\n    // 8. Let window be \"client\".\n    let window = 'client'\n\n    // 9. If request\u2019s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request\u2019s window.\n    if (\n      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&\n      sameOrigin(request.window, origin)\n    ) {\n      window = request.window\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`)\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if ('window' in init) {\n      window = 'no-window'\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request\u2019s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request\u2019s method.\n      method: request.method,\n      // header list A copy of request\u2019s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This\u2019s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request\u2019s priority.\n      priority: request.priority,\n      // origin request\u2019s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request\u2019s referrer.\n      referrer: request.referrer,\n      // referrer policy request\u2019s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request\u2019s mode.\n      mode: request.mode,\n      // credentials mode request\u2019s credentials mode.\n      credentials: request.credentials,\n      // cache mode request\u2019s cache mode.\n      cache: request.cache,\n      // redirect mode request\u2019s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request\u2019s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request\u2019s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request\u2019s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request\u2019s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request\u2019s URL list.\n      urlList: [...request.urlList]\n    })\n\n    const initHasKey = Object.keys(init).length !== 0\n\n    // 13. If init is not empty, then:\n    if (initHasKey) {\n      // 1. If request\u2019s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin'\n      }\n\n      // 2. Unset request\u2019s reload-navigation flag.\n      request.reloadNavigation = false\n\n      // 3. Unset request\u2019s history-navigation flag.\n      request.historyNavigation = false\n\n      // 4. Set request\u2019s origin to \"client\".\n      request.origin = 'client'\n\n      // 5. Set request\u2019s referrer to \"client\"\n      request.referrer = 'client'\n\n      // 6. Set request\u2019s referrer policy to the empty string.\n      request.referrerPolicy = ''\n\n      // 7. Set request\u2019s URL to request\u2019s current URL.\n      request.url = request.urlList[request.urlList.length - 1]\n\n      // 8. Set request\u2019s URL list to \u00AB request\u2019s URL \u00BB.\n      request.urlList = [request.url]\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer\n\n      // 2. If referrer is the empty string, then set request\u2019s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer'\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer\n        try {\n          parsedReferrer = new URL(referrer, baseUrl)\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, { cause: err })\n        }\n\n        // 3. If one of the following is true\n        // - parsedReferrer\u2019s scheme is \"about\" and path is the string \"client\"\n        // - parsedReferrer\u2019s origin is not same origin with origin\n        // then set request\u2019s referrer to \"client\".\n        if (\n          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||\n          (origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl))\n        ) {\n          request.referrer = 'client'\n        } else {\n          // 4. Otherwise, set request\u2019s referrer to parsedReferrer.\n          request.referrer = parsedReferrer\n        }\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request\u2019s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode\n    if (init.mode !== undefined) {\n      mode = init.mode\n    } else {\n      mode = fallbackMode\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      })\n    }\n\n    // 18. If mode is non-null, set request\u2019s mode to mode.\n    if (mode != null) {\n      request.mode = mode\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request\u2019s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials\n    }\n\n    // 18. If init[\"cache\"] exists, then set request\u2019s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache\n    }\n\n    // 21. If request\u2019s cache mode is \"only-if-cached\" and request\u2019s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\n        \"'only-if-cached' can be set only with 'same-origin' mode\"\n      )\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request\u2019s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request\u2019s integrity metadata to it.\n    if (init.integrity != null) {\n      request.integrity = String(init.integrity)\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request\u2019s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive)\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(method)) {\n        throw new TypeError(`'${method}' is not a valid HTTP method.`)\n      }\n\n      if (forbiddenMethodsSet.has(method.toUpperCase())) {\n        throw new TypeError(`'${method}' HTTP method is unsupported.`)\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethodRecord[method] ?? normalizeMethod(method)\n\n      // 4. Set request\u2019s method to method.\n      request.method = method\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal\n    }\n\n    // 27. Set this\u2019s request to request.\n    this[kState] = request\n\n    // 28. Set this\u2019s signal to a new AbortSignal object with this\u2019s relevant\n    // Realm.\n    // TODO: could this be simplified with AbortSignal.any\n    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n    const ac = new AbortController()\n    this[kSignal] = ac.signal\n    this[kSignal][kRealm] = this[kRealm]\n\n    // 29. If signal is not null, then make this\u2019s signal follow signal.\n    if (signal != null) {\n      if (\n        !signal ||\n        typeof signal.aborted !== 'boolean' ||\n        typeof signal.addEventListener !== 'function'\n      ) {\n        throw new TypeError(\n          \"Failed to construct 'Request': member signal is not of type AbortSignal.\"\n        )\n      }\n\n      if (signal.aborted) {\n        ac.abort(signal.reason)\n      } else {\n        // Keep a strong ref to ac while request object\n        // is alive. This is needed to prevent AbortController\n        // from being prematurely garbage collected.\n        // See, https://github.com/nodejs/undici/issues/1926.\n        this[kAbortController] = ac\n\n        const acRef = new WeakRef(ac)\n        const abort = function () {\n          const ac = acRef.deref()\n          if (ac !== undefined) {\n            ac.abort(this.reason)\n          }\n        }\n\n        // Third-party AbortControllers may not work with these.\n        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n        try {\n          // If the max amount of listeners is equal to the default, increase it\n          // This is only available in node >= v19.9.0\n          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {\n            setMaxListeners(100, signal)\n          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n            setMaxListeners(100, signal)\n          }\n        } catch {}\n\n        util.addAbortListener(signal, abort)\n        requestFinalizer.register(ac, { signal, abort })\n      }\n    }\n\n    // 30. Set this\u2019s headers to a new Headers object with this\u2019s relevant\n    // Realm, whose header list is request\u2019s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers(kConstruct)\n    this[kHeaders][kHeadersList] = request.headersList\n    this[kHeaders][kGuard] = 'request'\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 31. If this\u2019s request\u2019s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this\u2019s request\u2019s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethodsSet.has(request.method)) {\n        throw new TypeError(\n          `'${request.method} is unsupported in no-cors mode.`\n        )\n      }\n\n      // 2. Set this\u2019s headers\u2019s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors'\n    }\n\n    // 32. If init is not empty, then:\n    if (initHasKey) {\n      /** @type {HeadersList} */\n      const headersList = this[kHeaders][kHeadersList]\n      // 1. Let headers be a copy of this\u2019s headers and its associated header\n      // list.\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList)\n\n      // 3. Empty this\u2019s headers\u2019s header list.\n      headersList.clear()\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header\u2019s name/header\u2019s value to this\u2019s headers.\n      if (headers instanceof HeadersList) {\n        for (const [key, val] of headers) {\n          headersList.append(key, val)\n        }\n        // Note: Copy the `set-cookie` meta-data.\n        headersList.cookies = headers.cookies\n      } else {\n        // 5. Otherwise, fill this\u2019s headers with headers.\n        fillHeaders(this[kHeaders], headers)\n      }\n    }\n\n    // 33. Let inputBody be input\u2019s request\u2019s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request\u2019s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if (\n      (init.body != null || inputBody != null) &&\n      (request.method === 'GET' || request.method === 'HEAD')\n    ) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.')\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request\u2019s keepalive.\n      const [extractedBody, contentType] = extractBody(\n        init.body,\n        request.keepalive\n      )\n      initBody = extractedBody\n\n      // 3, If Content-Type is non-null and this\u2019s headers\u2019s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this\u2019s headers.\n      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {\n        this[kHeaders].append('content-type', contentType)\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody\u2019s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.')\n      }\n\n      // 2. If this\u2019s request\u2019s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError(\n          'If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"'\n        )\n      }\n\n      // 3. Set this\u2019s request\u2019s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError(\n          'Cannot construct a Request with a Request object that has already been used.'\n        )\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream()\n      inputBody.stream.pipeThrough(identityTransform)\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      }\n    }\n\n    // 41. Set this\u2019s request\u2019s body to finalBody.\n    this[kState].body = finalBody\n  }\n\n  // Returns request\u2019s HTTP method, which is \"GET\" by default.\n  get method () {\n    webidl.brandCheck(this, Request)\n\n    // The method getter steps are to return this\u2019s request\u2019s method.\n    return this[kState].method\n  }\n\n  // Returns the URL of request as a string.\n  get url () {\n    webidl.brandCheck(this, Request)\n\n    // The url getter steps are to return this\u2019s request\u2019s URL, serialized.\n    return URLSerializer(this[kState].url)\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers () {\n    webidl.brandCheck(this, Request)\n\n    // The headers getter steps are to return this\u2019s headers.\n    return this[kHeaders]\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination () {\n    webidl.brandCheck(this, Request)\n\n    // The destination getter are to return this\u2019s request\u2019s destination.\n    return this[kState].destination\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global\u2019s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this\u2019s request\u2019s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return ''\n    }\n\n    // 2. If this\u2019s request\u2019s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client'\n    }\n\n    // Return this\u2019s request\u2019s referrer, serialized.\n    return this[kState].referrer.toString()\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request\u2019s\n  // referrer.\n  get referrerPolicy () {\n    webidl.brandCheck(this, Request)\n\n    // The referrerPolicy getter steps are to return this\u2019s request\u2019s referrer policy.\n    return this[kState].referrerPolicy\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode () {\n    webidl.brandCheck(this, Request)\n\n    // The mode getter steps are to return this\u2019s request\u2019s mode.\n    return this[kState].mode\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials () {\n    // The credentials getter steps are to return this\u2019s request\u2019s credentials mode.\n    return this[kState].credentials\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser\u2019s cache when fetching.\n  get cache () {\n    webidl.brandCheck(this, Request)\n\n    // The cache getter steps are to return this\u2019s request\u2019s cache mode.\n    return this[kState].cache\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect () {\n    webidl.brandCheck(this, Request)\n\n    // The redirect getter steps are to return this\u2019s request\u2019s redirect mode.\n    return this[kState].redirect\n  }\n\n  // Returns request\u2019s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity () {\n    webidl.brandCheck(this, Request)\n\n    // The integrity getter steps are to return this\u2019s request\u2019s integrity\n    // metadata.\n    return this[kState].integrity\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive () {\n    webidl.brandCheck(this, Request)\n\n    // The keepalive getter steps are to return this\u2019s request\u2019s keepalive.\n    return this[kState].keepalive\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isReloadNavigation getter steps are to return true if this\u2019s\n    // request\u2019s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isHistoryNavigation getter steps are to return true if this\u2019s request\u2019s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal () {\n    webidl.brandCheck(this, Request)\n\n    // The signal getter steps are to return this\u2019s signal.\n    return this[kSignal]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Request)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Request)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  get duplex () {\n    webidl.brandCheck(this, Request)\n\n    return 'half'\n  }\n\n  // Returns a clone of request.\n  clone () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable')\n    }\n\n    // 2. Let clonedRequest be the result of cloning this\u2019s request.\n    const clonedRequest = cloneRequest(this[kState])\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this\u2019s headers\u2019s guard, and this\u2019s relevant Realm.\n    const clonedRequestObject = new Request(kConstruct)\n    clonedRequestObject[kState] = clonedRequest\n    clonedRequestObject[kRealm] = this[kRealm]\n    clonedRequestObject[kHeaders] = new Headers(kConstruct)\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    // 4. Make clonedRequestObject\u2019s signal follow this\u2019s signal.\n    const ac = new AbortController()\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason)\n    } else {\n      util.addAbortListener(\n        this.signal,\n        () => {\n          ac.abort(this.signal.reason)\n        }\n      )\n    }\n    clonedRequestObject[kSignal] = ac.signal\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject\n  }\n}\n\nmixinBody(Request)\n\nfunction makeRequest (init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList()\n  }\n  request.url = request.urlList[0]\n  return request\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest (request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({ ...request, body: null })\n\n  // 2. If request\u2019s body is non-null, set newRequest\u2019s body to the\n  // result of cloning request\u2019s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body)\n  }\n\n  // 3. Return newRequest.\n  return newRequest\n}\n\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n})\n\nwebidl.converters.Request = webidl.interfaceConverter(\n  Request\n)\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (V instanceof Request) {\n    return webidl.converters.Request(V)\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nwebidl.converters.AbortSignal = webidl.interfaceConverter(\n  AbortSignal\n)\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n  {\n    key: 'method',\n    converter: webidl.converters.ByteString\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  },\n  {\n    key: 'body',\n    converter: webidl.nullableConverter(\n      webidl.converters.BodyInit\n    )\n  },\n  {\n    key: 'referrer',\n    converter: webidl.converters.USVString\n  },\n  {\n    key: 'referrerPolicy',\n    converter: webidl.converters.DOMString,\n    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n    allowedValues: referrerPolicy\n  },\n  {\n    key: 'mode',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#concept-request-mode\n    allowedValues: requestMode\n  },\n  {\n    key: 'credentials',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcredentials\n    allowedValues: requestCredentials\n  },\n  {\n    key: 'cache',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcache\n    allowedValues: requestCache\n  },\n  {\n    key: 'redirect',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestredirect\n    allowedValues: requestRedirect\n  },\n  {\n    key: 'integrity',\n    converter: webidl.converters.DOMString\n  },\n  {\n    key: 'keepalive',\n    converter: webidl.converters.boolean\n  },\n  {\n    key: 'signal',\n    converter: webidl.nullableConverter(\n      (signal) => webidl.converters.AbortSignal(\n        signal,\n        { strict: false }\n      )\n    )\n  },\n  {\n    key: 'window',\n    converter: webidl.converters.any\n  },\n  {\n    key: 'duplex',\n    converter: webidl.converters.DOMString,\n    allowedValues: requestDuplex\n  }\n])\n\nmodule.exports = { Request, makeRequest }\n", "// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst {\n  Response,\n  makeNetworkError,\n  makeAppropriateNetworkError,\n  filterResponse,\n  makeResponse\n} = require('./response')\nconst { Headers } = require('./headers')\nconst { Request, makeRequest } = require('./request')\nconst zlib = require('zlib')\nconst {\n  bytesMatch,\n  makePolicyContainer,\n  clonePolicyContainer,\n  requestBadPort,\n  TAOCheck,\n  appendRequestOriginHeader,\n  responseLocationURL,\n  requestCurrentURL,\n  setRequestReferrerPolicyOnRedirect,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  createOpaqueTimingInfo,\n  appendFetchMetadata,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  determineRequestsReferrer,\n  coarsenedSharedCurrentTime,\n  createDeferredPromise,\n  isBlobLike,\n  sameOrigin,\n  isCancelled,\n  isAborted,\n  isErrorLike,\n  fullyReadBody,\n  readableStreamClose,\n  isomorphicEncode,\n  urlIsLocal,\n  urlIsHttpHttpsScheme,\n  urlHasHttpsScheme\n} = require('./util')\nconst { kState, kHeaders, kGuard, kRealm } = require('./symbols')\nconst assert = require('assert')\nconst { safelyExtractBody } = require('./body')\nconst {\n  redirectStatusSet,\n  nullBodyStatus,\n  safeMethodsSet,\n  requestBodyHeader,\n  subresourceSet,\n  DOMException\n} = require('./constants')\nconst { kHeadersList } = require('../core/symbols')\nconst EE = require('events')\nconst { Readable, pipeline } = require('stream')\nconst { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require('../core/util')\nconst { dataURLProcessor, serializeAMimeType } = require('./dataURL')\nconst { TransformStream } = require('stream/web')\nconst { getGlobalDispatcher } = require('../global')\nconst { webidl } = require('./webidl')\nconst { STATUS_CODES } = require('http')\nconst GET_OR_HEAD = ['GET', 'HEAD']\n\n/** @type {import('buffer').resolveObjectURL} */\nlet resolveObjectURL\nlet ReadableStream = globalThis.ReadableStream\n\nclass Fetch extends EE {\n  constructor (dispatcher) {\n    super()\n\n    this.dispatcher = dispatcher\n    this.connection = null\n    this.dump = false\n    this.state = 'ongoing'\n    // 2 terminated listeners get added per request,\n    // but only 1 gets removed. If there are 20 redirects,\n    // 21 listeners will be added.\n    // See https://github.com/nodejs/undici/issues/1711\n    // TODO (fix): Find and fix root cause for leaked listener.\n    this.setMaxListeners(21)\n  }\n\n  terminate (reason) {\n    if (this.state !== 'ongoing') {\n      return\n    }\n\n    this.state = 'terminated'\n    this.connection?.destroy(reason)\n    this.emit('terminated', reason)\n  }\n\n  // https://fetch.spec.whatwg.org/#fetch-controller-abort\n  abort (error) {\n    if (this.state !== 'ongoing') {\n      return\n    }\n\n    // 1. Set controller\u2019s state to \"aborted\".\n    this.state = 'aborted'\n\n    // 2. Let fallbackError be an \"AbortError\" DOMException.\n    // 3. Set error to fallbackError if it is not given.\n    if (!error) {\n      error = new DOMException('The operation was aborted.', 'AbortError')\n    }\n\n    // 4. Let serializedError be StructuredSerialize(error).\n    //    If that threw an exception, catch it, and let\n    //    serializedError be StructuredSerialize(fallbackError).\n\n    // 5. Set controller\u2019s serialized abort reason to serializedError.\n    this.serializedAbortReason = error\n\n    this.connection?.destroy(error)\n    this.emit('terminated', error)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-method\nfunction fetch (input, init = {}) {\n  webidl.argumentLengthCheck(arguments, 1, { header: 'globalThis.fetch' })\n\n  // 1. Let p be a new promise.\n  const p = createDeferredPromise()\n\n  // 2. Let requestObject be the result of invoking the initial value of\n  // Request as constructor with input and init as arguments. If this throws\n  // an exception, reject p with it and return p.\n  let requestObject\n\n  try {\n    requestObject = new Request(input, init)\n  } catch (e) {\n    p.reject(e)\n    return p.promise\n  }\n\n  // 3. Let request be requestObject\u2019s request.\n  const request = requestObject[kState]\n\n  // 4. If requestObject\u2019s signal\u2019s aborted flag is set, then:\n  if (requestObject.signal.aborted) {\n    // 1. Abort the fetch() call with p, request, null, and\n    //    requestObject\u2019s signal\u2019s abort reason.\n    abortFetch(p, request, null, requestObject.signal.reason)\n\n    // 2. Return p.\n    return p.promise\n  }\n\n  // 5. Let globalObject be request\u2019s client\u2019s global object.\n  const globalObject = request.client.globalObject\n\n  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set\n  // request\u2019s service-workers mode to \"none\".\n  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {\n    request.serviceWorkers = 'none'\n  }\n\n  // 7. Let responseObject be null.\n  let responseObject = null\n\n  // 8. Let relevantRealm be this\u2019s relevant Realm.\n  const relevantRealm = null\n\n  // 9. Let locallyAborted be false.\n  let locallyAborted = false\n\n  // 10. Let controller be null.\n  let controller = null\n\n  // 11. Add the following abort steps to requestObject\u2019s signal:\n  addAbortListener(\n    requestObject.signal,\n    () => {\n      // 1. Set locallyAborted to true.\n      locallyAborted = true\n\n      // 2. Assert: controller is non-null.\n      assert(controller != null)\n\n      // 3. Abort controller with requestObject\u2019s signal\u2019s abort reason.\n      controller.abort(requestObject.signal.reason)\n\n      // 4. Abort the fetch() call with p, request, responseObject,\n      //    and requestObject\u2019s signal\u2019s abort reason.\n      abortFetch(p, request, responseObject, requestObject.signal.reason)\n    }\n  )\n\n  // 12. Let handleFetchDone given response response be to finalize and\n  // report timing with response, globalObject, and \"fetch\".\n  const handleFetchDone = (response) =>\n    finalizeAndReportTiming(response, 'fetch')\n\n  // 13. Set controller to the result of calling fetch given request,\n  // with processResponseEndOfBody set to handleFetchDone, and processResponse\n  // given response being these substeps:\n\n  const processResponse = (response) => {\n    // 1. If locallyAborted is true, terminate these substeps.\n    if (locallyAborted) {\n      return Promise.resolve()\n    }\n\n    // 2. If response\u2019s aborted flag is set, then:\n    if (response.aborted) {\n      // 1. Let deserializedError be the result of deserialize a serialized\n      //    abort reason given controller\u2019s serialized abort reason and\n      //    relevantRealm.\n\n      // 2. Abort the fetch() call with p, request, responseObject, and\n      //    deserializedError.\n\n      abortFetch(p, request, responseObject, controller.serializedAbortReason)\n      return Promise.resolve()\n    }\n\n    // 3. If response is a network error, then reject p with a TypeError\n    // and terminate these substeps.\n    if (response.type === 'error') {\n      p.reject(\n        Object.assign(new TypeError('fetch failed'), { cause: response.error })\n      )\n      return Promise.resolve()\n    }\n\n    // 4. Set responseObject to the result of creating a Response object,\n    // given response, \"immutable\", and relevantRealm.\n    responseObject = new Response()\n    responseObject[kState] = response\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kHeadersList] = response.headersList\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 5. Resolve p with responseObject.\n    p.resolve(responseObject)\n  }\n\n  controller = fetching({\n    request,\n    processResponseEndOfBody: handleFetchDone,\n    processResponse,\n    dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici\n  })\n\n  // 14. Return p.\n  return p.promise\n}\n\n// https://fetch.spec.whatwg.org/#finalize-and-report-timing\nfunction finalizeAndReportTiming (response, initiatorType = 'other') {\n  // 1. If response is an aborted network error, then return.\n  if (response.type === 'error' && response.aborted) {\n    return\n  }\n\n  // 2. If response\u2019s URL list is null or empty, then return.\n  if (!response.urlList?.length) {\n    return\n  }\n\n  // 3. Let originalURL be response\u2019s URL list[0].\n  const originalURL = response.urlList[0]\n\n  // 4. Let timingInfo be response\u2019s timing info.\n  let timingInfo = response.timingInfo\n\n  // 5. Let cacheState be response\u2019s cache state.\n  let cacheState = response.cacheState\n\n  // 6. If originalURL\u2019s scheme is not an HTTP(S) scheme, then return.\n  if (!urlIsHttpHttpsScheme(originalURL)) {\n    return\n  }\n\n  // 7. If timingInfo is null, then return.\n  if (timingInfo === null) {\n    return\n  }\n\n  // 8. If response\u2019s timing allow passed flag is not set, then:\n  if (!response.timingAllowPassed) {\n    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.\n    timingInfo = createOpaqueTimingInfo({\n      startTime: timingInfo.startTime\n    })\n\n    //  2. Set cacheState to the empty string.\n    cacheState = ''\n  }\n\n  // 9. Set timingInfo\u2019s end time to the coarsened shared current time\n  // given global\u2019s relevant settings object\u2019s cross-origin isolated\n  // capability.\n  // TODO: given global\u2019s relevant settings object\u2019s cross-origin isolated\n  // capability?\n  timingInfo.endTime = coarsenedSharedCurrentTime()\n\n  // 10. Set response\u2019s timing info to timingInfo.\n  response.timingInfo = timingInfo\n\n  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,\n  // global, and cacheState.\n  markResourceTiming(\n    timingInfo,\n    originalURL,\n    initiatorType,\n    globalThis,\n    cacheState\n  )\n}\n\n// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\nfunction markResourceTiming (timingInfo, originalURL, initiatorType, globalThis, cacheState) {\n  if (nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 2)) {\n    performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#abort-fetch\nfunction abortFetch (p, request, responseObject, error) {\n  // Note: AbortSignal.reason was added in node v17.2.0\n  // which would give us an undefined error to reject with.\n  // Remove this once node v16 is no longer supported.\n  if (!error) {\n    error = new DOMException('The operation was aborted.', 'AbortError')\n  }\n\n  // 1. Reject promise with error.\n  p.reject(error)\n\n  // 2. If request\u2019s body is not null and is readable, then cancel request\u2019s\n  // body with error.\n  if (request.body != null && isReadable(request.body?.stream)) {\n    request.body.stream.cancel(error).catch((err) => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return\n      }\n      throw err\n    })\n  }\n\n  // 3. If responseObject is null, then return.\n  if (responseObject == null) {\n    return\n  }\n\n  // 4. Let response be responseObject\u2019s response.\n  const response = responseObject[kState]\n\n  // 5. If response\u2019s body is not null and is readable, then error response\u2019s\n  // body with error.\n  if (response.body != null && isReadable(response.body?.stream)) {\n    response.body.stream.cancel(error).catch((err) => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return\n      }\n      throw err\n    })\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetching\nfunction fetching ({\n  request,\n  processRequestBodyChunkLength,\n  processRequestEndOfBody,\n  processResponse,\n  processResponseEndOfBody,\n  processResponseConsumeBody,\n  useParallelQueue = false,\n  dispatcher // undici\n}) {\n  // 1. Let taskDestination be null.\n  let taskDestination = null\n\n  // 2. Let crossOriginIsolatedCapability be false.\n  let crossOriginIsolatedCapability = false\n\n  // 3. If request\u2019s client is non-null, then:\n  if (request.client != null) {\n    // 1. Set taskDestination to request\u2019s client\u2019s global object.\n    taskDestination = request.client.globalObject\n\n    // 2. Set crossOriginIsolatedCapability to request\u2019s client\u2019s cross-origin\n    // isolated capability.\n    crossOriginIsolatedCapability =\n      request.client.crossOriginIsolatedCapability\n  }\n\n  // 4. If useParallelQueue is true, then set taskDestination to the result of\n  // starting a new parallel queue.\n  // TODO\n\n  // 5. Let timingInfo be a new fetch timing info whose start time and\n  // post-redirect start time are the coarsened shared current time given\n  // crossOriginIsolatedCapability.\n  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability)\n  const timingInfo = createOpaqueTimingInfo({\n    startTime: currenTime\n  })\n\n  // 6. Let fetchParams be a new fetch params whose\n  // request is request,\n  // timing info is timingInfo,\n  // process request body chunk length is processRequestBodyChunkLength,\n  // process request end-of-body is processRequestEndOfBody,\n  // process response is processResponse,\n  // process response consume body is processResponseConsumeBody,\n  // process response end-of-body is processResponseEndOfBody,\n  // task destination is taskDestination,\n  // and cross-origin isolated capability is crossOriginIsolatedCapability.\n  const fetchParams = {\n    controller: new Fetch(dispatcher),\n    request,\n    timingInfo,\n    processRequestBodyChunkLength,\n    processRequestEndOfBody,\n    processResponse,\n    processResponseConsumeBody,\n    processResponseEndOfBody,\n    taskDestination,\n    crossOriginIsolatedCapability\n  }\n\n  // 7. If request\u2019s body is a byte sequence, then set request\u2019s body to\n  //    request\u2019s body as a body.\n  // NOTE: Since fetching is only called from fetch, body should already be\n  // extracted.\n  assert(!request.body || request.body.stream)\n\n  // 8. If request\u2019s window is \"client\", then set request\u2019s window to request\u2019s\n  // client, if request\u2019s client\u2019s global object is a Window object; otherwise\n  // \"no-window\".\n  if (request.window === 'client') {\n    // TODO: What if request.client is null?\n    request.window =\n      request.client?.globalObject?.constructor?.name === 'Window'\n        ? request.client\n        : 'no-window'\n  }\n\n  // 9. If request\u2019s origin is \"client\", then set request\u2019s origin to request\u2019s\n  // client\u2019s origin.\n  if (request.origin === 'client') {\n    // TODO: What if request.client is null?\n    request.origin = request.client?.origin\n  }\n\n  // 10. If all of the following conditions are true:\n  // TODO\n\n  // 11. If request\u2019s policy container is \"client\", then:\n  if (request.policyContainer === 'client') {\n    // 1. If request\u2019s client is non-null, then set request\u2019s policy\n    // container to a clone of request\u2019s client\u2019s policy container. [HTML]\n    if (request.client != null) {\n      request.policyContainer = clonePolicyContainer(\n        request.client.policyContainer\n      )\n    } else {\n      // 2. Otherwise, set request\u2019s policy container to a new policy\n      // container.\n      request.policyContainer = makePolicyContainer()\n    }\n  }\n\n  // 12. If request\u2019s header list does not contain `Accept`, then:\n  if (!request.headersList.contains('accept')) {\n    // 1. Let value be `*/*`.\n    const value = '*/*'\n\n    // 2. A user agent should set value to the first matching statement, if\n    // any, switching on request\u2019s destination:\n    // \"document\"\n    // \"frame\"\n    // \"iframe\"\n    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`\n    // \"image\"\n    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`\n    // \"style\"\n    // `text/css,*/*;q=0.1`\n    // TODO\n\n    // 3. Append `Accept`/value to request\u2019s header list.\n    request.headersList.append('accept', value)\n  }\n\n  // 13. If request\u2019s header list does not contain `Accept-Language`, then\n  // user agents should append `Accept-Language`/an appropriate value to\n  // request\u2019s header list.\n  if (!request.headersList.contains('accept-language')) {\n    request.headersList.append('accept-language', '*')\n  }\n\n  // 14. If request\u2019s priority is null, then use request\u2019s initiator and\n  // destination appropriately in setting request\u2019s priority to a\n  // user-agent-defined object.\n  if (request.priority === null) {\n    // TODO\n  }\n\n  // 15. If request is a subresource request, then:\n  if (subresourceSet.has(request.destination)) {\n    // TODO\n  }\n\n  // 16. Run main fetch given fetchParams.\n  mainFetch(fetchParams)\n    .catch(err => {\n      fetchParams.controller.terminate(err)\n    })\n\n  // 17. Return fetchParam's controller\n  return fetchParams.controller\n}\n\n// https://fetch.spec.whatwg.org/#concept-main-fetch\nasync function mainFetch (fetchParams, recursive = false) {\n  // 1. Let request be fetchParams\u2019s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. If request\u2019s local-URLs-only flag is set and request\u2019s current URL is\n  // not local, then set response to a network error.\n  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {\n    response = makeNetworkError('local URLs only')\n  }\n\n  // 4. Run report Content Security Policy violations for request.\n  // TODO\n\n  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.\n  tryUpgradeRequestToAPotentiallyTrustworthyURL(request)\n\n  // 6. If should request be blocked due to a bad port, should fetching request\n  // be blocked as mixed content, or should request be blocked by Content\n  // Security Policy returns blocked, then set response to a network error.\n  if (requestBadPort(request) === 'blocked') {\n    response = makeNetworkError('bad port')\n  }\n  // TODO: should fetching request be blocked as mixed content?\n  // TODO: should request be blocked by Content Security Policy?\n\n  // 7. If request\u2019s referrer policy is the empty string, then set request\u2019s\n  // referrer policy to request\u2019s policy container\u2019s referrer policy.\n  if (request.referrerPolicy === '') {\n    request.referrerPolicy = request.policyContainer.referrerPolicy\n  }\n\n  // 8. If request\u2019s referrer is not \"no-referrer\", then set request\u2019s\n  // referrer to the result of invoking determine request\u2019s referrer.\n  if (request.referrer !== 'no-referrer') {\n    request.referrer = determineRequestsReferrer(request)\n  }\n\n  // 9. Set request\u2019s current URL\u2019s scheme to \"https\" if all of the following\n  // conditions are true:\n  // - request\u2019s current URL\u2019s scheme is \"http\"\n  // - request\u2019s current URL\u2019s host is a domain\n  // - Matching request\u2019s current URL\u2019s host per Known HSTS Host Domain Name\n  //   Matching results in either a superdomain match with an asserted\n  //   includeSubDomains directive or a congruent match (with or without an\n  //   asserted includeSubDomains directive). [HSTS]\n  // TODO\n\n  // 10. If recursive is false, then run the remaining steps in parallel.\n  // TODO\n\n  // 11. If response is null, then set response to the result of running\n  // the steps corresponding to the first matching statement:\n  if (response === null) {\n    response = await (async () => {\n      const currentURL = requestCurrentURL(request)\n\n      if (\n        // - request\u2019s current URL\u2019s origin is same origin with request\u2019s origin,\n        //   and request\u2019s response tainting is \"basic\"\n        (sameOrigin(currentURL, request.url) && request.responseTainting === 'basic') ||\n        // request\u2019s current URL\u2019s scheme is \"data\"\n        (currentURL.protocol === 'data:') ||\n        // - request\u2019s mode is \"navigate\" or \"websocket\"\n        (request.mode === 'navigate' || request.mode === 'websocket')\n      ) {\n        // 1. Set request\u2019s response tainting to \"basic\".\n        request.responseTainting = 'basic'\n\n        // 2. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams)\n      }\n\n      // request\u2019s mode is \"same-origin\"\n      if (request.mode === 'same-origin') {\n        // 1. Return a network error.\n        return makeNetworkError('request mode cannot be \"same-origin\"')\n      }\n\n      // request\u2019s mode is \"no-cors\"\n      if (request.mode === 'no-cors') {\n        // 1. If request\u2019s redirect mode is not \"follow\", then return a network\n        // error.\n        if (request.redirect !== 'follow') {\n          return makeNetworkError(\n            'redirect mode cannot be \"follow\" for \"no-cors\" request'\n          )\n        }\n\n        // 2. Set request\u2019s response tainting to \"opaque\".\n        request.responseTainting = 'opaque'\n\n        // 3. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams)\n      }\n\n      // request\u2019s current URL\u2019s scheme is not an HTTP(S) scheme\n      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {\n        // Return a network error.\n        return makeNetworkError('URL scheme must be a HTTP(S) scheme')\n      }\n\n      // - request\u2019s use-CORS-preflight flag is set\n      // - request\u2019s unsafe-request flag is set and either request\u2019s method is\n      //   not a CORS-safelisted method or CORS-unsafe request-header names with\n      //   request\u2019s header list is not empty\n      //    1. Set request\u2019s response tainting to \"cors\".\n      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch\n      //    given fetchParams and true.\n      //    3. If corsWithPreflightResponse is a network error, then clear cache\n      //    entries using request.\n      //    4. Return corsWithPreflightResponse.\n      // TODO\n\n      // Otherwise\n      //    1. Set request\u2019s response tainting to \"cors\".\n      request.responseTainting = 'cors'\n\n      //    2. Return the result of running HTTP fetch given fetchParams.\n      return await httpFetch(fetchParams)\n    })()\n  }\n\n  // 12. If recursive is true, then return response.\n  if (recursive) {\n    return response\n  }\n\n  // 13. If response is not a network error and response is not a filtered\n  // response, then:\n  if (response.status !== 0 && !response.internalResponse) {\n    // If request\u2019s response tainting is \"cors\", then:\n    if (request.responseTainting === 'cors') {\n      // 1. Let headerNames be the result of extracting header list values\n      // given `Access-Control-Expose-Headers` and response\u2019s header list.\n      // TODO\n      // 2. If request\u2019s credentials mode is not \"include\" and headerNames\n      // contains `*`, then set response\u2019s CORS-exposed header-name list to\n      // all unique header names in response\u2019s header list.\n      // TODO\n      // 3. Otherwise, if headerNames is not null or failure, then set\n      // response\u2019s CORS-exposed header-name list to headerNames.\n      // TODO\n    }\n\n    // Set response to the following filtered response with response as its\n    // internal response, depending on request\u2019s response tainting:\n    if (request.responseTainting === 'basic') {\n      response = filterResponse(response, 'basic')\n    } else if (request.responseTainting === 'cors') {\n      response = filterResponse(response, 'cors')\n    } else if (request.responseTainting === 'opaque') {\n      response = filterResponse(response, 'opaque')\n    } else {\n      assert(false)\n    }\n  }\n\n  // 14. Let internalResponse be response, if response is a network error,\n  // and response\u2019s internal response otherwise.\n  let internalResponse =\n    response.status === 0 ? response : response.internalResponse\n\n  // 15. If internalResponse\u2019s URL list is empty, then set it to a clone of\n  // request\u2019s URL list.\n  if (internalResponse.urlList.length === 0) {\n    internalResponse.urlList.push(...request.urlList)\n  }\n\n  // 16. If request\u2019s timing allow failed flag is unset, then set\n  // internalResponse\u2019s timing allow passed flag.\n  if (!request.timingAllowFailed) {\n    response.timingAllowPassed = true\n  }\n\n  // 17. If response is not a network error and any of the following returns\n  // blocked\n  // - should internalResponse to request be blocked as mixed content\n  // - should internalResponse to request be blocked by Content Security Policy\n  // - should internalResponse to request be blocked due to its MIME type\n  // - should internalResponse to request be blocked due to nosniff\n  // TODO\n\n  // 18. If response\u2019s type is \"opaque\", internalResponse\u2019s status is 206,\n  // internalResponse\u2019s range-requested flag is set, and request\u2019s header\n  // list does not contain `Range`, then set response and internalResponse\n  // to a network error.\n  if (\n    response.type === 'opaque' &&\n    internalResponse.status === 206 &&\n    internalResponse.rangeRequested &&\n    !request.headers.contains('range')\n  ) {\n    response = internalResponse = makeNetworkError()\n  }\n\n  // 19. If response is not a network error and either request\u2019s method is\n  // `HEAD` or `CONNECT`, or internalResponse\u2019s status is a null body status,\n  // set internalResponse\u2019s body to null and disregard any enqueuing toward\n  // it (if any).\n  if (\n    response.status !== 0 &&\n    (request.method === 'HEAD' ||\n      request.method === 'CONNECT' ||\n      nullBodyStatus.includes(internalResponse.status))\n  ) {\n    internalResponse.body = null\n    fetchParams.controller.dump = true\n  }\n\n  // 20. If request\u2019s integrity metadata is not the empty string, then:\n  if (request.integrity) {\n    // 1. Let processBodyError be this step: run fetch finale given fetchParams\n    // and a network error.\n    const processBodyError = (reason) =>\n      fetchFinale(fetchParams, makeNetworkError(reason))\n\n    // 2. If request\u2019s response tainting is \"opaque\", or response\u2019s body is null,\n    // then run processBodyError and abort these steps.\n    if (request.responseTainting === 'opaque' || response.body == null) {\n      processBodyError(response.error)\n      return\n    }\n\n    // 3. Let processBody given bytes be these steps:\n    const processBody = (bytes) => {\n      // 1. If bytes do not match request\u2019s integrity metadata,\n      // then run processBodyError and abort these steps. [SRI]\n      if (!bytesMatch(bytes, request.integrity)) {\n        processBodyError('integrity mismatch')\n        return\n      }\n\n      // 2. Set response\u2019s body to bytes as a body.\n      response.body = safelyExtractBody(bytes)[0]\n\n      // 3. Run fetch finale given fetchParams and response.\n      fetchFinale(fetchParams, response)\n    }\n\n    // 4. Fully read response\u2019s body given processBody and processBodyError.\n    await fullyReadBody(response.body, processBody, processBodyError)\n  } else {\n    // 21. Otherwise, run fetch finale given fetchParams and response.\n    fetchFinale(fetchParams, response)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#concept-scheme-fetch\n// given a fetch params fetchParams\nfunction schemeFetch (fetchParams) {\n  // Note: since the connection is destroyed on redirect, which sets fetchParams to a\n  // cancelled state, we do not want this condition to trigger *unless* there have been\n  // no redirects. See https://github.com/nodejs/undici/issues/1776\n  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {\n    return Promise.resolve(makeAppropriateNetworkError(fetchParams))\n  }\n\n  // 2. Let request be fetchParams\u2019s request.\n  const { request } = fetchParams\n\n  const { protocol: scheme } = requestCurrentURL(request)\n\n  // 3. Switch on request\u2019s current URL\u2019s scheme and run the associated steps:\n  switch (scheme) {\n    case 'about:': {\n      // If request\u2019s current URL\u2019s path is the string \"blank\", then return a new response\n      // whose status message is `OK`, header list is \u00AB (`Content-Type`, `text/html;charset=utf-8`) \u00BB,\n      // and body is the empty byte sequence as a body.\n\n      // Otherwise, return a network error.\n      return Promise.resolve(makeNetworkError('about scheme is not supported'))\n    }\n    case 'blob:': {\n      if (!resolveObjectURL) {\n        resolveObjectURL = require('buffer').resolveObjectURL\n      }\n\n      // 1. Let blobURLEntry be request\u2019s current URL\u2019s blob URL entry.\n      const blobURLEntry = requestCurrentURL(request)\n\n      // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56\n      // Buffer.resolveObjectURL does not ignore URL queries.\n      if (blobURLEntry.search.length !== 0) {\n        return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'))\n      }\n\n      const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString())\n\n      // 2. If request\u2019s method is not `GET`, blobURLEntry is null, or blobURLEntry\u2019s\n      //    object is not a Blob object, then return a network error.\n      if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {\n        return Promise.resolve(makeNetworkError('invalid method'))\n      }\n\n      // 3. Let bodyWithType be the result of safely extracting blobURLEntry\u2019s object.\n      const bodyWithType = safelyExtractBody(blobURLEntryObject)\n\n      // 4. Let body be bodyWithType\u2019s body.\n      const body = bodyWithType[0]\n\n      // 5. Let length be body\u2019s length, serialized and isomorphic encoded.\n      const length = isomorphicEncode(`${body.length}`)\n\n      // 6. Let type be bodyWithType\u2019s type if it is non-null; otherwise the empty byte sequence.\n      const type = bodyWithType[1] ?? ''\n\n      // 7. Return a new response whose status message is `OK`, header list is\n      //    \u00AB (`Content-Length`, length), (`Content-Type`, type) \u00BB, and body is body.\n      const response = makeResponse({\n        statusText: 'OK',\n        headersList: [\n          ['content-length', { name: 'Content-Length', value: length }],\n          ['content-type', { name: 'Content-Type', value: type }]\n        ]\n      })\n\n      response.body = body\n\n      return Promise.resolve(response)\n    }\n    case 'data:': {\n      // 1. Let dataURLStruct be the result of running the\n      //    data: URL processor on request\u2019s current URL.\n      const currentURL = requestCurrentURL(request)\n      const dataURLStruct = dataURLProcessor(currentURL)\n\n      // 2. If dataURLStruct is failure, then return a\n      //    network error.\n      if (dataURLStruct === 'failure') {\n        return Promise.resolve(makeNetworkError('failed to fetch the data URL'))\n      }\n\n      // 3. Let mimeType be dataURLStruct\u2019s MIME type, serialized.\n      const mimeType = serializeAMimeType(dataURLStruct.mimeType)\n\n      // 4. Return a response whose status message is `OK`,\n      //    header list is \u00AB (`Content-Type`, mimeType) \u00BB,\n      //    and body is dataURLStruct\u2019s body as a body.\n      return Promise.resolve(makeResponse({\n        statusText: 'OK',\n        headersList: [\n          ['content-type', { name: 'Content-Type', value: mimeType }]\n        ],\n        body: safelyExtractBody(dataURLStruct.body)[0]\n      }))\n    }\n    case 'file:': {\n      // For now, unfortunate as it is, file URLs are left as an exercise for the reader.\n      // When in doubt, return a network error.\n      return Promise.resolve(makeNetworkError('not implemented... yet...'))\n    }\n    case 'http:':\n    case 'https:': {\n      // Return the result of running HTTP fetch given fetchParams.\n\n      return httpFetch(fetchParams)\n        .catch((err) => makeNetworkError(err))\n    }\n    default: {\n      return Promise.resolve(makeNetworkError('unknown scheme'))\n    }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#finalize-response\nfunction finalizeResponse (fetchParams, response) {\n  // 1. Set fetchParams\u2019s request\u2019s done flag.\n  fetchParams.request.done = true\n\n  // 2, If fetchParams\u2019s process response done is not null, then queue a fetch\n  // task to run fetchParams\u2019s process response done given response, with\n  // fetchParams\u2019s task destination.\n  if (fetchParams.processResponseDone != null) {\n    queueMicrotask(() => fetchParams.processResponseDone(response))\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-finale\nfunction fetchFinale (fetchParams, response) {\n  // 1. If response is a network error, then:\n  if (response.type === 'error') {\n    // 1. Set response\u2019s URL list to \u00AB fetchParams\u2019s request\u2019s URL list[0] \u00BB.\n    response.urlList = [fetchParams.request.urlList[0]]\n\n    // 2. Set response\u2019s timing info to the result of creating an opaque timing\n    // info for fetchParams\u2019s timing info.\n    response.timingInfo = createOpaqueTimingInfo({\n      startTime: fetchParams.timingInfo.startTime\n    })\n  }\n\n  // 2. Let processResponseEndOfBody be the following steps:\n  const processResponseEndOfBody = () => {\n    // 1. Set fetchParams\u2019s request\u2019s done flag.\n    fetchParams.request.done = true\n\n    // If fetchParams\u2019s process response end-of-body is not null,\n    // then queue a fetch task to run fetchParams\u2019s process response\n    // end-of-body given response with fetchParams\u2019s task destination.\n    if (fetchParams.processResponseEndOfBody != null) {\n      queueMicrotask(() => fetchParams.processResponseEndOfBody(response))\n    }\n  }\n\n  // 3. If fetchParams\u2019s process response is non-null, then queue a fetch task\n  // to run fetchParams\u2019s process response given response, with fetchParams\u2019s\n  // task destination.\n  if (fetchParams.processResponse != null) {\n    queueMicrotask(() => fetchParams.processResponse(response))\n  }\n\n  // 4. If response\u2019s body is null, then run processResponseEndOfBody.\n  if (response.body == null) {\n    processResponseEndOfBody()\n  } else {\n  // 5. Otherwise:\n\n    // 1. Let transformStream be a new a TransformStream.\n\n    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,\n    // enqueues chunk in transformStream.\n    const identityTransformAlgorithm = (chunk, controller) => {\n      controller.enqueue(chunk)\n    }\n\n    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm\n    // and flushAlgorithm set to processResponseEndOfBody.\n    const transformStream = new TransformStream({\n      start () {},\n      transform: identityTransformAlgorithm,\n      flush: processResponseEndOfBody\n    }, {\n      size () {\n        return 1\n      }\n    }, {\n      size () {\n        return 1\n      }\n    })\n\n    // 4. Set response\u2019s body to the result of piping response\u2019s body through transformStream.\n    response.body = { stream: response.body.stream.pipeThrough(transformStream) }\n  }\n\n  // 6. If fetchParams\u2019s process response consume body is non-null, then:\n  if (fetchParams.processResponseConsumeBody != null) {\n    // 1. Let processBody given nullOrBytes be this step: run fetchParams\u2019s\n    // process response consume body given response and nullOrBytes.\n    const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes)\n\n    // 2. Let processBodyError be this step: run fetchParams\u2019s process\n    // response consume body given response and failure.\n    const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure)\n\n    // 3. If response\u2019s body is null, then queue a fetch task to run processBody\n    // given null, with fetchParams\u2019s task destination.\n    if (response.body == null) {\n      queueMicrotask(() => processBody(null))\n    } else {\n      // 4. Otherwise, fully read response\u2019s body given processBody, processBodyError,\n      // and fetchParams\u2019s task destination.\n      return fullyReadBody(response.body, processBody, processBodyError)\n    }\n    return Promise.resolve()\n  }\n}\n\n// https://fetch.spec.whatwg.org/#http-fetch\nasync function httpFetch (fetchParams) {\n  // 1. Let request be fetchParams\u2019s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. Let actualResponse be null.\n  let actualResponse = null\n\n  // 4. Let timingInfo be fetchParams\u2019s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 5. If request\u2019s service-workers mode is \"all\", then:\n  if (request.serviceWorkers === 'all') {\n    // TODO\n  }\n\n  // 6. If response is null, then:\n  if (response === null) {\n    // 1. If makeCORSPreflight is true and one of these conditions is true:\n    // TODO\n\n    // 2. If request\u2019s redirect mode is \"follow\", then set request\u2019s\n    // service-workers mode to \"none\".\n    if (request.redirect === 'follow') {\n      request.serviceWorkers = 'none'\n    }\n\n    // 3. Set response and actualResponse to the result of running\n    // HTTP-network-or-cache fetch given fetchParams.\n    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams)\n\n    // 4. If request\u2019s response tainting is \"cors\" and a CORS check\n    // for request and response returns failure, then return a network error.\n    if (\n      request.responseTainting === 'cors' &&\n      corsCheck(request, response) === 'failure'\n    ) {\n      return makeNetworkError('cors failure')\n    }\n\n    // 5. If the TAO check for request and response returns failure, then set\n    // request\u2019s timing allow failed flag.\n    if (TAOCheck(request, response) === 'failure') {\n      request.timingAllowFailed = true\n    }\n  }\n\n  // 7. If either request\u2019s response tainting or response\u2019s type\n  // is \"opaque\", and the cross-origin resource policy check with\n  // request\u2019s origin, request\u2019s client, request\u2019s destination,\n  // and actualResponse returns blocked, then return a network error.\n  if (\n    (request.responseTainting === 'opaque' || response.type === 'opaque') &&\n    crossOriginResourcePolicyCheck(\n      request.origin,\n      request.client,\n      request.destination,\n      actualResponse\n    ) === 'blocked'\n  ) {\n    return makeNetworkError('blocked')\n  }\n\n  // 8. If actualResponse\u2019s status is a redirect status, then:\n  if (redirectStatusSet.has(actualResponse.status)) {\n    // 1. If actualResponse\u2019s status is not 303, request\u2019s body is not null,\n    // and the connection uses HTTP/2, then user agents may, and are even\n    // encouraged to, transmit an RST_STREAM frame.\n    // See, https://github.com/whatwg/fetch/issues/1288\n    if (request.redirect !== 'manual') {\n      fetchParams.controller.connection.destroy()\n    }\n\n    // 2. Switch on request\u2019s redirect mode:\n    if (request.redirect === 'error') {\n      // Set response to a network error.\n      response = makeNetworkError('unexpected redirect')\n    } else if (request.redirect === 'manual') {\n      // Set response to an opaque-redirect filtered response whose internal\n      // response is actualResponse.\n      // NOTE(spec): On the web this would return an `opaqueredirect` response,\n      // but that doesn't make sense server side.\n      // See https://github.com/nodejs/undici/issues/1193.\n      response = actualResponse\n    } else if (request.redirect === 'follow') {\n      // Set response to the result of running HTTP-redirect fetch given\n      // fetchParams and response.\n      response = await httpRedirectFetch(fetchParams, response)\n    } else {\n      assert(false)\n    }\n  }\n\n  // 9. Set response\u2019s timing info to timingInfo.\n  response.timingInfo = timingInfo\n\n  // 10. Return response.\n  return response\n}\n\n// https://fetch.spec.whatwg.org/#http-redirect-fetch\nfunction httpRedirectFetch (fetchParams, response) {\n  // 1. Let request be fetchParams\u2019s request.\n  const request = fetchParams.request\n\n  // 2. Let actualResponse be response, if response is not a filtered response,\n  // and response\u2019s internal response otherwise.\n  const actualResponse = response.internalResponse\n    ? response.internalResponse\n    : response\n\n  // 3. Let locationURL be actualResponse\u2019s location URL given request\u2019s current\n  // URL\u2019s fragment.\n  let locationURL\n\n  try {\n    locationURL = responseLocationURL(\n      actualResponse,\n      requestCurrentURL(request).hash\n    )\n\n    // 4. If locationURL is null, then return response.\n    if (locationURL == null) {\n      return response\n    }\n  } catch (err) {\n    // 5. If locationURL is failure, then return a network error.\n    return Promise.resolve(makeNetworkError(err))\n  }\n\n  // 6. If locationURL\u2019s scheme is not an HTTP(S) scheme, then return a network\n  // error.\n  if (!urlIsHttpHttpsScheme(locationURL)) {\n    return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'))\n  }\n\n  // 7. If request\u2019s redirect count is 20, then return a network error.\n  if (request.redirectCount === 20) {\n    return Promise.resolve(makeNetworkError('redirect count exceeded'))\n  }\n\n  // 8. Increase request\u2019s redirect count by 1.\n  request.redirectCount += 1\n\n  // 9. If request\u2019s mode is \"cors\", locationURL includes credentials, and\n  // request\u2019s origin is not same origin with locationURL\u2019s origin, then return\n  //  a network error.\n  if (\n    request.mode === 'cors' &&\n    (locationURL.username || locationURL.password) &&\n    !sameOrigin(request, locationURL)\n  ) {\n    return Promise.resolve(makeNetworkError('cross origin not allowed for request mode \"cors\"'))\n  }\n\n  // 10. If request\u2019s response tainting is \"cors\" and locationURL includes\n  // credentials, then return a network error.\n  if (\n    request.responseTainting === 'cors' &&\n    (locationURL.username || locationURL.password)\n  ) {\n    return Promise.resolve(makeNetworkError(\n      'URL cannot contain credentials for request mode \"cors\"'\n    ))\n  }\n\n  // 11. If actualResponse\u2019s status is not 303, request\u2019s body is non-null,\n  // and request\u2019s body\u2019s source is null, then return a network error.\n  if (\n    actualResponse.status !== 303 &&\n    request.body != null &&\n    request.body.source == null\n  ) {\n    return Promise.resolve(makeNetworkError())\n  }\n\n  // 12. If one of the following is true\n  // - actualResponse\u2019s status is 301 or 302 and request\u2019s method is `POST`\n  // - actualResponse\u2019s status is 303 and request\u2019s method is not `GET` or `HEAD`\n  if (\n    ([301, 302].includes(actualResponse.status) && request.method === 'POST') ||\n    (actualResponse.status === 303 &&\n      !GET_OR_HEAD.includes(request.method))\n  ) {\n    // then:\n    // 1. Set request\u2019s method to `GET` and request\u2019s body to null.\n    request.method = 'GET'\n    request.body = null\n\n    // 2. For each headerName of request-body-header name, delete headerName from\n    // request\u2019s header list.\n    for (const headerName of requestBodyHeader) {\n      request.headersList.delete(headerName)\n    }\n  }\n\n  // 13. If request\u2019s current URL\u2019s origin is not same origin with locationURL\u2019s\n  //     origin, then for each headerName of CORS non-wildcard request-header name,\n  //     delete headerName from request\u2019s header list.\n  if (!sameOrigin(requestCurrentURL(request), locationURL)) {\n    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name\n    request.headersList.delete('authorization')\n\n    // https://fetch.spec.whatwg.org/#authentication-entries\n    request.headersList.delete('proxy-authorization', true)\n\n    // \"Cookie\" and \"Host\" are forbidden request-headers, which undici doesn't implement.\n    request.headersList.delete('cookie')\n    request.headersList.delete('host')\n  }\n\n  // 14. If request\u2019s body is non-null, then set request\u2019s body to the first return\n  // value of safely extracting request\u2019s body\u2019s source.\n  if (request.body != null) {\n    assert(request.body.source != null)\n    request.body = safelyExtractBody(request.body.source)[0]\n  }\n\n  // 15. Let timingInfo be fetchParams\u2019s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 16. Set timingInfo\u2019s redirect end time and post-redirect start time to the\n  // coarsened shared current time given fetchParams\u2019s cross-origin isolated\n  // capability.\n  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =\n    coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability)\n\n  // 17. If timingInfo\u2019s redirect start time is 0, then set timingInfo\u2019s\n  //  redirect start time to timingInfo\u2019s start time.\n  if (timingInfo.redirectStartTime === 0) {\n    timingInfo.redirectStartTime = timingInfo.startTime\n  }\n\n  // 18. Append locationURL to request\u2019s URL list.\n  request.urlList.push(locationURL)\n\n  // 19. Invoke set request\u2019s referrer policy on redirect on request and\n  // actualResponse.\n  setRequestReferrerPolicyOnRedirect(request, actualResponse)\n\n  // 20. Return the result of running main fetch given fetchParams and true.\n  return mainFetch(fetchParams, true)\n}\n\n// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch\nasync function httpNetworkOrCacheFetch (\n  fetchParams,\n  isAuthenticationFetch = false,\n  isNewConnectionFetch = false\n) {\n  // 1. Let request be fetchParams\u2019s request.\n  const request = fetchParams.request\n\n  // 2. Let httpFetchParams be null.\n  let httpFetchParams = null\n\n  // 3. Let httpRequest be null.\n  let httpRequest = null\n\n  // 4. Let response be null.\n  let response = null\n\n  // 5. Let storedResponse be null.\n  // TODO: cache\n\n  // 6. Let httpCache be null.\n  const httpCache = null\n\n  // 7. Let the revalidatingFlag be unset.\n  const revalidatingFlag = false\n\n  // 8. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If request\u2019s window is \"no-window\" and request\u2019s redirect mode is\n  //    \"error\", then set httpFetchParams to fetchParams and httpRequest to\n  //    request.\n  if (request.window === 'no-window' && request.redirect === 'error') {\n    httpFetchParams = fetchParams\n    httpRequest = request\n  } else {\n    // Otherwise:\n\n    // 1. Set httpRequest to a clone of request.\n    httpRequest = makeRequest(request)\n\n    // 2. Set httpFetchParams to a copy of fetchParams.\n    httpFetchParams = { ...fetchParams }\n\n    // 3. Set httpFetchParams\u2019s request to httpRequest.\n    httpFetchParams.request = httpRequest\n  }\n\n  //    3. Let includeCredentials be true if one of\n  const includeCredentials =\n    request.credentials === 'include' ||\n    (request.credentials === 'same-origin' &&\n      request.responseTainting === 'basic')\n\n  //    4. Let contentLength be httpRequest\u2019s body\u2019s length, if httpRequest\u2019s\n  //    body is non-null; otherwise null.\n  const contentLength = httpRequest.body ? httpRequest.body.length : null\n\n  //    5. Let contentLengthHeaderValue be null.\n  let contentLengthHeaderValue = null\n\n  //    6. If httpRequest\u2019s body is null and httpRequest\u2019s method is `POST` or\n  //    `PUT`, then set contentLengthHeaderValue to `0`.\n  if (\n    httpRequest.body == null &&\n    ['POST', 'PUT'].includes(httpRequest.method)\n  ) {\n    contentLengthHeaderValue = '0'\n  }\n\n  //    7. If contentLength is non-null, then set contentLengthHeaderValue to\n  //    contentLength, serialized and isomorphic encoded.\n  if (contentLength != null) {\n    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`)\n  }\n\n  //    8. If contentLengthHeaderValue is non-null, then append\n  //    `Content-Length`/contentLengthHeaderValue to httpRequest\u2019s header\n  //    list.\n  if (contentLengthHeaderValue != null) {\n    httpRequest.headersList.append('content-length', contentLengthHeaderValue)\n  }\n\n  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,\n  //    contentLengthHeaderValue) to httpRequest\u2019s header list.\n\n  //    10. If contentLength is non-null and httpRequest\u2019s keepalive is true,\n  //    then:\n  if (contentLength != null && httpRequest.keepalive) {\n    // NOTE: keepalive is a noop outside of browser context.\n  }\n\n  //    11. If httpRequest\u2019s referrer is a URL, then append\n  //    `Referer`/httpRequest\u2019s referrer, serialized and isomorphic encoded,\n  //     to httpRequest\u2019s header list.\n  if (httpRequest.referrer instanceof URL) {\n    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href))\n  }\n\n  //    12. Append a request `Origin` header for httpRequest.\n  appendRequestOriginHeader(httpRequest)\n\n  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]\n  appendFetchMetadata(httpRequest)\n\n  //    14. If httpRequest\u2019s header list does not contain `User-Agent`, then\n  //    user agents should append `User-Agent`/default `User-Agent` value to\n  //    httpRequest\u2019s header list.\n  if (!httpRequest.headersList.contains('user-agent')) {\n    httpRequest.headersList.append('user-agent', typeof esbuildDetection === 'undefined' ? 'undici' : 'node')\n  }\n\n  //    15. If httpRequest\u2019s cache mode is \"default\" and httpRequest\u2019s header\n  //    list contains `If-Modified-Since`, `If-None-Match`,\n  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set\n  //    httpRequest\u2019s cache mode to \"no-store\".\n  if (\n    httpRequest.cache === 'default' &&\n    (httpRequest.headersList.contains('if-modified-since') ||\n      httpRequest.headersList.contains('if-none-match') ||\n      httpRequest.headersList.contains('if-unmodified-since') ||\n      httpRequest.headersList.contains('if-match') ||\n      httpRequest.headersList.contains('if-range'))\n  ) {\n    httpRequest.cache = 'no-store'\n  }\n\n  //    16. If httpRequest\u2019s cache mode is \"no-cache\", httpRequest\u2019s prevent\n  //    no-cache cache-control header modification flag is unset, and\n  //    httpRequest\u2019s header list does not contain `Cache-Control`, then append\n  //    `Cache-Control`/`max-age=0` to httpRequest\u2019s header list.\n  if (\n    httpRequest.cache === 'no-cache' &&\n    !httpRequest.preventNoCacheCacheControlHeaderModification &&\n    !httpRequest.headersList.contains('cache-control')\n  ) {\n    httpRequest.headersList.append('cache-control', 'max-age=0')\n  }\n\n  //    17. If httpRequest\u2019s cache mode is \"no-store\" or \"reload\", then:\n  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {\n    // 1. If httpRequest\u2019s header list does not contain `Pragma`, then append\n    // `Pragma`/`no-cache` to httpRequest\u2019s header list.\n    if (!httpRequest.headersList.contains('pragma')) {\n      httpRequest.headersList.append('pragma', 'no-cache')\n    }\n\n    // 2. If httpRequest\u2019s header list does not contain `Cache-Control`,\n    // then append `Cache-Control`/`no-cache` to httpRequest\u2019s header list.\n    if (!httpRequest.headersList.contains('cache-control')) {\n      httpRequest.headersList.append('cache-control', 'no-cache')\n    }\n  }\n\n  //    18. If httpRequest\u2019s header list contains `Range`, then append\n  //    `Accept-Encoding`/`identity` to httpRequest\u2019s header list.\n  if (httpRequest.headersList.contains('range')) {\n    httpRequest.headersList.append('accept-encoding', 'identity')\n  }\n\n  //    19. Modify httpRequest\u2019s header list per HTTP. Do not append a given\n  //    header if httpRequest\u2019s header list contains that header\u2019s name.\n  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129\n  if (!httpRequest.headersList.contains('accept-encoding')) {\n    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {\n      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate')\n    } else {\n      httpRequest.headersList.append('accept-encoding', 'gzip, deflate')\n    }\n  }\n\n  httpRequest.headersList.delete('host')\n\n  //    20. If includeCredentials is true, then:\n  if (includeCredentials) {\n    // 1. If the user agent is not configured to block cookies for httpRequest\n    // (see section 7 of [COOKIES]), then:\n    // TODO: credentials\n    // 2. If httpRequest\u2019s header list does not contain `Authorization`, then:\n    // TODO: credentials\n  }\n\n  //    21. If there\u2019s a proxy-authentication entry, use it as appropriate.\n  //    TODO: proxy-authentication\n\n  //    22. Set httpCache to the result of determining the HTTP cache\n  //    partition, given httpRequest.\n  //    TODO: cache\n\n  //    23. If httpCache is null, then set httpRequest\u2019s cache mode to\n  //    \"no-store\".\n  if (httpCache == null) {\n    httpRequest.cache = 'no-store'\n  }\n\n  //    24. If httpRequest\u2019s cache mode is neither \"no-store\" nor \"reload\",\n  //    then:\n  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {\n    // TODO: cache\n  }\n\n  // 9. If aborted, then return the appropriate network error for fetchParams.\n  // TODO\n\n  // 10. If response is null, then:\n  if (response == null) {\n    // 1. If httpRequest\u2019s cache mode is \"only-if-cached\", then return a\n    // network error.\n    if (httpRequest.mode === 'only-if-cached') {\n      return makeNetworkError('only if cached')\n    }\n\n    // 2. Let forwardResponse be the result of running HTTP-network fetch\n    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.\n    const forwardResponse = await httpNetworkFetch(\n      httpFetchParams,\n      includeCredentials,\n      isNewConnectionFetch\n    )\n\n    // 3. If httpRequest\u2019s method is unsafe and forwardResponse\u2019s status is\n    // in the range 200 to 399, inclusive, invalidate appropriate stored\n    // responses in httpCache, as per the \"Invalidation\" chapter of HTTP\n    // Caching, and set storedResponse to null. [HTTP-CACHING]\n    if (\n      !safeMethodsSet.has(httpRequest.method) &&\n      forwardResponse.status >= 200 &&\n      forwardResponse.status <= 399\n    ) {\n      // TODO: cache\n    }\n\n    // 4. If the revalidatingFlag is set and forwardResponse\u2019s status is 304,\n    // then:\n    if (revalidatingFlag && forwardResponse.status === 304) {\n      // TODO: cache\n    }\n\n    // 5. If response is null, then:\n    if (response == null) {\n      // 1. Set response to forwardResponse.\n      response = forwardResponse\n\n      // 2. Store httpRequest and forwardResponse in httpCache, as per the\n      // \"Storing Responses in Caches\" chapter of HTTP Caching. [HTTP-CACHING]\n      // TODO: cache\n    }\n  }\n\n  // 11. Set response\u2019s URL list to a clone of httpRequest\u2019s URL list.\n  response.urlList = [...httpRequest.urlList]\n\n  // 12. If httpRequest\u2019s header list contains `Range`, then set response\u2019s\n  // range-requested flag.\n  if (httpRequest.headersList.contains('range')) {\n    response.rangeRequested = true\n  }\n\n  // 13. Set response\u2019s request-includes-credentials to includeCredentials.\n  response.requestIncludesCredentials = includeCredentials\n\n  // 14. If response\u2019s status is 401, httpRequest\u2019s response tainting is not\n  // \"cors\", includeCredentials is true, and request\u2019s window is an environment\n  // settings object, then:\n  // TODO\n\n  // 15. If response\u2019s status is 407, then:\n  if (response.status === 407) {\n    // 1. If request\u2019s window is \"no-window\", then return a network error.\n    if (request.window === 'no-window') {\n      return makeNetworkError()\n    }\n\n    // 2. ???\n\n    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams)\n    }\n\n    // 4. Prompt the end user as appropriate in request\u2019s window and store\n    // the result as a proxy-authentication entry. [HTTP-AUTH]\n    // TODO: Invoke some kind of callback?\n\n    // 5. Set response to the result of running HTTP-network-or-cache fetch given\n    // fetchParams.\n    // TODO\n    return makeNetworkError('proxy authentication required')\n  }\n\n  // 16. If all of the following are true\n  if (\n    // response\u2019s status is 421\n    response.status === 421 &&\n    // isNewConnectionFetch is false\n    !isNewConnectionFetch &&\n    // request\u2019s body is null, or request\u2019s body is non-null and request\u2019s body\u2019s source is non-null\n    (request.body == null || request.body.source != null)\n  ) {\n    // then:\n\n    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams)\n    }\n\n    // 2. Set response to the result of running HTTP-network-or-cache\n    // fetch given fetchParams, isAuthenticationFetch, and true.\n\n    // TODO (spec): The spec doesn't specify this but we need to cancel\n    // the active response before we can start a new one.\n    // https://github.com/whatwg/fetch/issues/1293\n    fetchParams.controller.connection.destroy()\n\n    response = await httpNetworkOrCacheFetch(\n      fetchParams,\n      isAuthenticationFetch,\n      true\n    )\n  }\n\n  // 17. If isAuthenticationFetch is true, then create an authentication entry\n  if (isAuthenticationFetch) {\n    // TODO\n  }\n\n  // 18. Return response.\n  return response\n}\n\n// https://fetch.spec.whatwg.org/#http-network-fetch\nasync function httpNetworkFetch (\n  fetchParams,\n  includeCredentials = false,\n  forceNewConnection = false\n) {\n  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed)\n\n  fetchParams.controller.connection = {\n    abort: null,\n    destroyed: false,\n    destroy (err) {\n      if (!this.destroyed) {\n        this.destroyed = true\n        this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'))\n      }\n    }\n  }\n\n  // 1. Let request be fetchParams\u2019s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. Let timingInfo be fetchParams\u2019s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 4. Let httpCache be the result of determining the HTTP cache partition,\n  // given request.\n  // TODO: cache\n  const httpCache = null\n\n  // 5. If httpCache is null, then set request\u2019s cache mode to \"no-store\".\n  if (httpCache == null) {\n    request.cache = 'no-store'\n  }\n\n  // 6. Let networkPartitionKey be the result of determining the network\n  // partition key given request.\n  // TODO\n\n  // 7. Let newConnection be \"yes\" if forceNewConnection is true; otherwise\n  // \"no\".\n  const newConnection = forceNewConnection ? 'yes' : 'no' // eslint-disable-line no-unused-vars\n\n  // 8. Switch on request\u2019s mode:\n  if (request.mode === 'websocket') {\n    // Let connection be the result of obtaining a WebSocket connection,\n    // given request\u2019s current URL.\n    // TODO\n  } else {\n    // Let connection be the result of obtaining a connection, given\n    // networkPartitionKey, request\u2019s current URL\u2019s origin,\n    // includeCredentials, and forceNewConnection.\n    // TODO\n  }\n\n  // 9. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If connection is failure, then return a network error.\n\n  //    2. Set timingInfo\u2019s final connection timing info to the result of\n  //    calling clamp and coarsen connection timing info with connection\u2019s\n  //    timing info, timingInfo\u2019s post-redirect start time, and fetchParams\u2019s\n  //    cross-origin isolated capability.\n\n  //    3. If connection is not an HTTP/2 connection, request\u2019s body is non-null,\n  //    and request\u2019s body\u2019s source is null, then append (`Transfer-Encoding`,\n  //    `chunked`) to request\u2019s header list.\n\n  //    4. Set timingInfo\u2019s final network-request start time to the coarsened\n  //    shared current time given fetchParams\u2019s cross-origin isolated\n  //    capability.\n\n  //    5. Set response to the result of making an HTTP request over connection\n  //    using request with the following caveats:\n\n  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]\n  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]\n\n  //        - If request\u2019s body is non-null, and request\u2019s body\u2019s source is null,\n  //        then the user agent may have a buffer of up to 64 kibibytes and store\n  //        a part of request\u2019s body in that buffer. If the user agent reads from\n  //        request\u2019s body beyond that buffer\u2019s size and the user agent needs to\n  //        resend request, then instead return a network error.\n\n  //        - Set timingInfo\u2019s final network-response start time to the coarsened\n  //        shared current time given fetchParams\u2019s cross-origin isolated capability,\n  //        immediately after the user agent\u2019s HTTP parser receives the first byte\n  //        of the response (e.g., frame header bytes for HTTP/2 or response status\n  //        line for HTTP/1.x).\n\n  //        - Wait until all the headers are transmitted.\n\n  //        - Any responses whose status is in the range 100 to 199, inclusive,\n  //        and is not 101, are to be ignored, except for the purposes of setting\n  //        timingInfo\u2019s final network-response start time above.\n\n  //    - If request\u2019s header list contains `Transfer-Encoding`/`chunked` and\n  //    response is transferred via HTTP/1.0 or older, then return a network\n  //    error.\n\n  //    - If the HTTP request results in a TLS client certificate dialog, then:\n\n  //        1. If request\u2019s window is an environment settings object, make the\n  //        dialog available in request\u2019s window.\n\n  //        2. Otherwise, return a network error.\n\n  // To transmit request\u2019s body body, run these steps:\n  let requestBody = null\n  // 1. If body is null and fetchParams\u2019s process request end-of-body is\n  // non-null, then queue a fetch task given fetchParams\u2019s process request\n  // end-of-body and fetchParams\u2019s task destination.\n  if (request.body == null && fetchParams.processRequestEndOfBody) {\n    queueMicrotask(() => fetchParams.processRequestEndOfBody())\n  } else if (request.body != null) {\n    // 2. Otherwise, if body is non-null:\n\n    //    1. Let processBodyChunk given bytes be these steps:\n    const processBodyChunk = async function * (bytes) {\n      // 1. If the ongoing fetch is terminated, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. Run this step in parallel: transmit bytes.\n      yield bytes\n\n      // 3. If fetchParams\u2019s process request body is non-null, then run\n      // fetchParams\u2019s process request body given bytes\u2019s length.\n      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength)\n    }\n\n    // 2. Let processEndOfBody be these steps:\n    const processEndOfBody = () => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. If fetchParams\u2019s process request end-of-body is non-null,\n      // then run fetchParams\u2019s process request end-of-body.\n      if (fetchParams.processRequestEndOfBody) {\n        fetchParams.processRequestEndOfBody()\n      }\n    }\n\n    // 3. Let processBodyError given e be these steps:\n    const processBodyError = (e) => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. If e is an \"AbortError\" DOMException, then abort fetchParams\u2019s controller.\n      if (e.name === 'AbortError') {\n        fetchParams.controller.abort()\n      } else {\n        fetchParams.controller.terminate(e)\n      }\n    }\n\n    // 4. Incrementally read request\u2019s body given processBodyChunk, processEndOfBody,\n    // processBodyError, and fetchParams\u2019s task destination.\n    requestBody = (async function * () {\n      try {\n        for await (const bytes of request.body.stream) {\n          yield * processBodyChunk(bytes)\n        }\n        processEndOfBody()\n      } catch (err) {\n        processBodyError(err)\n      }\n    })()\n  }\n\n  try {\n    // socket is only provided for websockets\n    const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody })\n\n    if (socket) {\n      response = makeResponse({ status, statusText, headersList, socket })\n    } else {\n      const iterator = body[Symbol.asyncIterator]()\n      fetchParams.controller.next = () => iterator.next()\n\n      response = makeResponse({ status, statusText, headersList })\n    }\n  } catch (err) {\n    // 10. If aborted, then:\n    if (err.name === 'AbortError') {\n      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n      fetchParams.controller.connection.destroy()\n\n      // 2. Return the appropriate network error for fetchParams.\n      return makeAppropriateNetworkError(fetchParams, err)\n    }\n\n    return makeNetworkError(err)\n  }\n\n  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch\n  // if it is suspended.\n  const pullAlgorithm = () => {\n    fetchParams.controller.resume()\n  }\n\n  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams\u2019s\n  // controller with reason, given reason.\n  const cancelAlgorithm = (reason) => {\n    fetchParams.controller.abort(reason)\n  }\n\n  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by\n  // the user agent.\n  // TODO\n\n  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object\n  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.\n  // TODO\n\n  // 15. Let stream be a new ReadableStream.\n  // 16. Set up stream with pullAlgorithm set to pullAlgorithm,\n  // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to\n  // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  const stream = new ReadableStream(\n    {\n      async start (controller) {\n        fetchParams.controller.controller = controller\n      },\n      async pull (controller) {\n        await pullAlgorithm(controller)\n      },\n      async cancel (reason) {\n        await cancelAlgorithm(reason)\n      }\n    },\n    {\n      highWaterMark: 0,\n      size () {\n        return 1\n      }\n    }\n  )\n\n  // 17. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. Set response\u2019s body to a new body whose stream is stream.\n  response.body = { stream }\n\n  //    2. If response is not a network error and request\u2019s cache mode is\n  //    not \"no-store\", then update response in httpCache for request.\n  //    TODO\n\n  //    3. If includeCredentials is true and the user agent is not configured\n  //    to block cookies for request (see section 7 of [COOKIES]), then run the\n  //    \"set-cookie-string\" parsing algorithm (see section 5.2 of [COOKIES]) on\n  //    the value of each header whose name is a byte-case-insensitive match for\n  //    `Set-Cookie` in response\u2019s header list, if any, and request\u2019s current URL.\n  //    TODO\n\n  // 18. If aborted, then:\n  // TODO\n\n  // 19. Run these steps in parallel:\n\n  //    1. Run these steps, but abort when fetchParams is canceled:\n  fetchParams.controller.on('terminated', onAborted)\n  fetchParams.controller.resume = async () => {\n    // 1. While true\n    while (true) {\n      // 1-3. See onData...\n\n      // 4. Set bytes to the result of handling content codings given\n      // codings and bytes.\n      let bytes\n      let isFailure\n      try {\n        const { done, value } = await fetchParams.controller.next()\n\n        if (isAborted(fetchParams)) {\n          break\n        }\n\n        bytes = done ? undefined : value\n      } catch (err) {\n        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {\n          // zlib doesn't like empty streams.\n          bytes = undefined\n        } else {\n          bytes = err\n\n          // err may be propagated from the result of calling readablestream.cancel,\n          // which might not be an error. https://github.com/nodejs/undici/issues/2009\n          isFailure = true\n        }\n      }\n\n      if (bytes === undefined) {\n        // 2. Otherwise, if the bytes transmission for response\u2019s message\n        // body is done normally and stream is readable, then close\n        // stream, finalize response for fetchParams and response, and\n        // abort these in-parallel steps.\n        readableStreamClose(fetchParams.controller.controller)\n\n        finalizeResponse(fetchParams, response)\n\n        return\n      }\n\n      // 5. Increase timingInfo\u2019s decoded body size by bytes\u2019s length.\n      timingInfo.decodedBodySize += bytes?.byteLength ?? 0\n\n      // 6. If bytes is failure, then terminate fetchParams\u2019s controller.\n      if (isFailure) {\n        fetchParams.controller.terminate(bytes)\n        return\n      }\n\n      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes\n      // into stream.\n      fetchParams.controller.controller.enqueue(new Uint8Array(bytes))\n\n      // 8. If stream is errored, then terminate the ongoing fetch.\n      if (isErrored(stream)) {\n        fetchParams.controller.terminate()\n        return\n      }\n\n      // 9. If stream doesn\u2019t need more data ask the user agent to suspend\n      // the ongoing fetch.\n      if (!fetchParams.controller.controller.desiredSize) {\n        return\n      }\n    }\n  }\n\n  //    2. If aborted, then:\n  function onAborted (reason) {\n    // 2. If fetchParams is aborted, then:\n    if (isAborted(fetchParams)) {\n      // 1. Set response\u2019s aborted flag.\n      response.aborted = true\n\n      // 2. If stream is readable, then error stream with the result of\n      //    deserialize a serialized abort reason given fetchParams\u2019s\n      //    controller\u2019s serialized abort reason and an\n      //    implementation-defined realm.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(\n          fetchParams.controller.serializedAbortReason\n        )\n      }\n    } else {\n      // 3. Otherwise, if stream is readable, error stream with a TypeError.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(new TypeError('terminated', {\n          cause: isErrorLike(reason) ? reason : undefined\n        }))\n      }\n    }\n\n    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.\n    fetchParams.controller.connection.destroy()\n  }\n\n  // 20. Return response.\n  return response\n\n  async function dispatch ({ body }) {\n    const url = requestCurrentURL(request)\n    /** @type {import('../..').Agent} */\n    const agent = fetchParams.controller.dispatcher\n\n    return new Promise((resolve, reject) => agent.dispatch(\n      {\n        path: url.pathname + url.search,\n        origin: url.origin,\n        method: request.method,\n        body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,\n        headers: request.headersList.entries,\n        maxRedirections: 0,\n        upgrade: request.mode === 'websocket' ? 'websocket' : undefined\n      },\n      {\n        body: null,\n        abort: null,\n\n        onConnect (abort) {\n          // TODO (fix): Do we need connection here?\n          const { connection } = fetchParams.controller\n\n          if (connection.destroyed) {\n            abort(new DOMException('The operation was aborted.', 'AbortError'))\n          } else {\n            fetchParams.controller.on('terminated', abort)\n            this.abort = connection.abort = abort\n          }\n        },\n\n        onHeaders (status, headersList, resume, statusText) {\n          if (status < 200) {\n            return\n          }\n\n          let codings = []\n          let location = ''\n\n          const headers = new Headers()\n\n          // For H2, the headers are a plain JS object\n          // We distinguish between them and iterate accordingly\n          if (Array.isArray(headersList)) {\n            for (let n = 0; n < headersList.length; n += 2) {\n              const key = headersList[n + 0].toString('latin1')\n              const val = headersList[n + 1].toString('latin1')\n              if (key.toLowerCase() === 'content-encoding') {\n                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n                // \"All content-coding values are case-insensitive...\"\n                codings = val.toLowerCase().split(',').map((x) => x.trim())\n              } else if (key.toLowerCase() === 'location') {\n                location = val\n              }\n\n              headers[kHeadersList].append(key, val)\n            }\n          } else {\n            const keys = Object.keys(headersList)\n            for (const key of keys) {\n              const val = headersList[key]\n              if (key.toLowerCase() === 'content-encoding') {\n                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n                // \"All content-coding values are case-insensitive...\"\n                codings = val.toLowerCase().split(',').map((x) => x.trim()).reverse()\n              } else if (key.toLowerCase() === 'location') {\n                location = val\n              }\n\n              headers[kHeadersList].append(key, val)\n            }\n          }\n\n          this.body = new Readable({ read: resume })\n\n          const decoders = []\n\n          const willFollow = request.redirect === 'follow' &&\n            location &&\n            redirectStatusSet.has(status)\n\n          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n          if (request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {\n            for (const coding of codings) {\n              // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2\n              if (coding === 'x-gzip' || coding === 'gzip') {\n                decoders.push(zlib.createGunzip({\n                  // Be less strict when decoding compressed responses, since sometimes\n                  // servers send slightly invalid responses that are still accepted\n                  // by common browsers.\n                  // Always using Z_SYNC_FLUSH is what cURL does.\n                  flush: zlib.constants.Z_SYNC_FLUSH,\n                  finishFlush: zlib.constants.Z_SYNC_FLUSH\n                }))\n              } else if (coding === 'deflate') {\n                decoders.push(zlib.createInflate())\n              } else if (coding === 'br') {\n                decoders.push(zlib.createBrotliDecompress())\n              } else {\n                decoders.length = 0\n                break\n              }\n            }\n          }\n\n          resolve({\n            status,\n            statusText,\n            headersList: headers[kHeadersList],\n            body: decoders.length\n              ? pipeline(this.body, ...decoders, () => { })\n              : this.body.on('error', () => {})\n          })\n\n          return true\n        },\n\n        onData (chunk) {\n          if (fetchParams.controller.dump) {\n            return\n          }\n\n          // 1. If one or more bytes have been transmitted from response\u2019s\n          // message body, then:\n\n          //  1. Let bytes be the transmitted bytes.\n          const bytes = chunk\n\n          //  2. Let codings be the result of extracting header list values\n          //  given `Content-Encoding` and response\u2019s header list.\n          //  See pullAlgorithm.\n\n          //  3. Increase timingInfo\u2019s encoded body size by bytes\u2019s length.\n          timingInfo.encodedBodySize += bytes.byteLength\n\n          //  4. See pullAlgorithm...\n\n          return this.body.push(bytes)\n        },\n\n        onComplete () {\n          if (this.abort) {\n            fetchParams.controller.off('terminated', this.abort)\n          }\n\n          fetchParams.controller.ended = true\n\n          this.body.push(null)\n        },\n\n        onError (error) {\n          if (this.abort) {\n            fetchParams.controller.off('terminated', this.abort)\n          }\n\n          this.body?.destroy(error)\n\n          fetchParams.controller.terminate(error)\n\n          reject(error)\n        },\n\n        onUpgrade (status, headersList, socket) {\n          if (status !== 101) {\n            return\n          }\n\n          const headers = new Headers()\n\n          for (let n = 0; n < headersList.length; n += 2) {\n            const key = headersList[n + 0].toString('latin1')\n            const val = headersList[n + 1].toString('latin1')\n\n            headers[kHeadersList].append(key, val)\n          }\n\n          resolve({\n            status,\n            statusText: STATUS_CODES[status],\n            headersList: headers[kHeadersList],\n            socket\n          })\n\n          return true\n        }\n      }\n    ))\n  }\n}\n\nmodule.exports = {\n  fetch,\n  Fetch,\n  fetching,\n  finalizeAndReportTiming\n}\n", "'use strict'\n\nmodule.exports = {\n  kState: Symbol('FileReader state'),\n  kResult: Symbol('FileReader result'),\n  kError: Symbol('FileReader error'),\n  kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),\n  kEvents: Symbol('FileReader events'),\n  kAborted: Symbol('FileReader aborted')\n}\n", "'use strict'\n\nconst { webidl } = require('../fetch/webidl')\n\nconst kState = Symbol('ProgressEvent state')\n\n/**\n * @see https://xhr.spec.whatwg.org/#progressevent\n */\nclass ProgressEvent extends Event {\n  constructor (type, eventInitDict = {}) {\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {})\n\n    super(type, eventInitDict)\n\n    this[kState] = {\n      lengthComputable: eventInitDict.lengthComputable,\n      loaded: eventInitDict.loaded,\n      total: eventInitDict.total\n    }\n  }\n\n  get lengthComputable () {\n    webidl.brandCheck(this, ProgressEvent)\n\n    return this[kState].lengthComputable\n  }\n\n  get loaded () {\n    webidl.brandCheck(this, ProgressEvent)\n\n    return this[kState].loaded\n  }\n\n  get total () {\n    webidl.brandCheck(this, ProgressEvent)\n\n    return this[kState].total\n  }\n}\n\nwebidl.converters.ProgressEventInit = webidl.dictionaryConverter([\n  {\n    key: 'lengthComputable',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'loaded',\n    converter: webidl.converters['unsigned long long'],\n    defaultValue: 0\n  },\n  {\n    key: 'total',\n    converter: webidl.converters['unsigned long long'],\n    defaultValue: 0\n  },\n  {\n    key: 'bubbles',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'cancelable',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'composed',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  }\n])\n\nmodule.exports = {\n  ProgressEvent\n}\n", "'use strict'\n\n/**\n * @see https://encoding.spec.whatwg.org/#concept-encoding-get\n * @param {string|undefined} label\n */\nfunction getEncoding (label) {\n  if (!label) {\n    return 'failure'\n  }\n\n  // 1. Remove any leading and trailing ASCII whitespace from label.\n  // 2. If label is an ASCII case-insensitive match for any of the\n  //    labels listed in the table below, then return the\n  //    corresponding encoding; otherwise return failure.\n  switch (label.trim().toLowerCase()) {\n    case 'unicode-1-1-utf-8':\n    case 'unicode11utf8':\n    case 'unicode20utf8':\n    case 'utf-8':\n    case 'utf8':\n    case 'x-unicode20utf8':\n      return 'UTF-8'\n    case '866':\n    case 'cp866':\n    case 'csibm866':\n    case 'ibm866':\n      return 'IBM866'\n    case 'csisolatin2':\n    case 'iso-8859-2':\n    case 'iso-ir-101':\n    case 'iso8859-2':\n    case 'iso88592':\n    case 'iso_8859-2':\n    case 'iso_8859-2:1987':\n    case 'l2':\n    case 'latin2':\n      return 'ISO-8859-2'\n    case 'csisolatin3':\n    case 'iso-8859-3':\n    case 'iso-ir-109':\n    case 'iso8859-3':\n    case 'iso88593':\n    case 'iso_8859-3':\n    case 'iso_8859-3:1988':\n    case 'l3':\n    case 'latin3':\n      return 'ISO-8859-3'\n    case 'csisolatin4':\n    case 'iso-8859-4':\n    case 'iso-ir-110':\n    case 'iso8859-4':\n    case 'iso88594':\n    case 'iso_8859-4':\n    case 'iso_8859-4:1988':\n    case 'l4':\n    case 'latin4':\n      return 'ISO-8859-4'\n    case 'csisolatincyrillic':\n    case 'cyrillic':\n    case 'iso-8859-5':\n    case 'iso-ir-144':\n    case 'iso8859-5':\n    case 'iso88595':\n    case 'iso_8859-5':\n    case 'iso_8859-5:1988':\n      return 'ISO-8859-5'\n    case 'arabic':\n    case 'asmo-708':\n    case 'csiso88596e':\n    case 'csiso88596i':\n    case 'csisolatinarabic':\n    case 'ecma-114':\n    case 'iso-8859-6':\n    case 'iso-8859-6-e':\n    case 'iso-8859-6-i':\n    case 'iso-ir-127':\n    case 'iso8859-6':\n    case 'iso88596':\n    case 'iso_8859-6':\n    case 'iso_8859-6:1987':\n      return 'ISO-8859-6'\n    case 'csisolatingreek':\n    case 'ecma-118':\n    case 'elot_928':\n    case 'greek':\n    case 'greek8':\n    case 'iso-8859-7':\n    case 'iso-ir-126':\n    case 'iso8859-7':\n    case 'iso88597':\n    case 'iso_8859-7':\n    case 'iso_8859-7:1987':\n    case 'sun_eu_greek':\n      return 'ISO-8859-7'\n    case 'csiso88598e':\n    case 'csisolatinhebrew':\n    case 'hebrew':\n    case 'iso-8859-8':\n    case 'iso-8859-8-e':\n    case 'iso-ir-138':\n    case 'iso8859-8':\n    case 'iso88598':\n    case 'iso_8859-8':\n    case 'iso_8859-8:1988':\n    case 'visual':\n      return 'ISO-8859-8'\n    case 'csiso88598i':\n    case 'iso-8859-8-i':\n    case 'logical':\n      return 'ISO-8859-8-I'\n    case 'csisolatin6':\n    case 'iso-8859-10':\n    case 'iso-ir-157':\n    case 'iso8859-10':\n    case 'iso885910':\n    case 'l6':\n    case 'latin6':\n      return 'ISO-8859-10'\n    case 'iso-8859-13':\n    case 'iso8859-13':\n    case 'iso885913':\n      return 'ISO-8859-13'\n    case 'iso-8859-14':\n    case 'iso8859-14':\n    case 'iso885914':\n      return 'ISO-8859-14'\n    case 'csisolatin9':\n    case 'iso-8859-15':\n    case 'iso8859-15':\n    case 'iso885915':\n    case 'iso_8859-15':\n    case 'l9':\n      return 'ISO-8859-15'\n    case 'iso-8859-16':\n      return 'ISO-8859-16'\n    case 'cskoi8r':\n    case 'koi':\n    case 'koi8':\n    case 'koi8-r':\n    case 'koi8_r':\n      return 'KOI8-R'\n    case 'koi8-ru':\n    case 'koi8-u':\n      return 'KOI8-U'\n    case 'csmacintosh':\n    case 'mac':\n    case 'macintosh':\n    case 'x-mac-roman':\n      return 'macintosh'\n    case 'iso-8859-11':\n    case 'iso8859-11':\n    case 'iso885911':\n    case 'tis-620':\n    case 'windows-874':\n      return 'windows-874'\n    case 'cp1250':\n    case 'windows-1250':\n    case 'x-cp1250':\n      return 'windows-1250'\n    case 'cp1251':\n    case 'windows-1251':\n    case 'x-cp1251':\n      return 'windows-1251'\n    case 'ansi_x3.4-1968':\n    case 'ascii':\n    case 'cp1252':\n    case 'cp819':\n    case 'csisolatin1':\n    case 'ibm819':\n    case 'iso-8859-1':\n    case 'iso-ir-100':\n    case 'iso8859-1':\n    case 'iso88591':\n    case 'iso_8859-1':\n    case 'iso_8859-1:1987':\n    case 'l1':\n    case 'latin1':\n    case 'us-ascii':\n    case 'windows-1252':\n    case 'x-cp1252':\n      return 'windows-1252'\n    case 'cp1253':\n    case 'windows-1253':\n    case 'x-cp1253':\n      return 'windows-1253'\n    case 'cp1254':\n    case 'csisolatin5':\n    case 'iso-8859-9':\n    case 'iso-ir-148':\n    case 'iso8859-9':\n    case 'iso88599':\n    case 'iso_8859-9':\n    case 'iso_8859-9:1989':\n    case 'l5':\n    case 'latin5':\n    case 'windows-1254':\n    case 'x-cp1254':\n      return 'windows-1254'\n    case 'cp1255':\n    case 'windows-1255':\n    case 'x-cp1255':\n      return 'windows-1255'\n    case 'cp1256':\n    case 'windows-1256':\n    case 'x-cp1256':\n      return 'windows-1256'\n    case 'cp1257':\n    case 'windows-1257':\n    case 'x-cp1257':\n      return 'windows-1257'\n    case 'cp1258':\n    case 'windows-1258':\n    case 'x-cp1258':\n      return 'windows-1258'\n    case 'x-mac-cyrillic':\n    case 'x-mac-ukrainian':\n      return 'x-mac-cyrillic'\n    case 'chinese':\n    case 'csgb2312':\n    case 'csiso58gb231280':\n    case 'gb2312':\n    case 'gb_2312':\n    case 'gb_2312-80':\n    case 'gbk':\n    case 'iso-ir-58':\n    case 'x-gbk':\n      return 'GBK'\n    case 'gb18030':\n      return 'gb18030'\n    case 'big5':\n    case 'big5-hkscs':\n    case 'cn-big5':\n    case 'csbig5':\n    case 'x-x-big5':\n      return 'Big5'\n    case 'cseucpkdfmtjapanese':\n    case 'euc-jp':\n    case 'x-euc-jp':\n      return 'EUC-JP'\n    case 'csiso2022jp':\n    case 'iso-2022-jp':\n      return 'ISO-2022-JP'\n    case 'csshiftjis':\n    case 'ms932':\n    case 'ms_kanji':\n    case 'shift-jis':\n    case 'shift_jis':\n    case 'sjis':\n    case 'windows-31j':\n    case 'x-sjis':\n      return 'Shift_JIS'\n    case 'cseuckr':\n    case 'csksc56011987':\n    case 'euc-kr':\n    case 'iso-ir-149':\n    case 'korean':\n    case 'ks_c_5601-1987':\n    case 'ks_c_5601-1989':\n    case 'ksc5601':\n    case 'ksc_5601':\n    case 'windows-949':\n      return 'EUC-KR'\n    case 'csiso2022kr':\n    case 'hz-gb-2312':\n    case 'iso-2022-cn':\n    case 'iso-2022-cn-ext':\n    case 'iso-2022-kr':\n    case 'replacement':\n      return 'replacement'\n    case 'unicodefffe':\n    case 'utf-16be':\n      return 'UTF-16BE'\n    case 'csunicode':\n    case 'iso-10646-ucs-2':\n    case 'ucs-2':\n    case 'unicode':\n    case 'unicodefeff':\n    case 'utf-16':\n    case 'utf-16le':\n      return 'UTF-16LE'\n    case 'x-user-defined':\n      return 'x-user-defined'\n    default: return 'failure'\n  }\n}\n\nmodule.exports = {\n  getEncoding\n}\n", "'use strict'\n\nconst {\n  kState,\n  kError,\n  kResult,\n  kAborted,\n  kLastProgressEventFired\n} = require('./symbols')\nconst { ProgressEvent } = require('./progressevent')\nconst { getEncoding } = require('./encoding')\nconst { DOMException } = require('../fetch/constants')\nconst { serializeAMimeType, parseMIMEType } = require('../fetch/dataURL')\nconst { types } = require('util')\nconst { StringDecoder } = require('string_decoder')\nconst { btoa } = require('buffer')\n\n/** @type {PropertyDescriptor} */\nconst staticPropertyDescriptors = {\n  enumerable: true,\n  writable: false,\n  configurable: false\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#readOperation\n * @param {import('./filereader').FileReader} fr\n * @param {import('buffer').Blob} blob\n * @param {string} type\n * @param {string?} encodingName\n */\nfunction readOperation (fr, blob, type, encodingName) {\n  // 1. If fr\u2019s state is \"loading\", throw an InvalidStateError\n  //    DOMException.\n  if (fr[kState] === 'loading') {\n    throw new DOMException('Invalid state', 'InvalidStateError')\n  }\n\n  // 2. Set fr\u2019s state to \"loading\".\n  fr[kState] = 'loading'\n\n  // 3. Set fr\u2019s result to null.\n  fr[kResult] = null\n\n  // 4. Set fr\u2019s error to null.\n  fr[kError] = null\n\n  // 5. Let stream be the result of calling get stream on blob.\n  /** @type {import('stream/web').ReadableStream} */\n  const stream = blob.stream()\n\n  // 6. Let reader be the result of getting a reader from stream.\n  const reader = stream.getReader()\n\n  // 7. Let bytes be an empty byte sequence.\n  /** @type {Uint8Array[]} */\n  const bytes = []\n\n  // 8. Let chunkPromise be the result of reading a chunk from\n  //    stream with reader.\n  let chunkPromise = reader.read()\n\n  // 9. Let isFirstChunk be true.\n  let isFirstChunk = true\n\n  // 10. In parallel, while true:\n  // Note: \"In parallel\" just means non-blocking\n  // Note 2: readOperation itself cannot be async as double\n  // reading the body would then reject the promise, instead\n  // of throwing an error.\n  ;(async () => {\n    while (!fr[kAborted]) {\n      // 1. Wait for chunkPromise to be fulfilled or rejected.\n      try {\n        const { done, value } = await chunkPromise\n\n        // 2. If chunkPromise is fulfilled, and isFirstChunk is\n        //    true, queue a task to fire a progress event called\n        //    loadstart at fr.\n        if (isFirstChunk && !fr[kAborted]) {\n          queueMicrotask(() => {\n            fireAProgressEvent('loadstart', fr)\n          })\n        }\n\n        // 3. Set isFirstChunk to false.\n        isFirstChunk = false\n\n        // 4. If chunkPromise is fulfilled with an object whose\n        //    done property is false and whose value property is\n        //    a Uint8Array object, run these steps:\n        if (!done && types.isUint8Array(value)) {\n          // 1. Let bs be the byte sequence represented by the\n          //    Uint8Array object.\n\n          // 2. Append bs to bytes.\n          bytes.push(value)\n\n          // 3. If roughly 50ms have passed since these steps\n          //    were last invoked, queue a task to fire a\n          //    progress event called progress at fr.\n          if (\n            (\n              fr[kLastProgressEventFired] === undefined ||\n              Date.now() - fr[kLastProgressEventFired] >= 50\n            ) &&\n            !fr[kAborted]\n          ) {\n            fr[kLastProgressEventFired] = Date.now()\n            queueMicrotask(() => {\n              fireAProgressEvent('progress', fr)\n            })\n          }\n\n          // 4. Set chunkPromise to the result of reading a\n          //    chunk from stream with reader.\n          chunkPromise = reader.read()\n        } else if (done) {\n          // 5. Otherwise, if chunkPromise is fulfilled with an\n          //    object whose done property is true, queue a task\n          //    to run the following steps and abort this algorithm:\n          queueMicrotask(() => {\n            // 1. Set fr\u2019s state to \"done\".\n            fr[kState] = 'done'\n\n            // 2. Let result be the result of package data given\n            //    bytes, type, blob\u2019s type, and encodingName.\n            try {\n              const result = packageData(bytes, type, blob.type, encodingName)\n\n              // 4. Else:\n\n              if (fr[kAborted]) {\n                return\n              }\n\n              // 1. Set fr\u2019s result to result.\n              fr[kResult] = result\n\n              // 2. Fire a progress event called load at the fr.\n              fireAProgressEvent('load', fr)\n            } catch (error) {\n              // 3. If package data threw an exception error:\n\n              // 1. Set fr\u2019s error to error.\n              fr[kError] = error\n\n              // 2. Fire a progress event called error at fr.\n              fireAProgressEvent('error', fr)\n            }\n\n            // 5. If fr\u2019s state is not \"loading\", fire a progress\n            //    event called loadend at the fr.\n            if (fr[kState] !== 'loading') {\n              fireAProgressEvent('loadend', fr)\n            }\n          })\n\n          break\n        }\n      } catch (error) {\n        if (fr[kAborted]) {\n          return\n        }\n\n        // 6. Otherwise, if chunkPromise is rejected with an\n        //    error error, queue a task to run the following\n        //    steps and abort this algorithm:\n        queueMicrotask(() => {\n          // 1. Set fr\u2019s state to \"done\".\n          fr[kState] = 'done'\n\n          // 2. Set fr\u2019s error to error.\n          fr[kError] = error\n\n          // 3. Fire a progress event called error at fr.\n          fireAProgressEvent('error', fr)\n\n          // 4. If fr\u2019s state is not \"loading\", fire a progress\n          //    event called loadend at fr.\n          if (fr[kState] !== 'loading') {\n            fireAProgressEvent('loadend', fr)\n          }\n        })\n\n        break\n      }\n    }\n  })()\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#fire-a-progress-event\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e The name of the event\n * @param {import('./filereader').FileReader} reader\n */\nfunction fireAProgressEvent (e, reader) {\n  // The progress event e does not bubble. e.bubbles must be false\n  // The progress event e is NOT cancelable. e.cancelable must be false\n  const event = new ProgressEvent(e, {\n    bubbles: false,\n    cancelable: false\n  })\n\n  reader.dispatchEvent(event)\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#blob-package-data\n * @param {Uint8Array[]} bytes\n * @param {string} type\n * @param {string?} mimeType\n * @param {string?} encodingName\n */\nfunction packageData (bytes, type, mimeType, encodingName) {\n  // 1. A Blob has an associated package data algorithm, given\n  //    bytes, a type, a optional mimeType, and a optional\n  //    encodingName, which switches on type and runs the\n  //    associated steps:\n\n  switch (type) {\n    case 'DataURL': {\n      // 1. Return bytes as a DataURL [RFC2397] subject to\n      //    the considerations below:\n      //  * Use mimeType as part of the Data URL if it is\n      //    available in keeping with the Data URL\n      //    specification [RFC2397].\n      //  * If mimeType is not available return a Data URL\n      //    without a media-type. [RFC2397].\n\n      // https://datatracker.ietf.org/doc/html/rfc2397#section-3\n      // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n      // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n      // data       := *urlchar\n      // parameter  := attribute \"=\" value\n      let dataURL = 'data:'\n\n      const parsed = parseMIMEType(mimeType || 'application/octet-stream')\n\n      if (parsed !== 'failure') {\n        dataURL += serializeAMimeType(parsed)\n      }\n\n      dataURL += ';base64,'\n\n      const decoder = new StringDecoder('latin1')\n\n      for (const chunk of bytes) {\n        dataURL += btoa(decoder.write(chunk))\n      }\n\n      dataURL += btoa(decoder.end())\n\n      return dataURL\n    }\n    case 'Text': {\n      // 1. Let encoding be failure\n      let encoding = 'failure'\n\n      // 2. If the encodingName is present, set encoding to the\n      //    result of getting an encoding from encodingName.\n      if (encodingName) {\n        encoding = getEncoding(encodingName)\n      }\n\n      // 3. If encoding is failure, and mimeType is present:\n      if (encoding === 'failure' && mimeType) {\n        // 1. Let type be the result of parse a MIME type\n        //    given mimeType.\n        const type = parseMIMEType(mimeType)\n\n        // 2. If type is not failure, set encoding to the result\n        //    of getting an encoding from type\u2019s parameters[\"charset\"].\n        if (type !== 'failure') {\n          encoding = getEncoding(type.parameters.get('charset'))\n        }\n      }\n\n      // 4. If encoding is failure, then set encoding to UTF-8.\n      if (encoding === 'failure') {\n        encoding = 'UTF-8'\n      }\n\n      // 5. Decode bytes using fallback encoding encoding, and\n      //    return the result.\n      return decode(bytes, encoding)\n    }\n    case 'ArrayBuffer': {\n      // Return a new ArrayBuffer whose contents are bytes.\n      const sequence = combineByteSequences(bytes)\n\n      return sequence.buffer\n    }\n    case 'BinaryString': {\n      // Return bytes as a binary string, in which every byte\n      //  is represented by a code unit of equal value [0..255].\n      let binaryString = ''\n\n      const decoder = new StringDecoder('latin1')\n\n      for (const chunk of bytes) {\n        binaryString += decoder.write(chunk)\n      }\n\n      binaryString += decoder.end()\n\n      return binaryString\n    }\n  }\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#decode\n * @param {Uint8Array[]} ioQueue\n * @param {string} encoding\n */\nfunction decode (ioQueue, encoding) {\n  const bytes = combineByteSequences(ioQueue)\n\n  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.\n  const BOMEncoding = BOMSniffing(bytes)\n\n  let slice = 0\n\n  // 2. If BOMEncoding is non-null:\n  if (BOMEncoding !== null) {\n    // 1. Set encoding to BOMEncoding.\n    encoding = BOMEncoding\n\n    // 2. Read three bytes from ioQueue, if BOMEncoding is\n    //    UTF-8; otherwise read two bytes.\n    //    (Do nothing with those bytes.)\n    slice = BOMEncoding === 'UTF-8' ? 3 : 2\n  }\n\n  // 3. Process a queue with an instance of encoding\u2019s\n  //    decoder, ioQueue, output, and \"replacement\".\n\n  // 4. Return output.\n\n  const sliced = bytes.slice(slice)\n  return new TextDecoder(encoding).decode(sliced)\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#bom-sniff\n * @param {Uint8Array} ioQueue\n */\nfunction BOMSniffing (ioQueue) {\n  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,\n  //    converted to a byte sequence.\n  const [a, b, c] = ioQueue\n\n  // 2. For each of the rows in the table below, starting with\n  //    the first one and going down, if BOM starts with the\n  //    bytes given in the first column, then return the\n  //    encoding given in the cell in the second column of that\n  //    row. Otherwise, return null.\n  if (a === 0xEF && b === 0xBB && c === 0xBF) {\n    return 'UTF-8'\n  } else if (a === 0xFE && b === 0xFF) {\n    return 'UTF-16BE'\n  } else if (a === 0xFF && b === 0xFE) {\n    return 'UTF-16LE'\n  }\n\n  return null\n}\n\n/**\n * @param {Uint8Array[]} sequences\n */\nfunction combineByteSequences (sequences) {\n  const size = sequences.reduce((a, b) => {\n    return a + b.byteLength\n  }, 0)\n\n  let offset = 0\n\n  return sequences.reduce((a, b) => {\n    a.set(b, offset)\n    offset += b.byteLength\n    return a\n  }, new Uint8Array(size))\n}\n\nmodule.exports = {\n  staticPropertyDescriptors,\n  readOperation,\n  fireAProgressEvent\n}\n", "'use strict'\n\nconst {\n  staticPropertyDescriptors,\n  readOperation,\n  fireAProgressEvent\n} = require('./util')\nconst {\n  kState,\n  kError,\n  kResult,\n  kEvents,\n  kAborted\n} = require('./symbols')\nconst { webidl } = require('../fetch/webidl')\nconst { kEnumerableProperty } = require('../core/util')\n\nclass FileReader extends EventTarget {\n  constructor () {\n    super()\n\n    this[kState] = 'empty'\n    this[kResult] = null\n    this[kError] = null\n    this[kEvents] = {\n      loadend: null,\n      error: null,\n      abort: null,\n      load: null,\n      progress: null,\n      loadstart: null\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer\n   * @param {import('buffer').Blob} blob\n   */\n  readAsArrayBuffer (blob) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsArrayBuffer' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    // The readAsArrayBuffer(blob) method, when invoked,\n    // must initiate a read operation for blob with ArrayBuffer.\n    readOperation(this, blob, 'ArrayBuffer')\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#readAsBinaryString\n   * @param {import('buffer').Blob} blob\n   */\n  readAsBinaryString (blob) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsBinaryString' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    // The readAsBinaryString(blob) method, when invoked,\n    // must initiate a read operation for blob with BinaryString.\n    readOperation(this, blob, 'BinaryString')\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#readAsDataText\n   * @param {import('buffer').Blob} blob\n   * @param {string?} encoding\n   */\n  readAsText (blob, encoding = undefined) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsText' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    if (encoding !== undefined) {\n      encoding = webidl.converters.DOMString(encoding)\n    }\n\n    // The readAsText(blob, encoding) method, when invoked,\n    // must initiate a read operation for blob with Text and encoding.\n    readOperation(this, blob, 'Text', encoding)\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL\n   * @param {import('buffer').Blob} blob\n   */\n  readAsDataURL (blob) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsDataURL' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    // The readAsDataURL(blob) method, when invoked, must\n    // initiate a read operation for blob with DataURL.\n    readOperation(this, blob, 'DataURL')\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-abort\n   */\n  abort () {\n    // 1. If this's state is \"empty\" or if this's state is\n    //    \"done\" set this's result to null and terminate\n    //    this algorithm.\n    if (this[kState] === 'empty' || this[kState] === 'done') {\n      this[kResult] = null\n      return\n    }\n\n    // 2. If this's state is \"loading\" set this's state to\n    //    \"done\" and set this's result to null.\n    if (this[kState] === 'loading') {\n      this[kState] = 'done'\n      this[kResult] = null\n    }\n\n    // 3. If there are any tasks from this on the file reading\n    //    task source in an affiliated task queue, then remove\n    //    those tasks from that task queue.\n    this[kAborted] = true\n\n    // 4. Terminate the algorithm for the read method being processed.\n    // TODO\n\n    // 5. Fire a progress event called abort at this.\n    fireAProgressEvent('abort', this)\n\n    // 6. If this's state is not \"loading\", fire a progress\n    //    event called loadend at this.\n    if (this[kState] !== 'loading') {\n      fireAProgressEvent('loadend', this)\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate\n   */\n  get readyState () {\n    webidl.brandCheck(this, FileReader)\n\n    switch (this[kState]) {\n      case 'empty': return this.EMPTY\n      case 'loading': return this.LOADING\n      case 'done': return this.DONE\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-result\n   */\n  get result () {\n    webidl.brandCheck(this, FileReader)\n\n    // The result attribute\u2019s getter, when invoked, must return\n    // this's result.\n    return this[kResult]\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-error\n   */\n  get error () {\n    webidl.brandCheck(this, FileReader)\n\n    // The error attribute\u2019s getter, when invoked, must return\n    // this's error.\n    return this[kError]\n  }\n\n  get onloadend () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].loadend\n  }\n\n  set onloadend (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].loadend) {\n      this.removeEventListener('loadend', this[kEvents].loadend)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].loadend = fn\n      this.addEventListener('loadend', fn)\n    } else {\n      this[kEvents].loadend = null\n    }\n  }\n\n  get onerror () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].error\n  }\n\n  set onerror (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].error) {\n      this.removeEventListener('error', this[kEvents].error)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].error = fn\n      this.addEventListener('error', fn)\n    } else {\n      this[kEvents].error = null\n    }\n  }\n\n  get onloadstart () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].loadstart\n  }\n\n  set onloadstart (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].loadstart) {\n      this.removeEventListener('loadstart', this[kEvents].loadstart)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].loadstart = fn\n      this.addEventListener('loadstart', fn)\n    } else {\n      this[kEvents].loadstart = null\n    }\n  }\n\n  get onprogress () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].progress\n  }\n\n  set onprogress (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].progress) {\n      this.removeEventListener('progress', this[kEvents].progress)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].progress = fn\n      this.addEventListener('progress', fn)\n    } else {\n      this[kEvents].progress = null\n    }\n  }\n\n  get onload () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].load\n  }\n\n  set onload (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].load) {\n      this.removeEventListener('load', this[kEvents].load)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].load = fn\n      this.addEventListener('load', fn)\n    } else {\n      this[kEvents].load = null\n    }\n  }\n\n  get onabort () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].abort\n  }\n\n  set onabort (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].abort) {\n      this.removeEventListener('abort', this[kEvents].abort)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].abort = fn\n      this.addEventListener('abort', fn)\n    } else {\n      this[kEvents].abort = null\n    }\n  }\n}\n\n// https://w3c.github.io/FileAPI/#dom-filereader-empty\nFileReader.EMPTY = FileReader.prototype.EMPTY = 0\n// https://w3c.github.io/FileAPI/#dom-filereader-loading\nFileReader.LOADING = FileReader.prototype.LOADING = 1\n// https://w3c.github.io/FileAPI/#dom-filereader-done\nFileReader.DONE = FileReader.prototype.DONE = 2\n\nObject.defineProperties(FileReader.prototype, {\n  EMPTY: staticPropertyDescriptors,\n  LOADING: staticPropertyDescriptors,\n  DONE: staticPropertyDescriptors,\n  readAsArrayBuffer: kEnumerableProperty,\n  readAsBinaryString: kEnumerableProperty,\n  readAsText: kEnumerableProperty,\n  readAsDataURL: kEnumerableProperty,\n  abort: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  result: kEnumerableProperty,\n  error: kEnumerableProperty,\n  onloadstart: kEnumerableProperty,\n  onprogress: kEnumerableProperty,\n  onload: kEnumerableProperty,\n  onabort: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onloadend: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'FileReader',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n})\n\nObject.defineProperties(FileReader, {\n  EMPTY: staticPropertyDescriptors,\n  LOADING: staticPropertyDescriptors,\n  DONE: staticPropertyDescriptors\n})\n\nmodule.exports = {\n  FileReader\n}\n", "'use strict'\n\nmodule.exports = {\n  kConstruct: require('../core/symbols').kConstruct\n}\n", "'use strict'\n\nconst assert = require('assert')\nconst { URLSerializer } = require('../fetch/dataURL')\nconst { isValidHeaderName } = require('../fetch/util')\n\n/**\n * @see https://url.spec.whatwg.org/#concept-url-equals\n * @param {URL} A\n * @param {URL} B\n * @param {boolean | undefined} excludeFragment\n * @returns {boolean}\n */\nfunction urlEquals (A, B, excludeFragment = false) {\n  const serializedA = URLSerializer(A, excludeFragment)\n\n  const serializedB = URLSerializer(B, excludeFragment)\n\n  return serializedA === serializedB\n}\n\n/**\n * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262\n * @param {string} header\n */\nfunction fieldValues (header) {\n  assert(header !== null)\n\n  const values = []\n\n  for (let value of header.split(',')) {\n    value = value.trim()\n\n    if (!value.length) {\n      continue\n    } else if (!isValidHeaderName(value)) {\n      continue\n    }\n\n    values.push(value)\n  }\n\n  return values\n}\n\nmodule.exports = {\n  urlEquals,\n  fieldValues\n}\n", "'use strict'\n\nconst { kConstruct } = require('./symbols')\nconst { urlEquals, fieldValues: getFieldValues } = require('./util')\nconst { kEnumerableProperty, isDisturbed } = require('../core/util')\nconst { kHeadersList } = require('../core/symbols')\nconst { webidl } = require('../fetch/webidl')\nconst { Response, cloneResponse } = require('../fetch/response')\nconst { Request } = require('../fetch/request')\nconst { kState, kHeaders, kGuard, kRealm } = require('../fetch/symbols')\nconst { fetching } = require('../fetch/index')\nconst { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require('../fetch/util')\nconst assert = require('assert')\nconst { getGlobalDispatcher } = require('../global')\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation\n * @typedef {Object} CacheBatchOperation\n * @property {'delete' | 'put'} type\n * @property {any} request\n * @property {any} response\n * @property {import('../../types/cache').CacheQueryOptions} options\n */\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list\n * @typedef {[any, any][]} requestResponseList\n */\n\nclass Cache {\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list\n   * @type {requestResponseList}\n   */\n  #relevantRequestResponseList\n\n  constructor () {\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor()\n    }\n\n    this.#relevantRequestResponseList = arguments[1]\n  }\n\n  async match (request, options = {}) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.match' })\n\n    request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    const p = await this.matchAll(request, options)\n\n    if (p.length === 0) {\n      return\n    }\n\n    return p[0]\n  }\n\n  async matchAll (request = undefined, options = {}) {\n    webidl.brandCheck(this, Cache)\n\n    if (request !== undefined) request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    // 1.\n    let r = null\n\n    // 2.\n    if (request !== undefined) {\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState]\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return []\n        }\n      } else if (typeof request === 'string') {\n        // 2.2.1\n        r = new Request(request)[kState]\n      }\n    }\n\n    // 5.\n    // 5.1\n    const responses = []\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of this.#relevantRequestResponseList) {\n        responses.push(requestResponse[1])\n      }\n    } else { // 5.3\n      // 5.3.1\n      const requestResponses = this.#queryCache(r, options)\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        responses.push(requestResponse[1])\n      }\n    }\n\n    // 5.4\n    // We don't implement CORs so we don't need to loop over the responses, yay!\n\n    // 5.5.1\n    const responseList = []\n\n    // 5.5.2\n    for (const response of responses) {\n      // 5.5.2.1\n      const responseObject = new Response(response.body?.source ?? null)\n      const body = responseObject[kState].body\n      responseObject[kState] = response\n      responseObject[kState].body = body\n      responseObject[kHeaders][kHeadersList] = response.headersList\n      responseObject[kHeaders][kGuard] = 'immutable'\n\n      responseList.push(responseObject)\n    }\n\n    // 6.\n    return Object.freeze(responseList)\n  }\n\n  async add (request) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.add' })\n\n    request = webidl.converters.RequestInfo(request)\n\n    // 1.\n    const requests = [request]\n\n    // 2.\n    const responseArrayPromise = this.addAll(requests)\n\n    // 3.\n    return await responseArrayPromise\n  }\n\n  async addAll (requests) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.addAll' })\n\n    requests = webidl.converters['sequence<RequestInfo>'](requests)\n\n    // 1.\n    const responsePromises = []\n\n    // 2.\n    const requestList = []\n\n    // 3.\n    for (const request of requests) {\n      if (typeof request === 'string') {\n        continue\n      }\n\n      // 3.1\n      const r = request[kState]\n\n      // 3.2\n      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {\n        throw webidl.errors.exception({\n          header: 'Cache.addAll',\n          message: 'Expected http/s scheme when method is not GET.'\n        })\n      }\n    }\n\n    // 4.\n    /** @type {ReturnType<typeof fetching>[]} */\n    const fetchControllers = []\n\n    // 5.\n    for (const request of requests) {\n      // 5.1\n      const r = new Request(request)[kState]\n\n      // 5.2\n      if (!urlIsHttpHttpsScheme(r.url)) {\n        throw webidl.errors.exception({\n          header: 'Cache.addAll',\n          message: 'Expected http/s scheme.'\n        })\n      }\n\n      // 5.4\n      r.initiator = 'fetch'\n      r.destination = 'subresource'\n\n      // 5.5\n      requestList.push(r)\n\n      // 5.6\n      const responsePromise = createDeferredPromise()\n\n      // 5.7\n      fetchControllers.push(fetching({\n        request: r,\n        dispatcher: getGlobalDispatcher(),\n        processResponse (response) {\n          // 1.\n          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {\n            responsePromise.reject(webidl.errors.exception({\n              header: 'Cache.addAll',\n              message: 'Received an invalid status code or the request failed.'\n            }))\n          } else if (response.headersList.contains('vary')) { // 2.\n            // 2.1\n            const fieldValues = getFieldValues(response.headersList.get('vary'))\n\n            // 2.2\n            for (const fieldValue of fieldValues) {\n              // 2.2.1\n              if (fieldValue === '*') {\n                responsePromise.reject(webidl.errors.exception({\n                  header: 'Cache.addAll',\n                  message: 'invalid vary field value'\n                }))\n\n                for (const controller of fetchControllers) {\n                  controller.abort()\n                }\n\n                return\n              }\n            }\n          }\n        },\n        processResponseEndOfBody (response) {\n          // 1.\n          if (response.aborted) {\n            responsePromise.reject(new DOMException('aborted', 'AbortError'))\n            return\n          }\n\n          // 2.\n          responsePromise.resolve(response)\n        }\n      }))\n\n      // 5.8\n      responsePromises.push(responsePromise.promise)\n    }\n\n    // 6.\n    const p = Promise.all(responsePromises)\n\n    // 7.\n    const responses = await p\n\n    // 7.1\n    const operations = []\n\n    // 7.2\n    let index = 0\n\n    // 7.3\n    for (const response of responses) {\n      // 7.3.1\n      /** @type {CacheBatchOperation} */\n      const operation = {\n        type: 'put', // 7.3.2\n        request: requestList[index], // 7.3.3\n        response // 7.3.4\n      }\n\n      operations.push(operation) // 7.3.5\n\n      index++ // 7.3.6\n    }\n\n    // 7.5\n    const cacheJobPromise = createDeferredPromise()\n\n    // 7.6.1\n    let errorData = null\n\n    // 7.6.2\n    try {\n      this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    // 7.6.3\n    queueMicrotask(() => {\n      // 7.6.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve(undefined)\n      } else {\n        // 7.6.3.2\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    // 7.7\n    return cacheJobPromise.promise\n  }\n\n  async put (request, response) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Cache.put' })\n\n    request = webidl.converters.RequestInfo(request)\n    response = webidl.converters.Response(response)\n\n    // 1.\n    let innerRequest = null\n\n    // 2.\n    if (request instanceof Request) {\n      innerRequest = request[kState]\n    } else { // 3.\n      innerRequest = new Request(request)[kState]\n    }\n\n    // 4.\n    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {\n      throw webidl.errors.exception({\n        header: 'Cache.put',\n        message: 'Expected an http/s scheme when method is not GET'\n      })\n    }\n\n    // 5.\n    const innerResponse = response[kState]\n\n    // 6.\n    if (innerResponse.status === 206) {\n      throw webidl.errors.exception({\n        header: 'Cache.put',\n        message: 'Got 206 status'\n      })\n    }\n\n    // 7.\n    if (innerResponse.headersList.contains('vary')) {\n      // 7.1.\n      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'))\n\n      // 7.2.\n      for (const fieldValue of fieldValues) {\n        // 7.2.1\n        if (fieldValue === '*') {\n          throw webidl.errors.exception({\n            header: 'Cache.put',\n            message: 'Got * vary field value'\n          })\n        }\n      }\n    }\n\n    // 8.\n    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {\n      throw webidl.errors.exception({\n        header: 'Cache.put',\n        message: 'Response body is locked or disturbed'\n      })\n    }\n\n    // 9.\n    const clonedResponse = cloneResponse(innerResponse)\n\n    // 10.\n    const bodyReadPromise = createDeferredPromise()\n\n    // 11.\n    if (innerResponse.body != null) {\n      // 11.1\n      const stream = innerResponse.body.stream\n\n      // 11.2\n      const reader = stream.getReader()\n\n      // 11.3\n      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject)\n    } else {\n      bodyReadPromise.resolve(undefined)\n    }\n\n    // 12.\n    /** @type {CacheBatchOperation[]} */\n    const operations = []\n\n    // 13.\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'put', // 14.\n      request: innerRequest, // 15.\n      response: clonedResponse // 16.\n    }\n\n    // 17.\n    operations.push(operation)\n\n    // 19.\n    const bytes = await bodyReadPromise.promise\n\n    if (clonedResponse.body != null) {\n      clonedResponse.body.source = bytes\n    }\n\n    // 19.1\n    const cacheJobPromise = createDeferredPromise()\n\n    // 19.2.1\n    let errorData = null\n\n    // 19.2.2\n    try {\n      this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    // 19.2.3\n    queueMicrotask(() => {\n      // 19.2.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve()\n      } else { // 19.2.3.2\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    return cacheJobPromise.promise\n  }\n\n  async delete (request, options = {}) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.delete' })\n\n    request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    /**\n     * @type {Request}\n     */\n    let r = null\n\n    if (request instanceof Request) {\n      r = request[kState]\n\n      if (r.method !== 'GET' && !options.ignoreMethod) {\n        return false\n      }\n    } else {\n      assert(typeof request === 'string')\n\n      r = new Request(request)[kState]\n    }\n\n    /** @type {CacheBatchOperation[]} */\n    const operations = []\n\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'delete',\n      request: r,\n      options\n    }\n\n    operations.push(operation)\n\n    const cacheJobPromise = createDeferredPromise()\n\n    let errorData = null\n    let requestResponses\n\n    try {\n      requestResponses = this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    queueMicrotask(() => {\n      if (errorData === null) {\n        cacheJobPromise.resolve(!!requestResponses?.length)\n      } else {\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    return cacheJobPromise.promise\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys\n   * @param {any} request\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @returns {readonly Request[]}\n   */\n  async keys (request = undefined, options = {}) {\n    webidl.brandCheck(this, Cache)\n\n    if (request !== undefined) request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    // 1.\n    let r = null\n\n    // 2.\n    if (request !== undefined) {\n      // 2.1\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState]\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return []\n        }\n      } else if (typeof request === 'string') { // 2.2\n        r = new Request(request)[kState]\n      }\n    }\n\n    // 4.\n    const promise = createDeferredPromise()\n\n    // 5.\n    // 5.1\n    const requests = []\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of this.#relevantRequestResponseList) {\n        // 5.2.1.1\n        requests.push(requestResponse[0])\n      }\n    } else { // 5.3\n      // 5.3.1\n      const requestResponses = this.#queryCache(r, options)\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        // 5.3.2.1\n        requests.push(requestResponse[0])\n      }\n    }\n\n    // 5.4\n    queueMicrotask(() => {\n      // 5.4.1\n      const requestList = []\n\n      // 5.4.2\n      for (const request of requests) {\n        const requestObject = new Request('https://a')\n        requestObject[kState] = request\n        requestObject[kHeaders][kHeadersList] = request.headersList\n        requestObject[kHeaders][kGuard] = 'immutable'\n        requestObject[kRealm] = request.client\n\n        // 5.4.2.1\n        requestList.push(requestObject)\n      }\n\n      // 5.4.3\n      promise.resolve(Object.freeze(requestList))\n    })\n\n    return promise.promise\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm\n   * @param {CacheBatchOperation[]} operations\n   * @returns {requestResponseList}\n   */\n  #batchCacheOperations (operations) {\n    // 1.\n    const cache = this.#relevantRequestResponseList\n\n    // 2.\n    const backupCache = [...cache]\n\n    // 3.\n    const addedItems = []\n\n    // 4.1\n    const resultList = []\n\n    try {\n      // 4.2\n      for (const operation of operations) {\n        // 4.2.1\n        if (operation.type !== 'delete' && operation.type !== 'put') {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'operation type does not match \"delete\" or \"put\"'\n          })\n        }\n\n        // 4.2.2\n        if (operation.type === 'delete' && operation.response != null) {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'delete operation should not have an associated response'\n          })\n        }\n\n        // 4.2.3\n        if (this.#queryCache(operation.request, operation.options, addedItems).length) {\n          throw new DOMException('???', 'InvalidStateError')\n        }\n\n        // 4.2.4\n        let requestResponses\n\n        // 4.2.5\n        if (operation.type === 'delete') {\n          // 4.2.5.1\n          requestResponses = this.#queryCache(operation.request, operation.options)\n\n          // TODO: the spec is wrong, this is needed to pass WPTs\n          if (requestResponses.length === 0) {\n            return []\n          }\n\n          // 4.2.5.2\n          for (const requestResponse of requestResponses) {\n            const idx = cache.indexOf(requestResponse)\n            assert(idx !== -1)\n\n            // 4.2.5.2.1\n            cache.splice(idx, 1)\n          }\n        } else if (operation.type === 'put') { // 4.2.6\n          // 4.2.6.1\n          if (operation.response == null) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'put operation should have an associated response'\n            })\n          }\n\n          // 4.2.6.2\n          const r = operation.request\n\n          // 4.2.6.3\n          if (!urlIsHttpHttpsScheme(r.url)) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'expected http or https scheme'\n            })\n          }\n\n          // 4.2.6.4\n          if (r.method !== 'GET') {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'not get method'\n            })\n          }\n\n          // 4.2.6.5\n          if (operation.options != null) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'options must not be defined'\n            })\n          }\n\n          // 4.2.6.6\n          requestResponses = this.#queryCache(operation.request)\n\n          // 4.2.6.7\n          for (const requestResponse of requestResponses) {\n            const idx = cache.indexOf(requestResponse)\n            assert(idx !== -1)\n\n            // 4.2.6.7.1\n            cache.splice(idx, 1)\n          }\n\n          // 4.2.6.8\n          cache.push([operation.request, operation.response])\n\n          // 4.2.6.10\n          addedItems.push([operation.request, operation.response])\n        }\n\n        // 4.2.7\n        resultList.push([operation.request, operation.response])\n      }\n\n      // 4.3\n      return resultList\n    } catch (e) { // 5.\n      // 5.1\n      this.#relevantRequestResponseList.length = 0\n\n      // 5.2\n      this.#relevantRequestResponseList = backupCache\n\n      // 5.3\n      throw e\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#query-cache\n   * @param {any} requestQuery\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @param {requestResponseList} targetStorage\n   * @returns {requestResponseList}\n   */\n  #queryCache (requestQuery, options, targetStorage) {\n    /** @type {requestResponseList} */\n    const resultList = []\n\n    const storage = targetStorage ?? this.#relevantRequestResponseList\n\n    for (const requestResponse of storage) {\n      const [cachedRequest, cachedResponse] = requestResponse\n      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {\n        resultList.push(requestResponse)\n      }\n    }\n\n    return resultList\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm\n   * @param {any} requestQuery\n   * @param {any} request\n   * @param {any | null} response\n   * @param {import('../../types/cache').CacheQueryOptions | undefined} options\n   * @returns {boolean}\n   */\n  #requestMatchesCachedItem (requestQuery, request, response = null, options) {\n    // if (options?.ignoreMethod === false && request.method === 'GET') {\n    //   return false\n    // }\n\n    const queryURL = new URL(requestQuery.url)\n\n    const cachedURL = new URL(request.url)\n\n    if (options?.ignoreSearch) {\n      cachedURL.search = ''\n\n      queryURL.search = ''\n    }\n\n    if (!urlEquals(queryURL, cachedURL, true)) {\n      return false\n    }\n\n    if (\n      response == null ||\n      options?.ignoreVary ||\n      !response.headersList.contains('vary')\n    ) {\n      return true\n    }\n\n    const fieldValues = getFieldValues(response.headersList.get('vary'))\n\n    for (const fieldValue of fieldValues) {\n      if (fieldValue === '*') {\n        return false\n      }\n\n      const requestValue = request.headersList.get(fieldValue)\n      const queryValue = requestQuery.headersList.get(fieldValue)\n\n      // If one has the header and the other doesn't, or one has\n      // a different value than the other, return false\n      if (requestValue !== queryValue) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nObject.defineProperties(Cache.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'Cache',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  matchAll: kEnumerableProperty,\n  add: kEnumerableProperty,\n  addAll: kEnumerableProperty,\n  put: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n})\n\nconst cacheQueryOptionConverters = [\n  {\n    key: 'ignoreSearch',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'ignoreMethod',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'ignoreVary',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  }\n]\n\nwebidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters)\n\nwebidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([\n  ...cacheQueryOptionConverters,\n  {\n    key: 'cacheName',\n    converter: webidl.converters.DOMString\n  }\n])\n\nwebidl.converters.Response = webidl.interfaceConverter(Response)\n\nwebidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(\n  webidl.converters.RequestInfo\n)\n\nmodule.exports = {\n  Cache\n}\n", "'use strict'\n\nconst { kConstruct } = require('./symbols')\nconst { Cache } = require('./cache')\nconst { webidl } = require('../fetch/webidl')\nconst { kEnumerableProperty } = require('../core/util')\n\nclass CacheStorage {\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map\n   * @type {Map<string, import('./cache').requestResponseList}\n   */\n  #caches = new Map()\n\n  constructor () {\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor()\n    }\n  }\n\n  async match (request, options = {}) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.match' })\n\n    request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.MultiCacheQueryOptions(options)\n\n    // 1.\n    if (options.cacheName != null) {\n      // 1.1.1.1\n      if (this.#caches.has(options.cacheName)) {\n        // 1.1.1.1.1\n        const cacheList = this.#caches.get(options.cacheName)\n        const cache = new Cache(kConstruct, cacheList)\n\n        return await cache.match(request, options)\n      }\n    } else { // 2.\n      // 2.2\n      for (const cacheList of this.#caches.values()) {\n        const cache = new Cache(kConstruct, cacheList)\n\n        // 2.2.1.2\n        const response = await cache.match(request, options)\n\n        if (response !== undefined) {\n          return response\n        }\n      }\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */\n  async has (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.has' })\n\n    cacheName = webidl.converters.DOMString(cacheName)\n\n    // 2.1.1\n    // 2.2\n    return this.#caches.has(cacheName)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open\n   * @param {string} cacheName\n   * @returns {Promise<Cache>}\n   */\n  async open (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.open' })\n\n    cacheName = webidl.converters.DOMString(cacheName)\n\n    // 2.1\n    if (this.#caches.has(cacheName)) {\n      // await caches.open('v1') !== await caches.open('v1')\n\n      // 2.1.1\n      const cache = this.#caches.get(cacheName)\n\n      // 2.1.1.1\n      return new Cache(kConstruct, cache)\n    }\n\n    // 2.2\n    const cache = []\n\n    // 2.3\n    this.#caches.set(cacheName, cache)\n\n    // 2.4\n    return new Cache(kConstruct, cache)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */\n  async delete (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.delete' })\n\n    cacheName = webidl.converters.DOMString(cacheName)\n\n    return this.#caches.delete(cacheName)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys\n   * @returns {string[]}\n   */\n  async keys () {\n    webidl.brandCheck(this, CacheStorage)\n\n    // 2.1\n    const keys = this.#caches.keys()\n\n    // 2.2\n    return [...keys]\n  }\n}\n\nObject.defineProperties(CacheStorage.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'CacheStorage',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  has: kEnumerableProperty,\n  open: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n})\n\nmodule.exports = {\n  CacheStorage\n}\n", "'use strict'\n\n// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size\nconst maxAttributeValueSize = 1024\n\n// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size\nconst maxNameValuePairSize = 4096\n\nmodule.exports = {\n  maxAttributeValueSize,\n  maxNameValuePairSize\n}\n", "'use strict'\n\nconst assert = require('assert')\nconst { kHeadersList } = require('../core/symbols')\n\nfunction isCTLExcludingHtab (value) {\n  if (value.length === 0) {\n    return false\n  }\n\n  for (const char of value) {\n    const code = char.charCodeAt(0)\n\n    if (\n      (code >= 0x00 || code <= 0x08) ||\n      (code >= 0x0A || code <= 0x1F) ||\n      code === 0x7F\n    ) {\n      return false\n    }\n  }\n}\n\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */\nfunction validateCookieName (name) {\n  for (const char of name) {\n    const code = char.charCodeAt(0)\n\n    if (\n      (code <= 0x20 || code > 0x7F) ||\n      char === '(' ||\n      char === ')' ||\n      char === '>' ||\n      char === '<' ||\n      char === '@' ||\n      char === ',' ||\n      char === ';' ||\n      char === ':' ||\n      char === '\\\\' ||\n      char === '\"' ||\n      char === '/' ||\n      char === '[' ||\n      char === ']' ||\n      char === '?' ||\n      char === '=' ||\n      char === '{' ||\n      char === '}'\n    ) {\n      throw new Error('Invalid cookie name')\n    }\n  }\n}\n\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */\nfunction validateCookieValue (value) {\n  for (const char of value) {\n    const code = char.charCodeAt(0)\n\n    if (\n      code < 0x21 || // exclude CTLs (0-31)\n      code === 0x22 ||\n      code === 0x2C ||\n      code === 0x3B ||\n      code === 0x5C ||\n      code > 0x7E // non-ascii\n    ) {\n      throw new Error('Invalid header value')\n    }\n  }\n}\n\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */\nfunction validateCookiePath (path) {\n  for (const char of path) {\n    const code = char.charCodeAt(0)\n\n    if (code < 0x21 || char === ';') {\n      throw new Error('Invalid cookie path')\n    }\n  }\n}\n\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */\nfunction validateCookieDomain (domain) {\n  if (\n    domain.startsWith('-') ||\n    domain.endsWith('.') ||\n    domain.endsWith('-')\n  ) {\n    throw new Error('Invalid cookie domain')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */\nfunction toIMFDate (date) {\n  if (typeof date === 'number') {\n    date = new Date(date)\n  }\n\n  const days = [\n    'Sun', 'Mon', 'Tue', 'Wed',\n    'Thu', 'Fri', 'Sat'\n  ]\n\n  const months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ]\n\n  const dayName = days[date.getUTCDay()]\n  const day = date.getUTCDate().toString().padStart(2, '0')\n  const month = months[date.getUTCMonth()]\n  const year = date.getUTCFullYear()\n  const hour = date.getUTCHours().toString().padStart(2, '0')\n  const minute = date.getUTCMinutes().toString().padStart(2, '0')\n  const second = date.getUTCSeconds().toString().padStart(2, '0')\n\n  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`\n}\n\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */\nfunction validateCookieMaxAge (maxAge) {\n  if (maxAge < 0) {\n    throw new Error('Invalid cookie max-age')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */\nfunction stringify (cookie) {\n  if (cookie.name.length === 0) {\n    return null\n  }\n\n  validateCookieName(cookie.name)\n  validateCookieValue(cookie.value)\n\n  const out = [`${cookie.name}=${cookie.value}`]\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n  if (cookie.name.startsWith('__Secure-')) {\n    cookie.secure = true\n  }\n\n  if (cookie.name.startsWith('__Host-')) {\n    cookie.secure = true\n    cookie.domain = null\n    cookie.path = '/'\n  }\n\n  if (cookie.secure) {\n    out.push('Secure')\n  }\n\n  if (cookie.httpOnly) {\n    out.push('HttpOnly')\n  }\n\n  if (typeof cookie.maxAge === 'number') {\n    validateCookieMaxAge(cookie.maxAge)\n    out.push(`Max-Age=${cookie.maxAge}`)\n  }\n\n  if (cookie.domain) {\n    validateCookieDomain(cookie.domain)\n    out.push(`Domain=${cookie.domain}`)\n  }\n\n  if (cookie.path) {\n    validateCookiePath(cookie.path)\n    out.push(`Path=${cookie.path}`)\n  }\n\n  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {\n    out.push(`Expires=${toIMFDate(cookie.expires)}`)\n  }\n\n  if (cookie.sameSite) {\n    out.push(`SameSite=${cookie.sameSite}`)\n  }\n\n  for (const part of cookie.unparsed) {\n    if (!part.includes('=')) {\n      throw new Error('Invalid unparsed')\n    }\n\n    const [key, ...value] = part.split('=')\n\n    out.push(`${key.trim()}=${value.join('=')}`)\n  }\n\n  return out.join('; ')\n}\n\nlet kHeadersListNode\n\nfunction getHeadersList (headers) {\n  if (headers[kHeadersList]) {\n    return headers[kHeadersList]\n  }\n\n  if (!kHeadersListNode) {\n    kHeadersListNode = Object.getOwnPropertySymbols(headers).find(\n      (symbol) => symbol.description === 'headers list'\n    )\n\n    assert(kHeadersListNode, 'Headers cannot be parsed')\n  }\n\n  const headersList = headers[kHeadersListNode]\n  assert(headersList)\n\n  return headersList\n}\n\nmodule.exports = {\n  isCTLExcludingHtab,\n  stringify,\n  getHeadersList\n}\n", "'use strict'\n\nconst { maxNameValuePairSize, maxAttributeValueSize } = require('./constants')\nconst { isCTLExcludingHtab } = require('./util')\nconst { collectASequenceOfCodePointsFast } = require('../fetch/dataURL')\nconst assert = require('assert')\n\n/**\n * @description Parses the field-value attributes of a set-cookie header string.\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} header\n * @returns if the header is invalid, null will be returned\n */\nfunction parseSetCookie (header) {\n  // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F\n  //    character (CTL characters excluding HTAB): Abort these steps and\n  //    ignore the set-cookie-string entirely.\n  if (isCTLExcludingHtab(header)) {\n    return null\n  }\n\n  let nameValuePair = ''\n  let unparsedAttributes = ''\n  let name = ''\n  let value = ''\n\n  // 2. If the set-cookie-string contains a %x3B (\";\") character:\n  if (header.includes(';')) {\n    // 1. The name-value-pair string consists of the characters up to,\n    //    but not including, the first %x3B (\";\"), and the unparsed-\n    //    attributes consist of the remainder of the set-cookie-string\n    //    (including the %x3B (\";\") in question).\n    const position = { position: 0 }\n\n    nameValuePair = collectASequenceOfCodePointsFast(';', header, position)\n    unparsedAttributes = header.slice(position.position)\n  } else {\n    // Otherwise:\n\n    // 1. The name-value-pair string consists of all the characters\n    //    contained in the set-cookie-string, and the unparsed-\n    //    attributes is the empty string.\n    nameValuePair = header\n  }\n\n  // 3. If the name-value-pair string lacks a %x3D (\"=\") character, then\n  //    the name string is empty, and the value string is the value of\n  //    name-value-pair.\n  if (!nameValuePair.includes('=')) {\n    value = nameValuePair\n  } else {\n    //    Otherwise, the name string consists of the characters up to, but\n    //    not including, the first %x3D (\"=\") character, and the (possibly\n    //    empty) value string consists of the characters after the first\n    //    %x3D (\"=\") character.\n    const position = { position: 0 }\n    name = collectASequenceOfCodePointsFast(\n      '=',\n      nameValuePair,\n      position\n    )\n    value = nameValuePair.slice(position.position + 1)\n  }\n\n  // 4. Remove any leading or trailing WSP characters from the name\n  //    string and the value string.\n  name = name.trim()\n  value = value.trim()\n\n  // 5. If the sum of the lengths of the name string and the value string\n  //    is more than 4096 octets, abort these steps and ignore the set-\n  //    cookie-string entirely.\n  if (name.length + value.length > maxNameValuePairSize) {\n    return null\n  }\n\n  // 6. The cookie-name is the name string, and the cookie-value is the\n  //    value string.\n  return {\n    name, value, ...parseUnparsedAttributes(unparsedAttributes)\n  }\n}\n\n/**\n * Parses the remaining attributes of a set-cookie header\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} unparsedAttributes\n * @param {[Object.<string, unknown>]={}} cookieAttributeList\n */\nfunction parseUnparsedAttributes (unparsedAttributes, cookieAttributeList = {}) {\n  // 1. If the unparsed-attributes string is empty, skip the rest of\n  //    these steps.\n  if (unparsedAttributes.length === 0) {\n    return cookieAttributeList\n  }\n\n  // 2. Discard the first character of the unparsed-attributes (which\n  //    will be a %x3B (\";\") character).\n  assert(unparsedAttributes[0] === ';')\n  unparsedAttributes = unparsedAttributes.slice(1)\n\n  let cookieAv = ''\n\n  // 3. If the remaining unparsed-attributes contains a %x3B (\";\")\n  //    character:\n  if (unparsedAttributes.includes(';')) {\n    // 1. Consume the characters of the unparsed-attributes up to, but\n    //    not including, the first %x3B (\";\") character.\n    cookieAv = collectASequenceOfCodePointsFast(\n      ';',\n      unparsedAttributes,\n      { position: 0 }\n    )\n    unparsedAttributes = unparsedAttributes.slice(cookieAv.length)\n  } else {\n    // Otherwise:\n\n    // 1. Consume the remainder of the unparsed-attributes.\n    cookieAv = unparsedAttributes\n    unparsedAttributes = ''\n  }\n\n  // Let the cookie-av string be the characters consumed in this step.\n\n  let attributeName = ''\n  let attributeValue = ''\n\n  // 4. If the cookie-av string contains a %x3D (\"=\") character:\n  if (cookieAv.includes('=')) {\n    // 1. The (possibly empty) attribute-name string consists of the\n    //    characters up to, but not including, the first %x3D (\"=\")\n    //    character, and the (possibly empty) attribute-value string\n    //    consists of the characters after the first %x3D (\"=\")\n    //    character.\n    const position = { position: 0 }\n\n    attributeName = collectASequenceOfCodePointsFast(\n      '=',\n      cookieAv,\n      position\n    )\n    attributeValue = cookieAv.slice(position.position + 1)\n  } else {\n    // Otherwise:\n\n    // 1. The attribute-name string consists of the entire cookie-av\n    //    string, and the attribute-value string is empty.\n    attributeName = cookieAv\n  }\n\n  // 5. Remove any leading or trailing WSP characters from the attribute-\n  //    name string and the attribute-value string.\n  attributeName = attributeName.trim()\n  attributeValue = attributeValue.trim()\n\n  // 6. If the attribute-value is longer than 1024 octets, ignore the\n  //    cookie-av string and return to Step 1 of this algorithm.\n  if (attributeValue.length > maxAttributeValueSize) {\n    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n  }\n\n  // 7. Process the attribute-name and attribute-value according to the\n  //    requirements in the following subsections.  (Notice that\n  //    attributes with unrecognized attribute-names are ignored.)\n  const attributeNameLowercase = attributeName.toLowerCase()\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1\n  // If the attribute-name case-insensitively matches the string\n  // \"Expires\", the user agent MUST process the cookie-av as follows.\n  if (attributeNameLowercase === 'expires') {\n    // 1. Let the expiry-time be the result of parsing the attribute-value\n    //    as cookie-date (see Section 5.1.1).\n    const expiryTime = new Date(attributeValue)\n\n    // 2. If the attribute-value failed to parse as a cookie date, ignore\n    //    the cookie-av.\n\n    cookieAttributeList.expires = expiryTime\n  } else if (attributeNameLowercase === 'max-age') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2\n    // If the attribute-name case-insensitively matches the string \"Max-\n    // Age\", the user agent MUST process the cookie-av as follows.\n\n    // 1. If the first character of the attribute-value is not a DIGIT or a\n    //    \"-\" character, ignore the cookie-av.\n    const charCode = attributeValue.charCodeAt(0)\n\n    if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {\n      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n    }\n\n    // 2. If the remainder of attribute-value contains a non-DIGIT\n    //    character, ignore the cookie-av.\n    if (!/^\\d+$/.test(attributeValue)) {\n      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n    }\n\n    // 3. Let delta-seconds be the attribute-value converted to an integer.\n    const deltaSeconds = Number(attributeValue)\n\n    // 4. Let cookie-age-limit be the maximum age of the cookie (which\n    //    SHOULD be 400 days or less, see Section 4.1.2.2).\n\n    // 5. Set delta-seconds to the smaller of its present value and cookie-\n    //    age-limit.\n    // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)\n\n    // 6. If delta-seconds is less than or equal to zero (0), let expiry-\n    //    time be the earliest representable date and time.  Otherwise, let\n    //    the expiry-time be the current date and time plus delta-seconds\n    //    seconds.\n    // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds\n\n    // 7. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Max-Age and an attribute-value of expiry-time.\n    cookieAttributeList.maxAge = deltaSeconds\n  } else if (attributeNameLowercase === 'domain') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3\n    // If the attribute-name case-insensitively matches the string \"Domain\",\n    // the user agent MUST process the cookie-av as follows.\n\n    // 1. Let cookie-domain be the attribute-value.\n    let cookieDomain = attributeValue\n\n    // 2. If cookie-domain starts with %x2E (\".\"), let cookie-domain be\n    //    cookie-domain without its leading %x2E (\".\").\n    if (cookieDomain[0] === '.') {\n      cookieDomain = cookieDomain.slice(1)\n    }\n\n    // 3. Convert the cookie-domain to lower case.\n    cookieDomain = cookieDomain.toLowerCase()\n\n    // 4. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Domain and an attribute-value of cookie-domain.\n    cookieAttributeList.domain = cookieDomain\n  } else if (attributeNameLowercase === 'path') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4\n    // If the attribute-name case-insensitively matches the string \"Path\",\n    // the user agent MUST process the cookie-av as follows.\n\n    // 1. If the attribute-value is empty or if the first character of the\n    //    attribute-value is not %x2F (\"/\"):\n    let cookiePath = ''\n    if (attributeValue.length === 0 || attributeValue[0] !== '/') {\n      // 1. Let cookie-path be the default-path.\n      cookiePath = '/'\n    } else {\n      // Otherwise:\n\n      // 1. Let cookie-path be the attribute-value.\n      cookiePath = attributeValue\n    }\n\n    // 2. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Path and an attribute-value of cookie-path.\n    cookieAttributeList.path = cookiePath\n  } else if (attributeNameLowercase === 'secure') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5\n    // If the attribute-name case-insensitively matches the string \"Secure\",\n    // the user agent MUST append an attribute to the cookie-attribute-list\n    // with an attribute-name of Secure and an empty attribute-value.\n\n    cookieAttributeList.secure = true\n  } else if (attributeNameLowercase === 'httponly') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6\n    // If the attribute-name case-insensitively matches the string\n    // \"HttpOnly\", the user agent MUST append an attribute to the cookie-\n    // attribute-list with an attribute-name of HttpOnly and an empty\n    // attribute-value.\n\n    cookieAttributeList.httpOnly = true\n  } else if (attributeNameLowercase === 'samesite') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7\n    // If the attribute-name case-insensitively matches the string\n    // \"SameSite\", the user agent MUST process the cookie-av as follows:\n\n    // 1. Let enforcement be \"Default\".\n    let enforcement = 'Default'\n\n    const attributeValueLowercase = attributeValue.toLowerCase()\n    // 2. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"None\", set enforcement to \"None\".\n    if (attributeValueLowercase.includes('none')) {\n      enforcement = 'None'\n    }\n\n    // 3. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"Strict\", set enforcement to \"Strict\".\n    if (attributeValueLowercase.includes('strict')) {\n      enforcement = 'Strict'\n    }\n\n    // 4. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"Lax\", set enforcement to \"Lax\".\n    if (attributeValueLowercase.includes('lax')) {\n      enforcement = 'Lax'\n    }\n\n    // 5. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of \"SameSite\" and an attribute-value of\n    //    enforcement.\n    cookieAttributeList.sameSite = enforcement\n  } else {\n    cookieAttributeList.unparsed ??= []\n\n    cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`)\n  }\n\n  // 8. Return to Step 1 of this algorithm.\n  return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n}\n\nmodule.exports = {\n  parseSetCookie,\n  parseUnparsedAttributes\n}\n", "'use strict'\n\nconst { parseSetCookie } = require('./parse')\nconst { stringify, getHeadersList } = require('./util')\nconst { webidl } = require('../fetch/webidl')\nconst { Headers } = require('../fetch/headers')\n\n/**\n * @typedef {Object} Cookie\n * @property {string} name\n * @property {string} value\n * @property {Date|number|undefined} expires\n * @property {number|undefined} maxAge\n * @property {string|undefined} domain\n * @property {string|undefined} path\n * @property {boolean|undefined} secure\n * @property {boolean|undefined} httpOnly\n * @property {'Strict'|'Lax'|'None'} sameSite\n * @property {string[]} unparsed\n */\n\n/**\n * @param {Headers} headers\n * @returns {Record<string, string>}\n */\nfunction getCookies (headers) {\n  webidl.argumentLengthCheck(arguments, 1, { header: 'getCookies' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  const cookie = headers.get('cookie')\n  const out = {}\n\n  if (!cookie) {\n    return out\n  }\n\n  for (const piece of cookie.split(';')) {\n    const [name, ...value] = piece.split('=')\n\n    out[name.trim()] = value.join('=')\n  }\n\n  return out\n}\n\n/**\n * @param {Headers} headers\n * @param {string} name\n * @param {{ path?: string, domain?: string }|undefined} attributes\n * @returns {void}\n */\nfunction deleteCookie (headers, name, attributes) {\n  webidl.argumentLengthCheck(arguments, 2, { header: 'deleteCookie' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  name = webidl.converters.DOMString(name)\n  attributes = webidl.converters.DeleteCookieAttributes(attributes)\n\n  // Matches behavior of\n  // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278\n  setCookie(headers, {\n    name,\n    value: '',\n    expires: new Date(0),\n    ...attributes\n  })\n}\n\n/**\n * @param {Headers} headers\n * @returns {Cookie[]}\n */\nfunction getSetCookies (headers) {\n  webidl.argumentLengthCheck(arguments, 1, { header: 'getSetCookies' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  const cookies = getHeadersList(headers).cookies\n\n  if (!cookies) {\n    return []\n  }\n\n  // In older versions of undici, cookies is a list of name:value.\n  return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair))\n}\n\n/**\n * @param {Headers} headers\n * @param {Cookie} cookie\n * @returns {void}\n */\nfunction setCookie (headers, cookie) {\n  webidl.argumentLengthCheck(arguments, 2, { header: 'setCookie' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  cookie = webidl.converters.Cookie(cookie)\n\n  const str = stringify(cookie)\n\n  if (str) {\n    headers.append('Set-Cookie', stringify(cookie))\n  }\n}\n\nwebidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'path',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'domain',\n    defaultValue: null\n  }\n])\n\nwebidl.converters.Cookie = webidl.dictionaryConverter([\n  {\n    converter: webidl.converters.DOMString,\n    key: 'name'\n  },\n  {\n    converter: webidl.converters.DOMString,\n    key: 'value'\n  },\n  {\n    converter: webidl.nullableConverter((value) => {\n      if (typeof value === 'number') {\n        return webidl.converters['unsigned long long'](value)\n      }\n\n      return new Date(value)\n    }),\n    key: 'expires',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters['long long']),\n    key: 'maxAge',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'domain',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'path',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.boolean),\n    key: 'secure',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.boolean),\n    key: 'httpOnly',\n    defaultValue: null\n  },\n  {\n    converter: webidl.converters.USVString,\n    key: 'sameSite',\n    allowedValues: ['Strict', 'Lax', 'None']\n  },\n  {\n    converter: webidl.sequenceConverter(webidl.converters.DOMString),\n    key: 'unparsed',\n    defaultValue: []\n  }\n])\n\nmodule.exports = {\n  getCookies,\n  deleteCookie,\n  getSetCookies,\n  setCookie\n}\n", "'use strict'\n\n// This is a Globally Unique Identifier unique used\n// to validate that the endpoint accepts websocket\n// connections.\n// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3\nconst uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'\n\n/** @type {PropertyDescriptor} */\nconst staticPropertyDescriptors = {\n  enumerable: true,\n  writable: false,\n  configurable: false\n}\n\nconst states = {\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3\n}\n\nconst opcodes = {\n  CONTINUATION: 0x0,\n  TEXT: 0x1,\n  BINARY: 0x2,\n  CLOSE: 0x8,\n  PING: 0x9,\n  PONG: 0xA\n}\n\nconst maxUnsigned16Bit = 2 ** 16 - 1 // 65535\n\nconst parserStates = {\n  INFO: 0,\n  PAYLOADLENGTH_16: 2,\n  PAYLOADLENGTH_64: 3,\n  READ_DATA: 4\n}\n\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\nmodule.exports = {\n  uid,\n  staticPropertyDescriptors,\n  states,\n  opcodes,\n  maxUnsigned16Bit,\n  parserStates,\n  emptyBuffer\n}\n", "'use strict'\n\nmodule.exports = {\n  kWebSocketURL: Symbol('url'),\n  kReadyState: Symbol('ready state'),\n  kController: Symbol('controller'),\n  kResponse: Symbol('response'),\n  kBinaryType: Symbol('binary type'),\n  kSentClose: Symbol('sent close'),\n  kReceivedClose: Symbol('received close'),\n  kByteParser: Symbol('byte parser')\n}\n", "'use strict'\n\nconst { webidl } = require('../fetch/webidl')\nconst { kEnumerableProperty } = require('../core/util')\nconst { MessagePort } = require('worker_threads')\n\n/**\n * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent\n */\nclass MessageEvent extends Event {\n  #eventInit\n\n  constructor (type, eventInitDict = {}) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent constructor' })\n\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.MessageEventInit(eventInitDict)\n\n    super(type, eventInitDict)\n\n    this.#eventInit = eventInitDict\n  }\n\n  get data () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.data\n  }\n\n  get origin () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.origin\n  }\n\n  get lastEventId () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.lastEventId\n  }\n\n  get source () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.source\n  }\n\n  get ports () {\n    webidl.brandCheck(this, MessageEvent)\n\n    if (!Object.isFrozen(this.#eventInit.ports)) {\n      Object.freeze(this.#eventInit.ports)\n    }\n\n    return this.#eventInit.ports\n  }\n\n  initMessageEvent (\n    type,\n    bubbles = false,\n    cancelable = false,\n    data = null,\n    origin = '',\n    lastEventId = '',\n    source = null,\n    ports = []\n  ) {\n    webidl.brandCheck(this, MessageEvent)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent.initMessageEvent' })\n\n    return new MessageEvent(type, {\n      bubbles, cancelable, data, origin, lastEventId, source, ports\n    })\n  }\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#the-closeevent-interface\n */\nclass CloseEvent extends Event {\n  #eventInit\n\n  constructor (type, eventInitDict = {}) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CloseEvent constructor' })\n\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.CloseEventInit(eventInitDict)\n\n    super(type, eventInitDict)\n\n    this.#eventInit = eventInitDict\n  }\n\n  get wasClean () {\n    webidl.brandCheck(this, CloseEvent)\n\n    return this.#eventInit.wasClean\n  }\n\n  get code () {\n    webidl.brandCheck(this, CloseEvent)\n\n    return this.#eventInit.code\n  }\n\n  get reason () {\n    webidl.brandCheck(this, CloseEvent)\n\n    return this.#eventInit.reason\n  }\n}\n\n// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface\nclass ErrorEvent extends Event {\n  #eventInit\n\n  constructor (type, eventInitDict) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'ErrorEvent constructor' })\n\n    super(type, eventInitDict)\n\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {})\n\n    this.#eventInit = eventInitDict\n  }\n\n  get message () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.message\n  }\n\n  get filename () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.filename\n  }\n\n  get lineno () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.lineno\n  }\n\n  get colno () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.colno\n  }\n\n  get error () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.error\n  }\n}\n\nObject.defineProperties(MessageEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'MessageEvent',\n    configurable: true\n  },\n  data: kEnumerableProperty,\n  origin: kEnumerableProperty,\n  lastEventId: kEnumerableProperty,\n  source: kEnumerableProperty,\n  ports: kEnumerableProperty,\n  initMessageEvent: kEnumerableProperty\n})\n\nObject.defineProperties(CloseEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'CloseEvent',\n    configurable: true\n  },\n  reason: kEnumerableProperty,\n  code: kEnumerableProperty,\n  wasClean: kEnumerableProperty\n})\n\nObject.defineProperties(ErrorEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'ErrorEvent',\n    configurable: true\n  },\n  message: kEnumerableProperty,\n  filename: kEnumerableProperty,\n  lineno: kEnumerableProperty,\n  colno: kEnumerableProperty,\n  error: kEnumerableProperty\n})\n\nwebidl.converters.MessagePort = webidl.interfaceConverter(MessagePort)\n\nwebidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(\n  webidl.converters.MessagePort\n)\n\nconst eventInit = [\n  {\n    key: 'bubbles',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'cancelable',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'composed',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  }\n]\n\nwebidl.converters.MessageEventInit = webidl.dictionaryConverter([\n  ...eventInit,\n  {\n    key: 'data',\n    converter: webidl.converters.any,\n    defaultValue: null\n  },\n  {\n    key: 'origin',\n    converter: webidl.converters.USVString,\n    defaultValue: ''\n  },\n  {\n    key: 'lastEventId',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'source',\n    // Node doesn't implement WindowProxy or ServiceWorker, so the only\n    // valid value for source is a MessagePort.\n    converter: webidl.nullableConverter(webidl.converters.MessagePort),\n    defaultValue: null\n  },\n  {\n    key: 'ports',\n    converter: webidl.converters['sequence<MessagePort>'],\n    get defaultValue () {\n      return []\n    }\n  }\n])\n\nwebidl.converters.CloseEventInit = webidl.dictionaryConverter([\n  ...eventInit,\n  {\n    key: 'wasClean',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'code',\n    converter: webidl.converters['unsigned short'],\n    defaultValue: 0\n  },\n  {\n    key: 'reason',\n    converter: webidl.converters.USVString,\n    defaultValue: ''\n  }\n])\n\nwebidl.converters.ErrorEventInit = webidl.dictionaryConverter([\n  ...eventInit,\n  {\n    key: 'message',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'filename',\n    converter: webidl.converters.USVString,\n    defaultValue: ''\n  },\n  {\n    key: 'lineno',\n    converter: webidl.converters['unsigned long'],\n    defaultValue: 0\n  },\n  {\n    key: 'colno',\n    converter: webidl.converters['unsigned long'],\n    defaultValue: 0\n  },\n  {\n    key: 'error',\n    converter: webidl.converters.any\n  }\n])\n\nmodule.exports = {\n  MessageEvent,\n  CloseEvent,\n  ErrorEvent\n}\n", "'use strict'\n\nconst { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require('./symbols')\nconst { states, opcodes } = require('./constants')\nconst { MessageEvent, ErrorEvent } = require('./events')\n\n/* globals Blob */\n\n/**\n * @param {import('./websocket').WebSocket} ws\n */\nfunction isEstablished (ws) {\n  // If the server's response is validated as provided for above, it is\n  // said that _The WebSocket Connection is Established_ and that the\n  // WebSocket Connection is in the OPEN state.\n  return ws[kReadyState] === states.OPEN\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n */\nfunction isClosing (ws) {\n  // Upon either sending or receiving a Close control frame, it is said\n  // that _The WebSocket Closing Handshake is Started_ and that the\n  // WebSocket connection is in the CLOSING state.\n  return ws[kReadyState] === states.CLOSING\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n */\nfunction isClosed (ws) {\n  return ws[kReadyState] === states.CLOSED\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e\n * @param {EventTarget} target\n * @param {EventInit | undefined} eventInitDict\n */\nfunction fireEvent (e, target, eventConstructor = Event, eventInitDict) {\n  // 1. If eventConstructor is not given, then let eventConstructor be Event.\n\n  // 2. Let event be the result of creating an event given eventConstructor,\n  //    in the relevant realm of target.\n  // 3. Initialize event\u2019s type attribute to e.\n  const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap\n\n  // 4. Initialize any other IDL attributes of event as described in the\n  //    invocation of this algorithm.\n\n  // 5. Return the result of dispatching event at target, with legacy target\n  //    override flag set if set.\n  target.dispatchEvent(event)\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @param {import('./websocket').WebSocket} ws\n * @param {number} type Opcode\n * @param {Buffer} data application data\n */\nfunction websocketMessageReceived (ws, type, data) {\n  // 1. If ready state is not OPEN (1), then return.\n  if (ws[kReadyState] !== states.OPEN) {\n    return\n  }\n\n  // 2. Let dataForEvent be determined by switching on type and binary type:\n  let dataForEvent\n\n  if (type === opcodes.TEXT) {\n    // -> type indicates that the data is Text\n    //      a new DOMString containing data\n    try {\n      dataForEvent = new TextDecoder('utf-8', { fatal: true }).decode(data)\n    } catch {\n      failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.')\n      return\n    }\n  } else if (type === opcodes.BINARY) {\n    if (ws[kBinaryType] === 'blob') {\n      // -> type indicates that the data is Binary and binary type is \"blob\"\n      //      a new Blob object, created in the relevant Realm of the WebSocket\n      //      object, that represents data as its raw data\n      dataForEvent = new Blob([data])\n    } else {\n      // -> type indicates that the data is Binary and binary type is \"arraybuffer\"\n      //      a new ArrayBuffer object, created in the relevant Realm of the\n      //      WebSocket object, whose contents are data\n      dataForEvent = new Uint8Array(data).buffer\n    }\n  }\n\n  // 3. Fire an event named message at the WebSocket object, using MessageEvent,\n  //    with the origin attribute initialized to the serialization of the WebSocket\n  //    object\u2019s url's origin, and the data attribute initialized to dataForEvent.\n  fireEvent('message', ws, MessageEvent, {\n    origin: ws[kWebSocketURL].origin,\n    data: dataForEvent\n  })\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455\n * @see https://datatracker.ietf.org/doc/html/rfc2616\n * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407\n * @param {string} protocol\n */\nfunction isValidSubprotocol (protocol) {\n  // If present, this value indicates one\n  // or more comma-separated subprotocol the client wishes to speak,\n  // ordered by preference.  The elements that comprise this value\n  // MUST be non-empty strings with characters in the range U+0021 to\n  // U+007E not including separator characters as defined in\n  // [RFC2616] and MUST all be unique strings.\n  if (protocol.length === 0) {\n    return false\n  }\n\n  for (const char of protocol) {\n    const code = char.charCodeAt(0)\n\n    if (\n      code < 0x21 ||\n      code > 0x7E ||\n      char === '(' ||\n      char === ')' ||\n      char === '<' ||\n      char === '>' ||\n      char === '@' ||\n      char === ',' ||\n      char === ';' ||\n      char === ':' ||\n      char === '\\\\' ||\n      char === '\"' ||\n      char === '/' ||\n      char === '[' ||\n      char === ']' ||\n      char === '?' ||\n      char === '=' ||\n      char === '{' ||\n      char === '}' ||\n      code === 32 || // SP\n      code === 9 // HT\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4\n * @param {number} code\n */\nfunction isValidStatusCode (code) {\n  if (code >= 1000 && code < 1015) {\n    return (\n      code !== 1004 && // reserved\n      code !== 1005 && // \"MUST NOT be set as a status code\"\n      code !== 1006 // \"MUST NOT be set as a status code\"\n    )\n  }\n\n  return code >= 3000 && code <= 4999\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n * @param {string|undefined} reason\n */\nfunction failWebsocketConnection (ws, reason) {\n  const { [kController]: controller, [kResponse]: response } = ws\n\n  controller.abort()\n\n  if (response?.socket && !response.socket.destroyed) {\n    response.socket.destroy()\n  }\n\n  if (reason) {\n    fireEvent('error', ws, ErrorEvent, {\n      error: new Error(reason)\n    })\n  }\n}\n\nmodule.exports = {\n  isEstablished,\n  isClosing,\n  isClosed,\n  fireEvent,\n  isValidSubprotocol,\n  isValidStatusCode,\n  failWebsocketConnection,\n  websocketMessageReceived\n}\n", "'use strict'\n\nconst diagnosticsChannel = require('diagnostics_channel')\nconst { uid, states } = require('./constants')\nconst {\n  kReadyState,\n  kSentClose,\n  kByteParser,\n  kReceivedClose\n} = require('./symbols')\nconst { fireEvent, failWebsocketConnection } = require('./util')\nconst { CloseEvent } = require('./events')\nconst { makeRequest } = require('../fetch/request')\nconst { fetching } = require('../fetch/index')\nconst { Headers } = require('../fetch/headers')\nconst { getGlobalDispatcher } = require('../global')\nconst { kHeadersList } = require('../core/symbols')\n\nconst channels = {}\nchannels.open = diagnosticsChannel.channel('undici:websocket:open')\nchannels.close = diagnosticsChannel.channel('undici:websocket:close')\nchannels.socketError = diagnosticsChannel.channel('undici:websocket:socket_error')\n\n/** @type {import('crypto')} */\nlet crypto\ntry {\n  crypto = require('crypto')\n} catch {\n\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#concept-websocket-establish\n * @param {URL} url\n * @param {string|string[]} protocols\n * @param {import('./websocket').WebSocket} ws\n * @param {(response: any) => void} onEstablish\n * @param {Partial<import('../../types/websocket').WebSocketInit>} options\n */\nfunction establishWebSocketConnection (url, protocols, ws, onEstablish, options) {\n  // 1. Let requestURL be a copy of url, with its scheme set to \"http\", if url\u2019s\n  //    scheme is \"ws\", and to \"https\" otherwise.\n  const requestURL = url\n\n  requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:'\n\n  // 2. Let request be a new request, whose URL is requestURL, client is client,\n  //    service-workers mode is \"none\", referrer is \"no-referrer\", mode is\n  //    \"websocket\", credentials mode is \"include\", cache mode is \"no-store\" ,\n  //    and redirect mode is \"error\".\n  const request = makeRequest({\n    urlList: [requestURL],\n    serviceWorkers: 'none',\n    referrer: 'no-referrer',\n    mode: 'websocket',\n    credentials: 'include',\n    cache: 'no-store',\n    redirect: 'error'\n  })\n\n  // Note: undici extension, allow setting custom headers.\n  if (options.headers) {\n    const headersList = new Headers(options.headers)[kHeadersList]\n\n    request.headersList = headersList\n  }\n\n  // 3. Append (`Upgrade`, `websocket`) to request\u2019s header list.\n  // 4. Append (`Connection`, `Upgrade`) to request\u2019s header list.\n  // Note: both of these are handled by undici currently.\n  // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397\n\n  // 5. Let keyValue be a nonce consisting of a randomly selected\n  //    16-byte value that has been forgiving-base64-encoded and\n  //    isomorphic encoded.\n  const keyValue = crypto.randomBytes(16).toString('base64')\n\n  // 6. Append (`Sec-WebSocket-Key`, keyValue) to request\u2019s\n  //    header list.\n  request.headersList.append('sec-websocket-key', keyValue)\n\n  // 7. Append (`Sec-WebSocket-Version`, `13`) to request\u2019s\n  //    header list.\n  request.headersList.append('sec-websocket-version', '13')\n\n  // 8. For each protocol in protocols, combine\n  //    (`Sec-WebSocket-Protocol`, protocol) in request\u2019s header\n  //    list.\n  for (const protocol of protocols) {\n    request.headersList.append('sec-websocket-protocol', protocol)\n  }\n\n  // 9. Let permessageDeflate be a user-agent defined\n  //    \"permessage-deflate\" extension header value.\n  // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673\n  // TODO: enable once permessage-deflate is supported\n  const permessageDeflate = '' // 'permessage-deflate; 15'\n\n  // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to\n  //     request\u2019s header list.\n  // request.headersList.append('sec-websocket-extensions', permessageDeflate)\n\n  // 11. Fetch request with useParallelQueue set to true, and\n  //     processResponse given response being these steps:\n  const controller = fetching({\n    request,\n    useParallelQueue: true,\n    dispatcher: options.dispatcher ?? getGlobalDispatcher(),\n    processResponse (response) {\n      // 1. If response is a network error or its status is not 101,\n      //    fail the WebSocket connection.\n      if (response.type === 'error' || response.status !== 101) {\n        failWebsocketConnection(ws, 'Received network error or non-101 status code.')\n        return\n      }\n\n      // 2. If protocols is not the empty list and extracting header\n      //    list values given `Sec-WebSocket-Protocol` and response\u2019s\n      //    header list results in null, failure, or the empty byte\n      //    sequence, then fail the WebSocket connection.\n      if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {\n        failWebsocketConnection(ws, 'Server did not respond with sent protocols.')\n        return\n      }\n\n      // 3. Follow the requirements stated step 2 to step 6, inclusive,\n      //    of the last set of steps in section 4.1 of The WebSocket\n      //    Protocol to validate response. This either results in fail\n      //    the WebSocket connection or the WebSocket connection is\n      //    established.\n\n      // 2. If the response lacks an |Upgrade| header field or the |Upgrade|\n      //    header field contains a value that is not an ASCII case-\n      //    insensitive match for the value \"websocket\", the client MUST\n      //    _Fail the WebSocket Connection_.\n      if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {\n        failWebsocketConnection(ws, 'Server did not set Upgrade header to \"websocket\".')\n        return\n      }\n\n      // 3. If the response lacks a |Connection| header field or the\n      //    |Connection| header field doesn't contain a token that is an\n      //    ASCII case-insensitive match for the value \"Upgrade\", the client\n      //    MUST _Fail the WebSocket Connection_.\n      if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {\n        failWebsocketConnection(ws, 'Server did not set Connection header to \"upgrade\".')\n        return\n      }\n\n      // 4. If the response lacks a |Sec-WebSocket-Accept| header field or\n      //    the |Sec-WebSocket-Accept| contains a value other than the\n      //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-\n      //    Key| (as a string, not base64-decoded) with the string \"258EAFA5-\n      //    E914-47DA-95CA-C5AB0DC85B11\" but ignoring any leading and\n      //    trailing whitespace, the client MUST _Fail the WebSocket\n      //    Connection_.\n      const secWSAccept = response.headersList.get('Sec-WebSocket-Accept')\n      const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64')\n      if (secWSAccept !== digest) {\n        failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.')\n        return\n      }\n\n      // 5. If the response includes a |Sec-WebSocket-Extensions| header\n      //    field and this header field indicates the use of an extension\n      //    that was not present in the client's handshake (the server has\n      //    indicated an extension not requested by the client), the client\n      //    MUST _Fail the WebSocket Connection_.  (The parsing of this\n      //    header field to determine which extensions are requested is\n      //    discussed in Section 9.1.)\n      const secExtension = response.headersList.get('Sec-WebSocket-Extensions')\n\n      if (secExtension !== null && secExtension !== permessageDeflate) {\n        failWebsocketConnection(ws, 'Received different permessage-deflate than the one set.')\n        return\n      }\n\n      // 6. If the response includes a |Sec-WebSocket-Protocol| header field\n      //    and this header field indicates the use of a subprotocol that was\n      //    not present in the client's handshake (the server has indicated a\n      //    subprotocol not requested by the client), the client MUST _Fail\n      //    the WebSocket Connection_.\n      const secProtocol = response.headersList.get('Sec-WebSocket-Protocol')\n\n      if (secProtocol !== null && secProtocol !== request.headersList.get('Sec-WebSocket-Protocol')) {\n        failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.')\n        return\n      }\n\n      response.socket.on('data', onSocketData)\n      response.socket.on('close', onSocketClose)\n      response.socket.on('error', onSocketError)\n\n      if (channels.open.hasSubscribers) {\n        channels.open.publish({\n          address: response.socket.address(),\n          protocol: secProtocol,\n          extensions: secExtension\n        })\n      }\n\n      onEstablish(response)\n    }\n  })\n\n  return controller\n}\n\n/**\n * @param {Buffer} chunk\n */\nfunction onSocketData (chunk) {\n  if (!this.ws[kByteParser].write(chunk)) {\n    this.pause()\n  }\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4\n */\nfunction onSocketClose () {\n  const { ws } = this\n\n  // If the TCP connection was closed after the\n  // WebSocket closing handshake was completed, the WebSocket connection\n  // is said to have been closed _cleanly_.\n  const wasClean = ws[kSentClose] && ws[kReceivedClose]\n\n  let code = 1005\n  let reason = ''\n\n  const result = ws[kByteParser].closingInfo\n\n  if (result) {\n    code = result.code ?? 1005\n    reason = result.reason\n  } else if (!ws[kSentClose]) {\n    // If _The WebSocket\n    // Connection is Closed_ and no Close control frame was received by the\n    // endpoint (such as could occur if the underlying transport connection\n    // is lost), _The WebSocket Connection Close Code_ is considered to be\n    // 1006.\n    code = 1006\n  }\n\n  // 1. Change the ready state to CLOSED (3).\n  ws[kReadyState] = states.CLOSED\n\n  // 2. If the user agent was required to fail the WebSocket\n  //    connection, or if the WebSocket connection was closed\n  //    after being flagged as full, fire an event named error\n  //    at the WebSocket object.\n  // TODO\n\n  // 3. Fire an event named close at the WebSocket object,\n  //    using CloseEvent, with the wasClean attribute\n  //    initialized to true if the connection closed cleanly\n  //    and false otherwise, the code attribute initialized to\n  //    the WebSocket connection close code, and the reason\n  //    attribute initialized to the result of applying UTF-8\n  //    decode without BOM to the WebSocket connection close\n  //    reason.\n  fireEvent('close', ws, CloseEvent, {\n    wasClean, code, reason\n  })\n\n  if (channels.close.hasSubscribers) {\n    channels.close.publish({\n      websocket: ws,\n      code,\n      reason\n    })\n  }\n}\n\nfunction onSocketError (error) {\n  const { ws } = this\n\n  ws[kReadyState] = states.CLOSING\n\n  if (channels.socketError.hasSubscribers) {\n    channels.socketError.publish(error)\n  }\n\n  this.destroy()\n}\n\nmodule.exports = {\n  establishWebSocketConnection\n}\n", "'use strict'\n\nconst { maxUnsigned16Bit } = require('./constants')\n\n/** @type {import('crypto')} */\nlet crypto\ntry {\n  crypto = require('crypto')\n} catch {\n\n}\n\nclass WebsocketFrameSend {\n  /**\n   * @param {Buffer|undefined} data\n   */\n  constructor (data) {\n    this.frameData = data\n    this.maskKey = crypto.randomBytes(4)\n  }\n\n  createFrame (opcode) {\n    const bodyLength = this.frameData?.byteLength ?? 0\n\n    /** @type {number} */\n    let payloadLength = bodyLength // 0-125\n    let offset = 6\n\n    if (bodyLength > maxUnsigned16Bit) {\n      offset += 8 // payload length is next 8 bytes\n      payloadLength = 127\n    } else if (bodyLength > 125) {\n      offset += 2 // payload length is next 2 bytes\n      payloadLength = 126\n    }\n\n    const buffer = Buffer.allocUnsafe(bodyLength + offset)\n\n    // Clear first 2 bytes, everything else is overwritten\n    buffer[0] = buffer[1] = 0\n    buffer[0] |= 0x80 // FIN\n    buffer[0] = (buffer[0] & 0xF0) + opcode // opcode\n\n    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */\n    buffer[offset - 4] = this.maskKey[0]\n    buffer[offset - 3] = this.maskKey[1]\n    buffer[offset - 2] = this.maskKey[2]\n    buffer[offset - 1] = this.maskKey[3]\n\n    buffer[1] = payloadLength\n\n    if (payloadLength === 126) {\n      buffer.writeUInt16BE(bodyLength, 2)\n    } else if (payloadLength === 127) {\n      // Clear extended payload length\n      buffer[2] = buffer[3] = 0\n      buffer.writeUIntBE(bodyLength, 4, 6)\n    }\n\n    buffer[1] |= 0x80 // MASK\n\n    // mask body\n    for (let i = 0; i < bodyLength; i++) {\n      buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4]\n    }\n\n    return buffer\n  }\n}\n\nmodule.exports = {\n  WebsocketFrameSend\n}\n", "'use strict'\n\nconst { Writable } = require('stream')\nconst diagnosticsChannel = require('diagnostics_channel')\nconst { parserStates, opcodes, states, emptyBuffer } = require('./constants')\nconst { kReadyState, kSentClose, kResponse, kReceivedClose } = require('./symbols')\nconst { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = require('./util')\nconst { WebsocketFrameSend } = require('./frame')\n\n// This code was influenced by ws released under the MIT license.\n// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n// Copyright (c) 2013 Arnout Kazemier and contributors\n// Copyright (c) 2016 Luigi Pinca and contributors\n\nconst channels = {}\nchannels.ping = diagnosticsChannel.channel('undici:websocket:ping')\nchannels.pong = diagnosticsChannel.channel('undici:websocket:pong')\n\nclass ByteParser extends Writable {\n  #buffers = []\n  #byteOffset = 0\n\n  #state = parserStates.INFO\n\n  #info = {}\n  #fragments = []\n\n  constructor (ws) {\n    super()\n\n    this.ws = ws\n  }\n\n  /**\n   * @param {Buffer} chunk\n   * @param {() => void} callback\n   */\n  _write (chunk, _, callback) {\n    this.#buffers.push(chunk)\n    this.#byteOffset += chunk.length\n\n    this.run(callback)\n  }\n\n  /**\n   * Runs whenever a new chunk is received.\n   * Callback is called whenever there are no more chunks buffering,\n   * or not enough bytes are buffered to parse.\n   */\n  run (callback) {\n    while (true) {\n      if (this.#state === parserStates.INFO) {\n        // If there aren't enough bytes to parse the payload length, etc.\n        if (this.#byteOffset < 2) {\n          return callback()\n        }\n\n        const buffer = this.consume(2)\n\n        this.#info.fin = (buffer[0] & 0x80) !== 0\n        this.#info.opcode = buffer[0] & 0x0F\n\n        // If we receive a fragmented message, we use the type of the first\n        // frame to parse the full message as binary/text, when it's terminated\n        this.#info.originalOpcode ??= this.#info.opcode\n\n        this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION\n\n        if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {\n          // Only text and binary frames can be fragmented\n          failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.')\n          return\n        }\n\n        const payloadLength = buffer[1] & 0x7F\n\n        if (payloadLength <= 125) {\n          this.#info.payloadLength = payloadLength\n          this.#state = parserStates.READ_DATA\n        } else if (payloadLength === 126) {\n          this.#state = parserStates.PAYLOADLENGTH_16\n        } else if (payloadLength === 127) {\n          this.#state = parserStates.PAYLOADLENGTH_64\n        }\n\n        if (this.#info.fragmented && payloadLength > 125) {\n          // A fragmented frame can't be fragmented itself\n          failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.')\n          return\n        } else if (\n          (this.#info.opcode === opcodes.PING ||\n            this.#info.opcode === opcodes.PONG ||\n            this.#info.opcode === opcodes.CLOSE) &&\n          payloadLength > 125\n        ) {\n          // Control frames can have a payload length of 125 bytes MAX\n          failWebsocketConnection(this.ws, 'Payload length for control frame exceeded 125 bytes.')\n          return\n        } else if (this.#info.opcode === opcodes.CLOSE) {\n          if (payloadLength === 1) {\n            failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.')\n            return\n          }\n\n          const body = this.consume(payloadLength)\n\n          this.#info.closeInfo = this.parseCloseBody(false, body)\n\n          if (!this.ws[kSentClose]) {\n            // If an endpoint receives a Close frame and did not previously send a\n            // Close frame, the endpoint MUST send a Close frame in response.  (When\n            // sending a Close frame in response, the endpoint typically echos the\n            // status code it received.)\n            const body = Buffer.allocUnsafe(2)\n            body.writeUInt16BE(this.#info.closeInfo.code, 0)\n            const closeFrame = new WebsocketFrameSend(body)\n\n            this.ws[kResponse].socket.write(\n              closeFrame.createFrame(opcodes.CLOSE),\n              (err) => {\n                if (!err) {\n                  this.ws[kSentClose] = true\n                }\n              }\n            )\n          }\n\n          // Upon either sending or receiving a Close control frame, it is said\n          // that _The WebSocket Closing Handshake is Started_ and that the\n          // WebSocket connection is in the CLOSING state.\n          this.ws[kReadyState] = states.CLOSING\n          this.ws[kReceivedClose] = true\n\n          this.end()\n\n          return\n        } else if (this.#info.opcode === opcodes.PING) {\n          // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in\n          // response, unless it already received a Close frame.\n          // A Pong frame sent in response to a Ping frame must have identical\n          // \"Application data\"\n\n          const body = this.consume(payloadLength)\n\n          if (!this.ws[kReceivedClose]) {\n            const frame = new WebsocketFrameSend(body)\n\n            this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG))\n\n            if (channels.ping.hasSubscribers) {\n              channels.ping.publish({\n                payload: body\n              })\n            }\n          }\n\n          this.#state = parserStates.INFO\n\n          if (this.#byteOffset > 0) {\n            continue\n          } else {\n            callback()\n            return\n          }\n        } else if (this.#info.opcode === opcodes.PONG) {\n          // A Pong frame MAY be sent unsolicited.  This serves as a\n          // unidirectional heartbeat.  A response to an unsolicited Pong frame is\n          // not expected.\n\n          const body = this.consume(payloadLength)\n\n          if (channels.pong.hasSubscribers) {\n            channels.pong.publish({\n              payload: body\n            })\n          }\n\n          if (this.#byteOffset > 0) {\n            continue\n          } else {\n            callback()\n            return\n          }\n        }\n      } else if (this.#state === parserStates.PAYLOADLENGTH_16) {\n        if (this.#byteOffset < 2) {\n          return callback()\n        }\n\n        const buffer = this.consume(2)\n\n        this.#info.payloadLength = buffer.readUInt16BE(0)\n        this.#state = parserStates.READ_DATA\n      } else if (this.#state === parserStates.PAYLOADLENGTH_64) {\n        if (this.#byteOffset < 8) {\n          return callback()\n        }\n\n        const buffer = this.consume(8)\n        const upper = buffer.readUInt32BE(0)\n\n        // 2^31 is the maxinimum bytes an arraybuffer can contain\n        // on 32-bit systems. Although, on 64-bit systems, this is\n        // 2^53-1 bytes.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\n        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275\n        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e\n        if (upper > 2 ** 31 - 1) {\n          failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.')\n          return\n        }\n\n        const lower = buffer.readUInt32BE(4)\n\n        this.#info.payloadLength = (upper << 8) + lower\n        this.#state = parserStates.READ_DATA\n      } else if (this.#state === parserStates.READ_DATA) {\n        if (this.#byteOffset < this.#info.payloadLength) {\n          // If there is still more data in this chunk that needs to be read\n          return callback()\n        } else if (this.#byteOffset >= this.#info.payloadLength) {\n          // If the server sent multiple frames in a single chunk\n\n          const body = this.consume(this.#info.payloadLength)\n\n          this.#fragments.push(body)\n\n          // If the frame is unfragmented, or a fragmented frame was terminated,\n          // a message was received\n          if (!this.#info.fragmented || (this.#info.fin && this.#info.opcode === opcodes.CONTINUATION)) {\n            const fullMessage = Buffer.concat(this.#fragments)\n\n            websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage)\n\n            this.#info = {}\n            this.#fragments.length = 0\n          }\n\n          this.#state = parserStates.INFO\n        }\n      }\n\n      if (this.#byteOffset > 0) {\n        continue\n      } else {\n        callback()\n        break\n      }\n    }\n  }\n\n  /**\n   * Take n bytes from the buffered Buffers\n   * @param {number} n\n   * @returns {Buffer|null}\n   */\n  consume (n) {\n    if (n > this.#byteOffset) {\n      return null\n    } else if (n === 0) {\n      return emptyBuffer\n    }\n\n    if (this.#buffers[0].length === n) {\n      this.#byteOffset -= this.#buffers[0].length\n      return this.#buffers.shift()\n    }\n\n    const buffer = Buffer.allocUnsafe(n)\n    let offset = 0\n\n    while (offset !== n) {\n      const next = this.#buffers[0]\n      const { length } = next\n\n      if (length + offset === n) {\n        buffer.set(this.#buffers.shift(), offset)\n        break\n      } else if (length + offset > n) {\n        buffer.set(next.subarray(0, n - offset), offset)\n        this.#buffers[0] = next.subarray(n - offset)\n        break\n      } else {\n        buffer.set(this.#buffers.shift(), offset)\n        offset += next.length\n      }\n    }\n\n    this.#byteOffset -= n\n\n    return buffer\n  }\n\n  parseCloseBody (onlyCode, data) {\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5\n    /** @type {number|undefined} */\n    let code\n\n    if (data.length >= 2) {\n      // _The WebSocket Connection Close Code_ is\n      // defined as the status code (Section 7.4) contained in the first Close\n      // control frame received by the application\n      code = data.readUInt16BE(0)\n    }\n\n    if (onlyCode) {\n      if (!isValidStatusCode(code)) {\n        return null\n      }\n\n      return { code }\n    }\n\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6\n    /** @type {Buffer} */\n    let reason = data.subarray(2)\n\n    // Remove BOM\n    if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {\n      reason = reason.subarray(3)\n    }\n\n    if (code !== undefined && !isValidStatusCode(code)) {\n      return null\n    }\n\n    try {\n      // TODO: optimize this\n      reason = new TextDecoder('utf-8', { fatal: true }).decode(reason)\n    } catch {\n      return null\n    }\n\n    return { code, reason }\n  }\n\n  get closingInfo () {\n    return this.#info.closeInfo\n  }\n}\n\nmodule.exports = {\n  ByteParser\n}\n", "'use strict'\n\nconst { webidl } = require('../fetch/webidl')\nconst { DOMException } = require('../fetch/constants')\nconst { URLSerializer } = require('../fetch/dataURL')\nconst { getGlobalOrigin } = require('../fetch/global')\nconst { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require('./constants')\nconst {\n  kWebSocketURL,\n  kReadyState,\n  kController,\n  kBinaryType,\n  kResponse,\n  kSentClose,\n  kByteParser\n} = require('./symbols')\nconst { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require('./util')\nconst { establishWebSocketConnection } = require('./connection')\nconst { WebsocketFrameSend } = require('./frame')\nconst { ByteParser } = require('./receiver')\nconst { kEnumerableProperty, isBlobLike } = require('../core/util')\nconst { getGlobalDispatcher } = require('../global')\nconst { types } = require('util')\n\nlet experimentalWarned = false\n\n// https://websockets.spec.whatwg.org/#interface-definition\nclass WebSocket extends EventTarget {\n  #events = {\n    open: null,\n    error: null,\n    close: null,\n    message: null\n  }\n\n  #bufferedAmount = 0\n  #protocol = ''\n  #extensions = ''\n\n  /**\n   * @param {string} url\n   * @param {string|string[]} protocols\n   */\n  constructor (url, protocols = []) {\n    super()\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket constructor' })\n\n    if (!experimentalWarned) {\n      experimentalWarned = true\n      process.emitWarning('WebSockets are experimental, expect them to change at any time.', {\n        code: 'UNDICI-WS'\n      })\n    }\n\n    const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols)\n\n    url = webidl.converters.USVString(url)\n    protocols = options.protocols\n\n    // 1. Let baseURL be this's relevant settings object's API base URL.\n    const baseURL = getGlobalOrigin()\n\n    // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.\n    let urlRecord\n\n    try {\n      urlRecord = new URL(url, baseURL)\n    } catch (e) {\n      // 3. If urlRecord is failure, then throw a \"SyntaxError\" DOMException.\n      throw new DOMException(e, 'SyntaxError')\n    }\n\n    // 4. If urlRecord\u2019s scheme is \"http\", then set urlRecord\u2019s scheme to \"ws\".\n    if (urlRecord.protocol === 'http:') {\n      urlRecord.protocol = 'ws:'\n    } else if (urlRecord.protocol === 'https:') {\n      // 5. Otherwise, if urlRecord\u2019s scheme is \"https\", set urlRecord\u2019s scheme to \"wss\".\n      urlRecord.protocol = 'wss:'\n    }\n\n    // 6. If urlRecord\u2019s scheme is not \"ws\" or \"wss\", then throw a \"SyntaxError\" DOMException.\n    if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {\n      throw new DOMException(\n        `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,\n        'SyntaxError'\n      )\n    }\n\n    // 7. If urlRecord\u2019s fragment is non-null, then throw a \"SyntaxError\"\n    //    DOMException.\n    if (urlRecord.hash || urlRecord.href.endsWith('#')) {\n      throw new DOMException('Got fragment', 'SyntaxError')\n    }\n\n    // 8. If protocols is a string, set protocols to a sequence consisting\n    //    of just that string.\n    if (typeof protocols === 'string') {\n      protocols = [protocols]\n    }\n\n    // 9. If any of the values in protocols occur more than once or otherwise\n    //    fail to match the requirements for elements that comprise the value\n    //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket\n    //    protocol, then throw a \"SyntaxError\" DOMException.\n    if (protocols.length !== new Set(protocols.map(p => p.toLowerCase())).size) {\n      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')\n    }\n\n    if (protocols.length > 0 && !protocols.every(p => isValidSubprotocol(p))) {\n      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')\n    }\n\n    // 10. Set this's url to urlRecord.\n    this[kWebSocketURL] = new URL(urlRecord.href)\n\n    // 11. Let client be this's relevant settings object.\n\n    // 12. Run this step in parallel:\n\n    //    1. Establish a WebSocket connection given urlRecord, protocols,\n    //       and client.\n    this[kController] = establishWebSocketConnection(\n      urlRecord,\n      protocols,\n      this,\n      (response) => this.#onConnectionEstablished(response),\n      options\n    )\n\n    // Each WebSocket object has an associated ready state, which is a\n    // number representing the state of the connection. Initially it must\n    // be CONNECTING (0).\n    this[kReadyState] = WebSocket.CONNECTING\n\n    // The extensions attribute must initially return the empty string.\n\n    // The protocol attribute must initially return the empty string.\n\n    // Each WebSocket object has an associated binary type, which is a\n    // BinaryType. Initially it must be \"blob\".\n    this[kBinaryType] = 'blob'\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-close\n   * @param {number|undefined} code\n   * @param {string|undefined} reason\n   */\n  close (code = undefined, reason = undefined) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (code !== undefined) {\n      code = webidl.converters['unsigned short'](code, { clamp: true })\n    }\n\n    if (reason !== undefined) {\n      reason = webidl.converters.USVString(reason)\n    }\n\n    // 1. If code is present, but is neither an integer equal to 1000 nor an\n    //    integer in the range 3000 to 4999, inclusive, throw an\n    //    \"InvalidAccessError\" DOMException.\n    if (code !== undefined) {\n      if (code !== 1000 && (code < 3000 || code > 4999)) {\n        throw new DOMException('invalid code', 'InvalidAccessError')\n      }\n    }\n\n    let reasonByteLength = 0\n\n    // 2. If reason is present, then run these substeps:\n    if (reason !== undefined) {\n      // 1. Let reasonBytes be the result of encoding reason.\n      // 2. If reasonBytes is longer than 123 bytes, then throw a\n      //    \"SyntaxError\" DOMException.\n      reasonByteLength = Buffer.byteLength(reason)\n\n      if (reasonByteLength > 123) {\n        throw new DOMException(\n          `Reason must be less than 123 bytes; received ${reasonByteLength}`,\n          'SyntaxError'\n        )\n      }\n    }\n\n    // 3. Run the first matching steps from the following list:\n    if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {\n      // If this's ready state is CLOSING (2) or CLOSED (3)\n      // Do nothing.\n    } else if (!isEstablished(this)) {\n      // If the WebSocket connection is not yet established\n      // Fail the WebSocket connection and set this's ready state\n      // to CLOSING (2).\n      failWebsocketConnection(this, 'Connection was closed before it was established.')\n      this[kReadyState] = WebSocket.CLOSING\n    } else if (!isClosing(this)) {\n      // If the WebSocket closing handshake has not yet been started\n      // Start the WebSocket closing handshake and set this's ready\n      // state to CLOSING (2).\n      // - If neither code nor reason is present, the WebSocket Close\n      //   message must not have a body.\n      // - If code is present, then the status code to use in the\n      //   WebSocket Close message must be the integer given by code.\n      // - If reason is also present, then reasonBytes must be\n      //   provided in the Close message after the status code.\n\n      const frame = new WebsocketFrameSend()\n\n      // If neither code nor reason is present, the WebSocket Close\n      // message must not have a body.\n\n      // If code is present, then the status code to use in the\n      // WebSocket Close message must be the integer given by code.\n      if (code !== undefined && reason === undefined) {\n        frame.frameData = Buffer.allocUnsafe(2)\n        frame.frameData.writeUInt16BE(code, 0)\n      } else if (code !== undefined && reason !== undefined) {\n        // If reason is also present, then reasonBytes must be\n        // provided in the Close message after the status code.\n        frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength)\n        frame.frameData.writeUInt16BE(code, 0)\n        // the body MAY contain UTF-8-encoded data with value /reason/\n        frame.frameData.write(reason, 2, 'utf-8')\n      } else {\n        frame.frameData = emptyBuffer\n      }\n\n      /** @type {import('stream').Duplex} */\n      const socket = this[kResponse].socket\n\n      socket.write(frame.createFrame(opcodes.CLOSE), (err) => {\n        if (!err) {\n          this[kSentClose] = true\n        }\n      })\n\n      // Upon either sending or receiving a Close control frame, it is said\n      // that _The WebSocket Closing Handshake is Started_ and that the\n      // WebSocket connection is in the CLOSING state.\n      this[kReadyState] = states.CLOSING\n    } else {\n      // Otherwise\n      // Set this's ready state to CLOSING (2).\n      this[kReadyState] = WebSocket.CLOSING\n    }\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-send\n   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data\n   */\n  send (data) {\n    webidl.brandCheck(this, WebSocket)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket.send' })\n\n    data = webidl.converters.WebSocketSendData(data)\n\n    // 1. If this's ready state is CONNECTING, then throw an\n    //    \"InvalidStateError\" DOMException.\n    if (this[kReadyState] === WebSocket.CONNECTING) {\n      throw new DOMException('Sent before connected.', 'InvalidStateError')\n    }\n\n    // 2. Run the appropriate set of steps from the following list:\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2\n\n    if (!isEstablished(this) || isClosing(this)) {\n      return\n    }\n\n    /** @type {import('stream').Duplex} */\n    const socket = this[kResponse].socket\n\n    // If data is a string\n    if (typeof data === 'string') {\n      // If the WebSocket connection is established and the WebSocket\n      // closing handshake has not yet started, then the user agent\n      // must send a WebSocket Message comprised of the data argument\n      // using a text frame opcode; if the data cannot be sent, e.g.\n      // because it would need to be buffered but the buffer is full,\n      // the user agent must flag the WebSocket as full and then close\n      // the WebSocket connection. Any invocation of this method with a\n      // string argument that does not throw an exception must increase\n      // the bufferedAmount attribute by the number of bytes needed to\n      // express the argument as UTF-8.\n\n      const value = Buffer.from(data)\n      const frame = new WebsocketFrameSend(value)\n      const buffer = frame.createFrame(opcodes.TEXT)\n\n      this.#bufferedAmount += value.byteLength\n      socket.write(buffer, () => {\n        this.#bufferedAmount -= value.byteLength\n      })\n    } else if (types.isArrayBuffer(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need\n      // to be buffered but the buffer is full, the user agent must flag\n      // the WebSocket as full and then close the WebSocket connection.\n      // The data to be sent is the data stored in the buffer described\n      // by the ArrayBuffer object. Any invocation of this method with an\n      // ArrayBuffer argument that does not throw an exception must\n      // increase the bufferedAmount attribute by the length of the\n      // ArrayBuffer in bytes.\n\n      const value = Buffer.from(data)\n      const frame = new WebsocketFrameSend(value)\n      const buffer = frame.createFrame(opcodes.BINARY)\n\n      this.#bufferedAmount += value.byteLength\n      socket.write(buffer, () => {\n        this.#bufferedAmount -= value.byteLength\n      })\n    } else if (ArrayBuffer.isView(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need to\n      // be buffered but the buffer is full, the user agent must flag the\n      // WebSocket as full and then close the WebSocket connection. The\n      // data to be sent is the data stored in the section of the buffer\n      // described by the ArrayBuffer object that data references. Any\n      // invocation of this method with this kind of argument that does\n      // not throw an exception must increase the bufferedAmount attribute\n      // by the length of data\u2019s buffer in bytes.\n\n      const ab = Buffer.from(data, data.byteOffset, data.byteLength)\n\n      const frame = new WebsocketFrameSend(ab)\n      const buffer = frame.createFrame(opcodes.BINARY)\n\n      this.#bufferedAmount += ab.byteLength\n      socket.write(buffer, () => {\n        this.#bufferedAmount -= ab.byteLength\n      })\n    } else if (isBlobLike(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need to\n      // be buffered but the buffer is full, the user agent must flag the\n      // WebSocket as full and then close the WebSocket connection. The data\n      // to be sent is the raw data represented by the Blob object. Any\n      // invocation of this method with a Blob argument that does not throw\n      // an exception must increase the bufferedAmount attribute by the size\n      // of the Blob object\u2019s raw data, in bytes.\n\n      const frame = new WebsocketFrameSend()\n\n      data.arrayBuffer().then((ab) => {\n        const value = Buffer.from(ab)\n        frame.frameData = value\n        const buffer = frame.createFrame(opcodes.BINARY)\n\n        this.#bufferedAmount += value.byteLength\n        socket.write(buffer, () => {\n          this.#bufferedAmount -= value.byteLength\n        })\n      })\n    }\n  }\n\n  get readyState () {\n    webidl.brandCheck(this, WebSocket)\n\n    // The readyState getter steps are to return this's ready state.\n    return this[kReadyState]\n  }\n\n  get bufferedAmount () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#bufferedAmount\n  }\n\n  get url () {\n    webidl.brandCheck(this, WebSocket)\n\n    // The url getter steps are to return this's url, serialized.\n    return URLSerializer(this[kWebSocketURL])\n  }\n\n  get extensions () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#extensions\n  }\n\n  get protocol () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#protocol\n  }\n\n  get onopen () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.open\n  }\n\n  set onopen (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.open) {\n      this.removeEventListener('open', this.#events.open)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.open = fn\n      this.addEventListener('open', fn)\n    } else {\n      this.#events.open = null\n    }\n  }\n\n  get onerror () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.error\n  }\n\n  set onerror (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.error) {\n      this.removeEventListener('error', this.#events.error)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.error = fn\n      this.addEventListener('error', fn)\n    } else {\n      this.#events.error = null\n    }\n  }\n\n  get onclose () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.close\n  }\n\n  set onclose (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.close) {\n      this.removeEventListener('close', this.#events.close)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.close = fn\n      this.addEventListener('close', fn)\n    } else {\n      this.#events.close = null\n    }\n  }\n\n  get onmessage () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.message\n  }\n\n  set onmessage (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.message) {\n      this.removeEventListener('message', this.#events.message)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.message = fn\n      this.addEventListener('message', fn)\n    } else {\n      this.#events.message = null\n    }\n  }\n\n  get binaryType () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this[kBinaryType]\n  }\n\n  set binaryType (type) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (type !== 'blob' && type !== 'arraybuffer') {\n      this[kBinaryType] = 'blob'\n    } else {\n      this[kBinaryType] = type\n    }\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n   */\n  #onConnectionEstablished (response) {\n    // processResponse is called when the \"response\u2019s header list has been received and initialized.\"\n    // once this happens, the connection is open\n    this[kResponse] = response\n\n    const parser = new ByteParser(this)\n    parser.on('drain', function onParserDrain () {\n      this.ws[kResponse].socket.resume()\n    })\n\n    response.socket.ws = this\n    this[kByteParser] = parser\n\n    // 1. Change the ready state to OPEN (1).\n    this[kReadyState] = states.OPEN\n\n    // 2. Change the extensions attribute\u2019s value to the extensions in use, if\n    //    it is not the null value.\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1\n    const extensions = response.headersList.get('sec-websocket-extensions')\n\n    if (extensions !== null) {\n      this.#extensions = extensions\n    }\n\n    // 3. Change the protocol attribute\u2019s value to the subprotocol in use, if\n    //    it is not the null value.\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9\n    const protocol = response.headersList.get('sec-websocket-protocol')\n\n    if (protocol !== null) {\n      this.#protocol = protocol\n    }\n\n    // 4. Fire an event named open at the WebSocket object.\n    fireEvent('open', this)\n  }\n}\n\n// https://websockets.spec.whatwg.org/#dom-websocket-connecting\nWebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING\n// https://websockets.spec.whatwg.org/#dom-websocket-open\nWebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN\n// https://websockets.spec.whatwg.org/#dom-websocket-closing\nWebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING\n// https://websockets.spec.whatwg.org/#dom-websocket-closed\nWebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED\n\nObject.defineProperties(WebSocket.prototype, {\n  CONNECTING: staticPropertyDescriptors,\n  OPEN: staticPropertyDescriptors,\n  CLOSING: staticPropertyDescriptors,\n  CLOSED: staticPropertyDescriptors,\n  url: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  bufferedAmount: kEnumerableProperty,\n  onopen: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onclose: kEnumerableProperty,\n  close: kEnumerableProperty,\n  onmessage: kEnumerableProperty,\n  binaryType: kEnumerableProperty,\n  send: kEnumerableProperty,\n  extensions: kEnumerableProperty,\n  protocol: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'WebSocket',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n})\n\nObject.defineProperties(WebSocket, {\n  CONNECTING: staticPropertyDescriptors,\n  OPEN: staticPropertyDescriptors,\n  CLOSING: staticPropertyDescriptors,\n  CLOSED: staticPropertyDescriptors\n})\n\nwebidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(\n  webidl.converters.DOMString\n)\n\nwebidl.converters['DOMString or sequence<DOMString>'] = function (V) {\n  if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {\n    return webidl.converters['sequence<DOMString>'](V)\n  }\n\n  return webidl.converters.DOMString(V)\n}\n\n// This implements the propsal made in https://github.com/whatwg/websockets/issues/42\nwebidl.converters.WebSocketInit = webidl.dictionaryConverter([\n  {\n    key: 'protocols',\n    converter: webidl.converters['DOMString or sequence<DOMString>'],\n    get defaultValue () {\n      return []\n    }\n  },\n  {\n    key: 'dispatcher',\n    converter: (V) => V,\n    get defaultValue () {\n      return getGlobalDispatcher()\n    }\n  },\n  {\n    key: 'headers',\n    converter: webidl.nullableConverter(webidl.converters.HeadersInit)\n  }\n])\n\nwebidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (V) {\n  if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {\n    return webidl.converters.WebSocketInit(V)\n  }\n\n  return { protocols: webidl.converters['DOMString or sequence<DOMString>'](V) }\n}\n\nwebidl.converters.WebSocketSendData = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, { strict: false })\n    }\n\n    if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {\n      return webidl.converters.BufferSource(V)\n    }\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nmodule.exports = {\n  WebSocket\n}\n", "'use strict'\n\nconst Client = require('./lib/client')\nconst Dispatcher = require('./lib/dispatcher')\nconst errors = require('./lib/core/errors')\nconst Pool = require('./lib/pool')\nconst BalancedPool = require('./lib/balanced-pool')\nconst Agent = require('./lib/agent')\nconst util = require('./lib/core/util')\nconst { InvalidArgumentError } = errors\nconst api = require('./lib/api')\nconst buildConnector = require('./lib/core/connect')\nconst MockClient = require('./lib/mock/mock-client')\nconst MockAgent = require('./lib/mock/mock-agent')\nconst MockPool = require('./lib/mock/mock-pool')\nconst mockErrors = require('./lib/mock/mock-errors')\nconst ProxyAgent = require('./lib/proxy-agent')\nconst RetryHandler = require('./lib/handler/RetryHandler')\nconst { getGlobalDispatcher, setGlobalDispatcher } = require('./lib/global')\nconst DecoratorHandler = require('./lib/handler/DecoratorHandler')\nconst RedirectHandler = require('./lib/handler/RedirectHandler')\nconst createRedirectInterceptor = require('./lib/interceptor/redirectInterceptor')\n\nlet hasCrypto\ntry {\n  require('crypto')\n  hasCrypto = true\n} catch {\n  hasCrypto = false\n}\n\nObject.assign(Dispatcher.prototype, api)\n\nmodule.exports.Dispatcher = Dispatcher\nmodule.exports.Client = Client\nmodule.exports.Pool = Pool\nmodule.exports.BalancedPool = BalancedPool\nmodule.exports.Agent = Agent\nmodule.exports.ProxyAgent = ProxyAgent\nmodule.exports.RetryHandler = RetryHandler\n\nmodule.exports.DecoratorHandler = DecoratorHandler\nmodule.exports.RedirectHandler = RedirectHandler\nmodule.exports.createRedirectInterceptor = createRedirectInterceptor\n\nmodule.exports.buildConnector = buildConnector\nmodule.exports.errors = errors\n\nfunction makeDispatcher (fn) {\n  return (url, opts, handler) => {\n    if (typeof opts === 'function') {\n      handler = opts\n      opts = null\n    }\n\n    if (!url || (typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL))) {\n      throw new InvalidArgumentError('invalid url')\n    }\n\n    if (opts != null && typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (opts && opts.path != null) {\n      if (typeof opts.path !== 'string') {\n        throw new InvalidArgumentError('invalid opts.path')\n      }\n\n      let path = opts.path\n      if (!opts.path.startsWith('/')) {\n        path = `/${path}`\n      }\n\n      url = new URL(util.parseOrigin(url).origin + path)\n    } else {\n      if (!opts) {\n        opts = typeof url === 'object' ? url : {}\n      }\n\n      url = util.parseURL(url)\n    }\n\n    const { agent, dispatcher = getGlobalDispatcher() } = opts\n\n    if (agent) {\n      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?')\n    }\n\n    return fn.call(dispatcher, {\n      ...opts,\n      origin: url.origin,\n      path: url.search ? `${url.pathname}${url.search}` : url.pathname,\n      method: opts.method || (opts.body ? 'PUT' : 'GET')\n    }, handler)\n  }\n}\n\nmodule.exports.setGlobalDispatcher = setGlobalDispatcher\nmodule.exports.getGlobalDispatcher = getGlobalDispatcher\n\nif (util.nodeMajor > 16 || (util.nodeMajor === 16 && util.nodeMinor >= 8)) {\n  let fetchImpl = null\n  module.exports.fetch = async function fetch (resource) {\n    if (!fetchImpl) {\n      fetchImpl = require('./lib/fetch').fetch\n    }\n\n    try {\n      return await fetchImpl(...arguments)\n    } catch (err) {\n      if (typeof err === 'object') {\n        Error.captureStackTrace(err, this)\n      }\n\n      throw err\n    }\n  }\n  module.exports.Headers = require('./lib/fetch/headers').Headers\n  module.exports.Response = require('./lib/fetch/response').Response\n  module.exports.Request = require('./lib/fetch/request').Request\n  module.exports.FormData = require('./lib/fetch/formdata').FormData\n  module.exports.File = require('./lib/fetch/file').File\n  module.exports.FileReader = require('./lib/fileapi/filereader').FileReader\n\n  const { setGlobalOrigin, getGlobalOrigin } = require('./lib/fetch/global')\n\n  module.exports.setGlobalOrigin = setGlobalOrigin\n  module.exports.getGlobalOrigin = getGlobalOrigin\n\n  const { CacheStorage } = require('./lib/cache/cachestorage')\n  const { kConstruct } = require('./lib/cache/symbols')\n\n  // Cache & CacheStorage are tightly coupled with fetch. Even if it may run\n  // in an older version of Node, it doesn't have any use without fetch.\n  module.exports.caches = new CacheStorage(kConstruct)\n}\n\nif (util.nodeMajor >= 16) {\n  const { deleteCookie, getCookies, getSetCookies, setCookie } = require('./lib/cookies')\n\n  module.exports.deleteCookie = deleteCookie\n  module.exports.getCookies = getCookies\n  module.exports.getSetCookies = getSetCookies\n  module.exports.setCookie = setCookie\n\n  const { parseMIMEType, serializeAMimeType } = require('./lib/fetch/dataURL')\n\n  module.exports.parseMIMEType = parseMIMEType\n  module.exports.serializeAMimeType = serializeAMimeType\n}\n\nif (util.nodeMajor >= 18 && hasCrypto) {\n  const { WebSocket } = require('./lib/websocket/websocket')\n\n  module.exports.WebSocket = WebSocket\n}\n\nmodule.exports.request = makeDispatcher(api.request)\nmodule.exports.stream = makeDispatcher(api.stream)\nmodule.exports.pipeline = makeDispatcher(api.pipeline)\nmodule.exports.connect = makeDispatcher(api.connect)\nmodule.exports.upgrade = makeDispatcher(api.upgrade)\n\nmodule.exports.MockClient = MockClient\nmodule.exports.MockPool = MockPool\nmodule.exports.MockAgent = MockAgent\nmodule.exports.mockErrors = mockErrors\n", null, null, null, null, null, null, null, null, "export function getUserAgent() {\n    if (typeof navigator === \"object\" && \"userAgent\" in navigator) {\n        return navigator.userAgent;\n    }\n    if (typeof process === \"object\" && process.version !== undefined) {\n        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;\n    }\n    return \"<environment undetectable>\";\n}\n", "module.exports = register;\n\nfunction register(state, name, method, options) {\n  if (typeof method !== \"function\") {\n    throw new Error(\"method for before hook must be a function\");\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (Array.isArray(name)) {\n    return name.reverse().reduce(function (callback, name) {\n      return register.bind(null, state, name, callback, options);\n    }, method)();\n  }\n\n  return Promise.resolve().then(function () {\n    if (!state.registry[name]) {\n      return method(options);\n    }\n\n    return state.registry[name].reduce(function (method, registered) {\n      return registered.hook.bind(null, method, options);\n    }, method)();\n  });\n}\n", "module.exports = addHook;\n\nfunction addHook(state, kind, name, hook) {\n  var orig = hook;\n  if (!state.registry[name]) {\n    state.registry[name] = [];\n  }\n\n  if (kind === \"before\") {\n    hook = function (method, options) {\n      return Promise.resolve()\n        .then(orig.bind(null, options))\n        .then(method.bind(null, options));\n    };\n  }\n\n  if (kind === \"after\") {\n    hook = function (method, options) {\n      var result;\n      return Promise.resolve()\n        .then(method.bind(null, options))\n        .then(function (result_) {\n          result = result_;\n          return orig(result, options);\n        })\n        .then(function () {\n          return result;\n        });\n    };\n  }\n\n  if (kind === \"error\") {\n    hook = function (method, options) {\n      return Promise.resolve()\n        .then(method.bind(null, options))\n        .catch(function (error) {\n          return orig(error, options);\n        });\n    };\n  }\n\n  state.registry[name].push({\n    hook: hook,\n    orig: orig,\n  });\n}\n", "module.exports = removeHook;\n\nfunction removeHook(state, name, method) {\n  if (!state.registry[name]) {\n    return;\n  }\n\n  var index = state.registry[name]\n    .map(function (registered) {\n      return registered.orig;\n    })\n    .indexOf(method);\n\n  if (index === -1) {\n    return;\n  }\n\n  state.registry[name].splice(index, 1);\n}\n", "var register = require(\"./lib/register\");\nvar addHook = require(\"./lib/add\");\nvar removeHook = require(\"./lib/remove\");\n\n// bind with array of arguments: https://stackoverflow.com/a/21792913\nvar bind = Function.bind;\nvar bindable = bind.bind(bind);\n\nfunction bindApi(hook, state, name) {\n  var removeHookRef = bindable(removeHook, null).apply(\n    null,\n    name ? [state, name] : [state]\n  );\n  hook.api = { remove: removeHookRef };\n  hook.remove = removeHookRef;\n  [\"before\", \"error\", \"after\", \"wrap\"].forEach(function (kind) {\n    var args = name ? [state, kind, name] : [state, kind];\n    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);\n  });\n}\n\nfunction HookSingular() {\n  var singularHookName = \"h\";\n  var singularHookState = {\n    registry: {},\n  };\n  var singularHook = register.bind(null, singularHookState, singularHookName);\n  bindApi(singularHook, singularHookState, singularHookName);\n  return singularHook;\n}\n\nfunction HookCollection() {\n  var state = {\n    registry: {},\n  };\n\n  var hook = register.bind(null, state);\n  bindApi(hook, state);\n\n  return hook;\n}\n\nvar collectionHookDeprecationMessageDisplayed = false;\nfunction Hook() {\n  if (!collectionHookDeprecationMessageDisplayed) {\n    console.warn(\n      '[before-after-hook]: \"Hook()\" repurposing warning, use \"Hook.Collection()\". Read more: https://git.io/upgrade-before-after-hook-to-1.4'\n    );\n    collectionHookDeprecationMessageDisplayed = true;\n  }\n  return HookCollection();\n}\n\nHook.Singular = HookSingular.bind();\nHook.Collection = HookCollection.bind();\n\nmodule.exports = Hook;\n// expose constructors as a named property for TypeScript\nmodule.exports.Hook = Hook;\nmodule.exports.Singular = Hook.Singular;\nmodule.exports.Collection = Hook.Collection;\n", "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n  endpoint: () => endpoint\n});\nmodule.exports = __toCommonJS(dist_src_exports);\n\n// pkg/dist-src/defaults.js\nvar import_universal_user_agent = require(\"universal-user-agent\");\n\n// pkg/dist-src/version.js\nvar VERSION = \"9.0.5\";\n\n// pkg/dist-src/defaults.js\nvar userAgent = `octokit-endpoint.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;\nvar DEFAULTS = {\n  method: \"GET\",\n  baseUrl: \"https://api.github.com\",\n  headers: {\n    accept: \"application/vnd.github.v3+json\",\n    \"user-agent\": userAgent\n  },\n  mediaType: {\n    format: \"\"\n  }\n};\n\n// pkg/dist-src/util/lowercase-keys.js\nfunction lowercaseKeys(object) {\n  if (!object) {\n    return {};\n  }\n  return Object.keys(object).reduce((newObj, key) => {\n    newObj[key.toLowerCase()] = object[key];\n    return newObj;\n  }, {});\n}\n\n// pkg/dist-src/util/is-plain-object.js\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null)\n    return false;\n  if (Object.prototype.toString.call(value) !== \"[object Object]\")\n    return false;\n  const proto = Object.getPrototypeOf(value);\n  if (proto === null)\n    return true;\n  const Ctor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n  return typeof Ctor === \"function\" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);\n}\n\n// pkg/dist-src/util/merge-deep.js\nfunction mergeDeep(defaults, options) {\n  const result = Object.assign({}, defaults);\n  Object.keys(options).forEach((key) => {\n    if (isPlainObject(options[key])) {\n      if (!(key in defaults))\n        Object.assign(result, { [key]: options[key] });\n      else\n        result[key] = mergeDeep(defaults[key], options[key]);\n    } else {\n      Object.assign(result, { [key]: options[key] });\n    }\n  });\n  return result;\n}\n\n// pkg/dist-src/util/remove-undefined-properties.js\nfunction removeUndefinedProperties(obj) {\n  for (const key in obj) {\n    if (obj[key] === void 0) {\n      delete obj[key];\n    }\n  }\n  return obj;\n}\n\n// pkg/dist-src/merge.js\nfunction merge(defaults, route, options) {\n  if (typeof route === \"string\") {\n    let [method, url] = route.split(\" \");\n    options = Object.assign(url ? { method, url } : { url: method }, options);\n  } else {\n    options = Object.assign({}, route);\n  }\n  options.headers = lowercaseKeys(options.headers);\n  removeUndefinedProperties(options);\n  removeUndefinedProperties(options.headers);\n  const mergedOptions = mergeDeep(defaults || {}, options);\n  if (options.url === \"/graphql\") {\n    if (defaults && defaults.mediaType.previews?.length) {\n      mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(\n        (preview) => !mergedOptions.mediaType.previews.includes(preview)\n      ).concat(mergedOptions.mediaType.previews);\n    }\n    mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview) => preview.replace(/-preview/, \"\"));\n  }\n  return mergedOptions;\n}\n\n// pkg/dist-src/util/add-query-parameters.js\nfunction addQueryParameters(url, parameters) {\n  const separator = /\\?/.test(url) ? \"&\" : \"?\";\n  const names = Object.keys(parameters);\n  if (names.length === 0) {\n    return url;\n  }\n  return url + separator + names.map((name) => {\n    if (name === \"q\") {\n      return \"q=\" + parameters.q.split(\"+\").map(encodeURIComponent).join(\"+\");\n    }\n    return `${name}=${encodeURIComponent(parameters[name])}`;\n  }).join(\"&\");\n}\n\n// pkg/dist-src/util/extract-url-variable-names.js\nvar urlVariableRegex = /\\{[^}]+\\}/g;\nfunction removeNonChars(variableName) {\n  return variableName.replace(/^\\W+|\\W+$/g, \"\").split(/,/);\n}\nfunction extractUrlVariableNames(url) {\n  const matches = url.match(urlVariableRegex);\n  if (!matches) {\n    return [];\n  }\n  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);\n}\n\n// pkg/dist-src/util/omit.js\nfunction omit(object, keysToOmit) {\n  const result = { __proto__: null };\n  for (const key of Object.keys(object)) {\n    if (keysToOmit.indexOf(key) === -1) {\n      result[key] = object[key];\n    }\n  }\n  return result;\n}\n\n// pkg/dist-src/util/url-template.js\nfunction encodeReserved(str) {\n  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {\n    if (!/%[0-9A-Fa-f]/.test(part)) {\n      part = encodeURI(part).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n    }\n    return part;\n  }).join(\"\");\n}\nfunction encodeUnreserved(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n    return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\nfunction encodeValue(operator, value, key) {\n  value = operator === \"+\" || operator === \"#\" ? encodeReserved(value) : encodeUnreserved(value);\n  if (key) {\n    return encodeUnreserved(key) + \"=\" + value;\n  } else {\n    return value;\n  }\n}\nfunction isDefined(value) {\n  return value !== void 0 && value !== null;\n}\nfunction isKeyOperator(operator) {\n  return operator === \";\" || operator === \"&\" || operator === \"?\";\n}\nfunction getValues(context, operator, key, modifier) {\n  var value = context[key], result = [];\n  if (isDefined(value) && value !== \"\") {\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n      value = value.toString();\n      if (modifier && modifier !== \"*\") {\n        value = value.substring(0, parseInt(modifier, 10));\n      }\n      result.push(\n        encodeValue(operator, value, isKeyOperator(operator) ? key : \"\")\n      );\n    } else {\n      if (modifier === \"*\") {\n        if (Array.isArray(value)) {\n          value.filter(isDefined).forEach(function(value2) {\n            result.push(\n              encodeValue(operator, value2, isKeyOperator(operator) ? key : \"\")\n            );\n          });\n        } else {\n          Object.keys(value).forEach(function(k) {\n            if (isDefined(value[k])) {\n              result.push(encodeValue(operator, value[k], k));\n            }\n          });\n        }\n      } else {\n        const tmp = [];\n        if (Array.isArray(value)) {\n          value.filter(isDefined).forEach(function(value2) {\n            tmp.push(encodeValue(operator, value2));\n          });\n        } else {\n          Object.keys(value).forEach(function(k) {\n            if (isDefined(value[k])) {\n              tmp.push(encodeUnreserved(k));\n              tmp.push(encodeValue(operator, value[k].toString()));\n            }\n          });\n        }\n        if (isKeyOperator(operator)) {\n          result.push(encodeUnreserved(key) + \"=\" + tmp.join(\",\"));\n        } else if (tmp.length !== 0) {\n          result.push(tmp.join(\",\"));\n        }\n      }\n    }\n  } else {\n    if (operator === \";\") {\n      if (isDefined(value)) {\n        result.push(encodeUnreserved(key));\n      }\n    } else if (value === \"\" && (operator === \"&\" || operator === \"?\")) {\n      result.push(encodeUnreserved(key) + \"=\");\n    } else if (value === \"\") {\n      result.push(\"\");\n    }\n  }\n  return result;\n}\nfunction parseUrl(template) {\n  return {\n    expand: expand.bind(null, template)\n  };\n}\nfunction expand(template, context) {\n  var operators = [\"+\", \"#\", \".\", \"/\", \";\", \"?\", \"&\"];\n  template = template.replace(\n    /\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g,\n    function(_, expression, literal) {\n      if (expression) {\n        let operator = \"\";\n        const values = [];\n        if (operators.indexOf(expression.charAt(0)) !== -1) {\n          operator = expression.charAt(0);\n          expression = expression.substr(1);\n        }\n        expression.split(/,/g).forEach(function(variable) {\n          var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n          values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n        });\n        if (operator && operator !== \"+\") {\n          var separator = \",\";\n          if (operator === \"?\") {\n            separator = \"&\";\n          } else if (operator !== \"#\") {\n            separator = operator;\n          }\n          return (values.length !== 0 ? operator : \"\") + values.join(separator);\n        } else {\n          return values.join(\",\");\n        }\n      } else {\n        return encodeReserved(literal);\n      }\n    }\n  );\n  if (template === \"/\") {\n    return template;\n  } else {\n    return template.replace(/\\/$/, \"\");\n  }\n}\n\n// pkg/dist-src/parse.js\nfunction parse(options) {\n  let method = options.method.toUpperCase();\n  let url = (options.url || \"/\").replace(/:([a-z]\\w+)/g, \"{$1}\");\n  let headers = Object.assign({}, options.headers);\n  let body;\n  let parameters = omit(options, [\n    \"method\",\n    \"baseUrl\",\n    \"url\",\n    \"headers\",\n    \"request\",\n    \"mediaType\"\n  ]);\n  const urlVariableNames = extractUrlVariableNames(url);\n  url = parseUrl(url).expand(parameters);\n  if (!/^http/.test(url)) {\n    url = options.baseUrl + url;\n  }\n  const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat(\"baseUrl\");\n  const remainingParameters = omit(parameters, omittedParameters);\n  const isBinaryRequest = /application\\/octet-stream/i.test(headers.accept);\n  if (!isBinaryRequest) {\n    if (options.mediaType.format) {\n      headers.accept = headers.accept.split(/,/).map(\n        (format) => format.replace(\n          /application\\/vnd(\\.\\w+)(\\.v3)?(\\.\\w+)?(\\+json)?$/,\n          `application/vnd$1$2.${options.mediaType.format}`\n        )\n      ).join(\",\");\n    }\n    if (url.endsWith(\"/graphql\")) {\n      if (options.mediaType.previews?.length) {\n        const previewsFromAcceptHeader = headers.accept.match(/[\\w-]+(?=-preview)/g) || [];\n        headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {\n          const format = options.mediaType.format ? `.${options.mediaType.format}` : \"+json\";\n          return `application/vnd.github.${preview}-preview${format}`;\n        }).join(\",\");\n      }\n    }\n  }\n  if ([\"GET\", \"HEAD\"].includes(method)) {\n    url = addQueryParameters(url, remainingParameters);\n  } else {\n    if (\"data\" in remainingParameters) {\n      body = remainingParameters.data;\n    } else {\n      if (Object.keys(remainingParameters).length) {\n        body = remainingParameters;\n      }\n    }\n  }\n  if (!headers[\"content-type\"] && typeof body !== \"undefined\") {\n    headers[\"content-type\"] = \"application/json; charset=utf-8\";\n  }\n  if ([\"PATCH\", \"PUT\"].includes(method) && typeof body === \"undefined\") {\n    body = \"\";\n  }\n  return Object.assign(\n    { method, url, headers },\n    typeof body !== \"undefined\" ? { body } : null,\n    options.request ? { request: options.request } : null\n  );\n}\n\n// pkg/dist-src/endpoint-with-defaults.js\nfunction endpointWithDefaults(defaults, route, options) {\n  return parse(merge(defaults, route, options));\n}\n\n// pkg/dist-src/with-defaults.js\nfunction withDefaults(oldDefaults, newDefaults) {\n  const DEFAULTS2 = merge(oldDefaults, newDefaults);\n  const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);\n  return Object.assign(endpoint2, {\n    DEFAULTS: DEFAULTS2,\n    defaults: withDefaults.bind(null, DEFAULTS2),\n    merge: merge.bind(null, DEFAULTS2),\n    parse\n  });\n}\n\n// pkg/dist-src/index.js\nvar endpoint = withDefaults(null, DEFAULTS);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  endpoint\n});\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nclass Deprecation extends Error {\n  constructor(message) {\n    super(message); // Maintains proper stack trace (only available on V8)\n\n    /* istanbul ignore next */\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'Deprecation';\n  }\n\n}\n\nexports.Deprecation = Deprecation;\n", "// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n", "var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n", "\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n  RequestError: () => RequestError\n});\nmodule.exports = __toCommonJS(dist_src_exports);\nvar import_deprecation = require(\"deprecation\");\nvar import_once = __toESM(require(\"once\"));\nvar logOnceCode = (0, import_once.default)((deprecation) => console.warn(deprecation));\nvar logOnceHeaders = (0, import_once.default)((deprecation) => console.warn(deprecation));\nvar RequestError = class extends Error {\n  constructor(message, statusCode, options) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n    this.name = \"HttpError\";\n    this.status = statusCode;\n    let headers;\n    if (\"headers\" in options && typeof options.headers !== \"undefined\") {\n      headers = options.headers;\n    }\n    if (\"response\" in options) {\n      this.response = options.response;\n      headers = options.response.headers;\n    }\n    const requestCopy = Object.assign({}, options.request);\n    if (options.request.headers.authorization) {\n      requestCopy.headers = Object.assign({}, options.request.headers, {\n        authorization: options.request.headers.authorization.replace(\n          / .*$/,\n          \" [REDACTED]\"\n        )\n      });\n    }\n    requestCopy.url = requestCopy.url.replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\").replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n    this.request = requestCopy;\n    Object.defineProperty(this, \"code\", {\n      get() {\n        logOnceCode(\n          new import_deprecation.Deprecation(\n            \"[@octokit/request-error] `error.code` is deprecated, use `error.status`.\"\n          )\n        );\n        return statusCode;\n      }\n    });\n    Object.defineProperty(this, \"headers\", {\n      get() {\n        logOnceHeaders(\n          new import_deprecation.Deprecation(\n            \"[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.\"\n          )\n        );\n        return headers || {};\n      }\n    });\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  RequestError\n});\n", "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n  request: () => request\n});\nmodule.exports = __toCommonJS(dist_src_exports);\nvar import_endpoint = require(\"@octokit/endpoint\");\nvar import_universal_user_agent = require(\"universal-user-agent\");\n\n// pkg/dist-src/version.js\nvar VERSION = \"8.4.0\";\n\n// pkg/dist-src/is-plain-object.js\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null)\n    return false;\n  if (Object.prototype.toString.call(value) !== \"[object Object]\")\n    return false;\n  const proto = Object.getPrototypeOf(value);\n  if (proto === null)\n    return true;\n  const Ctor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n  return typeof Ctor === \"function\" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);\n}\n\n// pkg/dist-src/fetch-wrapper.js\nvar import_request_error = require(\"@octokit/request-error\");\n\n// pkg/dist-src/get-buffer-response.js\nfunction getBufferResponse(response) {\n  return response.arrayBuffer();\n}\n\n// pkg/dist-src/fetch-wrapper.js\nfunction fetchWrapper(requestOptions) {\n  var _a, _b, _c, _d;\n  const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;\n  const parseSuccessResponseBody = ((_a = requestOptions.request) == null ? void 0 : _a.parseSuccessResponseBody) !== false;\n  if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {\n    requestOptions.body = JSON.stringify(requestOptions.body);\n  }\n  let headers = {};\n  let status;\n  let url;\n  let { fetch } = globalThis;\n  if ((_b = requestOptions.request) == null ? void 0 : _b.fetch) {\n    fetch = requestOptions.request.fetch;\n  }\n  if (!fetch) {\n    throw new Error(\n      \"fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing\"\n    );\n  }\n  return fetch(requestOptions.url, {\n    method: requestOptions.method,\n    body: requestOptions.body,\n    redirect: (_c = requestOptions.request) == null ? void 0 : _c.redirect,\n    headers: requestOptions.headers,\n    signal: (_d = requestOptions.request) == null ? void 0 : _d.signal,\n    // duplex must be set if request.body is ReadableStream or Async Iterables.\n    // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.\n    ...requestOptions.body && { duplex: \"half\" }\n  }).then(async (response) => {\n    url = response.url;\n    status = response.status;\n    for (const keyAndValue of response.headers) {\n      headers[keyAndValue[0]] = keyAndValue[1];\n    }\n    if (\"deprecation\" in headers) {\n      const matches = headers.link && headers.link.match(/<([^>]+)>; rel=\"deprecation\"/);\n      const deprecationLink = matches && matches.pop();\n      log.warn(\n        `[@octokit/request] \"${requestOptions.method} ${requestOptions.url}\" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : \"\"}`\n      );\n    }\n    if (status === 204 || status === 205) {\n      return;\n    }\n    if (requestOptions.method === \"HEAD\") {\n      if (status < 400) {\n        return;\n      }\n      throw new import_request_error.RequestError(response.statusText, status, {\n        response: {\n          url,\n          status,\n          headers,\n          data: void 0\n        },\n        request: requestOptions\n      });\n    }\n    if (status === 304) {\n      throw new import_request_error.RequestError(\"Not modified\", status, {\n        response: {\n          url,\n          status,\n          headers,\n          data: await getResponseData(response)\n        },\n        request: requestOptions\n      });\n    }\n    if (status >= 400) {\n      const data = await getResponseData(response);\n      const error = new import_request_error.RequestError(toErrorMessage(data), status, {\n        response: {\n          url,\n          status,\n          headers,\n          data\n        },\n        request: requestOptions\n      });\n      throw error;\n    }\n    return parseSuccessResponseBody ? await getResponseData(response) : response.body;\n  }).then((data) => {\n    return {\n      status,\n      url,\n      headers,\n      data\n    };\n  }).catch((error) => {\n    if (error instanceof import_request_error.RequestError)\n      throw error;\n    else if (error.name === \"AbortError\")\n      throw error;\n    let message = error.message;\n    if (error.name === \"TypeError\" && \"cause\" in error) {\n      if (error.cause instanceof Error) {\n        message = error.cause.message;\n      } else if (typeof error.cause === \"string\") {\n        message = error.cause;\n      }\n    }\n    throw new import_request_error.RequestError(message, 500, {\n      request: requestOptions\n    });\n  });\n}\nasync function getResponseData(response) {\n  const contentType = response.headers.get(\"content-type\");\n  if (/application\\/json/.test(contentType)) {\n    return response.json().catch(() => response.text()).catch(() => \"\");\n  }\n  if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n    return response.text();\n  }\n  return getBufferResponse(response);\n}\nfunction toErrorMessage(data) {\n  if (typeof data === \"string\")\n    return data;\n  let suffix;\n  if (\"documentation_url\" in data) {\n    suffix = ` - ${data.documentation_url}`;\n  } else {\n    suffix = \"\";\n  }\n  if (\"message\" in data) {\n    if (Array.isArray(data.errors)) {\n      return `${data.message}: ${data.errors.map(JSON.stringify).join(\", \")}${suffix}`;\n    }\n    return `${data.message}${suffix}`;\n  }\n  return `Unknown error: ${JSON.stringify(data)}`;\n}\n\n// pkg/dist-src/with-defaults.js\nfunction withDefaults(oldEndpoint, newDefaults) {\n  const endpoint2 = oldEndpoint.defaults(newDefaults);\n  const newApi = function(route, parameters) {\n    const endpointOptions = endpoint2.merge(route, parameters);\n    if (!endpointOptions.request || !endpointOptions.request.hook) {\n      return fetchWrapper(endpoint2.parse(endpointOptions));\n    }\n    const request2 = (route2, parameters2) => {\n      return fetchWrapper(\n        endpoint2.parse(endpoint2.merge(route2, parameters2))\n      );\n    };\n    Object.assign(request2, {\n      endpoint: endpoint2,\n      defaults: withDefaults.bind(null, endpoint2)\n    });\n    return endpointOptions.request.hook(request2, endpointOptions);\n  };\n  return Object.assign(newApi, {\n    endpoint: endpoint2,\n    defaults: withDefaults.bind(null, endpoint2)\n  });\n}\n\n// pkg/dist-src/index.js\nvar request = withDefaults(import_endpoint.endpoint, {\n  headers: {\n    \"user-agent\": `octokit-request.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`\n  }\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  request\n});\n", "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n  GraphqlResponseError: () => GraphqlResponseError,\n  graphql: () => graphql2,\n  withCustomRequest: () => withCustomRequest\n});\nmodule.exports = __toCommonJS(dist_src_exports);\nvar import_request3 = require(\"@octokit/request\");\nvar import_universal_user_agent = require(\"universal-user-agent\");\n\n// pkg/dist-src/version.js\nvar VERSION = \"7.1.0\";\n\n// pkg/dist-src/with-defaults.js\nvar import_request2 = require(\"@octokit/request\");\n\n// pkg/dist-src/graphql.js\nvar import_request = require(\"@octokit/request\");\n\n// pkg/dist-src/error.js\nfunction _buildMessageForResponseErrors(data) {\n  return `Request failed due to following response errors:\n` + data.errors.map((e) => ` - ${e.message}`).join(\"\\n\");\n}\nvar GraphqlResponseError = class extends Error {\n  constructor(request2, headers, response) {\n    super(_buildMessageForResponseErrors(response));\n    this.request = request2;\n    this.headers = headers;\n    this.response = response;\n    this.name = \"GraphqlResponseError\";\n    this.errors = response.errors;\n    this.data = response.data;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n};\n\n// pkg/dist-src/graphql.js\nvar NON_VARIABLE_OPTIONS = [\n  \"method\",\n  \"baseUrl\",\n  \"url\",\n  \"headers\",\n  \"request\",\n  \"query\",\n  \"mediaType\"\n];\nvar FORBIDDEN_VARIABLE_OPTIONS = [\"query\", \"method\", \"url\"];\nvar GHES_V3_SUFFIX_REGEX = /\\/api\\/v3\\/?$/;\nfunction graphql(request2, query, options) {\n  if (options) {\n    if (typeof query === \"string\" && \"query\" in options) {\n      return Promise.reject(\n        new Error(`[@octokit/graphql] \"query\" cannot be used as variable name`)\n      );\n    }\n    for (const key in options) {\n      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))\n        continue;\n      return Promise.reject(\n        new Error(\n          `[@octokit/graphql] \"${key}\" cannot be used as variable name`\n        )\n      );\n    }\n  }\n  const parsedOptions = typeof query === \"string\" ? Object.assign({ query }, options) : query;\n  const requestOptions = Object.keys(\n    parsedOptions\n  ).reduce((result, key) => {\n    if (NON_VARIABLE_OPTIONS.includes(key)) {\n      result[key] = parsedOptions[key];\n      return result;\n    }\n    if (!result.variables) {\n      result.variables = {};\n    }\n    result.variables[key] = parsedOptions[key];\n    return result;\n  }, {});\n  const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;\n  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {\n    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, \"/api/graphql\");\n  }\n  return request2(requestOptions).then((response) => {\n    if (response.data.errors) {\n      const headers = {};\n      for (const key of Object.keys(response.headers)) {\n        headers[key] = response.headers[key];\n      }\n      throw new GraphqlResponseError(\n        requestOptions,\n        headers,\n        response.data\n      );\n    }\n    return response.data.data;\n  });\n}\n\n// pkg/dist-src/with-defaults.js\nfunction withDefaults(request2, newDefaults) {\n  const newRequest = request2.defaults(newDefaults);\n  const newApi = (query, options) => {\n    return graphql(newRequest, query, options);\n  };\n  return Object.assign(newApi, {\n    defaults: withDefaults.bind(null, newRequest),\n    endpoint: newRequest.endpoint\n  });\n}\n\n// pkg/dist-src/index.js\nvar graphql2 = withDefaults(import_request3.request, {\n  headers: {\n    \"user-agent\": `octokit-graphql.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`\n  },\n  method: \"POST\",\n  url: \"/graphql\"\n});\nfunction withCustomRequest(customRequest) {\n  return withDefaults(customRequest, {\n    method: \"POST\",\n    url: \"/graphql\"\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  GraphqlResponseError,\n  graphql,\n  withCustomRequest\n});\n", "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n  createTokenAuth: () => createTokenAuth\n});\nmodule.exports = __toCommonJS(dist_src_exports);\n\n// pkg/dist-src/auth.js\nvar REGEX_IS_INSTALLATION_LEGACY = /^v1\\./;\nvar REGEX_IS_INSTALLATION = /^ghs_/;\nvar REGEX_IS_USER_TO_SERVER = /^ghu_/;\nasync function auth(token) {\n  const isApp = token.split(/\\./).length === 3;\n  const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);\n  const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);\n  const tokenType = isApp ? \"app\" : isInstallation ? \"installation\" : isUserToServer ? \"user-to-server\" : \"oauth\";\n  return {\n    type: \"token\",\n    token,\n    tokenType\n  };\n}\n\n// pkg/dist-src/with-authorization-prefix.js\nfunction withAuthorizationPrefix(token) {\n  if (token.split(/\\./).length === 3) {\n    return `bearer ${token}`;\n  }\n  return `token ${token}`;\n}\n\n// pkg/dist-src/hook.js\nasync function hook(token, request, route, parameters) {\n  const endpoint = request.endpoint.merge(\n    route,\n    parameters\n  );\n  endpoint.headers.authorization = withAuthorizationPrefix(token);\n  return request(endpoint);\n}\n\n// pkg/dist-src/index.js\nvar createTokenAuth = function createTokenAuth2(token) {\n  if (!token) {\n    throw new Error(\"[@octokit/auth-token] No token passed to createTokenAuth\");\n  }\n  if (typeof token !== \"string\") {\n    throw new Error(\n      \"[@octokit/auth-token] Token passed to createTokenAuth is not a string\"\n    );\n  }\n  token = token.replace(/^(token|bearer) +/i, \"\");\n  return Object.assign(auth.bind(null, token), {\n    hook: hook.bind(null, token)\n  });\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  createTokenAuth\n});\n", "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n  Octokit: () => Octokit\n});\nmodule.exports = __toCommonJS(dist_src_exports);\nvar import_universal_user_agent = require(\"universal-user-agent\");\nvar import_before_after_hook = require(\"before-after-hook\");\nvar import_request = require(\"@octokit/request\");\nvar import_graphql = require(\"@octokit/graphql\");\nvar import_auth_token = require(\"@octokit/auth-token\");\n\n// pkg/dist-src/version.js\nvar VERSION = \"5.2.0\";\n\n// pkg/dist-src/index.js\nvar noop = () => {\n};\nvar consoleWarn = console.warn.bind(console);\nvar consoleError = console.error.bind(console);\nvar userAgentTrail = `octokit-core.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;\nvar Octokit = class {\n  static {\n    this.VERSION = VERSION;\n  }\n  static defaults(defaults) {\n    const OctokitWithDefaults = class extends this {\n      constructor(...args) {\n        const options = args[0] || {};\n        if (typeof defaults === \"function\") {\n          super(defaults(options));\n          return;\n        }\n        super(\n          Object.assign(\n            {},\n            defaults,\n            options,\n            options.userAgent && defaults.userAgent ? {\n              userAgent: `${options.userAgent} ${defaults.userAgent}`\n            } : null\n          )\n        );\n      }\n    };\n    return OctokitWithDefaults;\n  }\n  static {\n    this.plugins = [];\n  }\n  /**\n   * Attach a plugin (or many) to your Octokit instance.\n   *\n   * @example\n   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n   */\n  static plugin(...newPlugins) {\n    const currentPlugins = this.plugins;\n    const NewOctokit = class extends this {\n      static {\n        this.plugins = currentPlugins.concat(\n          newPlugins.filter((plugin) => !currentPlugins.includes(plugin))\n        );\n      }\n    };\n    return NewOctokit;\n  }\n  constructor(options = {}) {\n    const hook = new import_before_after_hook.Collection();\n    const requestDefaults = {\n      baseUrl: import_request.request.endpoint.DEFAULTS.baseUrl,\n      headers: {},\n      request: Object.assign({}, options.request, {\n        // @ts-ignore internal usage only, no need to type\n        hook: hook.bind(null, \"request\")\n      }),\n      mediaType: {\n        previews: [],\n        format: \"\"\n      }\n    };\n    requestDefaults.headers[\"user-agent\"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;\n    if (options.baseUrl) {\n      requestDefaults.baseUrl = options.baseUrl;\n    }\n    if (options.previews) {\n      requestDefaults.mediaType.previews = options.previews;\n    }\n    if (options.timeZone) {\n      requestDefaults.headers[\"time-zone\"] = options.timeZone;\n    }\n    this.request = import_request.request.defaults(requestDefaults);\n    this.graphql = (0, import_graphql.withCustomRequest)(this.request).defaults(requestDefaults);\n    this.log = Object.assign(\n      {\n        debug: noop,\n        info: noop,\n        warn: consoleWarn,\n        error: consoleError\n      },\n      options.log\n    );\n    this.hook = hook;\n    if (!options.authStrategy) {\n      if (!options.auth) {\n        this.auth = async () => ({\n          type: \"unauthenticated\"\n        });\n      } else {\n        const auth = (0, import_auth_token.createTokenAuth)(options.auth);\n        hook.wrap(\"request\", auth.hook);\n        this.auth = auth;\n      }\n    } else {\n      const { authStrategy, ...otherOptions } = options;\n      const auth = authStrategy(\n        Object.assign(\n          {\n            request: this.request,\n            log: this.log,\n            // we pass the current octokit instance as well as its constructor options\n            // to allow for authentication strategies that return a new octokit instance\n            // that shares the same internal state as the current one. The original\n            // requirement for this was the \"event-octokit\" authentication strategy\n            // of https://github.com/probot/octokit-auth-probot.\n            octokit: this,\n            octokitOptions: otherOptions\n          },\n          options.auth\n        )\n      );\n      hook.wrap(\"request\", auth.hook);\n      this.auth = auth;\n    }\n    const classConstructor = this.constructor;\n    for (let i = 0; i < classConstructor.plugins.length; ++i) {\n      Object.assign(this, classConstructor.plugins[i](this, options));\n    }\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Octokit\n});\n", "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n  legacyRestEndpointMethods: () => legacyRestEndpointMethods,\n  restEndpointMethods: () => restEndpointMethods\n});\nmodule.exports = __toCommonJS(dist_src_exports);\n\n// pkg/dist-src/version.js\nvar VERSION = \"10.4.1\";\n\n// pkg/dist-src/generated/endpoints.js\nvar Endpoints = {\n  actions: {\n    addCustomLabelsToSelfHostedRunnerForOrg: [\n      \"POST /orgs/{org}/actions/runners/{runner_id}/labels\"\n    ],\n    addCustomLabelsToSelfHostedRunnerForRepo: [\n      \"POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n    ],\n    addSelectedRepoToOrgSecret: [\n      \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    addSelectedRepoToOrgVariable: [\n      \"PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}\"\n    ],\n    approveWorkflowRun: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve\"\n    ],\n    cancelWorkflowRun: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel\"\n    ],\n    createEnvironmentVariable: [\n      \"POST /repositories/{repository_id}/environments/{environment_name}/variables\"\n    ],\n    createOrUpdateEnvironmentSecret: [\n      \"PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}\"\n    ],\n    createOrUpdateOrgSecret: [\"PUT /orgs/{org}/actions/secrets/{secret_name}\"],\n    createOrUpdateRepoSecret: [\n      \"PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}\"\n    ],\n    createOrgVariable: [\"POST /orgs/{org}/actions/variables\"],\n    createRegistrationTokenForOrg: [\n      \"POST /orgs/{org}/actions/runners/registration-token\"\n    ],\n    createRegistrationTokenForRepo: [\n      \"POST /repos/{owner}/{repo}/actions/runners/registration-token\"\n    ],\n    createRemoveTokenForOrg: [\"POST /orgs/{org}/actions/runners/remove-token\"],\n    createRemoveTokenForRepo: [\n      \"POST /repos/{owner}/{repo}/actions/runners/remove-token\"\n    ],\n    createRepoVariable: [\"POST /repos/{owner}/{repo}/actions/variables\"],\n    createWorkflowDispatch: [\n      \"POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\"\n    ],\n    deleteActionsCacheById: [\n      \"DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}\"\n    ],\n    deleteActionsCacheByKey: [\n      \"DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}\"\n    ],\n    deleteArtifact: [\n      \"DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"\n    ],\n    deleteEnvironmentSecret: [\n      \"DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}\"\n    ],\n    deleteEnvironmentVariable: [\n      \"DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}\"\n    ],\n    deleteOrgSecret: [\"DELETE /orgs/{org}/actions/secrets/{secret_name}\"],\n    deleteOrgVariable: [\"DELETE /orgs/{org}/actions/variables/{name}\"],\n    deleteRepoSecret: [\n      \"DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}\"\n    ],\n    deleteRepoVariable: [\n      \"DELETE /repos/{owner}/{repo}/actions/variables/{name}\"\n    ],\n    deleteSelfHostedRunnerFromOrg: [\n      \"DELETE /orgs/{org}/actions/runners/{runner_id}\"\n    ],\n    deleteSelfHostedRunnerFromRepo: [\n      \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}\"\n    ],\n    deleteWorkflowRun: [\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n    deleteWorkflowRunLogs: [\n      \"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"\n    ],\n    disableSelectedRepositoryGithubActionsOrganization: [\n      \"DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}\"\n    ],\n    disableWorkflow: [\n      \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\"\n    ],\n    downloadArtifact: [\n      \"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\"\n    ],\n    downloadJobLogsForWorkflowRun: [\n      \"GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs\"\n    ],\n    downloadWorkflowRunAttemptLogs: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs\"\n    ],\n    downloadWorkflowRunLogs: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"\n    ],\n    enableSelectedRepositoryGithubActionsOrganization: [\n      \"PUT /orgs/{org}/actions/permissions/repositories/{repository_id}\"\n    ],\n    enableWorkflow: [\n      \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\"\n    ],\n    forceCancelWorkflowRun: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel\"\n    ],\n    generateRunnerJitconfigForOrg: [\n      \"POST /orgs/{org}/actions/runners/generate-jitconfig\"\n    ],\n    generateRunnerJitconfigForRepo: [\n      \"POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig\"\n    ],\n    getActionsCacheList: [\"GET /repos/{owner}/{repo}/actions/caches\"],\n    getActionsCacheUsage: [\"GET /repos/{owner}/{repo}/actions/cache/usage\"],\n    getActionsCacheUsageByRepoForOrg: [\n      \"GET /orgs/{org}/actions/cache/usage-by-repository\"\n    ],\n    getActionsCacheUsageForOrg: [\"GET /orgs/{org}/actions/cache/usage\"],\n    getAllowedActionsOrganization: [\n      \"GET /orgs/{org}/actions/permissions/selected-actions\"\n    ],\n    getAllowedActionsRepository: [\n      \"GET /repos/{owner}/{repo}/actions/permissions/selected-actions\"\n    ],\n    getArtifact: [\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"],\n    getCustomOidcSubClaimForRepo: [\n      \"GET /repos/{owner}/{repo}/actions/oidc/customization/sub\"\n    ],\n    getEnvironmentPublicKey: [\n      \"GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key\"\n    ],\n    getEnvironmentSecret: [\n      \"GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}\"\n    ],\n    getEnvironmentVariable: [\n      \"GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}\"\n    ],\n    getGithubActionsDefaultWorkflowPermissionsOrganization: [\n      \"GET /orgs/{org}/actions/permissions/workflow\"\n    ],\n    getGithubActionsDefaultWorkflowPermissionsRepository: [\n      \"GET /repos/{owner}/{repo}/actions/permissions/workflow\"\n    ],\n    getGithubActionsPermissionsOrganization: [\n      \"GET /orgs/{org}/actions/permissions\"\n    ],\n    getGithubActionsPermissionsRepository: [\n      \"GET /repos/{owner}/{repo}/actions/permissions\"\n    ],\n    getJobForWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}\"],\n    getOrgPublicKey: [\"GET /orgs/{org}/actions/secrets/public-key\"],\n    getOrgSecret: [\"GET /orgs/{org}/actions/secrets/{secret_name}\"],\n    getOrgVariable: [\"GET /orgs/{org}/actions/variables/{name}\"],\n    getPendingDeploymentsForRun: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments\"\n    ],\n    getRepoPermissions: [\n      \"GET /repos/{owner}/{repo}/actions/permissions\",\n      {},\n      { renamed: [\"actions\", \"getGithubActionsPermissionsRepository\"] }\n    ],\n    getRepoPublicKey: [\"GET /repos/{owner}/{repo}/actions/secrets/public-key\"],\n    getRepoSecret: [\"GET /repos/{owner}/{repo}/actions/secrets/{secret_name}\"],\n    getRepoVariable: [\"GET /repos/{owner}/{repo}/actions/variables/{name}\"],\n    getReviewsForRun: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals\"\n    ],\n    getSelfHostedRunnerForOrg: [\"GET /orgs/{org}/actions/runners/{runner_id}\"],\n    getSelfHostedRunnerForRepo: [\n      \"GET /repos/{owner}/{repo}/actions/runners/{runner_id}\"\n    ],\n    getWorkflow: [\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}\"],\n    getWorkflowAccessToRepository: [\n      \"GET /repos/{owner}/{repo}/actions/permissions/access\"\n    ],\n    getWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n    getWorkflowRunAttempt: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}\"\n    ],\n    getWorkflowRunUsage: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing\"\n    ],\n    getWorkflowUsage: [\n      \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\"\n    ],\n    listArtifactsForRepo: [\"GET /repos/{owner}/{repo}/actions/artifacts\"],\n    listEnvironmentSecrets: [\n      \"GET /repositories/{repository_id}/environments/{environment_name}/secrets\"\n    ],\n    listEnvironmentVariables: [\n      \"GET /repositories/{repository_id}/environments/{environment_name}/variables\"\n    ],\n    listJobsForWorkflowRun: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\"\n    ],\n    listJobsForWorkflowRunAttempt: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs\"\n    ],\n    listLabelsForSelfHostedRunnerForOrg: [\n      \"GET /orgs/{org}/actions/runners/{runner_id}/labels\"\n    ],\n    listLabelsForSelfHostedRunnerForRepo: [\n      \"GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n    ],\n    listOrgSecrets: [\"GET /orgs/{org}/actions/secrets\"],\n    listOrgVariables: [\"GET /orgs/{org}/actions/variables\"],\n    listRepoOrganizationSecrets: [\n      \"GET /repos/{owner}/{repo}/actions/organization-secrets\"\n    ],\n    listRepoOrganizationVariables: [\n      \"GET /repos/{owner}/{repo}/actions/organization-variables\"\n    ],\n    listRepoSecrets: [\"GET /repos/{owner}/{repo}/actions/secrets\"],\n    listRepoVariables: [\"GET /repos/{owner}/{repo}/actions/variables\"],\n    listRepoWorkflows: [\"GET /repos/{owner}/{repo}/actions/workflows\"],\n    listRunnerApplicationsForOrg: [\"GET /orgs/{org}/actions/runners/downloads\"],\n    listRunnerApplicationsForRepo: [\n      \"GET /repos/{owner}/{repo}/actions/runners/downloads\"\n    ],\n    listSelectedReposForOrgSecret: [\n      \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\"\n    ],\n    listSelectedReposForOrgVariable: [\n      \"GET /orgs/{org}/actions/variables/{name}/repositories\"\n    ],\n    listSelectedRepositoriesEnabledGithubActionsOrganization: [\n      \"GET /orgs/{org}/actions/permissions/repositories\"\n    ],\n    listSelfHostedRunnersForOrg: [\"GET /orgs/{org}/actions/runners\"],\n    listSelfHostedRunnersForRepo: [\"GET /repos/{owner}/{repo}/actions/runners\"],\n    listWorkflowRunArtifacts: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\"\n    ],\n    listWorkflowRuns: [\n      \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\"\n    ],\n    listWorkflowRunsForRepo: [\"GET /repos/{owner}/{repo}/actions/runs\"],\n    reRunJobForWorkflowRun: [\n      \"POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun\"\n    ],\n    reRunWorkflow: [\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun\"],\n    reRunWorkflowFailedJobs: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs\"\n    ],\n    removeAllCustomLabelsFromSelfHostedRunnerForOrg: [\n      \"DELETE /orgs/{org}/actions/runners/{runner_id}/labels\"\n    ],\n    removeAllCustomLabelsFromSelfHostedRunnerForRepo: [\n      \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n    ],\n    removeCustomLabelFromSelfHostedRunnerForOrg: [\n      \"DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}\"\n    ],\n    removeCustomLabelFromSelfHostedRunnerForRepo: [\n      \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}\"\n    ],\n    removeSelectedRepoFromOrgSecret: [\n      \"DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    removeSelectedRepoFromOrgVariable: [\n      \"DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}\"\n    ],\n    reviewCustomGatesForRun: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule\"\n    ],\n    reviewPendingDeploymentsForRun: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments\"\n    ],\n    setAllowedActionsOrganization: [\n      \"PUT /orgs/{org}/actions/permissions/selected-actions\"\n    ],\n    setAllowedActionsRepository: [\n      \"PUT /repos/{owner}/{repo}/actions/permissions/selected-actions\"\n    ],\n    setCustomLabelsForSelfHostedRunnerForOrg: [\n      \"PUT /orgs/{org}/actions/runners/{runner_id}/labels\"\n    ],\n    setCustomLabelsForSelfHostedRunnerForRepo: [\n      \"PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n    ],\n    setCustomOidcSubClaimForRepo: [\n      \"PUT /repos/{owner}/{repo}/actions/oidc/customization/sub\"\n    ],\n    setGithubActionsDefaultWorkflowPermissionsOrganization: [\n      \"PUT /orgs/{org}/actions/permissions/workflow\"\n    ],\n    setGithubActionsDefaultWorkflowPermissionsRepository: [\n      \"PUT /repos/{owner}/{repo}/actions/permissions/workflow\"\n    ],\n    setGithubActionsPermissionsOrganization: [\n      \"PUT /orgs/{org}/actions/permissions\"\n    ],\n    setGithubActionsPermissionsRepository: [\n      \"PUT /repos/{owner}/{repo}/actions/permissions\"\n    ],\n    setSelectedReposForOrgSecret: [\n      \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories\"\n    ],\n    setSelectedReposForOrgVariable: [\n      \"PUT /orgs/{org}/actions/variables/{name}/repositories\"\n    ],\n    setSelectedRepositoriesEnabledGithubActionsOrganization: [\n      \"PUT /orgs/{org}/actions/permissions/repositories\"\n    ],\n    setWorkflowAccessToRepository: [\n      \"PUT /repos/{owner}/{repo}/actions/permissions/access\"\n    ],\n    updateEnvironmentVariable: [\n      \"PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}\"\n    ],\n    updateOrgVariable: [\"PATCH /orgs/{org}/actions/variables/{name}\"],\n    updateRepoVariable: [\n      \"PATCH /repos/{owner}/{repo}/actions/variables/{name}\"\n    ]\n  },\n  activity: {\n    checkRepoIsStarredByAuthenticatedUser: [\"GET /user/starred/{owner}/{repo}\"],\n    deleteRepoSubscription: [\"DELETE /repos/{owner}/{repo}/subscription\"],\n    deleteThreadSubscription: [\n      \"DELETE /notifications/threads/{thread_id}/subscription\"\n    ],\n    getFeeds: [\"GET /feeds\"],\n    getRepoSubscription: [\"GET /repos/{owner}/{repo}/subscription\"],\n    getThread: [\"GET /notifications/threads/{thread_id}\"],\n    getThreadSubscriptionForAuthenticatedUser: [\n      \"GET /notifications/threads/{thread_id}/subscription\"\n    ],\n    listEventsForAuthenticatedUser: [\"GET /users/{username}/events\"],\n    listNotificationsForAuthenticatedUser: [\"GET /notifications\"],\n    listOrgEventsForAuthenticatedUser: [\n      \"GET /users/{username}/events/orgs/{org}\"\n    ],\n    listPublicEvents: [\"GET /events\"],\n    listPublicEventsForRepoNetwork: [\"GET /networks/{owner}/{repo}/events\"],\n    listPublicEventsForUser: [\"GET /users/{username}/events/public\"],\n    listPublicOrgEvents: [\"GET /orgs/{org}/events\"],\n    listReceivedEventsForUser: [\"GET /users/{username}/received_events\"],\n    listReceivedPublicEventsForUser: [\n      \"GET /users/{username}/received_events/public\"\n    ],\n    listRepoEvents: [\"GET /repos/{owner}/{repo}/events\"],\n    listRepoNotificationsForAuthenticatedUser: [\n      \"GET /repos/{owner}/{repo}/notifications\"\n    ],\n    listReposStarredByAuthenticatedUser: [\"GET /user/starred\"],\n    listReposStarredByUser: [\"GET /users/{username}/starred\"],\n    listReposWatchedByUser: [\"GET /users/{username}/subscriptions\"],\n    listStargazersForRepo: [\"GET /repos/{owner}/{repo}/stargazers\"],\n    listWatchedReposForAuthenticatedUser: [\"GET /user/subscriptions\"],\n    listWatchersForRepo: [\"GET /repos/{owner}/{repo}/subscribers\"],\n    markNotificationsAsRead: [\"PUT /notifications\"],\n    markRepoNotificationsAsRead: [\"PUT /repos/{owner}/{repo}/notifications\"],\n    markThreadAsDone: [\"DELETE /notifications/threads/{thread_id}\"],\n    markThreadAsRead: [\"PATCH /notifications/threads/{thread_id}\"],\n    setRepoSubscription: [\"PUT /repos/{owner}/{repo}/subscription\"],\n    setThreadSubscription: [\n      \"PUT /notifications/threads/{thread_id}/subscription\"\n    ],\n    starRepoForAuthenticatedUser: [\"PUT /user/starred/{owner}/{repo}\"],\n    unstarRepoForAuthenticatedUser: [\"DELETE /user/starred/{owner}/{repo}\"]\n  },\n  apps: {\n    addRepoToInstallation: [\n      \"PUT /user/installations/{installation_id}/repositories/{repository_id}\",\n      {},\n      { renamed: [\"apps\", \"addRepoToInstallationForAuthenticatedUser\"] }\n    ],\n    addRepoToInstallationForAuthenticatedUser: [\n      \"PUT /user/installations/{installation_id}/repositories/{repository_id}\"\n    ],\n    checkToken: [\"POST /applications/{client_id}/token\"],\n    createFromManifest: [\"POST /app-manifests/{code}/conversions\"],\n    createInstallationAccessToken: [\n      \"POST /app/installations/{installation_id}/access_tokens\"\n    ],\n    deleteAuthorization: [\"DELETE /applications/{client_id}/grant\"],\n    deleteInstallation: [\"DELETE /app/installations/{installation_id}\"],\n    deleteToken: [\"DELETE /applications/{client_id}/token\"],\n    getAuthenticated: [\"GET /app\"],\n    getBySlug: [\"GET /apps/{app_slug}\"],\n    getInstallation: [\"GET /app/installations/{installation_id}\"],\n    getOrgInstallation: [\"GET /orgs/{org}/installation\"],\n    getRepoInstallation: [\"GET /repos/{owner}/{repo}/installation\"],\n    getSubscriptionPlanForAccount: [\n      \"GET /marketplace_listing/accounts/{account_id}\"\n    ],\n    getSubscriptionPlanForAccountStubbed: [\n      \"GET /marketplace_listing/stubbed/accounts/{account_id}\"\n    ],\n    getUserInstallation: [\"GET /users/{username}/installation\"],\n    getWebhookConfigForApp: [\"GET /app/hook/config\"],\n    getWebhookDelivery: [\"GET /app/hook/deliveries/{delivery_id}\"],\n    listAccountsForPlan: [\"GET /marketplace_listing/plans/{plan_id}/accounts\"],\n    listAccountsForPlanStubbed: [\n      \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\"\n    ],\n    listInstallationReposForAuthenticatedUser: [\n      \"GET /user/installations/{installation_id}/repositories\"\n    ],\n    listInstallationRequestsForAuthenticatedApp: [\n      \"GET /app/installation-requests\"\n    ],\n    listInstallations: [\"GET /app/installations\"],\n    listInstallationsForAuthenticatedUser: [\"GET /user/installations\"],\n    listPlans: [\"GET /marketplace_listing/plans\"],\n    listPlansStubbed: [\"GET /marketplace_listing/stubbed/plans\"],\n    listReposAccessibleToInstallation: [\"GET /installation/repositories\"],\n    listSubscriptionsForAuthenticatedUser: [\"GET /user/marketplace_purchases\"],\n    listSubscriptionsForAuthenticatedUserStubbed: [\n      \"GET /user/marketplace_purchases/stubbed\"\n    ],\n    listWebhookDeliveries: [\"GET /app/hook/deliveries\"],\n    redeliverWebhookDelivery: [\n      \"POST /app/hook/deliveries/{delivery_id}/attempts\"\n    ],\n    removeRepoFromInstallation: [\n      \"DELETE /user/installations/{installation_id}/repositories/{repository_id}\",\n      {},\n      { renamed: [\"apps\", \"removeRepoFromInstallationForAuthenticatedUser\"] }\n    ],\n    removeRepoFromInstallationForAuthenticatedUser: [\n      \"DELETE /user/installations/{installation_id}/repositories/{repository_id}\"\n    ],\n    resetToken: [\"PATCH /applications/{client_id}/token\"],\n    revokeInstallationAccessToken: [\"DELETE /installation/token\"],\n    scopeToken: [\"POST /applications/{client_id}/token/scoped\"],\n    suspendInstallation: [\"PUT /app/installations/{installation_id}/suspended\"],\n    unsuspendInstallation: [\n      \"DELETE /app/installations/{installation_id}/suspended\"\n    ],\n    updateWebhookConfigForApp: [\"PATCH /app/hook/config\"]\n  },\n  billing: {\n    getGithubActionsBillingOrg: [\"GET /orgs/{org}/settings/billing/actions\"],\n    getGithubActionsBillingUser: [\n      \"GET /users/{username}/settings/billing/actions\"\n    ],\n    getGithubPackagesBillingOrg: [\"GET /orgs/{org}/settings/billing/packages\"],\n    getGithubPackagesBillingUser: [\n      \"GET /users/{username}/settings/billing/packages\"\n    ],\n    getSharedStorageBillingOrg: [\n      \"GET /orgs/{org}/settings/billing/shared-storage\"\n    ],\n    getSharedStorageBillingUser: [\n      \"GET /users/{username}/settings/billing/shared-storage\"\n    ]\n  },\n  checks: {\n    create: [\"POST /repos/{owner}/{repo}/check-runs\"],\n    createSuite: [\"POST /repos/{owner}/{repo}/check-suites\"],\n    get: [\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}\"],\n    getSuite: [\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\"],\n    listAnnotations: [\n      \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\"\n    ],\n    listForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"],\n    listForSuite: [\n      \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\"\n    ],\n    listSuitesForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"],\n    rerequestRun: [\n      \"POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest\"\n    ],\n    rerequestSuite: [\n      \"POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\"\n    ],\n    setSuitesPreferences: [\n      \"PATCH /repos/{owner}/{repo}/check-suites/preferences\"\n    ],\n    update: [\"PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}\"]\n  },\n  codeScanning: {\n    deleteAnalysis: [\n      \"DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}\"\n    ],\n    getAlert: [\n      \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\",\n      {},\n      { renamedParameters: { alert_id: \"alert_number\" } }\n    ],\n    getAnalysis: [\n      \"GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}\"\n    ],\n    getCodeqlDatabase: [\n      \"GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}\"\n    ],\n    getDefaultSetup: [\"GET /repos/{owner}/{repo}/code-scanning/default-setup\"],\n    getSarif: [\"GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}\"],\n    listAlertInstances: [\n      \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\"\n    ],\n    listAlertsForOrg: [\"GET /orgs/{org}/code-scanning/alerts\"],\n    listAlertsForRepo: [\"GET /repos/{owner}/{repo}/code-scanning/alerts\"],\n    listAlertsInstances: [\n      \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\",\n      {},\n      { renamed: [\"codeScanning\", \"listAlertInstances\"] }\n    ],\n    listCodeqlDatabases: [\n      \"GET /repos/{owner}/{repo}/code-scanning/codeql/databases\"\n    ],\n    listRecentAnalyses: [\"GET /repos/{owner}/{repo}/code-scanning/analyses\"],\n    updateAlert: [\n      \"PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\"\n    ],\n    updateDefaultSetup: [\n      \"PATCH /repos/{owner}/{repo}/code-scanning/default-setup\"\n    ],\n    uploadSarif: [\"POST /repos/{owner}/{repo}/code-scanning/sarifs\"]\n  },\n  codesOfConduct: {\n    getAllCodesOfConduct: [\"GET /codes_of_conduct\"],\n    getConductCode: [\"GET /codes_of_conduct/{key}\"]\n  },\n  codespaces: {\n    addRepositoryForSecretForAuthenticatedUser: [\n      \"PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    addSelectedRepoToOrgSecret: [\n      \"PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    checkPermissionsForDevcontainer: [\n      \"GET /repos/{owner}/{repo}/codespaces/permissions_check\"\n    ],\n    codespaceMachinesForAuthenticatedUser: [\n      \"GET /user/codespaces/{codespace_name}/machines\"\n    ],\n    createForAuthenticatedUser: [\"POST /user/codespaces\"],\n    createOrUpdateOrgSecret: [\n      \"PUT /orgs/{org}/codespaces/secrets/{secret_name}\"\n    ],\n    createOrUpdateRepoSecret: [\n      \"PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}\"\n    ],\n    createOrUpdateSecretForAuthenticatedUser: [\n      \"PUT /user/codespaces/secrets/{secret_name}\"\n    ],\n    createWithPrForAuthenticatedUser: [\n      \"POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces\"\n    ],\n    createWithRepoForAuthenticatedUser: [\n      \"POST /repos/{owner}/{repo}/codespaces\"\n    ],\n    deleteForAuthenticatedUser: [\"DELETE /user/codespaces/{codespace_name}\"],\n    deleteFromOrganization: [\n      \"DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}\"\n    ],\n    deleteOrgSecret: [\"DELETE /orgs/{org}/codespaces/secrets/{secret_name}\"],\n    deleteRepoSecret: [\n      \"DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}\"\n    ],\n    deleteSecretForAuthenticatedUser: [\n      \"DELETE /user/codespaces/secrets/{secret_name}\"\n    ],\n    exportForAuthenticatedUser: [\n      \"POST /user/codespaces/{codespace_name}/exports\"\n    ],\n    getCodespacesForUserInOrg: [\n      \"GET /orgs/{org}/members/{username}/codespaces\"\n    ],\n    getExportDetailsForAuthenticatedUser: [\n      \"GET /user/codespaces/{codespace_name}/exports/{export_id}\"\n    ],\n    getForAuthenticatedUser: [\"GET /user/codespaces/{codespace_name}\"],\n    getOrgPublicKey: [\"GET /orgs/{org}/codespaces/secrets/public-key\"],\n    getOrgSecret: [\"GET /orgs/{org}/codespaces/secrets/{secret_name}\"],\n    getPublicKeyForAuthenticatedUser: [\n      \"GET /user/codespaces/secrets/public-key\"\n    ],\n    getRepoPublicKey: [\n      \"GET /repos/{owner}/{repo}/codespaces/secrets/public-key\"\n    ],\n    getRepoSecret: [\n      \"GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}\"\n    ],\n    getSecretForAuthenticatedUser: [\n      \"GET /user/codespaces/secrets/{secret_name}\"\n    ],\n    listDevcontainersInRepositoryForAuthenticatedUser: [\n      \"GET /repos/{owner}/{repo}/codespaces/devcontainers\"\n    ],\n    listForAuthenticatedUser: [\"GET /user/codespaces\"],\n    listInOrganization: [\n      \"GET /orgs/{org}/codespaces\",\n      {},\n      { renamedParameters: { org_id: \"org\" } }\n    ],\n    listInRepositoryForAuthenticatedUser: [\n      \"GET /repos/{owner}/{repo}/codespaces\"\n    ],\n    listOrgSecrets: [\"GET /orgs/{org}/codespaces/secrets\"],\n    listRepoSecrets: [\"GET /repos/{owner}/{repo}/codespaces/secrets\"],\n    listRepositoriesForSecretForAuthenticatedUser: [\n      \"GET /user/codespaces/secrets/{secret_name}/repositories\"\n    ],\n    listSecretsForAuthenticatedUser: [\"GET /user/codespaces/secrets\"],\n    listSelectedReposForOrgSecret: [\n      \"GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories\"\n    ],\n    preFlightWithRepoForAuthenticatedUser: [\n      \"GET /repos/{owner}/{repo}/codespaces/new\"\n    ],\n    publishForAuthenticatedUser: [\n      \"POST /user/codespaces/{codespace_name}/publish\"\n    ],\n    removeRepositoryForSecretForAuthenticatedUser: [\n      \"DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    removeSelectedRepoFromOrgSecret: [\n      \"DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    repoMachinesForAuthenticatedUser: [\n      \"GET /repos/{owner}/{repo}/codespaces/machines\"\n    ],\n    setRepositoriesForSecretForAuthenticatedUser: [\n      \"PUT /user/codespaces/secrets/{secret_name}/repositories\"\n    ],\n    setSelectedReposForOrgSecret: [\n      \"PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories\"\n    ],\n    startForAuthenticatedUser: [\"POST /user/codespaces/{codespace_name}/start\"],\n    stopForAuthenticatedUser: [\"POST /user/codespaces/{codespace_name}/stop\"],\n    stopInOrganization: [\n      \"POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop\"\n    ],\n    updateForAuthenticatedUser: [\"PATCH /user/codespaces/{codespace_name}\"]\n  },\n  copilot: {\n    addCopilotSeatsForTeams: [\n      \"POST /orgs/{org}/copilot/billing/selected_teams\"\n    ],\n    addCopilotSeatsForUsers: [\n      \"POST /orgs/{org}/copilot/billing/selected_users\"\n    ],\n    cancelCopilotSeatAssignmentForTeams: [\n      \"DELETE /orgs/{org}/copilot/billing/selected_teams\"\n    ],\n    cancelCopilotSeatAssignmentForUsers: [\n      \"DELETE /orgs/{org}/copilot/billing/selected_users\"\n    ],\n    getCopilotOrganizationDetails: [\"GET /orgs/{org}/copilot/billing\"],\n    getCopilotSeatDetailsForUser: [\n      \"GET /orgs/{org}/members/{username}/copilot\"\n    ],\n    listCopilotSeats: [\"GET /orgs/{org}/copilot/billing/seats\"]\n  },\n  dependabot: {\n    addSelectedRepoToOrgSecret: [\n      \"PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    createOrUpdateOrgSecret: [\n      \"PUT /orgs/{org}/dependabot/secrets/{secret_name}\"\n    ],\n    createOrUpdateRepoSecret: [\n      \"PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}\"\n    ],\n    deleteOrgSecret: [\"DELETE /orgs/{org}/dependabot/secrets/{secret_name}\"],\n    deleteRepoSecret: [\n      \"DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}\"\n    ],\n    getAlert: [\"GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}\"],\n    getOrgPublicKey: [\"GET /orgs/{org}/dependabot/secrets/public-key\"],\n    getOrgSecret: [\"GET /orgs/{org}/dependabot/secrets/{secret_name}\"],\n    getRepoPublicKey: [\n      \"GET /repos/{owner}/{repo}/dependabot/secrets/public-key\"\n    ],\n    getRepoSecret: [\n      \"GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}\"\n    ],\n    listAlertsForEnterprise: [\n      \"GET /enterprises/{enterprise}/dependabot/alerts\"\n    ],\n    listAlertsForOrg: [\"GET /orgs/{org}/dependabot/alerts\"],\n    listAlertsForRepo: [\"GET /repos/{owner}/{repo}/dependabot/alerts\"],\n    listOrgSecrets: [\"GET /orgs/{org}/dependabot/secrets\"],\n    listRepoSecrets: [\"GET /repos/{owner}/{repo}/dependabot/secrets\"],\n    listSelectedReposForOrgSecret: [\n      \"GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories\"\n    ],\n    removeSelectedRepoFromOrgSecret: [\n      \"DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    setSelectedReposForOrgSecret: [\n      \"PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories\"\n    ],\n    updateAlert: [\n      \"PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}\"\n    ]\n  },\n  dependencyGraph: {\n    createRepositorySnapshot: [\n      \"POST /repos/{owner}/{repo}/dependency-graph/snapshots\"\n    ],\n    diffRange: [\n      \"GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}\"\n    ],\n    exportSbom: [\"GET /repos/{owner}/{repo}/dependency-graph/sbom\"]\n  },\n  emojis: { get: [\"GET /emojis\"] },\n  gists: {\n    checkIsStarred: [\"GET /gists/{gist_id}/star\"],\n    create: [\"POST /gists\"],\n    createComment: [\"POST /gists/{gist_id}/comments\"],\n    delete: [\"DELETE /gists/{gist_id}\"],\n    deleteComment: [\"DELETE /gists/{gist_id}/comments/{comment_id}\"],\n    fork: [\"POST /gists/{gist_id}/forks\"],\n    get: [\"GET /gists/{gist_id}\"],\n    getComment: [\"GET /gists/{gist_id}/comments/{comment_id}\"],\n    getRevision: [\"GET /gists/{gist_id}/{sha}\"],\n    list: [\"GET /gists\"],\n    listComments: [\"GET /gists/{gist_id}/comments\"],\n    listCommits: [\"GET /gists/{gist_id}/commits\"],\n    listForUser: [\"GET /users/{username}/gists\"],\n    listForks: [\"GET /gists/{gist_id}/forks\"],\n    listPublic: [\"GET /gists/public\"],\n    listStarred: [\"GET /gists/starred\"],\n    star: [\"PUT /gists/{gist_id}/star\"],\n    unstar: [\"DELETE /gists/{gist_id}/star\"],\n    update: [\"PATCH /gists/{gist_id}\"],\n    updateComment: [\"PATCH /gists/{gist_id}/comments/{comment_id}\"]\n  },\n  git: {\n    createBlob: [\"POST /repos/{owner}/{repo}/git/blobs\"],\n    createCommit: [\"POST /repos/{owner}/{repo}/git/commits\"],\n    createRef: [\"POST /repos/{owner}/{repo}/git/refs\"],\n    createTag: [\"POST /repos/{owner}/{repo}/git/tags\"],\n    createTree: [\"POST /repos/{owner}/{repo}/git/trees\"],\n    deleteRef: [\"DELETE /repos/{owner}/{repo}/git/refs/{ref}\"],\n    getBlob: [\"GET /repos/{owner}/{repo}/git/blobs/{file_sha}\"],\n    getCommit: [\"GET /repos/{owner}/{repo}/git/commits/{commit_sha}\"],\n    getRef: [\"GET /repos/{owner}/{repo}/git/ref/{ref}\"],\n    getTag: [\"GET /repos/{owner}/{repo}/git/tags/{tag_sha}\"],\n    getTree: [\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\"],\n    listMatchingRefs: [\"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"],\n    updateRef: [\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\"]\n  },\n  gitignore: {\n    getAllTemplates: [\"GET /gitignore/templates\"],\n    getTemplate: [\"GET /gitignore/templates/{name}\"]\n  },\n  interactions: {\n    getRestrictionsForAuthenticatedUser: [\"GET /user/interaction-limits\"],\n    getRestrictionsForOrg: [\"GET /orgs/{org}/interaction-limits\"],\n    getRestrictionsForRepo: [\"GET /repos/{owner}/{repo}/interaction-limits\"],\n    getRestrictionsForYourPublicRepos: [\n      \"GET /user/interaction-limits\",\n      {},\n      { renamed: [\"interactions\", \"getRestrictionsForAuthenticatedUser\"] }\n    ],\n    removeRestrictionsForAuthenticatedUser: [\"DELETE /user/interaction-limits\"],\n    removeRestrictionsForOrg: [\"DELETE /orgs/{org}/interaction-limits\"],\n    removeRestrictionsForRepo: [\n      \"DELETE /repos/{owner}/{repo}/interaction-limits\"\n    ],\n    removeRestrictionsForYourPublicRepos: [\n      \"DELETE /user/interaction-limits\",\n      {},\n      { renamed: [\"interactions\", \"removeRestrictionsForAuthenticatedUser\"] }\n    ],\n    setRestrictionsForAuthenticatedUser: [\"PUT /user/interaction-limits\"],\n    setRestrictionsForOrg: [\"PUT /orgs/{org}/interaction-limits\"],\n    setRestrictionsForRepo: [\"PUT /repos/{owner}/{repo}/interaction-limits\"],\n    setRestrictionsForYourPublicRepos: [\n      \"PUT /user/interaction-limits\",\n      {},\n      { renamed: [\"interactions\", \"setRestrictionsForAuthenticatedUser\"] }\n    ]\n  },\n  issues: {\n    addAssignees: [\n      \"POST /repos/{owner}/{repo}/issues/{issue_number}/assignees\"\n    ],\n    addLabels: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    checkUserCanBeAssigned: [\"GET /repos/{owner}/{repo}/assignees/{assignee}\"],\n    checkUserCanBeAssignedToIssue: [\n      \"GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}\"\n    ],\n    create: [\"POST /repos/{owner}/{repo}/issues\"],\n    createComment: [\n      \"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\"\n    ],\n    createLabel: [\"POST /repos/{owner}/{repo}/labels\"],\n    createMilestone: [\"POST /repos/{owner}/{repo}/milestones\"],\n    deleteComment: [\n      \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}\"\n    ],\n    deleteLabel: [\"DELETE /repos/{owner}/{repo}/labels/{name}\"],\n    deleteMilestone: [\n      \"DELETE /repos/{owner}/{repo}/milestones/{milestone_number}\"\n    ],\n    get: [\"GET /repos/{owner}/{repo}/issues/{issue_number}\"],\n    getComment: [\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n    getEvent: [\"GET /repos/{owner}/{repo}/issues/events/{event_id}\"],\n    getLabel: [\"GET /repos/{owner}/{repo}/labels/{name}\"],\n    getMilestone: [\"GET /repos/{owner}/{repo}/milestones/{milestone_number}\"],\n    list: [\"GET /issues\"],\n    listAssignees: [\"GET /repos/{owner}/{repo}/assignees\"],\n    listComments: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"],\n    listCommentsForRepo: [\"GET /repos/{owner}/{repo}/issues/comments\"],\n    listEvents: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"],\n    listEventsForRepo: [\"GET /repos/{owner}/{repo}/issues/events\"],\n    listEventsForTimeline: [\n      \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\"\n    ],\n    listForAuthenticatedUser: [\"GET /user/issues\"],\n    listForOrg: [\"GET /orgs/{org}/issues\"],\n    listForRepo: [\"GET /repos/{owner}/{repo}/issues\"],\n    listLabelsForMilestone: [\n      \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\"\n    ],\n    listLabelsForRepo: [\"GET /repos/{owner}/{repo}/labels\"],\n    listLabelsOnIssue: [\n      \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\"\n    ],\n    listMilestones: [\"GET /repos/{owner}/{repo}/milestones\"],\n    lock: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n    removeAllLabels: [\n      \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels\"\n    ],\n    removeAssignees: [\n      \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees\"\n    ],\n    removeLabel: [\n      \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\"\n    ],\n    setLabels: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    unlock: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n    update: [\"PATCH /repos/{owner}/{repo}/issues/{issue_number}\"],\n    updateComment: [\"PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n    updateLabel: [\"PATCH /repos/{owner}/{repo}/labels/{name}\"],\n    updateMilestone: [\n      \"PATCH /repos/{owner}/{repo}/milestones/{milestone_number}\"\n    ]\n  },\n  licenses: {\n    get: [\"GET /licenses/{license}\"],\n    getAllCommonlyUsed: [\"GET /licenses\"],\n    getForRepo: [\"GET /repos/{owner}/{repo}/license\"]\n  },\n  markdown: {\n    render: [\"POST /markdown\"],\n    renderRaw: [\n      \"POST /markdown/raw\",\n      { headers: { \"content-type\": \"text/plain; charset=utf-8\" } }\n    ]\n  },\n  meta: {\n    get: [\"GET /meta\"],\n    getAllVersions: [\"GET /versions\"],\n    getOctocat: [\"GET /octocat\"],\n    getZen: [\"GET /zen\"],\n    root: [\"GET /\"]\n  },\n  migrations: {\n    cancelImport: [\n      \"DELETE /repos/{owner}/{repo}/import\",\n      {},\n      {\n        deprecated: \"octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import\"\n      }\n    ],\n    deleteArchiveForAuthenticatedUser: [\n      \"DELETE /user/migrations/{migration_id}/archive\"\n    ],\n    deleteArchiveForOrg: [\n      \"DELETE /orgs/{org}/migrations/{migration_id}/archive\"\n    ],\n    downloadArchiveForOrg: [\n      \"GET /orgs/{org}/migrations/{migration_id}/archive\"\n    ],\n    getArchiveForAuthenticatedUser: [\n      \"GET /user/migrations/{migration_id}/archive\"\n    ],\n    getCommitAuthors: [\n      \"GET /repos/{owner}/{repo}/import/authors\",\n      {},\n      {\n        deprecated: \"octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors\"\n      }\n    ],\n    getImportStatus: [\n      \"GET /repos/{owner}/{repo}/import\",\n      {},\n      {\n        deprecated: \"octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status\"\n      }\n    ],\n    getLargeFiles: [\n      \"GET /repos/{owner}/{repo}/import/large_files\",\n      {},\n      {\n        deprecated: \"octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files\"\n      }\n    ],\n    getStatusForAuthenticatedUser: [\"GET /user/migrations/{migration_id}\"],\n    getStatusForOrg: [\"GET /orgs/{org}/migrations/{migration_id}\"],\n    listForAuthenticatedUser: [\"GET /user/migrations\"],\n    listForOrg: [\"GET /orgs/{org}/migrations\"],\n    listReposForAuthenticatedUser: [\n      \"GET /user/migrations/{migration_id}/repositories\"\n    ],\n    listReposForOrg: [\"GET /orgs/{org}/migrations/{migration_id}/repositories\"],\n    listReposForUser: [\n      \"GET /user/migrations/{migration_id}/repositories\",\n      {},\n      { renamed: [\"migrations\", \"listReposForAuthenticatedUser\"] }\n    ],\n    mapCommitAuthor: [\n      \"PATCH /repos/{owner}/{repo}/import/authors/{author_id}\",\n      {},\n      {\n        deprecated: \"octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author\"\n      }\n    ],\n    setLfsPreference: [\n      \"PATCH /repos/{owner}/{repo}/import/lfs\",\n      {},\n      {\n        deprecated: \"octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference\"\n      }\n    ],\n    startForAuthenticatedUser: [\"POST /user/migrations\"],\n    startForOrg: [\"POST /orgs/{org}/migrations\"],\n    startImport: [\n      \"PUT /repos/{owner}/{repo}/import\",\n      {},\n      {\n        deprecated: \"octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import\"\n      }\n    ],\n    unlockRepoForAuthenticatedUser: [\n      \"DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\"\n    ],\n    unlockRepoForOrg: [\n      \"DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\"\n    ],\n    updateImport: [\n      \"PATCH /repos/{owner}/{repo}/import\",\n      {},\n      {\n        deprecated: \"octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import\"\n      }\n    ]\n  },\n  oidc: {\n    getOidcCustomSubTemplateForOrg: [\n      \"GET /orgs/{org}/actions/oidc/customization/sub\"\n    ],\n    updateOidcCustomSubTemplateForOrg: [\n      \"PUT /orgs/{org}/actions/oidc/customization/sub\"\n    ]\n  },\n  orgs: {\n    addSecurityManagerTeam: [\n      \"PUT /orgs/{org}/security-managers/teams/{team_slug}\"\n    ],\n    assignTeamToOrgRole: [\n      \"PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}\"\n    ],\n    assignUserToOrgRole: [\n      \"PUT /orgs/{org}/organization-roles/users/{username}/{role_id}\"\n    ],\n    blockUser: [\"PUT /orgs/{org}/blocks/{username}\"],\n    cancelInvitation: [\"DELETE /orgs/{org}/invitations/{invitation_id}\"],\n    checkBlockedUser: [\"GET /orgs/{org}/blocks/{username}\"],\n    checkMembershipForUser: [\"GET /orgs/{org}/members/{username}\"],\n    checkPublicMembershipForUser: [\"GET /orgs/{org}/public_members/{username}\"],\n    convertMemberToOutsideCollaborator: [\n      \"PUT /orgs/{org}/outside_collaborators/{username}\"\n    ],\n    createCustomOrganizationRole: [\"POST /orgs/{org}/organization-roles\"],\n    createInvitation: [\"POST /orgs/{org}/invitations\"],\n    createOrUpdateCustomProperties: [\"PATCH /orgs/{org}/properties/schema\"],\n    createOrUpdateCustomPropertiesValuesForRepos: [\n      \"PATCH /orgs/{org}/properties/values\"\n    ],\n    createOrUpdateCustomProperty: [\n      \"PUT /orgs/{org}/properties/schema/{custom_property_name}\"\n    ],\n    createWebhook: [\"POST /orgs/{org}/hooks\"],\n    delete: [\"DELETE /orgs/{org}\"],\n    deleteCustomOrganizationRole: [\n      \"DELETE /orgs/{org}/organization-roles/{role_id}\"\n    ],\n    deleteWebhook: [\"DELETE /orgs/{org}/hooks/{hook_id}\"],\n    enableOrDisableSecurityProductOnAllOrgRepos: [\n      \"POST /orgs/{org}/{security_product}/{enablement}\"\n    ],\n    get: [\"GET /orgs/{org}\"],\n    getAllCustomProperties: [\"GET /orgs/{org}/properties/schema\"],\n    getCustomProperty: [\n      \"GET /orgs/{org}/properties/schema/{custom_property_name}\"\n    ],\n    getMembershipForAuthenticatedUser: [\"GET /user/memberships/orgs/{org}\"],\n    getMembershipForUser: [\"GET /orgs/{org}/memberships/{username}\"],\n    getOrgRole: [\"GET /orgs/{org}/organization-roles/{role_id}\"],\n    getWebhook: [\"GET /orgs/{org}/hooks/{hook_id}\"],\n    getWebhookConfigForOrg: [\"GET /orgs/{org}/hooks/{hook_id}/config\"],\n    getWebhookDelivery: [\n      \"GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}\"\n    ],\n    list: [\"GET /organizations\"],\n    listAppInstallations: [\"GET /orgs/{org}/installations\"],\n    listBlockedUsers: [\"GET /orgs/{org}/blocks\"],\n    listCustomPropertiesValuesForRepos: [\"GET /orgs/{org}/properties/values\"],\n    listFailedInvitations: [\"GET /orgs/{org}/failed_invitations\"],\n    listForAuthenticatedUser: [\"GET /user/orgs\"],\n    listForUser: [\"GET /users/{username}/orgs\"],\n    listInvitationTeams: [\"GET /orgs/{org}/invitations/{invitation_id}/teams\"],\n    listMembers: [\"GET /orgs/{org}/members\"],\n    listMembershipsForAuthenticatedUser: [\"GET /user/memberships/orgs\"],\n    listOrgRoleTeams: [\"GET /orgs/{org}/organization-roles/{role_id}/teams\"],\n    listOrgRoleUsers: [\"GET /orgs/{org}/organization-roles/{role_id}/users\"],\n    listOrgRoles: [\"GET /orgs/{org}/organization-roles\"],\n    listOrganizationFineGrainedPermissions: [\n      \"GET /orgs/{org}/organization-fine-grained-permissions\"\n    ],\n    listOutsideCollaborators: [\"GET /orgs/{org}/outside_collaborators\"],\n    listPatGrantRepositories: [\n      \"GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories\"\n    ],\n    listPatGrantRequestRepositories: [\n      \"GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories\"\n    ],\n    listPatGrantRequests: [\"GET /orgs/{org}/personal-access-token-requests\"],\n    listPatGrants: [\"GET /orgs/{org}/personal-access-tokens\"],\n    listPendingInvitations: [\"GET /orgs/{org}/invitations\"],\n    listPublicMembers: [\"GET /orgs/{org}/public_members\"],\n    listSecurityManagerTeams: [\"GET /orgs/{org}/security-managers\"],\n    listWebhookDeliveries: [\"GET /orgs/{org}/hooks/{hook_id}/deliveries\"],\n    listWebhooks: [\"GET /orgs/{org}/hooks\"],\n    patchCustomOrganizationRole: [\n      \"PATCH /orgs/{org}/organization-roles/{role_id}\"\n    ],\n    pingWebhook: [\"POST /orgs/{org}/hooks/{hook_id}/pings\"],\n    redeliverWebhookDelivery: [\n      \"POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts\"\n    ],\n    removeCustomProperty: [\n      \"DELETE /orgs/{org}/properties/schema/{custom_property_name}\"\n    ],\n    removeMember: [\"DELETE /orgs/{org}/members/{username}\"],\n    removeMembershipForUser: [\"DELETE /orgs/{org}/memberships/{username}\"],\n    removeOutsideCollaborator: [\n      \"DELETE /orgs/{org}/outside_collaborators/{username}\"\n    ],\n    removePublicMembershipForAuthenticatedUser: [\n      \"DELETE /orgs/{org}/public_members/{username}\"\n    ],\n    removeSecurityManagerTeam: [\n      \"DELETE /orgs/{org}/security-managers/teams/{team_slug}\"\n    ],\n    reviewPatGrantRequest: [\n      \"POST /orgs/{org}/personal-access-token-requests/{pat_request_id}\"\n    ],\n    reviewPatGrantRequestsInBulk: [\n      \"POST /orgs/{org}/personal-access-token-requests\"\n    ],\n    revokeAllOrgRolesTeam: [\n      \"DELETE /orgs/{org}/organization-roles/teams/{team_slug}\"\n    ],\n    revokeAllOrgRolesUser: [\n      \"DELETE /orgs/{org}/organization-roles/users/{username}\"\n    ],\n    revokeOrgRoleTeam: [\n      \"DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}\"\n    ],\n    revokeOrgRoleUser: [\n      \"DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}\"\n    ],\n    setMembershipForUser: [\"PUT /orgs/{org}/memberships/{username}\"],\n    setPublicMembershipForAuthenticatedUser: [\n      \"PUT /orgs/{org}/public_members/{username}\"\n    ],\n    unblockUser: [\"DELETE /orgs/{org}/blocks/{username}\"],\n    update: [\"PATCH /orgs/{org}\"],\n    updateMembershipForAuthenticatedUser: [\n      \"PATCH /user/memberships/orgs/{org}\"\n    ],\n    updatePatAccess: [\"POST /orgs/{org}/personal-access-tokens/{pat_id}\"],\n    updatePatAccesses: [\"POST /orgs/{org}/personal-access-tokens\"],\n    updateWebhook: [\"PATCH /orgs/{org}/hooks/{hook_id}\"],\n    updateWebhookConfigForOrg: [\"PATCH /orgs/{org}/hooks/{hook_id}/config\"]\n  },\n  packages: {\n    deletePackageForAuthenticatedUser: [\n      \"DELETE /user/packages/{package_type}/{package_name}\"\n    ],\n    deletePackageForOrg: [\n      \"DELETE /orgs/{org}/packages/{package_type}/{package_name}\"\n    ],\n    deletePackageForUser: [\n      \"DELETE /users/{username}/packages/{package_type}/{package_name}\"\n    ],\n    deletePackageVersionForAuthenticatedUser: [\n      \"DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    deletePackageVersionForOrg: [\n      \"DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    deletePackageVersionForUser: [\n      \"DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    getAllPackageVersionsForAPackageOwnedByAnOrg: [\n      \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\",\n      {},\n      { renamed: [\"packages\", \"getAllPackageVersionsForPackageOwnedByOrg\"] }\n    ],\n    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [\n      \"GET /user/packages/{package_type}/{package_name}/versions\",\n      {},\n      {\n        renamed: [\n          \"packages\",\n          \"getAllPackageVersionsForPackageOwnedByAuthenticatedUser\"\n        ]\n      }\n    ],\n    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [\n      \"GET /user/packages/{package_type}/{package_name}/versions\"\n    ],\n    getAllPackageVersionsForPackageOwnedByOrg: [\n      \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\"\n    ],\n    getAllPackageVersionsForPackageOwnedByUser: [\n      \"GET /users/{username}/packages/{package_type}/{package_name}/versions\"\n    ],\n    getPackageForAuthenticatedUser: [\n      \"GET /user/packages/{package_type}/{package_name}\"\n    ],\n    getPackageForOrganization: [\n      \"GET /orgs/{org}/packages/{package_type}/{package_name}\"\n    ],\n    getPackageForUser: [\n      \"GET /users/{username}/packages/{package_type}/{package_name}\"\n    ],\n    getPackageVersionForAuthenticatedUser: [\n      \"GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    getPackageVersionForOrganization: [\n      \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    getPackageVersionForUser: [\n      \"GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    listDockerMigrationConflictingPackagesForAuthenticatedUser: [\n      \"GET /user/docker/conflicts\"\n    ],\n    listDockerMigrationConflictingPackagesForOrganization: [\n      \"GET /orgs/{org}/docker/conflicts\"\n    ],\n    listDockerMigrationConflictingPackagesForUser: [\n      \"GET /users/{username}/docker/conflicts\"\n    ],\n    listPackagesForAuthenticatedUser: [\"GET /user/packages\"],\n    listPackagesForOrganization: [\"GET /orgs/{org}/packages\"],\n    listPackagesForUser: [\"GET /users/{username}/packages\"],\n    restorePackageForAuthenticatedUser: [\n      \"POST /user/packages/{package_type}/{package_name}/restore{?token}\"\n    ],\n    restorePackageForOrg: [\n      \"POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}\"\n    ],\n    restorePackageForUser: [\n      \"POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}\"\n    ],\n    restorePackageVersionForAuthenticatedUser: [\n      \"POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"\n    ],\n    restorePackageVersionForOrg: [\n      \"POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"\n    ],\n    restorePackageVersionForUser: [\n      \"POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"\n    ]\n  },\n  projects: {\n    addCollaborator: [\"PUT /projects/{project_id}/collaborators/{username}\"],\n    createCard: [\"POST /projects/columns/{column_id}/cards\"],\n    createColumn: [\"POST /projects/{project_id}/columns\"],\n    createForAuthenticatedUser: [\"POST /user/projects\"],\n    createForOrg: [\"POST /orgs/{org}/projects\"],\n    createForRepo: [\"POST /repos/{owner}/{repo}/projects\"],\n    delete: [\"DELETE /projects/{project_id}\"],\n    deleteCard: [\"DELETE /projects/columns/cards/{card_id}\"],\n    deleteColumn: [\"DELETE /projects/columns/{column_id}\"],\n    get: [\"GET /projects/{project_id}\"],\n    getCard: [\"GET /projects/columns/cards/{card_id}\"],\n    getColumn: [\"GET /projects/columns/{column_id}\"],\n    getPermissionForUser: [\n      \"GET /projects/{project_id}/collaborators/{username}/permission\"\n    ],\n    listCards: [\"GET /projects/columns/{column_id}/cards\"],\n    listCollaborators: [\"GET /projects/{project_id}/collaborators\"],\n    listColumns: [\"GET /projects/{project_id}/columns\"],\n    listForOrg: [\"GET /orgs/{org}/projects\"],\n    listForRepo: [\"GET /repos/{owner}/{repo}/projects\"],\n    listForUser: [\"GET /users/{username}/projects\"],\n    moveCard: [\"POST /projects/columns/cards/{card_id}/moves\"],\n    moveColumn: [\"POST /projects/columns/{column_id}/moves\"],\n    removeCollaborator: [\n      \"DELETE /projects/{project_id}/collaborators/{username}\"\n    ],\n    update: [\"PATCH /projects/{project_id}\"],\n    updateCard: [\"PATCH /projects/columns/cards/{card_id}\"],\n    updateColumn: [\"PATCH /projects/columns/{column_id}\"]\n  },\n  pulls: {\n    checkIfMerged: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n    create: [\"POST /repos/{owner}/{repo}/pulls\"],\n    createReplyForReviewComment: [\n      \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\"\n    ],\n    createReview: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n    createReviewComment: [\n      \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments\"\n    ],\n    deletePendingReview: [\n      \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"\n    ],\n    deleteReviewComment: [\n      \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}\"\n    ],\n    dismissReview: [\n      \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\"\n    ],\n    get: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}\"],\n    getReview: [\n      \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"\n    ],\n    getReviewComment: [\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}\"],\n    list: [\"GET /repos/{owner}/{repo}/pulls\"],\n    listCommentsForReview: [\n      \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\"\n    ],\n    listCommits: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"],\n    listFiles: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"],\n    listRequestedReviewers: [\n      \"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"\n    ],\n    listReviewComments: [\n      \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\"\n    ],\n    listReviewCommentsForRepo: [\"GET /repos/{owner}/{repo}/pulls/comments\"],\n    listReviews: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n    merge: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n    removeRequestedReviewers: [\n      \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"\n    ],\n    requestReviewers: [\n      \"POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"\n    ],\n    submitReview: [\n      \"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\"\n    ],\n    update: [\"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\"],\n    updateBranch: [\n      \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch\"\n    ],\n    updateReview: [\n      \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"\n    ],\n    updateReviewComment: [\n      \"PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}\"\n    ]\n  },\n  rateLimit: { get: [\"GET /rate_limit\"] },\n  reactions: {\n    createForCommitComment: [\n      \"POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\"\n    ],\n    createForIssue: [\n      \"POST /repos/{owner}/{repo}/issues/{issue_number}/reactions\"\n    ],\n    createForIssueComment: [\n      \"POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"\n    ],\n    createForPullRequestReviewComment: [\n      \"POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"\n    ],\n    createForRelease: [\n      \"POST /repos/{owner}/{repo}/releases/{release_id}/reactions\"\n    ],\n    createForTeamDiscussionCommentInOrg: [\n      \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"\n    ],\n    createForTeamDiscussionInOrg: [\n      \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"\n    ],\n    deleteForCommitComment: [\n      \"DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\"\n    ],\n    deleteForIssue: [\n      \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\"\n    ],\n    deleteForIssueComment: [\n      \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\"\n    ],\n    deleteForPullRequestComment: [\n      \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\"\n    ],\n    deleteForRelease: [\n      \"DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}\"\n    ],\n    deleteForTeamDiscussion: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\"\n    ],\n    deleteForTeamDiscussionComment: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\"\n    ],\n    listForCommitComment: [\n      \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\"\n    ],\n    listForIssue: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\"],\n    listForIssueComment: [\n      \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"\n    ],\n    listForPullRequestReviewComment: [\n      \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"\n    ],\n    listForRelease: [\n      \"GET /repos/{owner}/{repo}/releases/{release_id}/reactions\"\n    ],\n    listForTeamDiscussionCommentInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"\n    ],\n    listForTeamDiscussionInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"\n    ]\n  },\n  repos: {\n    acceptInvitation: [\n      \"PATCH /user/repository_invitations/{invitation_id}\",\n      {},\n      { renamed: [\"repos\", \"acceptInvitationForAuthenticatedUser\"] }\n    ],\n    acceptInvitationForAuthenticatedUser: [\n      \"PATCH /user/repository_invitations/{invitation_id}\"\n    ],\n    addAppAccessRestrictions: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n      {},\n      { mapToData: \"apps\" }\n    ],\n    addCollaborator: [\"PUT /repos/{owner}/{repo}/collaborators/{username}\"],\n    addStatusCheckContexts: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n      {},\n      { mapToData: \"contexts\" }\n    ],\n    addTeamAccessRestrictions: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n      {},\n      { mapToData: \"teams\" }\n    ],\n    addUserAccessRestrictions: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n      {},\n      { mapToData: \"users\" }\n    ],\n    cancelPagesDeployment: [\n      \"POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel\"\n    ],\n    checkAutomatedSecurityFixes: [\n      \"GET /repos/{owner}/{repo}/automated-security-fixes\"\n    ],\n    checkCollaborator: [\"GET /repos/{owner}/{repo}/collaborators/{username}\"],\n    checkVulnerabilityAlerts: [\n      \"GET /repos/{owner}/{repo}/vulnerability-alerts\"\n    ],\n    codeownersErrors: [\"GET /repos/{owner}/{repo}/codeowners/errors\"],\n    compareCommits: [\"GET /repos/{owner}/{repo}/compare/{base}...{head}\"],\n    compareCommitsWithBasehead: [\n      \"GET /repos/{owner}/{repo}/compare/{basehead}\"\n    ],\n    createAutolink: [\"POST /repos/{owner}/{repo}/autolinks\"],\n    createCommitComment: [\n      \"POST /repos/{owner}/{repo}/commits/{commit_sha}/comments\"\n    ],\n    createCommitSignatureProtection: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"\n    ],\n    createCommitStatus: [\"POST /repos/{owner}/{repo}/statuses/{sha}\"],\n    createDeployKey: [\"POST /repos/{owner}/{repo}/keys\"],\n    createDeployment: [\"POST /repos/{owner}/{repo}/deployments\"],\n    createDeploymentBranchPolicy: [\n      \"POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies\"\n    ],\n    createDeploymentProtectionRule: [\n      \"POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules\"\n    ],\n    createDeploymentStatus: [\n      \"POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"\n    ],\n    createDispatchEvent: [\"POST /repos/{owner}/{repo}/dispatches\"],\n    createForAuthenticatedUser: [\"POST /user/repos\"],\n    createFork: [\"POST /repos/{owner}/{repo}/forks\"],\n    createInOrg: [\"POST /orgs/{org}/repos\"],\n    createOrUpdateCustomPropertiesValues: [\n      \"PATCH /repos/{owner}/{repo}/properties/values\"\n    ],\n    createOrUpdateEnvironment: [\n      \"PUT /repos/{owner}/{repo}/environments/{environment_name}\"\n    ],\n    createOrUpdateFileContents: [\"PUT /repos/{owner}/{repo}/contents/{path}\"],\n    createOrgRuleset: [\"POST /orgs/{org}/rulesets\"],\n    createPagesDeployment: [\"POST /repos/{owner}/{repo}/pages/deployments\"],\n    createPagesSite: [\"POST /repos/{owner}/{repo}/pages\"],\n    createRelease: [\"POST /repos/{owner}/{repo}/releases\"],\n    createRepoRuleset: [\"POST /repos/{owner}/{repo}/rulesets\"],\n    createTagProtection: [\"POST /repos/{owner}/{repo}/tags/protection\"],\n    createUsingTemplate: [\n      \"POST /repos/{template_owner}/{template_repo}/generate\"\n    ],\n    createWebhook: [\"POST /repos/{owner}/{repo}/hooks\"],\n    declineInvitation: [\n      \"DELETE /user/repository_invitations/{invitation_id}\",\n      {},\n      { renamed: [\"repos\", \"declineInvitationForAuthenticatedUser\"] }\n    ],\n    declineInvitationForAuthenticatedUser: [\n      \"DELETE /user/repository_invitations/{invitation_id}\"\n    ],\n    delete: [\"DELETE /repos/{owner}/{repo}\"],\n    deleteAccessRestrictions: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"\n    ],\n    deleteAdminBranchProtection: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"\n    ],\n    deleteAnEnvironment: [\n      \"DELETE /repos/{owner}/{repo}/environments/{environment_name}\"\n    ],\n    deleteAutolink: [\"DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}\"],\n    deleteBranchProtection: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection\"\n    ],\n    deleteCommitComment: [\"DELETE /repos/{owner}/{repo}/comments/{comment_id}\"],\n    deleteCommitSignatureProtection: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"\n    ],\n    deleteDeployKey: [\"DELETE /repos/{owner}/{repo}/keys/{key_id}\"],\n    deleteDeployment: [\n      \"DELETE /repos/{owner}/{repo}/deployments/{deployment_id}\"\n    ],\n    deleteDeploymentBranchPolicy: [\n      \"DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}\"\n    ],\n    deleteFile: [\"DELETE /repos/{owner}/{repo}/contents/{path}\"],\n    deleteInvitation: [\n      \"DELETE /repos/{owner}/{repo}/invitations/{invitation_id}\"\n    ],\n    deleteOrgRuleset: [\"DELETE /orgs/{org}/rulesets/{ruleset_id}\"],\n    deletePagesSite: [\"DELETE /repos/{owner}/{repo}/pages\"],\n    deletePullRequestReviewProtection: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"\n    ],\n    deleteRelease: [\"DELETE /repos/{owner}/{repo}/releases/{release_id}\"],\n    deleteReleaseAsset: [\n      \"DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}\"\n    ],\n    deleteRepoRuleset: [\"DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}\"],\n    deleteTagProtection: [\n      \"DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}\"\n    ],\n    deleteWebhook: [\"DELETE /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    disableAutomatedSecurityFixes: [\n      \"DELETE /repos/{owner}/{repo}/automated-security-fixes\"\n    ],\n    disableDeploymentProtectionRule: [\n      \"DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}\"\n    ],\n    disablePrivateVulnerabilityReporting: [\n      \"DELETE /repos/{owner}/{repo}/private-vulnerability-reporting\"\n    ],\n    disableVulnerabilityAlerts: [\n      \"DELETE /repos/{owner}/{repo}/vulnerability-alerts\"\n    ],\n    downloadArchive: [\n      \"GET /repos/{owner}/{repo}/zipball/{ref}\",\n      {},\n      { renamed: [\"repos\", \"downloadZipballArchive\"] }\n    ],\n    downloadTarballArchive: [\"GET /repos/{owner}/{repo}/tarball/{ref}\"],\n    downloadZipballArchive: [\"GET /repos/{owner}/{repo}/zipball/{ref}\"],\n    enableAutomatedSecurityFixes: [\n      \"PUT /repos/{owner}/{repo}/automated-security-fixes\"\n    ],\n    enablePrivateVulnerabilityReporting: [\n      \"PUT /repos/{owner}/{repo}/private-vulnerability-reporting\"\n    ],\n    enableVulnerabilityAlerts: [\n      \"PUT /repos/{owner}/{repo}/vulnerability-alerts\"\n    ],\n    generateReleaseNotes: [\n      \"POST /repos/{owner}/{repo}/releases/generate-notes\"\n    ],\n    get: [\"GET /repos/{owner}/{repo}\"],\n    getAccessRestrictions: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"\n    ],\n    getAdminBranchProtection: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"\n    ],\n    getAllDeploymentProtectionRules: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules\"\n    ],\n    getAllEnvironments: [\"GET /repos/{owner}/{repo}/environments\"],\n    getAllStatusCheckContexts: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"\n    ],\n    getAllTopics: [\"GET /repos/{owner}/{repo}/topics\"],\n    getAppsWithAccessToProtectedBranch: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"\n    ],\n    getAutolink: [\"GET /repos/{owner}/{repo}/autolinks/{autolink_id}\"],\n    getBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}\"],\n    getBranchProtection: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection\"\n    ],\n    getBranchRules: [\"GET /repos/{owner}/{repo}/rules/branches/{branch}\"],\n    getClones: [\"GET /repos/{owner}/{repo}/traffic/clones\"],\n    getCodeFrequencyStats: [\"GET /repos/{owner}/{repo}/stats/code_frequency\"],\n    getCollaboratorPermissionLevel: [\n      \"GET /repos/{owner}/{repo}/collaborators/{username}/permission\"\n    ],\n    getCombinedStatusForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/status\"],\n    getCommit: [\"GET /repos/{owner}/{repo}/commits/{ref}\"],\n    getCommitActivityStats: [\"GET /repos/{owner}/{repo}/stats/commit_activity\"],\n    getCommitComment: [\"GET /repos/{owner}/{repo}/comments/{comment_id}\"],\n    getCommitSignatureProtection: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"\n    ],\n    getCommunityProfileMetrics: [\"GET /repos/{owner}/{repo}/community/profile\"],\n    getContent: [\"GET /repos/{owner}/{repo}/contents/{path}\"],\n    getContributorsStats: [\"GET /repos/{owner}/{repo}/stats/contributors\"],\n    getCustomDeploymentProtectionRule: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}\"\n    ],\n    getCustomPropertiesValues: [\"GET /repos/{owner}/{repo}/properties/values\"],\n    getDeployKey: [\"GET /repos/{owner}/{repo}/keys/{key_id}\"],\n    getDeployment: [\"GET /repos/{owner}/{repo}/deployments/{deployment_id}\"],\n    getDeploymentBranchPolicy: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}\"\n    ],\n    getDeploymentStatus: [\n      \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\"\n    ],\n    getEnvironment: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}\"\n    ],\n    getLatestPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/latest\"],\n    getLatestRelease: [\"GET /repos/{owner}/{repo}/releases/latest\"],\n    getOrgRuleSuite: [\"GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}\"],\n    getOrgRuleSuites: [\"GET /orgs/{org}/rulesets/rule-suites\"],\n    getOrgRuleset: [\"GET /orgs/{org}/rulesets/{ruleset_id}\"],\n    getOrgRulesets: [\"GET /orgs/{org}/rulesets\"],\n    getPages: [\"GET /repos/{owner}/{repo}/pages\"],\n    getPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/{build_id}\"],\n    getPagesDeployment: [\n      \"GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}\"\n    ],\n    getPagesHealthCheck: [\"GET /repos/{owner}/{repo}/pages/health\"],\n    getParticipationStats: [\"GET /repos/{owner}/{repo}/stats/participation\"],\n    getPullRequestReviewProtection: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"\n    ],\n    getPunchCardStats: [\"GET /repos/{owner}/{repo}/stats/punch_card\"],\n    getReadme: [\"GET /repos/{owner}/{repo}/readme\"],\n    getReadmeInDirectory: [\"GET /repos/{owner}/{repo}/readme/{dir}\"],\n    getRelease: [\"GET /repos/{owner}/{repo}/releases/{release_id}\"],\n    getReleaseAsset: [\"GET /repos/{owner}/{repo}/releases/assets/{asset_id}\"],\n    getReleaseByTag: [\"GET /repos/{owner}/{repo}/releases/tags/{tag}\"],\n    getRepoRuleSuite: [\n      \"GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}\"\n    ],\n    getRepoRuleSuites: [\"GET /repos/{owner}/{repo}/rulesets/rule-suites\"],\n    getRepoRuleset: [\"GET /repos/{owner}/{repo}/rulesets/{ruleset_id}\"],\n    getRepoRulesets: [\"GET /repos/{owner}/{repo}/rulesets\"],\n    getStatusChecksProtection: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"\n    ],\n    getTeamsWithAccessToProtectedBranch: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"\n    ],\n    getTopPaths: [\"GET /repos/{owner}/{repo}/traffic/popular/paths\"],\n    getTopReferrers: [\"GET /repos/{owner}/{repo}/traffic/popular/referrers\"],\n    getUsersWithAccessToProtectedBranch: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"\n    ],\n    getViews: [\"GET /repos/{owner}/{repo}/traffic/views\"],\n    getWebhook: [\"GET /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    getWebhookConfigForRepo: [\n      \"GET /repos/{owner}/{repo}/hooks/{hook_id}/config\"\n    ],\n    getWebhookDelivery: [\n      \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}\"\n    ],\n    listActivities: [\"GET /repos/{owner}/{repo}/activity\"],\n    listAutolinks: [\"GET /repos/{owner}/{repo}/autolinks\"],\n    listBranches: [\"GET /repos/{owner}/{repo}/branches\"],\n    listBranchesForHeadCommit: [\n      \"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\"\n    ],\n    listCollaborators: [\"GET /repos/{owner}/{repo}/collaborators\"],\n    listCommentsForCommit: [\n      \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\"\n    ],\n    listCommitCommentsForRepo: [\"GET /repos/{owner}/{repo}/comments\"],\n    listCommitStatusesForRef: [\n      \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\"\n    ],\n    listCommits: [\"GET /repos/{owner}/{repo}/commits\"],\n    listContributors: [\"GET /repos/{owner}/{repo}/contributors\"],\n    listCustomDeploymentRuleIntegrations: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps\"\n    ],\n    listDeployKeys: [\"GET /repos/{owner}/{repo}/keys\"],\n    listDeploymentBranchPolicies: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies\"\n    ],\n    listDeploymentStatuses: [\n      \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"\n    ],\n    listDeployments: [\"GET /repos/{owner}/{repo}/deployments\"],\n    listForAuthenticatedUser: [\"GET /user/repos\"],\n    listForOrg: [\"GET /orgs/{org}/repos\"],\n    listForUser: [\"GET /users/{username}/repos\"],\n    listForks: [\"GET /repos/{owner}/{repo}/forks\"],\n    listInvitations: [\"GET /repos/{owner}/{repo}/invitations\"],\n    listInvitationsForAuthenticatedUser: [\"GET /user/repository_invitations\"],\n    listLanguages: [\"GET /repos/{owner}/{repo}/languages\"],\n    listPagesBuilds: [\"GET /repos/{owner}/{repo}/pages/builds\"],\n    listPublic: [\"GET /repositories\"],\n    listPullRequestsAssociatedWithCommit: [\n      \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\"\n    ],\n    listReleaseAssets: [\n      \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\"\n    ],\n    listReleases: [\"GET /repos/{owner}/{repo}/releases\"],\n    listTagProtection: [\"GET /repos/{owner}/{repo}/tags/protection\"],\n    listTags: [\"GET /repos/{owner}/{repo}/tags\"],\n    listTeams: [\"GET /repos/{owner}/{repo}/teams\"],\n    listWebhookDeliveries: [\n      \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries\"\n    ],\n    listWebhooks: [\"GET /repos/{owner}/{repo}/hooks\"],\n    merge: [\"POST /repos/{owner}/{repo}/merges\"],\n    mergeUpstream: [\"POST /repos/{owner}/{repo}/merge-upstream\"],\n    pingWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/pings\"],\n    redeliverWebhookDelivery: [\n      \"POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts\"\n    ],\n    removeAppAccessRestrictions: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n      {},\n      { mapToData: \"apps\" }\n    ],\n    removeCollaborator: [\n      \"DELETE /repos/{owner}/{repo}/collaborators/{username}\"\n    ],\n    removeStatusCheckContexts: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n      {},\n      { mapToData: \"contexts\" }\n    ],\n    removeStatusCheckProtection: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"\n    ],\n    removeTeamAccessRestrictions: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n      {},\n      { mapToData: \"teams\" }\n    ],\n    removeUserAccessRestrictions: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n      {},\n      { mapToData: \"users\" }\n    ],\n    renameBranch: [\"POST /repos/{owner}/{repo}/branches/{branch}/rename\"],\n    replaceAllTopics: [\"PUT /repos/{owner}/{repo}/topics\"],\n    requestPagesBuild: [\"POST /repos/{owner}/{repo}/pages/builds\"],\n    setAdminBranchProtection: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"\n    ],\n    setAppAccessRestrictions: [\n      \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n      {},\n      { mapToData: \"apps\" }\n    ],\n    setStatusCheckContexts: [\n      \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n      {},\n      { mapToData: \"contexts\" }\n    ],\n    setTeamAccessRestrictions: [\n      \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n      {},\n      { mapToData: \"teams\" }\n    ],\n    setUserAccessRestrictions: [\n      \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n      {},\n      { mapToData: \"users\" }\n    ],\n    testPushWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/tests\"],\n    transfer: [\"POST /repos/{owner}/{repo}/transfer\"],\n    update: [\"PATCH /repos/{owner}/{repo}\"],\n    updateBranchProtection: [\n      \"PUT /repos/{owner}/{repo}/branches/{branch}/protection\"\n    ],\n    updateCommitComment: [\"PATCH /repos/{owner}/{repo}/comments/{comment_id}\"],\n    updateDeploymentBranchPolicy: [\n      \"PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}\"\n    ],\n    updateInformationAboutPagesSite: [\"PUT /repos/{owner}/{repo}/pages\"],\n    updateInvitation: [\n      \"PATCH /repos/{owner}/{repo}/invitations/{invitation_id}\"\n    ],\n    updateOrgRuleset: [\"PUT /orgs/{org}/rulesets/{ruleset_id}\"],\n    updatePullRequestReviewProtection: [\n      \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"\n    ],\n    updateRelease: [\"PATCH /repos/{owner}/{repo}/releases/{release_id}\"],\n    updateReleaseAsset: [\n      \"PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}\"\n    ],\n    updateRepoRuleset: [\"PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}\"],\n    updateStatusCheckPotection: [\n      \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n      {},\n      { renamed: [\"repos\", \"updateStatusCheckProtection\"] }\n    ],\n    updateStatusCheckProtection: [\n      \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"\n    ],\n    updateWebhook: [\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    updateWebhookConfigForRepo: [\n      \"PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config\"\n    ],\n    uploadReleaseAsset: [\n      \"POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}\",\n      { baseUrl: \"https://uploads.github.com\" }\n    ]\n  },\n  search: {\n    code: [\"GET /search/code\"],\n    commits: [\"GET /search/commits\"],\n    issuesAndPullRequests: [\"GET /search/issues\"],\n    labels: [\"GET /search/labels\"],\n    repos: [\"GET /search/repositories\"],\n    topics: [\"GET /search/topics\"],\n    users: [\"GET /search/users\"]\n  },\n  secretScanning: {\n    getAlert: [\n      \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"\n    ],\n    listAlertsForEnterprise: [\n      \"GET /enterprises/{enterprise}/secret-scanning/alerts\"\n    ],\n    listAlertsForOrg: [\"GET /orgs/{org}/secret-scanning/alerts\"],\n    listAlertsForRepo: [\"GET /repos/{owner}/{repo}/secret-scanning/alerts\"],\n    listLocationsForAlert: [\n      \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations\"\n    ],\n    updateAlert: [\n      \"PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"\n    ]\n  },\n  securityAdvisories: {\n    createFork: [\n      \"POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks\"\n    ],\n    createPrivateVulnerabilityReport: [\n      \"POST /repos/{owner}/{repo}/security-advisories/reports\"\n    ],\n    createRepositoryAdvisory: [\n      \"POST /repos/{owner}/{repo}/security-advisories\"\n    ],\n    createRepositoryAdvisoryCveRequest: [\n      \"POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve\"\n    ],\n    getGlobalAdvisory: [\"GET /advisories/{ghsa_id}\"],\n    getRepositoryAdvisory: [\n      \"GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}\"\n    ],\n    listGlobalAdvisories: [\"GET /advisories\"],\n    listOrgRepositoryAdvisories: [\"GET /orgs/{org}/security-advisories\"],\n    listRepositoryAdvisories: [\"GET /repos/{owner}/{repo}/security-advisories\"],\n    updateRepositoryAdvisory: [\n      \"PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}\"\n    ]\n  },\n  teams: {\n    addOrUpdateMembershipForUserInOrg: [\n      \"PUT /orgs/{org}/teams/{team_slug}/memberships/{username}\"\n    ],\n    addOrUpdateProjectPermissionsInOrg: [\n      \"PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}\"\n    ],\n    addOrUpdateRepoPermissionsInOrg: [\n      \"PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"\n    ],\n    checkPermissionsForProjectInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/projects/{project_id}\"\n    ],\n    checkPermissionsForRepoInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"\n    ],\n    create: [\"POST /orgs/{org}/teams\"],\n    createDiscussionCommentInOrg: [\n      \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"\n    ],\n    createDiscussionInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions\"],\n    deleteDiscussionCommentInOrg: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"\n    ],\n    deleteDiscussionInOrg: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"\n    ],\n    deleteInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}\"],\n    getByName: [\"GET /orgs/{org}/teams/{team_slug}\"],\n    getDiscussionCommentInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"\n    ],\n    getDiscussionInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"\n    ],\n    getMembershipForUserInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/memberships/{username}\"\n    ],\n    list: [\"GET /orgs/{org}/teams\"],\n    listChildInOrg: [\"GET /orgs/{org}/teams/{team_slug}/teams\"],\n    listDiscussionCommentsInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"\n    ],\n    listDiscussionsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions\"],\n    listForAuthenticatedUser: [\"GET /user/teams\"],\n    listMembersInOrg: [\"GET /orgs/{org}/teams/{team_slug}/members\"],\n    listPendingInvitationsInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/invitations\"\n    ],\n    listProjectsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/projects\"],\n    listReposInOrg: [\"GET /orgs/{org}/teams/{team_slug}/repos\"],\n    removeMembershipForUserInOrg: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}\"\n    ],\n    removeProjectInOrg: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}\"\n    ],\n    removeRepoInOrg: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"\n    ],\n    updateDiscussionCommentInOrg: [\n      \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"\n    ],\n    updateDiscussionInOrg: [\n      \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"\n    ],\n    updateInOrg: [\"PATCH /orgs/{org}/teams/{team_slug}\"]\n  },\n  users: {\n    addEmailForAuthenticated: [\n      \"POST /user/emails\",\n      {},\n      { renamed: [\"users\", \"addEmailForAuthenticatedUser\"] }\n    ],\n    addEmailForAuthenticatedUser: [\"POST /user/emails\"],\n    addSocialAccountForAuthenticatedUser: [\"POST /user/social_accounts\"],\n    block: [\"PUT /user/blocks/{username}\"],\n    checkBlocked: [\"GET /user/blocks/{username}\"],\n    checkFollowingForUser: [\"GET /users/{username}/following/{target_user}\"],\n    checkPersonIsFollowedByAuthenticated: [\"GET /user/following/{username}\"],\n    createGpgKeyForAuthenticated: [\n      \"POST /user/gpg_keys\",\n      {},\n      { renamed: [\"users\", \"createGpgKeyForAuthenticatedUser\"] }\n    ],\n    createGpgKeyForAuthenticatedUser: [\"POST /user/gpg_keys\"],\n    createPublicSshKeyForAuthenticated: [\n      \"POST /user/keys\",\n      {},\n      { renamed: [\"users\", \"createPublicSshKeyForAuthenticatedUser\"] }\n    ],\n    createPublicSshKeyForAuthenticatedUser: [\"POST /user/keys\"],\n    createSshSigningKeyForAuthenticatedUser: [\"POST /user/ssh_signing_keys\"],\n    deleteEmailForAuthenticated: [\n      \"DELETE /user/emails\",\n      {},\n      { renamed: [\"users\", \"deleteEmailForAuthenticatedUser\"] }\n    ],\n    deleteEmailForAuthenticatedUser: [\"DELETE /user/emails\"],\n    deleteGpgKeyForAuthenticated: [\n      \"DELETE /user/gpg_keys/{gpg_key_id}\",\n      {},\n      { renamed: [\"users\", \"deleteGpgKeyForAuthenticatedUser\"] }\n    ],\n    deleteGpgKeyForAuthenticatedUser: [\"DELETE /user/gpg_keys/{gpg_key_id}\"],\n    deletePublicSshKeyForAuthenticated: [\n      \"DELETE /user/keys/{key_id}\",\n      {},\n      { renamed: [\"users\", \"deletePublicSshKeyForAuthenticatedUser\"] }\n    ],\n    deletePublicSshKeyForAuthenticatedUser: [\"DELETE /user/keys/{key_id}\"],\n    deleteSocialAccountForAuthenticatedUser: [\"DELETE /user/social_accounts\"],\n    deleteSshSigningKeyForAuthenticatedUser: [\n      \"DELETE /user/ssh_signing_keys/{ssh_signing_key_id}\"\n    ],\n    follow: [\"PUT /user/following/{username}\"],\n    getAuthenticated: [\"GET /user\"],\n    getByUsername: [\"GET /users/{username}\"],\n    getContextForUser: [\"GET /users/{username}/hovercard\"],\n    getGpgKeyForAuthenticated: [\n      \"GET /user/gpg_keys/{gpg_key_id}\",\n      {},\n      { renamed: [\"users\", \"getGpgKeyForAuthenticatedUser\"] }\n    ],\n    getGpgKeyForAuthenticatedUser: [\"GET /user/gpg_keys/{gpg_key_id}\"],\n    getPublicSshKeyForAuthenticated: [\n      \"GET /user/keys/{key_id}\",\n      {},\n      { renamed: [\"users\", \"getPublicSshKeyForAuthenticatedUser\"] }\n    ],\n    getPublicSshKeyForAuthenticatedUser: [\"GET /user/keys/{key_id}\"],\n    getSshSigningKeyForAuthenticatedUser: [\n      \"GET /user/ssh_signing_keys/{ssh_signing_key_id}\"\n    ],\n    list: [\"GET /users\"],\n    listBlockedByAuthenticated: [\n      \"GET /user/blocks\",\n      {},\n      { renamed: [\"users\", \"listBlockedByAuthenticatedUser\"] }\n    ],\n    listBlockedByAuthenticatedUser: [\"GET /user/blocks\"],\n    listEmailsForAuthenticated: [\n      \"GET /user/emails\",\n      {},\n      { renamed: [\"users\", \"listEmailsForAuthenticatedUser\"] }\n    ],\n    listEmailsForAuthenticatedUser: [\"GET /user/emails\"],\n    listFollowedByAuthenticated: [\n      \"GET /user/following\",\n      {},\n      { renamed: [\"users\", \"listFollowedByAuthenticatedUser\"] }\n    ],\n    listFollowedByAuthenticatedUser: [\"GET /user/following\"],\n    listFollowersForAuthenticatedUser: [\"GET /user/followers\"],\n    listFollowersForUser: [\"GET /users/{username}/followers\"],\n    listFollowingForUser: [\"GET /users/{username}/following\"],\n    listGpgKeysForAuthenticated: [\n      \"GET /user/gpg_keys\",\n      {},\n      { renamed: [\"users\", \"listGpgKeysForAuthenticatedUser\"] }\n    ],\n    listGpgKeysForAuthenticatedUser: [\"GET /user/gpg_keys\"],\n    listGpgKeysForUser: [\"GET /users/{username}/gpg_keys\"],\n    listPublicEmailsForAuthenticated: [\n      \"GET /user/public_emails\",\n      {},\n      { renamed: [\"users\", \"listPublicEmailsForAuthenticatedUser\"] }\n    ],\n    listPublicEmailsForAuthenticatedUser: [\"GET /user/public_emails\"],\n    listPublicKeysForUser: [\"GET /users/{username}/keys\"],\n    listPublicSshKeysForAuthenticated: [\n      \"GET /user/keys\",\n      {},\n      { renamed: [\"users\", \"listPublicSshKeysForAuthenticatedUser\"] }\n    ],\n    listPublicSshKeysForAuthenticatedUser: [\"GET /user/keys\"],\n    listSocialAccountsForAuthenticatedUser: [\"GET /user/social_accounts\"],\n    listSocialAccountsForUser: [\"GET /users/{username}/social_accounts\"],\n    listSshSigningKeysForAuthenticatedUser: [\"GET /user/ssh_signing_keys\"],\n    listSshSigningKeysForUser: [\"GET /users/{username}/ssh_signing_keys\"],\n    setPrimaryEmailVisibilityForAuthenticated: [\n      \"PATCH /user/email/visibility\",\n      {},\n      { renamed: [\"users\", \"setPrimaryEmailVisibilityForAuthenticatedUser\"] }\n    ],\n    setPrimaryEmailVisibilityForAuthenticatedUser: [\n      \"PATCH /user/email/visibility\"\n    ],\n    unblock: [\"DELETE /user/blocks/{username}\"],\n    unfollow: [\"DELETE /user/following/{username}\"],\n    updateAuthenticated: [\"PATCH /user\"]\n  }\n};\nvar endpoints_default = Endpoints;\n\n// pkg/dist-src/endpoints-to-methods.js\nvar endpointMethodsMap = /* @__PURE__ */ new Map();\nfor (const [scope, endpoints] of Object.entries(endpoints_default)) {\n  for (const [methodName, endpoint] of Object.entries(endpoints)) {\n    const [route, defaults, decorations] = endpoint;\n    const [method, url] = route.split(/ /);\n    const endpointDefaults = Object.assign(\n      {\n        method,\n        url\n      },\n      defaults\n    );\n    if (!endpointMethodsMap.has(scope)) {\n      endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());\n    }\n    endpointMethodsMap.get(scope).set(methodName, {\n      scope,\n      methodName,\n      endpointDefaults,\n      decorations\n    });\n  }\n}\nvar handler = {\n  has({ scope }, methodName) {\n    return endpointMethodsMap.get(scope).has(methodName);\n  },\n  getOwnPropertyDescriptor(target, methodName) {\n    return {\n      value: this.get(target, methodName),\n      // ensures method is in the cache\n      configurable: true,\n      writable: true,\n      enumerable: true\n    };\n  },\n  defineProperty(target, methodName, descriptor) {\n    Object.defineProperty(target.cache, methodName, descriptor);\n    return true;\n  },\n  deleteProperty(target, methodName) {\n    delete target.cache[methodName];\n    return true;\n  },\n  ownKeys({ scope }) {\n    return [...endpointMethodsMap.get(scope).keys()];\n  },\n  set(target, methodName, value) {\n    return target.cache[methodName] = value;\n  },\n  get({ octokit, scope, cache }, methodName) {\n    if (cache[methodName]) {\n      return cache[methodName];\n    }\n    const method = endpointMethodsMap.get(scope).get(methodName);\n    if (!method) {\n      return void 0;\n    }\n    const { endpointDefaults, decorations } = method;\n    if (decorations) {\n      cache[methodName] = decorate(\n        octokit,\n        scope,\n        methodName,\n        endpointDefaults,\n        decorations\n      );\n    } else {\n      cache[methodName] = octokit.request.defaults(endpointDefaults);\n    }\n    return cache[methodName];\n  }\n};\nfunction endpointsToMethods(octokit) {\n  const newMethods = {};\n  for (const scope of endpointMethodsMap.keys()) {\n    newMethods[scope] = new Proxy({ octokit, scope, cache: {} }, handler);\n  }\n  return newMethods;\n}\nfunction decorate(octokit, scope, methodName, defaults, decorations) {\n  const requestWithDefaults = octokit.request.defaults(defaults);\n  function withDecorations(...args) {\n    let options = requestWithDefaults.endpoint.merge(...args);\n    if (decorations.mapToData) {\n      options = Object.assign({}, options, {\n        data: options[decorations.mapToData],\n        [decorations.mapToData]: void 0\n      });\n      return requestWithDefaults(options);\n    }\n    if (decorations.renamed) {\n      const [newScope, newMethodName] = decorations.renamed;\n      octokit.log.warn(\n        `octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`\n      );\n    }\n    if (decorations.deprecated) {\n      octokit.log.warn(decorations.deprecated);\n    }\n    if (decorations.renamedParameters) {\n      const options2 = requestWithDefaults.endpoint.merge(...args);\n      for (const [name, alias] of Object.entries(\n        decorations.renamedParameters\n      )) {\n        if (name in options2) {\n          octokit.log.warn(\n            `\"${name}\" parameter is deprecated for \"octokit.${scope}.${methodName}()\". Use \"${alias}\" instead`\n          );\n          if (!(alias in options2)) {\n            options2[alias] = options2[name];\n          }\n          delete options2[name];\n        }\n      }\n      return requestWithDefaults(options2);\n    }\n    return requestWithDefaults(...args);\n  }\n  return Object.assign(withDecorations, requestWithDefaults);\n}\n\n// pkg/dist-src/index.js\nfunction restEndpointMethods(octokit) {\n  const api = endpointsToMethods(octokit);\n  return {\n    rest: api\n  };\n}\nrestEndpointMethods.VERSION = VERSION;\nfunction legacyRestEndpointMethods(octokit) {\n  const api = endpointsToMethods(octokit);\n  return {\n    ...api,\n    rest: api\n  };\n}\nlegacyRestEndpointMethods.VERSION = VERSION;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  legacyRestEndpointMethods,\n  restEndpointMethods\n});\n", "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n  composePaginateRest: () => composePaginateRest,\n  isPaginatingEndpoint: () => isPaginatingEndpoint,\n  paginateRest: () => paginateRest,\n  paginatingEndpoints: () => paginatingEndpoints\n});\nmodule.exports = __toCommonJS(dist_src_exports);\n\n// pkg/dist-src/version.js\nvar VERSION = \"9.2.1\";\n\n// pkg/dist-src/normalize-paginated-list-response.js\nfunction normalizePaginatedListResponse(response) {\n  if (!response.data) {\n    return {\n      ...response,\n      data: []\n    };\n  }\n  const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n  if (!responseNeedsNormalization)\n    return response;\n  const incompleteResults = response.data.incomplete_results;\n  const repositorySelection = response.data.repository_selection;\n  const totalCount = response.data.total_count;\n  delete response.data.incomplete_results;\n  delete response.data.repository_selection;\n  delete response.data.total_count;\n  const namespaceKey = Object.keys(response.data)[0];\n  const data = response.data[namespaceKey];\n  response.data = data;\n  if (typeof incompleteResults !== \"undefined\") {\n    response.data.incomplete_results = incompleteResults;\n  }\n  if (typeof repositorySelection !== \"undefined\") {\n    response.data.repository_selection = repositorySelection;\n  }\n  response.data.total_count = totalCount;\n  return response;\n}\n\n// pkg/dist-src/iterator.js\nfunction iterator(octokit, route, parameters) {\n  const options = typeof route === \"function\" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);\n  const requestMethod = typeof route === \"function\" ? route : octokit.request;\n  const method = options.method;\n  const headers = options.headers;\n  let url = options.url;\n  return {\n    [Symbol.asyncIterator]: () => ({\n      async next() {\n        if (!url)\n          return { done: true };\n        try {\n          const response = await requestMethod({ method, url, headers });\n          const normalizedResponse = normalizePaginatedListResponse(response);\n          url = ((normalizedResponse.headers.link || \"\").match(\n            /<([^>]+)>;\\s*rel=\"next\"/\n          ) || [])[1];\n          return { value: normalizedResponse };\n        } catch (error) {\n          if (error.status !== 409)\n            throw error;\n          url = \"\";\n          return {\n            value: {\n              status: 200,\n              headers: {},\n              data: []\n            }\n          };\n        }\n      }\n    })\n  };\n}\n\n// pkg/dist-src/paginate.js\nfunction paginate(octokit, route, parameters, mapFn) {\n  if (typeof parameters === \"function\") {\n    mapFn = parameters;\n    parameters = void 0;\n  }\n  return gather(\n    octokit,\n    [],\n    iterator(octokit, route, parameters)[Symbol.asyncIterator](),\n    mapFn\n  );\n}\nfunction gather(octokit, results, iterator2, mapFn) {\n  return iterator2.next().then((result) => {\n    if (result.done) {\n      return results;\n    }\n    let earlyExit = false;\n    function done() {\n      earlyExit = true;\n    }\n    results = results.concat(\n      mapFn ? mapFn(result.value, done) : result.value.data\n    );\n    if (earlyExit) {\n      return results;\n    }\n    return gather(octokit, results, iterator2, mapFn);\n  });\n}\n\n// pkg/dist-src/compose-paginate.js\nvar composePaginateRest = Object.assign(paginate, {\n  iterator\n});\n\n// pkg/dist-src/generated/paginating-endpoints.js\nvar paginatingEndpoints = [\n  \"GET /advisories\",\n  \"GET /app/hook/deliveries\",\n  \"GET /app/installation-requests\",\n  \"GET /app/installations\",\n  \"GET /assignments/{assignment_id}/accepted_assignments\",\n  \"GET /classrooms\",\n  \"GET /classrooms/{classroom_id}/assignments\",\n  \"GET /enterprises/{enterprise}/dependabot/alerts\",\n  \"GET /enterprises/{enterprise}/secret-scanning/alerts\",\n  \"GET /events\",\n  \"GET /gists\",\n  \"GET /gists/public\",\n  \"GET /gists/starred\",\n  \"GET /gists/{gist_id}/comments\",\n  \"GET /gists/{gist_id}/commits\",\n  \"GET /gists/{gist_id}/forks\",\n  \"GET /installation/repositories\",\n  \"GET /issues\",\n  \"GET /licenses\",\n  \"GET /marketplace_listing/plans\",\n  \"GET /marketplace_listing/plans/{plan_id}/accounts\",\n  \"GET /marketplace_listing/stubbed/plans\",\n  \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\",\n  \"GET /networks/{owner}/{repo}/events\",\n  \"GET /notifications\",\n  \"GET /organizations\",\n  \"GET /orgs/{org}/actions/cache/usage-by-repository\",\n  \"GET /orgs/{org}/actions/permissions/repositories\",\n  \"GET /orgs/{org}/actions/runners\",\n  \"GET /orgs/{org}/actions/secrets\",\n  \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\",\n  \"GET /orgs/{org}/actions/variables\",\n  \"GET /orgs/{org}/actions/variables/{name}/repositories\",\n  \"GET /orgs/{org}/blocks\",\n  \"GET /orgs/{org}/code-scanning/alerts\",\n  \"GET /orgs/{org}/codespaces\",\n  \"GET /orgs/{org}/codespaces/secrets\",\n  \"GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories\",\n  \"GET /orgs/{org}/copilot/billing/seats\",\n  \"GET /orgs/{org}/dependabot/alerts\",\n  \"GET /orgs/{org}/dependabot/secrets\",\n  \"GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories\",\n  \"GET /orgs/{org}/events\",\n  \"GET /orgs/{org}/failed_invitations\",\n  \"GET /orgs/{org}/hooks\",\n  \"GET /orgs/{org}/hooks/{hook_id}/deliveries\",\n  \"GET /orgs/{org}/installations\",\n  \"GET /orgs/{org}/invitations\",\n  \"GET /orgs/{org}/invitations/{invitation_id}/teams\",\n  \"GET /orgs/{org}/issues\",\n  \"GET /orgs/{org}/members\",\n  \"GET /orgs/{org}/members/{username}/codespaces\",\n  \"GET /orgs/{org}/migrations\",\n  \"GET /orgs/{org}/migrations/{migration_id}/repositories\",\n  \"GET /orgs/{org}/organization-roles/{role_id}/teams\",\n  \"GET /orgs/{org}/organization-roles/{role_id}/users\",\n  \"GET /orgs/{org}/outside_collaborators\",\n  \"GET /orgs/{org}/packages\",\n  \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\",\n  \"GET /orgs/{org}/personal-access-token-requests\",\n  \"GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories\",\n  \"GET /orgs/{org}/personal-access-tokens\",\n  \"GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories\",\n  \"GET /orgs/{org}/projects\",\n  \"GET /orgs/{org}/properties/values\",\n  \"GET /orgs/{org}/public_members\",\n  \"GET /orgs/{org}/repos\",\n  \"GET /orgs/{org}/rulesets\",\n  \"GET /orgs/{org}/rulesets/rule-suites\",\n  \"GET /orgs/{org}/secret-scanning/alerts\",\n  \"GET /orgs/{org}/security-advisories\",\n  \"GET /orgs/{org}/teams\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\",\n  \"GET /orgs/{org}/teams/{team_slug}/invitations\",\n  \"GET /orgs/{org}/teams/{team_slug}/members\",\n  \"GET /orgs/{org}/teams/{team_slug}/projects\",\n  \"GET /orgs/{org}/teams/{team_slug}/repos\",\n  \"GET /orgs/{org}/teams/{team_slug}/teams\",\n  \"GET /projects/columns/{column_id}/cards\",\n  \"GET /projects/{project_id}/collaborators\",\n  \"GET /projects/{project_id}/columns\",\n  \"GET /repos/{owner}/{repo}/actions/artifacts\",\n  \"GET /repos/{owner}/{repo}/actions/caches\",\n  \"GET /repos/{owner}/{repo}/actions/organization-secrets\",\n  \"GET /repos/{owner}/{repo}/actions/organization-variables\",\n  \"GET /repos/{owner}/{repo}/actions/runners\",\n  \"GET /repos/{owner}/{repo}/actions/runs\",\n  \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\",\n  \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs\",\n  \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\",\n  \"GET /repos/{owner}/{repo}/actions/secrets\",\n  \"GET /repos/{owner}/{repo}/actions/variables\",\n  \"GET /repos/{owner}/{repo}/actions/workflows\",\n  \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\",\n  \"GET /repos/{owner}/{repo}/activity\",\n  \"GET /repos/{owner}/{repo}/assignees\",\n  \"GET /repos/{owner}/{repo}/branches\",\n  \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\",\n  \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\",\n  \"GET /repos/{owner}/{repo}/code-scanning/alerts\",\n  \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\",\n  \"GET /repos/{owner}/{repo}/code-scanning/analyses\",\n  \"GET /repos/{owner}/{repo}/codespaces\",\n  \"GET /repos/{owner}/{repo}/codespaces/devcontainers\",\n  \"GET /repos/{owner}/{repo}/codespaces/secrets\",\n  \"GET /repos/{owner}/{repo}/collaborators\",\n  \"GET /repos/{owner}/{repo}/comments\",\n  \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/commits\",\n  \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n  \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/status\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\",\n  \"GET /repos/{owner}/{repo}/contributors\",\n  \"GET /repos/{owner}/{repo}/dependabot/alerts\",\n  \"GET /repos/{owner}/{repo}/dependabot/secrets\",\n  \"GET /repos/{owner}/{repo}/deployments\",\n  \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\",\n  \"GET /repos/{owner}/{repo}/environments\",\n  \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies\",\n  \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps\",\n  \"GET /repos/{owner}/{repo}/events\",\n  \"GET /repos/{owner}/{repo}/forks\",\n  \"GET /repos/{owner}/{repo}/hooks\",\n  \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries\",\n  \"GET /repos/{owner}/{repo}/invitations\",\n  \"GET /repos/{owner}/{repo}/issues\",\n  \"GET /repos/{owner}/{repo}/issues/comments\",\n  \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/issues/events\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/events\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\",\n  \"GET /repos/{owner}/{repo}/keys\",\n  \"GET /repos/{owner}/{repo}/labels\",\n  \"GET /repos/{owner}/{repo}/milestones\",\n  \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\",\n  \"GET /repos/{owner}/{repo}/notifications\",\n  \"GET /repos/{owner}/{repo}/pages/builds\",\n  \"GET /repos/{owner}/{repo}/projects\",\n  \"GET /repos/{owner}/{repo}/pulls\",\n  \"GET /repos/{owner}/{repo}/pulls/comments\",\n  \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\",\n  \"GET /repos/{owner}/{repo}/releases\",\n  \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\",\n  \"GET /repos/{owner}/{repo}/releases/{release_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/rules/branches/{branch}\",\n  \"GET /repos/{owner}/{repo}/rulesets\",\n  \"GET /repos/{owner}/{repo}/rulesets/rule-suites\",\n  \"GET /repos/{owner}/{repo}/secret-scanning/alerts\",\n  \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations\",\n  \"GET /repos/{owner}/{repo}/security-advisories\",\n  \"GET /repos/{owner}/{repo}/stargazers\",\n  \"GET /repos/{owner}/{repo}/subscribers\",\n  \"GET /repos/{owner}/{repo}/tags\",\n  \"GET /repos/{owner}/{repo}/teams\",\n  \"GET /repos/{owner}/{repo}/topics\",\n  \"GET /repositories\",\n  \"GET /repositories/{repository_id}/environments/{environment_name}/secrets\",\n  \"GET /repositories/{repository_id}/environments/{environment_name}/variables\",\n  \"GET /search/code\",\n  \"GET /search/commits\",\n  \"GET /search/issues\",\n  \"GET /search/labels\",\n  \"GET /search/repositories\",\n  \"GET /search/topics\",\n  \"GET /search/users\",\n  \"GET /teams/{team_id}/discussions\",\n  \"GET /teams/{team_id}/discussions/{discussion_number}/comments\",\n  \"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n  \"GET /teams/{team_id}/discussions/{discussion_number}/reactions\",\n  \"GET /teams/{team_id}/invitations\",\n  \"GET /teams/{team_id}/members\",\n  \"GET /teams/{team_id}/projects\",\n  \"GET /teams/{team_id}/repos\",\n  \"GET /teams/{team_id}/teams\",\n  \"GET /user/blocks\",\n  \"GET /user/codespaces\",\n  \"GET /user/codespaces/secrets\",\n  \"GET /user/emails\",\n  \"GET /user/followers\",\n  \"GET /user/following\",\n  \"GET /user/gpg_keys\",\n  \"GET /user/installations\",\n  \"GET /user/installations/{installation_id}/repositories\",\n  \"GET /user/issues\",\n  \"GET /user/keys\",\n  \"GET /user/marketplace_purchases\",\n  \"GET /user/marketplace_purchases/stubbed\",\n  \"GET /user/memberships/orgs\",\n  \"GET /user/migrations\",\n  \"GET /user/migrations/{migration_id}/repositories\",\n  \"GET /user/orgs\",\n  \"GET /user/packages\",\n  \"GET /user/packages/{package_type}/{package_name}/versions\",\n  \"GET /user/public_emails\",\n  \"GET /user/repos\",\n  \"GET /user/repository_invitations\",\n  \"GET /user/social_accounts\",\n  \"GET /user/ssh_signing_keys\",\n  \"GET /user/starred\",\n  \"GET /user/subscriptions\",\n  \"GET /user/teams\",\n  \"GET /users\",\n  \"GET /users/{username}/events\",\n  \"GET /users/{username}/events/orgs/{org}\",\n  \"GET /users/{username}/events/public\",\n  \"GET /users/{username}/followers\",\n  \"GET /users/{username}/following\",\n  \"GET /users/{username}/gists\",\n  \"GET /users/{username}/gpg_keys\",\n  \"GET /users/{username}/keys\",\n  \"GET /users/{username}/orgs\",\n  \"GET /users/{username}/packages\",\n  \"GET /users/{username}/projects\",\n  \"GET /users/{username}/received_events\",\n  \"GET /users/{username}/received_events/public\",\n  \"GET /users/{username}/repos\",\n  \"GET /users/{username}/social_accounts\",\n  \"GET /users/{username}/ssh_signing_keys\",\n  \"GET /users/{username}/starred\",\n  \"GET /users/{username}/subscriptions\"\n];\n\n// pkg/dist-src/paginating-endpoints.js\nfunction isPaginatingEndpoint(arg) {\n  if (typeof arg === \"string\") {\n    return paginatingEndpoints.includes(arg);\n  } else {\n    return false;\n  }\n}\n\n// pkg/dist-src/index.js\nfunction paginateRest(octokit) {\n  return {\n    paginate: Object.assign(paginate.bind(null, octokit), {\n      iterator: iterator.bind(null, octokit)\n    })\n  };\n}\npaginateRest.VERSION = VERSION;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  composePaginateRest,\n  isPaginatingEndpoint,\n  paginateRest,\n  paginatingEndpoints\n});\n", null, null, "/**\n * @since 2.0.0\n */\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface FunctionTypeLambda extends TypeLambda {\n  readonly type: (a: this[\"In\"]) => this[\"Target\"]\n}\n\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction = (input: unknown): input is Function => typeof input === \"function\"\n\n/**\n * Creates a function that can be used in a data-last (aka `pipe`able) or\n * data-first style.\n *\n * The first parameter to `dual` is either the arity of the uncurried function\n * or a predicate that determines if the function is being used in a data-first\n * or data-last style.\n *\n * Using the arity is the most common use case, but there are some cases where\n * you may want to use a predicate. For example, if you have a function that\n * takes an optional argument, you can use a predicate to determine if the\n * function is being used in a data-first or data-last style.\n *\n * @param arity - Either the arity of the uncurried function or a predicate\n *                which determines if the function is being used in a data-first\n *                or data-last style.\n * @param body - The definition of the uncurried function.\n *\n * @example\n * import { dual, pipe } from \"effect/Function\"\n *\n * // Exampe using arity to determine data-first or data-last style\n * const sum: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual(2, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * // Example using a predicate to determine data-first or data-last style\n * const sum2: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual((args) => args.length === 1, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * @since 2.0.0\n */\nexport const dual: {\n  <DataLast extends (...args: Array<any>) => any, DataFirst extends (...args: Array<any>) => any>(\n    arity: Parameters<DataFirst>[\"length\"],\n    body: DataFirst\n  ): DataLast & DataFirst\n  <DataLast extends (...args: Array<any>) => any, DataFirst extends (...args: Array<any>) => any>(\n    isDataFirst: (args: IArguments) => boolean,\n    body: DataFirst\n  ): DataLast & DataFirst\n} = function(arity, body) {\n  if (typeof arity === \"function\") {\n    return function() {\n      if (arity(arguments)) {\n        // @ts-expect-error\n        return body.apply(this, arguments)\n      }\n      return ((self: any) => body(self, ...arguments)) as any\n    }\n  }\n\n  switch (arity) {\n    case 0:\n    case 1:\n      throw new RangeError(`Invalid arity ${arity}`)\n\n    case 2:\n      return function(a, b) {\n        if (arguments.length >= 2) {\n          return body(a, b)\n        }\n        return function(self: any) {\n          return body(self, a)\n        }\n      }\n\n    case 3:\n      return function(a, b, c) {\n        if (arguments.length >= 3) {\n          return body(a, b, c)\n        }\n        return function(self: any) {\n          return body(self, a, b)\n        }\n      }\n\n    case 4:\n      return function(a, b, c, d) {\n        if (arguments.length >= 4) {\n          return body(a, b, c, d)\n        }\n        return function(self: any) {\n          return body(self, a, b, c)\n        }\n      }\n\n    case 5:\n      return function(a, b, c, d, e) {\n        if (arguments.length >= 5) {\n          return body(a, b, c, d, e)\n        }\n        return function(self: any) {\n          return body(self, a, b, c, d)\n        }\n      }\n\n    default:\n      return function() {\n        if (arguments.length >= arity) {\n          // @ts-expect-error\n          return body.apply(this, arguments)\n        }\n        const args = arguments\n        return function(self: any) {\n          return body(self, ...args)\n        }\n      }\n  }\n}\n/**\n * Apply a function to a given value.\n *\n * @param a - The value that the function will be applied to.\n * @param self - The function to be applied to a value.\n *\n * @example\n * import { pipe, apply } from \"effect/Function\"\n * import { length } from \"effect/String\"\n *\n * assert.deepStrictEqual(pipe(length, apply(\"hello\")), 5)\n *\n * @since 2.0.0\n */\nexport const apply = <A>(a: A) => <B>(self: (a: A) => B): B => self(a)\n\n/**\n * A lazy argument.\n *\n * @example\n * import { LazyArg, constant } from \"effect/Function\"\n *\n * const constNull: LazyArg<null> = constant(null)\n *\n * @since 2.0.0\n */\nexport interface LazyArg<A> {\n  (): A\n}\n\n/**\n * @example\n * import { FunctionN } from \"effect/Function\"\n *\n * const sum: FunctionN<[number, number], number> = (a, b) => a + b\n *\n * @since 2.0.0\n */\nexport interface FunctionN<A extends ReadonlyArray<unknown>, B> {\n  (...args: A): B\n}\n\n/**\n * The identity function, i.e. A function that returns its input argument.\n *\n * @param a - The input argument.\n *\n * @example\n * import { identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(identity(5), 5)\n *\n * @since 2.0.0\n */\nexport const identity = <A>(a: A): A => a\n\n/**\n * A function that ensures that the type of an expression matches some type,\n * without changing the resulting type of that expression.\n *\n * @example\n * import { satisfies } from \"effect/Function\"\n *\n * const test1 = satisfies<number>()(5 as const)\n *     //^? const test: 5\n *     // @ts-expect-error\n * const test2 = satisfies<string>()(5)\n *     //^? Argument of type 'number' is not assignable to parameter of type 'string'\n *\n * assert.deepStrictEqual(satisfies<number>()(5), 5)\n *\n * @since 2.0.0\n */\nexport const satisfies = <A>() => <B extends A>(b: B) => b\n\n/**\n * Casts the result to the specified type.\n *\n * @param a - The value to be casted to the target type.\n *\n * @example\n * import { unsafeCoerce, identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(unsafeCoerce, identity)\n *\n * @since 2.0.0\n */\nexport const unsafeCoerce: <A, B>(a: A) => B = identity as any\n\n/**\n * Creates a constant value that never changes.\n *\n * This is useful when you want to pass a value to a higher-order function (a function that takes another function as its argument)\n * and want that inner function to always use the same value, no matter how many times it is called.\n *\n * @param value - The constant value to be returned.\n *\n * @example\n * import { constant } from \"effect/Function\"\n *\n * const constNull = constant(null)\n *\n * assert.deepStrictEqual(constNull(), null)\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nexport const constant = <A>(value: A): LazyArg<A> => () => value\n\n/**\n * A thunk that returns always `true`.\n *\n * @example\n * import { constTrue } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constTrue(), true)\n *\n * @since 2.0.0\n */\nexport const constTrue: LazyArg<boolean> = constant(true)\n\n/**\n * A thunk that returns always `false`.\n *\n * @example\n * import { constFalse } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constFalse(), false)\n *\n * @since 2.0.0\n */\nexport const constFalse: LazyArg<boolean> = constant(false)\n\n/**\n * A thunk that returns always `null`.\n *\n * @example\n * import { constNull } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nexport const constNull: LazyArg<null> = constant(null)\n\n/**\n * A thunk that returns always `undefined`.\n *\n * @example\n * import { constUndefined } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constUndefined(), undefined)\n *\n * @since 2.0.0\n */\nexport const constUndefined: LazyArg<undefined> = constant(undefined)\n\n/**\n * A thunk that returns always `void`.\n *\n * @example\n * import { constVoid } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constVoid(), undefined)\n *\n * @since 2.0.0\n */\nexport const constVoid: LazyArg<void> = constUndefined\n\n/**\n * Reverses the order of arguments for a curried function.\n *\n * @param f - A curried function that takes multiple arguments.\n *\n * @example\n * import { flip } from \"effect/Function\"\n *\n * const f = (a: number) => (b: string) => a - b.length\n *\n * assert.deepStrictEqual(flip(f)('aaa')(2), -1)\n *\n * @since 2.0.0\n */\nexport const flip = <A extends Array<unknown>, B extends Array<unknown>, C>(\n  f: (...a: A) => (...b: B) => C\n): (...b: B) => (...a: A) => C =>\n(...b) =>\n(...a) => f(...a)(...b)\n\n/**\n * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n *\n * @param ab - A function that maps from `A` to `B`.\n * @param bc - A function that maps from `B` to `C`.\n *\n * @example\n * import { compose } from \"effect/Function\"\n *\n * const increment = (n: number) => n + 1;\n * const square = (n: number) => n * n;\n *\n * assert.strictEqual(compose(increment, square)(2), 9);\n *\n * @since 2.0.0\n */\nexport const compose: {\n  <B, C>(bc: (b: B) => C): <A>(self: (a: A) => B) => (a: A) => C\n  <A, B, C>(self: (a: A) => B, bc: (b: B) => C): (a: A) => C\n} = dual(2, <A, B, C>(ab: (a: A) => B, bc: (b: B) => C): (a: A) => C => (a) => bc(ab(a)))\n\n/**\n * The `absurd` function is a stub for cases where a value of type `never` is encountered in your code,\n * meaning that it should be impossible for this code to be executed.\n *\n * This function is particularly when it's necessary to specify that certain cases are impossible.\n *\n * @since 2.0.0\n */\nexport const absurd = <A>(_: never): A => {\n  throw new Error(\"Called `absurd` function which should be uncallable\")\n}\n\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from \"effect/Function\"\n *\n * const sumTupled = tupled((x: number, y: number): number => x + y)\n *\n * assert.deepStrictEqual(sumTupled([1, 2]), 3)\n *\n * @since 2.0.0\n */\nexport const tupled = <A extends ReadonlyArray<unknown>, B>(f: (...a: A) => B): (a: A) => B => (a) => f(...a)\n\n/**\n * Inverse function of `tupled`\n *\n * @example\n * import { untupled } from \"effect/Function\"\n *\n * const getFirst = untupled(<A, B>(tuple: [A, B]): A => tuple[0])\n *\n * assert.deepStrictEqual(getFirst(1, 2), 1)\n *\n * @since 2.0.0\n */\nexport const untupled = <A extends ReadonlyArray<unknown>, B>(f: (a: A) => B): (...a: A) => B => (...a) => f(a)\n\n/**\n * Pipes the value of an expression into a pipeline of functions.\n *\n * This is useful in combination with data-last functions as a simulation of methods:\n *\n * ```\n * as.map(f).filter(g) -> pipe(as, map(f), filter(g))\n * ```\n *\n * @example\n * import { pipe } from \"effect/Function\"\n * // Alternatively, you can use the following import syntax, as `pipe` is also conveniently exported from the `effect` entry point:\n * // import { pipe } from \"effect\"\n *\n * const length = (s: string): number => s.length\n * const double = (n: number): number => n * 2\n * const decrement = (n: number): number => n - 1\n *\n * assert.deepStrictEqual(pipe(length(\"hello\"), double, decrement), 9)\n *\n * @since 2.0.0\n */\nexport function pipe<A>(a: A): A\nexport function pipe<A, B>(a: A, ab: (a: A) => B): B\nexport function pipe<A, B, C>(a: A, ab: (a: A) => B, bc: (b: B) => C): C\nexport function pipe<A, B, C, D>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D): D\nexport function pipe<A, B, C, D, E>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E\n): E\nexport function pipe<A, B, C, D, E, F>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F\n): F\nexport function pipe<A, B, C, D, E, F, G>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G\n): G\nexport function pipe<A, B, C, D, E, F, G, H>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H\n): H\nexport function pipe<A, B, C, D, E, F, G, H, I>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I\n): I\nexport function pipe<A, B, C, D, E, F, G, H, I, J>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J\n): J\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K\n): K\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L\n): L\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M\n): M\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N\n): N\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O\n): O\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P\n): P\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q\n): Q\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R\n): R\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R,\n  rs: (r: R) => S\n): S\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R,\n  rs: (r: R) => S,\n  st: (s: S) => T\n): T\nexport function pipe(\n  a: unknown,\n  ab?: Function,\n  bc?: Function,\n  cd?: Function,\n  de?: Function,\n  ef?: Function,\n  fg?: Function,\n  gh?: Function,\n  hi?: Function\n): unknown {\n  switch (arguments.length) {\n    case 1:\n      return a\n    case 2:\n      return ab!(a)\n    case 3:\n      return bc!(ab!(a))\n    case 4:\n      return cd!(bc!(ab!(a)))\n    case 5:\n      return de!(cd!(bc!(ab!(a))))\n    case 6:\n      return ef!(de!(cd!(bc!(ab!(a)))))\n    case 7:\n      return fg!(ef!(de!(cd!(bc!(ab!(a))))))\n    case 8:\n      return gh!(fg!(ef!(de!(cd!(bc!(ab!(a)))))))\n    case 9:\n      return hi!(gh!(fg!(ef!(de!(cd!(bc!(ab!(a))))))))\n    default: {\n      let ret = arguments[0]\n      for (let i = 1; i < arguments.length; i++) {\n        ret = arguments[i](ret)\n      }\n      return ret\n    }\n  }\n}\n\n/**\n * Performs left-to-right function composition. The first argument may have any arity, the remaining arguments must be unary.\n *\n * See also [`pipe`](#pipe).\n *\n * @example\n * import { flow } from \"effect/Function\"\n *\n * const len = (s: string): number => s.length\n * const double = (n: number): number => n * 2\n *\n * const f = flow(len, double)\n *\n * assert.strictEqual(f('aaa'), 6)\n *\n * @since 2.0.0\n */\nexport function flow<A extends ReadonlyArray<unknown>, B>(ab: (...a: A) => B): (...a: A) => B\nexport function flow<A extends ReadonlyArray<unknown>, B, C>(ab: (...a: A) => B, bc: (b: B) => C): (...a: A) => C\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D\n): (...a: A) => D\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E\n): (...a: A) => E\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E, F>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F\n): (...a: A) => F\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E, F, G>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G\n): (...a: A) => G\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E, F, G, H>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H\n): (...a: A) => H\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E, F, G, H, I>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I\n): (...a: A) => I\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E, F, G, H, I, J>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J\n): (...a: A) => J\nexport function flow(\n  ab: Function,\n  bc?: Function,\n  cd?: Function,\n  de?: Function,\n  ef?: Function,\n  fg?: Function,\n  gh?: Function,\n  hi?: Function,\n  ij?: Function\n): unknown {\n  switch (arguments.length) {\n    case 1:\n      return ab\n    case 2:\n      return function(this: unknown) {\n        return bc!(ab.apply(this, arguments))\n      }\n    case 3:\n      return function(this: unknown) {\n        return cd!(bc!(ab.apply(this, arguments)))\n      }\n    case 4:\n      return function(this: unknown) {\n        return de!(cd!(bc!(ab.apply(this, arguments))))\n      }\n    case 5:\n      return function(this: unknown) {\n        return ef!(de!(cd!(bc!(ab.apply(this, arguments)))))\n      }\n    case 6:\n      return function(this: unknown) {\n        return fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments))))))\n      }\n    case 7:\n      return function(this: unknown) {\n        return gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments)))))))\n      }\n    case 8:\n      return function(this: unknown) {\n        return hi!(gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments))))))))\n      }\n    case 9:\n      return function(this: unknown) {\n        return ij!(hi!(gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments)))))))))\n      }\n  }\n  return\n}\n\n/**\n * Type hole simulation.\n *\n * @since 2.0.0\n */\nexport const hole: <T>() => T = unsafeCoerce(absurd)\n\n/**\n * The SK combinator, also known as the \"S-K combinator\" or \"S-combinator\", is a fundamental combinator in the\n * lambda calculus and the SKI combinator calculus.\n *\n * This function is useful for discarding the first argument passed to it and returning the second argument.\n *\n * @param _ - The first argument to be discarded.\n * @param b - The second argument to be returned.\n *\n * @example\n * import { SK } from \"effect/Function\";\n *\n * assert.deepStrictEqual(SK(0, \"hello\"), \"hello\")\n *\n * @since 2.0.0\n */\nexport const SK = <A, B>(_: A, b: B): B => b\n", "/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Equivalence<in A> {\n  (self: A, that: A): boolean\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EquivalenceTypeLambda extends TypeLambda {\n  readonly type: Equivalence<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(isEquivalent: (self: A, that: A) => boolean): Equivalence<A> => (self: A, that: A): boolean =>\n  self === that || isEquivalent(self, that)\n\nconst isStrictEquivalent = (x: unknown, y: unknown) => x === y\n\n/**\n * Return an `Equivalence` that uses strict equality (===) to compare values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const strict: <A>() => Equivalence<A> = () => isStrictEquivalent\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Equivalence<string> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Equivalence<number> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Equivalence<boolean> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Equivalence<bigint> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const symbol: Equivalence<symbol> = strict()\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  <A>(that: Equivalence<A>): (self: Equivalence<A>) => Equivalence<A>\n  <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A> => make((x, y) => self(x, y) && that(x, y)))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  <A>(collection: Iterable<Equivalence<A>>): (self: Equivalence<A>) => Equivalence<A>\n  <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  make((x, y) => {\n    if (!self(x, y)) {\n      return false\n    }\n    for (const equivalence of collection) {\n      if (!equivalence(x, y)) {\n        return false\n      }\n    }\n    return true\n  }))\n\nconst isAlwaysEquivalent: Equivalence<unknown> = (_x, _y) => true\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  combineMany(isAlwaysEquivalent, collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  <B, A>(f: (b: B) => A): (self: Equivalence<A>) => Equivalence<B>\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B>\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B> => make((x, y) => self(f(x), f(y)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Equivalence<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Equivalence<B>): <A>(self: Equivalence<A>) => Equivalence<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> // readonly because invariant\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> =>\n    make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Equivalence<A>>): Equivalence<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n\n    let collectionLength = 0\n    for (const equivalence of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      if (!equivalence(x[collectionLength], y[collectionLength])) {\n        return false\n      }\n      collectionLength++\n    }\n    return true\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Equivalence<A>,\n  collection: Iterable<Equivalence<A>>\n): Equivalence<readonly [A, ...Array<A>]> /* readonly because invariant */ => {\n  const equivalence = all(collection)\n  return make((x, y) => !self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)))\n}\n\n/**\n * Similar to `Promise.all` but operates on `Equivalence`s.\n *\n * ```\n * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>\n * ```\n *\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Equivalence<any>>>(\n  ...elements: T\n): Equivalence<Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(item: Equivalence<A>): Equivalence<ReadonlyArray<A>> =>\n  make((self, that) => {\n    if (self.length !== that.length) {\n      return false\n    }\n\n    for (let i = 0; i < self.length; i++) {\n      const isEq = item(self[i], that[i])\n      if (!isEq) {\n        return false\n      }\n    }\n\n    return true\n  })\n\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends Record<string, Equivalence<any>>>(\n  fields: R\n): Equivalence<{ readonly [K in keyof R]: [R[K]] extends [Equivalence<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      if (!fields[key](self[key], that[key])) {\n        return false\n      }\n    }\n    return true\n  })\n}\n", "import { dual } from \"../Function.js\"\nimport type { Kind, TypeLambda } from \"../HKT.js\"\n\ntype Map<F extends TypeLambda> = {\n  <A, B>(f: (a: A) => B): <R, O, E>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, B>\n  <R, O, E, A, B>(self: Kind<F, R, O, E, A>, f: (a: A) => B): Kind<F, R, O, E, B>\n}\n\ntype FlatMap<F extends TypeLambda> = {\n  <A, R2, O2, E2, B>(\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): <R1, O1, E1>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O1 | O2, E1 | E2, B>\n  <R1, O1, E1, A, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): Kind<F, R1 & R2, O1 | O2, E1 | E2, B>\n}\n\n/** @internal */\nexport const let_ = <F extends TypeLambda>(\n  map: Map<F>\n): {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): <R, O, E>(\n    self: Kind<F, R, O, E, A>\n  ) => Kind<F, R, O, E, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n  <R, O, E, A extends object, N extends string, B>(\n    self: Kind<F, R, O, E, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Kind<F, R, O, E, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n} =>\n  dual(3, <R, O, E, A extends object, N extends string, B>(\n    self: Kind<F, R, O, E, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Kind<F, R, O, E, { [K in keyof A | N]: K extends keyof A ? A[K] : B }> =>\n    map(self, (a) => Object.assign({}, a, { [name]: f(a) }) as any))\n\n/** @internal */\nexport const bindTo = <F extends TypeLambda>(map: Map<F>): {\n  <N extends string>(\n    name: N\n  ): <R, O, E, A>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, { [K in N]: A }>\n  <R, O, E, A, N extends string>(\n    self: Kind<F, R, O, E, A>,\n    name: N\n  ): Kind<F, R, O, E, { [K in N]: A }>\n} =>\n  dual(2, <R, O, E, A, N extends string>(\n    self: Kind<F, R, O, E, A>,\n    name: N\n  ): Kind<F, R, O, E, { [K in N]: A }> => map(self, (a) => ({ [name]: a } as { [K in N]: A })))\n\n/** @internal */\nexport const bind = <F extends TypeLambda>(map: Map<F>, flatMap: FlatMap<F>): {\n  <N extends string, A extends object, R2, O2, E2, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): <R1, O1, E1>(\n    self: Kind<F, R1, O1, E1, A>\n  ) => Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n  <R1, O1, E1, A extends object, N extends string, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n} =>\n  dual(3, <R1, O1, E1, A, N extends string, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B }> =>\n    flatMap(self, (a) =>\n      map(f(a), (b) => Object.assign({}, a, { [name]: b }) as { [K in keyof A | N]: K extends keyof A ? A[K] : B })))\n", "let moduleVersion = \"3.6.5\"\n\nexport const getCurrentVersion = () => moduleVersion\n\nexport const setCurrentVersion = (version: string) => {\n  moduleVersion = version\n}\n", "/**\n * @since 2.0.0\n */\nimport * as version from \"./internal/version.js\"\n\nconst globalStoreId = Symbol.for(`effect/GlobalValue/globalStoreId/${version.getCurrentVersion()}`)\n\nif (!(globalStoreId in globalThis)) {\n  ;(globalThis as any)[globalStoreId] = new Map()\n}\n\nconst globalStore = (globalThis as any)[globalStoreId] as Map<unknown, any>\n\n/**\n * @since 2.0.0\n */\nexport const globalValue = <A>(id: unknown, compute: () => A): A => {\n  if (!globalStore.has(id)) {\n    globalStore.set(id, compute())\n  }\n  return globalStore.get(id)!\n}\n", "/**\n * @since 2.0.0\n */\nimport { dual, isFunction as isFunction_ } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { TupleOf, TupleOfAtLeast } from \"./Types.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Predicate<in A> {\n  (a: A): boolean\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface PredicateTypeLambda extends TypeLambda {\n  readonly type: Predicate<this[\"Target\"]>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Refinement<in A, out B extends A> {\n  (a: A): a is B\n}\n\n/**\n * @since 3.6.0\n * @category type-level\n */\nexport declare namespace Predicate {\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type In<T extends Any> = [T] extends [Predicate<infer _A>] ? _A : never\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Any = Predicate<any>\n}\n\n/**\n * @since 3.6.0\n * @category type-level\n */\nexport declare namespace Refinement {\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type In<T extends Any> = [T] extends [Refinement<infer _A, infer _>] ? _A : never\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Out<T extends Any> = [T] extends [Refinement<infer _, infer _B>] ? _B : never\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Any = Refinement<any, any>\n}\n\n/**\n * Given a `Predicate<A>` returns a `Predicate<B>`\n *\n * @param self - the `Predicate<A>` to be transformed to `Predicate<B>`.\n * @param f - a function to transform `B` to `A`.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const minLength3 = Predicate.mapInput(Number.greaterThan(2), (s: string) => s.length)\n *\n * assert.deepStrictEqual(minLength3(\"a\"), false)\n * assert.deepStrictEqual(minLength3(\"aa\"), false)\n * assert.deepStrictEqual(minLength3(\"aaa\"), true)\n * assert.deepStrictEqual(minLength3(\"aaaa\"), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const mapInput: {\n  <B, A>(f: (b: B) => A): (self: Predicate<A>) => Predicate<B>\n  <A, B>(self: Predicate<A>, f: (b: B) => A): Predicate<B>\n} = dual(2, <A, B>(self: Predicate<A>, f: (b: B) => A): Predicate<B> => (b) => self(f(b)))\n\n/**\n * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n *\n * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n *\n * @example\n * import { isTupleOf } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3];\n * if (isTupleOf(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOf: {\n  <N extends number>(n: N): <T>(self: ReadonlyArray<T>) => self is TupleOf<N, T>\n  <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOf<N, T>\n} = dual(2, <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOf<N, T> => self.length === n)\n\n/**\n * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n *\n * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n *\n * @example\n * import { isTupleOfAtLeast } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3, 4];\n * if (isTupleOfAtLeast(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number, ...number[]]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOfAtLeast: {\n  <N extends number>(n: N): <T>(self: ReadonlyArray<T>) => self is TupleOfAtLeast<N, T>\n  <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOfAtLeast<N, T>\n} = dual(2, <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOfAtLeast<N, T> => self.length >= n)\n\n/**\n * Tests if a value is `truthy`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isTruthy } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTruthy(1), true)\n * assert.deepStrictEqual(isTruthy(0), false)\n * assert.deepStrictEqual(isTruthy(\"\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTruthy = (input: unknown) => !!input\n\n/**\n * Tests if a value is a `Set`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSet } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSet(new Set([1, 2])), true)\n * assert.deepStrictEqual(isSet(new Set()), true)\n * assert.deepStrictEqual(isSet({}), false)\n * assert.deepStrictEqual(isSet(null), false)\n * assert.deepStrictEqual(isSet(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSet = (input: unknown): input is Set<unknown> => input instanceof Set\n\n/**\n * Tests if a value is a `Map`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isMap } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isMap(new Map()), true)\n * assert.deepStrictEqual(isMap({}), false)\n * assert.deepStrictEqual(isMap(null), false)\n * assert.deepStrictEqual(isMap(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isMap = (input: unknown): input is Map<unknown, unknown> => input instanceof Map\n\n/**\n * Tests if a value is a `string`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isString } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isString(\"a\"), true)\n *\n * assert.deepStrictEqual(isString(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isString = (input: unknown): input is string => typeof input === \"string\"\n\n/**\n * Tests if a value is a `number`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNumber } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNumber(2), true)\n *\n * assert.deepStrictEqual(isNumber(\"2\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNumber = (input: unknown): input is number => typeof input === \"number\"\n\n/**\n * Tests if a value is a `boolean`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBoolean } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBoolean(true), true)\n *\n * assert.deepStrictEqual(isBoolean(\"true\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBoolean = (input: unknown): input is boolean => typeof input === \"boolean\"\n\n/**\n * Tests if a value is a `bigint`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBigInt } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBigInt(1n), true)\n *\n * assert.deepStrictEqual(isBigInt(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBigInt = (input: unknown): input is bigint => typeof input === \"bigint\"\n\n/**\n * Tests if a value is a `symbol`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSymbol } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSymbol(Symbol.for(\"a\")), true)\n *\n * assert.deepStrictEqual(isSymbol(\"a\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSymbol = (input: unknown): input is symbol => typeof input === \"symbol\"\n\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n *\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction: (input: unknown) => input is Function = isFunction_\n\n/**\n * Tests if a value is `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUndefined(undefined), true)\n *\n * assert.deepStrictEqual(isUndefined(null), false)\n * assert.deepStrictEqual(isUndefined(\"undefined\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUndefined = (input: unknown): input is undefined => input === undefined\n\n/**\n * Tests if a value is not `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotUndefined(null), true)\n * assert.deepStrictEqual(isNotUndefined(\"undefined\"), true)\n *\n * assert.deepStrictEqual(isNotUndefined(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotUndefined = <A>(input: A): input is Exclude<A, undefined> => input !== undefined\n\n/**\n * Tests if a value is `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNull(null), true)\n *\n * assert.deepStrictEqual(isNull(undefined), false)\n * assert.deepStrictEqual(isNull(\"null\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNull = (input: unknown): input is null => input === null\n\n/**\n * Tests if a value is not `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNull(undefined), true)\n * assert.deepStrictEqual(isNotNull(\"null\"), true)\n *\n * assert.deepStrictEqual(isNotNull(null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotNull = <A>(input: A): input is Exclude<A, null> => input !== null\n\n/**\n * A guard that always fails.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isNever } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNever(null), false)\n * assert.deepStrictEqual(isNever(undefined), false)\n * assert.deepStrictEqual(isNever({}), false)\n * assert.deepStrictEqual(isNever([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNever: (input: unknown) => input is never = (_: unknown): _ is never => false\n\n/**\n * A guard that always succeeds.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isUnknown } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUnknown(null), true)\n * assert.deepStrictEqual(isUnknown(undefined), true)\n *\n * assert.deepStrictEqual(isUnknown({}), true)\n * assert.deepStrictEqual(isUnknown([]), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUnknown: (input: unknown) => input is unknown = (_): _ is unknown => true\n\nconst isRecordOrArray = (input: unknown) => typeof input === \"object\" && input !== null\n\n/**\n * Tests if a value is an `object`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isObject } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isObject({}), true)\n * assert.deepStrictEqual(isObject([]), true)\n *\n * assert.deepStrictEqual(isObject(null), false)\n * assert.deepStrictEqual(isObject(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isObject = (input: unknown): input is object => isRecordOrArray(input) || isFunction(input)\n\n/**\n * Checks whether a value is an `object` containing a specified property key.\n *\n * @param property - The field to check within the object.\n * @param self - The value to examine.\n *\n * @category guards\n * @since 2.0.0\n */\nexport const hasProperty: {\n  <P extends PropertyKey>(property: P): (self: unknown) => self is { [K in P]: unknown }\n  <P extends PropertyKey>(self: unknown, property: P): self is { [K in P]: unknown }\n} = dual(\n  2,\n  <P extends PropertyKey>(self: unknown, property: P): self is { [K in P]: unknown } =>\n    isObject(self) && (property in self)\n)\n\n/**\n * Tests if a value is an `object` with a property `_tag` that matches the given tag.\n *\n * @param input - The value to test.\n * @param tag - The tag to test for.\n *\n * @example\n * import { isTagged } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTagged(1, \"a\"), false)\n * assert.deepStrictEqual(isTagged(null, \"a\"), false)\n * assert.deepStrictEqual(isTagged({}, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ a: \"a\" }, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ _tag: \"a\" }, \"a\"), true)\n * assert.deepStrictEqual(isTagged(\"a\")({ _tag: \"a\" }), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTagged: {\n  <K extends string>(tag: K): (self: unknown) => self is { _tag: K }\n  <K extends string>(self: unknown, tag: K): self is { _tag: K }\n} = dual(\n  2,\n  <K extends string>(self: unknown, tag: K): self is { _tag: K } => hasProperty(self, \"_tag\") && self[\"_tag\"] === tag\n)\n\n/**\n * A guard that succeeds when the input is `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNullable(null), true)\n * assert.deepStrictEqual(isNullable(undefined), true)\n *\n * assert.deepStrictEqual(isNullable({}), false)\n * assert.deepStrictEqual(isNullable([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNullable = <A>(input: A): input is Extract<A, null | undefined> => input === null || input === undefined\n\n/**\n * A guard that succeeds when the input is not `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNullable({}), true)\n * assert.deepStrictEqual(isNotNullable([]), true)\n *\n * assert.deepStrictEqual(isNotNullable(null), false)\n * assert.deepStrictEqual(isNotNullable(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotNullable = <A>(input: A): input is NonNullable<A> => input !== null && input !== undefined\n\n/**\n * A guard that succeeds when the input is an `Error`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isError } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isError(new Error()), true)\n *\n * assert.deepStrictEqual(isError(null), false)\n * assert.deepStrictEqual(isError({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isError = (input: unknown): input is Error => input instanceof Error\n\n/**\n * A guard that succeeds when the input is a `Uint8Array`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUint8Array } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUint8Array(new Uint8Array()), true)\n *\n * assert.deepStrictEqual(isUint8Array(null), false)\n * assert.deepStrictEqual(isUint8Array({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUint8Array = (input: unknown): input is Uint8Array => input instanceof Uint8Array\n\n/**\n * A guard that succeeds when the input is a `Date`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isDate } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isDate(new Date()), true)\n *\n * assert.deepStrictEqual(isDate(null), false)\n * assert.deepStrictEqual(isDate({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isDate = (input: unknown): input is Date => input instanceof Date\n\n/**\n * A guard that succeeds when the input is an `Iterable`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isIterable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isIterable([]), true)\n * assert.deepStrictEqual(isIterable(new Set()), true)\n *\n * assert.deepStrictEqual(isIterable(null), false)\n * assert.deepStrictEqual(isIterable({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isIterable = (input: unknown): input is Iterable<unknown> => hasProperty(input, Symbol.iterator)\n\n/**\n * A guard that succeeds when the input is a record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isRecord({}), true)\n * assert.deepStrictEqual(isRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isRecord([]), false)\n * assert.deepStrictEqual(isRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isRecord(null), false)\n * assert.deepStrictEqual(isRecord(undefined), false)\n * assert.deepStrictEqual(isRecord(() => null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isRecord = (input: unknown): input is { [x: string | symbol]: unknown } =>\n  isRecordOrArray(input) && !Array.isArray(input)\n\n/**\n * A guard that succeeds when the input is a readonly record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isReadonlyRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isReadonlyRecord({}), true)\n * assert.deepStrictEqual(isReadonlyRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isReadonlyRecord([]), false)\n * assert.deepStrictEqual(isReadonlyRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isReadonlyRecord(null), false)\n * assert.deepStrictEqual(isReadonlyRecord(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isReadonlyRecord: (\n  input: unknown\n) => input is { readonly [x: string | symbol]: unknown } = isRecord\n\n/**\n * A guard that succeeds when the input is a Promise.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isPromise } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isPromise({}), false)\n * assert.deepStrictEqual(isPromise(Promise.resolve(\"hello\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isPromise = (\n  input: unknown\n): input is Promise<unknown> =>\n  hasProperty(input, \"then\") && \"catch\" in input && isFunction(input.then) && isFunction(input.catch)\n\n/**\n * @category guards\n * @since 2.0.0\n */\nexport const isPromiseLike = (\n  input: unknown\n): input is PromiseLike<unknown> => hasProperty(input, \"then\") && isFunction(input.then)\n\n/**\n * @since 2.0.0\n */\nexport const compose: {\n  <A, B extends A, C extends B>(bc: Refinement<B, C>): (ab: Refinement<A, B>) => Refinement<A, C>\n  <A, B extends A>(bc: Predicate<NoInfer<B>>): (ab: Refinement<A, B>) => Refinement<A, B>\n  <A, B extends A, C extends B>(ab: Refinement<A, B>, bc: Refinement<B, C>): Refinement<A, C>\n  <A, B extends A>(ab: Refinement<A, B>, bc: Predicate<NoInfer<B>>): Refinement<A, B>\n} = dual(\n  2,\n  <A, B extends A, C extends B>(ab: Refinement<A, B>, bc: Refinement<B, C>): Refinement<A, C> => (a): a is C =>\n    ab(a) && bc(a)\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product =\n  <A, B>(self: Predicate<A>, that: Predicate<B>): Predicate<readonly [A, B]> /* readonly because contravariant */ =>\n  ([a, b]) => self(a) && that(b)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(\n  collection: Iterable<Predicate<A>>\n): Predicate<ReadonlyArray<A>> => {\n  return (as) => {\n    let collectionIndex = 0\n    for (const p of collection) {\n      if (collectionIndex >= as.length) {\n        break\n      }\n      if (p(as[collectionIndex]) === false) {\n        return false\n      }\n      collectionIndex++\n    }\n    return true\n  }\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Predicate<A>,\n  collection: Iterable<Predicate<A>>\n): Predicate<readonly [A, ...Array<A>]> /* readonly because contravariant */ => {\n  const rest = all(collection)\n  return ([head, ...tail]) => self(head) === false ? false : rest(tail)\n}\n\n/**\n * Similar to `Promise.all` but operates on `Predicate`s.\n *\n * ```\n * [Refinement<A, B>, Refinement<C, D>, ...] -> Refinement<[A, C, ...], [B, D, ...]>\n * [Predicate<A>, Predicate<B>, ...] -> Predicate<[A, B, ...]>\n * [Refinement<A, B>, Predicate<C>, ...] -> Refinement<[A, C, ...], [B, C, ...]>\n * ```\n *\n * @since 2.0.0\n */\nexport const tuple: {\n  <T extends ReadonlyArray<Predicate.Any>>(\n    ...elements: T\n  ): [Extract<T[number], Refinement.Any>] extends [never] ? Predicate<{ readonly [I in keyof T]: Predicate.In<T[I]> }>\n    : Refinement<\n      { readonly [I in keyof T]: T[I] extends Refinement.Any ? Refinement.In<T[I]> : Predicate.In<T[I]> },\n      { readonly [I in keyof T]: T[I] extends Refinement.Any ? Refinement.Out<T[I]> : Predicate.In<T[I]> }\n    >\n} = (...elements: ReadonlyArray<Predicate.Any>) => all(elements) as any\n\n/**\n * ```\n * { ab: Refinement<A, B>; cd: Refinement<C, D>, ... } -> Refinement<{ ab: A; cd: C; ... }, { ab: B; cd: D; ... }>\n * { a: Predicate<A, B>; b: Predicate<B>, ... } -> Predicate<{ a: A; b: B; ... }>\n * { ab: Refinement<A, B>; c: Predicate<C>, ... } -> Refinement<{ ab: A; c: C; ... }, { ab: B; c: \u0421; ... }>\n * ```\n *\n * @since 2.0.0\n */\nexport const struct: {\n  <R extends Record<string, Predicate.Any>>(\n    fields: R\n  ): [Extract<R[keyof R], Refinement.Any>] extends [never] ?\n    Predicate<{ readonly [K in keyof R]: Predicate.In<R[K]> }> :\n    Refinement<\n      { readonly [K in keyof R]: R[K] extends Refinement.Any ? Refinement.In<R[K]> : Predicate.In<R[K]> },\n      { readonly [K in keyof R]: R[K] extends Refinement.Any ? Refinement.Out<R[K]> : Predicate.In<R[K]> }\n    >\n} = (<R extends Record<string, Predicate.Any>>(fields: R) => {\n  const keys = Object.keys(fields)\n  return (a: Record<string, unknown>) => {\n    for (const key of keys) {\n      if (!fields[key](a[key])) {\n        return false\n      }\n    }\n    return true\n  }\n}) as any\n\n/**\n * Negates the result of a given predicate.\n *\n * @param self - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const isPositive = Predicate.not(Number.lessThan(0))\n *\n * assert.deepStrictEqual(isPositive(-1), false)\n * assert.deepStrictEqual(isPositive(0), true)\n * assert.deepStrictEqual(isPositive(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const not = <A>(self: Predicate<A>): Predicate<A> => (a) => !self(a)\n\n/**\n * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n *\n * assert.deepStrictEqual(nonZero(-1), true)\n * assert.deepStrictEqual(nonZero(0), false)\n * assert.deepStrictEqual(nonZero(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const or: {\n  <A, C extends A>(that: Refinement<A, C>): <B extends A>(self: Refinement<A, B>) => Refinement<A, B | C>\n  <A, B extends A, C extends A>(self: Refinement<A, B>, that: Refinement<A, C>): Refinement<A, B | C>\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) || that(a))\n\n/**\n * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * const minLength = (n: number) => (s: string) => s.length >= n\n * const maxLength = (n: number) => (s: string) => s.length <= n\n *\n * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n *\n * assert.deepStrictEqual(length(2)(\"aa\"), true)\n * assert.deepStrictEqual(length(2)(\"a\"), false)\n * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const and: {\n  <A, C extends A>(that: Refinement<A, C>): <B extends A>(self: Refinement<A, B>) => Refinement<A, B & C>\n  <A, B extends A, C extends A>(self: Refinement<A, B>, that: Refinement<A, C>): Refinement<A, B & C>\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) && that(a))\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const xor: {\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) !== that(a))\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const eqv: {\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) === that(a))\n\n/**\n * Represents the logical implication combinator for predicates. In formal\n * logic, the implication operator `->` denotes that if the first proposition\n * (antecedent) is true, then the second proposition (consequent) must also be\n * true. In simpler terms, `p implies q` can be interpreted as \"if p then q\". If\n * the first predicate holds, then the second predicate must hold\n * for the given context.\n *\n * In practical terms within TypeScript, `p implies q` is equivalent to `!p || (p && q)`.\n *\n * Note that if the antecedent is `false`, the result is `true` by default\n * because the outcome of the consequent cannot be determined.\n *\n * This function is useful in situations where you need to enforce rules or\n * constraints that are contingent on certain conditions.\n * It proves especially helpful in defining property tests.\n *\n * The example below illustrates the transitive property of order using the\n * `implies` function. In simple terms, if `a <= b` and `b <= c`, then `a <= c`\n * must be true.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * type Triple = {\n *   readonly a: number\n *   readonly b: number\n *   readonly c: number\n * }\n *\n * const transitivity = Predicate.implies(\n *   // antecedent\n *   (input: Triple) => input.a <= input.b && input.b <= input.c,\n *   // consequent\n *   (input: Triple) => input.a <= input.c\n * )\n *\n * assert.equal(transitivity({ a: 1, b: 2, c: 3 }), true)\n * // antecedent is `false`, so the result is `true`\n * assert.equal(transitivity({ a: 1, b: 0, c: 0 }), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const implies: {\n  <A>(consequent: Predicate<A>): (antecedent: Predicate<A>) => Predicate<A>\n  <A>(antecedent: Predicate<A>, consequent: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(antecedent: Predicate<A>, consequent: Predicate<A>): Predicate<A> => (a) => antecedent(a) ? consequent(a) : true\n)\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const nor: {\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => !(self(a) || that(a))\n)\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const nand: {\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => !(self(a) && that(a))\n)\n\n/**\n * @category elements\n * @since 2.0.0\n */\nexport const every = <A>(collection: Iterable<Predicate<A>>): Predicate<A> => (a: A) => {\n  for (const p of collection) {\n    if (!p(a)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @category elements\n * @since 2.0.0\n */\nexport const some = <A>(collection: Iterable<Predicate<A>>): Predicate<A> => (a) => {\n  for (const p of collection) {\n    if (p(a)) {\n      return true\n    }\n  }\n  return false\n}\n", "/**\n * @since 2.0.0\n */\n\n/** @internal */\nexport const getBugErrorMessage = (message: string) =>\n  `BUG: ${message} - please report an issue at https://github.com/Effect-TS/effect/issues`\n", "/**\n * @since 2.0.0\n */\nimport { identity } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport type { Kind, TypeLambda } from \"./HKT.js\"\nimport { getBugErrorMessage } from \"./internal/errors.js\"\nimport { isNullable, isObject } from \"./Predicate.js\"\nimport type * as Types from \"./Types.js\"\n\n/*\n * Copyright 2014 Thom Chiovoloni, released under the MIT license.\n *\n * A random number generator based on the basic implementation of the PCG algorithm,\n * as described here: http://www.pcg-random.org/\n *\n * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random\n *\n * forked from https://github.com/frptools\n *\n * @since 2.0.0\n */\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const GenKindTypeId: unique symbol = Symbol.for(\"effect/Gen/GenKind\")\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type GenKindTypeId = typeof GenKindTypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface GenKind<F extends TypeLambda, R, O, E, A> extends Variance<F, R, O, E> {\n  readonly value: Kind<F, R, O, E, A>\n\n  [Symbol.iterator](): Generator<GenKind<F, R, O, E, A>, A>\n}\n\n/**\n * @category predicates\n * @since 3.0.6\n */\nexport const isGenKind = (u: unknown): u is GenKind<any, any, any, any, any> => isObject(u) && GenKindTypeId in u\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class GenKindImpl<F extends TypeLambda, R, O, E, A> implements GenKind<F, R, O, E, A> {\n  constructor(\n    /**\n     * @since 2.0.0\n     */\n    readonly value: Kind<F, R, O, E, A>\n  ) {}\n\n  /**\n   * @since 2.0.0\n   */\n  get _F() {\n    return identity\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _R() {\n    return (_: R) => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _O() {\n    return (_: never): O => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _E() {\n    return (_: never): E => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  readonly [GenKindTypeId]: typeof GenKindTypeId = GenKindTypeId;\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): Generator<GenKind<F, R, O, E, A>, A> {\n    return new SingleShotGen<GenKind<F, R, O, E, A>, A>(this as any)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class SingleShotGen<T, A> implements Generator<T, A> {\n  private called = false\n\n  constructor(readonly self: T) {}\n\n  /**\n   * @since 2.0.0\n   */\n  next(a: A): IteratorResult<T, A> {\n    return this.called ?\n      ({\n        value: a,\n        done: true\n      }) :\n      (this.called = true,\n        ({\n          value: this.self,\n          done: false\n        }))\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  return(a: A): IteratorResult<T, A> {\n    return ({\n      value: a,\n      done: true\n    })\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  throw(e: unknown): IteratorResult<T, A> {\n    throw e\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): Generator<T, A> {\n    return new SingleShotGen<T, A>(this.self)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const makeGenKind = <F extends TypeLambda, R, O, E, A>(\n  kind: Kind<F, R, O, E, A>\n): GenKind<F, R, O, E, A> => new GenKindImpl(kind)\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Variance<in out F extends TypeLambda, in R, out O, out E> {\n  readonly [GenKindTypeId]: GenKindTypeId\n  readonly _F: Types.Invariant<F>\n  readonly _R: Types.Contravariant<R>\n  readonly _O: Types.Covariant<O>\n  readonly _E: Types.Covariant<E>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Gen<F extends TypeLambda, Z> {\n  <Self, K extends Variance<F, any, any, any> | YieldWrap<Kind<F, any, any, any, any>>, A>(\n    ...args:\n      | [\n        self: Self,\n        body: (this: Self, resume: Z) => Generator<K, A, never>\n      ]\n      | [\n        body: (resume: Z) => Generator<K, A, never>\n      ]\n  ): Kind<\n    F,\n    [K] extends [Variance<F, infer R, any, any>] ? R\n      : [K] extends [YieldWrap<Kind<F, infer R, any, any, any>>] ? R\n      : never,\n    [K] extends [Variance<F, any, infer O, any>] ? O\n      : [K] extends [YieldWrap<Kind<F, any, infer O, any, any>>] ? O\n      : never,\n    [K] extends [Variance<F, any, any, infer E>] ? E\n      : [K] extends [YieldWrap<Kind<F, any, any, infer E, any>>] ? E\n      : never,\n    A\n  >\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Adapter<Z extends TypeLambda> {\n  <_R, _O, _E, _A>(\n    self: Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, _R, _O, _E, _A>(a: A, ab: (a: A) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, _R, _O, _E, _A>(a: A, ab: (a: A) => B, bc: (b: B) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (g: H) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => T,\n    tu: (s: T) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n}\n\n/**\n * @category adapters\n * @since 2.0.0\n */\nexport const adapter: <F extends TypeLambda>() => Adapter<F> = () => (function() {\n  let x = arguments[0]\n  for (let i = 1; i < arguments.length; i++) {\n    x = arguments[i](x)\n  }\n  return new GenKindImpl(x) as any\n})\n\nconst defaultIncHi = 0x14057b7e\nconst defaultIncLo = 0xf767814f\nconst MUL_HI = 0x5851f42d >>> 0\nconst MUL_LO = 0x4c957f2d >>> 0\nconst BIT_53 = 9007199254740992.0\nconst BIT_27 = 134217728.0\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type PCGRandomState = [number, number, number, number]\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type OptionalNumber = number | null | undefined\n\n/**\n * PCG is a family of simple fast space-efficient statistically good algorithms\n * for random number generation. Unlike many general-purpose RNGs, they are also\n * hard to predict.\n *\n * @category model\n * @since 2.0.0\n */\nexport class PCGRandom {\n  private _state!: Int32Array\n\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seed - The low 32 bits of the seed (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seed?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seedHi - The high 32 bits of the seed.\n   * @param seedLo - The low 32 bits of the seed.\n   * @param inc - The low 32 bits of the incrementer (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seedHi: OptionalNumber, seedLo: OptionalNumber, inc?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seedHi - The high 32 bits of the seed.\n   * @param seedLo - The low 32 bits of the seed.\n   * @param incHi - The high 32 bits of the incrementer.\n   * @param incLo - The low 32 bits of the incrementer.\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(\n    seedHi: OptionalNumber,\n    seedLo: OptionalNumber,\n    incHi: OptionalNumber,\n    incLo: OptionalNumber\n  )\n  constructor(\n    seedHi?: OptionalNumber,\n    seedLo?: OptionalNumber,\n    incHi?: OptionalNumber,\n    incLo?: OptionalNumber\n  ) {\n    if (isNullable(seedLo) && isNullable(seedHi)) {\n      seedLo = (Math.random() * 0xffffffff) >>> 0\n      seedHi = 0\n    } else if (isNullable(seedLo)) {\n      seedLo = seedHi\n      seedHi = 0\n    }\n    if (isNullable(incLo) && isNullable(incHi)) {\n      incLo = this._state ? this._state[3] : defaultIncLo\n      incHi = this._state ? this._state[2] : defaultIncHi\n    } else if (isNullable(incLo)) {\n      incLo = <number> incHi\n      incHi = 0\n    }\n\n    this._state = new Int32Array([0, 0, (<number> incHi) >>> 0, ((incLo || 0) | 1) >>> 0])\n    this._next()\n    add64(\n      this._state,\n      this._state[0]!,\n      this._state[1]!,\n      (<number> seedHi) >>> 0,\n      (<number> seedLo) >>> 0\n    )\n    this._next()\n    return this\n  }\n\n  /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  getState(): PCGRandomState {\n    return [this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!]\n  }\n\n  /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */\n  setState(state: PCGRandomState) {\n    this._state[0] = state[0]\n    this._state[1] = state[1]\n    this._state[2] = state[2]\n    this._state[3] = state[3] | 1\n  }\n\n  /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */\n  integer(max: number) {\n    if (!max) {\n      return this._next()\n    }\n    max = max >>> 0\n    if ((max & (max - 1)) === 0) {\n      return this._next() & (max - 1) // fast path for power of 2\n    }\n\n    let num = 0\n    const skew = (-max >>> 0) % max >>> 0\n    for (num = this._next(); num < skew; num = this._next()) {\n      // this loop will rarely execute more than twice,\n      // and is intentionally empty\n    }\n    return num % max\n  }\n\n  /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  number() {\n    const hi = (this._next() & 0x03ffffff) * 1.0\n    const lo = (this._next() & 0x07ffffff) * 1.0\n    return (hi * BIT_27 + lo) / BIT_53\n  }\n\n  /** @internal */\n  private _next() {\n    // save current state (what we'll use for this number)\n    const oldHi = this._state[0]! >>> 0\n    const oldLo = this._state[1]! >>> 0\n\n    // churn LCG.\n    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO)\n    add64(this._state, this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!)\n\n    // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27\n    let xsHi = oldHi >>> 18\n    let xsLo = ((oldLo >>> 18) | (oldHi << 14)) >>> 0\n    xsHi = (xsHi ^ oldHi) >>> 0\n    xsLo = (xsLo ^ oldLo) >>> 0\n    const xorshifted = ((xsLo >>> 27) | (xsHi << 5)) >>> 0\n    // rotate xorshifted right a random amount, based on the most sig. 5 bits\n    // bits of the old state.\n    const rot = oldHi >>> 27\n    const rot2 = ((-rot >>> 0) & 31) >>> 0\n    return ((xorshifted >>> rot) | (xorshifted << rot2)) >>> 0\n  }\n}\n\nfunction mul64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let c1 = ((aLo >>> 16) * (bLo & 0xffff)) >>> 0\n  let c0 = ((aLo & 0xffff) * (bLo >>> 16)) >>> 0\n\n  let lo = ((aLo & 0xffff) * (bLo & 0xffff)) >>> 0\n  let hi = ((aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16))) >>> 0\n\n  c0 = (c0 << 16) >>> 0\n  lo = (lo + c0) >>> 0\n  if ((lo >>> 0) < (c0 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  c1 = (c1 << 16) >>> 0\n  lo = (lo + c1) >>> 0\n  if ((lo >>> 0) < (c1 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  hi = (hi + Math.imul(aLo, bHi)) >>> 0\n  hi = (hi + Math.imul(aHi, bLo)) >>> 0\n\n  out[0] = hi\n  out[1] = lo\n}\n\n// add two 64 bit numbers (given in parts), and store the result in `out`.\nfunction add64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let hi = (aHi + bHi) >>> 0\n  const lo = (aLo + bLo) >>> 0\n  if ((lo >>> 0) < (aLo >>> 0)) {\n    hi = (hi + 1) | 0\n  }\n  out[0] = hi\n  out[1] = lo\n}\n\n/**\n * @since 3.0.6\n */\nexport const YieldWrapTypeId: unique symbol = Symbol.for(\"effect/Utils/YieldWrap\")\n\n/**\n * @since 3.0.6\n */\nexport class YieldWrap<T> {\n  /**\n   * @since 3.0.6\n   */\n  readonly #value: T\n  constructor(value: T) {\n    this.#value = value\n  }\n  /**\n   * @since 3.0.6\n   */\n  [YieldWrapTypeId](): T {\n    return this.#value\n  }\n}\n\n/**\n * @since 3.0.6\n */\nexport function yieldWrapGet<T>(self: YieldWrap<T>): T {\n  if (typeof self === \"object\" && self !== null && YieldWrapTypeId in self) {\n    return self[YieldWrapTypeId]()\n  }\n  throw new Error(getBugErrorMessage(\"yieldWrapGet\"))\n}\n\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegionState = globalValue(\n  \"effect/Utils/isStructuralRegion\",\n  (): { enabled: boolean; tester: ((a: unknown, b: unknown) => boolean) | undefined } => ({\n    enabled: false,\n    tester: undefined\n  })\n)\n\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegion = <A>(body: () => A, tester?: (a: unknown, b: unknown) => boolean): A => {\n  const current = structuralRegionState.enabled\n  const currentTester = structuralRegionState.tester\n  structuralRegionState.enabled = true\n  if (tester) {\n    structuralRegionState.tester = tester\n  }\n  try {\n    return body()\n  } finally {\n    structuralRegionState.enabled = current\n    structuralRegionState.tester = currentTester\n  }\n}\n\nconst tracingFunction = (name: string) => {\n  const wrap = {\n    [name]<A>(body: () => A) {\n      return body()\n    }\n  }\n  return function<A>(fn: () => A): A {\n    return wrap[name](fn)\n  }\n}\n\n/**\n * @since 3.2.2\n * @status experimental\n * @category tracing\n */\nexport const internalCall = tracingFunction(\"effect_internal_function\")\n", "/**\n * @since 2.0.0\n */\nimport { pipe } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { structuralRegionState } from \"./Utils.js\"\n\n/** @internal */\nconst randomHashCache = globalValue(\n  Symbol.for(\"effect/Hash/randomHashCache\"),\n  () => new WeakMap<object, number>()\n)\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Hash\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Hash {\n  [symbol](): number\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const hash: <A>(self: A) => number = <A>(self: A) => {\n  if (structuralRegionState.enabled === true) {\n    return 0\n  }\n\n  switch (typeof self) {\n    case \"number\":\n      return number(self)\n    case \"bigint\":\n      return string(self.toString(10))\n    case \"boolean\":\n      return string(String(self))\n    case \"symbol\":\n      return string(String(self))\n    case \"string\":\n      return string(self)\n    case \"undefined\":\n      return string(\"undefined\")\n    case \"function\":\n    case \"object\": {\n      if (self === null) {\n        return string(\"null\")\n      } else if (self instanceof Date) {\n        return hash(self.toISOString())\n      } else if (isHash(self)) {\n        return self[symbol]()\n      } else {\n        return random(self)\n      }\n    }\n    default:\n      throw new Error(\n        `BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`\n      )\n  }\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const random: <A extends object>(self: A) => number = (self) => {\n  if (!randomHashCache.has(self)) {\n    randomHashCache.set(self, number(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)))\n  }\n  return randomHashCache.get(self)!\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const combine: (b: number) => (self: number) => number = (b) => (self) => (self * 53) ^ b\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const optimize = (n: number): number => (n & 0xbfffffff) | ((n >>> 1) & 0x40000000)\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isHash = (u: unknown): u is Hash => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const number = (n: number) => {\n  if (n !== n || n === Infinity) {\n    return 0\n  }\n  let h = n | 0\n  if (h !== n) {\n    h ^= n * 0xffffffff\n  }\n  while (n > 0xffffffff) {\n    h ^= n /= 0xffffffff\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const string = (str: string) => {\n  let h = 5381, i = str.length\n  while (i) {\n    h = (h * 33) ^ str.charCodeAt(--i)\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structureKeys = <A extends object>(o: A, keys: ReadonlyArray<keyof A>) => {\n  let h = 12289\n  for (let i = 0; i < keys.length; i++) {\n    h ^= pipe(string(keys[i]! as string), combine(hash((o as any)[keys[i]!])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structure = <A extends object>(o: A) =>\n  structureKeys(o, Object.keys(o) as unknown as ReadonlyArray<keyof A>)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const array = <A>(arr: ReadonlyArray<A>) => {\n  let h = 6151\n  for (let i = 0; i < arr.length; i++) {\n    h = pipe(h, combine(hash(arr[i])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const cached: {\n  (self: object): (hash: number) => number\n  (self: object, hash: number): number\n} = function() {\n  if (arguments.length === 1) {\n    const self = arguments[0] as object\n    return function(hash: number) {\n      Object.defineProperty(self, symbol, {\n        value() {\n          return hash\n        },\n        enumerable: false\n      })\n      return hash\n    } as any\n  }\n  const self = arguments[0] as object\n  const hash = arguments[1] as number\n  Object.defineProperty(self, symbol, {\n    value() {\n      return hash\n    },\n    enumerable: false\n  })\n\n  return hash\n}\n", "/**\n * @since 2.0.0\n */\nimport type { Equivalence } from \"./Equivalence.js\"\nimport * as Hash from \"./Hash.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { structuralRegionState } from \"./Utils.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Equal\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Equal extends Hash.Hash {\n  [symbol](that: Equal): boolean\n}\n\n/**\n * @since 2.0.0\n * @category equality\n */\nexport function equals<B>(that: B): <A>(self: A) => boolean\nexport function equals<A, B>(self: A, that: B): boolean\nexport function equals(): any {\n  if (arguments.length === 1) {\n    return (self: unknown) => compareBoth(self, arguments[0])\n  }\n  return compareBoth(arguments[0], arguments[1])\n}\n\nfunction compareBoth(self: unknown, that: unknown): boolean {\n  if (self === that) {\n    return true\n  }\n  const selfType = typeof self\n  if (selfType !== typeof that) {\n    return false\n  }\n  if (selfType === \"object\" || selfType === \"function\") {\n    if (self !== null && that !== null) {\n      if (isEqual(self) && isEqual(that)) {\n        if (Hash.hash(self) === Hash.hash(that) && self[symbol](that)) {\n          return true\n        } else {\n          return structuralRegionState.enabled && structuralRegionState.tester\n            ? structuralRegionState.tester(self, that)\n            : false\n        }\n      } else if (self instanceof Date && that instanceof Date) {\n        return self.toISOString() === that.toISOString()\n      }\n    }\n    if (structuralRegionState.enabled) {\n      if (Array.isArray(self) && Array.isArray(that)) {\n        return self.length === that.length && self.every((v, i) => compareBoth(v, that[i]))\n      }\n      if (Object.getPrototypeOf(self) === Object.prototype && Object.getPrototypeOf(self) === Object.prototype) {\n        const keysSelf = Object.keys(self as any)\n        const keysThat = Object.keys(that as any)\n        if (keysSelf.length === keysThat.length) {\n          for (const key of keysSelf) {\n            // @ts-expect-error\n            if (!(key in that && compareBoth(self[key], that[key]))) {\n              return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false\n            }\n          }\n          return true\n        }\n      }\n      return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false\n    }\n  }\n\n  return structuralRegionState.enabled && structuralRegionState.tester\n    ? structuralRegionState.tester(self, that)\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isEqual = (u: unknown): u is Equal => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const equivalence: <A>() => Equivalence<A> = () => equals\n", "/**\n * @since 2.0.0\n */\n\nimport { hasProperty, isFunction } from \"./Predicate.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const NodeInspectSymbol = Symbol.for(\"nodejs.util.inspect.custom\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type NodeInspectSymbol = typeof NodeInspectSymbol\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Inspectable {\n  toString(): string\n  toJSON(): unknown\n  [NodeInspectSymbol](): unknown\n}\n\n/**\n * @since 2.0.0\n */\nexport const toJSON = (x: unknown): unknown => {\n  if (\n    hasProperty(x, \"toJSON\") && isFunction(x[\"toJSON\"]) &&\n    x[\"toJSON\"].length === 0\n  ) {\n    return x.toJSON()\n  } else if (Array.isArray(x)) {\n    return x.map(toJSON)\n  }\n  return x\n}\n\n/**\n * @since 2.0.0\n */\nexport const format = (x: unknown): string => JSON.stringify(x, null, 2)\n\n/**\n * @since 2.0.0\n */\nexport const BaseProto: Inspectable = {\n  toJSON() {\n    return toJSON(this)\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport abstract class Class {\n  /**\n   * @since 2.0.0\n   */\n  abstract toJSON(): unknown\n  /**\n   * @since 2.0.0\n   */\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  /**\n   * @since 2.0.0\n   */\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const toStringUnknown = (u: unknown, whitespace: number | string | undefined = 2): string => {\n  try {\n    return typeof u === \"object\" ? stringifyCircular(u, whitespace) : String(u)\n  } catch (_) {\n    return String(u)\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const stringifyCircular = (obj: unknown, whitespace?: number | string | undefined): string => {\n  let cache: Array<unknown> = []\n  const retVal = JSON.stringify(\n    obj,\n    (_key, value) =>\n      typeof value === \"object\" && value !== null\n        ? cache.includes(value)\n          ? undefined // circular reference\n          : cache.push(value) && value\n        : value,\n    whitespace\n  )\n  ;(cache as any) = undefined\n  return retVal\n}\n", "/**\n * @since 2.0.0\n */\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Pipeable {\n  pipe<A>(this: A): A\n  pipe<A, B>(this: A, ab: (_: A) => B): B\n  pipe<A, B, C>(this: A, ab: (_: A) => B, bc: (_: B) => C): C\n  pipe<A, B, C, D>(this: A, ab: (_: A) => B, bc: (_: B) => C, cd: (_: C) => D): D\n  pipe<A, B, C, D, E>(this: A, ab: (_: A) => B, bc: (_: B) => C, cd: (_: C) => D, de: (_: D) => E): E\n  pipe<A, B, C, D, E, F>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F\n  ): F\n  pipe<A, B, C, D, E, F, G>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G\n  ): G\n  pipe<A, B, C, D, E, F, G, H>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H\n  ): H\n  pipe<A, B, C, D, E, F, G, H, I>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I\n  ): I\n  pipe<A, B, C, D, E, F, G, H, I, J>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J\n  ): J\n  pipe<A, B, C, D, E, F, G, H, I, J, K>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K\n  ): K\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L\n  ): L\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M\n  ): M\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N\n  ): N\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O\n  ): O\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P\n  ): P\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q\n  ): Q\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R\n  ): R\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S\n  ): S\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T\n  ): T\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n}\n\n/**\n * @since 2.0.0\n */\nexport const pipeArguments = <A>(self: A, args: IArguments): unknown => {\n  switch (args.length) {\n    case 0:\n      return self\n    case 1:\n      return args[0](self)\n    case 2:\n      return args[1](args[0](self))\n    case 3:\n      return args[2](args[1](args[0](self)))\n    case 4:\n      return args[3](args[2](args[1](args[0](self))))\n    case 5:\n      return args[4](args[3](args[2](args[1](args[0](self)))))\n    case 6:\n      return args[5](args[4](args[3](args[2](args[1](args[0](self))))))\n    case 7:\n      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))\n    case 8:\n      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))))\n    case 9:\n      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))))\n    default: {\n      let ret = self\n      for (let i = 0, len = args.length; i < len; i++) {\n        ret = args[i](ret)\n      }\n      return ret\n    }\n  }\n}\n", "/** @internal */\nexport type OP_ASYNC = typeof OP_ASYNC\n\n/** @internal */\nexport const OP_ASYNC = \"Async\" as const\n\n/** @internal */\nexport type OP_COMMIT = typeof OP_COMMIT\n\n/** @internal */\nexport const OP_COMMIT = \"Commit\" as const\n\n/** @internal */\nexport type OP_FAILURE = typeof OP_FAILURE\n\n/** @internal */\nexport const OP_FAILURE = \"Failure\" as const\n\n/** @internal */\nexport type OP_ON_FAILURE = typeof OP_ON_FAILURE\n\n/** @internal */\nexport const OP_ON_FAILURE = \"OnFailure\" as const\n\n/** @internal */\nexport type OP_ON_SUCCESS = typeof OP_ON_SUCCESS\n\n/** @internal */\nexport const OP_ON_SUCCESS = \"OnSuccess\" as const\n\n/** @internal */\nexport type OP_ON_SUCCESS_AND_FAILURE = typeof OP_ON_SUCCESS_AND_FAILURE\n\n/** @internal */\nexport const OP_ON_SUCCESS_AND_FAILURE = \"OnSuccessAndFailure\" as const\n\n/** @internal */\nexport type OP_SUCCESS = typeof OP_SUCCESS\n\n/** @internal */\nexport const OP_SUCCESS = \"Success\" as const\n\n/** @internal */\nexport type OP_SYNC = typeof OP_SYNC\n\n/** @internal */\nexport const OP_SYNC = \"Sync\" as const\n\n/** @internal */\nexport const OP_TAG = \"Tag\" as const\n\n/** @internal */\nexport type OP_TAG = typeof OP_TAG\n\n/** @internal */\nexport type OP_UPDATE_RUNTIME_FLAGS = typeof OP_UPDATE_RUNTIME_FLAGS\n\n/** @internal */\nexport const OP_UPDATE_RUNTIME_FLAGS = \"UpdateRuntimeFlags\" as const\n\n/** @internal */\nexport type OP_WHILE = typeof OP_WHILE\n\n/** @internal */\nexport const OP_WHILE = \"While\" as const\n\n/** @internal */\nexport type OP_WITH_RUNTIME = typeof OP_WITH_RUNTIME\n\n/** @internal */\nexport const OP_WITH_RUNTIME = \"WithRuntime\" as const\n\n/** @internal */\nexport type OP_YIELD = typeof OP_YIELD\n\n/** @internal */\nexport const OP_YIELD = \"Yield\" as const\n\n/** @internal */\nexport type OP_REVERT_FLAGS = typeof OP_REVERT_FLAGS\n\n/** @internal */\nexport const OP_REVERT_FLAGS = \"RevertFlags\" as const\n", "import type * as Channel from \"../Channel.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Effectable from \"../Effectable.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type * as Sink from \"../Sink.js\"\nimport type * as Stream from \"../Stream.js\"\nimport { SingleShotGen, YieldWrap } from \"../Utils.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as version from \"./version.js\"\n\n/** @internal */\nexport const EffectTypeId: Effect.EffectTypeId = Symbol.for(\"effect/Effect\") as Effect.EffectTypeId\n\n/** @internal */\nexport const StreamTypeId: Stream.StreamTypeId = Symbol.for(\"effect/Stream\") as Stream.StreamTypeId\n\n/** @internal */\nexport const SinkTypeId: Sink.SinkTypeId = Symbol.for(\"effect/Sink\") as Sink.SinkTypeId\n\n/** @internal */\nexport const ChannelTypeId: Channel.ChannelTypeId = Symbol.for(\"effect/Channel\") as Channel.ChannelTypeId\n\n/** @internal */\nexport const effectVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _,\n\n  _V: version.getCurrentVersion()\n}\n\nconst sinkVariance = {\n  /* c8 ignore next */\n  _A: (_: never) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _L: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nconst channelVariance = {\n  /* c8 ignore next */\n  _Env: (_: never) => _,\n  /* c8 ignore next */\n  _InErr: (_: unknown) => _,\n  /* c8 ignore next */\n  _InElem: (_: unknown) => _,\n  /* c8 ignore next */\n  _InDone: (_: unknown) => _,\n  /* c8 ignore next */\n  _OutErr: (_: never) => _,\n  /* c8 ignore next */\n  _OutElem: (_: never) => _,\n  /* c8 ignore next */\n  _OutDone: (_: never) => _\n}\n\n/** @internal */\nexport const EffectPrototype: Effect.Effect<never> & Equal.Equal = {\n  [EffectTypeId]: effectVariance,\n  [StreamTypeId]: effectVariance,\n  [SinkTypeId]: sinkVariance,\n  [ChannelTypeId]: channelVariance,\n  [Equal.symbol](that: any) {\n    return this === that\n  },\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.random(this))\n  },\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this)) as any\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const StructuralPrototype: Equal.Equal = {\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.structure(this))\n  },\n  [Equal.symbol](this: Equal.Equal, that: Equal.Equal) {\n    const selfKeys = Object.keys(this)\n    const thatKeys = Object.keys(that as object)\n    if (selfKeys.length !== thatKeys.length) {\n      return false\n    }\n    for (const key of selfKeys) {\n      if (!(key in (that as object) && Equal.equals((this as any)[key], (that as any)[key]))) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/** @internal */\nexport const CommitPrototype: Effect.Effect<never> = {\n  ...EffectPrototype,\n  _op: OpCodes.OP_COMMIT\n} as any\n\n/** @internal */\nexport const StructuralCommitPrototype: Effect.Effect<never> = {\n  ...CommitPrototype,\n  ...StructuralPrototype\n} as any\n\n/** @internal */\nexport const Base: Effectable.CommitPrimitive = (function() {\n  function Base() {}\n  Base.prototype = CommitPrototype\n  return Base as any\n})()\n\n/** @internal */\nexport const StructuralBase: Effectable.CommitPrimitive = (function() {\n  function Base() {}\n  Base.prototype = StructuralCommitPrototype\n  return Base as any\n})()\n", "/**\n * @since 2.0.0\n */\n\nimport * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport { EffectPrototype } from \"./effectable.js\"\n\nconst TypeId: Option.TypeId = Symbol.for(\"effect/Option\") as Option.TypeId\n\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _A: (_: never) => _\n  },\n  [NodeInspectSymbol]<A>(this: Option.Option<A>) {\n    return this.toJSON()\n  },\n  toString<A>(this: Option.Option<A>) {\n    return format(this.toJSON())\n  }\n}\n\nconst SomeProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Some\",\n  _op: \"Some\",\n  [Equal.symbol]<A>(this: Option.Some<A>, that: unknown): boolean {\n    return isOption(that) && isSome(that) && Equal.equals(this.value, that.value)\n  },\n  [Hash.symbol]<A>(this: Option.Some<A>) {\n    return Hash.cached(this, Hash.combine(Hash.hash(this._tag))(Hash.hash(this.value)))\n  },\n  toJSON<A>(this: Option.Some<A>) {\n    return {\n      _id: \"Option\",\n      _tag: this._tag,\n      value: toJSON(this.value)\n    }\n  }\n})\n\nconst NoneHash = Hash.hash(\"None\")\nconst NoneProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"None\",\n  _op: \"None\",\n  [Equal.symbol]<A>(this: Option.None<A>, that: unknown): boolean {\n    return isOption(that) && isNone(that)\n  },\n  [Hash.symbol]<A>(this: Option.None<A>) {\n    return NoneHash\n  },\n  toJSON<A>(this: Option.None<A>) {\n    return {\n      _id: \"Option\",\n      _tag: this._tag\n    }\n  }\n})\n\n/** @internal */\nexport const isOption = (input: unknown): input is Option.Option<unknown> => hasProperty(input, TypeId)\n\n/** @internal */\nexport const isNone = <A>(fa: Option.Option<A>): fa is Option.None<A> => fa._tag === \"None\"\n\n/** @internal */\nexport const isSome = <A>(fa: Option.Option<A>): fa is Option.Some<A> => fa._tag === \"Some\"\n\n/** @internal */\nexport const none: Option.Option<never> = Object.create(NoneProto)\n\n/** @internal */\nexport const some = <A>(value: A): Option.Option<A> => {\n  const a = Object.create(SomeProto)\n  a.value = value\n  return a\n}\n", "/**\n * @since 2.0.0\n */\n\nimport type * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport { dual } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type { Option } from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport { EffectPrototype } from \"./effectable.js\"\nimport * as option from \"./option.js\"\n\n/**\n * @internal\n */\nexport const TypeId: Either.TypeId = Symbol.for(\"effect/Either\") as Either.TypeId\n\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _R: (_: never) => _\n  },\n  [NodeInspectSymbol]<L, R>(this: Either.Either<R, L>) {\n    return this.toJSON()\n  },\n  toString<L, R>(this: Either.Left<L, R>) {\n    return format(this.toJSON())\n  }\n}\n\nconst RightProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Right\",\n  _op: \"Right\",\n  [Equal.symbol]<L, R>(this: Either.Right<L, R>, that: unknown): boolean {\n    return isEither(that) && isRight(that) && Equal.equals(this.right, that.right)\n  },\n  [Hash.symbol]<L, R>(this: Either.Right<L, R>) {\n    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.right))\n  },\n  toJSON<L, R>(this: Either.Right<L, R>) {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      right: toJSON(this.right)\n    }\n  }\n})\n\nconst LeftProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Left\",\n  _op: \"Left\",\n  [Equal.symbol]<L, R>(this: Either.Left<L, R>, that: unknown): boolean {\n    return isEither(that) && isLeft(that) && Equal.equals(this.left, that.left)\n  },\n  [Hash.symbol]<L, R>(this: Either.Left<L, R>) {\n    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.left))\n  },\n  toJSON<E, A>(this: Either.Left<E, A>) {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      left: toJSON(this.left)\n    }\n  }\n})\n\n/** @internal */\nexport const isEither = (input: unknown): input is Either.Either<unknown, unknown> => hasProperty(input, TypeId)\n\n/** @internal */\nexport const isLeft = <R, L>(ma: Either.Either<R, L>): ma is Either.Left<L, R> => ma._tag === \"Left\"\n\n/** @internal */\nexport const isRight = <R, L>(ma: Either.Either<R, L>): ma is Either.Right<L, R> => ma._tag === \"Right\"\n\n/** @internal */\nexport const left = <L>(left: L): Either.Either<never, L> => {\n  const a = Object.create(LeftProto)\n  a.left = left\n  return a\n}\n\n/** @internal */\nexport const right = <R>(right: R): Either.Either<R> => {\n  const a = Object.create(RightProto)\n  a.right = right\n  return a\n}\n\n/** @internal */\nexport const getLeft = <R, L>(\n  self: Either.Either<R, L>\n): Option<L> => (isRight(self) ? option.none : option.some(self.left))\n\n/** @internal */\nexport const getRight = <R, L>(\n  self: Either.Either<R, L>\n): Option<R> => (isLeft(self) ? option.none : option.some(self.right))\n\n/** @internal */\nexport const fromOption: {\n  <L>(onNone: () => L): <R>(self: Option<R>) => Either.Either<R, L>\n  <R, L>(self: Option<R>, onNone: () => L): Either.Either<R, L>\n} = dual(\n  2,\n  <R, L>(self: Option<R>, onNone: () => L): Either.Either<R, L> =>\n    option.isNone(self) ? left(onNone()) : right(self.value)\n)\n", "/**\n * @since 2.0.0\n */\n\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constNull, constUndefined, dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as either from \"./internal/either.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport { isFunction } from \"./Predicate.js\"\nimport type { Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport * as Gen from \"./Utils.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type Either<R, L = never> = Left<L, R> | Right<L, R>\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const TypeId: unique symbol = either.TypeId\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Left<out L, out R> extends Pipeable, Inspectable {\n  readonly _tag: \"Left\"\n  readonly _op: \"Left\"\n  readonly left: L\n  readonly [TypeId]: {\n    readonly _R: Covariant<R>\n    readonly _L: Covariant<L>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EitherUnify<this>\n  [Unify.ignoreSymbol]?: EitherUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Right<out L, out R> extends Pipeable, Inspectable {\n  readonly _tag: \"Right\"\n  readonly _op: \"Right\"\n  readonly right: R\n  readonly [TypeId]: {\n    readonly _R: Covariant<R>\n    readonly _L: Covariant<L>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EitherUnify<this>\n  [Unify.ignoreSymbol]?: EitherUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EitherUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Either?: () => A[Unify.typeSymbol] extends Either<infer R0, infer L0> | infer _ ? Either<R0, L0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EitherUnifyIgnore {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EitherTypeLambda extends TypeLambda {\n  readonly type: Either<this[\"Target\"], this[\"Out1\"]>\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Either {\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Left<T extends Either<any, any>> = [T] extends [Either<infer _A, infer _E>] ? _E : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Right<T extends Either<any, any>> = [T] extends [Either<infer _A, infer _E>] ? _A : never\n}\n\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const right: <R>(right: R) => Either<R> = either.right\n\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const left: <L>(left: L) => Either<never, L> = either.left\n\n/**\n * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromNullable: {\n  <R, L>(onNullable: (right: R) => L): (self: R) => Either<NonNullable<R>, L>\n  <R, L>(self: R, onNullable: (right: R) => L): Either<NonNullable<R>, L>\n} = dual(\n  2,\n  <R, L>(self: R, onNullable: (right: R) => L): Either<NonNullable<R>, L> =>\n    self == null ? left(onNullable(self)) : right(self as NonNullable<R>)\n)\n\n/**\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromOption: {\n  <L>(onNone: () => L): <R>(self: Option<R>) => Either<R, L>\n  <R, L>(self: Option<R>, onNone: () => L): Either<R, L>\n} = either.fromOption\n\nconst try_: {\n  <R, L>(\n    options: {\n      readonly try: LazyArg<R>\n      readonly catch: (error: unknown) => L\n    }\n  ): Either<R, L>\n  <R>(evaluate: LazyArg<R>): Either<R, unknown>\n} = (<R, L>(\n  evaluate: LazyArg<R> | {\n    readonly try: LazyArg<R>\n    readonly catch: (error: unknown) => L\n  }\n) => {\n  if (isFunction(evaluate)) {\n    try {\n      return right(evaluate())\n    } catch (e) {\n      return left(e)\n    }\n  } else {\n    try {\n      return right(evaluate.try())\n    } catch (e) {\n      return left(evaluate.catch(e))\n    }\n  }\n}) as any\n\nexport {\n  /**\n   * Imports a synchronous side-effect into a pure `Either` value, translating any\n   * thrown exceptions into typed failed eithers creating with `Either.left`.\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  try_ as try\n}\n\n/**\n * Tests if a value is a `Either`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isEither(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isEither(Either.left(\"a\")), true)\n * assert.deepStrictEqual(Either.isEither({ right: 1 }), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEither: (input: unknown) => input is Either<unknown, unknown> = either.isEither\n\n/**\n * Determine if a `Either` is a `Left`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isLeft(Either.right(1)), false)\n * assert.deepStrictEqual(Either.isLeft(Either.left(\"a\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isLeft: <R, L>(self: Either<R, L>) => self is Left<L, R> = either.isLeft\n\n/**\n * Determine if a `Either` is a `Right`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isRight(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isRight(Either.left(\"a\")), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isRight: <R, L>(self: Either<R, L>) => self is Right<L, R> = either.isRight\n\n/**\n * Converts a `Either` to an `Option` discarding the `Left`.\n *\n * Alias of {@link toOption}.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Either.getRight(Either.left('err')), Option.none())\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getRight: <R, L>(self: Either<R, L>) => Option<R> = either.getRight\n\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getLeft(Either.right('ok')), Option.none())\n * assert.deepStrictEqual(Either.getLeft(Either.left('err')), Option.some('err'))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getLeft: <R, L>(self: Either<R, L>) => Option<L> = either.getLeft\n\n/**\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <R, L>({ left, right }: {\n  right: Equivalence.Equivalence<R>\n  left: Equivalence.Equivalence<L>\n}): Equivalence.Equivalence<Either<R, L>> =>\n  Equivalence.make((x, y) =>\n    isLeft(x) ?\n      isLeft(y) && left(x.left, y.left) :\n      isRight(y) && right(x.right, y.right)\n  )\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth: {\n  <L, L2, R, R2>(options: {\n    readonly onLeft: (left: L) => L2\n    readonly onRight: (right: R) => R2\n  }): (self: Either<R, L>) => Either<R2, L2>\n  <L, R, L2, R2>(self: Either<R, L>, options: {\n    readonly onLeft: (left: L) => L2\n    readonly onRight: (right: R) => R2\n  }): Either<R2, L2>\n} = dual(\n  2,\n  <L, R, L2, R2>(self: Either<R, L>, { onLeft, onRight }: {\n    readonly onLeft: (left: L) => L2\n    readonly onRight: (right: R) => R2\n  }): Either<R2, L2> => isLeft(self) ? left(onLeft(self.left)) : right(onRight(self.right))\n)\n\n/**\n * Maps the `Left` side of an `Either` value to a new `Either` value.\n *\n * @param self - The input `Either` value to map.\n * @param f - A transformation function to apply to the `Left` value of the input `Either`.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapLeft: {\n  <L, L2>(f: (left: L) => L2): <R>(self: Either<R, L>) => Either<R, L2>\n  <R, L, L2>(self: Either<R, L>, f: (left: L) => L2): Either<R, L2>\n} = dual(\n  2,\n  <R, L1, L2>(self: Either<R, L1>, f: (left: L1) => L2): Either<R, L2> =>\n    isLeft(self) ? left(f(self.left)) : right(self.right)\n)\n\n/**\n * Maps the `Right` side of an `Either` value to a new `Either` value.\n *\n * @param self - An `Either` to map\n * @param f - The function to map over the value of the `Either`\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  <R, R2>(f: (right: R) => R2): <L>(self: Either<R, L>) => Either<R2, L>\n  <R, L, R2>(self: Either<R, L>, f: (right: R) => R2): Either<R2, L>\n} = dual(\n  2,\n  <R1, L, R2>(self: Either<R1, L>, f: (right: R1) => R2): Either<R2, L> =>\n    isRight(self) ? right(f(self.right)) : left(self.left)\n)\n\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n * if the value is a `Right` the inner value is applied to the `onRight` function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n *\n * const onRight = (value: number): string => `Ok: ${value}`\n *\n * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n * assert.deepStrictEqual(\n *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n *   'strings: string 1, string 2'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  <L, B, R, C = B>(options: {\n    readonly onLeft: (left: L) => B\n    readonly onRight: (right: R) => C\n  }): (self: Either<R, L>) => B | C\n  <R, L, B, C = B>(self: Either<R, L>, options: {\n    readonly onLeft: (left: L) => B\n    readonly onRight: (right: R) => C\n  }): B | C\n} = dual(\n  2,\n  <R, L, B, C = B>(self: Either<R, L>, { onLeft, onRight }: {\n    readonly onLeft: (left: L) => B\n    readonly onRight: (right: R) => C\n  }): B | C => isLeft(self) ? onLeft(self.left) : onRight(self.right)\n)\n\n/**\n * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n * or `Left` of the result of the provided function if the predicate returns false\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     0,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @category lifting\n * @since 3.4.0\n */\nexport const liftPredicate: {\n  <A, B extends A, E>(refinement: Refinement<NoInfer<A>, B>, orLeftWith: (a: NoInfer<A>) => E): (a: A) => Either<B, E>\n  <A, E>(\n    predicate: Predicate<NoInfer<A>>,\n    orLeftWith: (a: NoInfer<A>) => E\n  ): (a: A) => Either<A, E>\n  <A, E, B extends A>(\n    self: A,\n    refinement: Refinement<A, B>,\n    orLeftWith: (a: A) => E\n  ): Either<B, E>\n  <A, E>(\n    self: A,\n    predicate: Predicate<NoInfer<A>>,\n    orLeftWith: (a: NoInfer<A>) => E\n  ): Either<A, E>\n} = dual(\n  3,\n  <A, E>(a: A, predicate: Predicate<A>, orLeftWith: (a: A) => E): Either<A, E> =>\n    predicate(a) ? right(a) : left(orLeftWith(a))\n)\n\n/**\n * Filter the right value with the provided function.\n * If the predicate fails, set the left value with the result of the provided function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(1),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(0),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrLeft: {\n  <R, B extends R, L2>(\n    refinement: Refinement<NoInfer<R>, B>,\n    orLeftWith: (right: NoInfer<R>) => L2\n  ): <L>(self: Either<R, L>) => Either<B, L2 | L>\n  <R, L2>(\n    predicate: Predicate<NoInfer<R>>,\n    orLeftWith: (right: NoInfer<R>) => L2\n  ): <L>(self: Either<R, L>) => Either<R, L2 | L>\n  <R, L, B extends R, L2>(\n    self: Either<R, L>,\n    refinement: Refinement<R, B>,\n    orLeftWith: (right: R) => L2\n  ): Either<B, L | L2>\n  <R, L, E2>(self: Either<R, L>, predicate: Predicate<R>, orLeftWith: (right: R) => E2): Either<R, L | E2>\n} = dual(3, <R, L, E2>(\n  self: Either<R, L>,\n  predicate: Predicate<R>,\n  orLeftWith: (right: R) => E2\n): Either<R, L | E2> => flatMap(self, (r) => predicate(r) ? right(r) : left(orLeftWith(r))))\n\n/**\n * @category getters\n * @since 2.0.0\n */\nexport const merge: <R, L>(self: Either<R, L>) => L | R = match({\n  onLeft: identity,\n  onRight: identity\n})\n\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrElse: {\n  <L, R2>(onLeft: (left: L) => R2): <R>(self: Either<R, L>) => R2 | R\n  <R, L, R2>(self: Either<R, L>, onLeft: (left: L) => R2): R | R2\n} = dual(\n  2,\n  <R, L, B>(self: Either<R, L>, onLeft: (left: L) => B): R | B => isLeft(self) ? onLeft(self.left) : self.right\n)\n\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrNull(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrNull(Either.left(\"a\")), null)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrNull: <R, L>(self: Either<R, L>) => R | null = getOrElse(constNull)\n\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrUndefined(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrUndefined(Either.left(\"a\")), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrUndefined: <R, L>(self: Either<R, L>) => R | undefined = getOrElse(constUndefined)\n\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Either` to extract the value from.\n * @param onLeft - A function that will be called if the `Either` is `Left`. It returns the error to be thrown.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n *   1\n * )\n * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrowWith: {\n  <L>(onLeft: (left: L) => unknown): <A>(self: Either<A, L>) => A\n  <R, L>(self: Either<R, L>, onLeft: (left: L) => unknown): R\n} = dual(2, <R, L>(self: Either<R, L>, onLeft: (left: L) => unknown): R => {\n  if (isRight(self)) {\n    return self.right\n  }\n  throw onLeft(self.left)\n})\n\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Either` to extract the value from.\n * @throws `Error(\"getOrThrow called on a Left\")`\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrThrow(Either.right(1)), 1)\n * assert.throws(() => Either.getOrThrow(Either.left(\"error\")))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrow: <R, L>(self: Either<R, L>) => R = getOrThrowWith(() =>\n  new Error(\"getOrThrow called on a Left\")\n)\n\n/**\n * Returns `self` if it is a `Right` or `that` otherwise.\n *\n * @param self - The input `Either` value to check and potentially return.\n * @param that - A function that takes the error value from `self` (if it's a `Left`) and returns a new `Either` value.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElse: {\n  <L, R2, L2>(that: (left: L) => Either<R2, L2>): <R>(self: Either<R, L>) => Either<R | R2, L2>\n  <R, L, R2, L2>(self: Either<R, L>, that: (left: L) => Either<R2, L2>): Either<R | R2, L2>\n} = dual(\n  2,\n  <R1, L1, R2, L2>(self: Either<R1, L1>, that: (left: L1) => Either<R2, L2>): Either<R1 | R2, L2> =>\n    isLeft(self) ? that(self.left) : right(self.right)\n)\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  <R, R2, L2>(f: (right: R) => Either<R2, L2>): <L>(self: Either<R, L>) => Either<R2, L | L2>\n  <R, L, R2, L2>(self: Either<R, L>, f: (right: R) => Either<R2, L2>): Either<R2, L | L2>\n} = dual(\n  2,\n  <R1, L1, R2, L2>(self: Either<R1, L1>, f: (right: R1) => Either<R2, L2>): Either<R2, L1 | L2> =>\n    isLeft(self) ? left(self.left) : f(self.right)\n)\n\n/**\n * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const andThen: {\n  <R, R2, L2>(f: (right: R) => Either<R2, L2>): <L>(self: Either<R, L>) => Either<R2, L | L2>\n  <R2, L2>(f: Either<R2, L2>): <L, R1>(self: Either<R1, L>) => Either<R2, L | L2>\n  <R, R2>(f: (right: R) => R2): <L>(self: Either<R, L>) => Either<R2, L>\n  <R2>(right: NotFunction<R2>): <R1, L>(self: Either<R1, L>) => Either<R2, L>\n  <R, L, R2, L2>(self: Either<R, L>, f: (right: R) => Either<R2, L2>): Either<R2, L | L2>\n  <R, L, R2, L2>(self: Either<R, L>, f: Either<R2, L2>): Either<R2, L | L2>\n  <R, L, R2>(self: Either<R, L>, f: (right: R) => R2): Either<R2, L>\n  <R, L, R2>(self: Either<R, L>, f: NotFunction<R2>): Either<R2, L>\n} = dual(\n  2,\n  <R, L, R2, L2>(self: Either<R, L>, f: (right: R) => Either<R2, L2> | Either<R2, L2>): Either<R2, L | L2> =>\n    flatMap(self, (a) => {\n      const b = isFunction(f) ? f(a) : f\n      return isEither(b) ? b : right(b)\n    })\n)\n\n/**\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  <R2, L2, R, B>(\n    that: Either<R2, L2>,\n    f: (right: R, right2: R2) => B\n  ): <L>(self: Either<R, L>) => Either<B, L2 | L>\n  <R, L, R2, L2, B>(\n    self: Either<R, L>,\n    that: Either<R2, L2>,\n    f: (right: R, right2: R2) => B\n  ): Either<B, L | L2>\n} = dual(\n  3,\n  <R, L, R2, L2, B>(self: Either<R, L>, that: Either<R2, L2>, f: (right: R, right2: R2) => B): Either<B, L | L2> =>\n    flatMap(self, (r) => map(that, (r2) => f(r, r2)))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  <R, L2>(that: Either<R, L2>): <R2, L>(self: Either<(right: R) => R2, L>) => Either<R2, L | L2>\n  <R, R2, L, L2>(self: Either<(right: R) => R2, L>, that: Either<R, L2>): Either<R2, L | L2>\n} = dual(\n  2,\n  <R, R2, L, L2>(self: Either<(right: R) => R2, L>, that: Either<R, L2>): Either<R2, L | L2> =>\n    zipWith(self, that, (f, a) => f(a))\n)\n\n/**\n * Takes a structure of `Either`s and returns an `Either` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Either` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Either` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Either` will contain an array.\n *\n * @param fields - the struct of `Either`s to be sequenced.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.all([Either.right(1), Either.right(2)]), Either.right([1, 2]))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.right(\"hello\") }), Either.right({ right: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.left(\"error\") }), Either.left(\"error\"))\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all: <const I extends Iterable<Either<any, any>> | Record<string, Either<any, any>>>(\n  input: I\n) => [I] extends [ReadonlyArray<Either<any, any>>] ? Either<\n    { -readonly [K in keyof I]: [I[K]] extends [Either<infer R, any>] ? R : never },\n    I[number] extends never ? never : [I[number]] extends [Either<any, infer L>] ? L : never\n  >\n  : [I] extends [Iterable<Either<infer R, infer L>>] ? Either<Array<R>, L>\n  : Either<\n    { -readonly [K in keyof I]: [I[K]] extends [Either<infer R, any>] ? R : never },\n    I[keyof I] extends never ? never : [I[keyof I]] extends [Either<any, infer L>] ? L : never\n  > = (\n    input: Iterable<Either<any, any>> | Record<string, Either<any, any>>\n  ): Either<any, any> => {\n    if (Symbol.iterator in input) {\n      const out: Array<Either<any, any>> = []\n      for (const e of (input as Iterable<Either<any, any>>)) {\n        if (isLeft(e)) {\n          return e\n        }\n        out.push(e.right)\n      }\n      return right(out)\n    }\n\n    const out: Record<string, any> = {}\n    for (const key of Object.keys(input)) {\n      const e = input[key]\n      if (isLeft(e)) {\n        return e\n      }\n      out[key] = e.right\n    }\n    return right(out)\n  }\n\n/**\n * Returns an `Either` that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flip = <R, L>(self: Either<R, L>): Either<L, R> => isLeft(self) ? right(self.left) : left(self.right)\n\nconst adapter = Gen.adapter<EitherTypeLambda>()\n\n/**\n * @category generators\n * @since 2.0.0\n */\nexport const gen: Gen.Gen<EitherTypeLambda, Gen.Adapter<EitherTypeLambda>> = (...args) => {\n  const f = (args.length === 1)\n    ? args[0]\n    : args[1].bind(args[0])\n  const iterator = f(adapter)\n  let state: IteratorYieldResult<any> | IteratorReturnResult<any> = iterator.next()\n  if (state.done) {\n    return right(state.value) as any\n  } else {\n    let current = state.value\n    if (Gen.isGenKind(current)) {\n      current = current.value\n    } else {\n      current = Gen.yieldWrapGet(current)\n    }\n    if (isLeft(current)) {\n      return current\n    }\n    while (!state.done) {\n      state = iterator.next(current.right as never)\n      if (!state.done) {\n        current = state.value\n        if (Gen.isGenKind(current)) {\n          current = current.value\n        } else {\n          current = Gen.yieldWrapGet(current)\n        }\n        if (isLeft(current)) {\n          return current\n        }\n      }\n    }\n    return right(state.value)\n  }\n}\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Either<{}> = right({})\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  <N extends string, A extends object, B, L2>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Either<B, L2>\n  ): <L1>(self: Either<A, L1>) => Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, L1 | L2>\n  <A extends object, L1, N extends string, B, L2>(\n    self: Either<A, L1>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Either<B, L2>\n  ): Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, L1 | L2>\n} = doNotation.bind<EitherTypeLambda>(map, flatMap)\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  <N extends string>(name: N): <R, L>(self: Either<R, L>) => Either<{ [K in N]: R }, L>\n  <R, L, N extends string>(self: Either<R, L>, name: N): Either<{ [K in N]: R }, L>\n} = doNotation.bindTo<EitherTypeLambda>(map)\n\nconst let_: {\n  <N extends string, R extends object, B>(\n    name: Exclude<N, keyof R>,\n    f: (r: R) => B\n  ): <L>(self: Either<R, L>) => Either<{ [K in N | keyof R]: K extends keyof R ? R[K] : B }, L>\n  <R extends object, L, N extends string, B>(\n    self: Either<R, L>,\n    name: Exclude<N, keyof R>,\n    f: (r: R) => B\n  ): Either<{ [K in N | keyof R]: K extends keyof R ? R[K] : B }, L>\n} = doNotation.let_<EitherTypeLambda>(map)\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link bind}\n   *\n   * @example\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n", "/**\n * @since 2.0.0\n */\n\nimport type { NonEmptyArray } from \"../Array.js\"\n\n/** @internal */\nexport const isNonEmptyArray = <A>(self: ReadonlyArray<A>): self is NonEmptyArray<A> => self.length > 0\n", "/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Order<in A> {\n  (self: A, that: A): -1 | 0 | 1\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface OrderTypeLambda extends TypeLambda {\n  readonly type: Order<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(\n  compare: (self: A, that: A) => -1 | 0 | 1\n): Order<A> =>\n(self, that) => self === that ? 0 : compare(self, that)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Order<string> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Order<number> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Order<boolean> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Order<bigint> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @since 2.0.0\n */\nexport const reverse = <A>(O: Order<A>): Order<A> => make((self, that) => O(that, self))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  <A>(that: Order<A>): (self: Order<A>) => Order<A>\n  <A>(self: Order<A>, that: Order<A>): Order<A>\n} = dual(2, <A>(self: Order<A>, that: Order<A>): Order<A> =>\n  make((a1, a2) => {\n    const out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    return that(a1, a2)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<A>\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A>\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A> =>\n  make((a1, a2) => {\n    let out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    for (const O of collection) {\n      out = O(a1, a2)\n      if (out !== 0) {\n        return out\n      }\n    }\n    return out\n  }))\n\n/**\n * @since 2.0.0\n */\nexport const empty = <A>(): Order<A> => make(() => 0)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Order<A>>): Order<A> => combineMany(empty(), collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  <B, A>(f: (b: B) => A): (self: Order<A>) => Order<B>\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B>\n} = dual(\n  2,\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B> => make((b1, b2) => self(f(b1), f(b2)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Order<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Order<B>): <A>(self: Order<A>) => Order<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> // readonly because invariant\n} = dual(2, <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> =>\n  make(([xa, xb], [ya, yb]) => {\n    const o = self(xa, ya)\n    return o !== 0 ? o : that(xb, yb)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Order<A>>): Order<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n    let collectionLength = 0\n    for (const O of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      const o = O(x[collectionLength], y[collectionLength])\n      if (o !== 0) {\n        return o\n      }\n      collectionLength++\n    }\n    return 0\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany: {\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<readonly [A, ...Array<A>]> // readonly because invariant\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> // readonly because invariant\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> => {\n  const O = all(collection)\n  return make((x, y) => {\n    const o = self(x[0], y[0])\n    return o !== 0 ? o : O(x.slice(1), y.slice(1))\n  })\n})\n\n/**\n * Similar to `Promise.all` but operates on `Order`s.\n *\n * ```\n * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>\n * ```\n *\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Order<any>>>(\n  ...elements: T\n): Order<Readonly<{ [I in keyof T]: [T[I]] extends [Order<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(O: Order<A>): Order<ReadonlyArray<A>> =>\n  make((self, that) => {\n    const aLen = self.length\n    const bLen = that.length\n    const len = Math.min(aLen, bLen)\n    for (let i = 0; i < len; i++) {\n      const o = O(self[i], that[i])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return number(aLen, bLen)\n  })\n\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends { readonly [x: string]: Order<any> }>(\n  fields: R\n): Order<{ [K in keyof R]: [R[K]] extends [Order<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      const o = fields[key](self[key], that[key])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return 0\n  })\n}\n\n/**\n * Test whether one value is _strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === -1)\n\n/**\n * Test whether one value is _strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === 1)\n\n/**\n * Test whether one value is _non-strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== 1)\n\n/**\n * Test whether one value is _non-strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== -1)\n\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const min = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) < 1 ? self : that)\n\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const max = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) > -1 ? self : that)\n\n/**\n * Clamp a value between a minimum and a maximum.\n *\n * @example\n * import { Order, Number } from \"effect\"\n *\n * const clamp = Order.clamp(Number.Order)({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n *\n * @since 2.0.0\n */\nexport const clamp = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => A\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): A\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): A => min(O)(options.maximum, max(O)(options.minimum, self))\n  )\n\n/**\n * Test whether a value is between a minimum and a maximum (inclusive).\n *\n * @since 2.0.0\n */\nexport const between = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => boolean\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): boolean\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): boolean => !lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum)\n  )\n", "/**\n * @since 2.0.0\n */\nimport type { Either } from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constNull, constUndefined, dual, identity, isFunction } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as either from \"./internal/either.js\"\nimport * as option from \"./internal/option.js\"\nimport type { Order } from \"./Order.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport * as Gen from \"./Utils.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type Option<A> = None<A> | Some<A>\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Option\")\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface None<out A> extends Pipeable, Inspectable {\n  readonly _tag: \"None\"\n  readonly _op: \"None\"\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: OptionUnify<this>\n  [Unify.ignoreSymbol]?: OptionUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Some<out A> extends Pipeable, Inspectable {\n  readonly _tag: \"Some\"\n  readonly _op: \"Some\"\n  readonly value: A\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: OptionUnify<this>\n  [Unify.ignoreSymbol]?: OptionUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface OptionUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Option?: () => A[Unify.typeSymbol] extends Option<infer A0> | infer _ ? Option<A0> : never\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Option {\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Value<T extends Option<any>> = [T] extends [Option<infer _A>] ? _A : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface OptionUnifyIgnore {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface OptionTypeLambda extends TypeLambda {\n  readonly type: Option<this[\"Target\"]>\n}\n\n/**\n * Creates a new `Option` that represents the absence of a value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const none = <A = never>(): Option<A> => option.none\n\n/**\n * Creates a new `Option` that wraps the given value.\n *\n * @param value - The value to wrap.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const some: <A>(value: A) => Option<A> = option.some\n\n/**\n * Tests if a value is a `Option`.\n *\n * @param input - The value to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isOption(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isOption(Option.none()), true)\n * assert.deepStrictEqual(Option.isOption({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isOption: (input: unknown) => input is Option<unknown> = option.isOption\n\n/**\n * Determine if a `Option` is a `None`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isNone(Option.some(1)), false)\n * assert.deepStrictEqual(Option.isNone(Option.none()), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNone: <A>(self: Option<A>) => self is None<A> = option.isNone\n\n/**\n * Determine if a `Option` is a `Some`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isSome(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isSome(Option.none()), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSome: <A>(self: Option<A>) => self is Some<A> = option.isSome\n\n/**\n * Matches the given `Option` and returns either the provided `onNone` value or the result of the provided `onSome`\n * function when passed the `Option`'s value.\n *\n * @param self - The `Option` to match\n * @param onNone - The value to be returned if the `Option` is `None`\n * @param onSome - The function to be called if the `Option` is `Some`, it will be passed the `Option`'s value and its result will be returned\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(Option.some(1), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a some containing 1'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(Option.none(), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a none'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  <B, A, C = B>(options: {\n    readonly onNone: LazyArg<B>\n    readonly onSome: (a: A) => C\n  }): (self: Option<A>) => B | C\n  <A, B, C = B>(self: Option<A>, options: {\n    readonly onNone: LazyArg<B>\n    readonly onSome: (a: A) => C\n  }): B | C\n} = dual(\n  2,\n  <A, B, C = B>(self: Option<A>, { onNone, onSome }: {\n    readonly onNone: LazyArg<B>\n    readonly onSome: (a: A) => C\n  }): B | C => isNone(self) ? onNone() : onSome(self.value)\n)\n\n/**\n * Returns a type guard from a `Option` returning function.\n * This function ensures that a type guard definition is type-safe.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parsePositive = (n: number): Option.Option<number> =>\n *   n > 0 ? Option.some(n) : Option.none()\n *\n * const isPositive = Option.toRefinement(parsePositive)\n *\n * assert.deepStrictEqual(isPositive(1), true)\n * assert.deepStrictEqual(isPositive(-1), false)\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toRefinement = <A, B extends A>(f: (a: A) => Option<B>): (a: A) => a is B => (a: A): a is B => isSome(f(a))\n\n/**\n * Converts an `Iterable` of values into an `Option`. Returns the first value of the `Iterable` wrapped in a `Some`\n * if the `Iterable` is not empty, otherwise returns `None`.\n *\n * @param collection - The `Iterable` to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromIterable([1, 2, 3]), Option.some(1))\n * assert.deepStrictEqual(Option.fromIterable([]), Option.none())\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(collection: Iterable<A>): Option<A> => {\n  for (const a of collection) {\n    return some(a)\n  }\n  return none()\n}\n\n/**\n * Converts a `Either` to an `Option` discarding the error.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Option.getRight(Either.left('err')), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getRight: <R, L>(self: Either<R, L>) => Option<R> = either.getRight\n\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getLeft(Either.right(\"ok\")), Option.none())\n * assert.deepStrictEqual(Option.getLeft(Either.left(\"a\")), Option.some(\"a\"))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getLeft: <R, L>(self: Either<R, L>) => Option<L> = either.getLeft\n\n/**\n * Returns the value of the `Option` if it is `Some`, otherwise returns `onNone`\n *\n * @param self - The `Option` to get the value of.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(1), Option.getOrElse(() => 0)), 1)\n * assert.deepStrictEqual(pipe(Option.none(), Option.getOrElse(() => 0)), 0)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrElse: {\n  <B>(onNone: LazyArg<B>): <A>(self: Option<A>) => B | A\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): A | B\n} = dual(\n  2,\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): A | B => isNone(self) ? onNone() : self.value\n)\n\n/**\n * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The `Option` to return if `self` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.none()\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElse: {\n  <B>(that: LazyArg<Option<B>>): <A>(self: Option<A>) => Option<B | A>\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<A | B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<A | B> => isNone(self) ? that() : self\n)\n\n/**\n * Returns the provided default value as `Some` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElseSome: {\n  <B>(onNone: LazyArg<B>): <A>(self: Option<A>) => Option<B | A>\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): Option<A | B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): Option<A | B> => isNone(self) ? some(onNone()) : self\n)\n\n/**\n * Similar to `orElse`, but instead of returning a simple union, it returns an `Either` object,\n * which contains information about which of the two `Option`s has been chosen.\n *\n * This is useful when it's important to know whether the value was retrieved from the first `Option` or the second option.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The second `Option` to be considered if the first `Option` is `None`.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElseEither: {\n  <B>(that: LazyArg<Option<B>>): <A>(self: Option<A>) => Option<Either<B, A>>\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<Either<B, A>>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<Either<B, A>> =>\n    isNone(self) ? map(that(), either.right) : map(self, either.left)\n)\n\n/**\n * Given an `Iterable` collection of `Option`s, returns the first `Some` found in the collection.\n *\n * @param collection - An iterable collection of `Option` to be searched.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.firstSomeOf([Option.none(), Option.some(1), Option.some(2)]), Option.some(1))\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const firstSomeOf = <T, C extends Iterable<Option<T>> = Iterable<Option<T>>>(\n  collection: C\n): [C] extends [Iterable<Option<infer A>>] ? Option<A> : never => {\n  let out: Option<unknown> = none()\n  for (out of collection) {\n    if (isSome(out)) {\n      return out as any\n    }\n  }\n  return out as any\n}\n\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @param nullableValue - The nullable value to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromNullable(undefined), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(null), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(1), Option.some(1))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromNullable = <A>(\n  nullableValue: A\n): Option<\n  NonNullable<A>\n> => (nullableValue == null ? none() : some(nullableValue as NonNullable<A>))\n\n/**\n * This API is useful for lifting a function that returns `null` or `undefined` into the `Option` context.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const parseOption = Option.liftNullable(parse)\n *\n * assert.deepStrictEqual(parseOption('1'), Option.some(1))\n * assert.deepStrictEqual(parseOption('not a number'), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const liftNullable = <A extends ReadonlyArray<unknown>, B>(\n  f: (...a: A) => B | null | undefined\n): (...a: A) => Option<NonNullable<B>> =>\n(...a) => fromNullable(f(...a))\n\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `null`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrNull(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrNull(Option.none()), null)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrNull: <A>(self: Option<A>) => A | null = getOrElse(constNull)\n\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `undefined`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrUndefined(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrUndefined(Option.none()), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrUndefined: <A>(self: Option<A>) => A | undefined = getOrElse(constUndefined)\n\n/**\n * A utility function that lifts a function that throws exceptions into a function that returns an `Option`.\n *\n * This function is useful for any function that might throw an exception, allowing the developer to handle\n * the exception in a more functional way.\n *\n * @param f - the function that can throw exceptions.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = Option.liftThrowable(JSON.parse)\n *\n * assert.deepStrictEqual(parse(\"1\"), Option.some(1))\n * assert.deepStrictEqual(parse(\"\"), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const liftThrowable = <A extends ReadonlyArray<unknown>, B>(\n  f: (...a: A) => B\n): (...a: A) => Option<B> =>\n(...a) => {\n  try {\n    return some(f(...a))\n  } catch (e) {\n    return none()\n  }\n}\n\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Option` to extract the value from.\n * @param onNone - A function that will be called if the `Option` is `None`. It returns the error to be thrown.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n *   1\n * )\n * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getOrThrowWith: {\n  (onNone: () => unknown): <A>(self: Option<A>) => A\n  <A>(self: Option<A>, onNone: () => unknown): A\n} = dual(2, <A>(self: Option<A>, onNone: () => unknown): A => {\n  if (isSome(self)) {\n    return self.value\n  }\n  throw onNone()\n})\n\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Option` to extract the value from.\n * @throws `Error(\"getOrThrow called on a None\")`\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrThrow(Option.some(1)), 1)\n * assert.throws(() => Option.getOrThrow(Option.none()))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getOrThrow: <A>(self: Option<A>) => A = getOrThrowWith(() => new Error(\"getOrThrow called on a None\"))\n\n/**\n * Maps the `Some` side of an `Option` value to a new `Option` value.\n *\n * @param self - An `Option` to map\n * @param f - The function to map over the value of the `Option`\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): (self: Option<A>) => Option<B>\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B> => isNone(self) ? none() : some(f(self.value))\n)\n\n/**\n * Maps the `Some` value of this `Option` to the specified constant value.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const as: {\n  <B>(b: B): <X>(self: Option<X>) => Option<B>\n} = dual(2, <X, B>(self: Option<X>, b: B): Option<B> => map(self, () => b))\n\n/**\n * Maps the `Some` value of this `Option` to the `void` constant value.\n *\n * This is useful when the value of the `Option` is not needed, but the presence or absence of the value is important.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const asVoid: <_>(self: Option<_>) => Option<void> = as(undefined)\n\nconst void_: Option<void> = some(undefined)\nexport {\n  /**\n   * @since 2.0.0\n   */\n  void_ as void\n}\n\n/**\n * Applies a function to the value of an `Option` and flattens the result, if the input is `Some`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B> => isNone(self) ? none() : f(self.value)\n)\n\n/**\n * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const andThen: {\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  <B>(f: Option<B>): <A>(self: Option<A>) => Option<B>\n  <A, B>(f: (a: A) => B): (self: Option<A>) => Option<B>\n  <B>(f: NotFunction<B>): <A>(self: Option<A>) => Option<B>\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n  <A, B>(self: Option<A>, f: Option<B>): Option<B>\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B>\n  <A, B>(self: Option<A>, f: NotFunction<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B> | Option<B>): Option<B> =>\n    flatMap(self, (a) => {\n      const b = isFunction(f) ? f(a) : f\n      return isOption(b) ? b : some(b)\n    })\n)\n\n/**\n * This is `flatMap` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee1),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee2),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.none()\n * )\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  <A, B>(f: (a: A) => B | null | undefined): (self: Option<A>) => Option<NonNullable<B>>\n  <A, B>(self: Option<A>, f: (a: A) => B | null | undefined): Option<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => B | null | undefined): Option<NonNullable<B>> =>\n    isNone(self) ? none() : fromNullable(f(self.value))\n)\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten: <A>(self: Option<Option<A>>) => Option<A> = flatMap(identity)\n\n/**\n * @category zipping\n * @since 2.0.0\n */\nexport const zipRight: {\n  <B>(that: Option<B>): <_>(self: Option<_>) => Option<B>\n  <X, B>(self: Option<X>, that: Option<B>): Option<B>\n} = dual(2, <X, B>(self: Option<X>, that: Option<B>): Option<B> => flatMap(self, () => that))\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const composeK: {\n  <B, C>(bfc: (b: B) => Option<C>): <A>(afb: (a: A) => Option<B>) => (a: A) => Option<C>\n  <A, B, C>(afb: (a: A) => Option<B>, bfc: (b: B) => Option<C>): (a: A) => Option<C>\n} = dual(2, <A, B, C>(afb: (a: A) => Option<B>, bfc: (b: B) => Option<C>) => (a: A): Option<C> => flatMap(afb(a), bfc))\n\n/**\n * Sequences the specified `that` `Option` but ignores its value.\n *\n * It is useful when we want to chain multiple operations, but only care about the result of `self`.\n *\n * @param that - The `Option` that will be ignored in the chain and discarded\n * @param self - The `Option` we care about\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipLeft: {\n  <_>(that: Option<_>): <A>(self: Option<A>) => Option<A>\n  <A, X>(self: Option<A>, that: Option<X>): Option<A>\n} = dual(2, <A, X>(self: Option<A>, that: Option<X>): Option<A> => tap(self, () => that))\n\n/**\n * Applies the provided function `f` to the value of the `Option` if it is `Some` and returns the original `Option`\n * unless `f` returns `None`, in which case it returns `None`.\n *\n * This function is useful for performing additional computations on the value of the input `Option` without affecting its value.\n *\n * @param f - Function to apply to the value of the `Option` if it is `Some`\n * @param self - The `Option` to apply the function to\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.tap(Option.none(), getInteger), Option.none())\n * assert.deepStrictEqual(Option.tap(Option.some(1), getInteger), Option.some(1))\n * assert.deepStrictEqual(Option.tap(Option.some(1.14), getInteger), Option.none())\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const tap: {\n  <A, X>(f: (a: A) => Option<X>): (self: Option<A>) => Option<A>\n  <A, X>(self: Option<A>, f: (a: A) => Option<X>): Option<A>\n} = dual(2, <A, X>(self: Option<A>, f: (a: A) => Option<X>): Option<A> => flatMap(self, (a) => map(f(a), () => a)))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product = <A, B>(self: Option<A>, that: Option<B>): Option<[A, B]> =>\n  isSome(self) && isSome(that) ? some([self.value, that.value]) : none()\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Option<A>,\n  collection: Iterable<Option<A>>\n): Option<[A, ...Array<A>]> => {\n  if (isNone(self)) {\n    return none()\n  }\n  const out: [A, ...Array<A>] = [self.value]\n  for (const o of collection) {\n    if (isNone(o)) {\n      return none()\n    }\n    out.push(o.value)\n  }\n  return some(out)\n}\n\n/**\n * Takes a structure of `Option`s and returns an `Option` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Option` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Option` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Option` will contain an array.\n *\n * @param fields - the struct of `Option`s to be sequenced.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.all([Option.some(1), Option.some(2)]), Option.some([1, 2]))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.some(\"hello\") }), Option.some({ a: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.none() }), Option.none())\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all: <const I extends Iterable<Option<any>> | Record<string, Option<any>>>(\n  input: I\n) => [I] extends [ReadonlyArray<Option<any>>] ? Option<\n    { -readonly [K in keyof I]: [I[K]] extends [Option<infer A>] ? A : never }\n  >\n  : [I] extends [Iterable<Option<infer A>>] ? Option<Array<A>>\n  : Option<{ -readonly [K in keyof I]: [I[K]] extends [Option<infer A>] ? A : never }> = (\n    input: Iterable<Option<any>> | Record<string, Option<any>>\n  ): Option<any> => {\n    if (Symbol.iterator in input) {\n      const out: Array<Option<any>> = []\n      for (const o of (input as Iterable<Option<any>>)) {\n        if (isNone(o)) {\n          return none()\n        }\n        out.push(o.value)\n      }\n      return some(out)\n    }\n\n    const out: Record<string, any> = {}\n    for (const key of Object.keys(input)) {\n      const o = input[key]\n      if (isNone(o)) {\n        return none()\n      }\n      out[key] = o.value\n    }\n    return some(out)\n  }\n\n/**\n * Zips two `Option` values together using a provided function, returning a new `Option` of the result.\n *\n * @param self - The left-hand side of the zip operation\n * @param that - The right-hand side of the zip operation\n * @param f - The function used to combine the values of the two `Option`s\n *\n * @example\n * import { Option } from \"effect\"\n *\n * type Complex = [real: number, imaginary: number]\n *\n * const complex = (real: number, imaginary: number): Complex => [real, imaginary]\n *\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.some(1), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.some(2), complex), Option.some([1, 2]))\n *\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), complex)(Option.some(2)), Option.some([2, 1]))\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  <B, A, C>(that: Option<B>, f: (a: A, b: B) => C): (self: Option<A>) => Option<C>\n  <A, B, C>(self: Option<A>, that: Option<B>, f: (a: A, b: B) => C): Option<C>\n} = dual(\n  3,\n  <A, B, C>(self: Option<A>, that: Option<B>, f: (a: A, b: B) => C): Option<C> =>\n    map(product(self, that), ([a, b]) => f(a, b))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  <A>(that: Option<A>): <B>(self: Option<(a: A) => B>) => Option<B>\n  <A, B>(self: Option<(a: A) => B>, that: Option<A>): Option<B>\n} = dual(2, <A, B>(self: Option<(a: A) => B>, that: Option<A>): Option<B> => zipWith(self, that, (f, a) => f(a)))\n\n/**\n * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, elements that are `None` are ignored.\n *\n * @param self - The Iterable of `Option<A>` to be reduced.\n * @param b - The initial value of the accumulator.\n * @param f - The reducing function that takes the current accumulator value and the unwrapped value of an `Option<A>`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n * assert.deepStrictEqual(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)), 3)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduceCompact: {\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<Option<A>>) => B\n  <A, B>(self: Iterable<Option<A>>, b: B, f: (b: B, a: A) => B): B\n} = dual(\n  3,\n  <A, B>(self: Iterable<Option<A>>, b: B, f: (b: B, a: A) => B): B => {\n    let out: B = b\n    for (const oa of self) {\n      if (isSome(oa)) {\n        out = f(out, oa.value)\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Transforms an `Option` into an `Array`.\n * If the input is `None`, an empty array is returned.\n * If the input is `Some`, the value is wrapped in an array.\n *\n * @param self - The `Option` to convert to an array.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.toArray(Option.some(1)), [1])\n * assert.deepStrictEqual(Option.toArray(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray = <A>(self: Option<A>): Array<A> => isNone(self) ? [] : [self.value]\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  <A, B, C>(f: (a: A) => Either<C, B>): (self: Option<A>) => [left: Option<B>, right: Option<C>]\n  <A, B, C>(self: Option<A>, f: (a: A) => Either<C, B>): [left: Option<B>, right: Option<C>]\n} = dual(2, <A, B, C>(\n  self: Option<A>,\n  f: (a: A) => Either<C, B>\n): [excluded: Option<B>, satisfying: Option<C>] => {\n  if (isNone(self)) {\n    return [none(), none()]\n  }\n  const e = f(self.value)\n  return either.isLeft(e) ? [some(e.left), none()] : [none(), some(e.right)]\n})\n\n/**\n * Maps over the value of an `Option` and filters out `None`s.\n *\n * Useful when in addition to filtering you also want to change the type of the `Option`.\n *\n * @param self - The `Option` to map over.\n * @param f - A function to apply to the value of the `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const evenNumber = (n: number) => n % 2 === 0 ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.filterMap(Option.none(), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(3), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(2), evenNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B> => isNone(self) ? none() : f(self.value)\n)\n\n/**\n * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n *\n * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n *\n * @param predicate - A predicate function to apply to the `Option` value.\n * @param fb - The `Option` to filter.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * // predicate\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(3), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isEven), Option.some(2))\n *\n * // refinement\n * const isNumber = (v: unknown): v is number => typeof v === \"number\"\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some('hello'), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Option<A>) => Option<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Option<A>) => Option<A>\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): Option<B>\n  <A>(self: Option<A>, predicate: Predicate<A>): Option<A>\n} = dual(\n  2,\n  <A>(self: Option<A>, predicate: Predicate<A>): Option<A> =>\n    filterMap(self, (b) => (predicate(b) ? option.some(b) : option.none))\n)\n\n/**\n * @example\n * import { Option, Number } from \"effect\"\n *\n * const isEquivalent = Option.getEquivalence(Number.Equivalence)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.none()), true)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.some(1)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.none()), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(2)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(1)), true)\n *\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Option<A>> =>\n  Equivalence.make((x, y) => isNone(x) ? isNone(y) : isNone(y) ? false : isEquivalent(x.value, y.value))\n\n/**\n * The `Order` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Order` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * const O = Option.getOrder(Number.Order)\n * assert.deepStrictEqual(O(Option.none(), Option.none()), 0)\n * assert.deepStrictEqual(O(Option.none(), Option.some(1)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.none()), 1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(2)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(1)), 0)\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const getOrder = <A>(O: Order<A>): Order<Option<A>> =>\n  order.make((self, that) => isSome(self) ? (isSome(that) ? O(self.value, that.value) : 1) : -1)\n\n/**\n * Lifts a binary function into `Option`.\n *\n * @param f - The function to lift.\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const lift2 = <A, B, C>(f: (a: A, b: B) => C): {\n  (that: Option<B>): (self: Option<A>) => Option<C>\n  (self: Option<A>, that: Option<B>): Option<C>\n} => dual(2, (self: Option<A>, that: Option<B>): Option<C> => zipWith(self, that, f))\n\n/**\n * Transforms a `Predicate` function into a `Some` of the input value if the predicate returns `true` or `None`\n * if the predicate returns `false`.\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getOption = Option.liftPredicate((n: number) => n >= 0)\n *\n * assert.deepStrictEqual(getOption(-1), Option.none())\n * assert.deepStrictEqual(getOption(1), Option.some(1))\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftPredicate: { // Note: I intentionally avoid using the NoInfer pattern here.\n  <A, B extends A>(refinement: Refinement<A, B>): (a: A) => Option<B>\n  <B extends A, A = B>(predicate: Predicate<A>): (b: B) => Option<B>\n  <A, B extends A>(\n    self: A,\n    refinement: Refinement<A, B>\n  ): Option<B>\n  <B extends A, A = B>(\n    self: B,\n    predicate: Predicate<A>\n  ): Option<B>\n} = dual(\n  2,\n  <B extends A, A = B>(b: B, predicate: Predicate<A>): Option<B> => predicate(b) ? some(b) : none()\n)\n\n/**\n * Returns a function that checks if a `Option` contains a given value using a provided `isEquivalent` function.\n *\n * @param equivalent - An `Equivalence` instance to compare values of the `Option`.\n * @param self - The `Option` to apply the comparison to.\n * @param a - The value to compare against the `Option`.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.containsWith(Number.Equivalence)(2)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.containsWith(Number.Equivalence)(2)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.containsWith(Number.Equivalence)(2)), false)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Option<A>) => boolean\n  (self: Option<A>, a: A): boolean\n} => dual(2, (self: Option<A>, a: A): boolean => isNone(self) ? false : isEquivalent(self.value, a))\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if an `Option` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  <A>(a: A): (self: Option<A>) => boolean\n  <A>(self: Option<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * Check if a value in an `Option` type meets a certain predicate.\n *\n * @param self - The `Option` to check.\n * @param predicate - The condition to check.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.exists(isEven)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.exists(isEven)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.exists(isEven)), false)\n *\n * @since 2.0.0\n */\nexport const exists: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Option<A>) => self is Option<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Option<A>) => boolean\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): self is Option<B>\n  <A>(self: Option<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): self is Option<B> =>\n    isNone(self) ? false : refinement(self.value)\n)\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  <N extends string>(name: N): <A>(self: Option<A>) => Option<{ [K in N]: A }>\n  <A, N extends string>(self: Option<A>, name: N): Option<{ [K in N]: A }>\n} = doNotation.bindTo<OptionTypeLambda>(map)\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): (self: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <A extends object, N extends string, B>(\n    self: Option<A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.let_<OptionTypeLambda>(map)\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindTo}\n   *\n   * @example\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Option<B>\n  ): (self: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <A extends object, N extends string, B>(\n    self: Option<A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Option<B>\n  ): Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.bind<OptionTypeLambda>(map, flatMap)\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Option<{}> = some({})\n\nconst adapter = Gen.adapter<OptionTypeLambda>()\n\n/**\n * @category generators\n * @since 2.0.0\n */\nexport const gen: Gen.Gen<OptionTypeLambda, Gen.Adapter<OptionTypeLambda>> = (...args) => {\n  let f: any\n  if (args.length === 1) {\n    f = args[0]\n  } else {\n    f = args[1].bind(args[0])\n  }\n  const iterator = f(adapter)\n  let state: IteratorYieldResult<any> | IteratorReturnResult<any> = iterator.next()\n  if (state.done) {\n    return some(state.value)\n  } else {\n    let current = state.value\n    if (Gen.isGenKind(current)) {\n      current = current.value\n    } else {\n      current = Gen.yieldWrapGet(current)\n    }\n    if (isNone(current)) {\n      return current\n    }\n    while (!state.done) {\n      state = iterator.next(current.value as never)\n      if (!state.done) {\n        current = state.value\n        if (Gen.isGenKind(current)) {\n          current = current.value\n        } else {\n          current = Gen.yieldWrapGet(current)\n        }\n        if (isNone(current)) {\n          return current\n        }\n      }\n    }\n    return some(state.value)\n  }\n}\n", "/**\n * This module provides utility functions for working with tuples in TypeScript.\n *\n * @since 2.0.0\n */\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as order from \"./Order.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface TupleTypeLambda extends TypeLambda {\n  readonly type: [this[\"Out1\"], this[\"Target\"]]\n}\n\n/**\n * Constructs a new tuple from the provided values.\n *\n * @param elements - The list of elements to create the tuple from.\n *\n * @example\n * import { make } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(make(1, 'hello', true), [1, 'hello', true])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A extends ReadonlyArray<any>>(...elements: A): A => elements\n\n/**\n * Return the first element of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { getFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getFirst([\"hello\", 42]), \"hello\")\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getFirst = <L, R>(self: readonly [L, R]): L => self[0]\n\n/**\n * Return the second element of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { getSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getSecond([\"hello\", 42]), 42)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getSecond = <L, R>(self: readonly [L, R]): R => self[1]\n\n/**\n * Transforms both elements of a tuple using the given functions.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the first element of the tuple.\n * @param g - The function to transform the second element of the tuple.\n *\n * @example\n * import { mapBoth } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n *   [\"HELLO\", \"42\"]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth: {\n  <L1, L2, R1, R2>(options: {\n    readonly onFirst: (e: L1) => L2\n    readonly onSecond: (a: R1) => R2\n  }): (self: readonly [L1, R1]) => [L2, R2]\n  <L1, R1, L2, R2>(self: readonly [L1, R1], options: {\n    readonly onFirst: (e: L1) => L2\n    readonly onSecond: (a: R1) => R2\n  }): [L2, R2]\n} = dual(\n  2,\n  <L1, R1, L2, R2>(\n    self: readonly [L1, R1],\n    { onFirst, onSecond }: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): [L2, R2] => [onFirst(self[0]), onSecond(self[1])]\n)\n\n/**\n * Transforms the first component of a tuple using a given function.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the first element of the tuple.\n *\n * @example\n * import { mapFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n *   [\"HELLO\", 42]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapFirst: {\n  <L1, L2>(f: (left: L1) => L2): <R>(self: readonly [L1, R]) => [L2, R]\n  <L1, R, L2>(self: readonly [L1, R], f: (left: L1) => L2): [L2, R]\n} = dual(2, <L1, R, L2>(self: readonly [L1, R], f: (left: L1) => L2): [L2, R] => [f(self[0]), self[1]])\n\n/**\n * Transforms the second component of a tuple using a given function.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the second element of the tuple.\n *\n * @example\n * import { mapSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapSecond([\"hello\", 42], n => n.toString()),\n *   [\"hello\", \"42\"]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapSecond: {\n  <R1, R2>(f: (right: R1) => R2): <L>(self: readonly [L, R1]) => [L, R2]\n  <L, R1, R2>(self: readonly [L, R1], f: (right: R1) => R2): [L, R2]\n} = dual(2, <L, R1, R2>(self: readonly [L, R1], f: (right: R1) => R2): [L, R2] => [self[0], f(self[1])])\n\n/**\n * Swaps the two elements of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { swap } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(swap([\"hello\", 42]), [42, \"hello\"])\n *\n * @since 2.0.0\n */\nexport const swap = <L, R>(self: readonly [L, R]): [R, L] => [self[1], self[0]]\n\n/**\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getEquivalence: <T extends ReadonlyArray<Equivalence.Equivalence<any>>>(\n  ...isEquivalents: T\n) => Equivalence.Equivalence<\n  Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence.Equivalence<infer A>] ? A : never }>\n> = Equivalence.tuple\n\n/**\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getOrder: <T extends ReadonlyArray<order.Order<any>>>(\n  ...elements: T\n) => order.Order<{ [I in keyof T]: [T[I]] extends [order.Order<infer A>] ? A : never }> = order.tuple\n\n/**\n * Appends an element to the end of a tuple.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendElement: {\n  <B>(that: B): <A extends ReadonlyArray<unknown>>(self: A) => [...A, B]\n  <A extends ReadonlyArray<unknown>, B>(self: A, that: B): [...A, B]\n} = dual(2, <A extends ReadonlyArray<unknown>, B>(self: A, that: B): [...A, B] => [...self, that])\n\n/**\n * Retrieves the element at a specified index from a tuple.\n *\n * @param self - A tuple from which to retrieve the element.\n * @param index - The index of the element to retrieve.\n *\n * @example\n * import { Tuple } from \"effect\"\n *\n * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n *\n * @category getters\n * @since 3.4.0\n */\nexport const at: {\n  <N extends number>(index: N): <A extends ReadonlyArray<unknown>>(self: A) => A[N]\n  <A extends ReadonlyArray<unknown>, N extends number>(self: A, index: N): A[N]\n} = dual(2, <A extends ReadonlyArray<unknown>, N extends number>(self: A, index: N): A[N] => self[index])\n\nexport {\n  /**\n   * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n   *\n   * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n   *\n   * @param self - The `Array` to check.\n   * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n   *\n   * @example\n   * import { isTupleOf } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number]\n   * }\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  isTupleOf,\n  /**\n   * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n   *\n   * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n   *\n   * @param self - The `Array` to check.\n   * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n   *\n   * @example\n   * import { isTupleOfAtLeast } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number, ...number[]]\n   * }\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  isTupleOfAtLeast\n} from \"./Predicate.js\"\n", "/**\n * This module provides utility functions for working with arrays in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport type { Either as array_ } from \"./Either.js\"\nimport * as E from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as readonlyArray from \"./internal/array.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as EffectIterable from \"./Iterable.js\"\nimport type { Option } from \"./Option.js\"\nimport * as O from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport { isBoolean } from \"./Predicate.js\"\nimport * as Record from \"./Record.js\"\nimport * as Tuple from \"./Tuple.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ReadonlyArrayTypeLambda extends TypeLambda {\n  readonly type: ReadonlyArray<this[\"Target\"]>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type NonEmptyReadonlyArray<A> = readonly [A, ...Array<A>]\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type NonEmptyArray<A> = [A, ...Array<A>]\n\n/**\n * Builds a `NonEmptyArray` from an non-empty collection of elements.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.make(1, 2, 3)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <Elements extends NonEmptyArray<any>>(\n  ...elements: Elements\n): NonEmptyArray<Elements[number]> => elements\n\n/**\n * Creates a new `Array` of the specified length.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.allocate<number>(3)\n * assert.deepStrictEqual(result.length, 3)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const allocate = <A = never>(n: number): Array<A | undefined> => new Array(n)\n\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { makeBy } from \"effect/Array\"\n *\n * assert.deepStrictEqual(makeBy(5, n => n * 2), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy = <A>(n: number, f: (i: number) => A): NonEmptyArray<A> => {\n  const max = Math.max(1, Math.floor(n))\n  const out = new Array(max)\n  for (let i = 0; i < max; i++) {\n    out[i] = f(i)\n  }\n  return out as NonEmptyArray<A>\n}\n\n/**\n * Return a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from \"effect/Array\"\n *\n * assert.deepStrictEqual(range(1, 3), [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end: number): NonEmptyArray<number> =>\n  start <= end ? makeBy(end - start + 1, (i) => start + i) : [start]\n\n/**\n * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * assert.deepStrictEqual(Array.replicate(\"a\", 3), [\"a\", \"a\", \"a\"])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const replicate: {\n  (n: number): <A>(a: A) => NonEmptyArray<A>\n  <A>(a: A, n: number): NonEmptyArray<A>\n} = dual(2, <A>(a: A, n: number): NonEmptyArray<A> => makeBy(n, () => a))\n\n/**\n * Creates a new `Array` from an iterable collection of values.\n * If the input is already an array, it returns the input as-is.\n * Otherwise, it converts the iterable collection to an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const set = new Set([1, 2, 3])\n * const result = Array.fromIterable(set)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(collection: Iterable<A>): Array<A> =>\n  Array.isArray(collection) ? collection : Array.from(collection)\n\n/**\n * Creates a new `Array` from a value that might not be an iterable.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * assert.deepStrictEqual(Array.ensure(\"a\"), [\"a\"])\n * assert.deepStrictEqual(Array.ensure([\"a\"]), [\"a\"])\n * assert.deepStrictEqual(Array.ensure([\"a\", \"b\", \"c\"]), [\"a\", \"b\", \"c\"])\n *\n * @category constructors\n * @since 3.3.0\n */\nexport const ensure = <A>(self: ReadonlyArray<A> | A): Array<A> => Array.isArray(self) ? self : [self as A]\n\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(Array.fromRecord(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromRecord: <K extends string, A>(self: Readonly<Record<K, A>>) => Array<[K, A]> = Record.toEntries\n\n/**\n * Converts an `Option` to an array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Array.fromOption(Option.some(1)), [1])\n * assert.deepStrictEqual(Array.fromOption(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromOption: <A>(self: Option<A>) => Array<A> = O.toArray\n\n/**\n * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const match = Array.match({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n * })\n * assert.deepStrictEqual(match([]), \"empty\")\n * assert.deepStrictEqual(match([1, 2, 3]), \"head: 1, tail: 2\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n  }\n): B | C => isNonEmptyReadonlyArray(self) ? onNonEmpty(self) : onEmpty())\n\n/**\n * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const matchLeft = Array.matchLeft({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n * })\n * assert.deepStrictEqual(matchLeft([]), \"empty\")\n * assert.deepStrictEqual(matchLeft([1, 2, 3]), \"head: 1, tail: 2\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchLeft: {\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (head: A, tail: Array<A>) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (head: A, tail: Array<A>) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (head: A, tail: Array<A>) => C\n  }\n): B | C => isNonEmptyReadonlyArray(self) ? onNonEmpty(headNonEmpty(self), tailNonEmpty(self)) : onEmpty())\n\n/**\n * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const matchRight = Array.matchRight({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n * })\n * assert.deepStrictEqual(matchRight([]), \"empty\")\n * assert.deepStrictEqual(matchRight([1, 2, 3]), \"init: 2, last: 3\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchRight: {\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (init: Array<A>, last: A) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (init: Array<A>, last: A) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (init: Array<A>, last: A) => C\n  }\n): B | C =>\n  isNonEmptyReadonlyArray(self) ?\n    onNonEmpty(initNonEmpty(self), lastNonEmpty(self)) :\n    onEmpty())\n\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const original = [2, 3, 4];\n * const result = Array.prepend(original, 1);\n * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  <B>(head: B): <A>(self: Iterable<A>) => NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, head: B): NonEmptyArray<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, head: B): NonEmptyArray<A | B> => [head, ...self])\n\n/**\n * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const prefix = [0, 1];\n * const array = [2, 3];\n * const result = Array.prependAll(array, prefix);\n * assert.deepStrictEqual(result, [0, 1, 2, 3]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  <A, B>(self: Iterable<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: Iterable<B>): NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(that).concat(fromIterable(self))\n)\n\n/**\n * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const original = [1, 2, 3];\n * const result = Array.append(original, 4);\n * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  <B>(last: B): <A>(self: Iterable<A>) => NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, last: B): NonEmptyArray<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, last: B): Array<A | B> => [...self, last])\n\n/**\n * Concatenates two arrays (or iterables), combining their elements.\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  <A, B>(self: Iterable<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: Iterable<B>): NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).concat(fromIterable(that))\n)\n\n/**\n * Accumulates values from an `Iterable` starting from the left, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.scan(numbers, 0, (acc, value) => acc + value)\n * assert.deepStrictEqual(result, [0, 1, 3, 6, 10])\n *\n * // Explanation:\n * // This function starts with the initial value (0 in this case)\n * // and adds each element of the array to this accumulator one by one,\n * // keeping track of the cumulative sum after each addition.\n * // Each of these sums is captured in the resulting array.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scan: {\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => NonEmptyArray<B>\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B> => {\n  const out: NonEmptyArray<B> = [b]\n  let i = 0\n  for (const a of self) {\n    out[i + 1] = f(out[i], a)\n    i++\n  }\n  return out\n})\n\n/**\n * Accumulates values from an `Iterable` starting from the right, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.scanRight(numbers, 0, (acc, value) => acc + value)\n * assert.deepStrictEqual(result, [10, 9, 7, 4, 0])\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scanRight: {\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => NonEmptyArray<B>\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B> => {\n  const input = fromIterable(self)\n  const out: NonEmptyArray<B> = new Array(input.length + 1) as any\n  out[input.length] = b\n  for (let i = input.length - 1; i >= 0; i--) {\n    out[i] = f(out[i + 1], input[i])\n  }\n  return out\n})\n\n/**\n * Determine if `unknown` is an Array.\n *\n * @param self - The value to check.\n *\n * @example\n * import { isArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isArray(null), false);\n * assert.deepStrictEqual(isArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isArray: {\n  (self: unknown): self is Array<unknown>\n  <T>(self: T): self is Extract<T, ReadonlyArray<any>>\n} = Array.isArray\n\n/**\n * Determine if an `Array` is empty narrowing down the type to `[]`.\n *\n * @param self - The `Array` to check.\n *\n * @example\n * import { isEmptyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isEmptyArray([]), true);\n * assert.deepStrictEqual(isEmptyArray([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyArray = <A>(self: Array<A>): self is [] => self.length === 0\n\n/**\n * Determine if a `ReadonlyArray` is empty narrowing down the type to `readonly []`.\n *\n * @param self - The `ReadonlyArray` to check.\n *\n * @example\n * import { isEmptyReadonlyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyArray([]), true);\n * assert.deepStrictEqual(isEmptyReadonlyArray([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyReadonlyArray: <A>(self: ReadonlyArray<A>) => self is readonly [] = isEmptyArray as any\n\n/**\n * Determine if an `Array` is non empty narrowing down the type to `NonEmptyArray`.\n *\n * An `Array` is considered to be a `NonEmptyArray` if it contains at least one element.\n *\n * @param self - The `Array` to check.\n *\n * @example\n * import { isNonEmptyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isNonEmptyArray([]), false);\n * assert.deepStrictEqual(isNonEmptyArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyArray: <A>(self: Array<A>) => self is NonEmptyArray<A> = readonlyArray.isNonEmptyArray\n\n/**\n * Determine if a `ReadonlyArray` is non empty narrowing down the type to `NonEmptyReadonlyArray`.\n *\n * A `ReadonlyArray` is considered to be a `NonEmptyReadonlyArray` if it contains at least one element.\n *\n * @param self - The `ReadonlyArray` to check.\n *\n * @example\n * import { isNonEmptyReadonlyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isNonEmptyReadonlyArray([]), false);\n * assert.deepStrictEqual(isNonEmptyReadonlyArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyReadonlyArray: <A>(self: ReadonlyArray<A>) => self is NonEmptyReadonlyArray<A> =\n  readonlyArray.isNonEmptyArray\n\n/**\n * Return the number of elements in a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const length = <A>(self: ReadonlyArray<A>): number => self.length\n\nconst isOutOfBound = <A>(i: number, as: ReadonlyArray<A>): boolean => i < 0 || i >= as.length\n\nconst clamp = <A>(i: number, as: ReadonlyArray<A>): number => Math.floor(Math.min(Math.max(0, i), as.length))\n\n/**\n * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const get: {\n  (index: number): <A>(self: ReadonlyArray<A>) => Option<A>\n  <A>(self: ReadonlyArray<A>, index: number): Option<A>\n} = dual(2, <A>(self: ReadonlyArray<A>, index: number): Option<A> => {\n  const i = Math.floor(index)\n  return isOutOfBound(i, self) ? O.none() : O.some(self[i])\n})\n\n/**\n * Gets an element unsafely, will throw on out of bounds.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  (index: number): <A>(self: ReadonlyArray<A>) => A\n  <A>(self: ReadonlyArray<A>, index: number): A\n} = dual(2, <A>(self: ReadonlyArray<A>, index: number): A => {\n  const i = Math.floor(index)\n  if (isOutOfBound(i, self)) {\n    throw new Error(`Index ${i} out of bounds`)\n  }\n  return self[i]\n})\n\n/**\n * Return a tuple containing the first element, and a new `Array` of the remaining elements, if any.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const result = Array.unprepend([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [1, [2, 3, 4]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unprepend = <A>(\n  self: NonEmptyReadonlyArray<A>\n): [firstElement: A, remainingElements: Array<A>] => [headNonEmpty(self), tailNonEmpty(self)]\n\n/**\n * Return a tuple containing a copy of the `NonEmptyReadonlyArray` without its last element, and that last element.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const result = Array.unappend([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [[1, 2, 3], 4])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unappend = <A>(\n  self: NonEmptyReadonlyArray<A>\n): [arrayWithoutLastElement: Array<A>, lastElement: A] => [initNonEmpty(self), lastNonEmpty(self)]\n\n/**\n * Get the first element of a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const head: <A>(self: ReadonlyArray<A>) => Option<A> = get(0)\n\n/**\n * Get the first element of a non empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.headNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, 1)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const headNonEmpty: <A>(self: NonEmptyReadonlyArray<A>) => A = unsafeGet(0)\n\n/**\n * Get the last element in a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const last = <A>(self: ReadonlyArray<A>): Option<A> =>\n  isNonEmptyReadonlyArray(self) ? O.some(lastNonEmpty(self)) : O.none()\n\n/**\n * Get the last element of a non empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.lastNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, 4)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const lastNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): A => self[self.length - 1]\n\n/**\n * Get all but the first element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tail = <A>(self: Iterable<A>): Option<Array<A>> => {\n  const input = fromIterable(self)\n  return isNonEmptyReadonlyArray(input) ? O.some(tailNonEmpty(input)) : O.none()\n}\n\n/**\n * Get all but the first element of a `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.tailNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [2, 3, 4])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tailNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): Array<A> => self.slice(1)\n\n/**\n * Get all but the last element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const init = <A>(self: Iterable<A>): Option<Array<A>> => {\n  const input = fromIterable(self)\n  return isNonEmptyReadonlyArray(input) ? O.some(initNonEmpty(input)) : O.none()\n}\n\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.initNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const initNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): Array<A> => self.slice(0, -1)\n\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.take(numbers, 3)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const take: {\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(0, clamp(n, input))\n})\n\n/**\n * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.takeRight(numbers, 3)\n * assert.deepStrictEqual(result, [3, 4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeRight: {\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  const i = clamp(n, input)\n  return i === 0 ? [] : input.slice(-i)\n})\n\n/**\n * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 3, 2, 4, 1, 2]\n * const result = Array.takeWhile(numbers, x => x < 4)\n * assert.deepStrictEqual(result, [1, 3, 2])\n *\n * // Explanation:\n * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n * // - The next element (`3`) is also less than `4`, so it adds `3`.\n * // - The next element (`2`) is again less than `4`, so it adds `2`.\n * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeWhile: {\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Array<B>\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Array<B>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> => {\n  let i = 0\n  const out: Array<A> = []\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break\n    }\n    out.push(a)\n    i++\n  }\n  return out\n})\n\nconst spanIndex = <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): number => {\n  let i = 0\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/**\n * Split an `Iterable` into two parts:\n *\n * 1. the longest initial subarray for which all elements satisfy the specified predicate\n * 2. the remaining elements\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const span: {\n  <A, B extends A>(\n    refinement: (a: NoInfer<A>, i: number) => a is B\n  ): (self: Iterable<A>) => [init: Array<B>, rest: Array<Exclude<A, B>>]\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => [init: Array<A>, rest: Array<A>]\n  <A, B extends A>(\n    self: Iterable<A>,\n    refinement: (a: A, i: number) => a is B\n  ): [init: Array<B>, rest: Array<Exclude<A, B>>]\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [init: Array<A>, rest: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [init: Array<A>, rest: Array<A>] =>\n    splitAt(self, spanIndex(self, predicate))\n)\n\n/**\n * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.drop(numbers, 2)\n * assert.deepStrictEqual(result, [3, 4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const drop: {\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(clamp(n, input), input.length)\n})\n\n/**\n * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.dropRight(numbers, 2)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropRight: {\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(0, input.length - clamp(n, input))\n})\n\n/**\n * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.dropWhile(numbers, x => x < 4)\n * assert.deepStrictEqual(result, [4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropWhile: {\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> =>\n    fromIterable(self).slice(spanIndex(self, predicate))\n)\n\n/**\n * Return the first index for which a predicate holds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [5, 3, 8, 9]\n * const result = Array.findFirstIndex(numbers, x => x > 5)\n * assert.deepStrictEqual(result, Option.some(2))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirstIndex: {\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<number>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number> => {\n  let i = 0\n  for (const a of self) {\n    if (predicate(a, i)) {\n      return O.some(i)\n    }\n    i++\n  }\n  return O.none()\n})\n\n/**\n * Return the last index for which a predicate holds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 3, 8, 9]\n * const result = Array.findLastIndex(numbers, x => x < 5)\n * assert.deepStrictEqual(result, Option.some(1))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLastIndex: {\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<number>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number> => {\n  const input = fromIterable(self)\n  for (let i = input.length - 1; i >= 0; i--) {\n    if (predicate(input[i], i)) {\n      return O.some(i)\n    }\n  }\n  return O.none()\n})\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.findFirst(numbers, x => x > 3)\n * assert.deepStrictEqual(result, Option.some(4))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option<B>): (self: Iterable<A>) => Option<B>\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option<B>\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<A>\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Option<B>\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option<B>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<A>\n} = EffectIterable.findFirst\n\n/**\n * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.findLast(numbers, n => n % 2 === 0)\n * assert.deepStrictEqual(result, Option.some(4))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option<B>): (self: Iterable<A>) => Option<B>\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option<B>\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<A>\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Option<B>\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option<B>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option<A>)): Option<A> => {\n    const input = fromIterable(self)\n    for (let i = input.length - 1; i >= 0; i--) {\n      const a = input[i]\n      const o = f(a, i)\n      if (isBoolean(o)) {\n        if (o) {\n          return O.some(a)\n        }\n      } else {\n        if (O.isSome(o)) {\n          return o\n        }\n      }\n    }\n    return O.none()\n  }\n)\n\n/**\n * Insert an element at the specified index, creating a new `NonEmptyArray`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'e']\n * const result = Array.insertAt(letters, 3, 'd')\n * assert.deepStrictEqual(result, Option.some(['a', 'b', 'c', 'd', 'e']))\n *\n * @since 2.0.0\n */\nexport const insertAt: {\n  <B>(i: number, b: B): <A>(self: Iterable<A>) => Option<NonEmptyArray<A | B>>\n  <A, B>(self: Iterable<A>, i: number, b: B): Option<NonEmptyArray<A | B>>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, b: B): Option<NonEmptyArray<A | B>> => {\n  const out: Array<A | B> = Array.from(self)\n  //             v--- `= self.length` is ok, it means inserting in last position\n  if (i < 0 || i > out.length) {\n    return O.none()\n  }\n  out.splice(i, 0, b)\n  return O.some(out) as any\n})\n\n/**\n * Change the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.replace(1, 'z')(letters)\n * assert.deepStrictEqual(result, ['a', 'z', 'c', 'd'])\n *\n * @since 2.0.0\n */\nexport const replace: {\n  <B>(i: number, b: B): <A>(self: Iterable<A>) => Array<A | B>\n  <A, B>(self: Iterable<A>, i: number, b: B): Array<A | B>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, b: B): Array<A | B> => modify(self, i, () => b))\n\n/**\n * Replaces an element in an array with the given value, returning an option of the updated array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.replaceOption(numbers, 1, 4)\n * assert.deepStrictEqual(result, Option.some([1, 4, 3]))\n *\n * @since 2.0.0\n */\nexport const replaceOption: {\n  <B>(i: number, b: B): <A>(self: Iterable<A>) => Option<Array<A | B>>\n  <A, B>(self: Iterable<A>, i: number, b: B): Option<Array<A | B>>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, i: number, b: B): Option<Array<A | B>> => modifyOption(self, i, () => b)\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.modify(numbers, 2, (n) => n * 2)\n * assert.deepStrictEqual(result, [1, 2, 6, 4])\n *\n * @since 2.0.0\n */\nexport const modify: {\n  <A, B>(i: number, f: (a: A) => B): (self: Iterable<A>) => Array<A | B>\n  <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Array<A | B>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Array<A | B> =>\n    O.getOrElse(modifyOption(self, i, f), () => Array.from(self))\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.modifyOption(numbers, 2, (n) => n * 2)\n * assert.deepStrictEqual(result, Option.some([1, 2, 6, 4]))\n *\n * const outOfBoundsResult = Array.modifyOption(numbers, 5, (n) => n * 2)\n * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n *\n * @since 2.0.0\n */\nexport const modifyOption: {\n  <A, B>(i: number, f: (a: A) => B): (self: Iterable<A>) => Option<Array<A | B>>\n  <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Option<Array<A | B>>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Option<Array<A | B>> => {\n  const out = Array.from(self)\n  if (isOutOfBound(i, out)) {\n    return O.none()\n  }\n  const next = f(out[i])\n  // @ts-expect-error\n  out[i] = next\n  return O.some(out)\n})\n\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.remove(numbers, 2)\n * assert.deepStrictEqual(result, [1, 2, 4])\n *\n * const outOfBoundsResult = Array.remove(numbers, 5)\n * assert.deepStrictEqual(outOfBoundsResult, [1, 2, 3, 4])\n *\n * @since 2.0.0\n */\nexport const remove: {\n  (i: number): <A>(self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, i: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, i: number): Array<A> => {\n  const out = Array.from(self)\n  if (isOutOfBound(i, out)) {\n    return out\n  }\n  out.splice(i, 1)\n  return out\n})\n\n/**\n * Reverse an `Iterable`, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.reverse(numbers)\n * assert.deepStrictEqual(result, [4, 3, 2, 1])\n *\n * @category elements\n * @since 2.0.0\n */\nexport const reverse = <S extends Iterable<any> | NonEmptyReadonlyArray<any>>(\n  self: S\n): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never =>\n  Array.from(self).reverse() as any\n\n/**\n * Create a new array with elements sorted in increasing order based on the specified comparator.\n * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sort: {\n  <B>(\n    O: Order.Order<B>\n  ): <A extends B, S extends ReadonlyArray<A> | Iterable<A>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  <A extends B, B>(self: NonEmptyReadonlyArray<A>, O: Order.Order<B>): NonEmptyArray<A>\n  <A extends B, B>(self: Iterable<A>, O: Order.Order<B>): Array<A>\n} = dual(2, <A extends B, B>(self: Iterable<A>, O: Order.Order<B>): Array<A> => {\n  const out = Array.from(self)\n  out.sort(O)\n  return out\n})\n\n/**\n * Sorts an array based on a provided mapping function and order. The mapping\n * function transforms the elements into a value that can be compared, and the\n * order defines how those values should be sorted.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const strings = [\"aaa\", \"b\", \"cc\"]\n * const result = Array.sortWith(strings, (s) => s.length, Order.number)\n * assert.deepStrictEqual(result, [\"b\", \"cc\", \"aaa\"])\n *\n * // Explanation:\n * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n * // converts each string into its length, and the `Order.number` specifies that the lengths should\n * // be sorted in ascending order.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const sortWith: {\n  <S extends Iterable<any> | NonEmptyReadonlyArray<any>, B>(\n    f: (a: ReadonlyArray.Infer<S>) => B,\n    order: Order.Order<B>\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B, O: Order.Order<B>): NonEmptyArray<A>\n  <A, B>(self: Iterable<A>, f: (a: A) => B, order: Order.Order<B>): Array<A>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, f: (a: A) => B, order: Order.Order<B>): Array<A> => sort(self, Order.mapInput(order, f))\n)\n\n/**\n * Sorts the elements of an `Iterable` in increasing order based on the provided\n * orders. The elements are compared using the first order in `orders`, then the\n * second order if the first comparison is equal, and so on.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const users = [\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Charlie\", age: 30 }\n * ]\n *\n * const result = Array.sortBy(\n *   Order.mapInput(Order.number, (user: (typeof users)[number]) => user.age),\n *   Order.mapInput(Order.string, (user: (typeof users)[number]) => user.name)\n * )(users)\n *\n * assert.deepStrictEqual(result, [\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Charlie\", age: 30 }\n * ])\n *\n * // Explanation:\n * // The array of users is sorted first by age in ascending order. When ages are equal,\n * // the users are further sorted by name in ascending order.\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sortBy = <S extends Iterable<any> | NonEmptyReadonlyArray<any>>(\n  ...orders: ReadonlyArray<Order.Order<ReadonlyArray.Infer<S>>>\n) => {\n  const sortByAll = sort(Order.combineAll(orders))\n  return (\n    self: S\n  ): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      return sortByAll(input) as any\n    }\n    return [] as any\n  }\n}\n\n/**\n * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n * If one input `Iterable` is short, excess elements of the\n * longer `Iterable` are discarded.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = ['a', 'b']\n * const result = Array.zip(array1, array2)\n * assert.deepStrictEqual(result, [[1, 'a'], [2, 'b']])\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zip: {\n  <B>(that: NonEmptyReadonlyArray<B>): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<[A, B]>\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Array<[A, B]>\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<[A, B]>\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<[A, B]> => zipWith(self, that, Tuple.make)\n)\n\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [4, 5, 6]\n * const result = Array.zipWith(array1, array2, (a, b) => a + b)\n * assert.deepStrictEqual(result, [5, 7, 9])\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  <B, A, C>(that: NonEmptyReadonlyArray<B>, f: (a: A, b: B) => C): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<C>\n  <B, A, C>(that: Iterable<B>, f: (a: A, b: B) => C): (self: Iterable<A>) => Array<C>\n  <A, B, C>(self: NonEmptyReadonlyArray<A>, that: NonEmptyReadonlyArray<B>, f: (a: A, b: B) => C): NonEmptyArray<C>\n  <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Array<C>\n} = dual(3, <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Array<C> => {\n  const as = fromIterable(self)\n  const bs = fromIterable(that)\n  if (isNonEmptyReadonlyArray(as) && isNonEmptyReadonlyArray(bs)) {\n    const out: NonEmptyArray<C> = [f(headNonEmpty(as), headNonEmpty(bs))]\n    const len = Math.min(as.length, bs.length)\n    for (let i = 1; i < len; i++) {\n      out[i] = f(as[i], bs[i])\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * This function is the inverse of `zip`. Takes an `Iterable` of pairs and return two corresponding `Array`s.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.unzip([[1, \"a\"], [2, \"b\"], [3, \"c\"]])\n * assert.deepStrictEqual(result, [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nexport const unzip: <S extends Iterable<readonly [any, any]> | NonEmptyReadonlyArray<readonly [any, any]>>(\n  self: S\n) => S extends NonEmptyReadonlyArray<readonly [infer A, infer B]> ? [NonEmptyArray<A>, NonEmptyArray<B>]\n  : S extends Iterable<readonly [infer A, infer B]> ? [Array<A>, Array<B>]\n  : never = (<A, B>(self: Iterable<readonly [A, B]>): [Array<A>, Array<B>] => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      const fa: NonEmptyArray<A> = [input[0][0]]\n      const fb: NonEmptyArray<B> = [input[0][1]]\n      for (let i = 1; i < input.length; i++) {\n        fa[i] = input[i][0]\n        fb[i] = input[i][1]\n      }\n      return [fa, fb]\n    }\n    return [[], []]\n  }) as any\n\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.intersperse(numbers, 0)\n * assert.deepStrictEqual(result, [1, 0, 2, 0, 3])\n *\n * @since 2.0.0\n */\nexport const intersperse: {\n  <B>(\n    middle: B\n  ): <S extends Iterable<any>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, middle: B): NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, middle: B): Array<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, middle: B): Array<A | B> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const out: NonEmptyArray<A | B> = [headNonEmpty(input)]\n    const tail = tailNonEmpty(input)\n    for (let i = 0; i < tail.length; i++) {\n      if (i < tail.length) {\n        out.push(middle)\n      }\n      out.push(tail[i])\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n * assert.deepStrictEqual(result, [10, 2, 3])\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyHead: {\n  <A, B>(f: (a: A) => B): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (a: A) => B\n  ): NonEmptyArray<A | B> => [f(headNonEmpty(self)), ...tailNonEmpty(self)]\n)\n\n/**\n * Change the head, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n * assert.deepStrictEqual(result, [10, 2, 3])\n *\n * @since 2.0.0\n */\nexport const setNonEmptyHead: {\n  <B>(b: B): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B> => modifyNonEmptyHead(self, () => b)\n)\n\n/**\n * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n * assert.deepStrictEqual(result, [1, 2, 6])\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyLast: {\n  <A, B>(f: (a: A) => B): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B> =>\n    append(initNonEmpty(self), f(lastNonEmpty(self)))\n)\n\n/**\n * Change the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n * assert.deepStrictEqual(result, [1, 2, 4])\n *\n * @since 2.0.0\n */\nexport const setNonEmptyLast: {\n  <B>(b: B): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B> => modifyNonEmptyLast(self, () => b)\n)\n\n/**\n * Rotate an `Iterable` by `n` steps.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.rotate(letters, 2)\n * assert.deepStrictEqual(result, ['c', 'd', 'a', 'b'])\n *\n * @since 2.0.0\n */\nexport const rotate: {\n  (n: number): <S extends Iterable<any>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): NonEmptyArray<A>\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const len = input.length\n    const m = Math.round(n) % len\n    if (isOutOfBound(Math.abs(m), input) || m === 0) {\n      return copy(input)\n    }\n    if (m < 0) {\n      const [f, s] = splitNonEmptyAt(input, -m)\n      return appendAll(s, f)\n    } else {\n      return rotate(self, m - len)\n    }\n  }\n  return []\n})\n\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using a provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const isEquivalent = (a: number, b: number) => a === b\n * const containsNumber = Array.containsWith(isEquivalent)\n * const result = containsNumber(3)(numbers)\n * assert.deepStrictEqual(result, true)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Iterable<A>) => boolean\n  (self: Iterable<A>, a: A): boolean\n} =>\n  dual(2, (self: Iterable<A>, a: A): boolean => {\n    for (const i of self) {\n      if (isEquivalent(a, i)) {\n        return true\n      }\n    }\n    return false\n  })\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.contains('c')(letters)\n * assert.deepStrictEqual(result, true)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  <A>(a: A): (self: Iterable<A>) => boolean\n  <A>(self: Iterable<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n * value and the rest of the `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.chop(numbers, (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n * assert.deepStrictEqual(result, [2, 4, 6, 8, 10])\n *\n * // Explanation:\n * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n * // resulting in a new array `[2, 4, 6, 8, 10]`.\n *\n * @since 2.0.0\n */\nexport const chop: {\n  <S extends Iterable<any>, B>(\n    f: (as: NonEmptyReadonlyArray<ReadonlyArray.Infer<S>>) => readonly [B, ReadonlyArray<ReadonlyArray.Infer<S>>]\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n  ): NonEmptyArray<B>\n  <A, B>(\n    self: Iterable<A>,\n    f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n  ): Array<B>\n} = dual(2, <A, B>(\n  self: Iterable<A>,\n  f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n): Array<B> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const [b, rest] = f(input)\n    const out: NonEmptyArray<B> = [b]\n    let next: ReadonlyArray<A> = rest\n    while (readonlyArray.isNonEmptyArray(next)) {\n      const [b, rest] = f(next)\n      out.push(b)\n      next = rest\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` can be `0`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.splitAt(numbers, 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitAt: {\n  (n: number): <A>(self: Iterable<A>) => [beforeIndex: Array<A>, fromIndex: Array<A>]\n  <A>(self: Iterable<A>, n: number): [beforeIndex: Array<A>, fromIndex: Array<A>]\n} = dual(2, <A>(self: Iterable<A>, n: number): [Array<A>, Array<A>] => {\n  const input = Array.from(self)\n  const _n = Math.floor(n)\n  if (isNonEmptyReadonlyArray(input)) {\n    if (_n >= 1) {\n      return splitNonEmptyAt(input, _n)\n    }\n    return [[], input]\n  }\n  return [input, []]\n})\n\n/**\n * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n * assert.deepStrictEqual(result, [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitNonEmptyAt: {\n  (n: number): <A>(self: NonEmptyReadonlyArray<A>) => [beforeIndex: NonEmptyArray<A>, fromIndex: Array<A>]\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): [beforeIndex: NonEmptyArray<A>, fromIndex: Array<A>]\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, n: number): [NonEmptyArray<A>, Array<A>] => {\n  const _n = Math.max(1, Math.floor(n))\n  return _n >= self.length ?\n    [copy(self), []] :\n    [prepend(self.slice(1, _n), headNonEmpty(self)), self.slice(_n)]\n})\n\n/**\n * Splits this iterable into `n` equally sized arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n * const result = Array.split(numbers, 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5, 6], [7, 8]])\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const split: {\n  (n: number): <A>(self: Iterable<A>) => Array<Array<A>>\n  <A>(self: Iterable<A>, n: number): Array<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number) => {\n  const input = fromIterable(self)\n  return chunksOf(input, Math.ceil(input.length / Math.floor(n)))\n})\n\n/**\n * Splits this iterable on the first element that matches this predicate.\n * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.splitWhere(numbers, n => n > 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitWhere: {\n  <A>(\n    predicate: (a: NoInfer<A>, i: number) => boolean\n  ): (self: Iterable<A>) => [beforeMatch: Array<A>, fromMatch: Array<A>]\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [beforeMatch: Array<A>, fromMatch: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [beforeMatch: Array<A>, fromMatch: Array<A>] =>\n    span(self, (a: A, i: number) => !predicate(a, i))\n)\n\n/**\n * Copies an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const copy = Array.copy(numbers)\n * assert.deepStrictEqual(copy, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const copy: {\n  <A>(self: NonEmptyReadonlyArray<A>): NonEmptyArray<A>\n  <A>(self: ReadonlyArray<A>): Array<A>\n} = (<A>(self: ReadonlyArray<A>): Array<A> => self.slice()) as any\n\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `self`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.chunksOf(numbers, 2)\n * assert.deepStrictEqual(result, [[1, 2], [3, 4], [5]])\n *\n * // Explanation:\n * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n * // the last chunk contains the remaining elements.\n * // The result is `[[1, 2], [3, 4], [5]]`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const chunksOf: {\n  (\n    n: number\n  ): <S extends Iterable<any>>(\n    self: S\n  ) => ReadonlyArray.With<S, NonEmptyArray<ReadonlyArray.Infer<S>>>\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): NonEmptyArray<NonEmptyArray<A>>\n  <A>(self: Iterable<A>, n: number): Array<NonEmptyArray<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<NonEmptyArray<A>> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    return chop(input, splitNonEmptyAt(n))\n  }\n  return []\n})\n\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n * assert.deepStrictEqual(result, [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]])\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupWith: {\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<NonEmptyArray<A>>\n  <A>(self: NonEmptyReadonlyArray<A>, isEquivalent: (self: A, that: A) => boolean): NonEmptyArray<NonEmptyArray<A>>\n} = dual(\n  2,\n  <A>(self: NonEmptyReadonlyArray<A>, isEquivalent: (self: A, that: A) => boolean): NonEmptyArray<NonEmptyArray<A>> =>\n    chop(self, (as) => {\n      const h = headNonEmpty(as)\n      const out: NonEmptyArray<A> = [h]\n      let i = 1\n      for (; i < as.length; i++) {\n        const a = as[i]\n        if (isEquivalent(a, h)) {\n          out.push(a)\n        } else {\n          break\n        }\n      }\n      return [out, as.slice(i)]\n    })\n)\n\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.group([1, 1, 2, 2, 2, 3, 1])\n * assert.deepStrictEqual(result, [[1, 1], [2, 2, 2], [3], [1]])\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const group: <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<NonEmptyArray<A>> = groupWith(\n  Equal.equivalence()\n)\n\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const people = [\n *   { name: \"Alice\", group: \"A\" },\n *   { name: \"Bob\", group: \"B\" },\n *   { name: \"Charlie\", group: \"A\" }\n * ]\n * const result = Array.groupBy(people, person => person.group)\n * assert.deepStrictEqual(result, {\n *   A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n *   B: [{ name: \"Bob\", group: \"B\" }]\n * })\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupBy: {\n  <A, K extends string | symbol>(\n    f: (a: A) => K\n  ): (self: Iterable<A>) => Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n  <A, K extends string | symbol>(\n    self: Iterable<A>,\n    f: (a: A) => K\n  ): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n} = dual(2, <A, K extends string | symbol>(\n  self: Iterable<A>,\n  f: (a: A) => K\n): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>> => {\n  const out: Record<string | symbol, NonEmptyArray<A>> = {}\n  for (const a of self) {\n    const k = f(a)\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a)\n    } else {\n      out[k] = [a]\n    }\n  }\n  return out\n})\n\n/**\n * Calculates the union of two arrays using the provided equivalence relation.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [2, 3]\n * const union = Array.unionWith(array1, array2, (a, b) => a === b)\n * assert.deepStrictEqual(union, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const unionWith: {\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T,\n    isEquivalent: (self: ReadonlyArray.Infer<S>, that: ReadonlyArray.Infer<T>) => boolean\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    that: Iterable<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): NonEmptyArray<A | B>\n  <A, B>(\n    self: Iterable<A>,\n    that: NonEmptyReadonlyArray<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, that: Iterable<B>, isEquivalent: (self: A, that: B) => boolean): Array<A | B>\n} = dual(3, <A>(self: Iterable<A>, that: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n  const a = fromIterable(self)\n  const b = fromIterable(that)\n  if (isNonEmptyReadonlyArray(a)) {\n    if (isNonEmptyReadonlyArray(b)) {\n      const dedupe = dedupeWith(isEquivalent)\n      return dedupe(appendAll(a, b))\n    }\n    return a\n  }\n  return b\n})\n\n/**\n * Creates a union of two arrays, removing duplicates.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [2, 3]\n * const result = Array.union(array1, array2)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const union: {\n  <T extends Iterable<any>>(\n    that: T\n  ): <S extends Iterable<any>>(\n    self: S\n  ) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: ReadonlyArray<B>): NonEmptyArray<A | B>\n  <A, B>(self: ReadonlyArray<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B> => unionWith(self, that, _equivalence))\n\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }]\n * const array2 = [{ id: 3 }, { id: 4 }, { id: 1 }]\n * const isEquivalent = (a: { id: number }, b: { id: number }) => a.id === b.id\n * const result = Array.intersectionWith(isEquivalent)(array2)(array1)\n * assert.deepStrictEqual(result, [{ id: 1 }, { id: 3 }])\n *\n * @since 2.0.0\n */\nexport const intersectionWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  (self: Iterable<A>, that: Iterable<A>): Array<A>\n} => {\n  const has = containsWith(isEquivalent)\n  return dual(\n    2,\n    (self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).filter((a) => has(that, a))\n  )\n}\n\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [3, 4, 1]\n * const result = Array.intersection(array1, array2)\n * assert.deepStrictEqual(result, [1, 3])\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Array<A & B>\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A & B>\n} = intersectionWith(_equivalence)\n\n/**\n * Creates a `Array` of values not included in the other given `Iterable` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.differenceWith<number>((a, b) => a === b)(array1, array2)\n * assert.deepStrictEqual(difference, [1])\n *\n * @since 2.0.0\n */\nexport const differenceWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  (self: Iterable<A>, that: Iterable<A>): Array<A>\n} => {\n  const has = containsWith(isEquivalent)\n  return dual(\n    2,\n    (self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).filter((a) => !has(that, a))\n  )\n}\n\n/**\n * Creates a `Array` of values not included in the other given `Iterable`.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.difference(array1, array2)\n * assert.deepStrictEqual(difference, [1])\n *\n * @since 2.0.0\n */\nexport const difference: {\n  <A>(that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A>\n} = differenceWith(_equivalence)\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: <A = never>() => Array<A> = () => []\n\n/**\n * Constructs a new `NonEmptyArray<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): NonEmptyArray<A> => [a]\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ReadonlyArray {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends Iterable<any>> = S extends ReadonlyArray<infer A> ? A\n    : S extends Iterable<infer A> ? A\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends Iterable<any>, A> = S extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<\n    S extends Iterable<any>,\n    T extends Iterable<any>,\n    A\n  > = S extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : T extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<\n    S extends Iterable<any>,\n    T extends Iterable<any>,\n    A\n  > = S extends NonEmptyReadonlyArray<any> ? T extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type Flatten<T extends ReadonlyArray<ReadonlyArray<any>>> = T extends\n    NonEmptyReadonlyArray<NonEmptyReadonlyArray<infer A>> ? NonEmptyArray<A>\n    : T extends ReadonlyArray<ReadonlyArray<infer A>> ? Array<A>\n    : never\n}\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  <S extends ReadonlyArray<any>, B>(\n    f: (a: ReadonlyArray.Infer<S>, i: number) => B\n  ): (self: S) => ReadonlyArray.With<S, B>\n  <S extends ReadonlyArray<any>, B>(self: S, f: (a: ReadonlyArray.Infer<S>, i: number) => B): ReadonlyArray.With<S, B>\n} = dual(2, <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => B): Array<B> => self.map(f))\n\n/**\n * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  <S extends ReadonlyArray<any>, T extends ReadonlyArray<any>>(\n    f: (a: ReadonlyArray.Infer<S>, i: number) => T\n  ): (self: S) => ReadonlyArray.AndNonEmpty<S, T, ReadonlyArray.Infer<T>>\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A, i: number) => NonEmptyReadonlyArray<B>): NonEmptyArray<B>\n  <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => ReadonlyArray<B>): Array<B>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => ReadonlyArray<B>): Array<B> => {\n    if (isEmptyReadonlyArray(self)) {\n      return []\n    }\n    const out: Array<B> = []\n    for (let i = 0; i < self.length; i++) {\n      const inner = f(self[i], i)\n      for (let j = 0; j < inner.length; j++) {\n        out.push(inner[j])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Combines multiple arrays into a single array by concatenating all elements\n * from each nested array. This function ensures that the structure of nested\n * arrays is collapsed into a single, flat array.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const nestedArrays = [[1, 2], [], [3, 4], [], [5, 6]]\n * const result = Array.flatten(nestedArrays)\n *\n * assert.deepStrictEqual(result, [1, 2, 3, 4, 5, 6]);\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten: <S extends ReadonlyArray<ReadonlyArray<any>>>(self: S) => ReadonlyArray.Flatten<S> = flatMap(\n  identity\n) as any\n\n/**\n * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n *\n * @example\n * import { Array, Option } from \"effect\";\n *\n * const data = [1, 2, 3, 4, 5];\n * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n * const result = Array.filterMap(data, evenSquares);\n *\n * assert.deepStrictEqual(result, [4, 16]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Iterable<A>) => Array<B>\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Array<B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Array<B> => {\n    const as = fromIterable(self)\n    const out: Array<B> = []\n    for (let i = 0; i < as.length; i++) {\n      const o = f(as[i], i)\n      if (O.isSome(o)) {\n        out.push(o.value)\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n *\n * @example\n * import { Array, Option } from \"effect\";\n *\n * const data = [2, 4, 5];\n * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n * const result = Array.filterMapWhile(data, toSquareTillOdd);\n *\n * assert.deepStrictEqual(result, [4, 16]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMapWhile: {\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Iterable<A>) => Array<B>\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Array<B>\n} = dual(2, <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>) => {\n  let i = 0\n  const out: Array<B> = []\n  for (const a of self) {\n    const b = f(a, i)\n    if (O.isSome(b)) {\n      out.push(b.value)\n    } else {\n      break\n    }\n    i++\n  }\n  return out\n})\n\n/**\n * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n * This function is particularly useful for operations where each element can result in two possible types,\n * and you want to separate these types into different collections. For instance, separating validation results\n * into successes and failures.\n *\n * @example\n * import { Array, Either } from \"effect\";\n *\n * const data = [1, 2, 3, 4, 5]\n * const isEven = (x: number) => x % 2 === 0\n * const partitioned = Array.partitionMap(data, x =>\n *   isEven(x) ? Either.right(x) : Either.left(x)\n * )\n *\n * assert.deepStrictEqual(partitioned, [\n *   [1, 3, 5],\n *   [2, 4]\n * ])\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  <A, B, C>(f: (a: A, i: number) => array_<C, B>): (self: Iterable<A>) => [left: Array<B>, right: Array<C>]\n  <A, B, C>(self: Iterable<A>, f: (a: A, i: number) => array_<C, B>): [left: Array<B>, right: Array<C>]\n} = dual(\n  2,\n  <A, B, C>(self: Iterable<A>, f: (a: A, i: number) => array_<C, B>): [left: Array<B>, right: Array<C>] => {\n    const left: Array<B> = []\n    const right: Array<C> = []\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      const e = f(as[i], i)\n      if (E.isLeft(e)) {\n        left.push(e.left)\n      } else {\n        right.push(e.right)\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s, collecting them into an array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getSomes([Option.some(1), Option.none(), Option.some(2)]),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\n\nexport const getSomes: <T extends Iterable<Option<X>>, X = any>(\n  self: T\n) => Array<Option.Value<ReadonlyArray.Infer<T>>> = filterMap(identity as any)\n\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)]),\n *   [\"err\"]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = <T extends Iterable<array_<any, any>>>(self: T): Array<array_.Left<ReadonlyArray.Infer<T>>> => {\n  const out: Array<any> = []\n  for (const a of self) {\n    if (E.isLeft(a)) {\n      out.push(a.left)\n    }\n  }\n\n  return out\n}\n\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)]),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = <T extends Iterable<array_<any, any>>>(\n  self: T\n): Array<array_.Right<ReadonlyArray.Infer<T>>> => {\n  const out: Array<any> = []\n  for (const a of self) {\n    if (E.isRight(a)) {\n      out.push(a.right)\n    }\n  }\n\n  return out\n}\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Array<B>\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Array<B>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> => {\n    const as = fromIterable(self)\n    const out: Array<A> = []\n    for (let i = 0; i < as.length; i++) {\n      if (predicate(as[i], i)) {\n        out.push(as[i])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (\n    self: Iterable<A>\n  ) => [excluded: Array<Exclude<A, B>>, satisfying: Array<B>]\n  <A>(\n    predicate: (a: NoInfer<A>, i: number) => boolean\n  ): (self: Iterable<A>) => [excluded: Array<A>, satisfying: Array<A>]\n  <A, B extends A>(\n    self: Iterable<A>,\n    refinement: (a: A, i: number) => a is B\n  ): [excluded: Array<Exclude<A, B>>, satisfying: Array<B>]\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [excluded: Array<A>, satisfying: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [excluded: Array<A>, satisfying: Array<A>] => {\n    const left: Array<A> = []\n    const right: Array<A> = []\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      if (predicate(as[i], i)) {\n        right.push(as[i])\n      } else {\n        left.push(as[i])\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Separates an `Iterable` into two arrays based on a predicate.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.partition(numbers, n => n % 2 === 0)\n * assert.deepStrictEqual(result, [[1, 3], [2, 4]])\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate: <T extends Iterable<array_<any, any>>>(\n  self: T\n) => [Array<array_.Left<ReadonlyArray.Infer<T>>>, Array<array_.Right<ReadonlyArray.Infer<T>>>] = partitionMap(\n  identity\n)\n\n/**\n * Reduces an array from the left.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.reduce(numbers, 0, (acc, n) => acc + n)\n * assert.deepStrictEqual(result, 6)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(\n  3,\n  <B, A>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B =>\n    fromIterable(self).reduce((b, a, i) => f(b, a, i), b)\n)\n\n/**\n * Reduces an array from the right.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.reduceRight(numbers, 0, (acc, n) => acc + n)\n * assert.deepStrictEqual(result, 6)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduceRight: {\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B =>\n    fromIterable(self).reduceRight((b, a, i) => f(b, a, i), b)\n)\n\n/**\n * Lifts a predicate into an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n * const to = Array.liftPredicate(isEven)\n * assert.deepStrictEqual(to(1), [])\n * assert.deepStrictEqual(to(2), [2])\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftPredicate: { // Note: I intentionally avoid using the NoInfer pattern here.\n  <A, B extends A>(refinement: Refinement<A, B>): (a: A) => Array<B>\n  <A>(predicate: Predicate<A>): <B extends A>(b: B) => Array<B>\n} = <A>(predicate: Predicate<A>) => <B extends A>(b: B): Array<B> => predicate(b) ? [b] : []\n\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftOption = <A extends Array<unknown>, B>(\n  f: (...a: A) => Option<B>\n) =>\n(...a: A): Array<B> => fromOption(f(...a))\n\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport const fromNullable = <A>(a: A): Array<NonNullable<A>> => a == null ? empty() : [a as NonNullable<A>]\n\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftNullable = <A extends Array<unknown>, B>(\n  f: (...a: A) => B | null | undefined\n): (...a: A) => Array<NonNullable<B>> =>\n(...a) => fromNullable(f(...a))\n\n/**\n * Maps over an array and flattens the result, removing null and undefined values.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.flatMapNullable(numbers, n => (n % 2 === 0 ? null : n))\n * assert.deepStrictEqual(result, [1, 3])\n *\n * // Explanation:\n * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n * // to remove null values, resulting in [1, 3].\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  <A, B>(f: (a: A) => B | null | undefined): (self: ReadonlyArray<A>) => Array<NonNullable<B>>\n  <A, B>(self: ReadonlyArray<A>, f: (a: A) => B | null | undefined): Array<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (a: A) => B | null | undefined): Array<NonNullable<B>> =>\n    flatMap(self, (a) => fromNullable(f(a)))\n)\n\n/**\n * Lifts a function that returns an `Either` into a function that returns an array.\n * If the `Either` is a left, it returns an empty array.\n * If the `Either` is a right, it returns an array with the right value.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * const parseNumber = (s: string): Either.Either<number, Error> =>\n *   isNaN(Number(s)) ? Either.left(new Error(\"Not a number\")) : Either.right(Number(s))\n *\n * const liftedParseNumber = Array.liftEither(parseNumber)\n *\n * const result1 = liftedParseNumber(\"42\")\n * assert.deepStrictEqual(result1, [42])\n *\n * const result2 = liftedParseNumber(\"not a number\")\n * assert.deepStrictEqual(result2, [])\n *\n * // Explanation:\n * // The function parseNumber is lifted to return an array.\n * // When parsing \"42\", it returns an Either.left with the number 42, resulting in [42].\n * // When parsing \"not a number\", it returns an Either.right with an error, resulting in an empty array [].\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftEither = <A extends Array<unknown>, E, B>(\n  f: (...a: A) => array_<B, E>\n) =>\n(...a: A): Array<B> => {\n  const e = f(...a)\n  return E.isLeft(e) ? [] : [e.right]\n}\n\n/**\n * Check if a predicate holds true for every `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const every: {\n  <A, B extends A>(\n    refinement: (a: NoInfer<A>, i: number) => a is B\n  ): (self: ReadonlyArray<A>) => self is ReadonlyArray<B>\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: ReadonlyArray<A>) => boolean\n  <A, B extends A>(self: ReadonlyArray<A>, refinement: (a: A, i: number) => a is B): self is ReadonlyArray<B>\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: ReadonlyArray<A>, refinement: (a: A, i: number) => a is B): self is ReadonlyArray<B> =>\n    self.every(refinement)\n)\n\n/**\n * Check if a predicate holds true for some `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  <A>(\n    predicate: (a: NoInfer<A>, i: number) => boolean\n  ): (self: ReadonlyArray<A>) => self is NonEmptyReadonlyArray<A>\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): self is NonEmptyReadonlyArray<A>\n} = dual(\n  2,\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): self is NonEmptyReadonlyArray<A> =>\n    self.some(predicate)\n)\n\n/**\n * Extends an array with a function that maps each subarray to a value.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.extend(numbers, as => as.length)\n * assert.deepStrictEqual(result, [3, 2, 1])\n *\n * // Explanation:\n * // The function maps each subarray starting from each element to its length.\n * // The subarrays are: [1, 2, 3], [2, 3], [3].\n * // The lengths are: 3, 2, 1.\n * // Therefore, the result is [3, 2, 1].\n *\n * @since 2.0.0\n */\nexport const extend: {\n  <A, B>(f: (as: ReadonlyArray<A>) => B): (self: ReadonlyArray<A>) => Array<B>\n  <A, B>(self: ReadonlyArray<A>, f: (as: ReadonlyArray<A>) => B): Array<B>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (as: ReadonlyArray<A>) => B): Array<B> => self.map((_, i, as) => f(as.slice(i)))\n)\n\n/**\n * Finds the minimum element in an array based on a comparator.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const min = Array.min([3, 1, 2], Order.number)\n * assert.deepStrictEqual(min, 1)\n *\n * @since 2.0.0\n */\nexport const min: {\n  <A>(O: Order.Order<A>): (self: NonEmptyReadonlyArray<A>) => A\n  <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A => self.reduce(Order.min(O)))\n\n/**\n * Finds the maximum element in an array based on a comparator.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const max = Array.max([3, 1, 2], Order.number)\n * assert.deepStrictEqual(max, 3)\n *\n * @since 2.0.0\n */\nexport const max: {\n  <A>(O: Order.Order<A>): (self: NonEmptyReadonlyArray<A>) => A\n  <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A => self.reduce(Order.max(O)))\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unfold = <B, A>(b: B, f: (b: B) => Option<readonly [A, B]>): Array<A> => {\n  const out: Array<A> = []\n  let next: B = b\n  let o: Option<readonly [A, B]>\n  while (O.isSome(o = f(next))) {\n    const [a, b] = o.value\n    out.push(a)\n    next = b\n  }\n  return out\n}\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getOrder: <A>(O: Order.Order<A>) => Order.Order<ReadonlyArray<A>> = Order.array\n\n/**\n * Creates an equivalence relation for arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers1 = [1, 2, 3]\n * const numbers2 = [1, 2, 3]\n * const eq = Array.getEquivalence<number>((a, b) => a === b)\n * assert.deepStrictEqual(eq(numbers1, numbers2), true)\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getEquivalence: <A>(\n  isEquivalent: Equivalence.Equivalence<A>\n) => Equivalence.Equivalence<ReadonlyArray<A>> = Equivalence.array\n\n/**\n * Performs a side-effect for each element of the `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * Array.forEach(numbers, n => console.log(n)) // 1, 2, 3\n *\n * @since 2.0.0\n */\nexport const forEach: {\n  <A>(f: (a: A, i: number) => void): (self: Iterable<A>) => void\n  <A>(self: Iterable<A>, f: (a: A, i: number) => void): void\n} = dual(2, <A>(self: Iterable<A>, f: (a: A, i: number) => void): void => fromIterable(self).forEach((a, i) => f(a, i)))\n\n/**\n * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n * preserving the order of the first occurrence of each element.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 2, 3, 3, 3]\n * const unique = Array.dedupeWith(numbers, (a, b) => a === b)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeWith: {\n  <S extends Iterable<any>>(\n    isEquivalent: (self: ReadonlyArray.Infer<S>, that: ReadonlyArray.Infer<S>) => boolean\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  <A>(self: NonEmptyReadonlyArray<A>, isEquivalent: (self: A, that: A) => boolean): NonEmptyArray<A>\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      const out: NonEmptyArray<A> = [headNonEmpty(input)]\n      const rest = tailNonEmpty(input)\n      for (const r of rest) {\n        if (out.every((a) => !isEquivalent(r, a))) {\n          out.push(r)\n        }\n      }\n      return out\n    }\n    return []\n  }\n)\n\n/**\n * Remove duplicates from an `Iterable`, preserving the order of the first occurrence of each element.\n * The equivalence used to compare elements is provided by `Equal.equivalence()` from the `Equal` module.\n *\n * @since 2.0.0\n */\nexport const dedupe = <S extends Iterable<any> | NonEmptyReadonlyArray<any>>(\n  self: S\n): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never =>\n  dedupeWith(self, Equal.equivalence()) as any\n\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 1, 2, 2, 3, 3]\n * const unique = Array.dedupeAdjacentWith(numbers, (a, b) => a === b)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacentWith: {\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A>\n} = dual(2, <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n  const out: Array<A> = []\n  let lastA: O.Option<A> = O.none()\n  for (const a of self) {\n    if (O.isNone(lastA) || !isEquivalent(a, lastA.value)) {\n      out.push(a)\n      lastA = O.some(a)\n    }\n  }\n  return out\n})\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 1, 2, 2, 3, 3]\n * const unique = Array.dedupeAdjacent(numbers)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacent: <A>(self: Iterable<A>) => Array<A> = dedupeAdjacentWith(Equal.equivalence())\n\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const strings = [\"a\", \"b\", \"c\"]\n * const joined = Array.join(strings, \"-\")\n * assert.deepStrictEqual(joined, \"a-b-c\")\n *\n * @since 2.0.0\n * @category folding\n */\nexport const join: {\n  (sep: string): (self: Iterable<string>) => string\n  (self: Iterable<string>, sep: string): string\n} = dual(2, (self: Iterable<string>, sep: string): string => fromIterable(self).join(sep))\n\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.mapAccum(numbers, 0, (acc, n) => [acc + n, acc + n])\n * assert.deepStrictEqual(result, [6, [1, 3, 6]])\n *\n * @since 2.0.0\n * @category folding\n */\nexport const mapAccum: {\n  <S, A, B>(\n    s: S,\n    f: (s: S, a: A, i: number) => readonly [S, B]\n  ): (self: Iterable<A>) => [state: S, mappedArray: Array<B>]\n  <S, A, B>(self: Iterable<A>, s: S, f: (s: S, a: A, i: number) => readonly [S, B]): [state: S, mappedArray: Array<B>]\n} = dual(\n  3,\n  <S, A, B>(self: Iterable<A>, s: S, f: (s: S, a: A, i: number) => [S, B]): [state: S, mappedArray: Array<B>] => {\n    let i = 0\n    let s1 = s\n    const out: Array<B> = []\n    for (const a of self) {\n      const r = f(s1, a, i)\n      s1 = r[0]\n      out.push(r[1])\n      i++\n    }\n    return [s1, out]\n  }\n)\n\n/**\n * Zips this chunk crosswise with the specified chunk using the specified combiner.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [\"a\", \"b\"]\n * const product = Array.cartesianWith(array1, array2, (a, b) => `${a}-${b}`)\n * assert.deepStrictEqual(product, [\"1-a\", \"1-b\", \"2-a\", \"2-b\"])\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesianWith: {\n  <A, B, C>(that: ReadonlyArray<B>, f: (a: A, b: B) => C): (self: ReadonlyArray<A>) => Array<C>\n  <A, B, C>(self: ReadonlyArray<A>, that: ReadonlyArray<B>, f: (a: A, b: B) => C): Array<C>\n} = dual(\n  3,\n  <A, B, C>(self: ReadonlyArray<A>, that: ReadonlyArray<B>, f: (a: A, b: B) => C): Array<C> =>\n    flatMap(self, (a) => map(that, (b) => f(a, b)))\n)\n\n/**\n * Zips this chunk crosswise with the specified chunk.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [\"a\", \"b\"]\n * const product = Array.cartesian(array1, array2)\n * assert.deepStrictEqual(product, [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]])\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesian: {\n  <B>(that: ReadonlyArray<B>): <A>(self: ReadonlyArray<A>) => Array<[A, B]>\n  <A, B>(self: ReadonlyArray<A>, that: ReadonlyArray<B>): Array<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, that: ReadonlyArray<B>): Array<[A, B]> => cartesianWith(self, that, (a, b) => [a, b])\n)\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const Do: ReadonlyArray<{}> = of({})\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bind: {\n  <A extends object, N extends string, B>(\n    tag: Exclude<N, keyof A>,\n    f: (a: A) => ReadonlyArray<B>\n  ): (\n    self: ReadonlyArray<A>\n  ) => Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <A extends object, N extends string, B>(\n    self: ReadonlyArray<A>,\n    tag: Exclude<N, keyof A>,\n    f: (a: A) => ReadonlyArray<B>\n  ): Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.bind<ReadonlyArrayTypeLambda>(map, flatMap) as any\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bindTo: {\n  <N extends string>(tag: N): <A>(self: ReadonlyArray<A>) => Array<{ [K in N]: A }>\n  <A, N extends string>(self: ReadonlyArray<A>, tag: N): Array<{ [K in N]: A }>\n} = doNotation.bindTo<ReadonlyArrayTypeLambda>(map) as any\n\nconst let_: {\n  <N extends string, B, A extends object>(\n    tag: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): (self: ReadonlyArray<A>) => Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <N extends string, A extends object, B>(\n    self: ReadonlyArray<A>,\n    tag: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.let_<ReadonlyArrayTypeLambda>(map) as any\n\nexport {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link bindTo}\n   * @see {@link bind}\n   * @see {@link Do}\n   *\n   * @example\n   * import { Array as Arr, pipe } from \"effect\"\n   * const doResult = pipe(\n   *   Arr.Do,\n   *   Arr.bind(\"x\", () => [1, 3, 5]),\n   *   Arr.bind(\"y\", () => [2, 4, 6]),\n   *   Arr.filter(({ x, y }) => x < y), // condition\n   *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  let_ as let\n}\n", "/**\n * This module provides utility functions and type class instances for working with the `boolean` type in TypeScript.\n * It includes functions for basic boolean operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nimport * as equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual } from \"./Function.js\"\nimport * as order from \"./Order.js\"\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Tests if a value is a `boolean`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBoolean } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(isBoolean(true), true)\n * assert.deepStrictEqual(isBoolean(\"true\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBoolean: (input: unknown) => input is boolean = predicate.isBoolean\n\n/**\n * This function returns the result of either of the given functions depending on the value of the boolean parameter.\n * It is useful when you have to run one of two functions depending on the boolean value.\n *\n * @param value - the boolean value that decides which function will be executed.\n * @param onFalse - a lazy evaluation function that will be executed when the `value` is `false`.\n * @param onTrue - a lazy evaluation function that will be executed when the `value` is `true`.\n *\n * @example\n * import { Boolean } from \"effect\"\n *\n * assert.deepStrictEqual(Boolean.match(true, { onFalse: () => \"It's false!\", onTrue: () => \"It's true!\" }), \"It's true!\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  <A, B = A>(options: {\n    readonly onFalse: LazyArg<A>\n    readonly onTrue: LazyArg<B>\n  }): (value: boolean) => A | B\n  <A, B>(value: boolean, options: {\n    readonly onFalse: LazyArg<A>\n    readonly onTrue: LazyArg<B>\n  }): A | B\n} = dual(2, <A, B>(value: boolean, options: {\n  readonly onFalse: LazyArg<A>\n  readonly onTrue: LazyArg<B>\n}): A | B => value ? options.onTrue() : options.onFalse())\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<boolean> = equivalence.boolean\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<boolean> = order.boolean\n\n/**\n * Negates the given boolean: `!self`\n *\n * @example\n * import { not } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(not(true), false)\n * assert.deepStrictEqual(not(false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const not = (self: boolean): boolean => !self\n\n/**\n * Combines two boolean using AND: `self && that`.\n *\n * @example\n * import { and } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(and(true, true), true)\n * assert.deepStrictEqual(and(true, false), false)\n * assert.deepStrictEqual(and(false, true), false)\n * assert.deepStrictEqual(and(false, false), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const and: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => self && that)\n\n/**\n * Combines two boolean using NAND: `!(self && that)`.\n *\n * @example\n * import { nand } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(nand(true, true), false)\n * assert.deepStrictEqual(nand(true, false), true)\n * assert.deepStrictEqual(nand(false, true), true)\n * assert.deepStrictEqual(nand(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const nand: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => !(self && that))\n\n/**\n * Combines two boolean using OR: `self || that`.\n *\n * @example\n * import { or } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(or(true, true), true)\n * assert.deepStrictEqual(or(true, false), true)\n * assert.deepStrictEqual(or(false, true), true)\n * assert.deepStrictEqual(or(false, false), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const or: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => self || that)\n\n/**\n * Combines two booleans using NOR: `!(self || that)`.\n *\n * @example\n * import { nor } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(nor(true, true), false)\n * assert.deepStrictEqual(nor(true, false), false)\n * assert.deepStrictEqual(nor(false, true), false)\n * assert.deepStrictEqual(nor(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const nor: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => !(self || that))\n\n/**\n * Combines two booleans using XOR: `(!self && that) || (self && !that)`.\n *\n * @example\n * import { xor } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(xor(true, true), false)\n * assert.deepStrictEqual(xor(true, false), true)\n * assert.deepStrictEqual(xor(false, true), true)\n * assert.deepStrictEqual(xor(false, false), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const xor: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => (!self && that) || (self && !that))\n\n/**\n * Combines two booleans using EQV (aka XNOR): `!xor(self, that)`.\n *\n * @example\n * import { eqv } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(eqv(true, true), true)\n * assert.deepStrictEqual(eqv(true, false), false)\n * assert.deepStrictEqual(eqv(false, true), false)\n * assert.deepStrictEqual(eqv(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const eqv: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => !xor(self, that))\n\n/**\n * Combines two booleans using an implication: `(!self || that)`.\n *\n * @example\n * import { implies } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(implies(true, true), true)\n * assert.deepStrictEqual(implies(true, false), false)\n * assert.deepStrictEqual(implies(false, true), true)\n * assert.deepStrictEqual(implies(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const implies: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self, that) => self ? that : true)\n\n/**\n * This utility function is used to check if all the elements in a collection of boolean values are `true`.\n *\n * @param collection - An iterable collection of booleans.\n *\n * @example\n * import { every } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(every([true, true, true]), true)\n * assert.deepStrictEqual(every([true, false, true]), false)\n *\n * @since 2.0.0\n */\nexport const every = (collection: Iterable<boolean>): boolean => {\n  for (const b of collection) {\n    if (!b) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * This utility function is used to check if at least one of the elements in a collection of boolean values is `true`.\n *\n * @param collection - An iterable collection of booleans.\n *\n * @example\n * import { some } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(some([true, false, true]), true)\n * assert.deepStrictEqual(some([false, false, false]), false)\n *\n * @since 2.0.0\n */\nexport const some = (collection: Iterable<boolean>): boolean => {\n  for (const b of collection) {\n    if (b) {\n      return true\n    }\n  }\n  return false\n}\n", "/**\n * This module provides a data structure called `Context` that can be used for dependency injection in effectful\n * programs. It is essentially a table mapping `Tag`s to their implementations (called `Service`s), and can be used to\n * manage dependencies in a type-safe way. The `Context` data structure is essentially a way of providing access to a set\n * of related services that can be passed around as a single unit. This module provides functions to create, modify, and\n * query the contents of a `Context`, as well as a number of utility types for working with tags and services.\n *\n * @since 2.0.0\n */\nimport type { Equal } from \"./Equal.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/context.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\nconst TagTypeId: unique symbol = internal.TagTypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TagTypeId = typeof TagTypeId\n\n/**\n * @since 3.5.9\n * @category models\n */\nexport interface Tag<in out Id, in out Value> extends Pipeable, Inspectable {\n  readonly _tag: \"Tag\"\n  readonly _op: \"Tag\"\n  readonly Service: Value\n  readonly Identifier: Id\n  readonly [TagTypeId]: {\n    readonly _Service: Types.Invariant<Value>\n    readonly _Identifier: Types.Invariant<Id>\n  }\n  of(self: Value): Value\n  context(self: Value): Context<Id>\n  readonly stack?: string | undefined\n  readonly key: string\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: TagUnify<this>\n  [Unify.ignoreSymbol]?: TagUnifyIgnore\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TagClassShape<Id, Shape> {\n  readonly [TagTypeId]: TagTypeId\n  readonly Type: Shape\n  readonly Id: Id\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TagClass<Self, Id, Type> extends Tag<Self, Type> {\n  new(_: never): TagClassShape<Id, Type>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface TagUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Tag?: () => A[Unify.typeSymbol] extends Tag<infer I0, infer S0> | infer _ ? Tag<I0, S0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface TagUnifyIgnore {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Tag {\n  /**\n   * @since 2.0.0\n   */\n  export type Service<T extends Tag<any, any> | TagClassShape<any, any>> = T extends Tag<any, infer A> ? A\n    : T extends TagClassShape<any, infer A> ? A\n    : never\n  /**\n   * @since 2.0.0\n   */\n  export type Identifier<T extends Tag<any, any> | TagClassShape<any, any>> = T extends Tag<infer A, any> ? A\n    : T extends TagClassShape<any, any> ? T\n    : never\n}\n\n/**\n * Creates a new `Tag` instance with an optional key parameter.\n *\n * @param key - A key that will be used to compare tags.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.GenericTag(\"PORT\").key === Context.GenericTag(\"PORT\").key, true)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const GenericTag: <Identifier, Service = Identifier>(key: string) => Tag<Identifier, Service> =\n  internal.makeGenericTag\n\nconst TypeId: unique symbol = internal.TypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type ValidTagsById<R> = R extends infer S ? Tag<S, any> : never\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Context<in Services> extends Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _Services: Types.Contravariant<Services>\n  }\n  readonly unsafeMap: Map<string, any>\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeMake: <Services>(unsafeMap: Map<string, any>) => Context<Services> = internal.makeContext\n\n/**\n * Checks if the provided argument is a `Context`.\n *\n * @param input - The value to be checked if it is a `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isContext: (input: unknown) => input is Context<never> = internal.isContext\n\n/**\n * Checks if the provided argument is a `Tag`.\n *\n * @param input - The value to be checked if it is a `Tag`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isTag(Context.GenericTag(\"Tag\")), true)\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isTag: (input: unknown) => input is Tag<any, any> = internal.isTag\n\n/**\n * Returns an empty `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: () => Context<never> = internal.empty\n\n/**\n * Creates a new `Context` with a single service associated to the tag.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <T extends Tag<any, any>>(tag: T, service: Tag.Service<T>) => Context<Tag.Identifier<T>> =\n  internal.make\n\n/**\n * Adds a service to a given `Context`.\n *\n * @example\n * import { Context, pipe } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = Context.make(Port, { PORT: 8080 })\n *\n * const Services = pipe(\n *   someContext,\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nexport const add: {\n  <T extends Tag<any, any>>(\n    tag: T,\n    service: Tag.Service<T>\n  ): <Services>(self: Context<Services>) => Context<Services | Tag.Identifier<T>>\n  <Services, T extends Tag<any, any>>(\n    self: Context<Services>,\n    tag: T,\n    service: Tag.Service<T>\n  ): Context<Services | Tag.Identifier<T>>\n} = internal.add\n\n/**\n * Get a service from the context that corresponds to the given tag.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { pipe, Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n * @category getters\n */\nexport const get: {\n  <Services, T extends ValidTagsById<Services>>(tag: T): (self: Context<Services>) => Tag.Service<T>\n  <Services, T extends ValidTagsById<Services>>(self: Context<Services>, tag: T): Tag.Service<T>\n} = internal.get\n\n/**\n * Get a service from the context that corresponds to the given tag.\n * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n *\n * For a safer version see {@link getOption}.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n * assert.throws(() => Context.unsafeGet(Services, Timeout))\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  <S, I>(tag: Tag<I, S>): <Services>(self: Context<Services>) => S\n  <Services, S, I>(self: Context<Services>, tag: Tag<I, S>): S\n} = internal.unsafeGet\n\n/**\n * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n * found, the `Option` object will be `None`.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOption: {\n  <S, I>(tag: Tag<I, S>): <Services>(self: Context<Services>) => Option<S>\n  <Services, S, I>(self: Context<Services>, tag: Tag<I, S>): Option<S>\n} = internal.getOption\n\n/**\n * Merges two `Context`s, returning a new `Context` containing the services of both.\n *\n * @param self - The first `Context` to merge.\n * @param that - The second `Context` to merge.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const firstContext = Context.make(Port, { PORT: 8080 })\n * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n *\n * const Services = Context.merge(firstContext, secondContext)\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nexport const merge: {\n  <R1>(that: Context<R1>): <Services>(self: Context<Services>) => Context<R1 | Services>\n  <Services, R1>(self: Context<Services>, that: Context<R1>): Context<Services | R1>\n} = internal.merge\n\n/**\n * Returns a new `Context` that contains only the specified services.\n *\n * @param self - The `Context` to prune services from.\n * @param tags - The list of `Tag`s to be included in the new `Context`.\n *\n * @example\n * import { pipe, Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * const Services = pipe(someContext, Context.pick(Port))\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n */\nexport const pick: <Services, S extends Array<ValidTagsById<Services>>>(\n  ...tags: S\n) => (self: Context<Services>) => Context<{ [k in keyof S]: Tag.Identifier<S[k]> }[number]> = internal.pick\n\n/**\n * @since 2.0.0\n */\nexport const omit: <Services, S extends Array<ValidTagsById<Services>>>(\n  ...tags: S\n) => (self: Context<Services>) => Context<Exclude<Services, { [k in keyof S]: Tag.Identifier<S[k]> }[keyof S]>> =\n  internal.omit\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Tag: <const Id extends string>(id: Id) => <Self, Shape>() => TagClass<Self, Id, Shape> = internal.Tag\n", "import type * as C from \"../Context.js\"\nimport * as Equal from \"../Equal.js\"\nimport { dual } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type * as O from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as STM from \"../STM.js\"\nimport { EffectPrototype, effectVariance } from \"./effectable.js\"\nimport * as option from \"./option.js\"\n\n/** @internal */\nexport const TagTypeId: C.TagTypeId = Symbol.for(\"effect/Context/Tag\") as C.TagTypeId\n\n/** @internal */\nconst STMSymbolKey = \"effect/STM\"\n\n/** @internal */\nexport const STMTypeId: STM.STMTypeId = Symbol.for(\n  STMSymbolKey\n) as STM.STMTypeId\n\n/** @internal */\nexport const TagProto: any = {\n  ...EffectPrototype,\n  _tag: \"Tag\",\n  _op: \"Tag\",\n  [STMTypeId]: effectVariance,\n  [TagTypeId]: {\n    _Service: (_: unknown) => _,\n    _Identifier: (_: unknown) => _\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON<I, A>(this: C.Tag<I, A>) {\n    return {\n      _id: \"Tag\",\n      key: this.key,\n      stack: this.stack\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  of<Service>(self: Service): Service {\n    return self\n  },\n  context<Identifier, Service>(\n    this: C.Tag<Identifier, Service>,\n    self: Service\n  ): C.Context<Identifier> {\n    return make(this, self)\n  }\n}\n\n/** @internal */\nexport const makeGenericTag = <Identifier, Service = Identifier>(key: string): C.Tag<Identifier, Service> => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 2\n  const creationError = new Error()\n  Error.stackTraceLimit = limit\n  const tag = Object.create(TagProto)\n  Object.defineProperty(tag, \"stack\", {\n    get() {\n      return creationError.stack\n    }\n  })\n  tag.key = key\n  return tag\n}\n\n/** @internal */\nexport const Tag = <const Id extends string>(id: Id) => <Self, Shape>(): C.TagClass<Self, Id, Shape> => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 2\n  const creationError = new Error()\n  Error.stackTraceLimit = limit\n\n  function TagClass() {}\n  Object.setPrototypeOf(TagClass, TagProto)\n  TagClass.key = id\n  Object.defineProperty(TagClass, \"stack\", {\n    get() {\n      return creationError.stack\n    }\n  })\n  return TagClass as any\n}\n\n/** @internal */\nexport const TypeId: C.TypeId = Symbol.for(\"effect/Context\") as C.TypeId\n\n/** @internal */\nexport const ContextProto: Omit<C.Context<unknown>, \"unsafeMap\"> = {\n  [TypeId]: {\n    _Services: (_: unknown) => _\n  },\n  [Equal.symbol]<A>(this: C.Context<A>, that: unknown): boolean {\n    if (isContext(that)) {\n      if (this.unsafeMap.size === that.unsafeMap.size) {\n        for (const k of this.unsafeMap.keys()) {\n          if (!that.unsafeMap.has(k) || !Equal.equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {\n            return false\n          }\n        }\n        return true\n      }\n    }\n    return false\n  },\n  [Hash.symbol]<A>(this: C.Context<A>): number {\n    return Hash.cached(this, Hash.number(this.unsafeMap.size))\n  },\n  pipe<A>(this: C.Context<A>) {\n    return pipeArguments(this, arguments)\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: C.Context<A>) {\n    return {\n      _id: \"Context\",\n      services: Array.from(this.unsafeMap).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return (this as any).toJSON()\n  }\n}\n\n/** @internal */\nexport const makeContext = <Services>(unsafeMap: Map<string, any>): C.Context<Services> => {\n  const context = Object.create(ContextProto)\n  context.unsafeMap = unsafeMap\n  return context\n}\n\nconst serviceNotFoundError = (tag: C.Tag<any, any>) => {\n  const error = new Error(`Service not found${tag.key ? `: ${String(tag.key)}` : \"\"}`)\n  if (tag.stack) {\n    const lines = tag.stack.split(\"\\n\")\n    if (lines.length > 2) {\n      const afterAt = lines[2].match(/at (.*)/)\n      if (afterAt) {\n        error.message = error.message + ` (defined at ${afterAt[1]})`\n      }\n    }\n  }\n  if (error.stack) {\n    const lines = error.stack.split(\"\\n\")\n    lines.splice(1, 3)\n    error.stack = lines.join(\"\\n\")\n  }\n  return error\n}\n\n/** @internal */\nexport const isContext = (u: unknown): u is C.Context<never> => hasProperty(u, TypeId)\n\n/** @internal */\nexport const isTag = (u: unknown): u is C.Tag<any, any> => hasProperty(u, TagTypeId)\n\nconst _empty = makeContext(new Map())\n\n/** @internal */\nexport const empty = (): C.Context<never> => _empty\n\n/** @internal */\nexport const make = <T extends C.Tag<any, any>>(\n  tag: T,\n  service: C.Tag.Service<T>\n): C.Context<C.Tag.Identifier<T>> => makeContext(new Map([[tag.key, service]]))\n\n/** @internal */\nexport const add = dual<\n  <T extends C.Tag<any, any>>(\n    tag: T,\n    service: C.Tag.Service<T>\n  ) => <Services>(\n    self: C.Context<Services>\n  ) => C.Context<Services | C.Tag.Identifier<T>>,\n  <Services, T extends C.Tag<any, any>>(\n    self: C.Context<Services>,\n    tag: T,\n    service: C.Tag.Service<T>\n  ) => C.Context<Services | C.Tag.Identifier<T>>\n>(3, (self, tag, service) => {\n  const map = new Map(self.unsafeMap)\n  map.set(tag.key, service)\n  return makeContext(map)\n})\n\n/** @internal */\nexport const unsafeGet = dual<\n  <S, I>(tag: C.Tag<I, S>) => <Services>(self: C.Context<Services>) => S,\n  <Services, S, I>(self: C.Context<Services>, tag: C.Tag<I, S>) => S\n>(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    throw serviceNotFoundError(tag as any)\n  }\n  return self.unsafeMap.get(tag.key)! as any\n})\n\n/** @internal */\nexport const get: {\n  <Services, T extends C.ValidTagsById<Services>>(tag: T): (self: C.Context<Services>) => C.Tag.Service<T>\n  <Services, T extends C.ValidTagsById<Services>>(self: C.Context<Services>, tag: T): C.Tag.Service<T>\n} = unsafeGet\n\n/** @internal */\nexport const getOption = dual<\n  <S, I>(tag: C.Tag<I, S>) => <Services>(self: C.Context<Services>) => O.Option<S>,\n  <Services, S, I>(self: C.Context<Services>, tag: C.Tag<I, S>) => O.Option<S>\n>(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    return option.none\n  }\n  return option.some(self.unsafeMap.get(tag.key)! as any)\n})\n\n/** @internal */\nexport const merge = dual<\n  <R1>(that: C.Context<R1>) => <Services>(self: C.Context<Services>) => C.Context<Services | R1>,\n  <Services, R1>(self: C.Context<Services>, that: C.Context<R1>) => C.Context<Services | R1>\n>(2, (self, that) => {\n  const map = new Map(self.unsafeMap)\n  for (const [tag, s] of that.unsafeMap) {\n    map.set(tag, s)\n  }\n  return makeContext(map)\n})\n\n/** @internal */\nexport const pick =\n  <Services, S extends Array<C.ValidTagsById<Services>>>(...tags: S) =>\n  (self: C.Context<Services>): C.Context<\n    { [k in keyof S]: C.Tag.Identifier<S[k]> }[number]\n  > => {\n    const tagSet = new Set<string>(tags.map((_) => _.key))\n    const newEnv = new Map()\n    for (const [tag, s] of self.unsafeMap.entries()) {\n      if (tagSet.has(tag)) {\n        newEnv.set(tag, s)\n      }\n    }\n    return makeContext<{ [k in keyof S]: C.Tag.Identifier<S[k]> }[number]>(newEnv)\n  }\n\n/** @internal */\nexport const omit =\n  <Services, S extends Array<C.ValidTagsById<Services>>>(...tags: S) =>\n  (self: C.Context<Services>): C.Context<\n    Exclude<Services, { [k in keyof S]: C.Tag.Identifier<S[k]> }[keyof S]>\n  > => {\n    const newEnv = new Map(self.unsafeMap)\n    for (const tag of tags) {\n      newEnv.delete(tag.key)\n    }\n    return makeContext(newEnv)\n  }\n", "/**\n * @since 2.0.0\n */\nimport * as RA from \"./Array.js\"\nimport type { NonEmptyReadonlyArray } from \"./Array.js\"\nimport type { Either } from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual, identity, pipe } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { NonEmptyIterable } from \"./NonEmptyIterable.js\"\nimport type { Option } from \"./Option.js\"\nimport * as O from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { Covariant, NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/Chunk\") as TypeId\n\n/**\n * @category symbol\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Chunk<out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  readonly length: number\n  /** @internal */\n  right: Chunk<A>\n  /** @internal */\n  left: Chunk<A>\n  /** @internal */\n  backing: Backing<A>\n  /** @internal */\n  depth: number\n}\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport interface NonEmptyChunk<out A> extends Chunk<A>, NonEmptyIterable<A> {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ChunkTypeLambda extends TypeLambda {\n  readonly type: Chunk<this[\"Target\"]>\n}\n\ntype Backing<A> =\n  | IArray<A>\n  | IConcat<A>\n  | ISingleton<A>\n  | IEmpty\n  | ISlice<A>\n\ninterface IArray<A> {\n  readonly _tag: \"IArray\"\n  readonly array: ReadonlyArray<A>\n}\n\ninterface IConcat<A> {\n  readonly _tag: \"IConcat\"\n  readonly left: Chunk<A>\n  readonly right: Chunk<A>\n}\n\ninterface ISingleton<A> {\n  readonly _tag: \"ISingleton\"\n  readonly a: A\n}\n\ninterface IEmpty {\n  readonly _tag: \"IEmpty\"\n}\n\ninterface ISlice<A> {\n  readonly _tag: \"ISlice\"\n  readonly chunk: Chunk<A>\n  readonly offset: number\n  readonly length: number\n}\n\nfunction copy<A>(\n  src: ReadonlyArray<A>,\n  srcPos: number,\n  dest: Array<A>,\n  destPos: number,\n  len: number\n) {\n  for (let i = srcPos; i < Math.min(src.length, srcPos + len); i++) {\n    dest[destPos + i - srcPos] = src[i]!\n  }\n  return dest\n}\n\nconst emptyArray: ReadonlyArray<never> = []\n\n/**\n * Compares the two chunks of equal length using the specified function\n *\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Chunk<A>> =>\n  Equivalence.make((self, that) =>\n    self.length === that.length && toReadonlyArray(self).every((value, i) => isEquivalent(value, unsafeGet(that, i)))\n  )\n\nconst _equivalence = getEquivalence(Equal.equals)\n\nconst ChunkProto: Omit<Chunk<unknown>, \"backing\" | \"depth\" | \"left\" | \"length\" | \"right\"> = {\n  [TypeId]: {\n    _A: (_: never) => _\n  },\n  toString<A>(this: Chunk<A>) {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: Chunk<A>) {\n    return {\n      _id: \"Chunk\",\n      values: toReadonlyArray(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]<A>(this: Chunk<A>) {\n    return this.toJSON()\n  },\n  [Equal.symbol]<A>(this: Chunk<A>, that: unknown): boolean {\n    return isChunk(that) && _equivalence(this, that)\n  },\n  [Hash.symbol]<A>(this: Chunk<A>): number {\n    return Hash.cached(this, Hash.array(toReadonlyArray(this)))\n  },\n  [Symbol.iterator]<A>(this: Chunk<A>): Iterator<A> {\n    switch (this.backing._tag) {\n      case \"IArray\": {\n        return this.backing.array[Symbol.iterator]()\n      }\n      case \"IEmpty\": {\n        return emptyArray[Symbol.iterator]()\n      }\n      default: {\n        return toReadonlyArray(this)[Symbol.iterator]()\n      }\n    }\n  },\n  pipe<A>(this: Chunk<A>) {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst makeChunk = <A>(backing: Backing<A>): Chunk<A> => {\n  const chunk = Object.create(ChunkProto)\n  chunk.backing = backing\n  switch (backing._tag) {\n    case \"IEmpty\": {\n      chunk.length = 0\n      chunk.depth = 0\n      chunk.left = chunk\n      chunk.right = chunk\n      break\n    }\n    case \"IConcat\": {\n      chunk.length = backing.left.length + backing.right.length\n      chunk.depth = 1 + Math.max(backing.left.depth, backing.right.depth)\n      chunk.left = backing.left\n      chunk.right = backing.right\n      break\n    }\n    case \"IArray\": {\n      chunk.length = backing.array.length\n      chunk.depth = 0\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n    case \"ISingleton\": {\n      chunk.length = 1\n      chunk.depth = 0\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n    case \"ISlice\": {\n      chunk.length = backing.length\n      chunk.depth = backing.chunk.depth + 1\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n  }\n  return chunk\n}\n\n/**\n * Checks if `u` is a `Chunk<unknown>`\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const isChunk: {\n  <A>(u: Iterable<A>): u is Chunk<A>\n  (u: unknown): u is Chunk<unknown>\n} = (u: unknown): u is Chunk<unknown> => hasProperty(u, TypeId)\n\nconst _empty = makeChunk<never>({ _tag: \"IEmpty\" })\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: <A = never>() => Chunk<A> = () => _empty\n\n/**\n * Builds a `NonEmptyChunk` from an non-empty collection of elements.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <As extends readonly [any, ...ReadonlyArray<any>]>(\n  ...as: As\n): NonEmptyChunk<As[number]> => as.length === 1 ? of(as[0]) : unsafeFromNonEmptyArray(as)\n\n/**\n * Builds a `NonEmptyChunk` from a single element.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): NonEmptyChunk<A> => makeChunk({ _tag: \"ISingleton\", a }) as any\n\n/**\n * Creates a new `Chunk` from an iterable collection of values.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(self: Iterable<A>): Chunk<A> =>\n  isChunk(self) ? self : makeChunk({ _tag: \"IArray\", array: RA.fromIterable(self) })\n\nconst copyToArray = <A>(self: Chunk<A>, array: Array<any>, initial: number): void => {\n  switch (self.backing._tag) {\n    case \"IArray\": {\n      copy(self.backing.array, 0, array, initial, self.length)\n      break\n    }\n    case \"IConcat\": {\n      copyToArray(self.left, array, initial)\n      copyToArray(self.right, array, initial + self.left.length)\n      break\n    }\n    case \"ISingleton\": {\n      array[initial] = self.backing.a\n      break\n    }\n    case \"ISlice\": {\n      let i = 0\n      let j = initial\n      while (i < self.length) {\n        array[j] = unsafeGet(self, i)\n        i += 1\n        j += 1\n      }\n      break\n    }\n  }\n}\n\nconst toArray_ = <A>(self: Chunk<A>): Array<A> => toReadonlyArray(self).slice()\n\n/**\n * Converts a `Chunk` into an `Array`. If the provided `Chunk` is non-empty\n * (`NonEmptyChunk`), the function will return a `NonEmptyArray`, ensuring the\n * non-empty property is preserved.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray: <S extends Chunk<any>>(\n  self: S\n) => S extends NonEmptyChunk<any> ? RA.NonEmptyArray<Chunk.Infer<S>> : Array<Chunk.Infer<S>> = toArray_ as any\n\nconst toReadonlyArray_ = <A>(self: Chunk<A>): ReadonlyArray<A> => {\n  switch (self.backing._tag) {\n    case \"IEmpty\": {\n      return emptyArray\n    }\n    case \"IArray\": {\n      return self.backing.array\n    }\n    default: {\n      const arr = new Array<A>(self.length)\n      copyToArray(self, arr, 0)\n      self.backing = {\n        _tag: \"IArray\",\n        array: arr\n      }\n      self.left = _empty\n      self.right = _empty\n      self.depth = 0\n      return arr\n    }\n  }\n}\n\n/**\n * Converts a `Chunk` into a `ReadonlyArray`. If the provided `Chunk` is\n * non-empty (`NonEmptyChunk`), the function will return a\n * `NonEmptyReadonlyArray`, ensuring the non-empty property is preserved.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toReadonlyArray: <S extends Chunk<any>>(\n  self: S\n) => S extends NonEmptyChunk<any> ? RA.NonEmptyReadonlyArray<Chunk.Infer<S>> : ReadonlyArray<Chunk.Infer<S>> =\n  toReadonlyArray_ as any\n\nconst reverseChunk = <A>(self: Chunk<A>): Chunk<A> => {\n  switch (self.backing._tag) {\n    case \"IEmpty\":\n    case \"ISingleton\":\n      return self\n    case \"IArray\": {\n      return makeChunk({ _tag: \"IArray\", array: RA.reverse(self.backing.array) })\n    }\n    case \"IConcat\": {\n      return makeChunk({ _tag: \"IConcat\", left: reverse(self.backing.right), right: reverse(self.backing.left) })\n    }\n    case \"ISlice\":\n      return unsafeFromArray(RA.reverse(toReadonlyArray(self)))\n  }\n}\n\n/**\n * Reverses the order of elements in a `Chunk`.\n * Importantly, if the input chunk is a `NonEmptyChunk`, the reversed chunk will also be a `NonEmptyChunk`.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * const numbers = Chunk.make(1, 2, 3)\n * const reversedNumbers = Chunk.reverse(numbers)\n * assert.deepStrictEqual(reversedNumbers, Chunk.make(3, 2, 1))\n *\n * @since 2.0.0\n * @category elements\n */\nexport const reverse: <S extends Chunk<any>>(self: S) => Chunk.With<S, Chunk.Infer<S>> = reverseChunk as any\n\n/**\n * This function provides a safe way to read a value at a particular index from a `Chunk`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const get: {\n  (index: number): <A>(self: Chunk<A>) => Option<A>\n  <A>(self: Chunk<A>, index: number): Option<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, index: number): Option<A> =>\n    index < 0 || index >= self.length ? O.none() : O.some(unsafeGet(self, index))\n)\n\n/**\n * Wraps an array into a chunk without copying, unsafe on mutable arrays\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeFromArray = <A>(self: ReadonlyArray<A>): Chunk<A> => makeChunk({ _tag: \"IArray\", array: self })\n\n/**\n * Wraps an array into a chunk without copying, unsafe on mutable arrays\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeFromNonEmptyArray = <A>(self: NonEmptyReadonlyArray<A>): NonEmptyChunk<A> =>\n  unsafeFromArray(self) as any\n\n/**\n * Gets an element unsafely, will throw on out of bounds\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  (index: number): <A>(self: Chunk<A>) => A\n  <A>(self: Chunk<A>, index: number): A\n} = dual(2, <A>(self: Chunk<A>, index: number): A => {\n  switch (self.backing._tag) {\n    case \"IEmpty\": {\n      throw new Error(`Index out of bounds`)\n    }\n    case \"ISingleton\": {\n      if (index !== 0) {\n        throw new Error(`Index out of bounds`)\n      }\n      return self.backing.a\n    }\n    case \"IArray\": {\n      if (index >= self.length || index < 0) {\n        throw new Error(`Index out of bounds`)\n      }\n      return self.backing.array[index]!\n    }\n    case \"IConcat\": {\n      return index < self.left.length\n        ? unsafeGet(self.left, index)\n        : unsafeGet(self.right, index - self.left.length)\n    }\n    case \"ISlice\": {\n      return unsafeGet(self.backing.chunk, index + self.backing.offset)\n    }\n  }\n})\n\n/**\n * Appends the specified element to the end of the `Chunk`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  <A2>(a: A2): <A>(self: Chunk<A>) => NonEmptyChunk<A2 | A>\n  <A, A2>(self: Chunk<A>, a: A2): NonEmptyChunk<A | A2>\n} = dual(2, <A, A2>(self: Chunk<A>, a: A2): NonEmptyChunk<A | A2> => appendAll(self, of(a)))\n\n/**\n * Prepend an element to the front of a `Chunk`, creating a new `NonEmptyChunk`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  <B>(elem: B): <A>(self: Chunk<A>) => NonEmptyChunk<B | A>\n  <A, B>(self: Chunk<A>, elem: B): NonEmptyChunk<A | B>\n} = dual(2, <A, B>(self: Chunk<A>, elem: B): NonEmptyChunk<A | B> => appendAll(of(elem), self))\n\n/**\n * Takes the first up to `n` elements from the chunk\n *\n * @since 2.0.0\n */\nexport const take: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => {\n  if (n <= 0) {\n    return _empty\n  } else if (n >= self.length) {\n    return self\n  } else {\n    switch (self.backing._tag) {\n      case \"ISlice\": {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self.backing.chunk,\n          length: n,\n          offset: self.backing.offset\n        })\n      }\n      case \"IConcat\": {\n        if (n > self.left.length) {\n          return makeChunk({\n            _tag: \"IConcat\",\n            left: self.left,\n            right: take(self.right, n - self.left.length)\n          })\n        }\n\n        return take(self.left, n)\n      }\n      default: {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self,\n          offset: 0,\n          length: n\n        })\n      }\n    }\n  }\n})\n\n/**\n * Drops the first up to `n` elements from the chunk\n *\n * @since 2.0.0\n */\nexport const drop: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => {\n  if (n <= 0) {\n    return self\n  } else if (n >= self.length) {\n    return _empty\n  } else {\n    switch (self.backing._tag) {\n      case \"ISlice\": {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self.backing.chunk,\n          offset: self.backing.offset + n,\n          length: self.backing.length - n\n        })\n      }\n      case \"IConcat\": {\n        if (n > self.left.length) {\n          return drop(self.right, n - self.left.length)\n        }\n        return makeChunk({\n          _tag: \"IConcat\",\n          left: drop(self.left, n),\n          right: self.right\n        })\n      }\n      default: {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self,\n          offset: n,\n          length: self.length - n\n        })\n      }\n    }\n  }\n})\n\n/**\n * Drops the last `n` elements.\n *\n * @since 2.0.0\n */\nexport const dropRight: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => take(self, Math.max(0, self.length - n)))\n\n/**\n * Drops all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n */\nexport const dropWhile: {\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => {\n  const arr = toReadonlyArray(self)\n  const len = arr.length\n  let i = 0\n  while (i < len && predicate(arr[i]!)) {\n    i++\n  }\n  return drop(self, i)\n})\n\n/**\n * Prepends the specified prefix chunk to the beginning of the specified chunk.\n * If either chunk is non-empty, the result is also a non-empty chunk.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n *   [\"a\", \"b\", 1, 2]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  <S extends Chunk<any>, T extends Chunk<any>>(\n    that: T\n  ): (self: S) => Chunk.OrNonEmpty<S, T, Chunk.Infer<S> | Chunk.Infer<T>>\n  <A, B>(self: Chunk<A>, that: NonEmptyChunk<B>): NonEmptyChunk<A | B>\n  <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): NonEmptyChunk<A | B>\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(2, <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): Chunk<A | B> => appendAll(that, self))\n\n/**\n * Concatenates two chunks, combining their elements.\n * If either chunk is non-empty, the result is also a non-empty chunk.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n *   [1, 2, \"a\", \"b\"]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  <S extends Chunk<any>, T extends Chunk<any>>(\n    that: T\n  ): (self: S) => Chunk.OrNonEmpty<S, T, Chunk.Infer<S> | Chunk.Infer<T>>\n  <A, B>(self: Chunk<A>, that: NonEmptyChunk<B>): NonEmptyChunk<A | B>\n  <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): NonEmptyChunk<A | B>\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(2, <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B> => {\n  if (self.backing._tag === \"IEmpty\") {\n    return that\n  }\n  if (that.backing._tag === \"IEmpty\") {\n    return self\n  }\n  const diff = that.depth - self.depth\n  if (Math.abs(diff) <= 1) {\n    return makeChunk<A | B>({ _tag: \"IConcat\", left: self, right: that })\n  } else if (diff < -1) {\n    if (self.left.depth >= self.right.depth) {\n      const nr = appendAll(self.right, that)\n      return makeChunk({ _tag: \"IConcat\", left: self.left, right: nr })\n    } else {\n      const nrr = appendAll(self.right.right, that)\n      if (nrr.depth === self.depth - 3) {\n        const nr = makeChunk({ _tag: \"IConcat\", left: self.right.left, right: nrr })\n        return makeChunk({ _tag: \"IConcat\", left: self.left, right: nr })\n      } else {\n        const nl = makeChunk({ _tag: \"IConcat\", left: self.left, right: self.right.left })\n        return makeChunk({ _tag: \"IConcat\", left: nl, right: nrr })\n      }\n    }\n  } else {\n    if (that.right.depth >= that.left.depth) {\n      const nl = appendAll(self, that.left)\n      return makeChunk({ _tag: \"IConcat\", left: nl, right: that.right })\n    } else {\n      const nll = appendAll(self, that.left.left)\n      if (nll.depth === that.depth - 3) {\n        const nl = makeChunk({ _tag: \"IConcat\", left: nll, right: that.left.right })\n        return makeChunk({ _tag: \"IConcat\", left: nl, right: that.right })\n      } else {\n        const nr = makeChunk({ _tag: \"IConcat\", left: that.left.right, right: that.right })\n        return makeChunk({ _tag: \"IConcat\", left: nll, right: nr })\n      }\n    }\n  }\n})\n\n/**\n * Returns a filtered and mapped subset of the elements.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMap: {\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Chunk<A>) => Chunk<B>\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Option<B>): Chunk<B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Option<B>): Chunk<B> => unsafeFromArray(RA.filterMap(self, f))\n)\n\n/**\n * Returns a filtered and mapped subset of the elements.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Chunk<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Chunk<B>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => unsafeFromArray(RA.filter(self, predicate))\n)\n\n/**\n * Transforms all elements of the chunk for as long as the specified function returns some value\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMapWhile: {\n  <A, B>(f: (a: A) => Option<B>): (self: Chunk<A>) => Chunk<B>\n  <A, B>(self: Chunk<A>, f: (a: A) => Option<B>): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A) => Option<B>) => unsafeFromArray(RA.filterMapWhile(self, f)))\n\n/**\n * Filter out optional values\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const compact = <A>(self: Chunk<Option<A>>): Chunk<A> => filterMap(self, identity)\n\n/**\n * Applies a function to each element in a chunk and returns a new chunk containing the concatenated mapped elements.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <S extends Chunk<any>, T extends Chunk<any>>(\n    f: (a: Chunk.Infer<S>, i: number) => T\n  ): (self: S) => Chunk.AndNonEmpty<S, T, Chunk.Infer<T>>\n  <A, B>(self: NonEmptyChunk<A>, f: (a: A, i: number) => NonEmptyChunk<B>): NonEmptyChunk<B>\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Chunk<B>): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A, i: number) => Chunk<B>) => {\n  if (self.backing._tag === \"ISingleton\") {\n    return f(self.backing.a, 0)\n  }\n  let out: Chunk<B> = _empty\n  let i = 0\n  for (const k of self) {\n    out = appendAll(out, f(k, i++))\n  }\n  return out\n})\n\n/**\n * Applies the specified function to each element of the `List`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const forEach: {\n  <A, B>(f: (a: A) => B): (self: Chunk<A>) => void\n  <A, B>(self: Chunk<A>, f: (a: A) => B): void\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A) => B): void => toReadonlyArray(self).forEach(f))\n\n/**\n * Flattens a chunk of chunks into a single chunk by concatenating all chunks.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <S extends Chunk<Chunk<any>>>(self: S) => Chunk.Flatten<S> = flatMap(identity) as any\n\n/**\n * Groups elements in chunks of up to `n` elements.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const chunksOf: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<Chunk<A>>\n  <A>(self: Chunk<A>, n: number): Chunk<Chunk<A>>\n} = dual(2, <A>(self: Chunk<A>, n: number) => {\n  const gr: Array<Chunk<A>> = []\n  let current: Array<A> = []\n  toReadonlyArray(self).forEach((a) => {\n    current.push(a)\n    if (current.length >= n) {\n      gr.push(unsafeFromArray(current))\n      current = []\n    }\n  })\n  if (current.length > 0) {\n    gr.push(unsafeFromArray(current))\n  }\n  return unsafeFromArray(gr)\n})\n\n/**\n * Creates a Chunk of unique values that are included in all given Chunks.\n *\n * The order and references of result values are determined by the Chunk.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const intersection: {\n  <A>(that: Chunk<A>): <B>(self: Chunk<B>) => Chunk<A & B>\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A & B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A & B> =>\n    unsafeFromArray(RA.intersection(toReadonlyArray(self), toReadonlyArray(that)))\n)\n\n/**\n * Determines if the chunk is empty.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEmpty = <A>(self: Chunk<A>): boolean => self.length === 0\n\n/**\n * Determines if the chunk is not empty.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isNonEmpty = <A>(self: Chunk<A>): self is NonEmptyChunk<A> => self.length > 0\n\n/**\n * Returns the first element of this chunk if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const head: <A>(self: Chunk<A>) => Option<A> = get(0)\n\n/**\n * Returns the first element of this chunk.\n *\n * It will throw an error if the chunk is empty.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeHead = <A>(self: Chunk<A>): A => unsafeGet(self, 0)\n\n/**\n * Returns the first element of this non empty chunk.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const headNonEmpty: <A>(self: NonEmptyChunk<A>) => A = unsafeHead\n\n/**\n * Returns the last element of this chunk if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const last = <A>(self: Chunk<A>): Option<A> => get(self, self.length - 1)\n\n/**\n * Returns the last element of this chunk.\n *\n * It will throw an error if the chunk is empty.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeLast = <A>(self: Chunk<A>): A => unsafeGet(self, self.length - 1)\n\n/**\n * Returns the last element of this non empty chunk.\n *\n * @since 3.4.0\n * @category elements\n */\nexport const lastNonEmpty: <A>(self: NonEmptyChunk<A>) => A = unsafeLast\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Chunk {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends Chunk<any>> = S extends Chunk<infer A> ? A : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends Chunk<any>, A> = S extends NonEmptyChunk<any> ? NonEmptyChunk<A> : Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<S extends Chunk<any>, T extends Chunk<any>, A> = S extends NonEmptyChunk<any> ?\n    NonEmptyChunk<A>\n    : T extends NonEmptyChunk<any> ? NonEmptyChunk<A>\n    : Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<S extends Chunk<any>, T extends Chunk<any>, A> = S extends NonEmptyChunk<any> ?\n    T extends NonEmptyChunk<any> ? NonEmptyChunk<A>\n    : Chunk<A> :\n    Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type Flatten<T extends Chunk<Chunk<any>>> = T extends NonEmptyChunk<NonEmptyChunk<infer A>> ? NonEmptyChunk<A>\n    : T extends Chunk<Chunk<infer A>> ? Chunk<A>\n    : never\n}\n\n/**\n * Transforms the elements of a chunk using the specified mapping function.\n * If the input chunk is non-empty, the resulting chunk will also be non-empty.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Chunk.map(Chunk.make(1, 2), (n) => n + 1),\n *   Chunk.make(2, 3)\n * )\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <S extends Chunk<any>, B>(f: (a: Chunk.Infer<S>, i: number) => B): (self: S) => Chunk.With<S, B>\n  <A, B>(self: NonEmptyChunk<A>, f: (a: A, i: number) => B): NonEmptyChunk<B>\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => B): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A, i: number) => B): Chunk<B> =>\n  self.backing._tag === \"ISingleton\" ?\n    of(f(self.backing.a, 0)) :\n    unsafeFromArray(pipe(toReadonlyArray(self), RA.map((a, i) => f(a, i)))))\n\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const mapAccum: {\n  <S, A, B>(s: S, f: (s: S, a: A) => readonly [S, B]): (self: Chunk<A>) => [S, Chunk<B>]\n  <S, A, B>(self: Chunk<A>, s: S, f: (s: S, a: A) => readonly [S, B]): [S, Chunk<B>]\n} = dual(3, <S, A, B>(self: Chunk<A>, s: S, f: (s: S, a: A) => readonly [S, B]): [S, Chunk<B>] => {\n  const [s1, as] = RA.mapAccum(self, s, f)\n  return [s1, unsafeFromArray(as)]\n})\n\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  <A, B extends A>(\n    refinement: (a: NoInfer<A>, i: number) => a is B\n  ): (self: Chunk<A>) => [excluded: Chunk<Exclude<A, B>>, satisfying: Chunk<B>]\n  <A>(\n    predicate: (a: NoInfer<A>, i: number) => boolean\n  ): (self: Chunk<A>) => [excluded: Chunk<A>, satisfying: Chunk<A>]\n  <A, B extends A>(\n    self: Chunk<A>,\n    refinement: (a: A, i: number) => a is B\n  ): [excluded: Chunk<Exclude<A, B>>, satisfying: Chunk<B>]\n  <A>(self: Chunk<A>, predicate: (a: A, i: number) => boolean): [excluded: Chunk<A>, satisfying: Chunk<A>]\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: (a: A, i: number) => boolean): [excluded: Chunk<A>, satisfying: Chunk<A>] =>\n    pipe(\n      RA.partition(toReadonlyArray(self), predicate),\n      ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n    )\n)\n\n/**\n * Partitions the elements of this chunk into two chunks using f.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  <A, B, C>(f: (a: A) => Either<C, B>): (self: Chunk<A>) => [left: Chunk<B>, right: Chunk<C>]\n  <A, B, C>(self: Chunk<A>, f: (a: A) => Either<C, B>): [left: Chunk<B>, right: Chunk<C>]\n} = dual(2, <A, B, C>(self: Chunk<A>, f: (a: A) => Either<C, B>): [left: Chunk<B>, right: Chunk<C>] =>\n  pipe(\n    RA.partitionMap(toReadonlyArray(self), f),\n    ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n  ))\n\n/**\n * Partitions the elements of this chunk into two chunks.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate = <A, B>(self: Chunk<Either<B, A>>): [Chunk<A>, Chunk<B>] =>\n  pipe(\n    RA.separate(toReadonlyArray(self)),\n    ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n  )\n\n/**\n * Retireves the size of the chunk\n *\n * @since 2.0.0\n * @category elements\n */\nexport const size = <A>(self: Chunk<A>): number => self.length\n\n/**\n * Sort the elements of a Chunk in increasing order, creating a new Chunk.\n *\n * @since 2.0.0\n * @category sorting\n */\nexport const sort: {\n  <B>(O: Order.Order<B>): <A extends B>(self: Chunk<A>) => Chunk<A>\n  <A extends B, B>(self: Chunk<A>, O: Order.Order<B>): Chunk<A>\n} = dual(\n  2,\n  <A extends B, B>(self: Chunk<A>, O: Order.Order<B>): Chunk<A> => unsafeFromArray(RA.sort(toReadonlyArray(self), O))\n)\n\n/**\n * @since 2.0.0\n * @category sorting\n */\nexport const sortWith: {\n  <A, B>(f: (a: A) => B, order: Order.Order<B>): (self: Chunk<A>) => Chunk<A>\n  <A, B>(self: Chunk<A>, f: (a: A) => B, order: Order.Order<B>): Chunk<A>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, f: (a: A) => B, order: Order.Order<B>): Chunk<A> => sort(self, Order.mapInput(order, f))\n)\n\n/**\n *  Returns two splits of this chunk at the specified index.\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const splitAt: {\n  (n: number): <A>(self: Chunk<A>) => [beforeIndex: Chunk<A>, fromIndex: Chunk<A>]\n  <A>(self: Chunk<A>, n: number): [beforeIndex: Chunk<A>, fromIndex: Chunk<A>]\n} = dual(2, <A>(self: Chunk<A>, n: number): [Chunk<A>, Chunk<A>] => [take(self, n), drop(self, n)])\n\n/**\n * Splits a `NonEmptyChunk` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitNonEmptyAt: {\n  (n: number): <A>(self: NonEmptyChunk<A>) => [beforeIndex: NonEmptyChunk<A>, fromIndex: Chunk<A>]\n  <A>(self: NonEmptyChunk<A>, n: number): [beforeIndex: NonEmptyChunk<A>, fromIndex: Chunk<A>]\n} = dual(2, <A>(self: NonEmptyChunk<A>, n: number): [Chunk<A>, Chunk<A>] => {\n  const _n = Math.max(1, Math.floor(n))\n  return _n >= self.length ?\n    [self, empty()] :\n    [take(self, _n), drop(self, _n)]\n})\n\n/**\n * Splits this chunk into `n` equally sized chunks.\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const split: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<Chunk<A>>\n  <A>(self: Chunk<A>, n: number): Chunk<Chunk<A>>\n} = dual(2, <A>(self: Chunk<A>, n: number) => chunksOf(self, Math.ceil(self.length / Math.floor(n))))\n\n/**\n * Splits this chunk on the first element that matches this predicate.\n * Returns a tuple containing two chunks: the first one is before the match, and the second one is from the match onward.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitWhere: {\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => [beforeMatch: Chunk<A>, fromMatch: Chunk<A>]\n  <A>(self: Chunk<A>, predicate: Predicate<A>): [beforeMatch: Chunk<A>, fromMatch: Chunk<A>]\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): [beforeMatch: Chunk<A>, fromMatch: Chunk<A>] => {\n  let i = 0\n  for (const a of toReadonlyArray(self)) {\n    if (predicate(a)) {\n      break\n    } else {\n      i++\n    }\n  }\n  return splitAt(self, i)\n})\n\n/**\n * Returns every elements after the first.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const tail = <A>(self: Chunk<A>): Option<Chunk<A>> => self.length > 0 ? O.some(drop(self, 1)) : O.none()\n\n/**\n * Returns every elements after the first.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const tailNonEmpty = <A>(self: NonEmptyChunk<A>): Chunk<A> => drop(self, 1)\n\n/**\n * Takes the last `n` elements.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const takeRight: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => drop(self, self.length - n))\n\n/**\n * Takes all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const takeWhile: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Chunk<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Chunk<B>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => {\n  const out: Array<A> = []\n  for (const a of toReadonlyArray(self)) {\n    if (predicate(a)) {\n      out.push(a)\n    } else {\n      break\n    }\n  }\n  return unsafeFromArray(out)\n})\n\n/**\n * Creates a Chunks of unique values, in order, from all given Chunks.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const union: {\n  <A>(that: Chunk<A>): <B>(self: Chunk<B>) => Chunk<A | B>\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>) => unsafeFromArray(RA.union(toReadonlyArray(self), toReadonlyArray(that)))\n)\n\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const dedupe = <A>(self: Chunk<A>): Chunk<A> => unsafeFromArray(RA.dedupe(toReadonlyArray(self)))\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const dedupeAdjacent = <A>(self: Chunk<A>): Chunk<A> => unsafeFromArray(RA.dedupeAdjacent(self))\n\n/**\n * Takes a `Chunk` of pairs and return two corresponding `Chunk`s.\n *\n * Note: The function is reverse of `zip`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const unzip = <A, B>(self: Chunk<readonly [A, B]>): [Chunk<A>, Chunk<B>] => {\n  const [left, right] = RA.unzip(self)\n  return [unsafeFromArray(left), unsafeFromArray(right)]\n}\n\n/**\n * Zips this chunk pointwise with the specified chunk using the specified combiner.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <A, B, C>(that: Chunk<B>, f: (a: A, b: B) => C): (self: Chunk<A>) => Chunk<C>\n  <A, B, C>(self: Chunk<A>, that: Chunk<B>, f: (a: A, b: B) => C): Chunk<C>\n} = dual(\n  3,\n  <A, B, C>(self: Chunk<A>, that: Chunk<B>, f: (a: A, b: B) => C): Chunk<C> =>\n    unsafeFromArray(RA.zipWith(self, that, f))\n)\n\n/**\n * Zips this chunk pointwise with the specified chunk.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  <B>(that: Chunk<B>): <A>(self: Chunk<A>) => Chunk<[A, B]>\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<[A, B]> => zipWith(self, that, (a, b) => [a, b])\n)\n\n/**\n * Delete the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  (i: number): <A>(self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, i: number): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, i: number): Chunk<A> => unsafeFromArray(RA.remove(toReadonlyArray(self), i))\n)\n\n/**\n * @since 2.0.0\n */\nexport const modifyOption: {\n  <A, B>(i: number, f: (a: A) => B): (self: Chunk<A>) => Option<Chunk<A | B>>\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Option<Chunk<A | B>>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Option<Chunk<A | B>> =>\n    O.map(RA.modifyOption(toReadonlyArray(self), i, f), unsafeFromArray)\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  <A, B>(i: number, f: (a: A) => B): (self: Chunk<A>) => Chunk<A | B>\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Chunk<A | B>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Chunk<A | B> => O.getOrElse(modifyOption(self, i, f), () => self)\n)\n\n/**\n * Change the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const replace: {\n  <B>(i: number, b: B): <A>(self: Chunk<A>) => Chunk<B | A>\n  <A, B>(self: Chunk<A>, i: number, b: B): Chunk<B | A>\n} = dual(3, <A, B>(self: Chunk<A>, i: number, b: B): Chunk<B | A> => modify(self, i, () => b))\n\n/**\n * @since 2.0.0\n */\nexport const replaceOption: {\n  <B>(i: number, b: B): <A>(self: Chunk<A>) => Option<Chunk<B | A>>\n  <A, B>(self: Chunk<A>, i: number, b: B): Option<Chunk<B | A>>\n} = dual(3, <A, B>(self: Chunk<A>, i: number, b: B): Option<Chunk<B | A>> => modifyOption(self, i, () => b))\n\n/**\n * Return a Chunk of length n with element i initialized with f(i).\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy: {\n  <A>(f: (i: number) => A): (n: number) => NonEmptyChunk<A>\n  <A>(n: number, f: (i: number) => A): NonEmptyChunk<A>\n} = dual(2, (n, f) => fromIterable(RA.makeBy(n, f)))\n\n/**\n * Create a non empty `Chunk` containing a range of integers, including both endpoints.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end: number): NonEmptyChunk<number> =>\n  start <= end ? makeBy(end - start + 1, (i) => start + i) : of(start)\n\n// -------------------------------------------------------------------------------------\n// re-exports from ReadonlyArray\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns a function that checks if a `Chunk` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  <A>(a: A): (self: Chunk<A>) => boolean\n  <A>(self: Chunk<A>, a: A): boolean\n} = RA.contains\n\n/**\n * Returns a function that checks if a `Chunk` contains a given value using a provided `isEquivalent` function.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith: <A>(\n  isEquivalent: (self: A, that: A) => boolean\n) => {\n  (a: A): (self: Chunk<A>) => boolean\n  (self: Chunk<A>, a: A): boolean\n} = RA.containsWith\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Option<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Option<A>\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Option<B>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<A>\n} = RA.findFirst\n\n/**\n * Return the first index for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirstIndex: {\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => Option<number>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<number>\n} = RA.findFirstIndex\n\n/**\n * Find the last element for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Option<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Option<A>\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Option<B>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<A>\n} = RA.findLast\n\n/**\n * Return the last index for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLastIndex: {\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => Option<number>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<number>\n} = RA.findLastIndex\n\n/**\n * Check if a predicate holds true for every `Chunk` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const every: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => self is Chunk<B>\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => boolean\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): self is Chunk<B>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): self is Chunk<B> =>\n    RA.fromIterable(self).every(refinement)\n)\n\n/**\n * Check if a predicate holds true for some `Chunk` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => self is NonEmptyChunk<A>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): self is NonEmptyChunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: Predicate<A>): self is NonEmptyChunk<A> => RA.fromIterable(self).some(predicate)\n)\n\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const join: {\n  (sep: string): (self: Chunk<string>) => string\n  (self: Chunk<string>, sep: string): string\n} = RA.join\n\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Chunk<A>) => B\n  <A, B>(self: Chunk<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = RA.reduce\n\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduceRight: {\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Chunk<A>) => B\n  <A, B>(self: Chunk<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = RA.reduceRight\n\n/**\n * Creates a `Chunk` of values not included in the other given `Chunk` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Chunk`.\n *\n * @since 3.2.0\n */\nexport const differenceWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Chunk<A>): (self: Chunk<A>) => Chunk<A>\n  (self: Chunk<A>, that: Chunk<A>): Chunk<A>\n} => {\n  return dual(\n    2,\n    (self: Chunk<A>, that: Chunk<A>): Chunk<A> => unsafeFromArray(RA.differenceWith(isEquivalent)(that, self))\n  )\n}\n\n/**\n * Creates a `Chunk` of values not included in the other given `Chunk`.\n * The order and references of result values are determined by the first `Chunk`.\n *\n * @since 3.2.0\n */\nexport const difference: {\n  <A>(that: Chunk<A>): (self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, that: Chunk<A>): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, that: Chunk<A>): Chunk<A> => unsafeFromArray(RA.difference(that, self))\n)\n", "/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport type * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { NodeInspectSymbol } from \"./Inspectable.js\"\nimport * as Option from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, isBigInt, isNumber, isString } from \"./Predicate.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/Duration\")\n\nconst bigint0 = BigInt(0)\nconst bigint24 = BigInt(24)\nconst bigint60 = BigInt(60)\nconst bigint1e3 = BigInt(1_000)\nconst bigint1e6 = BigInt(1_000_000)\nconst bigint1e9 = BigInt(1_000_000_000)\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Duration extends Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly value: DurationValue\n}\n/**\n * @since 2.0.0\n * @category models\n */\nexport type DurationValue =\n  | { _tag: \"Millis\"; millis: number }\n  | { _tag: \"Nanos\"; nanos: bigint }\n  | { _tag: \"Infinity\" }\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Unit =\n  | \"nano\"\n  | \"nanos\"\n  | \"micro\"\n  | \"micros\"\n  | \"milli\"\n  | \"millis\"\n  | \"second\"\n  | \"seconds\"\n  | \"minute\"\n  | \"minutes\"\n  | \"hour\"\n  | \"hours\"\n  | \"day\"\n  | \"days\"\n  | \"week\"\n  | \"weeks\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type DurationInput =\n  | Duration\n  | number // millis\n  | bigint // nanos\n  | [seconds: number, nanos: number]\n  | `${number} ${Unit}`\n\nconst DURATION_REGEX = /^(-?\\d+(?:\\.\\d+)?)\\s+(nanos?|micros?|millis?|seconds?|minutes?|hours?|days?|weeks?)$/\n\n/**\n * @since 2.0.0\n */\nexport const decode = (input: DurationInput): Duration => {\n  if (isDuration(input)) {\n    return input\n  } else if (isNumber(input)) {\n    return millis(input)\n  } else if (isBigInt(input)) {\n    return nanos(input)\n  } else if (Array.isArray(input)) {\n    if (input.length === 2 && isNumber(input[0]) && isNumber(input[1])) {\n      return nanos(BigInt(input[0]) * bigint1e9 + BigInt(input[1]))\n    }\n  } else if (isString(input)) {\n    DURATION_REGEX.lastIndex = 0 // Reset the lastIndex before each use\n    const match = DURATION_REGEX.exec(input)\n    if (match) {\n      const [_, valueStr, unit] = match\n      const value = Number(valueStr)\n      switch (unit) {\n        case \"nano\":\n        case \"nanos\":\n          return nanos(BigInt(valueStr))\n        case \"micro\":\n        case \"micros\":\n          return micros(BigInt(valueStr))\n        case \"milli\":\n        case \"millis\":\n          return millis(value)\n        case \"second\":\n        case \"seconds\":\n          return seconds(value)\n        case \"minute\":\n        case \"minutes\":\n          return minutes(value)\n        case \"hour\":\n        case \"hours\":\n          return hours(value)\n        case \"day\":\n        case \"days\":\n          return days(value)\n        case \"week\":\n        case \"weeks\":\n          return weeks(value)\n      }\n    }\n  }\n  throw new Error(\"Invalid DurationInput\")\n}\n\n/**\n * @since 2.5.0\n */\nexport const decodeUnknown: (u: unknown) => Option.Option<Duration> = Option.liftThrowable(decode) as any\n\nconst zeroValue: DurationValue = { _tag: \"Millis\", millis: 0 }\nconst infinityValue: DurationValue = { _tag: \"Infinity\" }\n\nconst DurationProto: Omit<Duration, \"value\"> = {\n  [TypeId]: TypeId,\n  [Hash.symbol](this: Duration) {\n    return Hash.cached(this, Hash.structure(this.value))\n  },\n  [Equal.symbol](this: Duration, that: unknown): boolean {\n    return isDuration(that) && equals(this, that)\n  },\n  toString(this: Duration) {\n    return `Duration(${format(this)})`\n  },\n  toJSON(this: Duration) {\n    switch (this.value._tag) {\n      case \"Millis\":\n        return { _id: \"Duration\", _tag: \"Millis\", millis: this.value.millis }\n      case \"Nanos\":\n        return { _id: \"Duration\", _tag: \"Nanos\", hrtime: toHrTime(this) }\n      case \"Infinity\":\n        return { _id: \"Duration\", _tag: \"Infinity\" }\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as const\n\nconst make = (input: number | bigint): Duration => {\n  const duration = Object.create(DurationProto)\n  if (isNumber(input)) {\n    if (isNaN(input) || input <= 0) {\n      duration.value = zeroValue\n    } else if (!Number.isFinite(input)) {\n      duration.value = infinityValue\n    } else if (!Number.isInteger(input)) {\n      duration.value = { _tag: \"Nanos\", nanos: BigInt(Math.round(input * 1_000_000)) }\n    } else {\n      duration.value = { _tag: \"Millis\", millis: input }\n    }\n  } else if (input <= bigint0) {\n    duration.value = zeroValue\n  } else {\n    duration.value = { _tag: \"Nanos\", nanos: input }\n  }\n  return duration\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isDuration = (u: unknown): u is Duration => hasProperty(u, TypeId)\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isFinite = (self: Duration): boolean => self.value._tag !== \"Infinity\"\n\n/**\n * @since 3.5.0\n * @category guards\n */\nexport const isZero = (self: Duration): boolean => {\n  switch (self.value._tag) {\n    case \"Millis\": {\n      return self.value.millis === 0\n    }\n    case \"Nanos\": {\n      return self.value.nanos === bigint0\n    }\n    case \"Infinity\": {\n      return false\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const zero: Duration = make(0)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const infinity: Duration = make(Infinity)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const nanos = (nanos: bigint): Duration => make(nanos)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const micros = (micros: bigint): Duration => make(micros * bigint1e3)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const millis = (millis: number): Duration => make(millis)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const seconds = (seconds: number): Duration => make(seconds * 1000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const minutes = (minutes: number): Duration => make(minutes * 60_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const hours = (hours: number): Duration => make(hours * 3_600_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const days = (days: number): Duration => make(days * 86_400_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const weeks = (weeks: number): Duration => make(weeks * 604_800_000)\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toMillis = (self: DurationInput): number => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      return Infinity\n    case \"Nanos\":\n      return Number(_self.value.nanos) / 1_000_000\n    case \"Millis\":\n      return _self.value.millis\n  }\n}\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toSeconds = (self: DurationInput): number => toMillis(self) / 1_000\n\n/**\n * Get the duration in nanoseconds as a bigint.\n *\n * If the duration is infinite, returns `Option.none()`\n *\n * @since 2.0.0\n * @category getters\n */\nexport const toNanos = (self: DurationInput): Option.Option<bigint> => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      return Option.none()\n    case \"Nanos\":\n      return Option.some(_self.value.nanos)\n    case \"Millis\":\n      return Option.some(BigInt(Math.round(_self.value.millis * 1_000_000)))\n  }\n}\n\n/**\n * Get the duration in nanoseconds as a bigint.\n *\n * If the duration is infinite, it throws an error.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const unsafeToNanos = (self: DurationInput): bigint => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      throw new Error(\"Cannot convert infinite duration to nanos\")\n    case \"Nanos\":\n      return _self.value.nanos\n    case \"Millis\":\n      return BigInt(Math.round(_self.value.millis * 1_000_000))\n  }\n}\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toHrTime = (self: DurationInput): [seconds: number, nanos: number] => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      return [Infinity, 0]\n    case \"Nanos\":\n      return [\n        Number(_self.value.nanos / bigint1e9),\n        Number(_self.value.nanos % bigint1e9)\n      ]\n    case \"Millis\":\n      return [\n        Math.floor(_self.value.millis / 1000),\n        Math.round((_self.value.millis % 1000) * 1_000_000)\n      ]\n  }\n}\n\n/**\n * @since 2.0.0\n * @category pattern matching\n */\nexport const match: {\n  <A, B>(\n    options: {\n      readonly onMillis: (millis: number) => A\n      readonly onNanos: (nanos: bigint) => B\n    }\n  ): (self: DurationInput) => A | B\n  <A, B>(\n    self: DurationInput,\n    options: {\n      readonly onMillis: (millis: number) => A\n      readonly onNanos: (nanos: bigint) => B\n    }\n  ): A | B\n} = dual(2, <A, B>(\n  self: DurationInput,\n  options: {\n    readonly onMillis: (millis: number) => A\n    readonly onNanos: (nanos: bigint) => B\n  }\n): A | B => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Nanos\":\n      return options.onNanos(_self.value.nanos)\n    case \"Infinity\":\n      return options.onMillis(Infinity)\n    case \"Millis\":\n      return options.onMillis(_self.value.millis)\n  }\n})\n\n/**\n * @since 2.0.0\n * @category pattern matching\n */\nexport const matchWith: {\n  <A, B>(\n    that: DurationInput,\n    options: {\n      readonly onMillis: (self: number, that: number) => A\n      readonly onNanos: (self: bigint, that: bigint) => B\n    }\n  ): (self: DurationInput) => A | B\n  <A, B>(\n    self: DurationInput,\n    that: DurationInput,\n    options: {\n      readonly onMillis: (self: number, that: number) => A\n      readonly onNanos: (self: bigint, that: bigint) => B\n    }\n  ): A | B\n} = dual(3, <A, B>(\n  self: DurationInput,\n  that: DurationInput,\n  options: {\n    readonly onMillis: (self: number, that: number) => A\n    readonly onNanos: (self: bigint, that: bigint) => B\n  }\n): A | B => {\n  const _self = decode(self)\n  const _that = decode(that)\n  if (_self.value._tag === \"Infinity\" || _that.value._tag === \"Infinity\") {\n    return options.onMillis(\n      toMillis(_self),\n      toMillis(_that)\n    )\n  } else if (_self.value._tag === \"Nanos\" || _that.value._tag === \"Nanos\") {\n    const selfNanos = _self.value._tag === \"Nanos\" ?\n      _self.value.nanos :\n      BigInt(Math.round(_self.value.millis * 1_000_000))\n    const thatNanos = _that.value._tag === \"Nanos\" ?\n      _that.value.nanos :\n      BigInt(Math.round(_that.value.millis * 1_000_000))\n    return options.onNanos(selfNanos, thatNanos)\n  }\n\n  return options.onMillis(\n    _self.value.millis,\n    _that.value.millis\n  )\n})\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<Duration> = order.make((self, that) =>\n  matchWith(self, that, {\n    onMillis: (self, that) => (self < that ? -1 : self > that ? 1 : 0),\n    onNanos: (self, that) => (self < that ? -1 : self > that ? 1 : 0)\n  })\n)\n\n/**\n * Checks if a `Duration` is between a `minimum` and `maximum` value.\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const between: {\n  (options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): (self: DurationInput) => boolean\n  (self: DurationInput, options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): boolean\n} = order.between(order.mapInput(Order, decode))\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<Duration> = (self, that) =>\n  matchWith(self, that, {\n    onMillis: (self, that) => self === that,\n    onNanos: (self, that) => self === that\n  })\n\nconst _min = order.min(Order)\n\n/**\n * @since 2.0.0\n */\nexport const min: {\n  (that: DurationInput): (self: DurationInput) => Duration\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(2, (self: DurationInput, that: DurationInput): Duration => _min(decode(self), decode(that)))\n\nconst _max = order.max(Order)\n\n/**\n * @since 2.0.0\n */\nexport const max: {\n  (that: DurationInput): (self: DurationInput) => Duration\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(2, (self: DurationInput, that: DurationInput): Duration => _max(decode(self), decode(that)))\n\nconst _clamp = order.clamp(Order)\n\n/**\n * @since 2.0.0\n */\nexport const clamp: {\n  (options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): (self: DurationInput) => Duration\n  (self: DurationInput, options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): Duration\n} = dual(\n  2,\n  (self: DurationInput, options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): Duration =>\n    _clamp(decode(self), {\n      minimum: decode(options.minimum),\n      maximum: decode(options.maximum)\n    })\n)\n\n/**\n * @since 2.4.19\n * @category math\n */\nexport const divide: {\n  (by: number): (self: DurationInput) => Option.Option<Duration>\n  (self: DurationInput, by: number): Option.Option<Duration>\n} = dual(\n  2,\n  (self: DurationInput, by: number): Option.Option<Duration> =>\n    match(self, {\n      onMillis: (millis) => {\n        if (by === 0 || isNaN(by) || !Number.isFinite(by)) {\n          return Option.none()\n        }\n        return Option.some(make(millis / by))\n      },\n      onNanos: (nanos) => {\n        if (isNaN(by) || by <= 0 || !Number.isFinite(by)) {\n          return Option.none()\n        }\n        try {\n          return Option.some(make(nanos / BigInt(by)))\n        } catch (e) {\n          return Option.none()\n        }\n      }\n    })\n)\n\n/**\n * @since 2.4.19\n * @category math\n */\nexport const unsafeDivide: {\n  (by: number): (self: DurationInput) => Duration\n  (self: DurationInput, by: number): Duration\n} = dual(\n  2,\n  (self: DurationInput, by: number): Duration =>\n    match(self, {\n      onMillis: (millis) => make(millis / by),\n      onNanos: (nanos) => {\n        if (isNaN(by) || by < 0 || Object.is(by, -0)) {\n          return zero\n        } else if (Object.is(by, 0) || !Number.isFinite(by)) {\n          return infinity\n        }\n        return make(nanos / BigInt(by))\n      }\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const times: {\n  (times: number): (self: DurationInput) => Duration\n  (self: DurationInput, times: number): Duration\n} = dual(\n  2,\n  (self: DurationInput, times: number): Duration =>\n    match(self, {\n      onMillis: (millis) => make(millis * times),\n      onNanos: (nanos) => make(nanos * BigInt(times))\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const subtract: {\n  (that: DurationInput): (self: DurationInput) => Duration\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): Duration =>\n    matchWith(self, that, {\n      onMillis: (self, that) => make(self - that),\n      onNanos: (self, that) => make(self - that)\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const sum: {\n  (that: DurationInput): (self: DurationInput) => Duration\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): Duration =>\n    matchWith(self, that, {\n      onMillis: (self, that) => make(self + that),\n      onNanos: (self, that) => make(self + that)\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const lessThan: {\n  (that: DurationInput): (self: DurationInput) => boolean\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self < that,\n      onNanos: (self, that) => self < that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const lessThanOrEqualTo: {\n  (that: DurationInput): (self: DurationInput) => boolean\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self <= that,\n      onNanos: (self, that) => self <= that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const greaterThan: {\n  (that: DurationInput): (self: DurationInput) => boolean\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self > that,\n      onNanos: (self, that) => self > that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const greaterThanOrEqualTo: {\n  (that: DurationInput): (self: DurationInput) => boolean\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self >= that,\n      onNanos: (self, that) => self >= that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const equals: {\n  (that: DurationInput): (self: DurationInput) => boolean\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(2, (self: DurationInput, that: DurationInput): boolean => Equivalence(decode(self), decode(that)))\n\n/**\n * Converts a `Duration` to a human readable string.\n * @since 2.0.0\n *\n * @example\n * import { Duration } from \"effect\"\n *\n * Duration.format(Duration.millis(1000)) // \"1s\"\n * Duration.format(Duration.millis(1001)) // \"1s 1ms\"\n */\nexport const format = (self: DurationInput): string => {\n  const duration = decode(self)\n  const parts = []\n\n  if (duration.value._tag === \"Infinity\") {\n    return \"Infinity\"\n  }\n\n  const nanos = unsafeToNanos(duration)\n\n  if (nanos % bigint1e6) {\n    parts.push(`${nanos % bigint1e6}ns`)\n  }\n\n  const ms = nanos / bigint1e6\n  if (ms % bigint1e3 !== bigint0) {\n    parts.push(`${ms % bigint1e3}ms`)\n  }\n\n  const sec = ms / bigint1e3\n  if (sec % bigint60 !== bigint0) {\n    parts.push(`${sec % bigint60}s`)\n  }\n\n  const min = sec / bigint60\n  if (min % bigint60 !== bigint0) {\n    parts.push(`${min % bigint60}m`)\n  }\n\n  const hr = min / bigint60\n  if (hr % bigint24 !== bigint0) {\n    parts.push(`${hr % bigint24}h`)\n  }\n\n  const days = hr / bigint24\n  if (days !== bigint0) {\n    parts.push(`${days}d`)\n  }\n\n  return parts.reverse().join(\" \")\n}\n", "/** @internal */\nexport const SIZE = 5\n\n/** @internal */\nexport const BUCKET_SIZE = Math.pow(2, SIZE)\n\n/** @internal */\nexport const MASK = BUCKET_SIZE - 1\n\n/** @internal */\nexport const MAX_INDEX_NODE = BUCKET_SIZE / 2\n\n/** @internal */\nexport const MIN_ARRAY_NODE = BUCKET_SIZE / 4\n", "import { MASK } from \"./config.js\"\n\n/**\n * Hamming weight.\n *\n * Taken from: http://jsperf.com/hamming-weight\n *\n * @internal\n */\nexport function popcount(x: number) {\n  x -= (x >> 1) & 0x55555555\n  x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n  x = (x + (x >> 4)) & 0x0f0f0f0f\n  x += x >> 8\n  x += x >> 16\n  return x & 0x7f\n}\n\n/** @internal */\nexport function hashFragment(shift: number, h: number) {\n  return (h >>> shift) & MASK\n}\n\n/** @internal */\nexport function toBitmap(x: number) {\n  return 1 << x\n}\n\n/** @internal */\nexport function fromBitmap(bitmap: number, bit: number) {\n  return popcount(bitmap & (bit - 1))\n}\n", "/** @internal */\nexport interface Stack<out A> {\n  readonly value: A\n  readonly previous: Stack<A> | undefined\n}\n\nexport const make = <A>(value: A, previous?: Stack<A>): Stack<A> => ({\n  value,\n  previous\n})\n", "/** @internal */\nexport function arrayUpdate<A>(mutate: boolean, at: number, v: A, arr: Array<A>) {\n  let out = arr\n  if (!mutate) {\n    const len = arr.length\n    out = new Array(len)\n    for (let i = 0; i < len; ++i) out[i] = arr[i]!\n  }\n  out[at] = v\n  return out\n}\n\n/** @internal */\nexport function arraySpliceOut<A>(mutate: boolean, at: number, arr: Array<A>) {\n  const newLen = arr.length - 1\n  let i = 0\n  let g = 0\n  let out = arr\n  if (mutate) {\n    i = g = at\n  } else {\n    out = new Array(newLen)\n    while (i < at) out[g++] = arr[i++]!\n  }\n  ;++i\n  while (i <= newLen) out[g++] = arr[i++]!\n  if (mutate) {\n    out.length = newLen\n  }\n  return out\n}\n\n/** @internal */\nexport function arraySpliceIn<A>(mutate: boolean, at: number, v: A, arr: Array<A>) {\n  const len = arr.length\n  if (mutate) {\n    let i = len\n    while (i >= at) arr[i--] = arr[i]!\n    arr[at] = v\n    return arr\n  }\n  let i = 0,\n    g = 0\n  const out = new Array<A>(len + 1)\n  while (i < at) out[g++] = arr[i++]!\n  out[at] = v\n  while (i < len) out[++g] = arr[i++]!\n  return out\n}\n", "import { equals } from \"../../Equal.js\"\nimport type { HashMap } from \"../../HashMap.js\"\nimport * as O from \"../../Option.js\"\nimport { isTagged } from \"../../Predicate.js\"\nimport * as Stack from \"../stack.js\"\nimport { arraySpliceIn, arraySpliceOut, arrayUpdate } from \"./array.js\"\nimport { fromBitmap, hashFragment, toBitmap } from \"./bitwise.js\"\nimport { MAX_INDEX_NODE, MIN_ARRAY_NODE, SIZE } from \"./config.js\"\n\n/** @internal */\nexport type Node<K, V> =\n  | EmptyNode<K, V>\n  | LeafNode<K, V>\n  | CollisionNode<K, V>\n  | IndexedNode<K, V>\n  | ArrayNode<K, V>\n\n/** @internal */\nexport interface SizeRef {\n  value: number // mutable by design\n}\n\n/** @internal */\nexport class EmptyNode<out K, out V> {\n  readonly _tag = \"EmptyNode\"\n\n  modify(\n    edit: number,\n    _shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    const v = f(O.none())\n    if (O.isNone(v)) return new EmptyNode()\n    ;++size.value\n    return new LeafNode(edit, hash, key, v)\n  }\n}\n\n/** @internal */\nexport function isEmptyNode(a: unknown): a is EmptyNode<unknown, unknown> {\n  return isTagged(a, \"EmptyNode\")\n}\n\n/** @internal */\nexport function isLeafNode<K, V>(\n  node: Node<K, V>\n): node is EmptyNode<K, V> | LeafNode<K, V> | CollisionNode<K, V> {\n  return isEmptyNode(node) || node._tag === \"LeafNode\" || node._tag === \"CollisionNode\"\n}\n\n/** @internal */\nexport function canEditNode<K, V>(node: Node<K, V>, edit: number): boolean {\n  return isEmptyNode(node) ? false : edit === node.edit\n}\n\n/** @internal */\nexport class LeafNode<out K, out V> {\n  readonly _tag = \"LeafNode\"\n\n  constructor(\n    readonly edit: number,\n    readonly hash: number,\n    readonly key: K,\n    public value: O.Option<V>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    if (equals(key, this.key)) {\n      const v = f(this.value)\n      if (v === this.value) return this\n      else if (O.isNone(v)) {\n        ;--size.value\n        return new EmptyNode()\n      }\n      if (canEditNode(this, edit)) {\n        this.value = v\n        return this\n      }\n      return new LeafNode(edit, hash, key, v)\n    }\n    const v = f(O.none())\n    if (O.isNone(v)) return this\n    ;++size.value\n    return mergeLeaves(\n      edit,\n      shift,\n      this.hash,\n      this,\n      hash,\n      new LeafNode(edit, hash, key, v)\n    )\n  }\n}\n\n/** @internal */\nexport class CollisionNode<out K, out V> {\n  readonly _tag = \"CollisionNode\"\n\n  constructor(\n    readonly edit: number,\n    readonly hash: number,\n    readonly children: Array<Node<K, V>>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    if (hash === this.hash) {\n      const canEdit = canEditNode(this, edit)\n      const list = this.updateCollisionList(\n        canEdit,\n        edit,\n        this.hash,\n        this.children,\n        f,\n        key,\n        size\n      )\n      if (list === this.children) return this\n\n      return list.length > 1 ? new CollisionNode(edit, this.hash, list) : list[0]! // collapse single element collision list\n    }\n    const v = f(O.none())\n    if (O.isNone(v)) return this\n    ;++size.value\n    return mergeLeaves(\n      edit,\n      shift,\n      this.hash,\n      this,\n      hash,\n      new LeafNode(edit, hash, key, v)\n    )\n  }\n\n  updateCollisionList(\n    mutate: boolean,\n    edit: number,\n    hash: number,\n    list: Array<Node<K, V>>,\n    f: HashMap.UpdateFn<V>,\n    key: K,\n    size: SizeRef\n  ) {\n    const len = list.length\n    for (let i = 0; i < len; ++i) {\n      const child = list[i]!\n      if (\"key\" in child && equals(key, child.key)) {\n        const value = child.value\n        const newValue = f(value)\n        if (newValue === value) return list\n        if (O.isNone(newValue)) {\n          ;--size.value\n          return arraySpliceOut(mutate, i, list)\n        }\n        return arrayUpdate(mutate, i, new LeafNode(edit, hash, key, newValue), list)\n      }\n    }\n\n    const newValue = f(O.none())\n    if (O.isNone(newValue)) return list\n    ;++size.value\n    return arrayUpdate(mutate, len, new LeafNode(edit, hash, key, newValue), list)\n  }\n}\n\n/** @internal */\nexport class IndexedNode<out K, out V> {\n  readonly _tag = \"IndexedNode\"\n\n  constructor(\n    readonly edit: number,\n    public mask: number,\n    public children: Array<Node<K, V>>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    const mask = this.mask\n    const children = this.children\n    const frag = hashFragment(shift, hash)\n    const bit = toBitmap(frag)\n    const indx = fromBitmap(mask, bit)\n    const exists = mask & bit\n    const canEdit = canEditNode(this, edit)\n\n    if (!exists) {\n      const _newChild = new EmptyNode<K, V>().modify(edit, shift + SIZE, f, hash, key, size)\n      if (!_newChild) return this\n      return children.length >= MAX_INDEX_NODE ?\n        expand(edit, frag, _newChild, mask, children) :\n        new IndexedNode(edit, mask | bit, arraySpliceIn(canEdit, indx, _newChild, children))\n    }\n\n    const current = children[indx]!\n    const child = current.modify(edit, shift + SIZE, f, hash, key, size)\n\n    if (current === child) return this\n    let bitmap = mask\n    let newChildren\n    if (isEmptyNode(child)) {\n      // remove\n      bitmap &= ~bit\n      if (!bitmap) return new EmptyNode()\n      if (children.length <= 2 && isLeafNode(children[indx ^ 1]!)) {\n        return children[indx ^ 1]! // collapse\n      }\n\n      newChildren = arraySpliceOut(canEdit, indx, children)\n    } else {\n      // modify\n      newChildren = arrayUpdate(canEdit, indx, child, children)\n    }\n\n    if (canEdit) {\n      this.mask = bitmap\n      this.children = newChildren\n      return this\n    }\n\n    return new IndexedNode(edit, bitmap, newChildren)\n  }\n}\n\n/** @internal */\nexport class ArrayNode<out K, out V> {\n  readonly _tag = \"ArrayNode\"\n\n  constructor(\n    readonly edit: number,\n    public size: number,\n    public children: Array<Node<K, V>>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    let count = this.size\n    const children = this.children\n    const frag = hashFragment(shift, hash)\n    const child = children[frag]\n    const newChild = (child || new EmptyNode<K, V>()).modify(\n      edit,\n      shift + SIZE,\n      f,\n      hash,\n      key,\n      size\n    )\n\n    if (child === newChild) return this\n\n    const canEdit = canEditNode(this, edit)\n    let newChildren\n    if (isEmptyNode(child) && !isEmptyNode(newChild)) {\n      // add\n      ;++count\n      newChildren = arrayUpdate(canEdit, frag, newChild, children)\n    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {\n      // remove\n      ;--count\n      if (count <= MIN_ARRAY_NODE) {\n        return pack(edit, count, frag, children)\n      }\n      newChildren = arrayUpdate(canEdit, frag, new EmptyNode<K, V>(), children)\n    } else {\n      // modify\n      newChildren = arrayUpdate(canEdit, frag, newChild, children)\n    }\n\n    if (canEdit) {\n      this.size = count\n      this.children = newChildren\n      return this\n    }\n    return new ArrayNode(edit, count, newChildren)\n  }\n}\n\nfunction pack<K, V>(\n  edit: number,\n  count: number,\n  removed: number,\n  elements: Array<Node<K, V>>\n) {\n  const children = new Array<Node<K, V>>(count - 1)\n  let g = 0\n  let bitmap = 0\n  for (let i = 0, len = elements.length; i < len; ++i) {\n    if (i !== removed) {\n      const elem = elements[i]\n      if (elem && !isEmptyNode(elem)) {\n        children[g++] = elem\n        bitmap |= 1 << i\n      }\n    }\n  }\n  return new IndexedNode(edit, bitmap, children)\n}\n\nfunction expand<K, V>(\n  edit: number,\n  frag: number,\n  child: Node<K, V>,\n  bitmap: number,\n  subNodes: Array<Node<K, V>>\n) {\n  const arr = []\n  let bit = bitmap\n  let count = 0\n  for (let i = 0; bit; ++i) {\n    if (bit & 1) arr[i] = subNodes[count++]!\n    bit >>>= 1\n  }\n  arr[frag] = child\n  return new ArrayNode(edit, count + 1, arr)\n}\n\nfunction mergeLeavesInner<K, V>(\n  edit: number,\n  shift: number,\n  h1: number,\n  n1: Node<K, V>,\n  h2: number,\n  n2: Node<K, V>\n): Node<K, V> | ((child: Node<K, V>) => Node<K, V>) {\n  if (h1 === h2) return new CollisionNode(edit, h1, [n2, n1])\n  const subH1 = hashFragment(shift, h1)\n  const subH2 = hashFragment(shift, h2)\n\n  if (subH1 === subH2) {\n    return (child) => new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), [child])\n  } else {\n    const children = subH1 < subH2 ? [n1, n2] : [n2, n1]\n    return new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), children)\n  }\n}\n\nfunction mergeLeaves<K, V>(\n  edit: number,\n  shift: number,\n  h1: number,\n  n1: Node<K, V>,\n  h2: number,\n  n2: Node<K, V>\n): Node<K, V> {\n  let stack: Stack.Stack<(node: Node<K, V>) => Node<K, V>> | undefined = undefined\n  let currentShift = shift\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const res = mergeLeavesInner(edit, currentShift, h1, n1, h2, n2)\n\n    if (typeof res === \"function\") {\n      stack = Stack.make(res, stack)\n      currentShift = currentShift + SIZE\n    } else {\n      let final = res\n      while (stack != null) {\n        final = stack.value(final)\n        stack = stack.previous\n      }\n      return final\n    }\n  }\n}\n", "import * as Equal from \"../Equal.js\"\nimport * as Dual from \"../Function.js\"\nimport { identity, pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport type * as HM from \"../HashMap.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport { fromBitmap, hashFragment, toBitmap } from \"./hashMap/bitwise.js\"\nimport { SIZE } from \"./hashMap/config.js\"\nimport * as Node from \"./hashMap/node.js\"\n\nconst HashMapSymbolKey = \"effect/HashMap\"\n\n/** @internal */\nexport const HashMapTypeId: HM.TypeId = Symbol.for(HashMapSymbolKey) as HM.TypeId\n\ntype TraversalFn<K, V, A> = (k: K, v: V) => A\n\ntype Cont<K, V, A> =\n  | [\n    len: number,\n    children: Array<Node.Node<K, V>>,\n    i: number,\n    f: TraversalFn<K, V, A>,\n    cont: Cont<K, V, A>\n  ]\n  | undefined\n\ninterface VisitResult<K, V, A> {\n  value: A\n  cont: Cont<K, V, A>\n}\n\n/** @internal */\nexport interface HashMapImpl<out K, out V> extends HM.HashMap<K, V> {\n  _editable: boolean // mutable by design\n  _edit: number // mutable by design\n  _root: Node.Node<K, V> // mutable by design\n  _size: number // mutable by design\n}\n\nconst HashMapProto: HM.HashMap<unknown, unknown> = {\n  [HashMapTypeId]: HashMapTypeId,\n  [Symbol.iterator]<K, V>(this: HashMapImpl<K, V>): Iterator<[K, V]> {\n    return new HashMapIterator(this, (k, v) => [k, v])\n  },\n  [Hash.symbol](this: HM.HashMap<unknown, unknown>): number {\n    let hash = Hash.hash(HashMapSymbolKey)\n    for (const item of this) {\n      hash ^= pipe(Hash.hash(item[0]), Hash.combine(Hash.hash(item[1])))\n    }\n    return Hash.cached(this, hash)\n  },\n  [Equal.symbol]<K, V>(this: HashMapImpl<K, V>, that: unknown): boolean {\n    if (isHashMap(that)) {\n      if ((that as HashMapImpl<K, V>)._size !== this._size) {\n        return false\n      }\n      for (const item of this) {\n        const elem = pipe(\n          that as HM.HashMap<K, V>,\n          getHash(item[0], Hash.hash(item[0]))\n        )\n        if (Option.isNone(elem)) {\n          return false\n        } else {\n          if (!Equal.equals(item[1], elem.value)) {\n            return false\n          }\n        }\n      }\n      return true\n    }\n    return false\n  },\n  toString<K, V>(this: HashMapImpl<K, V>) {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"HashMap\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst makeImpl = <K, V>(\n  editable: boolean,\n  edit: number,\n  root: Node.Node<K, V>,\n  size: number\n): HashMapImpl<K, V> => {\n  const map = Object.create(HashMapProto)\n  map._editable = editable\n  map._edit = edit\n  map._root = root\n  map._size = size\n  return map\n}\n\nclass HashMapIterator<in out K, in out V, out T> implements IterableIterator<T> {\n  v: Option.Option<VisitResult<K, V, T>>\n\n  constructor(readonly map: HashMapImpl<K, V>, readonly f: TraversalFn<K, V, T>) {\n    this.v = visitLazy(this.map._root, this.f, undefined)\n  }\n\n  next(): IteratorResult<T> {\n    if (Option.isNone(this.v)) {\n      return { done: true, value: undefined }\n    }\n    const v0 = this.v.value\n    this.v = applyCont(v0.cont)\n    return { done: false, value: v0.value }\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return new HashMapIterator(this.map, this.f)\n  }\n}\n\nconst applyCont = <K, V, A>(cont: Cont<K, V, A>): Option.Option<VisitResult<K, V, A>> =>\n  cont\n    ? visitLazyChildren(cont[0], cont[1], cont[2], cont[3], cont[4])\n    : Option.none()\n\nconst visitLazy = <K, V, A>(\n  node: Node.Node<K, V>,\n  f: TraversalFn<K, V, A>,\n  cont: Cont<K, V, A> = undefined\n): Option.Option<VisitResult<K, V, A>> => {\n  switch (node._tag) {\n    case \"LeafNode\": {\n      if (Option.isSome(node.value)) {\n        return Option.some({\n          value: f(node.key, node.value.value),\n          cont\n        })\n      }\n      return applyCont(cont)\n    }\n    case \"CollisionNode\":\n    case \"ArrayNode\":\n    case \"IndexedNode\": {\n      const children = node.children\n      return visitLazyChildren(children.length, children, 0, f, cont)\n    }\n    default: {\n      return applyCont(cont)\n    }\n  }\n}\n\nconst visitLazyChildren = <K, V, A>(\n  len: number,\n  children: Array<Node.Node<K, V>>,\n  i: number,\n  f: TraversalFn<K, V, A>,\n  cont: Cont<K, V, A>\n): Option.Option<VisitResult<K, V, A>> => {\n  while (i < len) {\n    const child = children[i++]\n    if (child && !Node.isEmptyNode(child)) {\n      return visitLazy(child, f, [len, children, i, f, cont])\n    }\n  }\n  return applyCont(cont)\n}\n\nconst _empty = makeImpl<never, never>(false, 0, new Node.EmptyNode(), 0)\n\n/** @internal */\nexport const empty = <K = never, V = never>(): HM.HashMap<K, V> => _empty\n\n/** @internal */\nexport const make = <Entries extends ReadonlyArray<readonly [any, any]>>(\n  ...entries: Entries\n): HM.HashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> => fromIterable(entries)\n\n/** @internal */\nexport const fromIterable = <K, V>(entries: Iterable<readonly [K, V]>): HM.HashMap<K, V> => {\n  const map = beginMutation(empty<K, V>())\n  for (const entry of entries) {\n    set(map, entry[0], entry[1])\n  }\n  return endMutation(map)\n}\n\n/** @internal */\nexport const isHashMap: {\n  <K, V>(u: Iterable<readonly [K, V]>): u is HM.HashMap<K, V>\n  (u: unknown): u is HM.HashMap<unknown, unknown>\n} = (u: unknown): u is HM.HashMap<unknown, unknown> => hasProperty(u, HashMapTypeId)\n\n/** @internal */\nexport const isEmpty = <K, V>(self: HM.HashMap<K, V>): boolean =>\n  self && Node.isEmptyNode((self as HashMapImpl<K, V>)._root)\n\n/** @internal */\nexport const get = Dual.dual<\n  <K1>(key: K1) => <K, V>(self: HM.HashMap<K, V>) => Option.Option<V>,\n  <K, V, K1>(self: HM.HashMap<K, V>, key: K1) => Option.Option<V>\n>(2, (self, key) => getHash(self, key, Hash.hash(key)))\n\n/** @internal */\nexport const getHash = Dual.dual<\n  <K1>(key: K1, hash: number) => <K, V>(self: HM.HashMap<K, V>) => Option.Option<V>,\n  <K, V, K1>(self: HM.HashMap<K, V>, key: K1, hash: number) => Option.Option<V>\n>(3, <K, V, K1>(self: HM.HashMap<K, V>, key: K1, hash: number) => {\n  let node = (self as HashMapImpl<K, V>)._root\n  let shift = 0\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    switch (node._tag) {\n      case \"LeafNode\": {\n        return Equal.equals(key, node.key) ? node.value : Option.none()\n      }\n      case \"CollisionNode\": {\n        if (hash === node.hash) {\n          const children = node.children\n          for (let i = 0, len = children.length; i < len; ++i) {\n            const child = children[i]!\n            if (\"key\" in child && Equal.equals(key, child.key)) {\n              return child.value\n            }\n          }\n        }\n        return Option.none()\n      }\n      case \"IndexedNode\": {\n        const frag = hashFragment(shift, hash)\n        const bit = toBitmap(frag)\n        if (node.mask & bit) {\n          node = node.children[fromBitmap(node.mask, bit)]!\n          shift += SIZE\n          break\n        }\n        return Option.none()\n      }\n      case \"ArrayNode\": {\n        node = node.children[hashFragment(shift, hash)]!\n        if (node) {\n          shift += SIZE\n          break\n        }\n        return Option.none()\n      }\n      default:\n        return Option.none()\n    }\n  }\n})\n\n/** @internal */\nexport const unsafeGet = Dual.dual<\n  <K1>(key: K1) => <K, V>(self: HM.HashMap<K, V>) => V,\n  <K, V, K1>(self: HM.HashMap<K, V>, key: K1) => V\n>(2, (self, key) => {\n  const element = getHash(self, key, Hash.hash(key))\n  if (Option.isNone(element)) {\n    throw new Error(\"Expected map to contain key\")\n  }\n  return element.value\n})\n\n/** @internal */\nexport const has = Dual.dual<\n  <K1>(key: K1) => <K, V>(self: HM.HashMap<K, V>) => boolean,\n  <K, V, K1>(self: HM.HashMap<K, V>, key: K1) => boolean\n>(2, (self, key) => Option.isSome(getHash(self, key, Hash.hash(key))))\n\n/** @internal */\nexport const hasHash = Dual.dual<\n  <K1>(key: K1, hash: number) => <K, V>(self: HM.HashMap<K, V>) => boolean,\n  <K, V, K1>(self: HM.HashMap<K, V>, key: K1, hash: number) => boolean\n>(3, (self, key, hash) => Option.isSome(getHash(self, key, hash)))\n\n/** @internal */\nexport const set = Dual.dual<\n  <K, V>(key: K, value: V) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, value: V) => HM.HashMap<K, V>\n>(3, (self, key, value) => modifyAt(self, key, () => Option.some(value)))\n\n/** @internal */\nexport const setTree = Dual.dual<\n  <K, V>(newRoot: Node.Node<K, V>, newSize: number) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, newRoot: Node.Node<K, V>, newSize: number) => HM.HashMap<K, V>\n>(3, <K, V>(self: HM.HashMap<K, V>, newRoot: Node.Node<K, V>, newSize: number) => {\n  if ((self as HashMapImpl<K, V>)._editable) {\n    ;(self as HashMapImpl<K, V>)._root = newRoot\n    ;(self as HashMapImpl<K, V>)._size = newSize\n    return self\n  }\n  return newRoot === (self as HashMapImpl<K, V>)._root\n    ? self\n    : makeImpl(\n      (self as HashMapImpl<K, V>)._editable,\n      (self as HashMapImpl<K, V>)._edit,\n      newRoot,\n      newSize\n    )\n})\n\n/** @internal */\nexport const keys = <K, V>(self: HM.HashMap<K, V>): IterableIterator<K> =>\n  new HashMapIterator(self as HashMapImpl<K, V>, (key) => key)\n\n/** @internal */\nexport const values = <K, V>(self: HM.HashMap<K, V>): IterableIterator<V> =>\n  new HashMapIterator(self as HashMapImpl<K, V>, (_, value) => value)\n\n/** @internal */\nexport const entries = <K, V>(self: HM.HashMap<K, V>): IterableIterator<[K, V]> =>\n  new HashMapIterator(self as HashMapImpl<K, V>, (key, value) => [key, value])\n\n/** @internal */\nexport const size = <K, V>(self: HM.HashMap<K, V>): number => (self as HashMapImpl<K, V>)._size\n\n/** @internal */\nexport const beginMutation = <K, V>(self: HM.HashMap<K, V>): HM.HashMap<K, V> =>\n  makeImpl(\n    true,\n    (self as HashMapImpl<K, V>)._edit + 1,\n    (self as HashMapImpl<K, V>)._root,\n    (self as HashMapImpl<K, V>)._size\n  )\n\n/** @internal */\nexport const endMutation = <K, V>(self: HM.HashMap<K, V>): HM.HashMap<K, V> => {\n  ;(self as HashMapImpl<K, V>)._editable = false\n  return self\n}\n\n/** @internal */\nexport const mutate = Dual.dual<\n  <K, V>(f: (self: HM.HashMap<K, V>) => void) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, f: (self: HM.HashMap<K, V>) => void) => HM.HashMap<K, V>\n>(2, (self, f) => {\n  const transient = beginMutation(self)\n  f(transient)\n  return endMutation(transient)\n})\n\n/** @internal */\nexport const modifyAt = Dual.dual<\n  <K, V>(key: K, f: HM.HashMap.UpdateFn<V>) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, f: HM.HashMap.UpdateFn<V>) => HM.HashMap<K, V>\n>(3, (self, key, f) => modifyHash(self, key, Hash.hash(key), f))\n\n/** @internal */\nexport const modifyHash = Dual.dual<\n  <K, V>(key: K, hash: number, f: HM.HashMap.UpdateFn<V>) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, hash: number, f: HM.HashMap.UpdateFn<V>) => HM.HashMap<K, V>\n>(4, <K, V>(self: HM.HashMap<K, V>, key: K, hash: number, f: HM.HashMap.UpdateFn<V>) => {\n  const size = { value: (self as HashMapImpl<K, V>)._size }\n  const newRoot = (self as HashMapImpl<K, V>)._root.modify(\n    (self as HashMapImpl<K, V>)._editable ?\n      (self as HashMapImpl<K, V>)._edit :\n      NaN,\n    0,\n    f,\n    hash,\n    key,\n    size\n  )\n  return pipe(self, setTree(newRoot, size.value))\n})\n\n/** @internal */\nexport const modify = Dual.dual<\n  <K, V>(key: K, f: (v: V) => V) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, f: (v: V) => V) => HM.HashMap<K, V>\n>(3, (self, key, f) => modifyAt(self, key, Option.map(f)))\n\n/** @internal */\nexport const union = Dual.dual<\n  <K1, V1>(\n    that: HM.HashMap<K1, V1>\n  ) => <K0, V0>(self: HM.HashMap<K0, V0>) => HM.HashMap<K0 | K1, V0 | V1>,\n  <K0, V0, K1, V1>(\n    self: HM.HashMap<K0, V0>,\n    that: HM.HashMap<K1, V1>\n  ) => HM.HashMap<K0 | K1, V0 | V1>\n>(2, <K0, V0, K1, V1>(self: HM.HashMap<K0, V0>, that: HM.HashMap<K1, V1>) => {\n  const result: HM.HashMap<K0 | K1, V0 | V1> = beginMutation(self)\n  forEach(that, (v, k) => set(result, k, v))\n  return endMutation(result)\n})\n\n/** @internal */\nexport const remove = Dual.dual<\n  <K>(key: K) => <V>(self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K) => HM.HashMap<K, V>\n>(2, (self, key) => modifyAt(self, key, Option.none))\n\n/** @internal */\nexport const removeMany = Dual.dual<\n  <K>(keys: Iterable<K>) => <V>(self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, keys: Iterable<K>) => HM.HashMap<K, V>\n>(2, (self, keys) =>\n  mutate(self, (map) => {\n    for (const key of keys) {\n      remove(key)(map)\n    }\n  }))\n\n/**\n * Maps over the entries of the `HashMap` using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map = Dual.dual<\n  <A, V, K>(f: (value: V, key: K) => A) => (self: HM.HashMap<K, V>) => HM.HashMap<K, A>,\n  <K, V, A>(self: HM.HashMap<K, V>, f: (value: V, key: K) => A) => HM.HashMap<K, A>\n>(2, (self, f) =>\n  reduce(\n    self,\n    empty(),\n    (map, value, key) => set(map, key, f(value, key))\n  ))\n\n/** @internal */\nexport const flatMap = Dual.dual<\n  <A, K, B>(\n    f: (value: A, key: K) => HM.HashMap<K, B>\n  ) => (self: HM.HashMap<K, A>) => HM.HashMap<K, B>,\n  <K, A, B>(self: HM.HashMap<K, A>, f: (value: A, key: K) => HM.HashMap<K, B>) => HM.HashMap<K, B>\n>(\n  2,\n  (self, f) =>\n    reduce(self, empty(), (zero, value, key) =>\n      mutate(\n        zero,\n        (map) => forEach(f(value, key), (value, key) => set(map, key, value))\n      ))\n)\n\n/** @internal */\nexport const forEach = Dual.dual<\n  <V, K>(f: (value: V, key: K) => void) => (self: HM.HashMap<K, V>) => void,\n  <V, K>(self: HM.HashMap<K, V>, f: (value: V, key: K) => void) => void\n>(2, (self, f) => reduce(self, void 0 as void, (_, value, key) => f(value, key)))\n\n/** @internal */\nexport const reduce = Dual.dual<\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => (self: HM.HashMap<K, V>) => Z,\n  <Z, V, K>(self: HM.HashMap<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => Z\n>(3, <Z, V, K>(self: HM.HashMap<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => {\n  const root = (self as HashMapImpl<K, V>)._root\n  if (root._tag === \"LeafNode\") {\n    return Option.isSome(root.value) ? f(zero, root.value.value, root.key) : zero\n  }\n  if (root._tag === \"EmptyNode\") {\n    return zero\n  }\n  const toVisit = [root.children]\n  let children\n  while ((children = toVisit.pop())) {\n    for (let i = 0, len = children.length; i < len;) {\n      const child = children[i++]\n      if (child && !Node.isEmptyNode(child)) {\n        if (child._tag === \"LeafNode\") {\n          if (Option.isSome(child.value)) {\n            zero = f(zero, child.value.value, child.key)\n          }\n        } else {\n          toVisit.push(child.children)\n        }\n      }\n    }\n  }\n  return zero\n})\n\n/** @internal */\nexport const filter: {\n  <K, A, B extends A>(f: (a: NoInfer<A>, k: K) => a is B): (self: HM.HashMap<K, A>) => HM.HashMap<K, B>\n  <K, A>(f: (a: NoInfer<A>, k: K) => boolean): (self: HM.HashMap<K, A>) => HM.HashMap<K, A>\n  <K, A, B extends A>(self: HM.HashMap<K, A>, f: (a: A, k: K) => a is B): HM.HashMap<K, B>\n  <K, A>(self: HM.HashMap<K, A>, f: (a: A, k: K) => boolean): HM.HashMap<K, A>\n} = Dual.dual(\n  2,\n  <K, A>(self: HM.HashMap<K, A>, f: (a: A, k: K) => boolean): HM.HashMap<K, A> =>\n    mutate(empty(), (map) => {\n      for (const [k, a] of self) {\n        if (f(a, k)) {\n          set(map, k, a)\n        }\n      }\n    })\n)\n\n/** @internal */\nexport const compact = <K, A>(self: HM.HashMap<K, Option.Option<A>>) => filterMap(self, identity)\n\n/** @internal */\nexport const filterMap = Dual.dual<\n  <A, K, B>(\n    f: (value: A, key: K) => Option.Option<B>\n  ) => (self: HM.HashMap<K, A>) => HM.HashMap<K, B>,\n  <K, A, B>(self: HM.HashMap<K, A>, f: (value: A, key: K) => Option.Option<B>) => HM.HashMap<K, B>\n>(2, (self, f) =>\n  mutate(empty(), (map) => {\n    for (const [k, a] of self) {\n      const option = f(a, k)\n      if (Option.isSome(option)) {\n        set(map, k, option.value)\n      }\n    }\n  }))\n\n/** @internal */\nexport const findFirst: {\n  <K, A, B extends A>(predicate: (a: NoInfer<A>, k: K) => a is B): (self: HM.HashMap<K, A>) => Option.Option<[K, B]>\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HM.HashMap<K, A>) => Option.Option<[K, A]>\n  <K, A, B extends A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => a is B): Option.Option<[K, B]>\n  <K, A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => boolean): Option.Option<[K, A]>\n} = Dual.dual(\n  2,\n  <K, A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => boolean): Option.Option<[K, A]> => {\n    for (const ka of self) {\n      if (predicate(ka[1], ka[0])) {\n        return Option.some(ka)\n      }\n    }\n    return Option.none()\n  }\n)\n", "import * as Equal from \"../Equal.js\"\nimport { dual } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport type { HashMap } from \"../HashMap.js\"\nimport type * as HS from \"../HashSet.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type { Predicate, Refinement } from \"../Predicate.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport * as HM from \"./hashMap.js\"\n\nconst HashSetSymbolKey = \"effect/HashSet\"\n\n/** @internal */\nexport const HashSetTypeId: HS.TypeId = Symbol.for(HashSetSymbolKey) as HS.TypeId\n\n/** @internal */\nexport interface HashSetImpl<out A> extends HS.HashSet<A> {\n  readonly _keyMap: HashMap<A, unknown>\n}\n\nconst HashSetProto: Omit<HashSetImpl<unknown>, \"_keyMap\"> = {\n  [HashSetTypeId]: HashSetTypeId,\n  [Symbol.iterator]<A>(this: HashSetImpl<A>): Iterator<A> {\n    return HM.keys(this._keyMap)\n  },\n  [Hash.symbol]<A>(this: HashSetImpl<A>): number {\n    return Hash.cached(\n      this,\n      Hash.combine(Hash.hash(this._keyMap))(Hash.hash(HashSetSymbolKey))\n    )\n  },\n  [Equal.symbol]<A>(this: HashSetImpl<A>, that: unknown): boolean {\n    if (isHashSet(that)) {\n      return (\n        HM.size(this._keyMap) === HM.size((that as HashSetImpl<A>)._keyMap) &&\n        Equal.equals(this._keyMap, (that as HashSetImpl<A>)._keyMap)\n      )\n    }\n    return false\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"HashSet\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const makeImpl = <A>(keyMap: HashMap<A, unknown>): HashSetImpl<A> => {\n  const set = Object.create(HashSetProto)\n  set._keyMap = keyMap\n  return set\n}\n\n/** @internal */\nexport const isHashSet: {\n  <A>(u: Iterable<A>): u is HS.HashSet<A>\n  (u: unknown): u is HS.HashSet<unknown>\n} = (u: unknown): u is HS.HashSet<unknown> => hasProperty(u, HashSetTypeId)\n\nconst _empty = makeImpl<never>(HM.empty())\n\n/** @internal */\nexport const empty = <A = never>(): HS.HashSet<A> => _empty\n\n/** @internal */\nexport const fromIterable = <A>(elements: Iterable<A>): HS.HashSet<A> => {\n  const set = beginMutation(empty<A>())\n  for (const value of elements) {\n    add(set, value)\n  }\n  return endMutation(set)\n}\n\n/** @internal */\nexport const make = <As extends ReadonlyArray<any>>(...elements: As): HS.HashSet<As[number]> => {\n  const set = beginMutation(empty<As[number]>())\n  for (const value of elements) {\n    add(set, value)\n  }\n  return endMutation(set)\n}\n\n/** @internal */\nexport const has = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => boolean,\n  <A>(self: HS.HashSet<A>, value: A) => boolean\n>(2, <A>(self: HS.HashSet<A>, value: A) => HM.has((self as HashSetImpl<A>)._keyMap, value))\n\n/** @internal */\nexport const some = dual<\n  <A>(f: Predicate<A>) => (self: HS.HashSet<A>) => boolean,\n  <A>(self: HS.HashSet<A>, f: Predicate<A>) => boolean\n>(2, (self, f) => {\n  let found = false\n  for (const value of self) {\n    found = f(value)\n    if (found) {\n      break\n    }\n  }\n  return found\n})\n\n/** @internal */\nexport const every: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HS.HashSet<A>) => self is HS.HashSet<B>\n  <A>(predicate: Predicate<A>): (self: HS.HashSet<A>) => boolean\n  <A, B extends A>(self: HS.HashSet<A>, refinement: Refinement<A, B>): self is HS.HashSet<B>\n  <A>(self: HS.HashSet<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: HS.HashSet<A>, refinement: Refinement<A, B>): self is HS.HashSet<B> =>\n    !some(self, (a) => !refinement(a))\n)\n\n/** @internal */\nexport const isSubset = dual<\n  <A>(that: HS.HashSet<A>) => (self: HS.HashSet<A>) => boolean,\n  <A>(self: HS.HashSet<A>, that: HS.HashSet<A>) => boolean\n>(2, (self, that) => every(self, (value) => has(that, value)))\n\n/** @internal */\nexport const values = <A>(self: HS.HashSet<A>): IterableIterator<A> => HM.keys((self as HashSetImpl<A>)._keyMap)\n\n/** @internal */\nexport const size = <A>(self: HS.HashSet<A>): number => HM.size((self as HashSetImpl<A>)._keyMap)\n\n/** @internal */\nexport const beginMutation = <A>(self: HS.HashSet<A>): HS.HashSet<A> =>\n  makeImpl(HM.beginMutation((self as HashSetImpl<A>)._keyMap))\n\n/** @internal */\nexport const endMutation = <A>(self: HS.HashSet<A>): HS.HashSet<A> => {\n  ;((self as HashSetImpl<A>)._keyMap as HM.HashMapImpl<A, unknown>)._editable = false\n  return self\n}\n\n/** @internal */\nexport const mutate = dual<\n  <A>(f: (set: HS.HashSet<A>) => void) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, f: (set: HS.HashSet<A>) => void) => HS.HashSet<A>\n>(2, (self, f) => {\n  const transient = beginMutation(self)\n  f(transient)\n  return endMutation(transient)\n})\n\n/** @internal */\nexport const add = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, value: A) => HS.HashSet<A>\n>(\n  2,\n  <A>(self: HS.HashSet<A>, value: A) =>\n    ((self as HashSetImpl<A>)._keyMap as HM.HashMapImpl<A, unknown>)._editable\n      ? (HM.set(value as A, true as unknown)((self as HashSetImpl<A>)._keyMap), self)\n      : makeImpl(HM.set(value as A, true as unknown)((self as HashSetImpl<A>)._keyMap))\n)\n\n/** @internal */\nexport const remove = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, value: A) => HS.HashSet<A>\n>(\n  2,\n  <A>(self: HS.HashSet<A>, value: A) =>\n    (((self as HashSetImpl<A>)._keyMap) as HM.HashMapImpl<A, unknown>)._editable\n      ? (HM.remove(value)((self as HashSetImpl<A>)._keyMap), self)\n      : makeImpl(HM.remove(value)((self as HashSetImpl<A>)._keyMap))\n)\n\n/** @internal */\nexport const difference = dual<\n  <A>(that: Iterable<A>) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, that: Iterable<A>) => HS.HashSet<A>\n>(2, (self, that) =>\n  mutate(self, (set) => {\n    for (const value of that) {\n      remove(set, value)\n    }\n  }))\n\n/** @internal */\nexport const intersection = dual<\n  <A>(that: Iterable<A>) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, that: Iterable<A>) => HS.HashSet<A>\n>(2, (self, that) =>\n  mutate(empty(), (set) => {\n    for (const value of that) {\n      if (has(value)(self)) {\n        add(value)(set)\n      }\n    }\n  }))\n\n/** @internal */\nexport const union = dual<\n  <A>(that: Iterable<A>) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, that: Iterable<A>) => HS.HashSet<A>\n>(2, (self, that) =>\n  mutate(empty(), (set) => {\n    forEach(self, (value) => add(set, value))\n    for (const value of that) {\n      add(set, value)\n    }\n  }))\n\n/** @internal */\nexport const toggle = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, value: A) => HS.HashSet<A>\n>(2, (self, value) => has(self, value) ? remove(self, value) : add(self, value))\n\n/** @internal */\nexport const map = dual<\n  <A, B>(f: (a: A) => B) => (self: HS.HashSet<A>) => HS.HashSet<B>,\n  <A, B>(self: HS.HashSet<A>, f: (a: A) => B) => HS.HashSet<B>\n>(2, (self, f) =>\n  mutate(empty(), (set) => {\n    forEach(self, (a) => {\n      const b = f(a)\n      if (!has(set, b)) {\n        add(set, b)\n      }\n    })\n  }))\n\n/** @internal */\nexport const flatMap = dual<\n  <A, B>(f: (a: A) => Iterable<B>) => (self: HS.HashSet<A>) => HS.HashSet<B>,\n  <A, B>(self: HS.HashSet<A>, f: (a: A) => Iterable<B>) => HS.HashSet<B>\n>(2, (self, f) =>\n  mutate(empty(), (set) => {\n    forEach(self, (a) => {\n      for (const b of f(a)) {\n        if (!has(set, b)) {\n          add(set, b)\n        }\n      }\n    })\n  }))\n\n/** @internal */\nexport const forEach = dual<\n  <A>(f: (value: A) => void) => (self: HS.HashSet<A>) => void,\n  <A>(self: HS.HashSet<A>, f: (value: A) => void) => void\n>(2, <A>(self: HS.HashSet<A>, f: (value: A) => void) =>\n  HM.forEach(\n    (self as HashSetImpl<A>)._keyMap,\n    (_, k) => f(k)\n  ))\n\n/** @internal */\nexport const reduce = dual<\n  <A, Z>(zero: Z, f: (accumulator: Z, value: A) => Z) => (self: HS.HashSet<A>) => Z,\n  <A, Z>(self: HS.HashSet<A>, zero: Z, f: (accumulator: Z, value: A) => Z) => Z\n>(3, <A, Z>(self: HS.HashSet<A>, zero: Z, f: (accumulator: Z, value: A) => Z) =>\n  HM.reduce(\n    (self as HashSetImpl<A>)._keyMap,\n    zero,\n    (z, _, a) => f(z, a)\n  ))\n\n/** @internal */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HS.HashSet<A>) => HS.HashSet<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: HS.HashSet<A>) => HS.HashSet<A>\n  <A, B extends A>(self: HS.HashSet<A>, refinement: Refinement<A, B>): HS.HashSet<B>\n  <A>(self: HS.HashSet<A>, predicate: Predicate<A>): HS.HashSet<A>\n} = dual(2, <A>(self: HS.HashSet<A>, f: Predicate<A>) => {\n  return mutate(empty(), (set) => {\n    const iterator = values(self)\n    let next: IteratorResult<A, any>\n    while (!(next = iterator.next()).done) {\n      const value = next.value\n      if (f(value)) {\n        add(set, value)\n      }\n    }\n  })\n})\n\n/** @internal */\nexport const partition: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: HS.HashSet<A>) => [excluded: HS.HashSet<Exclude<A, B>>, satisfying: HS.HashSet<B>]\n  <A>(\n    predicate: Predicate<NoInfer<A>>\n  ): (self: HS.HashSet<A>) => [excluded: HS.HashSet<A>, satisfying: HS.HashSet<A>]\n  <A, B extends A>(\n    self: HS.HashSet<A>,\n    refinement: Refinement<A, B>\n  ): [excluded: HS.HashSet<Exclude<A, B>>, satisfying: HS.HashSet<B>]\n  <A>(self: HS.HashSet<A>, predicate: Predicate<A>): [excluded: HS.HashSet<A>, satisfying: HS.HashSet<A>]\n} = dual(2, <A>(self: HS.HashSet<A>, predicate: Predicate<A>): [excluded: HS.HashSet<A>, satisfying: HS.HashSet<A>] => {\n  const iterator = values(self)\n  let next: IteratorResult<A, any>\n  const right = beginMutation(empty<A>())\n  const left = beginMutation(empty<A>())\n  while (!(next = iterator.next()).done) {\n    const value = next.value\n    if (predicate(value)) {\n      add(right, value)\n    } else {\n      add(left, value)\n    }\n  }\n  return [endMutation(left), endMutation(right)]\n})\n", "/**\n * @since 2.0.0\n */\n\nimport type { Equal } from \"./Equal.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as HS from \"./internal/hashSet.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = HS.HashSetTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface HashSet<out A> extends Iterable<A>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHashSet: {\n  <A>(u: Iterable<A>): u is HashSet<A>\n  (u: unknown): u is HashSet<unknown>\n} = HS.isHashSet\n\n/**\n * Creates an empty `HashSet`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <A = never>() => HashSet<A> = HS.empty\n\n/**\n * Creates a new `HashSet` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: <A>(elements: Iterable<A>) => HashSet<A> = HS.fromIterable\n\n/**\n * Construct a new `HashSet` from a variable number of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <As extends ReadonlyArray<any>>(...elements: As) => HashSet<As[number]> = HS.make\n\n/**\n * Checks if the specified value exists in the `HashSet`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  <A>(value: A): (self: HashSet<A>) => boolean\n  <A>(self: HashSet<A>, value: A): boolean\n} = HS.has\n\n/**\n * Check if a predicate holds true for some `HashSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  <A>(f: Predicate<A>): (self: HashSet<A>) => boolean\n  <A>(self: HashSet<A>, f: Predicate<A>): boolean\n} = HS.some\n\n/**\n * Check if a predicate holds true for every `HashSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HashSet<A>) => self is HashSet<B>\n  <A>(predicate: Predicate<A>): (self: HashSet<A>) => boolean\n  <A, B extends A>(self: HashSet<A>, refinement: Refinement<A, B>): self is HashSet<B>\n  <A>(self: HashSet<A>, predicate: Predicate<A>): boolean\n} = HS.every\n\n/**\n * Returns `true` if and only if every element in the this `HashSet` is an\n * element of the second set,\n *\n * **NOTE**: the hash and equal of both sets must be the same.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isSubset: {\n  <A>(that: HashSet<A>): (self: HashSet<A>) => boolean\n  <A>(self: HashSet<A>, that: HashSet<A>): boolean\n} = HS.isSubset\n\n/**\n * Returns an `IterableIterator` of the values in the `HashSet`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <A>(self: HashSet<A>) => IterableIterator<A> = HS.values\n\n/**\n * Calculates the number of values in the `HashSet`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <A>(self: HashSet<A>) => number = HS.size\n\n/**\n * Marks the `HashSet` as mutable.\n *\n * @since 2.0.0\n */\nexport const beginMutation: <A>(self: HashSet<A>) => HashSet<A> = HS.beginMutation\n\n/**\n * Marks the `HashSet` as immutable.\n *\n * @since 2.0.0\n */\nexport const endMutation: <A>(self: HashSet<A>) => HashSet<A> = HS.endMutation\n\n/**\n * Mutates the `HashSet` within the context of the provided function.\n *\n * @since 2.0.0\n */\nexport const mutate: {\n  <A>(f: (set: HashSet<A>) => void): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, f: (set: HashSet<A>) => void): HashSet<A>\n} = HS.mutate\n\n/**\n * Adds a value to the `HashSet`.\n *\n * @since 2.0.0\n */\nexport const add: {\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.add\n\n/**\n * Removes a value from the `HashSet`.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.remove\n\n/**\n * Computes the set difference between this `HashSet` and the specified\n * `Iterable<A>`.\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @since 2.0.0\n */\nexport const difference: {\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.difference\n\n/**\n * Returns a `HashSet` of values which are present in both this set and that\n * `Iterable<A>`.\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.intersection\n\n/**\n * Computes the set union `(`self` + `that`)` between this `HashSet` and the\n * specified `Iterable<A>`.\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @since 2.0.0\n */\nexport const union: {\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.union\n\n/**\n * Checks if a value is present in the `HashSet`. If it is present, the value\n * will be removed from the `HashSet`, otherwise the value will be added to the\n * `HashSet`.\n *\n * @since 2.0.0\n */\nexport const toggle: {\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.toggle\n\n/**\n * Maps over the values of the `HashSet` using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): (self: HashSet<A>) => HashSet<B>\n  <A, B>(self: HashSet<A>, f: (a: A) => B): HashSet<B>\n} = HS.map\n\n/**\n * Chains over the values of the `HashSet` using the specified function.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <A, B>(f: (a: A) => Iterable<B>): (self: HashSet<A>) => HashSet<B>\n  <A, B>(self: HashSet<A>, f: (a: A) => Iterable<B>): HashSet<B>\n} = HS.flatMap\n\n/**\n * Applies the specified function to the values of the `HashSet`.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  <A>(f: (value: A) => void): (self: HashSet<A>) => void\n  <A>(self: HashSet<A>, f: (value: A) => void): void\n} = HS.forEach\n\n/**\n * Reduces the specified state over the values of the `HashSet`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  <A, Z>(zero: Z, f: (accumulator: Z, value: A) => Z): (self: HashSet<A>) => Z\n  <A, Z>(self: HashSet<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z\n} = HS.reduce\n\n/**\n * Filters values out of a `HashSet` using the specified predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HashSet<A>) => HashSet<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: HashSet<A>) => HashSet<A>\n  <A, B extends A>(self: HashSet<A>, refinement: Refinement<A, B>): HashSet<B>\n  <A>(self: HashSet<A>, predicate: Predicate<A>): HashSet<A>\n} = HS.filter\n\n/**\n * Partition the values of a `HashSet` using the specified predicate.\n *\n * If a value matches the predicate, it will be placed into the `HashSet` on the\n * right side of the resulting `Tuple`, otherwise the value will be placed into\n * the left side.\n *\n * @since 2.0.0\n * @category partitioning\n */\nexport const partition: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: HashSet<A>) => [excluded: HashSet<Exclude<A, B>>, satisfying: HashSet<B>]\n  <A>(predicate: Predicate<NoInfer<A>>): (self: HashSet<A>) => [excluded: HashSet<A>, satisfying: HashSet<A>]\n  <A, B extends A>(\n    self: HashSet<A>,\n    refinement: Refinement<A, B>\n  ): [excluded: HashSet<Exclude<A, B>>, satisfying: HashSet<B>]\n  <A>(self: HashSet<A>, predicate: Predicate<A>): [excluded: HashSet<A>, satisfying: HashSet<A>]\n} = HS.partition\n", "/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport * as Dual from \"./Function.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableRef\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MutableRef<out T> extends Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n\n  /** @internal */\n  current: T\n}\n\nconst MutableRefProto: Omit<MutableRef<unknown>, \"current\"> = {\n  [TypeId]: TypeId,\n  toString<A>(this: MutableRef<A>): string {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: MutableRef<A>) {\n    return {\n      _id: \"MutableRef\",\n      current: toJSON(this.current)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <T>(value: T): MutableRef<T> => {\n  const ref = Object.create(MutableRefProto)\n  ref.current = value\n  return ref\n}\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const compareAndSet: {\n  <T>(oldValue: T, newValue: T): (self: MutableRef<T>) => boolean\n  <T>(self: MutableRef<T>, oldValue: T, newValue: T): boolean\n} = Dual.dual<\n  <T>(oldValue: T, newValue: T) => (self: MutableRef<T>) => boolean,\n  <T>(self: MutableRef<T>, oldValue: T, newValue: T) => boolean\n>(3, (self, oldValue, newValue) => {\n  if (Equal.equals(oldValue, self.current)) {\n    self.current = newValue\n    return true\n  }\n  return false\n})\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const decrement = (self: MutableRef<number>): MutableRef<number> => update(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const decrementAndGet = (self: MutableRef<number>): number => updateAndGet(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const get = <T>(self: MutableRef<T>): T => self.current\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const getAndDecrement = (self: MutableRef<number>): number => getAndUpdate(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const getAndIncrement = (self: MutableRef<number>): number => getAndUpdate(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const getAndSet: {\n  <T>(value: T): (self: MutableRef<T>) => T\n  <T>(self: MutableRef<T>, value: T): T\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, value: T) => T\n>(2, (self, value) => {\n  const ret = self.current\n  self.current = value\n  return ret\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const getAndUpdate: {\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => T\n  <T>(self: MutableRef<T>, f: (value: T) => T): T\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => T\n>(2, (self, f) => getAndSet(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const increment = (self: MutableRef<number>): MutableRef<number> => update(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const incrementAndGet = (self: MutableRef<number>): number => updateAndGet(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const set: {\n  <T>(value: T): (self: MutableRef<T>) => MutableRef<T>\n  <T>(self: MutableRef<T>, value: T): MutableRef<T>\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => MutableRef<T>,\n  <T>(self: MutableRef<T>, value: T) => MutableRef<T>\n>(2, (self, value) => {\n  self.current = value\n  return self\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const setAndGet: {\n  <T>(value: T): (self: MutableRef<T>) => T\n  <T>(self: MutableRef<T>, value: T): T\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, value: T) => T\n>(2, (self, value) => {\n  self.current = value\n  return self.current\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const update: {\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => MutableRef<T>\n  <T>(self: MutableRef<T>, f: (value: T) => T): MutableRef<T>\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => MutableRef<T>,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => MutableRef<T>\n>(2, (self, f) => set(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const updateAndGet: {\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => T\n  <T>(self: MutableRef<T>, f: (value: T) => T): T\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => T\n>(2, (self, f) => setAndGet(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category boolean\n */\nexport const toggle = (self: MutableRef<boolean>): MutableRef<boolean> => update(self, (_) => !_)\n", "import * as Equal from \"../Equal.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\n\n/** @internal */\nconst FiberIdSymbolKey = \"effect/FiberId\"\n\n/** @internal */\nexport const FiberIdTypeId: FiberId.FiberIdTypeId = Symbol.for(\n  FiberIdSymbolKey\n) as FiberId.FiberIdTypeId\n\n/** @internal */\nconst OP_NONE = \"None\" as const\n\n/** @internal */\nexport type OP_NONE = typeof OP_NONE\n\n/** @internal */\nconst OP_RUNTIME = \"Runtime\" as const\n\n/** @internal */\nexport type OP_RUNTIME = typeof OP_RUNTIME\n\n/** @internal */\nconst OP_COMPOSITE = \"Composite\" as const\n\n/** @internal */\nexport type OP_COMPOSITE = typeof OP_COMPOSITE\n\nconst emptyHash = Hash.string(`${FiberIdSymbolKey}-${OP_NONE}`)\n\n/** @internal */\nclass None implements FiberId.None {\n  readonly [FiberIdTypeId]: FiberId.FiberIdTypeId = FiberIdTypeId\n  readonly _tag = OP_NONE\n  readonly id = -1\n  readonly startTimeMillis = -1;\n  [Hash.symbol](): number {\n    return emptyHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberId(that) && that._tag === OP_NONE\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  toJSON() {\n    return {\n      _id: \"FiberId\",\n      _tag: this._tag\n    }\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/** @internal */\nclass Runtime implements FiberId.Runtime {\n  readonly [FiberIdTypeId]: FiberId.FiberIdTypeId = FiberIdTypeId\n  readonly _tag = OP_RUNTIME\n  constructor(\n    readonly id: number,\n    readonly startTimeMillis: number\n  ) {}\n  [Hash.symbol](): number {\n    return Hash.cached(this, Hash.string(`${FiberIdSymbolKey}-${this._tag}-${this.id}-${this.startTimeMillis}`))\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberId(that) &&\n      that._tag === OP_RUNTIME &&\n      this.id === that.id &&\n      this.startTimeMillis === that.startTimeMillis\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  toJSON() {\n    return {\n      _id: \"FiberId\",\n      _tag: this._tag,\n      id: this.id,\n      startTimeMillis: this.startTimeMillis\n    }\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/** @internal */\nclass Composite implements FiberId.Composite {\n  readonly [FiberIdTypeId]: FiberId.FiberIdTypeId = FiberIdTypeId\n  readonly _tag = OP_COMPOSITE\n  constructor(\n    readonly left: FiberId.FiberId,\n    readonly right: FiberId.FiberId\n  ) {\n  }\n  _hash: number | undefined;\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.string(`${FiberIdSymbolKey}-${this._tag}`),\n      Hash.combine(Hash.hash(this.left)),\n      Hash.combine(Hash.hash(this.right)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberId(that) &&\n      that._tag === OP_COMPOSITE &&\n      Equal.equals(this.left, that.left) &&\n      Equal.equals(this.right, that.right)\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  toJSON() {\n    return {\n      _id: \"FiberId\",\n      _tag: this._tag,\n      left: toJSON(this.left),\n      right: toJSON(this.right)\n    }\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/** @internal */\nexport const none: FiberId.None = new None()\n\n/** @internal */\nexport const runtime = (id: number, startTimeMillis: number): FiberId.Runtime => {\n  return new Runtime(id, startTimeMillis)\n}\n\n/** @internal */\nexport const composite = (left: FiberId.FiberId, right: FiberId.FiberId): FiberId.Composite => {\n  return new Composite(left, right)\n}\n\n/** @internal */\nexport const isFiberId = (self: unknown): self is FiberId.FiberId => hasProperty(self, FiberIdTypeId)\n\n/** @internal */\nexport const isNone = (self: FiberId.FiberId): self is FiberId.None => {\n  return self._tag === OP_NONE || pipe(toSet(self), HashSet.every((id) => isNone(id)))\n}\n\n/** @internal */\nexport const isRuntime = (self: FiberId.FiberId): self is FiberId.Runtime => {\n  return self._tag === OP_RUNTIME\n}\n\n/** @internal */\nexport const isComposite = (self: FiberId.FiberId): self is FiberId.Composite => {\n  return self._tag === OP_COMPOSITE\n}\n\n/** @internal */\nexport const combine = dual<\n  (that: FiberId.FiberId) => (self: FiberId.FiberId) => FiberId.FiberId,\n  (self: FiberId.FiberId, that: FiberId.FiberId) => FiberId.FiberId\n>(2, (self, that) => {\n  if (self._tag === OP_NONE) {\n    return that\n  }\n  if (that._tag === OP_NONE) {\n    return self\n  }\n  return new Composite(self, that)\n})\n\n/** @internal */\nexport const combineAll = (fiberIds: HashSet.HashSet<FiberId.FiberId>): FiberId.FiberId => {\n  return pipe(fiberIds, HashSet.reduce(none as FiberId.FiberId, (a, b) => combine(b)(a)))\n}\n\n/** @internal */\nexport const getOrElse = dual<\n  (that: FiberId.FiberId) => (self: FiberId.FiberId) => FiberId.FiberId,\n  (self: FiberId.FiberId, that: FiberId.FiberId) => FiberId.FiberId\n>(2, (self, that) => isNone(self) ? that : self)\n\n/** @internal */\nexport const ids = (self: FiberId.FiberId): HashSet.HashSet<number> => {\n  switch (self._tag) {\n    case OP_NONE: {\n      return HashSet.empty()\n    }\n    case OP_RUNTIME: {\n      return HashSet.make(self.id)\n    }\n    case OP_COMPOSITE: {\n      return pipe(ids(self.left), HashSet.union(ids(self.right)))\n    }\n  }\n}\n\nconst _fiberCounter = globalValue(\n  Symbol.for(\"effect/Fiber/Id/_fiberCounter\"),\n  () => MutableRef.make(0)\n)\n\n/** @internal */\nexport const make = (id: number, startTimeSeconds: number): FiberId.FiberId => {\n  return new Runtime(id, startTimeSeconds)\n}\n\n/** @internal */\nexport const threadName = (self: FiberId.FiberId): string => {\n  const identifiers = Array.from(ids(self)).map((n) => `#${n}`).join(\",\")\n  return identifiers\n}\n\n/** @internal */\nexport const toOption = (self: FiberId.FiberId): Option.Option<FiberId.FiberId> => {\n  const fiberIds = toSet(self)\n  if (HashSet.size(fiberIds) === 0) {\n    return Option.none()\n  }\n  let first = true\n  let acc: FiberId.FiberId\n  for (const fiberId of fiberIds) {\n    if (first) {\n      acc = fiberId\n      first = false\n    } else {\n      // @ts-expect-error\n      acc = pipe(acc, combine(fiberId))\n    }\n  }\n  // @ts-expect-error\n  return Option.some(acc)\n}\n\n/** @internal */\nexport const toSet = (self: FiberId.FiberId): HashSet.HashSet<FiberId.Runtime> => {\n  switch (self._tag) {\n    case OP_NONE: {\n      return HashSet.empty()\n    }\n    case OP_RUNTIME: {\n      return HashSet.make(self)\n    }\n    case OP_COMPOSITE: {\n      return pipe(toSet(self.left), HashSet.union(toSet(self.right)))\n    }\n  }\n}\n\n/** @internal */\nexport const unsafeMake = (): FiberId.Runtime => {\n  const id = MutableRef.get(_fiberCounter)\n  pipe(_fiberCounter, MutableRef.set(id + 1))\n  return new Runtime(id, Date.now())\n}\n", "/**\n * @since 2.0.0\n */\nimport type * as Equal from \"./Equal.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/fiberId.js\"\nimport type * as Option from \"./Option.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberIdTypeId: unique symbol = internal.FiberIdTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberIdTypeId = typeof FiberIdTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Single = None | Runtime\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type FiberId = Single | Composite\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface None extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"None\"\n  readonly id: -1\n  readonly startTimeMillis: -1\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Runtime extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"Runtime\"\n  readonly id: number\n  readonly startTimeMillis: number\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Composite extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"Composite\"\n  readonly left: FiberId\n  readonly right: FiberId\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const none: None = internal.none\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const runtime: (id: number, startTimeMillis: number) => Runtime = internal.runtime\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const composite: (left: FiberId, right: FiberId) => Composite = internal.composite\n\n/**\n * Returns `true` if the specified unknown value is a `FiberId`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiberId: (self: unknown) => self is FiberId = internal.isFiberId\n\n/**\n * Returns `true` if the `FiberId` is a `None`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNone: (self: FiberId) => self is None = internal.isNone\n\n/**\n * Returns `true` if the `FiberId` is a `Runtime`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRuntime: (self: FiberId) => self is Runtime = internal.isRuntime\n\n/**\n * Returns `true` if the `FiberId` is a `Composite`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isComposite: (self: FiberId) => self is Composite = internal.isComposite\n\n/**\n * Combine two `FiberId`s.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combine: {\n  (that: FiberId): (self: FiberId) => FiberId\n  (self: FiberId, that: FiberId): FiberId\n} = internal.combine\n\n/**\n * Combines a set of `FiberId`s into a single `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combineAll: (fiberIds: HashSet.HashSet<FiberId>) => FiberId = internal.combineAll\n\n/**\n * Returns this `FiberId` if it is not `None`, otherwise returns that `FiberId`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const getOrElse: {\n  (that: FiberId): (self: FiberId) => FiberId\n  (self: FiberId, that: FiberId): FiberId\n} = internal.getOrElse\n\n/**\n * Get the set of identifiers for this `FiberId`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const ids: (self: FiberId) => HashSet.HashSet<number> = internal.ids\n\n/**\n * Creates a new `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (id: number, startTimeSeconds: number) => FiberId = internal.make\n\n/**\n * Creates a string representing the name of the current thread of execution\n * represented by the specified `FiberId`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const threadName: (self: FiberId) => string = internal.threadName\n\n/**\n * Convert a `FiberId` into an `Option<FiberId>`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toOption: (self: FiberId) => Option.Option<FiberId> = internal.toOption\n\n/**\n * Convert a `FiberId` into a `HashSet<FiberId>`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toSet: (self: FiberId) => HashSet.HashSet<Runtime> = internal.toSet\n\n/**\n * Unsafely creates a new `FiberId`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: (_: void) => Runtime = internal.unsafeMake\n", "/**\n * @since 2.0.0\n */\n\nimport type { Equal } from \"./Equal.js\"\nimport type { HashSet } from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as HM from \"./internal/hashMap.js\"\nimport * as _keySet from \"./internal/hashMap/keySet.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = HM.HashMapTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface HashMap<out Key, out Value> extends Iterable<[Key, Value]>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace HashMap {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type UpdateFn<V> = (option: Option<V>) => Option<V>\n  /**\n   * This type-level utility extracts the key type `K` from a `HashMap<K, V>` type.\n   *\n   * @example\n   * import { HashMap } from \"effect\"\n   *\n   * declare const hm: HashMap.HashMap<string, number>\n   *\n   * // $ExpectType string\n   * type K = HashMap.HashMap.Key<typeof hm>\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Key<T extends HashMap<any, any>> = [T] extends [HashMap<infer _K, infer _V>] ? _K : never\n  /**\n   * This type-level utility extracts the value type `V` from a `HashMap<K, V>` type.\n   *\n   * @example\n   * import { HashMap } from \"effect\"\n   *\n   * declare const hm: HashMap.HashMap<string, number>\n   *\n   * // $ExpectType number\n   * type V = HashMap.HashMap.Value<typeof hm>\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Value<T extends HashMap<any, any>> = [T] extends [HashMap<infer _K, infer _V>] ? _V : never\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHashMap: {\n  <K, V>(u: Iterable<readonly [K, V]>): u is HashMap<K, V>\n  (u: unknown): u is HashMap<unknown, unknown>\n} = HM.isHashMap\n\n/**\n * Creates a new `HashMap`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <K = never, V = never>() => HashMap<K, V> = HM.empty\n\n/**\n * Constructs a new `HashMap` from an array of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Entries extends ReadonlyArray<readonly [any, any]>>(\n  ...entries: Entries\n) => HashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> = HM.make\n\n/**\n * Creates a new `HashMap` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: <K, V>(entries: Iterable<readonly [K, V]>) => HashMap<K, V> = HM.fromIterable\n\n/**\n * Checks if the `HashMap` contains any entries.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEmpty: <K, V>(self: HashMap<K, V>) => boolean = HM.isEmpty\n\n/**\n * Safely lookup the value for the specified key in the `HashMap` using the\n * internal hashing function.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const get: {\n  <K1>(key: K1): <K, V>(self: HashMap<K, V>) => Option<V>\n  <K, V, K1>(self: HashMap<K, V>, key: K1): Option<V>\n} = HM.get\n\n/**\n * Lookup the value for the specified key in the `HashMap` using a custom hash.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const getHash: {\n  <K1>(key: K1, hash: number): <K, V>(self: HashMap<K, V>) => Option<V>\n  <K, V, K1>(self: HashMap<K, V>, key: K1, hash: number): Option<V>\n} = HM.getHash\n\n/**\n * Unsafely lookup the value for the specified key in the `HashMap` using the\n * internal hashing function.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  <K1>(key: K1): <K, V>(self: HashMap<K, V>) => V\n  <K, V, K1>(self: HashMap<K, V>, key: K1): V\n} = HM.unsafeGet\n\n/**\n * Checks if the specified key has an entry in the `HashMap`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  <K1>(key: K1): <K, V>(self: HashMap<K, V>) => boolean\n  <K, V, K1>(self: HashMap<K, V>, key: K1): boolean\n} = HM.has\n\n/**\n * Checks if the specified key has an entry in the `HashMap` using a custom\n * hash.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const hasHash: {\n  <K1>(key: K1, hash: number): <K, V>(self: HashMap<K, V>) => boolean\n  <K, V, K1>(self: HashMap<K, V>, key: K1, hash: number): boolean\n} = HM.hasHash\n\n/**\n * Sets the specified key to the specified value using the internal hashing\n * function.\n *\n * @since 2.0.0\n */\nexport const set: {\n  <K, V>(key: K, value: V): (self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, key: K, value: V): HashMap<K, V>\n} = HM.set\n\n/**\n * Returns an `IterableIterator` of the keys within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keys: <K, V>(self: HashMap<K, V>) => IterableIterator<K> = HM.keys\n\n/**\n * Returns a `HashSet` of keys within the `HashMap`.\n *\n * @since 2.0.0\n * @category getter\n */\nexport const keySet: <K, V>(self: HashMap<K, V>) => HashSet<K> = _keySet.keySet\n\n/**\n * Returns an `IterableIterator` of the values within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <K, V>(self: HashMap<K, V>) => IterableIterator<V> = HM.values\n\n/**\n * Returns an `IterableIterator` of the entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const entries: <K, V>(self: HashMap<K, V>) => IterableIterator<[K, V]> = HM.entries\n\n/**\n * Returns an `Array<[K, V]>` of the entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const toEntries = <K, V>(self: HashMap<K, V>): Array<[K, V]> => Array.from(entries(self))\n\n/**\n * Returns the number of entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <K, V>(self: HashMap<K, V>) => number = HM.size\n\n/**\n * Marks the `HashMap` as mutable.\n *\n * @since 2.0.0\n */\nexport const beginMutation: <K, V>(self: HashMap<K, V>) => HashMap<K, V> = HM.beginMutation\n\n/**\n * Marks the `HashMap` as immutable.\n *\n * @since 2.0.0\n */\nexport const endMutation: <K, V>(self: HashMap<K, V>) => HashMap<K, V> = HM.endMutation\n\n/**\n * Mutates the `HashMap` within the context of the provided function.\n *\n * @since 2.0.0\n */\nexport const mutate: {\n  <K, V>(f: (self: HashMap<K, V>) => void): (self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, f: (self: HashMap<K, V>) => void): HashMap<K, V>\n} = HM.mutate\n\n/**\n * Set or remove the specified key in the `HashMap` using the specified\n * update function. The value of the specified key will be computed using the\n * provided hash.\n *\n * The update function will be invoked with the current value of the key if it\n * exists, or `None` if no such value exists.\n *\n * @since 2.0.0\n */\nexport const modifyAt: {\n  <K, V>(key: K, f: HashMap.UpdateFn<V>): (self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, key: K, f: HashMap.UpdateFn<V>): HashMap<K, V>\n} = HM.modifyAt\n\n/**\n * Alter the value of the specified key in the `HashMap` using the specified\n * update function. The value of the specified key will be computed using the\n * provided hash.\n *\n * The update function will be invoked with the current value of the key if it\n * exists, or `None` if no such value exists.\n *\n * This function will always either update or insert a value into the `HashMap`.\n *\n * @since 2.0.0\n */\nexport const modifyHash: {\n  <K, V>(key: K, hash: number, f: HashMap.UpdateFn<V>): (self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, key: K, hash: number, f: HashMap.UpdateFn<V>): HashMap<K, V>\n} = HM.modifyHash\n\n/**\n * Updates the value of the specified key within the `HashMap` if it exists.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  <K, V>(key: K, f: (v: V) => V): (self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, key: K, f: (v: V) => V): HashMap<K, V>\n} = HM.modify\n\n/**\n * Performs a union of this `HashMap` and that `HashMap`.\n *\n * @since 2.0.0\n */\nexport const union: {\n  <K1, V1>(that: HashMap<K1, V1>): <K0, V0>(self: HashMap<K0, V0>) => HashMap<K1 | K0, V1 | V0>\n  <K0, V0, K1, V1>(self: HashMap<K0, V0>, that: HashMap<K1, V1>): HashMap<K0 | K1, V0 | V1>\n} = HM.union\n\n/**\n * Remove the entry for the specified key in the `HashMap` using the internal\n * hashing function.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  <K>(key: K): <V>(self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, key: K): HashMap<K, V>\n} = HM.remove\n\n/**\n * Removes all entries in the `HashMap` which have the specified keys.\n *\n * @since 2.0.0\n */\nexport const removeMany: {\n  <K>(keys: Iterable<K>): <V>(self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, keys: Iterable<K>): HashMap<K, V>\n} = HM.removeMany\n\n/**\n * Maps over the entries of the `HashMap` using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, V, K>(f: (value: V, key: K) => A): (self: HashMap<K, V>) => HashMap<K, A>\n  <K, V, A>(self: HashMap<K, V>, f: (value: V, key: K) => A): HashMap<K, A>\n} = HM.map\n\n/**\n * Chains over the entries of the `HashMap` using the specified function.\n *\n * **NOTE**: the hash and equal of both maps have to be the same.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <A, K, B>(f: (value: A, key: K) => HashMap<K, B>): (self: HashMap<K, A>) => HashMap<K, B>\n  <K, A, B>(self: HashMap<K, A>, f: (value: A, key: K) => HashMap<K, B>): HashMap<K, B>\n} = HM.flatMap\n\n/**\n * Applies the specified function to the entries of the `HashMap`.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  <V, K>(f: (value: V, key: K) => void): (self: HashMap<K, V>) => void\n  <V, K>(self: HashMap<K, V>, f: (value: V, key: K) => void): void\n} = HM.forEach\n\n/**\n * Reduces the specified state over the entries of the `HashMap`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: HashMap<K, V>) => Z\n  <K, V, Z>(self: HashMap<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z): Z\n} = HM.reduce\n\n/**\n * Filters entries out of a `HashMap` using the specified predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  <K, A, B extends A>(f: (a: NoInfer<A>, k: K) => a is B): (self: HashMap<K, A>) => HashMap<K, B>\n  <K, A>(f: (a: NoInfer<A>, k: K) => boolean): (self: HashMap<K, A>) => HashMap<K, A>\n  <K, A, B extends A>(self: HashMap<K, A>, f: (a: A, k: K) => a is B): HashMap<K, B>\n  <K, A>(self: HashMap<K, A>, f: (a: A, k: K) => boolean): HashMap<K, A>\n} = HM.filter\n\n/**\n * Filters out `None` values from a `HashMap` of `Options`s.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const compact: <K, A>(self: HashMap<K, Option<A>>) => HashMap<K, A> = HM.compact\n\n/**\n * Maps over the entries of the `HashMap` using the specified partial function\n * and filters out `None` values.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMap: {\n  <A, K, B>(f: (value: A, key: K) => Option<B>): (self: HashMap<K, A>) => HashMap<K, B>\n  <K, A, B>(self: HashMap<K, A>, f: (value: A, key: K) => Option<B>): HashMap<K, B>\n} = HM.filterMap\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  <K, A, B extends A>(predicate: (a: NoInfer<A>, k: K) => a is B): (self: HashMap<K, A>) => Option<[K, B]>\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HashMap<K, A>) => Option<[K, A]>\n  <K, A, B extends A>(self: HashMap<K, A>, predicate: (a: A, k: K) => a is B): Option<[K, B]>\n  <K, A>(self: HashMap<K, A>, predicate: (a: A, k: K) => boolean): Option<[K, A]>\n} = HM.findFirst\n", "/**\n * A data type for immutable linked lists representing ordered collections of elements of type `A`.\n *\n * This data type is optimal for last-in-first-out (LIFO), stack-like access patterns. If you need another access pattern, for example, random access or FIFO, consider using a collection more suited to this than `List`.\n *\n * **Performance**\n *\n * - Time: `List` has `O(1)` prepend and head/tail access. Most other operations are `O(n)` on the number of elements in the list. This includes the index-based lookup of elements, `length`, `append` and `reverse`.\n * - Space: `List` implements structural sharing of the tail list. This means that many operations are either zero- or constant-memory cost.\n *\n * @since 2.0.0\n */\n\n/**\n * This file is ported from\n *\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n */\nimport * as Arr from \"./Array.js\"\nimport * as Chunk from \"./Chunk.js\"\nimport * as Either from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual, identity, unsafeCoerce } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { nonEmpty, NonEmptyIterable } from \"./NonEmptyIterable.js\"\nimport * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * Represents an immutable linked list of elements of type `A`.\n *\n * A `List` is optimal for last-in-first-out (LIFO), stack-like access patterns.\n * If you need another access pattern, for example, random access or FIFO,\n * consider using a collection more suited for that other than `List`.\n *\n * @since 2.0.0\n * @category models\n */\nexport type List<A> = Cons<A> | Nil<A>\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/List\")\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Nil<out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly _tag: \"Nil\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Cons<out A> extends NonEmptyIterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly _tag: \"Cons\"\n  readonly head: A\n  readonly tail: List<A>\n}\n\n/**\n * Converts the specified `List` to an `Array`.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray = <A>(self: List<A>): Array<A> => Arr.fromIterable(self)\n\n/**\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<List<A>> =>\n  Equivalence.mapInput(Arr.getEquivalence(isEquivalent), toArray<A>)\n\nconst _equivalence = getEquivalence(Equal.equals)\n\nconst ConsProto: Omit<Cons<unknown>, \"head\" | \"tail\" | typeof nonEmpty> = {\n  [TypeId]: TypeId,\n  _tag: \"Cons\",\n  toString(this: Cons<unknown>) {\n    return format(this.toJSON())\n  },\n  toJSON(this: Cons<unknown>) {\n    return {\n      _id: \"List\",\n      _tag: \"Cons\",\n      values: toArray(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  [Equal.symbol](this: Cons<unknown>, that: unknown): boolean {\n    return isList(that) &&\n      this._tag === that._tag &&\n      _equivalence(this, that)\n  },\n  [Hash.symbol](this: Cons<unknown>): number {\n    return Hash.cached(this, Hash.array(toArray(this)))\n  },\n  [Symbol.iterator](this: Cons<unknown>): Iterator<unknown> {\n    let done = false\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let self: List<unknown> = this\n    return {\n      next() {\n        if (done) {\n          return this.return!()\n        }\n        if (self._tag === \"Nil\") {\n          done = true\n          return this.return!()\n        }\n        const value: unknown = self.head\n        self = self.tail\n        return { done, value }\n      },\n      return(value?: unknown) {\n        if (!done) {\n          done = true\n        }\n        return { done: true, value }\n      }\n    }\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\ninterface MutableCons<A> extends Cons<A> {\n  head: A\n  tail: List<A>\n}\n\nconst makeCons = <A>(head: A, tail: List<A>): MutableCons<A> => {\n  const cons = Object.create(ConsProto)\n  cons.head = head\n  cons.tail = tail\n  return cons\n}\n\nconst NilHash = Hash.string(\"Nil\")\nconst NilProto: Nil<unknown> = {\n  [TypeId]: TypeId,\n  _tag: \"Nil\",\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"List\",\n      _tag: \"Nil\"\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  [Hash.symbol](): number {\n    return NilHash\n  },\n  [Equal.symbol](that: unknown): boolean {\n    return isList(that) && this._tag === that._tag\n  },\n  [Symbol.iterator](): Iterator<unknown> {\n    return {\n      next() {\n        return { done: true, value: undefined }\n      }\n    }\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as const\n\nconst _Nil = Object.create(NilProto) as Nil<never>\n\n/**\n * Returns `true` if the specified value is a `List`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isList: {\n  <A>(u: Iterable<A>): u is List<A>\n  (u: unknown): u is List<unknown>\n} = (u: unknown): u is List<unknown> => hasProperty(u, TypeId)\n\n/**\n * Returns `true` if the specified value is a `List.Nil<A>`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNil = <A>(self: List<A>): self is Nil<A> => self._tag === \"Nil\"\n\n/**\n * Returns `true` if the specified value is a `List.Cons<A>`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isCons = <A>(self: List<A>): self is Cons<A> => self._tag === \"Cons\"\n\n/**\n * Returns the number of elements contained in the specified `List`\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size = <A>(self: List<A>): number => {\n  let these = self\n  let len = 0\n  while (!isNil(these)) {\n    len += 1\n    these = these.tail\n  }\n  return len\n}\n\n/**\n * Constructs a new empty `List<A>`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const nil = <A = never>(): List<A> => _Nil\n\n/**\n * Constructs a new `List.Cons<A>` from the specified `head` and `tail` values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const cons = <A>(head: A, tail: List<A>): Cons<A> => makeCons(head, tail)\n\n/**\n * Constructs a new empty `List<A>`.\n *\n * Alias of {@link nil}.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = nil\n\n/**\n * Constructs a new `List<A>` from the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const of = <A>(value: A): Cons<A> => makeCons(value, _Nil)\n\n/**\n * Creates a new `List` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <A>(prefix: Iterable<A>): List<A> => {\n  const iterator = prefix[Symbol.iterator]()\n  let next: IteratorResult<A>\n  if ((next = iterator.next()) && !next.done) {\n    const result = makeCons(next.value, _Nil)\n    let curr = result\n    while ((next = iterator.next()) && !next.done) {\n      const temp = makeCons(next.value, _Nil)\n      curr.tail = temp\n      curr = temp\n    }\n    return result\n  } else {\n    return _Nil\n  }\n}\n\n/**\n * Constructs a new `List<A>` from the specified values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <Elements extends readonly [any, ...Array<any>]>(\n  ...elements: Elements\n): Cons<Elements[number]> => fromIterable(elements) as any\n\n/**\n * Appends the specified element to the end of the `List`, creating a new `Cons`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  <B>(element: B): <A>(self: List<A>) => Cons<A | B>\n  <A, B>(self: List<A>, element: B): Cons<A | B>\n} = dual(2, <A, B>(self: List<A>, element: B): Cons<A | B> => appendAll(self, of(element)))\n\n/**\n * Concatenates two lists, combining their elements.\n * If either list is non-empty, the result is also a non-empty list.\n *\n * @example\n * import { List } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n *   [1, 2, \"a\", \"b\"]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  <S extends List<any>, T extends List<any>>(that: T): (self: S) => List.OrNonEmpty<S, T, List.Infer<S> | List.Infer<T>>\n  <A, B>(self: List<A>, that: Cons<B>): Cons<A | B>\n  <A, B>(self: Cons<A>, that: List<B>): Cons<A | B>\n  <A, B>(self: List<A>, that: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, that: List<B>): List<A | B> => prependAll(that, self))\n\n/**\n * Prepends the specified element to the beginning of the list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  <B>(element: B): <A>(self: List<A>) => Cons<A | B>\n  <A, B>(self: List<A>, element: B): Cons<A | B>\n} = dual(2, <A, B>(self: List<A>, element: B): Cons<A | B> => cons<A | B>(element, self))\n\n/**\n * Prepends the specified prefix list to the beginning of the specified list.\n * If either list is non-empty, the result is also a non-empty list.\n *\n * @example\n * import { List } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n *   [\"a\", \"b\", 1, 2]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  <S extends List<any>, T extends List<any>>(that: T): (self: S) => List.OrNonEmpty<S, T, List.Infer<S> | List.Infer<T>>\n  <A, B>(self: List<A>, that: Cons<B>): Cons<A | B>\n  <A, B>(self: Cons<A>, that: List<B>): Cons<A | B>\n  <A, B>(self: List<A>, that: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, prefix: List<B>): List<A | B> => {\n  if (isNil(self)) {\n    return prefix\n  } else if (isNil(prefix)) {\n    return self\n  } else {\n    const result = makeCons<A | B>(prefix.head, self)\n    let curr = result\n    let that = prefix.tail\n    while (!isNil(that)) {\n      const temp = makeCons<A | B>(that.head, self)\n      curr.tail = temp\n      curr = temp\n      that = that.tail\n    }\n    return result\n  }\n})\n\n/**\n * Prepends the specified prefix list (in reverse order) to the beginning of the\n * specified list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAllReversed: {\n  <B>(prefix: List<B>): <A>(self: List<A>) => List<A | B>\n  <A, B>(self: List<A>, prefix: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, prefix: List<B>): List<A | B> => {\n  let out: List<A | B> = self\n  let pres = prefix\n  while (isCons(pres)) {\n    out = makeCons(pres.head, out)\n    pres = pres.tail\n  }\n  return out\n})\n\n/**\n * Drops the first `n` elements from the specified list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const drop: {\n  (n: number): <A>(self: List<A>) => List<A>\n  <A>(self: List<A>, n: number): List<A>\n} = dual(2, <A>(self: List<A>, n: number): List<A> => {\n  if (n <= 0) {\n    return self\n  }\n  if (n >= size(self)) {\n    return _Nil\n  }\n  let these = self\n  let i = 0\n  while (!isNil(these) && i < n) {\n    these = these.tail\n    i += 1\n  }\n  return these\n})\n\n/**\n * Check if a predicate holds true for every `List` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => self is List<B>\n  <A>(predicate: Predicate<A>): (self: List<A>) => boolean\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): self is List<B>\n  <A>(self: List<A>, predicate: Predicate<A>): boolean\n} = dual(2, <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): self is List<B> => {\n  for (const a of self) {\n    if (!refinement(a)) {\n      return false\n    }\n  }\n  return true\n})\n\n/**\n * Check if a predicate holds true for some `List` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => self is Cons<A>\n  <A>(self: List<A>, predicate: Predicate<A>): self is Cons<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): self is Cons<A> => {\n  let these = self\n  while (!isNil(these)) {\n    if (predicate(these.head)) {\n      return true\n    }\n    these = these.tail\n  }\n  return false\n})\n\n/**\n * Filters a list using the specified predicate.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => List<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => List<A>\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): List<B>\n  <A>(self: List<A>, predicate: Predicate<A>): List<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): List<A> => noneIn(self, predicate, false))\n\n// everything seen so far is not included\nconst noneIn = <A>(\n  self: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  /* eslint-disable no-constant-condition */\n  while (true) {\n    if (isNil(self)) {\n      return _Nil\n    } else {\n      if (predicate(self.head) !== isFlipped) {\n        return allIn(self, self.tail, predicate, isFlipped)\n      } else {\n        self = self.tail\n      }\n    }\n  }\n}\n\n// everything from 'start' is included, if everything from this point is in we can return the origin\n// start otherwise if we discover an element that is out we must create a new partial list.\nconst allIn = <A>(\n  start: List<A>,\n  remaining: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  /* eslint-disable no-constant-condition */\n  while (true) {\n    if (isNil(remaining)) {\n      return start\n    } else {\n      if (predicate(remaining.head) !== isFlipped) {\n        remaining = remaining.tail\n      } else {\n        return partialFill(start, remaining, predicate, isFlipped)\n      }\n    }\n  }\n}\n\n// we have seen elements that should be included then one that should be excluded, start building\nconst partialFill = <A>(\n  origStart: List<A>,\n  firstMiss: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  const newHead = makeCons<A>(unsafeHead(origStart)!, _Nil)\n  let toProcess = unsafeTail(origStart)! as Cons<A>\n  let currentLast = newHead\n\n  // we know that all elements are :: until at least firstMiss.tail\n  while (!(toProcess === firstMiss)) {\n    const newElem = makeCons(unsafeHead(toProcess)!, _Nil)\n    currentLast.tail = newElem\n    currentLast = unsafeCoerce(newElem)\n    toProcess = unsafeCoerce(toProcess.tail)\n  }\n\n  // at this point newHead points to a list which is a duplicate of all the 'in' elements up to the first miss.\n  // currentLast is the last element in that list.\n\n  // now we are going to try and share as much of the tail as we can, only moving elements across when we have to.\n  let next = firstMiss.tail\n  let nextToCopy: Cons<A> = unsafeCoerce(next) // the next element we would need to copy to our list if we cant share.\n  while (!isNil(next)) {\n    // generally recommended is next.isNonEmpty but this incurs an extra method call.\n    const head = unsafeHead(next)!\n    if (predicate(head) !== isFlipped) {\n      next = next.tail\n    } else {\n      // its not a match - do we have outstanding elements?\n      while (!(nextToCopy === next)) {\n        const newElem = makeCons(unsafeHead(nextToCopy)!, _Nil)\n        currentLast.tail = newElem\n        currentLast = newElem\n        nextToCopy = unsafeCoerce(nextToCopy.tail)\n      }\n      nextToCopy = unsafeCoerce(next.tail)\n      next = next.tail\n    }\n  }\n\n  // we have remaining elements - they are unchanged attach them to the end\n  if (!isNil(nextToCopy)) {\n    currentLast.tail = nextToCopy\n  }\n  return newHead\n}\n\n/**\n * Filters and maps a list using the specified partial function. The resulting\n * list may be smaller than the input list due to the possibility of the partial\n * function not being defined for some elements.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const filterMap: {\n  <A, B>(f: (a: A) => Option.Option<B>): (self: List<A>) => List<B>\n  <A, B>(self: List<A>, f: (a: A) => Option.Option<B>): List<B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => Option.Option<B>): List<B> => {\n  const bs: Array<B> = []\n  for (const a of self) {\n    const oa = f(a)\n    if (Option.isSome(oa)) {\n      bs.push(oa.value)\n    }\n  }\n  return fromIterable(bs)\n})\n\n/**\n * Removes all `None` values from the specified list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const compact = <A>(self: List<Option.Option<A>>): List<A> => filterMap(self, identity)\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => Option.Option<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => Option.Option<A>\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): Option.Option<B>\n  <A>(self: List<A>, predicate: Predicate<A>): Option.Option<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): Option.Option<A> => {\n  let these = self\n  while (!isNil(these)) {\n    if (predicate(these.head)) {\n      return Option.some(these.head)\n    }\n    these = these.tail\n  }\n  return Option.none()\n})\n\n/**\n * Applies a function to each element in a list and returns a new list containing the concatenated mapped elements.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <S extends List<any>, T extends List<any>>(\n    f: (a: List.Infer<S>, i: number) => T\n  ): (self: S) => List.AndNonEmpty<S, T, List.Infer<T>>\n  <A, B>(self: Cons<A>, f: (a: A, i: number) => Cons<B>): Cons<B>\n  <A, B>(self: List<A>, f: (a: A, i: number) => List<B>): List<B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => List<B>): List<B> => {\n  let rest = self\n  let head: MutableCons<B> | undefined = undefined\n  let tail: MutableCons<B> | undefined = undefined\n  while (!isNil(rest)) {\n    let bs = f(rest.head)\n    while (!isNil(bs)) {\n      const next = makeCons(bs.head, _Nil)\n      if (tail === undefined) {\n        head = next\n      } else {\n        tail.tail = next\n      }\n      tail = next\n      bs = bs.tail\n    }\n    rest = rest.tail\n  }\n  if (head === undefined) {\n    return _Nil\n  }\n  return head\n})\n\n/**\n * Applies the specified function to each element of the `List`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const forEach: {\n  <A, B>(f: (a: A) => B): (self: List<A>) => void\n  <A, B>(self: List<A>, f: (a: A) => B): void\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => B): void => {\n  let these = self\n  while (!isNil(these)) {\n    f(these.head)\n    these = these.tail\n  }\n})\n\n/**\n * Returns the first element of the specified list, or `None` if the list is\n * empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const head = <A>(self: List<A>): Option.Option<A> => isNil(self) ? Option.none() : Option.some(self.head)\n\n/**\n * Returns the last element of the specified list, or `None` if the list is\n * empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const last = <A>(self: List<A>): Option.Option<A> => isNil(self) ? Option.none() : Option.some(unsafeLast(self)!)\n\n/**\n * @since 2.0.0\n */\nexport declare namespace List {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends List<any>> = S extends List<infer A> ? A : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends List<any>, A> = S extends Cons<any> ? Cons<A> : List<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<S extends List<any>, T extends List<any>, A> = S extends Cons<any> ? Cons<A>\n    : T extends Cons<any> ? Cons<A>\n    : List<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<S extends List<any>, T extends List<any>, A> = S extends Cons<any> ?\n    T extends Cons<any> ? Cons<A>\n    : List<A> :\n    List<A>\n}\n\n/**\n * Applies the specified mapping function to each element of the list.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <S extends List<any>, B>(f: (a: List.Infer<S>, i: number) => B): (self: S) => List.With<S, B>\n  <S extends List<any>, B>(self: S, f: (a: List.Infer<S>, i: number) => B): List.With<S, B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A, i: number) => B): List<B> => {\n  if (isNil(self)) {\n    return self as unknown as List<B>\n  } else {\n    let i = 0\n    const head = makeCons(f(self.head, i++), _Nil)\n    let nextHead = head\n    let rest = self.tail\n    while (!isNil(rest)) {\n      const next = makeCons(f(rest.head, i++), _Nil)\n      nextHead.tail = next\n      nextHead = next\n      rest = rest.tail\n    }\n    return head\n  }\n})\n\n/**\n * Partition a list into two lists, where the first list contains all elements\n * that did not satisfy the specified predicate, and the second list contains\n * all elements that did satisfy the specified predicate.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const partition: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: List<A>) => [excluded: List<Exclude<A, B>>, satisfying: List<B>]\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => [excluded: List<A>, satisfying: List<A>]\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): [excluded: List<Exclude<A, B>>, satisfying: List<B>]\n  <A>(self: List<A>, predicate: Predicate<A>): [excluded: List<A>, satisfying: List<A>]\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): [excluded: List<A>, satisfying: List<A>] => {\n  const left: Array<A> = []\n  const right: Array<A> = []\n  for (const a of self) {\n    if (predicate(a)) {\n      right.push(a)\n    } else {\n      left.push(a)\n    }\n  }\n  return [fromIterable(left), fromIterable(right)]\n})\n\n/**\n * Partition a list into two lists, where the first list contains all elements\n * for which the specified function returned a `Left`, and the second list\n * contains all elements for which the specified function returned a `Right`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const partitionMap: {\n  <A, B, C>(f: (a: A) => Either.Either<C, B>): (self: List<A>) => [left: List<B>, right: List<C>]\n  <A, B, C>(self: List<A>, f: (a: A) => Either.Either<C, B>): [left: List<B>, right: List<C>]\n} = dual(2, <A, B, C>(self: List<A>, f: (a: A) => Either.Either<C, B>): [left: List<B>, right: List<C>] => {\n  const left: Array<B> = []\n  const right: Array<C> = []\n  for (const a of self) {\n    const e = f(a)\n    if (Either.isLeft(e)) {\n      left.push(e.left)\n    } else {\n      right.push(e.right)\n    }\n  }\n  return [fromIterable(left), fromIterable(right)]\n})\n\n/**\n * Folds over the elements of the list using the specified function, using the\n * specified initial value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  <Z, A>(zero: Z, f: (b: Z, a: A) => Z): (self: List<A>) => Z\n  <A, Z>(self: List<A>, zero: Z, f: (b: Z, a: A) => Z): Z\n} = dual(3, <A, Z>(self: List<A>, zero: Z, f: (b: Z, a: A) => Z): Z => {\n  let acc = zero\n  let these = self\n  while (!isNil(these)) {\n    acc = f(acc, these.head)\n    these = these.tail\n  }\n  return acc\n})\n\n/**\n * Folds over the elements of the list using the specified function, beginning\n * with the last element of the list, using the specified initial value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduceRight: {\n  <Z, A>(zero: Z, f: (accumulator: Z, value: A) => Z): (self: List<A>) => Z\n  <Z, A>(self: List<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z\n} = dual(3, <Z, A>(self: List<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z => {\n  let acc = zero\n  let these = reverse(self)\n  while (!isNil(these)) {\n    acc = f(acc, these.head)\n    these = these.tail\n  }\n  return acc\n})\n\n/**\n * Returns a new list with the elements of the specified list in reverse order.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const reverse = <A>(self: List<A>): List<A> => {\n  let result = empty<A>()\n  let these = self\n  while (!isNil(these)) {\n    result = prepend(result, these.head)\n    these = these.tail\n  }\n  return result\n}\n\n/**\n * Splits the specified list into two lists at the specified index.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const splitAt: {\n  (n: number): <A>(self: List<A>) => [beforeIndex: List<A>, fromIndex: List<A>]\n  <A>(self: List<A>, n: number): [beforeIndex: List<A>, fromIndex: List<A>]\n} = dual(2, <A>(self: List<A>, n: number): [List<A>, List<A>] => [take(self, n), drop(self, n)])\n\n/**\n * Returns the tail of the specified list, or `None` if the list is empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const tail = <A>(self: List<A>): Option.Option<List<A>> => isNil(self) ? Option.none() : Option.some(self.tail)\n\n/**\n * Takes the specified number of elements from the beginning of the specified\n * list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const take: {\n  (n: number): <A>(self: List<A>) => List<A>\n  <A>(self: List<A>, n: number): List<A>\n} = dual(2, <A>(self: List<A>, n: number): List<A> => {\n  if (n <= 0) {\n    return _Nil\n  }\n  if (n >= size(self)) {\n    return self\n  }\n  let these = make(unsafeHead(self))\n  let current = unsafeTail(self)!\n  for (let i = 1; i < n; i++) {\n    these = makeCons(unsafeHead(current), these)\n    current = unsafeTail(current!)\n  }\n  return reverse(these)\n})\n\n/**\n * Converts the specified `List` to a `Chunk`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const toChunk = <A>(self: List<A>): Chunk.Chunk<A> => Chunk.fromIterable(self)\n\nconst getExpectedListToBeNonEmptyErrorMessage = \"Expected List to be non-empty\"\n\n/**\n * Unsafely returns the first element of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeHead = <A>(self: List<A>): A => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  return self.head\n}\n\n/**\n * Unsafely returns the last element of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeLast = <A>(self: List<A>): A => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  let these = self\n  let scout = self.tail\n  while (!isNil(scout)) {\n    these = scout\n    scout = scout.tail\n  }\n  return these.head\n}\n\n/**\n * Unsafely returns the tail of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeTail = <A>(self: List<A>): List<A> => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  return self.tail\n}\n", "import * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport type * as Types from \"../Types.js\"\nimport { StructuralPrototype } from \"./effectable.js\"\n\n/** @internal */\nexport const ArrayProto: Equal.Equal = Object.assign(Object.create(Array.prototype), {\n  [Hash.symbol](this: Array<any>) {\n    return Hash.cached(this, Hash.array(this))\n  },\n  [Equal.symbol](this: Array<any>, that: Equal.Equal) {\n    if (Array.isArray(that) && this.length === that.length) {\n      return this.every((v, i) => Equal.equals(v, (that as Array<any>)[i]))\n    } else {\n      return false\n    }\n  }\n})\n\n/** @internal */\nexport const Structural: new<A>(\n  args: Types.Equals<Omit<A, keyof Equal.Equal>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends keyof Equal.Equal ? never : P]: A[P] }\n) => {} = (function() {\n  function Structural(this: any, args: any) {\n    if (args) {\n      Object.assign(this, args)\n    }\n  }\n  Structural.prototype = StructuralPrototype\n  return Structural as any\n})()\n\n/** @internal */\nexport const struct = <As extends Readonly<Record<string, any>>>(as: As): As =>\n  Object.assign(Object.create(StructuralPrototype), as)\n", "import * as Chunk from \"../../Chunk.js\"\nimport type { Context } from \"../../Context.js\"\nimport type { Differ } from \"../../Differ.js\"\nimport * as Equal from \"../../Equal.js\"\nimport * as Dual from \"../../Function.js\"\nimport { makeContext } from \"../context.js\"\nimport { Structural } from \"../data.js\"\n\n/** @internal */\nexport const ContextPatchTypeId: Differ.Context.TypeId = Symbol.for(\n  \"effect/DifferContextPatch\"\n) as Differ.Context.TypeId\n\nfunction variance<A, B>(a: A): B {\n  return a as unknown as B\n}\n\n/** @internal */\nconst PatchProto = {\n  ...Structural.prototype,\n  [ContextPatchTypeId]: {\n    _Value: variance,\n    _Patch: variance\n  }\n}\n\ninterface Empty<Input, Output> extends Differ.Context.Patch<Input, Output> {\n  readonly _tag: \"Empty\"\n}\n\nconst EmptyProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Empty\"\n})\n\nconst _empty = Object.create(EmptyProto)\n\n/**\n * @internal\n */\nexport const empty = <Input, Output>(): Differ.Context.Patch<Input, Output> => _empty\n\n/** @internal */\nexport interface AndThen<in out Input, in out Output, in out Output2> extends Differ.Context.Patch<Input, Output2> {\n  readonly _tag: \"AndThen\"\n  readonly first: Differ.Context.Patch<Input, Output>\n  readonly second: Differ.Context.Patch<Output, Output2>\n}\n\nconst AndThenProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AndThen\"\n})\n\nconst makeAndThen = <Input, Output, Output2>(\n  first: Differ.Context.Patch<Input, Output>,\n  second: Differ.Context.Patch<Output, Output2>\n): Differ.Context.Patch<Input, Output2> => {\n  const o = Object.create(AndThenProto)\n  o.first = first\n  o.second = second\n  return o\n}\n\n/** @internal */\nexport interface AddService<in out Env, in out T, in out I> extends Differ.Context.Patch<Env, Env | I> {\n  readonly _tag: \"AddService\"\n  readonly key: string\n  readonly service: T\n}\n\nconst AddServiceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AddService\"\n})\n\nconst makeAddService = <Env, I, T>(\n  key: string,\n  service: T\n): Differ.Context.Patch<Env, Env | I> => {\n  const o = Object.create(AddServiceProto)\n  o.key = key\n  o.service = service\n  return o\n}\n\n/** @internal */\nexport interface RemoveService<in out Env, in out I> extends Differ.Context.Patch<Env, Exclude<Env, I>> {\n  readonly _tag: \"RemoveService\"\n  readonly key: string\n}\n\nconst RemoveServiceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"RemoveService\"\n})\n\nconst makeRemoveService = <Env, I>(\n  key: string\n): Differ.Context.Patch<Env, Exclude<Env, I>> => {\n  const o = Object.create(RemoveServiceProto)\n  o.key = key\n  return o\n}\n\n/** @internal */\nexport interface UpdateService<in out Env, in out T, in out I> extends Differ.Context.Patch<Env | I, Env | I> {\n  readonly _tag: \"UpdateService\"\n  readonly key: string\n  update(service: T): T\n}\n\nconst UpdateServiceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"UpdateService\"\n})\n\nconst makeUpdateService = <Env, I, T>(\n  key: string,\n  update: (service: T) => T\n): Differ.Context.Patch<Env | I, Env | I> => {\n  const o = Object.create(UpdateServiceProto)\n  o.key = key\n  o.update = update\n  return o\n}\n\ntype Instruction =\n  | Empty<any, any>\n  | AndThen<any, any, any>\n  | AddService<any, any, any>\n  | RemoveService<any, any>\n  | UpdateService<any, any, any>\n\n/** @internal */\nexport const diff = <Input, Output>(\n  oldValue: Context<Input>,\n  newValue: Context<Output>\n): Differ.Context.Patch<Input, Output> => {\n  const missingServices = new Map(oldValue.unsafeMap)\n  let patch = empty<any, any>()\n  for (const [tag, newService] of newValue.unsafeMap.entries()) {\n    if (missingServices.has(tag)) {\n      const old = missingServices.get(tag)!\n      missingServices.delete(tag)\n      if (!Equal.equals(old, newService)) {\n        patch = combine(makeUpdateService(tag, () => newService))(patch)\n      }\n    } else {\n      missingServices.delete(tag)\n      patch = combine(makeAddService(tag, newService))(patch)\n    }\n  }\n  for (const [tag] of missingServices.entries()) {\n    patch = combine(makeRemoveService(tag))(patch)\n  }\n  return patch\n}\n\n/** @internal */\nexport const combine = Dual.dual<\n  <Output, Output2>(\n    that: Differ.Context.Patch<Output, Output2>\n  ) => <Input>(\n    self: Differ.Context.Patch<Input, Output>\n  ) => Differ.Context.Patch<Input, Output2>,\n  <Input, Output, Output2>(\n    self: Differ.Context.Patch<Input, Output>,\n    that: Differ.Context.Patch<Output, Output2>\n  ) => Differ.Context.Patch<Input, Output2>\n>(2, (self, that) => makeAndThen(self, that))\n\n/** @internal */\nexport const patch = Dual.dual<\n  <Input>(\n    context: Context<Input>\n  ) => <Output>(\n    self: Differ.Context.Patch<Input, Output>\n  ) => Context<Output>,\n  <Input, Output>(\n    self: Differ.Context.Patch<Input, Output>,\n    context: Context<Input>\n  ) => Context<Output>\n>(2, <Input, Output>(self: Differ.Context.Patch<Input, Output>, context: Context<Input>) => {\n  if ((self as Instruction)._tag === \"Empty\") {\n    return context as any\n  }\n  let wasServiceUpdated = false\n  let patches: Chunk.Chunk<Differ.Context.Patch<unknown, unknown>> = Chunk.of(\n    self as Differ.Context.Patch<unknown, unknown>\n  )\n  const updatedContext: Map<string, unknown> = new Map(context.unsafeMap)\n  while (Chunk.isNonEmpty(patches)) {\n    const head: Instruction = Chunk.headNonEmpty(patches) as Instruction\n    const tail = Chunk.tailNonEmpty(patches)\n    switch (head._tag) {\n      case \"Empty\": {\n        patches = tail\n        break\n      }\n      case \"AddService\": {\n        updatedContext.set(head.key, head.service)\n        patches = tail\n        break\n      }\n      case \"AndThen\": {\n        patches = Chunk.prepend(Chunk.prepend(tail, head.second), head.first)\n        break\n      }\n      case \"RemoveService\": {\n        updatedContext.delete(head.key)\n        patches = tail\n        break\n      }\n      case \"UpdateService\": {\n        updatedContext.set(head.key, head.update(updatedContext.get(head.key)))\n        wasServiceUpdated = true\n        patches = tail\n        break\n      }\n    }\n  }\n  if (!wasServiceUpdated) {\n    return makeContext(updatedContext) as Context<Output>\n  }\n  const map = new Map()\n  for (const [tag] of context.unsafeMap) {\n    if (updatedContext.has(tag)) {\n      map.set(tag, updatedContext.get(tag))\n      updatedContext.delete(tag)\n    }\n  }\n  for (const [tag, s] of updatedContext) {\n    map.set(tag, s)\n  }\n  return makeContext(map) as Context<Output>\n})\n", "import * as Chunk from \"../../Chunk.js\"\nimport type { Differ } from \"../../Differ.js\"\nimport * as Dual from \"../../Function.js\"\nimport * as HashSet from \"../../HashSet.js\"\nimport { Structural } from \"../data.js\"\n\n/** @internal */\nexport const HashSetPatchTypeId: Differ.HashSet.TypeId = Symbol.for(\n  \"effect/DifferHashSetPatch\"\n) as Differ.HashSet.TypeId\n\nfunction variance<A, B>(a: A): B {\n  return a as unknown as B\n}\n\n/** @internal */\nconst PatchProto = {\n  ...Structural.prototype,\n  [HashSetPatchTypeId]: {\n    _Value: variance,\n    _Key: variance,\n    _Patch: variance\n  }\n}\n\ninterface Empty<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"Empty\"\n}\n\nconst EmptyProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Empty\"\n})\n\nconst _empty = Object.create(EmptyProto)\n\n/** @internal */\nexport const empty = <Value>(): Differ.HashSet.Patch<Value> => _empty\n\ninterface AndThen<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"AndThen\"\n  readonly first: Differ.HashSet.Patch<Value>\n  readonly second: Differ.HashSet.Patch<Value>\n}\n\nconst AndThenProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AndThen\"\n})\n\n/** @internal */\nexport const makeAndThen = <Value>(\n  first: Differ.HashSet.Patch<Value>,\n  second: Differ.HashSet.Patch<Value>\n): Differ.HashSet.Patch<Value> => {\n  const o = Object.create(AndThenProto)\n  o.first = first\n  o.second = second\n  return o\n}\n\ninterface Add<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"Add\"\n  readonly value: Value\n}\n\nconst AddProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Add\"\n})\n\n/** @internal */\nexport const makeAdd = <Value>(\n  value: Value\n): Differ.HashSet.Patch<Value> => {\n  const o = Object.create(AddProto)\n  o.value = value\n  return o\n}\n\ninterface Remove<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"Remove\"\n  readonly value: Value\n}\n\nconst RemoveProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Remove\"\n})\n\n/** @internal */\nexport const makeRemove = <Value>(\n  value: Value\n): Differ.HashSet.Patch<Value> => {\n  const o = Object.create(RemoveProto)\n  o.value = value\n  return o\n}\n\ntype Instruction =\n  | Add<any>\n  | AndThen<any>\n  | Empty<any>\n  | Remove<any>\n\n/** @internal */\nexport const diff = <Value>(\n  oldValue: HashSet.HashSet<Value>,\n  newValue: HashSet.HashSet<Value>\n): Differ.HashSet.Patch<Value> => {\n  const [removed, patch] = HashSet.reduce(\n    [oldValue, empty<Value>()] as const,\n    ([set, patch], value: Value) => {\n      if (HashSet.has(value)(set)) {\n        return [HashSet.remove(value)(set), patch] as const\n      }\n      return [set, combine(makeAdd(value))(patch)] as const\n    }\n  )(newValue)\n  return HashSet.reduce(patch, (patch, value: Value) => combine(makeRemove(value))(patch))(removed)\n}\n\n/** @internal */\nexport const combine = Dual.dual<\n  <Value>(\n    that: Differ.HashSet.Patch<Value>\n  ) => (\n    self: Differ.HashSet.Patch<Value>\n  ) => Differ.HashSet.Patch<Value>,\n  <Value>(\n    self: Differ.HashSet.Patch<Value>,\n    that: Differ.HashSet.Patch<Value>\n  ) => Differ.HashSet.Patch<Value>\n>(2, (self, that) => makeAndThen(self, that))\n\n/** @internal */\nexport const patch = Dual.dual<\n  <Value>(\n    oldValue: HashSet.HashSet<Value>\n  ) => (\n    self: Differ.HashSet.Patch<Value>\n  ) => HashSet.HashSet<Value>,\n  <Value>(\n    self: Differ.HashSet.Patch<Value>,\n    oldValue: HashSet.HashSet<Value>\n  ) => HashSet.HashSet<Value>\n>(2, <Value>(\n  self: Differ.HashSet.Patch<Value>,\n  oldValue: HashSet.HashSet<Value>\n) => {\n  if ((self as Instruction)._tag === \"Empty\") {\n    return oldValue\n  }\n  let set = oldValue\n  let patches: Chunk.Chunk<Differ.HashSet.Patch<Value>> = Chunk.of(self)\n  while (Chunk.isNonEmpty(patches)) {\n    const head: Instruction = Chunk.headNonEmpty(patches) as Instruction\n    const tail = Chunk.tailNonEmpty(patches)\n    switch (head._tag) {\n      case \"Empty\": {\n        patches = tail\n        break\n      }\n      case \"AndThen\": {\n        patches = Chunk.prepend(head.first)(Chunk.prepend(head.second)(tail))\n        break\n      }\n      case \"Add\": {\n        set = HashSet.add(head.value)(set)\n        patches = tail\n        break\n      }\n      case \"Remove\": {\n        set = HashSet.remove(head.value)(set)\n        patches = tail\n      }\n    }\n  }\n  return set\n})\n", "import * as Arr from \"../../Array.js\"\nimport type * as Differ from \"../../Differ.js\"\nimport * as Equal from \"../../Equal.js\"\nimport * as Dual from \"../../Function.js\"\nimport * as Data from \"../data.js\"\n\n/** @internal */\nexport const ReadonlyArrayPatchTypeId: Differ.Differ.ReadonlyArray.TypeId = Symbol.for(\n  \"effect/DifferReadonlyArrayPatch\"\n) as Differ.Differ.ReadonlyArray.TypeId\n\nfunction variance<A, B>(a: A): B {\n  return a as unknown as B\n}\n\nconst PatchProto = {\n  ...Data.Structural.prototype,\n  [ReadonlyArrayPatchTypeId]: {\n    _Value: variance,\n    _Patch: variance\n  }\n}\n\ninterface Empty<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Empty\"\n}\n\nconst EmptyProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Empty\"\n})\n\nconst _empty = Object.create(EmptyProto)\n\n/**\n * @internal\n */\nexport const empty = <Value, Patch>(): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => _empty\n\ninterface AndThen<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"AndThen\"\n  readonly first: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  readonly second: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n}\n\nconst AndThenProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AndThen\"\n})\n\nconst makeAndThen = <Value, Patch>(\n  first: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n  second: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(AndThenProto)\n  o.first = first\n  o.second = second\n  return o\n}\n\ninterface Append<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Append\"\n  readonly values: ReadonlyArray<Value>\n}\n\nconst AppendProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Append\"\n})\n\nconst makeAppend = <Value, Patch>(values: ReadonlyArray<Value>): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(AppendProto)\n  o.values = values\n  return o\n}\n\ninterface Slice<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Slice\"\n  readonly from: number\n  readonly until: number\n}\n\nconst SliceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Slice\"\n})\n\nconst makeSlice = <Value, Patch>(from: number, until: number): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(SliceProto)\n  o.from = from\n  o.until = until\n  return o\n}\n\ninterface Update<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Update\"\n  readonly index: number\n  readonly patch: Patch\n}\n\nconst UpdateProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Update\"\n})\n\nconst makeUpdate = <Value, Patch>(index: number, patch: Patch): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(UpdateProto)\n  o.index = index\n  o.patch = patch\n  return o\n}\n\ntype Instruction =\n  | Empty<any, any>\n  | AndThen<any, any>\n  | Append<any, any>\n  | Slice<any, any>\n  | Update<any, any>\n\n/** @internal */\nexport const diff = <Value, Patch>(\n  options: {\n    readonly oldValue: ReadonlyArray<Value>\n    readonly newValue: ReadonlyArray<Value>\n    readonly differ: Differ.Differ<Value, Patch>\n  }\n): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  let i = 0\n  let patch = empty<Value, Patch>()\n  while (i < options.oldValue.length && i < options.newValue.length) {\n    const oldElement = options.oldValue[i]!\n    const newElement = options.newValue[i]!\n    const valuePatch = options.differ.diff(oldElement, newElement)\n    if (!Equal.equals(valuePatch, options.differ.empty)) {\n      patch = combine(patch, makeUpdate(i, valuePatch))\n    }\n    i = i + 1\n  }\n  if (i < options.oldValue.length) {\n    patch = combine(patch, makeSlice(0, i))\n  }\n  if (i < options.newValue.length) {\n    patch = combine(patch, makeAppend(Arr.drop(i)(options.newValue)))\n  }\n  return patch\n}\n\n/** @internal */\nexport const combine = Dual.dual<\n  <Value, Patch>(\n    that: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  ) => (\n    self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  ) => Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n  <Value, Patch>(\n    self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n    that: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  ) => Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n>(2, (self, that) => makeAndThen(self, that))\n\n/** @internal */\nexport const patch = Dual.dual<\n  <Value, Patch>(\n    oldValue: ReadonlyArray<Value>,\n    differ: Differ.Differ<Value, Patch>\n  ) => (self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>) => ReadonlyArray<Value>,\n  <Value, Patch>(\n    self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n    oldValue: ReadonlyArray<Value>,\n    differ: Differ.Differ<Value, Patch>\n  ) => ReadonlyArray<Value>\n>(3, <Value, Patch>(\n  self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n  oldValue: ReadonlyArray<Value>,\n  differ: Differ.Differ<Value, Patch>\n) => {\n  if ((self as Instruction)._tag === \"Empty\") {\n    return oldValue\n  }\n  let readonlyArray = oldValue.slice()\n  let patches: Array<Differ.Differ.ReadonlyArray.Patch<Value, Patch>> = Arr.of(self)\n  while (Arr.isNonEmptyArray(patches)) {\n    const head: Instruction = Arr.headNonEmpty(patches) as Instruction\n    const tail = Arr.tailNonEmpty(patches)\n    switch (head._tag) {\n      case \"Empty\": {\n        patches = tail\n        break\n      }\n      case \"AndThen\": {\n        tail.unshift(head.first, head.second)\n        patches = tail\n        break\n      }\n      case \"Append\": {\n        for (const value of head.values) {\n          readonlyArray.push(value)\n        }\n        patches = tail\n        break\n      }\n      case \"Slice\": {\n        readonlyArray = readonlyArray.slice(head.from, head.until)\n        patches = tail\n        break\n      }\n      case \"Update\": {\n        readonlyArray[head.index] = differ.patch(head.patch, readonlyArray[head.index]!)\n        patches = tail\n        break\n      }\n    }\n  }\n  return readonlyArray\n})\n", "import type { Chunk } from \"../Chunk.js\"\nimport type { Context } from \"../Context.js\"\nimport type * as Differ from \"../Differ.js\"\nimport type { Either } from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Dual from \"../Function.js\"\nimport { constant, identity } from \"../Function.js\"\nimport type { HashMap } from \"../HashMap.js\"\nimport type { HashSet } from \"../HashSet.js\"\nimport * as ChunkPatch from \"./differ/chunkPatch.js\"\nimport * as ContextPatch from \"./differ/contextPatch.js\"\nimport * as HashMapPatch from \"./differ/hashMapPatch.js\"\nimport * as HashSetPatch from \"./differ/hashSetPatch.js\"\nimport * as OrPatch from \"./differ/orPatch.js\"\nimport * as ReadonlyArrayPatch from \"./differ/readonlyArrayPatch.js\"\n\n/** @internal */\nexport const DifferTypeId: Differ.TypeId = Symbol.for(\"effect/Differ\") as Differ.TypeId\n\n/** @internal */\nexport const DifferProto = {\n  [DifferTypeId]: {\n    _P: identity,\n    _V: identity\n  }\n}\n\n/** @internal */\nexport const make = <Value, Patch>(\n  params: {\n    readonly empty: Patch\n    readonly diff: (oldValue: Value, newValue: Value) => Patch\n    readonly combine: (first: Patch, second: Patch) => Patch\n    readonly patch: (patch: Patch, oldValue: Value) => Value\n  }\n): Differ.Differ<Value, Patch> => {\n  const differ = Object.create(DifferProto)\n  differ.empty = params.empty\n  differ.diff = params.diff\n  differ.combine = params.combine\n  differ.patch = params.patch\n  return differ\n}\n\n/** @internal */\nexport const environment = <A>(): Differ.Differ<Context<A>, Differ.Differ.Context.Patch<A, A>> =>\n  make({\n    empty: ContextPatch.empty(),\n    combine: (first, second) => ContextPatch.combine(second)(first),\n    diff: (oldValue, newValue) => ContextPatch.diff(oldValue, newValue),\n    patch: (patch, oldValue) => ContextPatch.patch(oldValue)(patch)\n  })\n\n/** @internal */\nexport const chunk = <Value, Patch>(\n  differ: Differ.Differ<Value, Patch>\n): Differ.Differ<Chunk<Value>, Differ.Differ.Chunk.Patch<Value, Patch>> =>\n  make({\n    empty: ChunkPatch.empty(),\n    combine: (first, second) => ChunkPatch.combine(second)(first),\n    diff: (oldValue, newValue) => ChunkPatch.diff({ oldValue, newValue, differ }),\n    patch: (patch, oldValue) => ChunkPatch.patch(oldValue, differ)(patch)\n  })\n\n/** @internal */\nexport const hashMap = <Key, Value, Patch>(\n  differ: Differ.Differ<Value, Patch>\n): Differ.Differ<HashMap<Key, Value>, Differ.Differ.HashMap.Patch<Key, Value, Patch>> =>\n  make({\n    empty: HashMapPatch.empty(),\n    combine: (first, second) => HashMapPatch.combine(second)(first),\n    diff: (oldValue, newValue) => HashMapPatch.diff({ oldValue, newValue, differ }),\n    patch: (patch, oldValue) => HashMapPatch.patch(oldValue, differ)(patch)\n  })\n\n/** @internal */\nexport const hashSet = <Value>(): Differ.Differ<HashSet<Value>, Differ.Differ.HashSet.Patch<Value>> =>\n  make({\n    empty: HashSetPatch.empty(),\n    combine: (first, second) => HashSetPatch.combine(second)(first),\n    diff: (oldValue, newValue) => HashSetPatch.diff(oldValue, newValue),\n    patch: (patch, oldValue) => HashSetPatch.patch(oldValue)(patch)\n  })\n\n/** @internal */\nexport const orElseEither = Dual.dual<\n  <Value2, Patch2>(that: Differ.Differ<Value2, Patch2>) => <Value, Patch>(\n    self: Differ.Differ<Value, Patch>\n  ) => Differ.Differ<Either<Value2, Value>, Differ.Differ.Or.Patch<Value, Value2, Patch, Patch2>>,\n  <Value, Patch, Value2, Patch2>(\n    self: Differ.Differ<Value, Patch>,\n    that: Differ.Differ<Value2, Patch2>\n  ) => Differ.Differ<Either<Value2, Value>, Differ.Differ.Or.Patch<Value, Value2, Patch, Patch2>>\n>(2, (self, that) =>\n  make({\n    empty: OrPatch.empty(),\n    combine: (first, second) => OrPatch.combine(first, second),\n    diff: (oldValue, newValue) =>\n      OrPatch.diff({\n        oldValue,\n        newValue,\n        left: self,\n        right: that\n      }),\n    patch: (patch, oldValue) =>\n      OrPatch.patch(patch, {\n        oldValue,\n        left: self,\n        right: that\n      })\n  }))\n\n/** @internal */\nexport const readonlyArray = <Value, Patch>(\n  differ: Differ.Differ<Value, Patch>\n): Differ.Differ<ReadonlyArray<Value>, Differ.Differ.ReadonlyArray.Patch<Value, Patch>> =>\n  make({\n    empty: ReadonlyArrayPatch.empty(),\n    combine: (first, second) => ReadonlyArrayPatch.combine(first, second),\n    diff: (oldValue, newValue) => ReadonlyArrayPatch.diff({ oldValue, newValue, differ }),\n    patch: (patch, oldValue) => ReadonlyArrayPatch.patch(patch, oldValue, differ)\n  })\n\n/** @internal */\nexport const transform = Dual.dual<\n  <Value, Value2>(\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ) => <Patch>(self: Differ.Differ<Value, Patch>) => Differ.Differ<Value2, Patch>,\n  <Value, Patch, Value2>(\n    self: Differ.Differ<Value, Patch>,\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ) => Differ.Differ<Value2, Patch>\n>(2, (self, { toNew, toOld }) =>\n  make({\n    empty: self.empty,\n    combine: (first, second) => self.combine(first, second),\n    diff: (oldValue, newValue) => self.diff(toOld(oldValue), toOld(newValue)),\n    patch: (patch, oldValue) => toNew(self.patch(patch, toOld(oldValue)))\n  }))\n\n/** @internal */\nexport const update = <A>(): Differ.Differ<A, (a: A) => A> => updateWith((_, a) => a)\n\n/** @internal */\nexport const updateWith = <A>(f: (x: A, y: A) => A): Differ.Differ<A, (a: A) => A> =>\n  make({\n    empty: identity,\n    combine: (first, second) => {\n      if (first === identity) {\n        return second\n      }\n      if (second === identity) {\n        return first\n      }\n      return (a) => second(first(a))\n    },\n    diff: (oldValue, newValue) => {\n      if (Equal.equals(oldValue, newValue)) {\n        return identity\n      }\n      return constant(newValue)\n    },\n    patch: (patch, oldValue) => f(oldValue, patch(oldValue))\n  })\n\n/** @internal */\nexport const zip = Dual.dual<\n  <Value2, Patch2>(that: Differ.Differ<Value2, Patch2>) => <Value, Patch>(\n    self: Differ.Differ<Value, Patch>\n  ) => Differ.Differ<readonly [Value, Value2], readonly [Patch, Patch2]>,\n  <Value, Patch, Value2, Patch2>(\n    self: Differ.Differ<Value, Patch>,\n    that: Differ.Differ<Value2, Patch2>\n  ) => Differ.Differ<readonly [Value, Value2], readonly [Patch, Patch2]>\n>(2, (self, that) =>\n  make({\n    empty: [self.empty, that.empty] as const,\n    combine: (first, second) => [\n      self.combine(first[0], second[0]),\n      that.combine(first[1], second[1])\n    ],\n    diff: (oldValue, newValue) => [\n      self.diff(oldValue[0], newValue[0]),\n      that.diff(oldValue[1], newValue[1])\n    ],\n    patch: (patch, oldValue) => [\n      self.patch(patch[0], oldValue[0]),\n      that.patch(patch[1], oldValue[1])\n    ]\n  }))\n", "import { dual } from \"../Function.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport type * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\n\n/** @internal */\nconst BIT_MASK = 0xff\n\n/** @internal */\nconst BIT_SHIFT = 0x08\n\n/** @internal */\nexport const active = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): number => patch & BIT_MASK\n\n/** @internal */\nexport const enabled = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): number => (patch >> BIT_SHIFT) & BIT_MASK\n\n/** @internal */\nexport const make = (active: number, enabled: number): RuntimeFlagsPatch.RuntimeFlagsPatch =>\n  ((active & BIT_MASK) + (((enabled & active) & BIT_MASK) << BIT_SHIFT)) as RuntimeFlagsPatch.RuntimeFlagsPatch\n\n/** @internal */\nexport const empty = make(0, 0)\n\n/** @internal */\nexport const enable = (flag: RuntimeFlags.RuntimeFlag): RuntimeFlagsPatch.RuntimeFlagsPatch => make(flag, flag)\n\n/** @internal */\nexport const disable = (flag: RuntimeFlags.RuntimeFlag): RuntimeFlagsPatch.RuntimeFlagsPatch => make(flag, 0)\n\n/** @internal */\nexport const isEmpty = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): boolean => patch === 0\n\n/** @internal */\nexport const isActive = dual<\n  (flag: RuntimeFlagsPatch.RuntimeFlagsPatch) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean\n>(2, (self, flag) => (active(self) & flag) !== 0)\n\n/** @internal */\nexport const isEnabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => (enabled(self) & flag) !== 0)\n\n/** @internal */\nexport const isDisabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => ((active(self) & flag) !== 0) && ((enabled(self) & flag) === 0))\n\n/** @internal */\nexport const exclude = dual<\n  (\n    flag: RuntimeFlags.RuntimeFlag\n  ) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, flag) => make(active(self) & ~flag, enabled(self)))\n\n/** @internal */\nexport const both = dual<\n  (\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => make(active(self) | active(that), enabled(self) & enabled(that)))\n\n/** @internal */\nexport const either = dual<\n  (\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => make(active(self) | active(that), enabled(self) | enabled(that)))\n\n/** @internal */\nexport const andThen = dual<\n  (\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => (self | that) as RuntimeFlagsPatch.RuntimeFlagsPatch)\n\n/** @internal */\nexport const inverse = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): RuntimeFlagsPatch.RuntimeFlagsPatch =>\n  make(enabled(patch), invert(active(patch)))\n\n/** @internal */\nexport const invert = (n: number): number => (~n >>> 0) & BIT_MASK\n", "import type * as Differ from \"../Differ.js\"\nimport { dual } from \"../Function.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport type * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport * as internalDiffer from \"./differ.js\"\nimport * as runtimeFlagsPatch from \"./runtimeFlagsPatch.js\"\n\n/** @internal */\nexport const None: RuntimeFlags.RuntimeFlag = 0 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const Interruption: RuntimeFlags.RuntimeFlag = 1 << 0 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const OpSupervision: RuntimeFlags.RuntimeFlag = 1 << 1 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const RuntimeMetrics: RuntimeFlags.RuntimeFlag = 1 << 2 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const WindDown: RuntimeFlags.RuntimeFlag = 1 << 4 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const CooperativeYielding: RuntimeFlags.RuntimeFlag = 1 << 5 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const allFlags: ReadonlyArray<RuntimeFlags.RuntimeFlag> = [\n  None,\n  Interruption,\n  OpSupervision,\n  RuntimeMetrics,\n  WindDown,\n  CooperativeYielding\n]\n\nconst print = (flag: RuntimeFlags.RuntimeFlag) => {\n  switch (flag) {\n    case CooperativeYielding: {\n      return \"CooperativeYielding\"\n    }\n    case WindDown: {\n      return \"WindDown\"\n    }\n    case RuntimeMetrics: {\n      return \"RuntimeMetrics\"\n    }\n    case OpSupervision: {\n      return \"OpSupervision\"\n    }\n    case Interruption: {\n      return \"Interruption\"\n    }\n    case None: {\n      return \"None\"\n    }\n  }\n}\n\n/** @internal */\nexport const cooperativeYielding = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, CooperativeYielding)\n\n/** @internal */\nexport const disable = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => RuntimeFlags.RuntimeFlags\n>(2, (self, flag) => (self & ~flag) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const disableAll = dual<\n  (flags: RuntimeFlags.RuntimeFlags) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags\n>(2, (self, flags) => (self & ~flags) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const enable = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => RuntimeFlags.RuntimeFlags\n>(2, (self, flag) => (self | flag) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const enableAll = dual<\n  (flags: RuntimeFlags.RuntimeFlags) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags\n>(2, (self, flags) => (self | flags) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const interruptible = (self: RuntimeFlags.RuntimeFlags): boolean => interruption(self) && !windDown(self)\n\n/** @internal */\nexport const interruption = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, Interruption)\n\n/** @internal */\nexport const isDisabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => boolean,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => !isEnabled(self, flag))\n\n/** @internal */\nexport const isEnabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => boolean,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => (self & flag) !== 0)\n\n/** @internal */\nexport const make = (...flags: ReadonlyArray<RuntimeFlags.RuntimeFlag>): RuntimeFlags.RuntimeFlags =>\n  flags.reduce((a, b) => a | b, 0) as RuntimeFlags.RuntimeFlags\n\n/** @internal */\nexport const none: RuntimeFlags.RuntimeFlags = make(None)\n\n/** @internal */\nexport const opSupervision = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, OpSupervision)\n\n/** @internal */\nexport const render = (self: RuntimeFlags.RuntimeFlags): string => {\n  const active: Array<string> = []\n  allFlags.forEach((flag) => {\n    if (isEnabled(self, flag)) {\n      active.push(`${print(flag)}`)\n    }\n  })\n  return `RuntimeFlags(${active.join(\", \")})`\n}\n\n/** @internal */\nexport const runtimeMetrics = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, RuntimeMetrics)\n\n/** @internal */\nexport const toSet = (self: RuntimeFlags.RuntimeFlags): ReadonlySet<RuntimeFlags.RuntimeFlag> =>\n  new Set(allFlags.filter((flag) => isEnabled(self, flag)))\n\nexport const windDown = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, WindDown)\n\n// circular with RuntimeFlagsPatch\n\n/** @internal */\nexport const enabledSet = (self: RuntimeFlagsPatch.RuntimeFlagsPatch): ReadonlySet<RuntimeFlags.RuntimeFlag> =>\n  toSet((runtimeFlagsPatch.active(self) & runtimeFlagsPatch.enabled(self)) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const disabledSet = (self: RuntimeFlagsPatch.RuntimeFlagsPatch): ReadonlySet<RuntimeFlags.RuntimeFlag> =>\n  toSet((runtimeFlagsPatch.active(self) & ~runtimeFlagsPatch.enabled(self)) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const diff = dual<\n  (that: RuntimeFlags.RuntimeFlags) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (self: RuntimeFlags.RuntimeFlags, that: RuntimeFlags.RuntimeFlags) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => runtimeFlagsPatch.make(self ^ that, that))\n\n/** @internal */\nexport const patch = dual<\n  (patch: RuntimeFlagsPatch.RuntimeFlagsPatch) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, patch: RuntimeFlagsPatch.RuntimeFlagsPatch) => RuntimeFlags.RuntimeFlags\n>(2, (self, patch) =>\n  (\n    (self & (runtimeFlagsPatch.invert(runtimeFlagsPatch.active(patch)) | runtimeFlagsPatch.enabled(patch))) |\n    (runtimeFlagsPatch.active(patch) & runtimeFlagsPatch.enabled(patch))\n  ) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const renderPatch = (self: RuntimeFlagsPatch.RuntimeFlagsPatch): string => {\n  const enabled = Array.from(enabledSet(self))\n    .map((flag) => print(flag))\n    .join(\", \")\n  const disabled = Array.from(disabledSet(self))\n    .map((flag) => print(flag))\n    .join(\", \")\n  return `RuntimeFlagsPatch(enabled = (${enabled}), disabled = (${disabled}))`\n}\n\n/** @internal */\nexport const differ: Differ.Differ<RuntimeFlags.RuntimeFlags, RuntimeFlagsPatch.RuntimeFlagsPatch> = internalDiffer\n  .make({\n    empty: runtimeFlagsPatch.empty,\n    diff: (oldValue, newValue) => diff(oldValue, newValue),\n    combine: (first, second) => runtimeFlagsPatch.andThen(second)(first),\n    patch: (_patch, oldValue) => patch(oldValue, _patch)\n  })\n", "/**\n * @since 2.0.0\n */\nimport * as runtimeFlags from \"./internal/runtimeFlags.js\"\nimport * as internal from \"./internal/runtimeFlagsPatch.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type RuntimeFlagsPatch = number & {\n  readonly RuntimeFlagsPatch: unique symbol\n}\n\n/**\n * The empty `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: RuntimeFlagsPatch = internal.empty\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (active: number, enabled: number) => RuntimeFlagsPatch = internal.make\n\n/**\n * Creates a `RuntimeFlagsPatch` describing enabling the provided `RuntimeFlag`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const enable: (flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch = internal.enable\n\n/**\n * Creates a `RuntimeFlagsPatch` describing disabling the provided `RuntimeFlag`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const disable: (flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch = internal.disable\n\n/**\n * Returns `true` if the specified `RuntimeFlagsPatch` is empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: (patch: RuntimeFlagsPatch) => boolean = internal.isEmpty\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as active.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isActive: {\n  (flag: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => boolean\n  (self: RuntimeFlagsPatch, flag: RuntimeFlagsPatch): boolean\n} = internal.isActive\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as enabled.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEnabled: {\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => boolean\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): boolean\n} = internal.isEnabled\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as disabled.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isDisabled: {\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => boolean\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): boolean\n} = internal.isDisabled\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` includes the specified\n * `RuntimeFlag`, `false` otherwise.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const includes: {\n  (flag: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => boolean\n  (self: RuntimeFlagsPatch, flag: RuntimeFlagsPatch): boolean\n} = internal.isActive\n\n/**\n * Creates a `RuntimeFlagsPatch` describing the application of the `self` patch,\n * followed by `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const andThen: {\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.andThen\n\n/**\n * Creates a `RuntimeFlagsPatch` describing application of both the `self` patch\n * and `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const both: {\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.both\n\n/**\n * Creates a `RuntimeFlagsPatch` describing application of either the `self`\n * patch or `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const either: {\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.either\n\n/**\n * Creates a `RuntimeFlagsPatch` which describes exclusion of the specified\n * `RuntimeFlag` from the set of `RuntimeFlags`.\n *\n * @category utils\n * @since 2.0.0\n */\nexport const exclude: {\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): RuntimeFlagsPatch\n} = internal.exclude\n\n/**\n * Creates a `RuntimeFlagsPatch` which describes the inverse of the patch\n * specified by the provided `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const inverse: (patch: RuntimeFlagsPatch) => RuntimeFlagsPatch = internal.inverse\n\n/**\n * Returns a `ReadonlySet<number>` containing the `RuntimeFlags` described as\n * enabled by the specified `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const enabledSet: (self: RuntimeFlagsPatch) => ReadonlySet<RuntimeFlags.RuntimeFlag> = runtimeFlags.enabledSet\n\n/**\n * Returns a `ReadonlySet<number>` containing the `RuntimeFlags` described as\n * disabled by the specified `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const disabledSet: (self: RuntimeFlagsPatch) => ReadonlySet<RuntimeFlags.RuntimeFlag> = runtimeFlags.disabledSet\n\n/**\n * Renders the provided `RuntimeFlagsPatch` to a string.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const render: (self: RuntimeFlagsPatch) => string = runtimeFlags.renderPatch\n", "import * as Chunk from \"../Chunk.js\"\nimport type * as Deferred from \"../Deferred.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type { FiberId } from \"../FiberId.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as List from \"../List.js\"\nimport * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as RequestBlock from \"../RequestBlock.js\"\nimport type * as RequestResolver from \"../RequestResolver.js\"\n\n/** @internal */\nexport const empty: RequestBlock.RequestBlock = {\n  _tag: \"Empty\"\n}\n\n/**\n * Combines this collection of blocked requests with the specified collection\n * of blocked requests, in parallel.\n *\n * @internal\n */\nexport const par = (\n  self: RequestBlock.RequestBlock,\n  that: RequestBlock.RequestBlock\n): RequestBlock.RequestBlock => ({\n  _tag: \"Par\",\n  left: self,\n  right: that\n})\n\n/**\n * Combines this collection of blocked requests with the specified collection\n * of blocked requests, in sequence.\n *\n * @internal\n */\nexport const seq = (\n  self: RequestBlock.RequestBlock,\n  that: RequestBlock.RequestBlock\n): RequestBlock.RequestBlock => ({\n  _tag: \"Seq\",\n  left: self,\n  right: that\n})\n\n/**\n * Constructs a collection of blocked requests from the specified blocked\n * request and data source.\n *\n * @internal\n */\nexport const single = <A>(\n  dataSource: RequestResolver.RequestResolver<A>,\n  blockedRequest: Request.Entry<A>\n): RequestBlock.RequestBlock => ({\n  _tag: \"Single\",\n  dataSource: dataSource as any,\n  blockedRequest\n})\n\n/** @internal */\nexport const MapRequestResolversReducer = <A>(\n  f: (dataSource: RequestResolver.RequestResolver<A>) => RequestResolver.RequestResolver<A>\n): RequestBlock.RequestBlock.Reducer<RequestBlock.RequestBlock> => ({\n  emptyCase: () => empty,\n  parCase: (left, right) => par(left, right),\n  seqCase: (left, right) => seq(left, right),\n  singleCase: (dataSource, blockedRequest) => single(f(dataSource), blockedRequest as any)\n})\n\ntype BlockedRequestsCase = ParCase | SeqCase\n\ninterface ParCase {\n  readonly _tag: \"ParCase\"\n}\n\ninterface SeqCase {\n  readonly _tag: \"SeqCase\"\n}\n\n/**\n * Transforms all data sources with the specified data source aspect, which\n * can change the environment type of data sources but must preserve the\n * request type of each data source.\n *\n * @internal\n */\nexport const mapRequestResolvers = <A>(\n  self: RequestBlock.RequestBlock,\n  f: (dataSource: RequestResolver.RequestResolver<A>) => RequestResolver.RequestResolver<A>\n): RequestBlock.RequestBlock => reduce(self, MapRequestResolversReducer(f))\n\n/**\n * Folds over the cases of this collection of blocked requests with the\n * specified functions.\n *\n * @internal\n */\nexport const reduce = <Z>(\n  self: RequestBlock.RequestBlock,\n  reducer: RequestBlock.RequestBlock.Reducer<Z>\n): Z => {\n  let input: List.List<RequestBlock.RequestBlock> = List.of(self)\n  let output = List.empty<Either.Either<Z, BlockedRequestsCase>>()\n  while (List.isCons(input)) {\n    const current: RequestBlock.RequestBlock = input.head\n    switch (current._tag) {\n      case \"Empty\": {\n        output = List.cons(Either.right(reducer.emptyCase()), output)\n        input = input.tail\n        break\n      }\n      case \"Par\": {\n        output = List.cons(Either.left({ _tag: \"ParCase\" }), output)\n        input = List.cons(current.left, List.cons(current.right, input.tail))\n        break\n      }\n      case \"Seq\": {\n        output = List.cons(Either.left({ _tag: \"SeqCase\" }), output)\n        input = List.cons(current.left, List.cons(current.right, input.tail))\n        break\n      }\n      case \"Single\": {\n        const result = reducer.singleCase(current.dataSource, current.blockedRequest)\n        output = List.cons(Either.right(result), output)\n        input = input.tail\n        break\n      }\n    }\n  }\n  const result = List.reduce(output, List.empty<Z>(), (acc, current) => {\n    switch (current._tag) {\n      case \"Left\": {\n        const left = List.unsafeHead(acc)\n        const right = List.unsafeHead(List.unsafeTail(acc))\n        const tail = List.unsafeTail(List.unsafeTail(acc))\n        switch (current.left._tag) {\n          case \"ParCase\": {\n            return List.cons(reducer.parCase(left, right), tail)\n          }\n          case \"SeqCase\": {\n            return List.cons(reducer.seqCase(left, right), tail)\n          }\n        }\n      }\n      case \"Right\": {\n        return List.cons(current.right, acc)\n      }\n    }\n  })\n  if (List.isNil(result)) {\n    throw new Error(\n      \"BUG: BlockedRequests.reduce - please report an issue at https://github.com/Effect-TS/effect/issues\"\n    )\n  }\n  return result.head\n}\n\n/**\n * Flattens a collection of blocked requests into a collection of pipelined\n * and batched requests that can be submitted for execution.\n *\n * @internal\n */\nexport const flatten = (\n  self: RequestBlock.RequestBlock\n): List.List<SequentialCollection> => {\n  let current = List.of(self)\n  let updated = List.empty<SequentialCollection>()\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    const [parallel, sequential] = List.reduce(\n      current,\n      [parallelCollectionEmpty(), List.empty<RequestBlock.RequestBlock>()] as const,\n      ([parallel, sequential], blockedRequest) => {\n        const [par, seq] = step(blockedRequest)\n        return [\n          parallelCollectionCombine(parallel, par),\n          List.appendAll(sequential, seq)\n        ]\n      }\n    )\n    updated = merge(updated, parallel)\n    if (List.isNil(sequential)) {\n      return List.reverse(updated)\n    }\n    current = sequential\n  }\n  throw new Error(\n    \"BUG: BlockedRequests.flatten - please report an issue at https://github.com/Effect-TS/effect/issues\"\n  )\n}\n\n/**\n * Takes one step in evaluating a collection of blocked requests, returning a\n * collection of blocked requests that can be performed in parallel and a list\n * of blocked requests that must be performed sequentially after those\n * requests.\n */\nconst step = (\n  requests: RequestBlock.RequestBlock\n): [ParallelCollection, List.List<RequestBlock.RequestBlock>] => {\n  let current: RequestBlock.RequestBlock = requests\n  let parallel = parallelCollectionEmpty()\n  let stack = List.empty<RequestBlock.RequestBlock>()\n  let sequential = List.empty<RequestBlock.RequestBlock>()\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    switch (current._tag) {\n      case \"Empty\": {\n        if (List.isNil(stack)) {\n          return [parallel, sequential]\n        }\n        current = stack.head\n        stack = stack.tail\n        break\n      }\n      case \"Par\": {\n        stack = List.cons(current.right, stack)\n        current = current.left\n        break\n      }\n      case \"Seq\": {\n        const left = current.left\n        const right = current.right\n        switch (left._tag) {\n          case \"Empty\": {\n            current = right\n            break\n          }\n          case \"Par\": {\n            const l = left.left\n            const r = left.right\n            current = par(seq(l, right), seq(r, right))\n            break\n          }\n          case \"Seq\": {\n            const l = left.left\n            const r = left.right\n            current = seq(l, seq(r, right))\n            break\n          }\n          case \"Single\": {\n            current = left\n            sequential = List.cons(right, sequential)\n            break\n          }\n        }\n        break\n      }\n      case \"Single\": {\n        parallel = parallelCollectionAdd(\n          parallel,\n          current\n        )\n        if (List.isNil(stack)) {\n          return [parallel, sequential]\n        }\n        current = stack.head\n        stack = stack.tail\n        break\n      }\n    }\n  }\n  throw new Error(\n    \"BUG: BlockedRequests.step - please report an issue at https://github.com/Effect-TS/effect/issues\"\n  )\n}\n\n/**\n * Merges a collection of requests that must be executed sequentially with a\n * collection of requests that can be executed in parallel. If the collections\n * are both from the same single data source then the requests can be\n * pipelined while preserving ordering guarantees.\n */\nconst merge = (\n  sequential: List.List<SequentialCollection>,\n  parallel: ParallelCollection\n): List.List<SequentialCollection> => {\n  if (List.isNil(sequential)) {\n    return List.of(parallelCollectionToSequentialCollection(parallel))\n  }\n  if (parallelCollectionIsEmpty(parallel)) {\n    return sequential\n  }\n  const seqHeadKeys = sequentialCollectionKeys(sequential.head)\n  const parKeys = parallelCollectionKeys(parallel)\n  if (\n    seqHeadKeys.length === 1 &&\n    parKeys.length === 1 &&\n    Equal.equals(seqHeadKeys[0], parKeys[0])\n  ) {\n    return List.cons(\n      sequentialCollectionCombine(\n        sequential.head,\n        parallelCollectionToSequentialCollection(parallel)\n      ),\n      sequential.tail\n    )\n  }\n  return List.cons(parallelCollectionToSequentialCollection(parallel), sequential)\n}\n\n//\n// circular\n//\n\n/** @internal */\nexport const EntryTypeId: Request.EntryTypeId = Symbol.for(\n  \"effect/RequestBlock/Entry\"\n) as Request.EntryTypeId\n\n/** @internal */\nclass EntryImpl<A extends Request.Request<any, any>> implements Request.Entry<A> {\n  readonly [EntryTypeId] = blockedRequestVariance\n  constructor(\n    readonly request: A,\n    readonly result: Deferred.Deferred<Request.Request.Success<A>, Request.Request.Error<A>>,\n    readonly listeners: Request.Listeners,\n    readonly ownerId: FiberId,\n    readonly state: {\n      completed: boolean\n    }\n  ) {}\n}\n\nconst blockedRequestVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\n/** @internal */\nexport const isEntry = (u: unknown): u is Request.Entry<unknown> => hasProperty(u, EntryTypeId)\n\n/** @internal */\nexport const makeEntry = <A extends Request.Request<any, any>>(\n  options: {\n    readonly request: A\n    readonly result: Deferred.Deferred<Request.Request.Success<A>, Request.Request.Error<A>>\n    readonly listeners: Request.Listeners\n    readonly ownerId: FiberId\n    readonly state: { completed: boolean }\n  }\n): Request.Entry<A> => new EntryImpl(options.request, options.result, options.listeners, options.ownerId, options.state)\n\n/** @internal */\nexport const RequestBlockParallelTypeId = Symbol.for(\n  \"effect/RequestBlock/RequestBlockParallel\"\n)\n\nconst parallelVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nclass ParallelImpl implements ParallelCollection {\n  readonly [RequestBlockParallelTypeId] = parallelVariance\n  constructor(\n    readonly map: HashMap.HashMap<\n      RequestResolver.RequestResolver<unknown, unknown>,\n      Chunk.Chunk<Request.Entry<unknown>>\n    >\n  ) {}\n}\n\n/** @internal */\nexport const parallelCollectionEmpty = (): ParallelCollection => new ParallelImpl(HashMap.empty())\n\n/** @internal */\nexport const parallelCollectionMake = <A>(\n  dataSource: RequestResolver.RequestResolver<A>,\n  blockedRequest: Request.Entry<A>\n): ParallelCollection => new ParallelImpl(HashMap.make([dataSource, Chunk.of(blockedRequest)]) as any)\n\n/** @internal */\nexport const parallelCollectionAdd = (\n  self: ParallelCollection,\n  blockedRequest: RequestBlock.Single\n): ParallelCollection =>\n  new ParallelImpl(HashMap.modifyAt(\n    self.map,\n    blockedRequest.dataSource,\n    (_) =>\n      Option.orElseSome(\n        Option.map(_, Chunk.append(blockedRequest.blockedRequest)),\n        () => Chunk.of(blockedRequest.blockedRequest)\n      )\n  ))\n\n/** @internal */\nexport const parallelCollectionCombine = (\n  self: ParallelCollection,\n  that: ParallelCollection\n): ParallelCollection =>\n  new ParallelImpl(HashMap.reduce(self.map, that.map, (map, value, key) =>\n    HashMap.set(\n      map,\n      key,\n      Option.match(HashMap.get(map, key), {\n        onNone: () => value,\n        onSome: (other) => Chunk.appendAll(value, other)\n      })\n    )))\n\n/** @internal */\nexport const parallelCollectionIsEmpty = (self: ParallelCollection): boolean => HashMap.isEmpty(self.map)\n\n/** @internal */\nexport const parallelCollectionKeys = (\n  self: ParallelCollection\n): Array<RequestResolver.RequestResolver<unknown>> => Array.from(HashMap.keys(self.map)) as any\n\n/** @internal */\nexport const parallelCollectionToSequentialCollection = (\n  self: ParallelCollection\n): SequentialCollection => sequentialCollectionMake(HashMap.map(self.map, (x) => Chunk.of(x)) as any)\n\n// TODO\n// /** @internal */\n// export const parallelCollectionToChunk = <R>(\n//   self: ParallelCollection<R>\n// ): Array<[RequestResolver.RequestResolver<unknown, R>, Array<Request.Entry<unknown>>]> => Array.from(self.map) as any\n\n/** @internal */\nexport const SequentialCollectionTypeId = Symbol.for(\n  \"effect/RequestBlock/RequestBlockSequential\"\n)\n\nconst sequentialVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nclass SequentialImpl implements SequentialCollection {\n  readonly [SequentialCollectionTypeId] = sequentialVariance\n  constructor(\n    readonly map: HashMap.HashMap<\n      RequestResolver.RequestResolver<unknown, unknown>,\n      Chunk.Chunk<Chunk.Chunk<Request.Entry<unknown>>>\n    >\n  ) {}\n}\n\n/** @internal */\nexport const sequentialCollectionMake = <A, R>(\n  map: HashMap.HashMap<\n    RequestResolver.RequestResolver<A, R>,\n    Chunk.Chunk<Chunk.Chunk<Request.Entry<A>>>\n  >\n): SequentialCollection => new SequentialImpl(map as any)\n\n/** @internal */\nexport const sequentialCollectionCombine = (\n  self: SequentialCollection,\n  that: SequentialCollection\n): SequentialCollection =>\n  new SequentialImpl(HashMap.reduce(that.map, self.map, (map, value, key) =>\n    HashMap.set(\n      map,\n      key,\n      Option.match(HashMap.get(map, key), {\n        onNone: () => Chunk.empty(),\n        onSome: (a) => Chunk.appendAll(a, value)\n      })\n    )))\n\n/** @internal */\nexport const sequentialCollectionIsEmpty = (self: SequentialCollection): boolean => HashMap.isEmpty(self.map)\n\n/** @internal */\nexport const sequentialCollectionKeys = (\n  self: SequentialCollection\n): Array<RequestResolver.RequestResolver<unknown>> => Array.from(HashMap.keys(self.map)) as any\n\n/** @internal */\nexport const sequentialCollectionToChunk = (\n  self: SequentialCollection\n): Array<[RequestResolver.RequestResolver<unknown>, Chunk.Chunk<Chunk.Chunk<Request.Entry<unknown>>>]> =>\n  Array.from(self.map) as any\n\n/** @internal */\nexport type RequestBlockParallelTypeId = typeof RequestBlockParallelTypeId\n\n/** @internal */\nexport interface ParallelCollection extends ParallelCollection.Variance {\n  readonly map: HashMap.HashMap<\n    RequestResolver.RequestResolver<unknown, unknown>,\n    Chunk.Chunk<Request.Entry<unknown>>\n  >\n}\n\n/** @internal */\nexport declare namespace ParallelCollection {\n  /** @internal */\n  export interface Variance {\n    readonly [RequestBlockParallelTypeId]: {}\n  }\n}\n\n/** @internal */\nexport type SequentialCollectionTypeId = typeof SequentialCollectionTypeId\n\n/** @internal */\nexport interface SequentialCollection extends SequentialCollection.Variance {\n  readonly map: HashMap.HashMap<\n    RequestResolver.RequestResolver<unknown, unknown>,\n    Chunk.Chunk<Chunk.Chunk<Request.Entry<unknown>>>\n  >\n}\n\n/** @internal */\nexport declare namespace SequentialCollection {\n  /** @internal */\n  export interface Variance {\n    readonly [SequentialCollectionTypeId]: {}\n  }\n}\n", "/** @internal */\nexport const OP_DIE = \"Die\" as const\n\n/** @internal */\nexport type OP_DIE = typeof OP_DIE\n\n/** @internal */\nexport const OP_EMPTY = \"Empty\" as const\n\n/** @internal */\nexport type OP_EMPTY = typeof OP_EMPTY\n\n/** @internal */\nexport const OP_FAIL = \"Fail\" as const\n\n/** @internal */\nexport type OP_FAIL = typeof OP_FAIL\n\n/** @internal */\nexport const OP_INTERRUPT = \"Interrupt\" as const\n\n/** @internal */\nexport type OP_INTERRUPT = typeof OP_INTERRUPT\n\n/** @internal */\nexport const OP_PARALLEL = \"Parallel\" as const\n\n/** @internal */\nexport type OP_PARALLEL = typeof OP_PARALLEL\n\n/** @internal */\nexport const OP_SEQUENTIAL = \"Sequential\" as const\n\n/** @internal */\nexport type OP_SEQUENTIAL = typeof OP_SEQUENTIAL\n", "import * as Arr from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport { constFalse, constTrue, dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport { NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type { Predicate, Refinement } from \"../Predicate.js\"\nimport { hasProperty, isFunction } from \"../Predicate.js\"\nimport type { AnySpan, Span } from \"../Tracer.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport { getBugErrorMessage } from \"./errors.js\"\nimport * as OpCodes from \"./opCodes/cause.js\"\n\n// -----------------------------------------------------------------------------\n// Models\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst CauseSymbolKey = \"effect/Cause\"\n\n/** @internal */\nexport const CauseTypeId: Cause.CauseTypeId = Symbol.for(\n  CauseSymbolKey\n) as Cause.CauseTypeId\n\nconst variance = {\n  /* c8 ignore next */\n  _E: (_: never) => _\n}\n\n/** @internal */\nconst proto = {\n  [CauseTypeId]: variance,\n  [Hash.symbol](this: Cause.Cause<any>): number {\n    return pipe(\n      Hash.hash(CauseSymbolKey),\n      Hash.combine(Hash.hash(flattenCause(this))),\n      Hash.cached(this)\n    )\n  },\n  [Equal.symbol](this: Cause.Cause<any>, that: unknown): boolean {\n    return isCause(that) && causeEquals(this, that)\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  toJSON<E>(this: Cause.Cause<E>) {\n    switch (this._tag) {\n      case \"Empty\":\n        return { _id: \"Cause\", _tag: this._tag }\n      case \"Die\":\n        return { _id: \"Cause\", _tag: this._tag, defect: toJSON(this.defect) }\n      case \"Interrupt\":\n        return { _id: \"Cause\", _tag: this._tag, fiberId: this.fiberId.toJSON() }\n      case \"Fail\":\n        return { _id: \"Cause\", _tag: this._tag, failure: toJSON(this.error) }\n      case \"Sequential\":\n      case \"Parallel\":\n        return { _id: \"Cause\", _tag: this._tag, left: toJSON(this.left), right: toJSON(this.right) }\n    }\n  },\n  toString<E>(this: Cause.Cause<E>) {\n    return pretty(this)\n  },\n  [NodeInspectSymbol]<E>(this: Cause.Cause<E>) {\n    return this.toJSON()\n  }\n}\n\n// -----------------------------------------------------------------------------\n// Constructors\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const empty: Cause.Cause<never> = (() => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_EMPTY\n  return o\n})()\n\n/** @internal */\nexport const fail = <E>(error: E): Cause.Cause<E> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_FAIL\n  o.error = error\n  return o\n}\n\n/** @internal */\nexport const die = (defect: unknown): Cause.Cause<never> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_DIE\n  o.defect = defect\n  return o\n}\n\n/** @internal */\nexport const interrupt = (fiberId: FiberId.FiberId): Cause.Cause<never> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_INTERRUPT\n  o.fiberId = fiberId\n  return o\n}\n\n/** @internal */\nexport const parallel = <E, E2>(left: Cause.Cause<E>, right: Cause.Cause<E2>): Cause.Cause<E | E2> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_PARALLEL\n  o.left = left\n  o.right = right\n  return o\n}\n\n/** @internal */\nexport const sequential = <E, E2>(left: Cause.Cause<E>, right: Cause.Cause<E2>): Cause.Cause<E | E2> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_SEQUENTIAL\n  o.left = left\n  o.right = right\n  return o\n}\n\n// -----------------------------------------------------------------------------\n// Refinements\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const isCause = (u: unknown): u is Cause.Cause<never> => hasProperty(u, CauseTypeId)\n\n/** @internal */\nexport const isEmptyType = <E>(self: Cause.Cause<E>): self is Cause.Empty => self._tag === OpCodes.OP_EMPTY\n\n/** @internal */\nexport const isFailType = <E>(self: Cause.Cause<E>): self is Cause.Fail<E> => self._tag === OpCodes.OP_FAIL\n\n/** @internal */\nexport const isDieType = <E>(self: Cause.Cause<E>): self is Cause.Die => self._tag === OpCodes.OP_DIE\n\n/** @internal */\nexport const isInterruptType = <E>(self: Cause.Cause<E>): self is Cause.Interrupt => self._tag === OpCodes.OP_INTERRUPT\n\n/** @internal */\nexport const isSequentialType = <E>(self: Cause.Cause<E>): self is Cause.Sequential<E> =>\n  self._tag === OpCodes.OP_SEQUENTIAL\n\n/** @internal */\nexport const isParallelType = <E>(self: Cause.Cause<E>): self is Cause.Parallel<E> => self._tag === OpCodes.OP_PARALLEL\n\n// -----------------------------------------------------------------------------\n// Getters\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const size = <E>(self: Cause.Cause<E>): number => reduceWithContext(self, void 0, SizeCauseReducer)\n\n/** @internal */\nexport const isEmpty = <E>(self: Cause.Cause<E>): boolean => {\n  if (self._tag === OpCodes.OP_EMPTY) {\n    return true\n  }\n  return reduce(self, true, (acc, cause) => {\n    switch (cause._tag) {\n      case OpCodes.OP_EMPTY: {\n        return Option.some(acc)\n      }\n      case OpCodes.OP_DIE:\n      case OpCodes.OP_FAIL:\n      case OpCodes.OP_INTERRUPT: {\n        return Option.some(false)\n      }\n      default: {\n        return Option.none()\n      }\n    }\n  })\n}\n\n/** @internal */\nexport const isFailure = <E>(self: Cause.Cause<E>): boolean => Option.isSome(failureOption(self))\n\n/** @internal */\nexport const isDie = <E>(self: Cause.Cause<E>): boolean => Option.isSome(dieOption(self))\n\n/** @internal */\nexport const isInterrupted = <E>(self: Cause.Cause<E>): boolean => Option.isSome(interruptOption(self))\n\n/** @internal */\nexport const isInterruptedOnly = <E>(self: Cause.Cause<E>): boolean =>\n  reduceWithContext(undefined, IsInterruptedOnlyCauseReducer)(self)\n\n/** @internal */\nexport const failures = <E>(self: Cause.Cause<E>): Chunk.Chunk<E> =>\n  Chunk.reverse(\n    reduce<Chunk.Chunk<E>, E>(\n      self,\n      Chunk.empty<E>(),\n      (list, cause) =>\n        cause._tag === OpCodes.OP_FAIL ?\n          Option.some(pipe(list, Chunk.prepend(cause.error))) :\n          Option.none()\n    )\n  )\n\n/** @internal */\nexport const defects = <E>(self: Cause.Cause<E>): Chunk.Chunk<unknown> =>\n  Chunk.reverse(\n    reduce<Chunk.Chunk<unknown>, E>(\n      self,\n      Chunk.empty<unknown>(),\n      (list, cause) =>\n        cause._tag === OpCodes.OP_DIE ?\n          Option.some(pipe(list, Chunk.prepend(cause.defect))) :\n          Option.none()\n    )\n  )\n\n/** @internal */\nexport const interruptors = <E>(self: Cause.Cause<E>): HashSet.HashSet<FiberId.FiberId> =>\n  reduce(self, HashSet.empty<FiberId.FiberId>(), (set, cause) =>\n    cause._tag === OpCodes.OP_INTERRUPT ?\n      Option.some(pipe(set, HashSet.add(cause.fiberId))) :\n      Option.none())\n\n/** @internal */\nexport const failureOption = <E>(self: Cause.Cause<E>): Option.Option<E> =>\n  find<E, E>(self, (cause) =>\n    cause._tag === OpCodes.OP_FAIL ?\n      Option.some(cause.error) :\n      Option.none())\n\n/** @internal */\nexport const failureOrCause = <E>(self: Cause.Cause<E>): Either.Either<Cause.Cause<never>, E> => {\n  const option = failureOption(self)\n  switch (option._tag) {\n    case \"None\": {\n      // no `E` inside this `Cause`, so it can be safely cast to `never`\n      return Either.right(self as Cause.Cause<never>)\n    }\n    case \"Some\": {\n      return Either.left(option.value)\n    }\n  }\n}\n\n/** @internal */\nexport const dieOption = <E>(self: Cause.Cause<E>): Option.Option<unknown> =>\n  find(self, (cause) =>\n    cause._tag === OpCodes.OP_DIE ?\n      Option.some(cause.defect) :\n      Option.none())\n\n/** @internal */\nexport const flipCauseOption = <E>(self: Cause.Cause<Option.Option<E>>): Option.Option<Cause.Cause<E>> =>\n  match(self, {\n    onEmpty: Option.some(empty),\n    onFail: (failureOption) => pipe(failureOption, Option.map(fail)),\n    onDie: (defect) => Option.some(die(defect)),\n    onInterrupt: (fiberId) => Option.some(interrupt(fiberId)),\n    onSequential: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(sequential(left.value, right.value))\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      return Option.none()\n    },\n    onParallel: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(parallel(left.value, right.value))\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      return Option.none()\n    }\n  })\n\n/** @internal */\nexport const interruptOption = <E>(self: Cause.Cause<E>): Option.Option<FiberId.FiberId> =>\n  find(self, (cause) =>\n    cause._tag === OpCodes.OP_INTERRUPT ?\n      Option.some(cause.fiberId) :\n      Option.none())\n\n/** @internal */\nexport const keepDefects = <E>(self: Cause.Cause<E>): Option.Option<Cause.Cause<never>> =>\n  match<Option.Option<Cause.Cause<never>>, E>(self, {\n    onEmpty: Option.none(),\n    onFail: () => Option.none(),\n    onDie: (defect) => Option.some(die(defect)),\n    onInterrupt: () => Option.none(),\n    onSequential: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(sequential(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    },\n    onParallel: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(parallel(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    }\n  })\n\n/** @internal */\nexport const keepDefectsAndElectFailures = <E>(self: Cause.Cause<E>): Option.Option<Cause.Cause<never>> =>\n  match<Option.Option<Cause.Cause<never>>, E>(self, {\n    onEmpty: Option.none(),\n    onFail: (failure) => Option.some(die(failure)),\n    onDie: (defect) => Option.some(die(defect)),\n    onInterrupt: () => Option.none(),\n    onSequential: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(sequential(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    },\n    onParallel: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(parallel(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    }\n  })\n\n/** @internal */\nexport const linearize = <E>(self: Cause.Cause<E>): HashSet.HashSet<Cause.Cause<E>> =>\n  match(self, {\n    onEmpty: HashSet.empty(),\n    onFail: (error) => HashSet.make(fail(error)),\n    onDie: (defect) => HashSet.make(die(defect)),\n    onInterrupt: (fiberId) => HashSet.make(interrupt(fiberId)),\n    onSequential: (leftSet, rightSet) =>\n      pipe(\n        leftSet,\n        HashSet.flatMap((leftCause) =>\n          pipe(\n            rightSet,\n            HashSet.map((rightCause) => sequential(leftCause, rightCause))\n          )\n        )\n      ),\n    onParallel: (leftSet, rightSet) =>\n      pipe(\n        leftSet,\n        HashSet.flatMap((leftCause) =>\n          pipe(\n            rightSet,\n            HashSet.map((rightCause) => parallel(leftCause, rightCause))\n          )\n        )\n      )\n  })\n\n/** @internal */\nexport const stripFailures = <E>(self: Cause.Cause<E>): Cause.Cause<never> =>\n  match(self, {\n    onEmpty: empty,\n    onFail: () => empty,\n    onDie: (defect) => die(defect),\n    onInterrupt: (fiberId) => interrupt(fiberId),\n    onSequential: sequential,\n    onParallel: parallel\n  })\n\n/** @internal */\nexport const electFailures = <E>(self: Cause.Cause<E>): Cause.Cause<never> =>\n  match(self, {\n    onEmpty: empty,\n    onFail: (failure) => die(failure),\n    onDie: (defect) => die(defect),\n    onInterrupt: (fiberId) => interrupt(fiberId),\n    onSequential: (left, right) => sequential(left, right),\n    onParallel: (left, right) => parallel(left, right)\n  })\n\n/** @internal */\nexport const stripSomeDefects = dual<\n  (pf: (defect: unknown) => Option.Option<unknown>) => <E>(self: Cause.Cause<E>) => Option.Option<Cause.Cause<E>>,\n  <E>(self: Cause.Cause<E>, pf: (defect: unknown) => Option.Option<unknown>) => Option.Option<Cause.Cause<E>>\n>(2, <E>(self: Cause.Cause<E>, pf: (defect: unknown) => Option.Option<unknown>) =>\n  match(self, {\n    onEmpty: Option.some(empty),\n    onFail: (error) => Option.some(fail(error)),\n    onDie: (defect) => {\n      const option = pf(defect)\n      return Option.isSome(option) ? Option.none() : Option.some(die(defect))\n    },\n    onInterrupt: (fiberId) => Option.some(interrupt(fiberId)),\n    onSequential: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(sequential(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    },\n    onParallel: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(parallel(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    }\n  }))\n\n// -----------------------------------------------------------------------------\n// Mapping\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const as = dual<\n  <E2>(error: E2) => <E>(self: Cause.Cause<E>) => Cause.Cause<E2>,\n  <E, E2>(self: Cause.Cause<E>, error: E2) => Cause.Cause<E2>\n>(2, (self, error) => map(self, () => error))\n\n/** @internal */\nexport const map = dual<\n  <E, E2>(f: (e: E) => E2) => (self: Cause.Cause<E>) => Cause.Cause<E2>,\n  <E, E2>(self: Cause.Cause<E>, f: (e: E) => E2) => Cause.Cause<E2>\n>(2, (self, f) => flatMap(self, (e) => fail(f(e))))\n\n// -----------------------------------------------------------------------------\n// Sequencing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const flatMap = dual<\n  <E, E2>(f: (e: E) => Cause.Cause<E2>) => (self: Cause.Cause<E>) => Cause.Cause<E2>,\n  <E, E2>(self: Cause.Cause<E>, f: (e: E) => Cause.Cause<E2>) => Cause.Cause<E2>\n>(2, (self, f) =>\n  match(self, {\n    onEmpty: empty,\n    onFail: (error) => f(error),\n    onDie: (defect) => die(defect),\n    onInterrupt: (fiberId) => interrupt(fiberId),\n    onSequential: (left, right) => sequential(left, right),\n    onParallel: (left, right) => parallel(left, right)\n  }))\n\n/** @internal */\nexport const flatten = <E>(self: Cause.Cause<Cause.Cause<E>>): Cause.Cause<E> => flatMap(self, identity)\n\n/** @internal */\nexport const andThen: {\n  <E, E2>(f: (e: E) => Cause.Cause<E2>): (self: Cause.Cause<E>) => Cause.Cause<E2>\n  <E2>(f: Cause.Cause<E2>): <E>(self: Cause.Cause<E>) => Cause.Cause<E2>\n  <E, E2>(self: Cause.Cause<E>, f: (e: E) => Cause.Cause<E2>): Cause.Cause<E2>\n  <E, E2>(self: Cause.Cause<E>, f: Cause.Cause<E2>): Cause.Cause<E2>\n} = dual(\n  2,\n  <E, E2>(self: Cause.Cause<E>, f: ((e: E) => Cause.Cause<E2>) | Cause.Cause<E2>): Cause.Cause<E2> =>\n    isFunction(f) ? flatMap(self, f) : flatMap(self, () => f)\n)\n\n// -----------------------------------------------------------------------------\n// Equality\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const contains = dual<\n  <E2>(that: Cause.Cause<E2>) => <E>(self: Cause.Cause<E>) => boolean,\n  <E, E2>(self: Cause.Cause<E>, that: Cause.Cause<E2>) => boolean\n>(2, (self, that) => {\n  if (that._tag === OpCodes.OP_EMPTY || self === that) {\n    return true\n  }\n  return reduce(self, false, (accumulator, cause) => {\n    return Option.some(accumulator || causeEquals(cause, that))\n  })\n})\n\n/** @internal */\nconst causeEquals = (left: Cause.Cause<unknown>, right: Cause.Cause<unknown>): boolean => {\n  let leftStack: Chunk.Chunk<Cause.Cause<unknown>> = Chunk.of(left)\n  let rightStack: Chunk.Chunk<Cause.Cause<unknown>> = Chunk.of(right)\n  while (Chunk.isNonEmpty(leftStack) && Chunk.isNonEmpty(rightStack)) {\n    const [leftParallel, leftSequential] = pipe(\n      Chunk.headNonEmpty(leftStack),\n      reduce(\n        [HashSet.empty<unknown>(), Chunk.empty<Cause.Cause<unknown>>()] as const,\n        ([parallel, sequential], cause) => {\n          const [par, seq] = evaluateCause(cause)\n          return Option.some(\n            [\n              pipe(parallel, HashSet.union(par)),\n              pipe(sequential, Chunk.appendAll(seq))\n            ] as const\n          )\n        }\n      )\n    )\n    const [rightParallel, rightSequential] = pipe(\n      Chunk.headNonEmpty(rightStack),\n      reduce(\n        [HashSet.empty<unknown>(), Chunk.empty<Cause.Cause<unknown>>()] as const,\n        ([parallel, sequential], cause) => {\n          const [par, seq] = evaluateCause(cause)\n          return Option.some(\n            [\n              pipe(parallel, HashSet.union(par)),\n              pipe(sequential, Chunk.appendAll(seq))\n            ] as const\n          )\n        }\n      )\n    )\n    if (!Equal.equals(leftParallel, rightParallel)) {\n      return false\n    }\n    leftStack = leftSequential\n    rightStack = rightSequential\n  }\n  return true\n}\n\n// -----------------------------------------------------------------------------\n// Flattening\n// -----------------------------------------------------------------------------\n\n/**\n * Flattens a cause to a sequence of sets of causes, where each set represents\n * causes that fail in parallel and sequential sets represent causes that fail\n * after each other.\n *\n * @internal\n */\nconst flattenCause = (cause: Cause.Cause<unknown>): Chunk.Chunk<HashSet.HashSet<unknown>> => {\n  return flattenCauseLoop(Chunk.of(cause), Chunk.empty())\n}\n\n/** @internal */\nconst flattenCauseLoop = (\n  causes: Chunk.Chunk<Cause.Cause<unknown>>,\n  flattened: Chunk.Chunk<HashSet.HashSet<unknown>>\n): Chunk.Chunk<HashSet.HashSet<unknown>> => {\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    const [parallel, sequential] = pipe(\n      causes,\n      Arr.reduce(\n        [HashSet.empty<unknown>(), Chunk.empty<Cause.Cause<unknown>>()] as const,\n        ([parallel, sequential], cause) => {\n          const [par, seq] = evaluateCause(cause)\n          return [\n            pipe(parallel, HashSet.union(par)),\n            pipe(sequential, Chunk.appendAll(seq))\n          ]\n        }\n      )\n    )\n    const updated = HashSet.size(parallel) > 0 ?\n      pipe(flattened, Chunk.prepend(parallel)) :\n      flattened\n    if (Chunk.isEmpty(sequential)) {\n      return Chunk.reverse(updated)\n    }\n    causes = sequential\n    flattened = updated\n  }\n  throw new Error(getBugErrorMessage(\"Cause.flattenCauseLoop\"))\n}\n\n// -----------------------------------------------------------------------------\n// Finding\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const find = dual<\n  <E, Z>(pf: (cause: Cause.Cause<E>) => Option.Option<Z>) => (self: Cause.Cause<E>) => Option.Option<Z>,\n  <E, Z>(self: Cause.Cause<E>, pf: (cause: Cause.Cause<E>) => Option.Option<Z>) => Option.Option<Z>\n>(2, <E, Z>(self: Cause.Cause<E>, pf: (cause: Cause.Cause<E>) => Option.Option<Z>) => {\n  const stack: Array<Cause.Cause<E>> = [self]\n  while (stack.length > 0) {\n    const item = stack.pop()!\n    const option = pf(item)\n    switch (option._tag) {\n      case \"None\": {\n        switch (item._tag) {\n          case OpCodes.OP_SEQUENTIAL:\n          case OpCodes.OP_PARALLEL: {\n            stack.push(item.right)\n            stack.push(item.left)\n            break\n          }\n        }\n        break\n      }\n      case \"Some\": {\n        return option\n      }\n    }\n  }\n  return Option.none()\n})\n\n// -----------------------------------------------------------------------------\n// Filtering\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const filter: {\n  <E, EB extends E>(\n    refinement: Refinement<Cause.Cause<NoInfer<E>>, Cause.Cause<EB>>\n  ): (self: Cause.Cause<E>) => Cause.Cause<EB>\n  <E>(predicate: Predicate<Cause.Cause<NoInfer<E>>>): (self: Cause.Cause<E>) => Cause.Cause<E>\n  <E, EB extends E>(self: Cause.Cause<E>, refinement: Refinement<Cause.Cause<E>, Cause.Cause<EB>>): Cause.Cause<EB>\n  <E>(self: Cause.Cause<E>, predicate: Predicate<Cause.Cause<E>>): Cause.Cause<E>\n} = dual(\n  2,\n  <E>(self: Cause.Cause<E>, predicate: Predicate<Cause.Cause<E>>): Cause.Cause<E> =>\n    reduceWithContext(self, void 0, FilterCauseReducer(predicate))\n)\n\n// -----------------------------------------------------------------------------\n// Evaluation\n// -----------------------------------------------------------------------------\n\n/**\n * Takes one step in evaluating a cause, returning a set of causes that fail\n * in parallel and a list of causes that fail sequentially after those causes.\n *\n * @internal\n */\nconst evaluateCause = (\n  self: Cause.Cause<unknown>\n): [HashSet.HashSet<unknown>, Chunk.Chunk<Cause.Cause<unknown>>] => {\n  let cause: Cause.Cause<unknown> | undefined = self\n  const stack: Array<Cause.Cause<unknown>> = []\n  let _parallel = HashSet.empty<unknown>()\n  let _sequential = Chunk.empty<Cause.Cause<unknown>>()\n  while (cause !== undefined) {\n    switch (cause._tag) {\n      case OpCodes.OP_EMPTY: {\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_FAIL: {\n        _parallel = HashSet.add(_parallel, Chunk.make(cause._tag, cause.error))\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_DIE: {\n        _parallel = HashSet.add(_parallel, Chunk.make(cause._tag, cause.defect))\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_INTERRUPT: {\n        _parallel = HashSet.add(_parallel, Chunk.make(cause._tag, cause.fiberId as unknown))\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_SEQUENTIAL: {\n        switch (cause.left._tag) {\n          case OpCodes.OP_EMPTY: {\n            cause = cause.right\n            break\n          }\n          case OpCodes.OP_SEQUENTIAL: {\n            cause = sequential(cause.left.left, sequential(cause.left.right, cause.right))\n            break\n          }\n          case OpCodes.OP_PARALLEL: {\n            cause = parallel(\n              sequential(cause.left.left, cause.right),\n              sequential(cause.left.right, cause.right)\n            )\n            break\n          }\n          default: {\n            _sequential = Chunk.prepend(_sequential, cause.right)\n            cause = cause.left\n            break\n          }\n        }\n        break\n      }\n      case OpCodes.OP_PARALLEL: {\n        stack.push(cause.right)\n        cause = cause.left\n        break\n      }\n    }\n  }\n  throw new Error(getBugErrorMessage(\"Cause.evaluateCauseLoop\"))\n}\n\n// -----------------------------------------------------------------------------\n// Reducing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst SizeCauseReducer: Cause.CauseReducer<unknown, unknown, number> = {\n  emptyCase: () => 0,\n  failCase: () => 1,\n  dieCase: () => 1,\n  interruptCase: () => 1,\n  sequentialCase: (_, left, right) => left + right,\n  parallelCase: (_, left, right) => left + right\n}\n\n/** @internal */\nconst IsInterruptedOnlyCauseReducer: Cause.CauseReducer<unknown, unknown, boolean> = {\n  emptyCase: constTrue,\n  failCase: constFalse,\n  dieCase: constFalse,\n  interruptCase: constTrue,\n  sequentialCase: (_, left, right) => left && right,\n  parallelCase: (_, left, right) => left && right\n}\n\n/** @internal */\nconst FilterCauseReducer = <E>(\n  predicate: Predicate<Cause.Cause<E>>\n): Cause.CauseReducer<unknown, E, Cause.Cause<E>> => ({\n  emptyCase: () => empty,\n  failCase: (_, error) => fail(error),\n  dieCase: (_, defect) => die(defect),\n  interruptCase: (_, fiberId) => interrupt(fiberId),\n  sequentialCase: (_, left, right) => {\n    if (predicate(left)) {\n      if (predicate(right)) {\n        return sequential(left, right)\n      }\n      return left\n    }\n    if (predicate(right)) {\n      return right\n    }\n    return empty\n  },\n  parallelCase: (_, left, right) => {\n    if (predicate(left)) {\n      if (predicate(right)) {\n        return parallel(left, right)\n      }\n      return left\n    }\n    if (predicate(right)) {\n      return right\n    }\n    return empty\n  }\n})\n\n/** @internal */\ntype CauseCase = SequentialCase | ParallelCase\n\nconst OP_SEQUENTIAL_CASE = \"SequentialCase\"\n\nconst OP_PARALLEL_CASE = \"ParallelCase\"\n\n/** @internal */\ninterface SequentialCase {\n  readonly _tag: typeof OP_SEQUENTIAL_CASE\n}\n\n/** @internal */\ninterface ParallelCase {\n  readonly _tag: typeof OP_PARALLEL_CASE\n}\n\n/** @internal */\nexport const match = dual<\n  <Z, E>(\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ) => (self: Cause.Cause<E>) => Z,\n  <Z, E>(\n    self: Cause.Cause<E>,\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ) => Z\n>(2, (self, { onDie, onEmpty, onFail, onInterrupt, onParallel, onSequential }) => {\n  return reduceWithContext(self, void 0, {\n    emptyCase: () => onEmpty,\n    failCase: (_, error) => onFail(error),\n    dieCase: (_, defect) => onDie(defect),\n    interruptCase: (_, fiberId) => onInterrupt(fiberId),\n    sequentialCase: (_, left, right) => onSequential(left, right),\n    parallelCase: (_, left, right) => onParallel(left, right)\n  })\n})\n\n/** @internal */\nexport const reduce = dual<\n  <Z, E>(zero: Z, pf: (accumulator: Z, cause: Cause.Cause<E>) => Option.Option<Z>) => (self: Cause.Cause<E>) => Z,\n  <Z, E>(self: Cause.Cause<E>, zero: Z, pf: (accumulator: Z, cause: Cause.Cause<E>) => Option.Option<Z>) => Z\n>(3, <Z, E>(self: Cause.Cause<E>, zero: Z, pf: (accumulator: Z, cause: Cause.Cause<E>) => Option.Option<Z>) => {\n  let accumulator: Z = zero\n  let cause: Cause.Cause<E> | undefined = self\n  const causes: Array<Cause.Cause<E>> = []\n  while (cause !== undefined) {\n    const option = pf(accumulator, cause)\n    accumulator = Option.isSome(option) ? option.value : accumulator\n    switch (cause._tag) {\n      case OpCodes.OP_SEQUENTIAL: {\n        causes.push(cause.right)\n        cause = cause.left\n        break\n      }\n      case OpCodes.OP_PARALLEL: {\n        causes.push(cause.right)\n        cause = cause.left\n        break\n      }\n      default: {\n        cause = undefined\n        break\n      }\n    }\n    if (cause === undefined && causes.length > 0) {\n      cause = causes.pop()!\n    }\n  }\n  return accumulator\n})\n\n/** @internal */\nexport const reduceWithContext = dual<\n  <C, E, Z>(context: C, reducer: Cause.CauseReducer<C, E, Z>) => (self: Cause.Cause<E>) => Z,\n  <C, E, Z>(self: Cause.Cause<E>, context: C, reducer: Cause.CauseReducer<C, E, Z>) => Z\n>(3, <C, E, Z>(self: Cause.Cause<E>, context: C, reducer: Cause.CauseReducer<C, E, Z>) => {\n  const input: Array<Cause.Cause<E>> = [self]\n  const output: Array<Either.Either<Z, CauseCase>> = []\n  while (input.length > 0) {\n    const cause = input.pop()!\n    switch (cause._tag) {\n      case OpCodes.OP_EMPTY: {\n        output.push(Either.right(reducer.emptyCase(context)))\n        break\n      }\n      case OpCodes.OP_FAIL: {\n        output.push(Either.right(reducer.failCase(context, cause.error)))\n        break\n      }\n      case OpCodes.OP_DIE: {\n        output.push(Either.right(reducer.dieCase(context, cause.defect)))\n        break\n      }\n      case OpCodes.OP_INTERRUPT: {\n        output.push(Either.right(reducer.interruptCase(context, cause.fiberId)))\n        break\n      }\n      case OpCodes.OP_SEQUENTIAL: {\n        input.push(cause.right)\n        input.push(cause.left)\n        output.push(Either.left({ _tag: OP_SEQUENTIAL_CASE }))\n        break\n      }\n      case OpCodes.OP_PARALLEL: {\n        input.push(cause.right)\n        input.push(cause.left)\n        output.push(Either.left({ _tag: OP_PARALLEL_CASE }))\n        break\n      }\n    }\n  }\n  const accumulator: Array<Z> = []\n  while (output.length > 0) {\n    const either = output.pop()!\n    switch (either._tag) {\n      case \"Left\": {\n        switch (either.left._tag) {\n          case OP_SEQUENTIAL_CASE: {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.sequentialCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n          case OP_PARALLEL_CASE: {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.parallelCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n        }\n        break\n      }\n      case \"Right\": {\n        accumulator.push(either.right)\n        break\n      }\n    }\n  }\n  if (accumulator.length === 0) {\n    throw new Error(\n      \"BUG: Cause.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues\"\n    )\n  }\n  return accumulator.pop()!\n})\n\n// -----------------------------------------------------------------------------\n// Pretty Printing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const pretty = <E>(cause: Cause.Cause<E>, options?: {\n  readonly renderErrorCause?: boolean | undefined\n}): string => {\n  if (isInterruptedOnly(cause)) {\n    return \"All fibers interrupted without errors.\"\n  }\n  return prettyErrors<E>(cause).map(function(e) {\n    if (options?.renderErrorCause !== true || e.cause === undefined) {\n      return e.stack\n    }\n    return `${e.stack} {\\n${renderErrorCause(e.cause as PrettyError, \"  \")}\\n}`\n  }).join(\"\\n\")\n}\n\nconst renderErrorCause = (cause: PrettyError, prefix: string) => {\n  const lines = cause.stack!.split(\"\\n\")\n  let stack = `${prefix}[cause]: ${lines[0]}`\n  for (let i = 1, len = lines.length; i < len; i++) {\n    stack += `\\n${prefix}${lines[i]}`\n  }\n  if (cause.cause) {\n    stack += ` {\\n${renderErrorCause(cause.cause as PrettyError, `${prefix}  `)}\\n${prefix}}`\n  }\n  return stack\n}\n\nclass PrettyError extends globalThis.Error implements Cause.PrettyError {\n  span: undefined | Span = undefined\n  constructor(originalError: unknown) {\n    const originalErrorIsObject = typeof originalError === \"object\" && originalError !== null\n    const prevLimit = Error.stackTraceLimit\n    Error.stackTraceLimit = 1\n    super(\n      prettyErrorMessage(originalError),\n      originalErrorIsObject && \"cause\" in originalError && typeof originalError.cause !== \"undefined\"\n        ? { cause: new PrettyError(originalError.cause) }\n        : undefined\n    )\n    if (this.message === \"\") {\n      this.message = \"An error has occurred\"\n    }\n    Error.stackTraceLimit = prevLimit\n    this.name = originalError instanceof Error ? originalError.name : \"Error\"\n    if (originalErrorIsObject) {\n      if (spanSymbol in originalError) {\n        this.span = originalError[spanSymbol] as Span\n      }\n      Object.keys(originalError).forEach((key) => {\n        if (!(key in this)) {\n          // @ts-expect-error\n          this[key] = originalError[key]\n        }\n      })\n    }\n    this.stack = prettyErrorStack(\n      `${this.name}: ${this.message}`,\n      originalError instanceof Error && originalError.stack\n        ? originalError.stack\n        : \"\",\n      this.span\n    )\n  }\n}\n\n/**\n * A utility function for generating human-readable error messages from a generic error of type `unknown`.\n *\n * Rules:\n *\n * 1) If the input `u` is already a string, it's considered a message.\n * 2) If `u` is an Error instance with a message defined, it uses the message.\n * 3) If `u` has a user-defined `toString()` method, it uses that method.\n * 4) Otherwise, it uses `JSON.stringify` to produce a string representation and uses it as the error message,\n *   with \"Error\" added as a prefix.\n *\n * @internal\n */\nexport const prettyErrorMessage = (u: unknown): string => {\n  // 1)\n  if (typeof u === \"string\") {\n    return u\n  }\n  // 2)\n  if (typeof u === \"object\" && u !== null && u instanceof Error) {\n    return u.message\n  }\n  // 3)\n  try {\n    if (\n      hasProperty(u, \"toString\") &&\n      isFunction(u[\"toString\"]) &&\n      u[\"toString\"] !== Object.prototype.toString &&\n      u[\"toString\"] !== globalThis.Array.prototype.toString\n    ) {\n      return u[\"toString\"]()\n    }\n  } catch {\n    // something's off, rollback to json\n  }\n  // 4)\n  return JSON.stringify(u)\n}\n\nconst locationRegex = /\\((.*)\\)/\n\n/** @internal */\nexport const spanToTrace = globalValue(\"effect/Tracer/spanToTrace\", () => new WeakMap())\n\nconst prettyErrorStack = (message: string, stack: string, span?: Span | undefined): string => {\n  const out: Array<string> = [message]\n  const lines = stack.startsWith(message) ? stack.slice(message.length).split(\"\\n\") : stack.split(\"\\n\")\n\n  for (let i = 1; i < lines.length; i++) {\n    if (lines[i].includes(\"Generator.next\")) {\n      break\n    }\n    if (lines[i].includes(\"effect_internal_function\")) {\n      out.pop()\n      break\n    }\n    out.push(\n      lines[i]\n        .replace(/at .*effect_instruction_i.*\\((.*)\\)/, \"at $1\")\n        .replace(/EffectPrimitive\\.\\w+/, \"<anonymous>\")\n    )\n  }\n\n  if (span) {\n    let current: Span | AnySpan | undefined = span\n    let i = 0\n    while (current && current._tag === \"Span\" && i < 10) {\n      const stackFn = spanToTrace.get(current)\n      if (typeof stackFn === \"function\") {\n        const stack = stackFn()\n        if (typeof stack === \"string\") {\n          const locationMatch = stack.match(locationRegex)\n          const location = locationMatch ? locationMatch[1] : stack.replace(/^at /, \"\")\n          out.push(`    at ${current.name} (${location})`)\n        } else {\n          out.push(`    at ${current.name}`)\n        }\n      } else {\n        out.push(`    at ${current.name}`)\n      }\n      current = Option.getOrUndefined(current.parent)\n      i++\n    }\n  }\n\n  return out.join(\"\\n\")\n}\n\nconst spanSymbol = Symbol.for(\"effect/SpanAnnotation\")\n\n/** @internal */\nexport const prettyErrors = <E>(cause: Cause.Cause<E>): Array<PrettyError> =>\n  reduceWithContext(cause, void 0, {\n    emptyCase: (): Array<PrettyError> => [],\n    dieCase: (_, unknownError) => {\n      return [new PrettyError(unknownError)]\n    },\n    failCase: (_, error) => {\n      return [new PrettyError(error)]\n    },\n    interruptCase: () => [],\n    parallelCase: (_, l, r) => [...l, ...r],\n    sequentialCase: (_, l, r) => [...l, ...r]\n  })\n", "/** @internal */\nexport const OP_STATE_PENDING = \"Pending\" as const\n\n/** @internal */\nexport type OP_STATE_PENDING = typeof OP_STATE_PENDING\n\n/** @internal */\nexport const OP_STATE_DONE = \"Done\" as const\n\n/** @internal */\nexport type OP_STATE_DONE = typeof OP_STATE_DONE\n", "import type * as Deferred from \"../Deferred.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as OpCodes from \"./opCodes/deferred.js\"\n\n/** @internal */\nconst DeferredSymbolKey = \"effect/Deferred\"\n\n/** @internal */\nexport const DeferredTypeId: Deferred.DeferredTypeId = Symbol.for(\n  DeferredSymbolKey\n) as Deferred.DeferredTypeId\n\n/** @internal */\nexport const deferredVariance = {\n  /* c8 ignore next */\n  _E: (_: any) => _,\n  /* c8 ignore next */\n  _A: (_: any) => _\n}\n\n/** @internal */\nexport type State</* in out */ A, /* in out */ E> = Pending<A, E> | Done<A, E>\n\n/** @internal */\nexport interface Pending<in A, in E> {\n  readonly _tag: \"Pending\"\n  readonly joiners: Array<(effect: Effect.Effect<A, E>) => void>\n}\n\n/** @internal */\nexport interface Done<out A, out E> {\n  readonly _tag: \"Done\"\n  readonly effect: Effect.Effect<A, E>\n}\n\n/** @internal */\nexport const pending = <A, E>(\n  joiners: Array<(effect: Effect.Effect<A, E>) => void>\n): State<A, E> => {\n  return { _tag: OpCodes.OP_STATE_PENDING, joiners }\n}\n\n/** @internal */\nexport const done = <A, E>(effect: Effect.Effect<A, E>): State<A, E> => {\n  return { _tag: OpCodes.OP_STATE_DONE, effect }\n}\n", "/** @internal */\nexport class SingleShotGen<T, A> implements Generator<T, A> {\n  called = false\n\n  constructor(readonly self: T) {\n  }\n\n  next(a: A): IteratorResult<T, A> {\n    return this.called ?\n      ({\n        value: a,\n        done: true\n      }) :\n      (this.called = true,\n        ({\n          value: this.self,\n          done: false\n        }))\n  }\n\n  return(a: A): IteratorResult<T, A> {\n    return ({\n      value: a,\n      done: true\n    })\n  }\n\n  throw(e: unknown): IteratorResult<T, A> {\n    throw e\n  }\n\n  [Symbol.iterator](): Generator<T, A> {\n    return new SingleShotGen<T, A>(this.self)\n  }\n}\n", "/**\n * @since 2.0.0\n */\nimport * as Context from \"../Context.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Option from \"../Option.js\"\nimport type * as Tracer from \"../Tracer.js\"\n\n/** @internal */\nexport const TracerTypeId: Tracer.TracerTypeId = Symbol.for(\"effect/Tracer\") as Tracer.TracerTypeId\n\n/** @internal */\nexport const make = (options: Omit<Tracer.Tracer, Tracer.TracerTypeId>): Tracer.Tracer => ({\n  [TracerTypeId]: TracerTypeId,\n  ...options\n})\n\n/** @internal */\nexport const tracerTag = Context.GenericTag<Tracer.Tracer>(\"effect/Tracer\")\n\n/** @internal */\nexport const spanTag = Context.GenericTag<Tracer.ParentSpan, Tracer.AnySpan>(\"effect/ParentSpan\")\n\nconst randomHexString = (function() {\n  const characters = \"abcdef0123456789\"\n  const charactersLength = characters.length\n  return function(length: number) {\n    let result = \"\"\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength))\n    }\n    return result\n  }\n})()\n\n/** @internal */\nexport class NativeSpan implements Tracer.Span {\n  readonly _tag = \"Span\"\n  readonly spanId: string\n  readonly traceId: string = \"native\"\n  readonly sampled = true\n\n  status: Tracer.SpanStatus\n  attributes: Map<string, unknown>\n  events: Array<[name: string, startTime: bigint, attributes: Record<string, unknown>]> = []\n\n  constructor(\n    readonly name: string,\n    readonly parent: Option.Option<Tracer.AnySpan>,\n    readonly context: Context.Context<never>,\n    readonly links: ReadonlyArray<Tracer.SpanLink>,\n    readonly startTime: bigint,\n    readonly kind: Tracer.SpanKind\n  ) {\n    this.status = {\n      _tag: \"Started\",\n      startTime\n    }\n    this.attributes = new Map()\n    this.traceId = parent._tag === \"Some\" ? parent.value.traceId : randomHexString(32)\n    this.spanId = randomHexString(16)\n  }\n\n  end(endTime: bigint, exit: Exit.Exit<unknown, unknown>): void {\n    this.status = {\n      _tag: \"Ended\",\n      endTime,\n      exit,\n      startTime: this.status.startTime\n    }\n  }\n\n  attribute(key: string, value: unknown): void {\n    this.attributes.set(key, value)\n  }\n\n  event(name: string, startTime: bigint, attributes?: Record<string, unknown>): void {\n    this.events.push([name, startTime, attributes ?? {}])\n  }\n}\n\n/** @internal */\nexport const nativeTracer: Tracer.Tracer = make({\n  span: (name, parent, context, links, startTime, kind) =>\n    new NativeSpan(\n      name,\n      parent,\n      context,\n      links,\n      startTime,\n      kind\n    ),\n  context: (f) => f()\n})\n\n/** @internal */\nexport const externalSpan = (options: {\n  readonly spanId: string\n  readonly traceId: string\n  readonly sampled?: boolean | undefined\n  readonly context?: Context.Context<never> | undefined\n}): Tracer.ExternalSpan => ({\n  _tag: \"ExternalSpan\",\n  spanId: options.spanId,\n  traceId: options.traceId,\n  sampled: options.sampled ?? true,\n  context: options.context ?? Context.empty()\n})\n\n/** @internal */\nexport const addSpanStackTrace = (options: Tracer.SpanOptions | undefined): Tracer.SpanOptions => {\n  if (options?.captureStackTrace === false) {\n    return options\n  } else if (options?.captureStackTrace !== undefined && typeof options.captureStackTrace !== \"boolean\") {\n    return options\n  }\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 3\n  const traceError = new Error()\n  Error.stackTraceLimit = limit\n  let cache: false | string = false\n  return {\n    ...options,\n    captureStackTrace: () => {\n      if (cache !== false) {\n        return cache\n      }\n      if (traceError.stack !== undefined) {\n        const stack = traceError.stack.split(\"\\n\")\n        if (stack[3] !== undefined) {\n          cache = stack[3].trim()\n          return cache\n        }\n      }\n    }\n  }\n}\n", "import { internalCall } from \"effect/Utils\"\nimport * as Arr from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Deferred from \"../Deferred.js\"\nimport type * as Differ from \"../Differ.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport type * as FiberStatus from \"../FiberStatus.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport type * as HashSet from \"../HashSet.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as List from \"../List.js\"\nimport type * as LogLevel from \"../LogLevel.js\"\nimport type * as LogSpan from \"../LogSpan.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty, isObject, isPromiseLike, type Predicate, type Refinement } from \"../Predicate.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as BlockedRequests from \"../RequestBlock.js\"\nimport type * as RequestResolver from \"../RequestResolver.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport type * as Scope from \"../Scope.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport type { NoInfer, NotFunction } from \"../Types.js\"\nimport { YieldWrap } from \"../Utils.js\"\nimport * as _blockedRequests from \"./blockedRequests.js\"\nimport * as internalCause from \"./cause.js\"\nimport * as deferred from \"./deferred.js\"\nimport * as internalDiffer from \"./differ.js\"\nimport { effectVariance, StructuralCommitPrototype } from \"./effectable.js\"\nimport { getBugErrorMessage } from \"./errors.js\"\nimport type * as FiberRuntime from \"./fiberRuntime.js\"\nimport type * as fiberScope from \"./fiberScope.js\"\nimport * as DeferredOpCodes from \"./opCodes/deferred.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as _runtimeFlags from \"./runtimeFlags.js\"\nimport { SingleShotGen } from \"./singleShotGen.js\"\nimport * as internalTracer from \"./tracer.js\"\n\n// -----------------------------------------------------------------------------\n// Effect\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst EffectErrorSymbolKey = \"effect/EffectError\"\n\n/** @internal */\nexport const EffectErrorTypeId = Symbol.for(EffectErrorSymbolKey)\n\n/** @internal */\nexport type EffectErrorTypeId = typeof EffectErrorTypeId\n\n/** @internal */\nexport interface EffectError<out E> {\n  readonly [EffectErrorTypeId]: EffectErrorTypeId\n  readonly _tag: \"EffectError\"\n  readonly cause: Cause.Cause<E>\n}\n\n/** @internal */\nexport const isEffectError = (u: unknown): u is EffectError<unknown> => hasProperty(u, EffectErrorTypeId)\n\n/** @internal */\nexport const makeEffectError = <E>(cause: Cause.Cause<E>): EffectError<E> => ({\n  [EffectErrorTypeId]: EffectErrorTypeId,\n  _tag: \"EffectError\",\n  cause\n})\n\n/**\n * @internal\n */\nexport const blocked = <A, E>(\n  blockedRequests: BlockedRequests.RequestBlock,\n  _continue: Effect.Effect<A, E>\n): Effect.Blocked<A, E> => {\n  const effect = new EffectPrimitive(\"Blocked\") as any\n  effect.effect_instruction_i0 = blockedRequests\n  effect.effect_instruction_i1 = _continue\n  return effect\n}\n\n/**\n * @internal\n */\nexport const runRequestBlock = (\n  blockedRequests: BlockedRequests.RequestBlock\n): Effect.Effect<void> => {\n  const effect = new EffectPrimitive(\"RunBlocked\") as any\n  effect.effect_instruction_i0 = blockedRequests\n  return effect\n}\n\n/** @internal */\nexport const EffectTypeId: Effect.EffectTypeId = Symbol.for(\"effect/Effect\") as Effect.EffectTypeId\n\n/** @internal */\nexport type Primitive =\n  | Async\n  | Commit\n  | Failure\n  | OnFailure\n  | OnSuccess\n  | OnStep\n  | OnSuccessAndFailure\n  | Success\n  | Sync\n  | UpdateRuntimeFlags\n  | While\n  | WithRuntime\n  | Yield\n  | OpTag\n  | Blocked\n  | RunBlocked\n  | Either.Either<any, any>\n  | Option.Option<any>\n\n/** @internal */\nexport type Continuation =\n  | OnSuccess\n  | OnStep\n  | OnSuccessAndFailure\n  | OnFailure\n  | While\n  | RevertFlags\n\n/** @internal */\nexport class RevertFlags {\n  readonly _op = OpCodes.OP_REVERT_FLAGS\n  constructor(\n    readonly patch: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    readonly op: Primitive & { _op: OpCodes.OP_UPDATE_RUNTIME_FLAGS }\n  ) {\n  }\n}\n\nclass EffectPrimitive {\n  public effect_instruction_i0 = undefined\n  public effect_instruction_i1 = undefined\n  public effect_instruction_i2 = undefined\n  public trace = undefined;\n  [EffectTypeId] = effectVariance\n  constructor(readonly _op: Primitive[\"_op\"]) {}\n  [Equal.symbol](this: {}, that: unknown) {\n    return this === that\n  }\n  [Hash.symbol](this: {}) {\n    return Hash.cached(this, Hash.random(this))\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toJSON() {\n    return {\n      _id: \"Effect\",\n      _op: this._op,\n      effect_instruction_i0: toJSON(this.effect_instruction_i0),\n      effect_instruction_i1: toJSON(this.effect_instruction_i1),\n      effect_instruction_i2: toJSON(this.effect_instruction_i2)\n    }\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this))\n  }\n}\n\n/** @internal */\nclass EffectPrimitiveFailure {\n  public effect_instruction_i0 = undefined\n  public effect_instruction_i1 = undefined\n  public effect_instruction_i2 = undefined\n  public trace = undefined;\n  [EffectTypeId] = effectVariance\n  constructor(readonly _op: Primitive[\"_op\"]) {\n    // @ts-expect-error\n    this._tag = _op\n  }\n  [Equal.symbol](this: {}, that: unknown) {\n    return exitIsExit(that) && that._op === \"Failure\" &&\n      // @ts-expect-error\n      Equal.equals(this.effect_instruction_i0, that.effect_instruction_i0)\n  }\n  [Hash.symbol](this: {}) {\n    return pipe(\n      // @ts-expect-error\n      Hash.string(this._tag),\n      // @ts-expect-error\n      Hash.combine(Hash.hash(this.effect_instruction_i0)),\n      Hash.cached(this)\n    )\n  }\n  get cause() {\n    return this.effect_instruction_i0\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toJSON() {\n    return {\n      _id: \"Exit\",\n      _tag: this._op,\n      cause: (this.cause as any).toJSON()\n    }\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this))\n  }\n}\n\n/** @internal */\nclass EffectPrimitiveSuccess {\n  public effect_instruction_i0 = undefined\n  public effect_instruction_i1 = undefined\n  public effect_instruction_i2 = undefined\n  public trace = undefined;\n  [EffectTypeId] = effectVariance\n  constructor(readonly _op: Primitive[\"_op\"]) {\n    // @ts-expect-error\n    this._tag = _op\n  }\n  [Equal.symbol](this: {}, that: unknown) {\n    return exitIsExit(that) && that._op === \"Success\" &&\n      // @ts-expect-error\n      Equal.equals(this.effect_instruction_i0, that.effect_instruction_i0)\n  }\n  [Hash.symbol](this: {}) {\n    return pipe(\n      // @ts-expect-error\n      Hash.string(this._tag),\n      // @ts-expect-error\n      Hash.combine(Hash.hash(this.effect_instruction_i0)),\n      Hash.cached(this)\n    )\n  }\n  get value() {\n    return this.effect_instruction_i0\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toJSON() {\n    return {\n      _id: \"Exit\",\n      _tag: this._op,\n      value: toJSON(this.value)\n    }\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this))\n  }\n}\n\n/** @internal */\nexport type Op<Tag extends string, Body = {}> = Effect.Effect<never> & Body & {\n  readonly _op: Tag\n}\n\n/** @internal */\nexport interface Async extends\n  Op<OpCodes.OP_ASYNC, {\n    effect_instruction_i0(resume: (effect: Primitive) => void): void\n    readonly effect_instruction_i1: FiberId.FiberId\n  }>\n{}\n\n/** @internal */\nexport interface Blocked<out E = any, out A = any> extends\n  Op<\"Blocked\", {\n    readonly effect_instruction_i0: BlockedRequests.RequestBlock\n    readonly effect_instruction_i1: Effect.Effect<A, E>\n  }>\n{}\n\n/** @internal */\nexport interface RunBlocked extends\n  Op<\"RunBlocked\", {\n    readonly effect_instruction_i0: BlockedRequests.RequestBlock\n  }>\n{}\n\n/** @internal */\nexport interface Failure extends\n  Op<OpCodes.OP_FAILURE, {\n    readonly effect_instruction_i0: Cause.Cause<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface OpTag extends Op<OpCodes.OP_TAG, {}> {}\n\n/** @internal */\nexport interface Commit extends\n  Op<OpCodes.OP_COMMIT, {\n    commit(): Effect.Effect<unknown, unknown, unknown>\n  }>\n{}\n\n/** @internal */\nexport interface OnFailure extends\n  Op<OpCodes.OP_ON_FAILURE, {\n    readonly effect_instruction_i0: Primitive\n    effect_instruction_i1(a: Cause.Cause<unknown>): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface OnSuccess extends\n  Op<OpCodes.OP_ON_SUCCESS, {\n    readonly effect_instruction_i0: Primitive\n    effect_instruction_i1(a: unknown): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface OnStep extends Op<\"OnStep\", { readonly effect_instruction_i0: Primitive }> {}\n\n/** @internal */\nexport interface OnSuccessAndFailure extends\n  Op<OpCodes.OP_ON_SUCCESS_AND_FAILURE, {\n    readonly effect_instruction_i0: Primitive\n    effect_instruction_i1(a: Cause.Cause<unknown>): Primitive\n    effect_instruction_i2(a: unknown): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface Success extends\n  Op<OpCodes.OP_SUCCESS, {\n    readonly effect_instruction_i0: unknown\n  }>\n{}\n\n/** @internal */\nexport interface Sync extends\n  Op<OpCodes.OP_SYNC, {\n    effect_instruction_i0(): unknown\n  }>\n{}\n\n/** @internal */\nexport interface UpdateRuntimeFlags extends\n  Op<OpCodes.OP_UPDATE_RUNTIME_FLAGS, {\n    readonly effect_instruction_i0: RuntimeFlagsPatch.RuntimeFlagsPatch\n    readonly effect_instruction_i1?: (oldRuntimeFlags: RuntimeFlags.RuntimeFlags) => Primitive\n  }>\n{}\n\n/** @internal */\nexport interface While extends\n  Op<OpCodes.OP_WHILE, {\n    effect_instruction_i0(): boolean\n    effect_instruction_i1(): Primitive\n    effect_instruction_i2(a: unknown): void\n  }>\n{}\n\n/** @internal */\nexport interface WithRuntime extends\n  Op<OpCodes.OP_WITH_RUNTIME, {\n    effect_instruction_i0(fiber: FiberRuntime.FiberRuntime<unknown, unknown>, status: FiberStatus.Running): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface Yield extends Op<OpCodes.OP_YIELD> {}\n\n/** @internal */\nexport const isEffect = (u: unknown): u is Effect.Effect<unknown, unknown, unknown> => hasProperty(u, EffectTypeId)\n\n/* @internal */\nexport const withFiberRuntime = <A, E = never, R = never>(\n  withRuntime: (fiber: FiberRuntime.FiberRuntime<A, E>, status: FiberStatus.Running) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_WITH_RUNTIME) as any\n  effect.effect_instruction_i0 = withRuntime\n  return effect\n}\n\n/* @internal */\nexport const acquireUseRelease: {\n  <A2, E2, R2, A, X, R3>(\n    use: (a: A) => Effect.Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect.Effect<X, never, R3>\n  ): <E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2 | E, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, X, R3>(\n    acquire: Effect.Effect<A, E, R>,\n    use: (a: A) => Effect.Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect.Effect<X, never, R3>\n  ): Effect.Effect<A2, E | E2, R | R2 | R3>\n} = dual(3, <A, E, R, A2, E2, R2, X, R3>(\n  acquire: Effect.Effect<A, E, R>,\n  use: (a: A) => Effect.Effect<A2, E2, R2>,\n  release: (a: A, exit: Exit.Exit<A2, E2>) => Effect.Effect<X, never, R3>\n): Effect.Effect<A2, E | E2, R | R2 | R3> =>\n  uninterruptibleMask((restore) =>\n    flatMap(\n      acquire,\n      (a) =>\n        flatMap(exit(suspend(() => restore(use(a)))), (exit): Effect.Effect<A2, E | E2, R | R2 | R3> => {\n          return suspend(() => release(a, exit)).pipe(\n            matchCauseEffect({\n              onFailure: (cause) => {\n                switch (exit._tag) {\n                  case OpCodes.OP_FAILURE:\n                    return failCause(internalCause.parallel(exit.effect_instruction_i0, cause))\n                  case OpCodes.OP_SUCCESS:\n                    return failCause(cause)\n                }\n              },\n              onSuccess: () => exit\n            })\n          )\n        })\n    )\n  ))\n\n/* @internal */\nexport const as: {\n  <B>(value: B): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, value: B): Effect.Effect<B, E, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, value: B): Effect.Effect<B, E, R> => flatMap(self, () => succeed(value))\n)\n\n/* @internal */\nexport const asVoid = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<void, E, R> => as(self, void 0)\n\n/* @internal */\nexport const custom: {\n  <X, A, E, R>(i0: X, body: (this: { effect_instruction_i0: X }) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>\n  <X, Y, A, E, R>(\n    i0: X,\n    i1: Y,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y }) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R>\n  <X, Y, Z, A, E, R>(\n    i0: X,\n    i1: Y,\n    i2: Z,\n    body: (\n      this: { effect_instruction_i0: X; effect_instruction_i1: Y; effect_instruction_i2: Z }\n    ) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R>\n} = function() {\n  const wrapper = new EffectPrimitive(OpCodes.OP_COMMIT) as any\n  switch (arguments.length) {\n    case 2: {\n      wrapper.effect_instruction_i0 = arguments[0]\n      wrapper.commit = arguments[1]\n      break\n    }\n    case 3: {\n      wrapper.effect_instruction_i0 = arguments[0]\n      wrapper.effect_instruction_i1 = arguments[1]\n      wrapper.commit = arguments[2]\n      break\n    }\n    case 4: {\n      wrapper.effect_instruction_i0 = arguments[0]\n      wrapper.effect_instruction_i1 = arguments[1]\n      wrapper.effect_instruction_i2 = arguments[2]\n      wrapper.commit = arguments[3]\n      break\n    }\n    default: {\n      throw new Error(getBugErrorMessage(\"you're not supposed to end up here\"))\n    }\n  }\n  return wrapper\n}\n\n/* @internal */\nexport const unsafeAsync = <A, E = never, R = never>(\n  register: (\n    callback: (_: Effect.Effect<A, E, R>) => void\n  ) => void | Effect.Effect<void, never, R>,\n  blockingOn: FiberId.FiberId = FiberId.none\n): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_ASYNC) as any\n  let cancelerRef: Effect.Effect<void, never, R> | void = undefined\n  effect.effect_instruction_i0 = (resume: (_: Effect.Effect<A, E, R>) => void) => {\n    cancelerRef = register(resume)\n  }\n  effect.effect_instruction_i1 = blockingOn\n  return cancelerRef !== undefined ?\n    onInterrupt(effect, (_) => cancelerRef!) :\n    effect\n}\n\n/* @internal */\nexport const async = <A, E = never, R = never>(\n  register: (\n    callback: (_: Effect.Effect<A, E, R>) => void,\n    signal: AbortSignal\n  ) => void | Effect.Effect<void, never, R>,\n  blockingOn: FiberId.FiberId = FiberId.none\n): Effect.Effect<A, E, R> => {\n  return custom(register, function() {\n    let backingResume: ((_: Effect.Effect<A, E, R>) => void) | undefined = undefined\n    let pendingEffect: Effect.Effect<A, E, R> | undefined = undefined\n    function proxyResume(effect: Effect.Effect<A, E, R>) {\n      if (backingResume) {\n        backingResume(effect)\n      } else if (pendingEffect === undefined) {\n        pendingEffect = effect\n      }\n    }\n    const effect = new EffectPrimitive(OpCodes.OP_ASYNC) as any\n    effect.effect_instruction_i0 = (resume: (_: Effect.Effect<A, E, R>) => void) => {\n      backingResume = resume\n      if (pendingEffect) {\n        resume(pendingEffect)\n      }\n    }\n    effect.effect_instruction_i1 = blockingOn\n    let cancelerRef: Effect.Effect<void, never, R> | void = undefined\n    let controllerRef: AbortController | void = undefined\n    if (this.effect_instruction_i0.length !== 1) {\n      controllerRef = new AbortController()\n      cancelerRef = internalCall(() => this.effect_instruction_i0(proxyResume, controllerRef!.signal))\n    } else {\n      cancelerRef = internalCall(() => (this.effect_instruction_i0 as any)(proxyResume))\n    }\n    return (cancelerRef || controllerRef) ?\n      onInterrupt(effect, (_) => {\n        if (controllerRef) {\n          controllerRef.abort()\n        }\n        return cancelerRef ?? void_\n      }) :\n      effect\n  })\n}\n\n/* @internal */\nexport const catchAllCause = dual<\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A2 | A, E2, R2 | R>\n>(2, (self, f) => {\n  const effect = new EffectPrimitive(OpCodes.OP_ON_FAILURE) as any\n  effect.effect_instruction_i0 = self\n  effect.effect_instruction_i1 = f\n  return effect\n})\n\n/* @internal */\nexport const catchAll: {\n  <E, A2, E2, R2>(\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2 | A, E2, R2 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2 | A, E2, R2 | R> => matchEffect(self, { onFailure: f, onSuccess: succeed })\n)\n\n/* @internal */\nexport const catchIf: {\n  <E, EB extends E, A2, E2, R2>(\n    refinement: Refinement<NoInfer<E>, EB>,\n    f: (e: EB) => Effect.Effect<A2, E2, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  <E, A2, E2, R2>(\n    predicate: Predicate<NoInfer<E>>,\n    f: (e: NoInfer<E>) => Effect.Effect<A2, E2, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A | A2, E | E2, R | R2>\n} = dual(3, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  predicate: Predicate<E>,\n  f: (e: E) => Effect.Effect<A2, E2, R2>\n): Effect.Effect<A | A2, E | E2, R | R2> =>\n  catchAllCause(self, (cause): Effect.Effect<A | A2, E | E2, R | R2> => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return predicate(either.left) ? f(either.left) : failCause(cause)\n      case \"Right\":\n        return failCause(either.right)\n    }\n  }))\n\n/* @internal */\nexport const catchSome = dual<\n  <E, A2, E2, R2>(\n    pf: (e: NoInfer<E>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E | E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (e: NoInfer<E>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Effect.Effect<A2 | A, E | E2, R2 | R>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  pf: (e: NoInfer<E>) => Option.Option<Effect.Effect<A2, E2, R2>>\n) =>\n  catchAllCause(self, (cause): Effect.Effect<A2 | A, E | E2, R2 | R> => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return pipe(pf(either.left), Option.getOrElse(() => failCause(cause)))\n      case \"Right\":\n        return failCause(either.right)\n    }\n  }))\n\n/* @internal */\nexport const checkInterruptible = <A, E, R>(\n  f: (isInterruptible: boolean) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => withFiberRuntime((_, status) => f(_runtimeFlags.interruption(status.runtimeFlags)))\n\nconst spanSymbol = Symbol.for(\"effect/SpanAnnotation\")\nconst originalSymbol = Symbol.for(\"effect/OriginalAnnotation\")\n\n/* @internal */\nexport const originalInstance = <E>(obj: E): E => {\n  if (hasProperty(obj, originalSymbol)) {\n    // @ts-expect-error\n    return obj[originalSymbol]\n  }\n  return obj\n}\n\n/* @internal */\nconst capture = <E>(obj: E & object, span: Option.Option<Tracer.Span>): E => {\n  if (Option.isSome(span)) {\n    return new Proxy(obj, {\n      has(target, p) {\n        return p === spanSymbol || p === originalSymbol || p in target\n      },\n      get(target, p) {\n        if (p === spanSymbol) {\n          return span.value\n        }\n        if (p === originalSymbol) {\n          return obj\n        }\n        // @ts-expect-error\n        return target[p]\n      }\n    })\n  }\n  return obj\n}\n\n/* @internal */\nexport const die = (defect: unknown): Effect.Effect<never> =>\n  isObject(defect) && !(spanSymbol in defect) ?\n    withFiberRuntime((fiber) => failCause(internalCause.die(capture(defect, currentSpanFromFiber(fiber)))))\n    : failCause(internalCause.die(defect))\n\n/* @internal */\nexport const dieMessage = (message: string): Effect.Effect<never> =>\n  failCauseSync(() => internalCause.die(new RuntimeException(message)))\n\n/* @internal */\nexport const dieSync = (evaluate: LazyArg<unknown>): Effect.Effect<never> => flatMap(sync(evaluate), die)\n\n/* @internal */\nexport const either = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Either.Either<A, E>, never, R> =>\n  matchEffect(self, {\n    onFailure: (e) => succeed(Either.left(e)),\n    onSuccess: (a) => succeed(Either.right(a))\n  })\n\n/* @internal */\nexport const exit = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Exit.Exit<A, E>, never, R> =>\n  matchCause(self, {\n    onFailure: exitFailCause,\n    onSuccess: exitSucceed\n  })\n\n/* @internal */\nexport const fail = <E>(error: E): Effect.Effect<never, E> =>\n  isObject(error) && !(spanSymbol in error) ?\n    withFiberRuntime((fiber) => failCause(internalCause.fail(capture(error, currentSpanFromFiber(fiber)))))\n    : failCause(internalCause.fail(error))\n\n/* @internal */\nexport const failSync = <E>(evaluate: LazyArg<E>): Effect.Effect<never, E> => flatMap(sync(evaluate), fail)\n\n/* @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Effect.Effect<never, E> => {\n  const effect = new EffectPrimitiveFailure(OpCodes.OP_FAILURE) as any\n  effect.effect_instruction_i0 = cause\n  return effect\n}\n\n/* @internal */\nexport const failCauseSync = <E>(\n  evaluate: LazyArg<Cause.Cause<E>>\n): Effect.Effect<never, E> => flatMap(sync(evaluate), failCause)\n\n/* @internal */\nexport const fiberId: Effect.Effect<FiberId.FiberId> = withFiberRuntime((state) => succeed(state.id()))\n\n/* @internal */\nexport const fiberIdWith = <A, E, R>(\n  f: (descriptor: FiberId.Runtime) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => withFiberRuntime((state) => f(state.id()))\n\n/* @internal */\nexport const flatMap = dual<\n  <A, B, E1, R1>(\n    f: (a: A) => Effect.Effect<B, E1, R1>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E1 | E, R1 | R>,\n  <A, E, R, B, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    f: (a: A) => Effect.Effect<B, E1, R1>\n  ) => Effect.Effect<B, E | E1, R | R1>\n>(\n  2,\n  (self, f) => {\n    const effect = new EffectPrimitive(OpCodes.OP_ON_SUCCESS) as any\n    effect.effect_instruction_i0 = self\n    effect.effect_instruction_i1 = f\n    return effect\n  }\n)\n\n/* @internal */\nexport const andThen: {\n  <A, X>(\n    f: (a: NoInfer<A>) => X\n  ): <E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n} = dual(2, (self, f) =>\n  flatMap(self, (a) => {\n    const b = typeof f === \"function\" ? (f as any)(a) : f\n    if (isEffect(b)) {\n      return b\n    } else if (isPromiseLike(b)) {\n      return async<any, Cause.UnknownException>((resume) => {\n        b.then((a) => resume(succeed(a)), (e) => resume(fail(new UnknownException(e))))\n      })\n    }\n    return succeed(b)\n  }))\n\n/* @internal */\nexport const step = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Exit.Exit<A, E> | Effect.Blocked<A, E>, never, R> => {\n  const effect = new EffectPrimitive(\"OnStep\") as any\n  effect.effect_instruction_i0 = self\n  return effect\n}\n\n/* @internal */\nexport const flatten = <A, E1, R1, E, R>(\n  self: Effect.Effect<Effect.Effect<A, E1, R1>, E, R>\n): Effect.Effect<A, E | E1, R | R1> => flatMap(self, identity)\n\n/* @internal */\nexport const flip = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<E, A, R> =>\n  matchEffect(self, { onFailure: succeed, onSuccess: fail })\n\n/* @internal */\nexport const matchCause: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Effect.Effect<A2 | A3, never, R>\n} = dual(2, <A, E, R, A2, A3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => A2\n    readonly onSuccess: (a: A) => A3\n  }\n): Effect.Effect<A2 | A3, never, R> =>\n  matchCauseEffect(self, {\n    onFailure: (cause) => succeed(options.onFailure(cause)),\n    onSuccess: (a) => succeed(options.onSuccess(a))\n  }))\n\n/* @internal */\nexport const matchCauseEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(2, <A, E, R, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n    readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  }\n): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_ON_SUCCESS_AND_FAILURE) as any\n  effect.effect_instruction_i0 = self\n  effect.effect_instruction_i1 = options.onFailure\n  effect.effect_instruction_i2 = options.onSuccess\n  return effect\n})\n\n/* @internal */\nexport const matchEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(2, <A, E, R, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (e: E) => Effect.Effect<A2, E2, R2>\n    readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  }\n): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R> =>\n  matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const defects = internalCause.defects(cause)\n      if (defects.length > 0) {\n        return failCause(internalCause.electFailures(cause))\n      }\n      const failures = internalCause.failures(cause)\n      if (failures.length > 0) {\n        return options.onFailure(Chunk.unsafeHead(failures))\n      }\n      return failCause(cause as Cause.Cause<never>)\n    },\n    onSuccess: options.onSuccess\n  }))\n\n/* @internal */\nexport const forEachSequential: {\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>): (self: Iterable<A>) => Effect.Effect<Array<B>, E, R>\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<Array<B>, E, R>\n} = dual(\n  2,\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<Array<B>, E, R> =>\n    suspend(() => {\n      const arr = Arr.fromIterable(self)\n      const ret = Arr.allocate<B>(arr.length)\n      let i = 0\n      return as(\n        whileLoop({\n          while: () => i < arr.length,\n          body: () => f(arr[i], i),\n          step: (b) => {\n            ret[i++] = b\n          }\n        }),\n        ret as Array<B>\n      )\n    })\n)\n\n/* @internal */\nexport const forEachSequentialDiscard: {\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>): (self: Iterable<A>) => Effect.Effect<void, E, R>\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<void, E, R>\n} = dual(\n  2,\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<void, E, R> =>\n    suspend(() => {\n      const arr = Arr.fromIterable(self)\n      let i = 0\n      return whileLoop({\n        while: () => i < arr.length,\n        body: () => f(arr[i], i),\n        step: () => {\n          i++\n        }\n      })\n    })\n)\n\n/* @internal */\nexport const if_ = dual<\n  <A1, E1, R1, A2, E2, R2>(\n    options: {\n      readonly onTrue: LazyArg<Effect.Effect<A1, E1, R1>>\n      readonly onFalse: LazyArg<Effect.Effect<A2, E2, R2>>\n    }\n  ) => <E = never, R = never>(\n    self: Effect.Effect<boolean, E, R> | boolean\n  ) => Effect.Effect<A1 | A2, E | E1 | E2, R | R1 | R2>,\n  <A1, E1, R1, A2, E2, R2, E = never, R = never>(\n    self: Effect.Effect<boolean, E, R> | boolean,\n    options: {\n      readonly onTrue: LazyArg<Effect.Effect<A1, E1, R1>>\n      readonly onFalse: LazyArg<Effect.Effect<A2, E2, R2>>\n    }\n  ) => Effect.Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n>(\n  (args) => typeof args[0] === \"boolean\" || isEffect(args[0]),\n  <A1, E1, R1, A2, E2, R2, E = never, R = never>(\n    self: Effect.Effect<boolean, E, R> | boolean,\n    options: {\n      readonly onTrue: LazyArg<Effect.Effect<A1, E1, R1>>\n      readonly onFalse: LazyArg<Effect.Effect<A2, E2, R2>>\n    }\n  ): Effect.Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R> =>\n    isEffect(self)\n      ? flatMap(self, (b): Effect.Effect<A1 | A2, E1 | E2, R1 | R2> => (b ? options.onTrue() : options.onFalse()))\n      : self\n      ? options.onTrue()\n      : options.onFalse()\n)\n\n/* @internal */\nexport const interrupt: Effect.Effect<never> = flatMap(fiberId, (fiberId) => interruptWith(fiberId))\n\n/* @internal */\nexport const interruptWith = (fiberId: FiberId.FiberId): Effect.Effect<never> =>\n  failCause(internalCause.interrupt(fiberId))\n\n/* @internal */\nexport const interruptible = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = RuntimeFlagsPatch.enable(_runtimeFlags.Interruption)\n  effect.effect_instruction_i1 = () => self\n  return effect\n}\n\n/* @internal */\nexport const interruptibleMask = <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect.Effect<AX, EX, RX>) => Effect.Effect<AX, EX, RX>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  custom(f, function() {\n    const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n    effect.effect_instruction_i0 = RuntimeFlagsPatch.enable(_runtimeFlags.Interruption)\n    effect.effect_instruction_i1 = (oldFlags: RuntimeFlags.RuntimeFlags) =>\n      _runtimeFlags.interruption(oldFlags)\n        ? internalCall(() => this.effect_instruction_i0(interruptible))\n        : internalCall(() => this.effect_instruction_i0(uninterruptible))\n    return effect\n  })\n\n/* @internal */\nexport const intoDeferred: {\n  <A, E>(deferred: Deferred.Deferred<A, E>): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<boolean, never, R>\n  <A, E, R>(self: Effect.Effect<A, E, R>, deferred: Deferred.Deferred<A, E>): Effect.Effect<boolean, never, R>\n} = dual(\n  2,\n  <A, E, R>(self: Effect.Effect<A, E, R>, deferred: Deferred.Deferred<A, E>): Effect.Effect<boolean, never, R> =>\n    uninterruptibleMask((restore) =>\n      flatMap(\n        exit(restore(self)),\n        (exit) => deferredDone(deferred, exit)\n      )\n    )\n)\n\n/* @internal */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, f: (a: A) => B): Effect.Effect<B, E, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, f: (a: A) => B): Effect.Effect<B, E, R> =>\n    flatMap(self, (a) => sync(() => f(a)))\n)\n\n/* @internal */\nexport const mapBoth: {\n  <E, E2, A, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2, R>\n  <A, E, R, E2, A2>(\n    self: Effect.Effect<A, E, R>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Effect.Effect<A2, E2, R>\n} = dual(2, <A, E, R, E2, A2>(\n  self: Effect.Effect<A, E, R>,\n  options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n): Effect.Effect<A2, E2, R> =>\n  matchEffect(self, {\n    onFailure: (e) => failSync(() => options.onFailure(e)),\n    onSuccess: (a) => sync(() => options.onSuccess(a))\n  }))\n\n/* @internal */\nexport const mapError: {\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (e: E) => E2): Effect.Effect<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (e: E) => E2): Effect.Effect<A, E2, R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => {\n        const either = internalCause.failureOrCause(cause)\n        switch (either._tag) {\n          case \"Left\": {\n            return failSync(() => f(either.left))\n          }\n          case \"Right\": {\n            return failCause(either.right)\n          }\n        }\n      },\n      onSuccess: succeed\n    })\n)\n\n/* @internal */\nexport const onError: {\n  <E, X, R2>(\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R>\n} = dual(2, <A, E, R, X, R2>(\n  self: Effect.Effect<A, E, R>,\n  cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n): Effect.Effect<A, E, R2 | R> =>\n  onExit(self, (exit) => exitIsSuccess(exit) ? void_ : cleanup(exit.effect_instruction_i0)))\n\n/* @internal */\nexport const onExit: {\n  <A, E, X, R2>(\n    cleanup: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    cleanup: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R>\n} = dual(2, <A, E, R, X, R2>(\n  self: Effect.Effect<A, E, R>,\n  cleanup: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n): Effect.Effect<A, E, R2 | R> =>\n  uninterruptibleMask((restore) =>\n    matchCauseEffect(restore(self), {\n      onFailure: (cause1) => {\n        const result = exitFailCause(cause1)\n        return matchCauseEffect(cleanup(result), {\n          onFailure: (cause2) => exitFailCause(internalCause.sequential(cause1, cause2)),\n          onSuccess: () => result\n        })\n      },\n      onSuccess: (success) => {\n        const result = exitSucceed(success)\n        return zipRight(cleanup(result), result)\n      }\n    })\n  ))\n\n/* @internal */\nexport const onInterrupt: {\n  <X, R2>(\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect.Effect<X, never, R2>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R>\n} = dual(2, <A, E, R, X, R2>(\n  self: Effect.Effect<A, E, R>,\n  cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect.Effect<X, never, R2>\n): Effect.Effect<A, E, R2 | R> =>\n  onExit(\n    self,\n    exitMatch({\n      onFailure: (cause) =>\n        internalCause.isInterruptedOnly(cause)\n          ? asVoid(cleanup(internalCause.interruptors(cause)))\n          : void_,\n      onSuccess: () => void_\n    })\n  ))\n\n/* @internal */\nexport const orElse: {\n  <A2, E2, R2>(\n    that: LazyArg<Effect.Effect<A2, E2, R2>>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: LazyArg<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A2 | A, E2, R2 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: LazyArg<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A2 | A, E2, R2 | R> => attemptOrElse(self, that, succeed)\n)\n\n/* @internal */\nexport const orDie = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, never, R> => orDieWith(self, identity)\n\n/* @internal */\nexport const orDieWith: {\n  <E>(f: (error: E) => unknown): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, never, R>\n  <A, E, R>(self: Effect.Effect<A, E, R>, f: (error: E) => unknown): Effect.Effect<A, never, R>\n} = dual(\n  2,\n  <A, E, R>(self: Effect.Effect<A, E, R>, f: (error: E) => unknown): Effect.Effect<A, never, R> =>\n    matchEffect(self, {\n      onFailure: (e) => die(f(e)),\n      onSuccess: succeed\n    })\n)\n\n/* @internal */\nexport const partitionMap = <A, A1, A2>(\n  elements: Iterable<A>,\n  f: (a: A) => Either.Either<A2, A1>\n): [left: Array<A1>, right: Array<A2>] =>\n  Arr.fromIterable(elements).reduceRight(\n    ([lefts, rights], current) => {\n      const either = f(current)\n      switch (either._tag) {\n        case \"Left\": {\n          return [[either.left, ...lefts], rights]\n        }\n        case \"Right\": {\n          return [lefts, [either.right, ...rights]]\n        }\n      }\n    },\n    [Arr.empty<A1>(), Arr.empty<A2>()]\n  )\n\n/* @internal */\nexport const runtimeFlags: Effect.Effect<RuntimeFlags.RuntimeFlags> = withFiberRuntime((_, status) =>\n  succeed(status.runtimeFlags)\n)\n\n/* @internal */\nexport const succeed = <A>(value: A): Effect.Effect<A> => {\n  const effect = new EffectPrimitiveSuccess(OpCodes.OP_SUCCESS) as any\n  effect.effect_instruction_i0 = value\n  return effect\n}\n\n/* @internal */\nexport const suspend = <A, E, R>(effect: LazyArg<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R> =>\n  flatMap(sync(effect), identity)\n\n/* @internal */\nexport const sync = <A>(evaluate: LazyArg<A>): Effect.Effect<A> => {\n  const effect = new EffectPrimitive(OpCodes.OP_SYNC) as any\n  effect.effect_instruction_i0 = evaluate\n  return effect\n}\n\n/* @internal */\nexport const tap = dual<\n  {\n    <A, X>(\n      f: (a: NoInfer<A>) => X\n    ): <E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <A, X, E1, R1>(\n      f: (a: NoInfer<A>) => Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): <E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => Effect.Effect<A, E | E1, R | R1>\n    <X>(\n      f: NotFunction<X>\n    ): <A, E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <X, E1, R1>(\n      f: Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): <A, E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => Effect.Effect<A, E | E1, R | R1>\n  },\n  {\n    <A, E, R, X>(\n      self: Effect.Effect<A, E, R>,\n      f: (a: NoInfer<A>) => X\n    ): [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <A, E, R, X, E1, R1>(\n      self: Effect.Effect<A, E, R>,\n      f: (a: NoInfer<A>) => Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): Effect.Effect<A, E | E1, R | R1>\n    <A, E, R, X>(\n      self: Effect.Effect<A, E, R>,\n      f: NotFunction<X>\n    ): [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <A, E, R, X, E1, R1>(\n      self: Effect.Effect<A, E, R>,\n      f: Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): Effect.Effect<A, E | E1, R | R1>\n  }\n>(\n  (args) => args.length === 3 || args.length === 2 && !(isObject(args[1]) && \"onlyEffect\" in args[1]),\n  <A, E, R, X>(self: Effect.Effect<A, E, R>, f: X) =>\n    flatMap(self, (a) => {\n      const b = typeof f === \"function\" ? (f as any)(a) : f\n      if (isEffect(b)) {\n        return as(b, a)\n      } else if (isPromiseLike(b)) {\n        return async<any, Cause.UnknownException>((resume) => {\n          b.then((_) => resume(succeed(a)), (e) => resume(fail(new UnknownException(e))))\n        })\n      }\n      return succeed(a)\n    })\n)\n\n/* @internal */\nexport const transplant = <A, E, R>(\n  f: (grafter: <A2, E2, R2>(effect: Effect.Effect<A2, E2, R2>) => Effect.Effect<A2, E2, R2>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  withFiberRuntime<A, E, R>((state) => {\n    const scopeOverride = state.getFiberRef(currentForkScopeOverride)\n    const scope = pipe(scopeOverride, Option.getOrElse(() => state.scope()))\n    return f(fiberRefLocally(currentForkScopeOverride, Option.some(scope)))\n  })\n\n/* @internal */\nexport const attemptOrElse: {\n  <A2, E2, R2, A, A3, E3, R3>(\n    that: LazyArg<Effect.Effect<A2, E2, R2>>,\n    onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R2 | R3>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    that: LazyArg<Effect.Effect<A2, E2, R2>>,\n    onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  ): Effect.Effect<A2 | A3, E2 | E3, R | R2 | R3>\n} = dual(3, <A, E, R, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  that: LazyArg<Effect.Effect<A2, E2, R2>>,\n  onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n): Effect.Effect<A2 | A3, E2 | E3, R | R2 | R3> =>\n  matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const defects = internalCause.defects(cause)\n      if (defects.length > 0) {\n        return failCause(Option.getOrThrow(internalCause.keepDefectsAndElectFailures(cause)))\n      }\n      return that()\n    },\n    onSuccess\n  }))\n\n/* @internal */\nexport const uninterruptible: <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = RuntimeFlagsPatch.disable(_runtimeFlags.Interruption)\n  effect.effect_instruction_i1 = () => self\n  return effect\n}\n\n/* @internal */\nexport const uninterruptibleMask = <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect.Effect<AX, EX, RX>) => Effect.Effect<AX, EX, RX>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  custom(f, function() {\n    const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n    effect.effect_instruction_i0 = RuntimeFlagsPatch.disable(_runtimeFlags.Interruption)\n    effect.effect_instruction_i1 = (oldFlags: RuntimeFlags.RuntimeFlags) =>\n      _runtimeFlags.interruption(oldFlags)\n        ? internalCall(() => this.effect_instruction_i0(interruptible))\n        : internalCall(() => this.effect_instruction_i0(uninterruptible))\n    return effect\n  })\n\nconst void_: Effect.Effect<void> = succeed(void 0)\nexport {\n  /* @internal */\n  void_ as void\n}\n\n/* @internal */\nexport const updateRuntimeFlags = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): Effect.Effect<void> => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = patch\n  effect.effect_instruction_i1 = void 0\n  return effect\n}\n\n/* @internal */\nexport const whenEffect: {\n  <E, R>(\n    condition: Effect.Effect<boolean, E, R>\n  ): <A, E2, R2>(\n    effect: Effect.Effect<A, E2, R2>\n  ) => Effect.Effect<Option.Option<A>, E | E2, R | R2>\n  <A, E2, R2, E, R>(\n    self: Effect.Effect<A, E2, R2>,\n    condition: Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Option.Option<A>, E | E2, R | R2>\n} = dual(2, <A, E2, R2, E, R>(\n  self: Effect.Effect<A, E2, R2>,\n  condition: Effect.Effect<boolean, E, R>\n): Effect.Effect<Option.Option<A>, E | E2, R | R2> =>\n  flatMap(condition, (b) => {\n    if (b) {\n      return pipe(self, map(Option.some))\n    }\n    return succeed(Option.none())\n  }))\n\n/* @internal */\nexport const whileLoop = <A, E, R>(\n  options: {\n    readonly while: LazyArg<boolean>\n    readonly body: LazyArg<Effect.Effect<A, E, R>>\n    readonly step: (a: A) => void\n  }\n): Effect.Effect<void, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_WHILE) as any\n  effect.effect_instruction_i0 = options.while\n  effect.effect_instruction_i1 = options.body\n  effect.effect_instruction_i2 = options.step\n  return effect\n}\n\n/* @internal */\nexport const withConcurrency = dual<\n  (concurrency: number | \"unbounded\") => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, concurrency: number | \"unbounded\") => Effect.Effect<A, E, R>\n>(2, (self, concurrency) => fiberRefLocally(self, currentConcurrency, concurrency))\n\n/* @internal */\nexport const withRequestBatching = dual<\n  (requestBatching: boolean) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, requestBatching: boolean) => Effect.Effect<A, E, R>\n>(2, (self, requestBatching) => fiberRefLocally(self, currentRequestBatching, requestBatching))\n\n/* @internal */\nexport const withRuntimeFlags = dual<\n  (update: RuntimeFlagsPatch.RuntimeFlagsPatch) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, update: RuntimeFlagsPatch.RuntimeFlagsPatch) => Effect.Effect<A, E, R>\n>(2, (self, update) => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = update\n  effect.effect_instruction_i1 = () => self\n  return effect\n})\n\n/** @internal */\nexport const withTracerEnabled = dual<\n  (enabled: boolean) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, enabled: boolean) => Effect.Effect<A, E, R>\n>(2, (effect, enabled) =>\n  fiberRefLocally(\n    effect,\n    currentTracerEnabled,\n    enabled\n  ))\n\n/** @internal */\nexport const withTracerTiming = dual<\n  (enabled: boolean) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, enabled: boolean) => Effect.Effect<A, E, R>\n>(2, (effect, enabled) =>\n  fiberRefLocally(\n    effect,\n    currentTracerTimingEnabled,\n    enabled\n  ))\n\n/* @internal */\nexport const yieldNow = (options?: {\n  readonly priority?: number | undefined\n}): Effect.Effect<void> => {\n  const effect = new EffectPrimitive(OpCodes.OP_YIELD) as any\n  return typeof options?.priority !== \"undefined\" ?\n    withSchedulingPriority(effect, options.priority) :\n    effect\n}\n\n/* @internal */\nexport const zip = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<[A, A2], E | E2, R | R2> => flatMap(self, (a) => map(that, (b) => [a, b])))\n\n/* @internal */\nexport const zipFlatten: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ): <A extends ReadonlyArray<any>, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[...A, A2], E | E2, R | R2>\n  <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<[...A, A2], E | E2, R | R2>\n} = dual(2, <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<[...A, A2], E | E2, R | R2> => flatMap(self, (a) => map(that, (b) => [...a, b])))\n\n/* @internal */\nexport const zipLeft: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A, E | E2, R | R2>\n} = dual(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<A, E | E2, R | R2> => flatMap(self, (a) => as(that, a)))\n\n/* @internal */\nexport const zipRight: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2, E | E2, R | R2>\n} = dual(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<A2, E | E2, R | R2> => flatMap(self, () => that))\n\n/* @internal */\nexport const zipWith: {\n  <A2, E2, R2, A, B>(\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E | E2, R | R2>\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B\n  ): Effect.Effect<B, E | E2, R | R2>\n} = dual(3, <A, E, R, A2, E2, R2, B>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  f: (a: A, b: A2) => B\n): Effect.Effect<B, E | E2, R | R2> => flatMap(self, (a) => map(that, (b) => f(a, b))))\n\n/* @internal */\nexport const never: Effect.Effect<never> = async<never>(() => {\n  const interval = setInterval(() => {\n    //\n  }, 2 ** 31 - 1)\n  return sync(() => clearInterval(interval))\n})\n\n// -----------------------------------------------------------------------------\n// Fiber\n// -----------------------------------------------------------------------------\n\n/* @internal */\nexport const interruptFiber = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Exit.Exit<A, E>> =>\n  flatMap(fiberId, (fiberId) => pipe(self, interruptAsFiber(fiberId)))\n\n/* @internal */\nexport const interruptAsFiber = dual<\n  (fiberId: FiberId.FiberId) => <A, E>(self: Fiber.Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>>,\n  <A, E>(self: Fiber.Fiber<A, E>, fiberId: FiberId.FiberId) => Effect.Effect<Exit.Exit<A, E>>\n>(2, (self, fiberId) => flatMap(self.interruptAsFork(fiberId), () => self.await))\n\n// -----------------------------------------------------------------------------\n// LogLevel\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const logLevelAll: LogLevel.LogLevel = {\n  _tag: \"All\",\n  syslog: 0,\n  label: \"ALL\",\n  ordinal: Number.MIN_SAFE_INTEGER,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelFatal: LogLevel.LogLevel = {\n  _tag: \"Fatal\",\n  syslog: 2,\n  label: \"FATAL\",\n  ordinal: 50000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelError: LogLevel.LogLevel = {\n  _tag: \"Error\",\n  syslog: 3,\n  label: \"ERROR\",\n  ordinal: 40000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelWarning: LogLevel.LogLevel = {\n  _tag: \"Warning\",\n  syslog: 4,\n  label: \"WARN\",\n  ordinal: 30000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelInfo: LogLevel.LogLevel = {\n  _tag: \"Info\",\n  syslog: 6,\n  label: \"INFO\",\n  ordinal: 20000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelDebug: LogLevel.LogLevel = {\n  _tag: \"Debug\",\n  syslog: 7,\n  label: \"DEBUG\",\n  ordinal: 10000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelTrace: LogLevel.LogLevel = {\n  _tag: \"Trace\",\n  syslog: 7,\n  label: \"TRACE\",\n  ordinal: 0,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelNone: LogLevel.LogLevel = {\n  _tag: \"None\",\n  syslog: 7,\n  label: \"OFF\",\n  ordinal: Number.MAX_SAFE_INTEGER,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const allLogLevels: ReadonlyArray<LogLevel.LogLevel> = [\n  logLevelAll,\n  logLevelTrace,\n  logLevelDebug,\n  logLevelInfo,\n  logLevelWarning,\n  logLevelError,\n  logLevelFatal,\n  logLevelNone\n]\n\n// -----------------------------------------------------------------------------\n// FiberRef\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst FiberRefSymbolKey = \"effect/FiberRef\"\n\n/** @internal */\nexport const FiberRefTypeId: FiberRef.FiberRefTypeId = Symbol.for(\n  FiberRefSymbolKey\n) as FiberRef.FiberRefTypeId\n\nconst fiberRefVariance = {\n  /* c8 ignore next */\n  _A: (_: any) => _\n}\n\n/* @internal */\nexport const fiberRefGet = <A>(self: FiberRef.FiberRef<A>): Effect.Effect<A> =>\n  fiberRefModify(self, (a) => [a, a] as const)\n\n/* @internal */\nexport const fiberRefGetAndSet = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<A>\n>(2, (self, value) => fiberRefModify(self, (v) => [v, value] as const))\n\n/* @internal */\nexport const fiberRefGetAndUpdate = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<A>\n>(2, (self, f) => fiberRefModify(self, (v) => [v, f(v)] as const))\n\n/* @internal */\nexport const fiberRefGetAndUpdateSome = dual<\n  <A>(\n    pf: (a: A) => Option.Option<A>\n  ) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(\n    self: FiberRef.FiberRef<A>,\n    pf: (a: A) => Option.Option<A>\n  ) => Effect.Effect<A>\n>(2, (self, pf) => fiberRefModify(self, (v) => [v, Option.getOrElse(pf(v), () => v)] as const))\n\n/* @internal */\nexport const fiberRefGetWith = dual<\n  <B, E, R, A>(f: (a: A) => Effect.Effect<B, E, R>) => (self: FiberRef.FiberRef<A>) => Effect.Effect<B, E, R>,\n  <A, B, E, R>(self: FiberRef.FiberRef<A>, f: (a: A) => Effect.Effect<B, E, R>) => Effect.Effect<B, E, R>\n>(2, (self, f) => flatMap(fiberRefGet(self), f))\n\n/* @internal */\nexport const fiberRefSet = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<void>\n>(2, (self, value) => fiberRefModify(self, () => [void 0, value] as const))\n\n/* @internal */\nexport const fiberRefDelete = <A>(self: FiberRef.FiberRef<A>): Effect.Effect<void> =>\n  withFiberRuntime((state) => {\n    state.unsafeDeleteFiberRef(self)\n    return void_\n  })\n\n/* @internal */\nexport const fiberRefReset = <A>(self: FiberRef.FiberRef<A>): Effect.Effect<void> => fiberRefSet(self, self.initial)\n\n/* @internal */\nexport const fiberRefModify = dual<\n  <A, B>(f: (a: A) => readonly [B, A]) => (self: FiberRef.FiberRef<A>) => Effect.Effect<B>,\n  <A, B>(self: FiberRef.FiberRef<A>, f: (a: A) => readonly [B, A]) => Effect.Effect<B>\n>(2, <A, B>(\n  self: FiberRef.FiberRef<A>,\n  f: (a: A) => readonly [B, A]\n): Effect.Effect<B> =>\n  withFiberRuntime((state) => {\n    const [b, a] = f(state.getFiberRef(self) as A)\n    state.setFiberRef(self, a)\n    return succeed(b)\n  }))\n\n/* @internal */\nexport const fiberRefModifySome = <A, B>(\n  self: FiberRef.FiberRef<A>,\n  def: B,\n  f: (a: A) => Option.Option<readonly [B, A]>\n): Effect.Effect<B> => fiberRefModify(self, (v) => Option.getOrElse(f(v), () => [def, v] as const))\n\n/* @internal */\nexport const fiberRefUpdate = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<void>\n>(2, (self, f) => fiberRefModify(self, (v) => [void 0, f(v)] as const))\n\n/* @internal */\nexport const fiberRefUpdateSome = dual<\n  <A>(pf: (a: A) => Option.Option<A>) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void>,\n  <A>(self: FiberRef.FiberRef<A>, pf: (a: A) => Option.Option<A>) => Effect.Effect<void>\n>(2, (self, pf) => fiberRefModify(self, (v) => [void 0, Option.getOrElse(pf(v), () => v)] as const))\n\n/* @internal */\nexport const fiberRefUpdateAndGet = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<A>\n>(2, (self, f) =>\n  fiberRefModify(self, (v) => {\n    const result = f(v)\n    return [result, result] as const\n  }))\n\n/* @internal */\nexport const fiberRefUpdateSomeAndGet = dual<\n  <A>(pf: (a: A) => Option.Option<A>) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, pf: (a: A) => Option.Option<A>) => Effect.Effect<A>\n>(2, (self, pf) =>\n  fiberRefModify(self, (v) => {\n    const result = Option.getOrElse(pf(v), () => v)\n    return [result, result] as const\n  }))\n\n// circular\n/** @internal */\nconst RequestResolverSymbolKey = \"effect/RequestResolver\"\n\n/** @internal */\nexport const RequestResolverTypeId: RequestResolver.RequestResolverTypeId = Symbol.for(\n  RequestResolverSymbolKey\n) as RequestResolver.RequestResolverTypeId\n\nconst requestResolverVariance = {\n  /* c8 ignore next */\n  _A: (_: unknown) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\n/** @internal */\nexport class RequestResolverImpl<in A, out R> implements RequestResolver.RequestResolver<A, R> {\n  readonly [RequestResolverTypeId] = requestResolverVariance\n  constructor(\n    readonly runAll: (\n      requests: Array<Array<Request.Entry<A>>>\n    ) => Effect.Effect<void, never, R>,\n    readonly target?: unknown\n  ) {\n  }\n  [Hash.symbol](): number {\n    return Hash.cached(this, this.target ? Hash.hash(this.target) : Hash.random(this))\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return this.target ?\n      isRequestResolver(that) && Equal.equals(this.target, (that as RequestResolverImpl<any, any>).target) :\n      this === that\n  }\n  identified(...ids: Array<unknown>): RequestResolver.RequestResolver<A, R> {\n    return new RequestResolverImpl(this.runAll, Chunk.fromIterable(ids))\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isRequestResolver = (u: unknown): u is RequestResolver.RequestResolver<unknown, unknown> =>\n  hasProperty(u, RequestResolverTypeId)\n\n// end\n\n/** @internal */\nexport const resolverLocally = dual<\n  <A>(\n    self: FiberRef.FiberRef<A>,\n    value: A\n  ) => <R, B extends Request.Request<any, any>>(\n    use: RequestResolver.RequestResolver<B, R>\n  ) => RequestResolver.RequestResolver<B, R>,\n  <R, B extends Request.Request<any, any>, A>(\n    use: RequestResolver.RequestResolver<B, R>,\n    self: FiberRef.FiberRef<A>,\n    value: A\n  ) => RequestResolver.RequestResolver<B, R>\n>(3, <R, B extends Request.Request<any, any>, A>(\n  use: RequestResolver.RequestResolver<B, R>,\n  self: FiberRef.FiberRef<A>,\n  value: A\n): RequestResolver.RequestResolver<B, R> =>\n  new RequestResolverImpl<B, R>(\n    (requests) =>\n      fiberRefLocally(\n        use.runAll(requests),\n        self,\n        value\n      ),\n    Chunk.make(\"Locally\", use, self, value)\n  ))\n\n/** @internal */\nexport const requestBlockLocally = <A>(\n  self: BlockedRequests.RequestBlock,\n  ref: FiberRef.FiberRef<A>,\n  value: A\n): BlockedRequests.RequestBlock => _blockedRequests.reduce(self, LocallyReducer(ref, value))\n\nconst LocallyReducer = <A>(\n  ref: FiberRef.FiberRef<A>,\n  value: A\n): BlockedRequests.RequestBlock.Reducer<BlockedRequests.RequestBlock> => ({\n  emptyCase: () => _blockedRequests.empty,\n  parCase: (left, right) => _blockedRequests.par(left, right),\n  seqCase: (left, right) => _blockedRequests.seq(left, right),\n  singleCase: (dataSource, blockedRequest) =>\n    _blockedRequests.single(\n      resolverLocally(dataSource, ref, value),\n      blockedRequest as any\n    )\n})\n\n/* @internal */\nexport const fiberRefLocally: {\n  <A>(self: FiberRef.FiberRef<A>, value: A): <B, E, R>(use: Effect.Effect<B, E, R>) => Effect.Effect<B, E, R>\n  <B, E, R, A>(use: Effect.Effect<B, E, R>, self: FiberRef.FiberRef<A>, value: A): Effect.Effect<B, E, R>\n} = dual(\n  3,\n  <B, E, R, A>(use: Effect.Effect<B, E, R>, self: FiberRef.FiberRef<A>, value: A): Effect.Effect<B, E, R> =>\n    acquireUseRelease(\n      zipLeft(fiberRefGet(self), fiberRefSet(self, value)),\n      () => use,\n      (oldValue) => fiberRefSet(self, oldValue)\n    )\n)\n\n/* @internal */\nexport const fiberRefLocallyWith = dual<\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => <B, E, R>(use: Effect.Effect<B, E, R>) => Effect.Effect<B, E, R>,\n  <B, E, R, A>(use: Effect.Effect<B, E, R>, self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<B, E, R>\n>(3, (use, self, f) => fiberRefGetWith(self, (a) => fiberRefLocally(use, self, f(a))))\n\n/** @internal */\nexport const fiberRefUnsafeMake = <Value>(\n  initial: Value,\n  options?: {\n    readonly fork?: ((a: Value) => Value) | undefined\n    readonly join?: ((left: Value, right: Value) => Value) | undefined\n  }\n): FiberRef.FiberRef<Value> =>\n  fiberRefUnsafeMakePatch(initial, {\n    differ: internalDiffer.update(),\n    fork: options?.fork ?? identity,\n    join: options?.join\n  })\n\n/** @internal */\nexport const fiberRefUnsafeMakeHashSet = <A>(\n  initial: HashSet.HashSet<A>\n): FiberRef.FiberRef<HashSet.HashSet<A>> => {\n  const differ = internalDiffer.hashSet<A>()\n  return fiberRefUnsafeMakePatch(initial, {\n    differ,\n    fork: differ.empty\n  })\n}\n\n/** @internal */\nexport const fiberRefUnsafeMakeReadonlyArray = <A>(\n  initial: ReadonlyArray<A>\n): FiberRef.FiberRef<ReadonlyArray<A>> => {\n  const differ = internalDiffer.readonlyArray(internalDiffer.update<A>())\n  return fiberRefUnsafeMakePatch(initial, {\n    differ,\n    fork: differ.empty\n  })\n}\n\n/** @internal */\nexport const fiberRefUnsafeMakeContext = <A>(\n  initial: Context.Context<A>\n): FiberRef.FiberRef<Context.Context<A>> => {\n  const differ = internalDiffer.environment<A>()\n  return fiberRefUnsafeMakePatch(initial, {\n    differ,\n    fork: differ.empty\n  })\n}\n\n/** @internal */\nexport const fiberRefUnsafeMakePatch = <Value, Patch>(\n  initial: Value,\n  options: {\n    readonly differ: Differ.Differ<Value, Patch>\n    readonly fork: Patch\n    readonly join?: ((oldV: Value, newV: Value) => Value) | undefined\n  }\n): FiberRef.FiberRef<Value> => ({\n  [FiberRefTypeId]: fiberRefVariance,\n  initial,\n  diff: (oldValue, newValue) => options.differ.diff(oldValue, newValue),\n  combine: (first, second) => options.differ.combine(first as Patch, second as Patch),\n  patch: (patch) => (oldValue) => options.differ.patch(patch as Patch, oldValue),\n  fork: options.fork,\n  join: options.join ?? ((_, n) => n),\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/** @internal */\nexport const fiberRefUnsafeMakeRuntimeFlags = (\n  initial: RuntimeFlags.RuntimeFlags\n): FiberRef.FiberRef<RuntimeFlags.RuntimeFlags> =>\n  fiberRefUnsafeMakePatch(initial, {\n    differ: _runtimeFlags.differ,\n    fork: _runtimeFlags.differ.empty\n  })\n\n/** @internal */\nexport const currentContext: FiberRef.FiberRef<Context.Context<never>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentContext\"),\n  () => fiberRefUnsafeMakeContext(Context.empty())\n)\n\n/** @internal */\nexport const currentSchedulingPriority: FiberRef.FiberRef<number> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentSchedulingPriority\"),\n  () => fiberRefUnsafeMake(0)\n)\n\n/** @internal */\nexport const currentMaxOpsBeforeYield: FiberRef.FiberRef<number> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentMaxOpsBeforeYield\"),\n  () => fiberRefUnsafeMake(2048)\n)\n\n/** @internal */\nexport const currentLogAnnotations: FiberRef.FiberRef<HashMap.HashMap<string, unknown>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLogAnnotation\"),\n  () => fiberRefUnsafeMake(HashMap.empty())\n)\n\n/** @internal */\nexport const currentLogLevel: FiberRef.FiberRef<LogLevel.LogLevel> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLogLevel\"),\n  () => fiberRefUnsafeMake<LogLevel.LogLevel>(logLevelInfo)\n)\n\n/** @internal */\nexport const currentLogSpan: FiberRef.FiberRef<List.List<LogSpan.LogSpan>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLogSpan\"),\n  () => fiberRefUnsafeMake(List.empty<LogSpan.LogSpan>())\n)\n\n/** @internal */\nexport const withSchedulingPriority = dual<\n  (priority: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, priority: number) => Effect.Effect<A, E, R>\n>(2, (self, scheduler) => fiberRefLocally(self, currentSchedulingPriority, scheduler))\n\n/** @internal */\nexport const withMaxOpsBeforeYield = dual<\n  (priority: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, priority: number) => Effect.Effect<A, E, R>\n>(2, (self, scheduler) => fiberRefLocally(self, currentMaxOpsBeforeYield, scheduler))\n\n/** @internal */\nexport const currentConcurrency: FiberRef.FiberRef<\"unbounded\" | number> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentConcurrency\"),\n  () => fiberRefUnsafeMake<\"unbounded\" | number>(\"unbounded\")\n)\n\n/**\n * @internal\n */\nexport const currentRequestBatching = globalValue(\n  Symbol.for(\"effect/FiberRef/currentRequestBatching\"),\n  () => fiberRefUnsafeMake(true)\n)\n\n/** @internal */\nexport const currentUnhandledErrorLogLevel: FiberRef.FiberRef<Option.Option<LogLevel.LogLevel>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentUnhandledErrorLogLevel\"),\n  () => fiberRefUnsafeMake(Option.some<LogLevel.LogLevel>(logLevelDebug))\n)\n\n/** @internal */\nexport const withUnhandledErrorLogLevel = dual<\n  (level: Option.Option<LogLevel.LogLevel>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, level: Option.Option<LogLevel.LogLevel>) => Effect.Effect<A, E, R>\n>(2, (self, level) => fiberRefLocally(self, currentUnhandledErrorLogLevel, level))\n\n/** @internal */\nexport const currentMetricLabels: FiberRef.FiberRef<ReadonlyArray<MetricLabel.MetricLabel>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentMetricLabels\"),\n  () => fiberRefUnsafeMakeReadonlyArray(Arr.empty())\n)\n\n/* @internal */\nexport const metricLabels: Effect.Effect<ReadonlyArray<MetricLabel.MetricLabel>> = fiberRefGet(\n  currentMetricLabels\n)\n\n/** @internal */\nexport const currentForkScopeOverride: FiberRef.FiberRef<Option.Option<fiberScope.FiberScope>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentForkScopeOverride\"),\n  () =>\n    fiberRefUnsafeMake(Option.none(), {\n      fork: () => Option.none() as Option.Option<fiberScope.FiberScope>,\n      join: (parent, _) => parent\n    })\n)\n\n/** @internal */\nexport const currentInterruptedCause: FiberRef.FiberRef<Cause.Cause<never>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentInterruptedCause\"),\n  () =>\n    fiberRefUnsafeMake(internalCause.empty, {\n      fork: () => internalCause.empty,\n      join: (parent, _) => parent\n    })\n)\n\n/** @internal */\nexport const currentTracerEnabled: FiberRef.FiberRef<boolean> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerEnabled\"),\n  () => fiberRefUnsafeMake(true)\n)\n\n/** @internal */\nexport const currentTracerTimingEnabled: FiberRef.FiberRef<boolean> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerTiming\"),\n  () => fiberRefUnsafeMake(true)\n)\n\n/** @internal */\nexport const currentTracerSpanAnnotations: FiberRef.FiberRef<HashMap.HashMap<string, unknown>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerSpanAnnotations\"),\n  () => fiberRefUnsafeMake(HashMap.empty())\n)\n\n/** @internal */\nexport const currentTracerSpanLinks: FiberRef.FiberRef<Chunk.Chunk<Tracer.SpanLink>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerSpanLinks\"),\n  () => fiberRefUnsafeMake(Chunk.empty())\n)\n\n// -----------------------------------------------------------------------------\n// Scope\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const ScopeTypeId: Scope.ScopeTypeId = Symbol.for(\"effect/Scope\") as Scope.ScopeTypeId\n\n/** @internal */\nexport const CloseableScopeTypeId: Scope.CloseableScopeTypeId = Symbol.for(\n  \"effect/CloseableScope\"\n) as Scope.CloseableScopeTypeId\n\n/* @internal */\nexport const scopeAddFinalizer = (\n  self: Scope.Scope,\n  finalizer: Effect.Effect<unknown>\n): Effect.Effect<void> => self.addFinalizer(() => asVoid(finalizer))\n\n/* @internal */\nexport const scopeAddFinalizerExit = (\n  self: Scope.Scope,\n  finalizer: Scope.Scope.Finalizer\n): Effect.Effect<void> => self.addFinalizer(finalizer)\n\n/* @internal */\nexport const scopeClose = (\n  self: Scope.Scope.Closeable,\n  exit: Exit.Exit<unknown, unknown>\n): Effect.Effect<void> => self.close(exit)\n\n/* @internal */\nexport const scopeFork = (\n  self: Scope.Scope,\n  strategy: ExecutionStrategy.ExecutionStrategy\n): Effect.Effect<Scope.Scope.Closeable> => self.fork(strategy)\n\n// -----------------------------------------------------------------------------\n// Cause\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const causeSquash = <E>(self: Cause.Cause<E>): unknown => {\n  return causeSquashWith(identity)(self)\n}\n\n/** @internal */\nexport const causeSquashWith = dual<\n  <E>(f: (error: E) => unknown) => (self: Cause.Cause<E>) => unknown,\n  <E>(self: Cause.Cause<E>, f: (error: E) => unknown) => unknown\n>(2, (self, f) => {\n  const option = pipe(self, internalCause.failureOption, Option.map(f))\n  switch (option._tag) {\n    case \"None\": {\n      return pipe(\n        internalCause.defects(self),\n        Chunk.head,\n        Option.match({\n          onNone: () => {\n            const interrupts = Arr.fromIterable(internalCause.interruptors(self)).flatMap((fiberId) =>\n              Arr.fromIterable(FiberId.ids(fiberId)).map((id) => `#${id}`)\n            )\n            return new InterruptedException(interrupts ? `Interrupted by fibers: ${interrupts.join(\", \")}` : void 0)\n          },\n          onSome: identity\n        })\n      )\n    }\n    case \"Some\": {\n      return option.value\n    }\n  }\n})\n\n// -----------------------------------------------------------------------------\n// Errors\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const YieldableError: new(message?: string, options?: ErrorOptions) => Cause.YieldableError = (function() {\n  class YieldableError extends globalThis.Error {\n    commit() {\n      return fail(this)\n    }\n    toJSON() {\n      return { ...this }\n    }\n    [NodeInspectSymbol]() {\n      if (this.toString !== globalThis.Error.prototype.toString) {\n        return this.stack ? `${this.toString()}\\n${this.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : this.toString()\n      } else if (\"Bun\" in globalThis) {\n        return internalCause.pretty(internalCause.fail(this), { renderErrorCause: true })\n      }\n      return this\n    }\n  }\n  Object.assign(YieldableError.prototype, StructuralCommitPrototype)\n  return YieldableError as any\n})()\n\nconst makeException = <T extends { _tag: string; message?: string }>(\n  proto: Omit<T, keyof Cause.YieldableError | \"_tag\">,\n  tag: T[\"_tag\"]\n): new(message?: string | undefined) => T => {\n  class Base extends YieldableError {\n    readonly _tag = tag\n  }\n  Object.assign(Base.prototype, proto)\n  ;(Base.prototype as any).name = tag\n  return Base as any\n}\n\n/** @internal */\nexport const RuntimeExceptionTypeId: Cause.RuntimeExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/RuntimeException\"\n) as Cause.RuntimeExceptionTypeId\n\n/** @internal */\nexport const RuntimeException = makeException<Cause.RuntimeException>({\n  [RuntimeExceptionTypeId]: RuntimeExceptionTypeId\n}, \"RuntimeException\")\n\n/** @internal */\nexport const isRuntimeException = (u: unknown): u is Cause.RuntimeException => hasProperty(u, RuntimeExceptionTypeId)\n\n/** @internal */\nexport const InterruptedExceptionTypeId: Cause.InterruptedExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/InterruptedException\"\n) as Cause.InterruptedExceptionTypeId\n\n/** @internal */\nexport const InterruptedException = makeException<Cause.InterruptedException>({\n  [InterruptedExceptionTypeId]: InterruptedExceptionTypeId\n}, \"InterruptedException\")\n\n/** @internal */\nexport const isInterruptedException = (u: unknown): u is Cause.InterruptedException =>\n  hasProperty(u, InterruptedExceptionTypeId)\n\n/** @internal */\nexport const IllegalArgumentExceptionTypeId: Cause.IllegalArgumentExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/IllegalArgument\"\n) as Cause.IllegalArgumentExceptionTypeId\n\n/** @internal */\nexport const IllegalArgumentException = makeException<Cause.IllegalArgumentException>({\n  [IllegalArgumentExceptionTypeId]: IllegalArgumentExceptionTypeId\n}, \"IllegalArgumentException\")\n\n/** @internal */\nexport const isIllegalArgumentException = (u: unknown): u is Cause.IllegalArgumentException =>\n  hasProperty(u, IllegalArgumentExceptionTypeId)\n\n/** @internal */\nexport const NoSuchElementExceptionTypeId: Cause.NoSuchElementExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/NoSuchElement\"\n) as Cause.NoSuchElementExceptionTypeId\n\n/** @internal */\nexport const NoSuchElementException = makeException<Cause.NoSuchElementException>({\n  [NoSuchElementExceptionTypeId]: NoSuchElementExceptionTypeId\n}, \"NoSuchElementException\")\n\n/** @internal */\nexport const isNoSuchElementException = (u: unknown): u is Cause.NoSuchElementException =>\n  hasProperty(u, NoSuchElementExceptionTypeId)\n\n/** @internal */\nexport const InvalidPubSubCapacityExceptionTypeId: Cause.InvalidPubSubCapacityExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/InvalidPubSubCapacityException\"\n) as Cause.InvalidPubSubCapacityExceptionTypeId\n\n/** @internal */\nexport const InvalidPubSubCapacityException = makeException<Cause.InvalidPubSubCapacityException>({\n  [InvalidPubSubCapacityExceptionTypeId]: InvalidPubSubCapacityExceptionTypeId\n}, \"InvalidPubSubCapacityException\")\n\n/** @internal */\nexport const ExceededCapacityExceptionTypeId: Cause.ExceededCapacityExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/ExceededCapacityException\"\n) as Cause.ExceededCapacityExceptionTypeId\n\n/** @internal */\nexport const ExceededCapacityException = makeException<Cause.ExceededCapacityException>({\n  [ExceededCapacityExceptionTypeId]: ExceededCapacityExceptionTypeId\n}, \"ExceededCapacityException\")\n\n/** @internal */\nexport const isExceededCapacityException = (u: unknown): u is Cause.ExceededCapacityException =>\n  hasProperty(u, ExceededCapacityExceptionTypeId)\n\n/** @internal */\nexport const isInvalidCapacityError = (u: unknown): u is Cause.InvalidPubSubCapacityException =>\n  hasProperty(u, InvalidPubSubCapacityExceptionTypeId)\n\n/** @internal */\nexport const TimeoutExceptionTypeId: Cause.TimeoutExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/Timeout\"\n) as Cause.TimeoutExceptionTypeId\n\n/** @internal */\nexport const TimeoutException = makeException<Cause.TimeoutException>({\n  [TimeoutExceptionTypeId]: TimeoutExceptionTypeId\n}, \"TimeoutException\")\n/** @internal */\nexport const timeoutExceptionFromDuration = (duration: Duration.DurationInput): Cause.TimeoutException =>\n  new TimeoutException(`Operation timed out before the specified duration of '${Duration.format(duration)}' elapsed`)\n\n/** @internal */\nexport const isTimeoutException = (u: unknown): u is Cause.TimeoutException => hasProperty(u, TimeoutExceptionTypeId)\n\n/** @internal */\nexport const UnknownExceptionTypeId: Cause.UnknownExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/UnknownException\"\n) as Cause.UnknownExceptionTypeId\n\n/** @internal */\nexport const UnknownException: new(cause: unknown, message?: string | undefined) => Cause.UnknownException =\n  (function() {\n    class UnknownException extends YieldableError {\n      readonly _tag = \"UnknownException\"\n      readonly error: unknown\n      constructor(readonly cause: unknown, message?: string) {\n        super(message ?? \"An unknown error occurred\", { cause })\n        this.error = cause\n      }\n    }\n    Object.assign(UnknownException.prototype, {\n      [UnknownExceptionTypeId]: UnknownExceptionTypeId,\n      name: \"UnknownException\"\n    })\n    return UnknownException as any\n  })()\n\n/** @internal */\nexport const isUnknownException = (u: unknown): u is Cause.UnknownException => hasProperty(u, UnknownExceptionTypeId)\n\n// -----------------------------------------------------------------------------\n// Exit\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const exitIsExit = (u: unknown): u is Exit.Exit<unknown, unknown> =>\n  isEffect(u) && \"_tag\" in u && (u._tag === \"Success\" || u._tag === \"Failure\")\n\n/** @internal */\nexport const exitIsFailure = <A, E>(self: Exit.Exit<A, E>): self is Exit.Failure<A, E> => self._tag === \"Failure\"\n\n/** @internal */\nexport const exitIsSuccess = <A, E>(self: Exit.Exit<A, E>): self is Exit.Success<A, E> => self._tag === \"Success\"\n\n/** @internal */\nexport const exitIsInterrupted = <A, E>(self: Exit.Exit<A, E>): boolean => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return internalCause.isInterrupted(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return false\n  }\n}\n\n/** @internal */\nexport const exitAs = dual<\n  <A2>(value: A2) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E>,\n  <A, E, A2>(self: Exit.Exit<A, E>, value: A2) => Exit.Exit<A2, E>\n>(2, <A, E, A2>(self: Exit.Exit<A, E>, value: A2): Exit.Exit<A2, E> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return exitFailCause(self.effect_instruction_i0)\n    }\n    case OpCodes.OP_SUCCESS: {\n      return exitSucceed(value) as Exit.Exit<A2, E>\n    }\n  }\n})\n\n/** @internal */\nexport const exitAsVoid = <A, E>(self: Exit.Exit<A, E>): Exit.Exit<void, E> => exitAs(self, void 0)\n\n/** @internal */\nexport const exitCauseOption = <A, E>(self: Exit.Exit<A, E>): Option.Option<Cause.Cause<E>> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return Option.some(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return Option.none()\n  }\n}\n\n/** @internal */\nexport const exitCollectAll = <A, E>(\n  exits: Iterable<Exit.Exit<A, E>>,\n  options?: {\n    readonly parallel?: boolean | undefined\n  }\n): Option.Option<Exit.Exit<Array<A>, E>> =>\n  exitCollectAllInternal(exits, options?.parallel ? internalCause.parallel : internalCause.sequential)\n\n/** @internal */\nexport const exitDie = (defect: unknown): Exit.Exit<never> =>\n  exitFailCause(internalCause.die(defect)) as Exit.Exit<never>\n\n/** @internal */\nexport const exitExists: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E>(self: Exit.Exit<A, E>) => self is Exit.Exit<B>\n  <A>(predicate: Predicate<NoInfer<A>>): <E>(self: Exit.Exit<A, E>) => boolean\n  <A, E, B extends A>(self: Exit.Exit<A, E>, refinement: Refinement<A, B>): self is Exit.Exit<B>\n  <A, E>(self: Exit.Exit<A, E>, predicate: Predicate<A>): boolean\n} = dual(2, <A, E, B extends A>(self: Exit.Exit<A, E>, refinement: Refinement<A, B>): self is Exit.Exit<B> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return false\n    case OpCodes.OP_SUCCESS:\n      return refinement(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitFail = <E>(error: E): Exit.Exit<never, E> =>\n  exitFailCause(internalCause.fail(error)) as Exit.Exit<never, E>\n\n/** @internal */\nexport const exitFailCause = <E>(cause: Cause.Cause<E>): Exit.Exit<never, E> => {\n  const effect = new EffectPrimitiveFailure(OpCodes.OP_FAILURE) as any\n  effect.effect_instruction_i0 = cause\n  return effect\n}\n\n/** @internal */\nexport const exitFlatMap = dual<\n  <A, A2, E2>(f: (a: A) => Exit.Exit<A2, E2>) => <E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E | E2>,\n  <A, E, E2, A2>(self: Exit.Exit<A, E>, f: (a: A) => Exit.Exit<A2, E2>) => Exit.Exit<A2, E | E2>\n>(2, <A, E, E2, A2>(self: Exit.Exit<A, E>, f: (a: A) => Exit.Exit<A2, E2>): Exit.Exit<A2, E | E2> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return exitFailCause(self.effect_instruction_i0)\n    }\n    case OpCodes.OP_SUCCESS: {\n      return f(self.effect_instruction_i0)\n    }\n  }\n})\n\n/** @internal */\nexport const exitFlatMapEffect: {\n  <A, E, A2, E2, R>(\n    f: (a: A) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n  ): (self: Exit.Exit<A, E>) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n  <A, E, A2, E2, R>(\n    self: Exit.Exit<A, E>,\n    f: (a: A) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n  ): Effect.Effect<Exit.Exit<A2, E>, E2, R>\n} = dual(2, <A, E, A2, E2, R>(\n  self: Exit.Exit<A, E>,\n  f: (a: A) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n): Effect.Effect<Exit.Exit<A2, E>, E2, R> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return succeed(exitFailCause(self.effect_instruction_i0))\n    }\n    case OpCodes.OP_SUCCESS: {\n      return f(self.effect_instruction_i0)\n    }\n  }\n})\n\n/** @internal */\nexport const exitFlatten = <A, E, E2>(\n  self: Exit.Exit<Exit.Exit<A, E>, E2>\n): Exit.Exit<A, E | E2> => pipe(self, exitFlatMap(identity))\n\n/** @internal */\nexport const exitForEachEffect: {\n  <A, B, E2, R>(\n    f: (a: A) => Effect.Effect<B, E2, R>\n  ): <E>(self: Exit.Exit<A, E>) => Effect.Effect<Exit.Exit<B, E | E2>, never, R>\n  <A, E, B, E2, R>(\n    self: Exit.Exit<A, E>,\n    f: (a: A) => Effect.Effect<B, E2, R>\n  ): Effect.Effect<Exit.Exit<B, E | E2>, never, R>\n} = dual(2, <A, E, B, E2, R>(\n  self: Exit.Exit<A, E>,\n  f: (a: A) => Effect.Effect<B, E2, R>\n): Effect.Effect<Exit.Exit<B, E | E2>, never, R> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return succeed(exitFailCause(self.effect_instruction_i0))\n    }\n    case OpCodes.OP_SUCCESS: {\n      return exit(f(self.effect_instruction_i0))\n    }\n  }\n})\n\n/** @internal */\nexport const exitFromEither = <R, L>(either: Either.Either<R, L>): Exit.Exit<R, L> => {\n  switch (either._tag) {\n    case \"Left\":\n      return exitFail(either.left)\n    case \"Right\":\n      return exitSucceed(either.right)\n  }\n}\n\n/** @internal */\nexport const exitFromOption = <A>(option: Option.Option<A>): Exit.Exit<A, void> => {\n  switch (option._tag) {\n    case \"None\":\n      return exitFail(void 0)\n    case \"Some\":\n      return exitSucceed(option.value)\n  }\n}\n\n/** @internal */\nexport const exitGetOrElse = dual<\n  <E, A2>(orElse: (cause: Cause.Cause<E>) => A2) => <A>(self: Exit.Exit<A, E>) => A | A2,\n  <A, E, A2>(self: Exit.Exit<A, E>, orElse: (cause: Cause.Cause<E>) => A2) => A | A2\n>(2, (self, orElse) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return orElse(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return self.effect_instruction_i0\n  }\n})\n\n/** @internal */\nexport const exitInterrupt = (fiberId: FiberId.FiberId): Exit.Exit<never> =>\n  exitFailCause(internalCause.interrupt(fiberId))\n\n/** @internal */\nexport const exitMap = dual<\n  <A, B>(f: (a: A) => B) => <E>(self: Exit.Exit<A, E>) => Exit.Exit<B, E>,\n  <A, E, B>(self: Exit.Exit<A, E>, f: (a: A) => B) => Exit.Exit<B, E>\n>(2, (self, f) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(f(self.effect_instruction_i0))\n  }\n})\n\n/** @internal */\nexport const exitMapBoth = dual<\n  <E, A, E2, A2>(\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => (self: Exit.Exit<A, E>) => Exit.Exit<A2, E2>,\n  <A, E, E2, A2>(\n    self: Exit.Exit<A, E>,\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => Exit.Exit<A2, E2>\n>(2, (self, { onFailure, onSuccess }) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(pipe(self.effect_instruction_i0, internalCause.map(onFailure)))\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(onSuccess(self.effect_instruction_i0))\n  }\n})\n\n/** @internal */\nexport const exitMapError = dual<\n  <E, E2>(f: (e: E) => E2) => <A>(self: Exit.Exit<A, E>) => Exit.Exit<A, E2>,\n  <A, E, E2>(self: Exit.Exit<A, E>, f: (e: E) => E2) => Exit.Exit<A, E2>\n>(2, (self, f) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(pipe(self.effect_instruction_i0, internalCause.map(f)))\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitMapErrorCause = dual<\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>) => <A>(self: Exit.Exit<A, E>) => Exit.Exit<A, E2>,\n  <E, A, E2>(self: Exit.Exit<A, E>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>) => Exit.Exit<A, E2>\n>(2, (self, f) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(f(self.effect_instruction_i0))\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitMatch = dual<\n  <E, A, Z1, Z2>(options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => Z1\n    readonly onSuccess: (a: A) => Z2\n  }) => (self: Exit.Exit<A, E>) => Z1 | Z2,\n  <A, E, Z1, Z2>(self: Exit.Exit<A, E>, options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => Z1\n    readonly onSuccess: (a: A) => Z2\n  }) => Z1 | Z2\n>(2, (self, { onFailure, onSuccess }) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return onFailure(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return onSuccess(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitMatchEffect = dual<\n  <E, A2, E2, R, A, A3, E3, R2>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ) => (self: Exit.Exit<A, E>) => Effect.Effect<A2 | A3, E2 | E3, R | R2>,\n  <A, E, A2, E2, R, A3, E3, R2>(\n    self: Exit.Exit<A, E>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R2>\n>(2, (self, { onFailure, onSuccess }) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return onFailure(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return onSuccess(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitSucceed = <A>(value: A): Exit.Exit<A> => {\n  const effect = new EffectPrimitiveSuccess(OpCodes.OP_SUCCESS) as any\n  effect.effect_instruction_i0 = value\n  return effect\n}\n\n/** @internal */\nexport const exitVoid: Exit.Exit<void> = exitSucceed(void 0)\n\n/** @internal */\nexport const exitZip = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<[A, A2], E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<[A, A2], E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, a2) => [a, a2],\n    onFailure: internalCause.sequential\n  }))\n\n/** @internal */\nexport const exitZipLeft = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, _) => a,\n    onFailure: internalCause.sequential\n  }))\n\n/** @internal */\nexport const exitZipRight = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A2, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (_, a2) => a2,\n    onFailure: internalCause.sequential\n  }))\n\n/** @internal */\nexport const exitZipPar = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<[A, A2], E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<[A, A2], E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, a2) => [a, a2],\n    onFailure: internalCause.parallel\n  }))\n\n/** @internal */\nexport const exitZipParLeft = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, _) => a,\n    onFailure: internalCause.parallel\n  }))\n\n/** @internal */\nexport const exitZipParRight = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A2, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (_, a2) => a2,\n    onFailure: internalCause.parallel\n  }))\n\n/** @internal */\nexport const exitZipWith = dual<\n  <B, E2, A, C, E>(\n    that: Exit.Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<E | E2>\n    }\n  ) => (self: Exit.Exit<A, E>) => Exit.Exit<C, E | E2>,\n  <A, E, B, E2, C>(\n    self: Exit.Exit<A, E>,\n    that: Exit.Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<E | E2>\n    }\n  ) => Exit.Exit<C, E | E2>\n>(3, (\n  self,\n  that,\n  { onFailure, onSuccess }\n) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      switch (that._tag) {\n        case OpCodes.OP_SUCCESS:\n          return exitFailCause(self.effect_instruction_i0)\n        case OpCodes.OP_FAILURE: {\n          return exitFailCause(onFailure(self.effect_instruction_i0, that.effect_instruction_i0))\n        }\n      }\n    }\n    case OpCodes.OP_SUCCESS: {\n      switch (that._tag) {\n        case OpCodes.OP_SUCCESS:\n          return exitSucceed(onSuccess(self.effect_instruction_i0, that.effect_instruction_i0))\n        case OpCodes.OP_FAILURE:\n          return exitFailCause(that.effect_instruction_i0)\n      }\n    }\n  }\n})\n\nconst exitCollectAllInternal = <A, E>(\n  exits: Iterable<Exit.Exit<A, E>>,\n  combineCauses: (causeA: Cause.Cause<E>, causeB: Cause.Cause<E>) => Cause.Cause<E>\n): Option.Option<Exit.Exit<Array<A>, E>> => {\n  const list = Chunk.fromIterable(exits)\n  if (!Chunk.isNonEmpty(list)) {\n    return Option.none()\n  }\n  return pipe(\n    Chunk.tailNonEmpty(list),\n    Arr.reduce(\n      pipe(Chunk.headNonEmpty(list), exitMap<A, Chunk.Chunk<A>>(Chunk.of)),\n      (accumulator, current) =>\n        pipe(\n          accumulator,\n          exitZipWith(current, {\n            onSuccess: (list, value) => pipe(list, Chunk.prepend(value)),\n            onFailure: combineCauses\n          })\n        )\n    ),\n    exitMap(Chunk.reverse),\n    exitMap((chunk) => Chunk.toReadonlyArray(chunk) as Array<A>),\n    Option.some\n  )\n}\n\n// -----------------------------------------------------------------------------\n// Deferred\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const deferredUnsafeMake = <A, E = never>(fiberId: FiberId.FiberId): Deferred.Deferred<A, E> => ({\n  [deferred.DeferredTypeId]: deferred.deferredVariance,\n  state: MutableRef.make(deferred.pending([])),\n  blockingOn: fiberId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/* @internal */\nexport const deferredMake = <A, E = never>(): Effect.Effect<Deferred.Deferred<A, E>> =>\n  flatMap(fiberId, (id) => deferredMakeAs<A, E>(id))\n\n/* @internal */\nexport const deferredMakeAs = <A, E = never>(fiberId: FiberId.FiberId): Effect.Effect<Deferred.Deferred<A, E>> =>\n  sync(() => deferredUnsafeMake<A, E>(fiberId))\n\n/* @internal */\nexport const deferredAwait = <A, E>(self: Deferred.Deferred<A, E>): Effect.Effect<A, E> =>\n  async<A, E>((resume) => {\n    const state = MutableRef.get(self.state)\n    switch (state._tag) {\n      case DeferredOpCodes.OP_STATE_DONE: {\n        return resume(state.effect)\n      }\n      case DeferredOpCodes.OP_STATE_PENDING: {\n        // we can push here as the internal state is mutable\n        state.joiners.push(resume)\n        return deferredInterruptJoiner(self, resume)\n      }\n    }\n  }, self.blockingOn)\n\n/* @internal */\nexport const deferredComplete: {\n  <A, E>(effect: Effect.Effect<A, E>): (self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean>\n} = dual(\n  2,\n  <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean> =>\n    intoDeferred(effect, self)\n)\n\n/* @internal */\nexport const deferredCompleteWith = dual<\n  <A, E>(effect: Effect.Effect<A, E>) => (self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>) => Effect.Effect<boolean>\n>(2, (self, effect) =>\n  sync(() => {\n    const state = MutableRef.get(self.state)\n    switch (state._tag) {\n      case DeferredOpCodes.OP_STATE_DONE: {\n        return false\n      }\n      case DeferredOpCodes.OP_STATE_PENDING: {\n        MutableRef.set(self.state, deferred.done(effect))\n        for (let i = 0, len = state.joiners.length; i < len; i++) {\n          state.joiners[i](effect)\n        }\n        return true\n      }\n    }\n  }))\n\n/* @internal */\nexport const deferredDone = dual<\n  <A, E>(exit: Exit.Exit<A, E>) => (self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, exit: Exit.Exit<A, E>) => Effect.Effect<boolean>\n>(2, (self, exit) => deferredCompleteWith(self, exit))\n\n/* @internal */\nexport const deferredFail = dual<\n  <E>(error: E) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, error: E) => Effect.Effect<boolean>\n>(2, (self, error) => deferredCompleteWith(self, fail(error)))\n\n/* @internal */\nexport const deferredFailSync = dual<\n  <E>(evaluate: LazyArg<E>) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<E>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, failSync(evaluate)))\n\n/* @internal */\nexport const deferredFailCause = dual<\n  <E>(cause: Cause.Cause<E>) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, cause: Cause.Cause<E>) => Effect.Effect<boolean>\n>(2, (self, cause) => deferredCompleteWith(self, failCause(cause)))\n\n/* @internal */\nexport const deferredFailCauseSync = dual<\n  <E>(evaluate: LazyArg<Cause.Cause<E>>) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<Cause.Cause<E>>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, failCauseSync(evaluate)))\n\n/* @internal */\nexport const deferredDie = dual<\n  (defect: unknown) => <A, E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, defect: unknown) => Effect.Effect<boolean>\n>(2, (self, defect) => deferredCompleteWith(self, die(defect)))\n\n/* @internal */\nexport const deferredDieSync = dual<\n  (evaluate: LazyArg<unknown>) => <A, E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<unknown>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, dieSync(evaluate)))\n\n/* @internal */\nexport const deferredInterrupt = <A, E>(self: Deferred.Deferred<A, E>): Effect.Effect<boolean> =>\n  flatMap(fiberId, (fiberId) => deferredCompleteWith(self, interruptWith(fiberId)))\n\n/* @internal */\nexport const deferredInterruptWith = dual<\n  (fiberId: FiberId.FiberId) => <A, E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, fiberId: FiberId.FiberId) => Effect.Effect<boolean>\n>(2, (self, fiberId) => deferredCompleteWith(self, interruptWith(fiberId)))\n\n/* @internal */\nexport const deferredIsDone = <A, E>(self: Deferred.Deferred<A, E>): Effect.Effect<boolean> =>\n  sync(() => MutableRef.get(self.state)._tag === DeferredOpCodes.OP_STATE_DONE)\n\n/* @internal */\nexport const deferredPoll = <A, E>(\n  self: Deferred.Deferred<A, E>\n): Effect.Effect<Option.Option<Effect.Effect<A, E>>> =>\n  sync(() => {\n    const state = MutableRef.get(self.state)\n    switch (state._tag) {\n      case DeferredOpCodes.OP_STATE_DONE: {\n        return Option.some(state.effect)\n      }\n      case DeferredOpCodes.OP_STATE_PENDING: {\n        return Option.none()\n      }\n    }\n  })\n\n/* @internal */\nexport const deferredSucceed = dual<\n  <A>(value: A) => <E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, value: A) => Effect.Effect<boolean>\n>(2, (self, value) => deferredCompleteWith(self, succeed(value)))\n\n/* @internal */\nexport const deferredSync = dual<\n  <A>(evaluate: LazyArg<A>) => <E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<A>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, sync(evaluate)))\n\n/** @internal */\nexport const deferredUnsafeDone = <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>): void => {\n  const state = MutableRef.get(self.state)\n  if (state._tag === DeferredOpCodes.OP_STATE_PENDING) {\n    MutableRef.set(self.state, deferred.done(effect))\n    for (let i = 0, len = state.joiners.length; i < len; i++) {\n      state.joiners[i](effect)\n    }\n  }\n}\n\nconst deferredInterruptJoiner = <A, E>(\n  self: Deferred.Deferred<A, E>,\n  joiner: (effect: Effect.Effect<A, E>) => void\n): Effect.Effect<void> =>\n  sync(() => {\n    const state = MutableRef.get(self.state)\n    if (state._tag === DeferredOpCodes.OP_STATE_PENDING) {\n      const index = state.joiners.indexOf(joiner)\n      if (index >= 0) {\n        // we can splice here as the internal state is mutable\n        state.joiners.splice(index, 1)\n      }\n    }\n  })\n\n// -----------------------------------------------------------------------------\n// Context\n// -----------------------------------------------------------------------------\n\nconst constContext = fiberRefGet(currentContext)\n\n/* @internal */\nexport const context = <R>(): Effect.Effect<Context.Context<R>, never, R> => constContext as any\n\n/* @internal */\nexport const contextWith = <R0, A>(\n  f: (context: Context.Context<R0>) => A\n): Effect.Effect<A, never, R0> => map(context<R0>(), f)\n\n/* @internal */\nexport const contextWithEffect = <R0, A, E, R>(\n  f: (context: Context.Context<R0>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R | R0> => flatMap(context<R0>(), f)\n\n/* @internal */\nexport const provideContext = dual<\n  <R>(context: Context.Context<R>) => <A, E>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, context: Context.Context<R>) => Effect.Effect<A, E>\n>(2, <A, E, R>(self: Effect.Effect<A, E, R>, context: Context.Context<R>) =>\n  fiberRefLocally(\n    currentContext,\n    context\n  )(self as Effect.Effect<A, E>))\n\n/* @internal */\nexport const provideSomeContext = dual<\n  <R>(context: Context.Context<R>) => <A, E, R1>(self: Effect.Effect<A, E, R1>) => Effect.Effect<A, E, Exclude<R1, R>>,\n  <A, E, R1, R>(self: Effect.Effect<A, E, R1>, context: Context.Context<R>) => Effect.Effect<A, E, Exclude<R1, R>>\n>(2, <A, E, R1, R>(self: Effect.Effect<A, E, R1>, context: Context.Context<R>) =>\n  fiberRefLocallyWith(\n    currentContext,\n    (parent) => Context.merge(parent, context)\n  )(self as Effect.Effect<A, E>))\n\n/* @internal */\nexport const mapInputContext = dual<\n  <R0, R>(\n    f: (context: Context.Context<R0>) => Context.Context<R>\n  ) => <A, E>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R0>,\n  <A, E, R, R0>(\n    self: Effect.Effect<A, E, R>,\n    f: (context: Context.Context<R0>) => Context.Context<R>\n  ) => Effect.Effect<A, E, R0>\n>(2, <A, E, R, R0>(\n  self: Effect.Effect<A, E, R>,\n  f: (context: Context.Context<R0>) => Context.Context<R>\n) => contextWithEffect((context: Context.Context<R0>) => provideContext(self, f(context))))\n\n// -----------------------------------------------------------------------------\n// Tracing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const currentSpanFromFiber = <A, E>(fiber: Fiber.RuntimeFiber<A, E>): Option.Option<Tracer.Span> => {\n  const span = fiber.getFiberRef(currentContext).unsafeMap.get(internalTracer.spanTag.key) as\n    | Tracer.AnySpan\n    | undefined\n  return span !== undefined && span._tag === \"Span\" ? Option.some(span) : Option.none()\n}\n\nconst NoopSpanProto: Tracer.Span = {\n  _tag: \"Span\",\n  spanId: \"noop\",\n  traceId: \"noop\",\n  name: \"noop\",\n  sampled: false,\n  parent: Option.none(),\n  context: Context.empty(),\n  status: {\n    _tag: \"Ended\",\n    startTime: BigInt(0),\n    endTime: BigInt(0),\n    exit: exitVoid\n  },\n  attributes: new Map(),\n  links: [],\n  kind: \"internal\",\n  attribute() {},\n  event() {},\n  end() {}\n}\n\n/** @internal */\nexport const noopSpan = (name: string): Tracer.Span => {\n  const span = Object.create(NoopSpanProto)\n  span.name = name\n  return span\n}\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport * as core from \"./internal/core.js\"\nimport * as internal from \"./internal/deferred.js\"\nimport type * as MutableRef from \"./MutableRef.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const DeferredTypeId: unique symbol = internal.DeferredTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type DeferredTypeId = typeof DeferredTypeId\n\n/**\n * A `Deferred` represents an asynchronous variable that can be set exactly\n * once, with the ability for an arbitrary number of fibers to suspend (by\n * calling `Deferred.await`) and automatically resume when the variable is set.\n *\n * `Deferred` can be used for building primitive actions whose completions\n * require the coordinated action of multiple fibers, and for building\n * higher-level concurrent or asynchronous structures.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Deferred<in out A, in out E = never> extends Deferred.Variance<A, E>, Pipeable {\n  /** @internal */\n  readonly state: MutableRef.MutableRef<internal.State<A, E>>\n  /** @internal */\n  readonly blockingOn: FiberId.FiberId\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Deferred {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<in out A, in out E> {\n    readonly [DeferredTypeId]: {\n      readonly _A: Types.Invariant<A>\n      readonly _E: Types.Invariant<E>\n    }\n  }\n}\n\n/**\n * Creates a new `Deferred`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <A, E = never>() => Effect.Effect<Deferred<A, E>> = core.deferredMake\n\n/**\n * Creates a new `Deferred` from the specified `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const makeAs: <A, E = never>(fiberId: FiberId.FiberId) => Effect.Effect<Deferred<A, E>> = core.deferredMakeAs\n\nconst _await: <A, E>(self: Deferred<A, E>) => Effect.Effect<A, E> = core.deferredAwait\n\nexport {\n  /**\n   * Retrieves the value of the `Deferred`, suspending the fiber running the\n   * workflow until the result is available.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  _await as await\n}\n\n/**\n * Completes the deferred with the result of the specified effect. If the\n * deferred has already been completed, the method will produce false.\n *\n * Note that `Deferred.completeWith` will be much faster, so consider using\n * that if you do not need to memoize the result of the specified effect.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const complete: {\n  <A, E>(effect: Effect.Effect<A, E>): (self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean>\n} = core.deferredComplete\n\n/**\n * Completes the deferred with the result of the specified effect. If the\n * deferred has already been completed, the method will produce false.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const completeWith: {\n  <A, E>(effect: Effect.Effect<A, E>): (self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean>\n} = core.deferredCompleteWith\n\n/**\n * Exits the `Deferred` with the specified `Exit` value, which will be\n * propagated to all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const done: {\n  <A, E>(exit: Exit.Exit<A, E>): (self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, exit: Exit.Exit<A, E>): Effect.Effect<boolean>\n} = core.deferredDone\n\n/**\n * Fails the `Deferred` with the specified error, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const fail: {\n  <E>(error: E): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, error: E): Effect.Effect<boolean>\n} = core.deferredFail\n\n/**\n * Fails the `Deferred` with the specified error, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const failSync: {\n  <E>(evaluate: LazyArg<E>): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<E>): Effect.Effect<boolean>\n} = core.deferredFailSync\n\n/**\n * Fails the `Deferred` with the specified `Cause`, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const failCause: {\n  <E>(cause: Cause.Cause<E>): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, cause: Cause.Cause<E>): Effect.Effect<boolean>\n} = core.deferredFailCause\n\n/**\n * Fails the `Deferred` with the specified `Cause`, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const failCauseSync: {\n  <E>(evaluate: LazyArg<Cause.Cause<E>>): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<Cause.Cause<E>>): Effect.Effect<boolean>\n} = core.deferredFailCauseSync\n\n/**\n * Kills the `Deferred` with the specified defect, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const die: {\n  (defect: unknown): <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, defect: unknown): Effect.Effect<boolean>\n} = core.deferredDie\n\n/**\n * Kills the `Deferred` with the specified defect, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const dieSync: {\n  (evaluate: LazyArg<unknown>): <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<unknown>): Effect.Effect<boolean>\n} = core.deferredDieSync\n\n/**\n * Completes the `Deferred` with interruption. This will interrupt all fibers\n * waiting on the value of the `Deferred` with the `FiberId` of the fiber\n * calling this method.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interrupt: <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean> = core.deferredInterrupt\n\n/**\n * Completes the `Deferred` with interruption. This will interrupt all fibers\n * waiting on the value of the `Deferred` with the specified `FiberId`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interruptWith: {\n  (fiberId: FiberId.FiberId): <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, fiberId: FiberId.FiberId): Effect.Effect<boolean>\n} = core.deferredInterruptWith\n\n/**\n * Returns `true` if this `Deferred` has already been completed with a value or\n * an error, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isDone: <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean> = core.deferredIsDone\n\n/**\n * Returns a `Some<Effect<A, E, R>>` from the `Deferred` if this `Deferred` has\n * already been completed, `None` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const poll: <A, E>(\n  self: Deferred<A, E>\n) => Effect.Effect<Option.Option<Effect.Effect<A, E>>> = core.deferredPoll\n\n/**\n * Completes the `Deferred` with the specified value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const succeed: {\n  <A>(value: A): <E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, value: A): Effect.Effect<boolean>\n} = core.deferredSucceed\n\n/**\n * Completes the `Deferred` with the specified lazily evaluated value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const sync: {\n  <A>(evaluate: LazyArg<A>): <E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<A>): Effect.Effect<boolean>\n} = core.deferredSync\n\n/**\n * Unsafely creates a new `Deferred` from the specified `FiberId`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: <A, E = never>(fiberId: FiberId.FiberId) => Deferred<A, E> = core.deferredUnsafeMake\n\n/**\n * Unsafely exits the `Deferred` with the specified `Exit` value, which will be\n * propagated to all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeDone: <A, E>(self: Deferred<A, E>, effect: Effect.Effect<A, E>) => void = core.deferredUnsafeDone\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as core from \"./internal/core.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * An `Exit<A, E = never>` describes the result of a executing an `Effect` workflow.\n *\n * There are two possible values for an `Exit<A, E>`:\n *   - `Exit.Success` contain a success value of type `A`\n *   - `Exit.Failure` contains a failure `Cause` of type `E`\n *\n * @since 2.0.0\n * @category models\n */\nexport type Exit<A, E = never> = Success<A, E> | Failure<A, E>\n\n/**\n * Represents a failed `Effect` workflow containing the `Cause` of the failure\n * of type `E`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Failure<out A, out E> extends Effect.Effect<A, E>, Pipeable, Inspectable {\n  readonly _tag: \"Failure\"\n  readonly _op: \"Failure\"\n  readonly cause: Cause.Cause<E>\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: ExitUnify<this>\n  [Unify.ignoreSymbol]?: ExitUnifyIgnore\n  /** @internal */\n  readonly effect_instruction_i0: Cause.Cause<E>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface ExitUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Exit?: () => A[Unify.typeSymbol] extends Exit<infer A0, infer E0> | infer _ ? Exit<A0, E0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface ExitUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * Represents a successful `Effect` workflow and containing the returned value\n * of type `A`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Success<out A, out E> extends Effect.Effect<A, E>, Pipeable, Inspectable {\n  readonly _tag: \"Success\"\n  readonly _op: \"Success\"\n  readonly value: A\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: ExitUnify<this>\n  [Unify.ignoreSymbol]?: ExitUnifyIgnore\n  /** @internal */\n  readonly effect_instruction_i0: A\n}\n\n/**\n * Returns `true` if the specified value is an `Exit`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isExit: (u: unknown) => u is Exit<unknown, unknown> = core.exitIsExit\n\n/**\n * Returns `true` if the specified `Exit` is a `Failure`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFailure: <A, E>(self: Exit<A, E>) => self is Failure<A, E> = core.exitIsFailure\n\n/**\n * Returns `true` if the specified `Exit` is a `Success`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSuccess: <A, E>(self: Exit<A, E>) => self is Success<A, E> = core.exitIsSuccess\n\n/**\n * Returns `true` if the specified exit is a `Failure` **and** the `Cause` of\n * the failure was due to interruption, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isInterrupted: <A, E>(self: Exit<A, E>) => boolean = core.exitIsInterrupted\n\n/**\n * Maps the `Success` value of the specified exit to the provided constant\n * value.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  <A2>(value: A2): <A, E>(self: Exit<A, E>) => Exit<A2, E>\n  <A, E, A2>(self: Exit<A, E>, value: A2): Exit<A2, E>\n} = core.exitAs\n\n/**\n * Maps the `Success` value of the specified exit to a void.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const asVoid: <A, E>(self: Exit<A, E>) => Exit<void, E> = core.exitAsVoid\n\n/**\n * Returns a `Some<Cause<E>>` if the specified exit is a `Failure`, `None`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const causeOption: <A, E>(self: Exit<A, E>) => Option.Option<Cause.Cause<E>> = core.exitCauseOption\n\n/**\n * Collects all of the specified exit values into a `Some<Exit<List<A>, E>>`. If\n * the provided iterable contains no elements, `None` will be returned.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const all: <A, E>(\n  exits: Iterable<Exit<A, E>>,\n  options?: { readonly parallel?: boolean | undefined } | undefined\n) => Option.Option<Exit<Array<A>, E>> = core.exitCollectAll\n\n/**\n * Constructs a new `Exit.Failure` from the specified unrecoverable defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Exit<never> = core.exitDie\n\n/**\n * Executes the predicate on the value of the specified exit if it is a\n * `Success`, otherwise returns `false`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const exists: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E>(self: Exit<A, E>) => self is Exit<B>\n  <A>(predicate: Predicate<NoInfer<A>>): <E>(self: Exit<A, E>) => boolean\n  <A, E, B extends A>(self: Exit<A, E>, refinement: Refinement<A, B>): self is Exit<B>\n  <A, E>(self: Exit<A, E>, predicate: Predicate<A>): boolean\n} = core.exitExists\n\n/**\n * Constructs a new `Exit.Failure` from the specified recoverable error of type\n * `E`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Exit<never, E> = core.exitFail\n\n/**\n * Constructs a new `Exit.Failure` from the specified `Cause` of type `E`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Exit<never, E> = core.exitFailCause\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <A, A2, E2>(f: (a: A) => Exit<A2, E2>): <E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  <A, E, E2, A2>(self: Exit<A, E>, f: (a: A) => Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitFlatMap\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMapEffect: {\n  <A, E, A2, E2, R>(\n    f: (a: A) => Effect.Effect<Exit<A2, E>, E2, R>\n  ): (self: Exit<A, E>) => Effect.Effect<Exit<A2, E>, E2, R>\n  <A, E, A2, E2, R>(self: Exit<A, E>, f: (a: A) => Effect.Effect<Exit<A2, E>, E2, R>): Effect.Effect<Exit<A2, E>, E2, R>\n} = core.exitFlatMapEffect\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <A, E, E2>(self: Exit<Exit<A, E>, E2>) => Exit<A, E | E2> = core.exitFlatten\n\n/**\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachEffect: {\n  <A, B, E2, R>(f: (a: A) => Effect.Effect<B, E2, R>): <E>(self: Exit<A, E>) => Effect.Effect<Exit<B, E2 | E>, never, R>\n  <A, E, B, E2, R>(self: Exit<A, E>, f: (a: A) => Effect.Effect<B, E2, R>): Effect.Effect<Exit<B, E | E2>, never, R>\n} = core.exitForEachEffect\n\n/**\n * Converts an `Either<R, L>` into an `Exit<R, L>`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromEither: <R, L>(either: Either.Either<R, L>) => Exit<R, L> = core.exitFromEither\n\n/**\n * Converts an `Option<A>` into an `Exit<void, A>`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromOption: <A>(option: Option.Option<A>) => Exit<A, void> = core.exitFromOption\n\n/**\n * Returns the `A` if specified exit is a `Success`, otherwise returns the\n * alternate `A` value computed from the specified function which receives the\n * `Cause<E>` of the exit `Failure`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrElse: {\n  <E, A2>(orElse: (cause: Cause.Cause<E>) => A2): <A>(self: Exit<A, E>) => A2 | A\n  <A, E, A2>(self: Exit<A, E>, orElse: (cause: Cause.Cause<E>) => A2): A | A2\n} = core.exitGetOrElse\n\n/**\n * Constructs a new `Exit.Failure` from the specified `FiberId` indicating that\n * the `Fiber` running an `Effect` workflow was terminated due to interruption.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const interrupt: (fiberId: FiberId.FiberId) => Exit<never> = core.exitInterrupt\n\n/**\n * Maps over the `Success` value of the specified exit using the provided\n * function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E>(self: Exit<A, E>) => Exit<B, E>\n  <A, E, B>(self: Exit<A, E>, f: (a: A) => B): Exit<B, E>\n} = core.exitMap\n\n/**\n * Maps over the `Success` and `Failure` cases of the specified exit using the\n * provided functions.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapBoth: {\n  <E, A, E2, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): (self: Exit<A, E>) => Exit<A2, E2>\n  <A, E, E2, A2>(\n    self: Exit<A, E>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Exit<A2, E2>\n} = core.exitMapBoth\n\n/**\n * Maps over the error contained in the `Failure` of the specified exit using\n * the provided function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  <E, E2>(f: (e: E) => E2): <A>(self: Exit<A, E>) => Exit<A, E2>\n  <A, E, E2>(self: Exit<A, E>, f: (e: E) => E2): Exit<A, E2>\n} = core.exitMapError\n\n/**\n * Maps over the `Cause` contained in the `Failure` of the specified exit using\n * the provided function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapErrorCause: {\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): <A>(self: Exit<A, E>) => Exit<A, E2>\n  <E, A, E2>(self: Exit<A, E>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Exit<A, E2>\n} = core.exitMapErrorCause\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  <E, A, Z1, Z2>(\n    options: { readonly onFailure: (cause: Cause.Cause<E>) => Z1; readonly onSuccess: (a: A) => Z2 }\n  ): (self: Exit<A, E>) => Z1 | Z2\n  <A, E, Z1, Z2>(\n    self: Exit<A, E>,\n    options: { readonly onFailure: (cause: Cause.Cause<E>) => Z1; readonly onSuccess: (a: A) => Z2 }\n  ): Z1 | Z2\n} = core.exitMatch\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const matchEffect: {\n  <E, A2, E2, R, A, A3, E3, R2>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ): (self: Exit<A, E>) => Effect.Effect<A2 | A3, E2 | E3, R | R2>\n  <A, E, A2, E2, R, A3, E3, R2>(\n    self: Exit<A, E>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ): Effect.Effect<A2 | A3, E2 | E3, R | R2>\n} = core.exitMatchEffect\n\n/**\n * Constructs a new `Exit.Success` containing the specified value of type `A`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Exit<A> = core.exitSucceed\n\nconst void_: Exit<void> = core.exitVoid\nexport {\n  /**\n   * Represents an `Exit` which succeeds with `undefined`.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Sequentially zips the this result with the specified result or else returns\n * the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<[A, A2], E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<[A, A2], E | E2>\n} = core.exitZip\n\n/**\n * Sequentially zips the this result with the specified result discarding the\n * second element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A, E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A, E | E2>\n} = core.exitZipLeft\n\n/**\n * Sequentially zips the this result with the specified result discarding the\n * first element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitZipRight\n\n/**\n * Parallelly zips the this result with the specified result or else returns\n * the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipPar: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<[A, A2], E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<[A, A2], E | E2>\n} = core.exitZipPar\n\n/**\n * Parallelly zips the this result with the specified result discarding the\n * second element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipParLeft: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A, E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A, E | E2>\n} = core.exitZipParLeft\n\n/**\n * Parallelly zips the this result with the specified result discarding the\n * first element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipParRight: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitZipParRight\n\n/**\n * Zips this exit together with that exit using the specified combination\n * functions.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <B, E2, A, C, E>(\n    that: Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<any>\n    }\n  ): (self: Exit<A, E>) => Exit<C, any>\n  <A, E, B, E2, C>(\n    self: Exit<A, E>,\n    that: Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<E | E2>\n    }\n  ): Exit<C, E | E2>\n} = core.exitZipWith\n", "/**\n * @since 2.0.0\n */\nimport type { NonEmptyArray } from \"./Array.js\"\nimport * as Equal from \"./Equal.js\"\nimport { dual } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableHashMap\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MutableHashMap<out K, out V> extends Iterable<[K, V]>, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  /** @internal */\n  readonly referential: Map<K, V>\n  /** @internal */\n  readonly buckets: Map<number, NonEmptyArray<readonly [K & Equal.Equal, V]>>\n  /** @internal */\n  bucketsSize: number\n}\n\nconst MutableHashMapProto: Omit<MutableHashMap<unknown, unknown>, \"referential\" | \"buckets\" | \"bucketsSize\"> = {\n  [TypeId]: TypeId,\n  [Symbol.iterator](this: MutableHashMap<unknown, unknown>): Iterator<[unknown, unknown]> {\n    return new MutableHashMapIterator(this)\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"MutableHashMap\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nclass MutableHashMapIterator<K, V> implements IterableIterator<[K, V]> {\n  readonly referentialIterator: Iterator<[K, V]>\n  bucketIterator: Iterator<[K, V]> | undefined\n\n  constructor(readonly self: MutableHashMap<K, V>) {\n    this.referentialIterator = self.referential[Symbol.iterator]()\n  }\n  next(): IteratorResult<[K, V]> {\n    if (this.bucketIterator !== undefined) {\n      return this.bucketIterator.next()\n    }\n    const result = this.referentialIterator.next()\n    if (result.done) {\n      this.bucketIterator = new BucketIterator(this.self.buckets.values())\n      return this.next()\n    }\n    return result\n  }\n\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return new MutableHashMapIterator(this.self)\n  }\n}\n\nclass BucketIterator<K, V> implements Iterator<[K, V]> {\n  constructor(readonly backing: Iterator<NonEmptyArray<readonly [K, V]>>) {}\n  currentBucket: Iterator<readonly [K, V]> | undefined\n  next(): IteratorResult<[K, V]> {\n    if (this.currentBucket === undefined) {\n      const result = this.backing.next()\n      if (result.done) {\n        return result\n      }\n      this.currentBucket = result.value[Symbol.iterator]()\n    }\n    const result = this.currentBucket.next()\n    if (result.done) {\n      this.currentBucket = undefined\n      return this.next()\n    }\n    return result as IteratorResult<[K, V]>\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <K, V>(): MutableHashMap<K, V> => {\n  const self = Object.create(MutableHashMapProto)\n  self.referential = new Map()\n  self.buckets = new Map()\n  self.bucketsSize = 0\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Entries extends Array<readonly [any, any]>>(\n  ...entries: Entries\n) => MutableHashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> = (...entries) => fromIterable(entries)\n\n/**\n * Creates a new `MutableHashMap` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <K, V>(entries: Iterable<readonly [K, V]>): MutableHashMap<K, V> => {\n  const self = empty<K, V>()\n  for (const [key, value] of entries) {\n    set(self, key, value)\n  }\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const get: {\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => Option.Option<V>\n  <K, V>(self: MutableHashMap<K, V>, key: K): Option.Option<V>\n} = dual<\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => Option.Option<V>,\n  <K, V>(self: MutableHashMap<K, V>, key: K) => Option.Option<V>\n>(2, <K, V>(self: MutableHashMap<K, V>, key: K): Option.Option<V> => {\n  if (Equal.isEqual(key) === false) {\n    return self.referential.has(key) ? Option.some(self.referential.get(key)!) : Option.none()\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return Option.none()\n  }\n\n  return getFromBucket(self, bucket, key)\n})\n\nconst getFromBucket = <K, V>(\n  self: MutableHashMap<K, V>,\n  bucket: NonEmptyArray<readonly [K & Equal.Equal, V]>,\n  key: K & Equal.Equal,\n  remove = false\n): Option.Option<V> => {\n  for (let i = 0, len = bucket.length; i < len; i++) {\n    if (key[Equal.symbol](bucket[i][0])) {\n      const value = bucket[i][1]\n      if (remove) {\n        bucket.splice(i, 1)\n        self.bucketsSize--\n      }\n      return Option.some(value)\n    }\n  }\n\n  return Option.none()\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => boolean\n  <K, V>(self: MutableHashMap<K, V>, key: K): boolean\n} = dual<\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => boolean,\n  <K, V>(self: MutableHashMap<K, V>, key: K) => boolean\n>(2, (self, key) => Option.isSome(get(self, key)))\n\n/**\n * @since 2.0.0\n */\nexport const set: {\n  <K, V>(key: K, value: V): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  <K, V>(self: MutableHashMap<K, V>, key: K, value: V): MutableHashMap<K, V>\n} = dual<\n  <K, V>(key: K, value: V) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  <K, V>(self: MutableHashMap<K, V>, key: K, value: V) => MutableHashMap<K, V>\n>(3, <K, V>(self: MutableHashMap<K, V>, key: K, value: V) => {\n  if (Equal.isEqual(key) === false) {\n    self.referential.set(key, value)\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    self.buckets.set(hash, [[key, value]])\n    self.bucketsSize++\n    return self\n  }\n\n  removeFromBucket(self, bucket, key)\n  bucket.push([key, value])\n  self.bucketsSize++\n  return self\n})\n\nconst removeFromBucket = <K, V>(\n  self: MutableHashMap<K, V>,\n  bucket: NonEmptyArray<readonly [K & Equal.Equal, V]>,\n  key: K & Equal.Equal\n) => {\n  for (let i = 0, len = bucket.length; i < len; i++) {\n    if (key[Equal.symbol](bucket[i][0])) {\n      bucket.splice(i, 1)\n      self.bucketsSize--\n      return\n    }\n  }\n}\n\n/**\n * Updates the value of the specified key within the `MutableHashMap` if it exists.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  <K, V>(key: K, f: (v: V) => V): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V): MutableHashMap<K, V>\n} = dual<\n  <K, V>(key: K, f: (v: V) => V) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V) => MutableHashMap<K, V>\n>(3, <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V) => {\n  if (Equal.isEqual(key) === false) {\n    if (self.referential.has(key)) {\n      self.referential.set(key, f(self.referential.get(key)!))\n    }\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return self\n  }\n\n  const value = getFromBucket(self, bucket, key, true)\n  if (Option.isNone(value)) {\n    return self\n  }\n  bucket.push([key, f(value.value)])\n  self.bucketsSize++\n  return self\n})\n\n/**\n * Set or remove the specified key in the `MutableHashMap` using the specified\n * update function.\n *\n * @since 2.0.0\n */\nexport const modifyAt: {\n  <K, V>(key: K, f: (value: Option.Option<V>) => Option.Option<V>): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  <K, V>(self: MutableHashMap<K, V>, key: K, f: (value: Option.Option<V>) => Option.Option<V>): MutableHashMap<K, V>\n} = dual<\n  <K, V>(\n    key: K,\n    f: (value: Option.Option<V>) => Option.Option<V>\n  ) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  <K, V>(\n    self: MutableHashMap<K, V>,\n    key: K,\n    f: (value: Option.Option<V>) => Option.Option<V>\n  ) => MutableHashMap<K, V>\n>(3, (self, key, f) => {\n  if (Equal.isEqual(key) === false) {\n    const result = f(get(self, key))\n    if (Option.isSome(result)) {\n      set(self, key, result.value)\n    } else {\n      remove(self, key)\n    }\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    const result = f(Option.none())\n    return Option.isSome(result) ? set(self, key, result.value) : self\n  }\n\n  const result = f(getFromBucket(self, bucket, key, true))\n  if (Option.isNone(result)) {\n    if (bucket.length === 0) {\n      self.buckets.delete(hash)\n    }\n    return self\n  }\n  bucket.push([key, result.value])\n  self.bucketsSize++\n  return self\n})\n\n/**\n * @since 2.0.0\n */\nexport const remove: {\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  <K, V>(self: MutableHashMap<K, V>, key: K): MutableHashMap<K, V>\n} = dual<\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  <K, V>(self: MutableHashMap<K, V>, key: K) => MutableHashMap<K, V>\n>(2, <K, V>(self: MutableHashMap<K, V>, key: K) => {\n  if (Equal.isEqual(key) === false) {\n    self.referential.delete(key)\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return self\n  }\n  removeFromBucket(self, bucket, key)\n  if (bucket.length === 0) {\n    self.buckets.delete(hash)\n  }\n  return self\n})\n\n/**\n * @since 2.0.0\n */\nexport const clear = <K, V>(self: MutableHashMap<K, V>) => {\n  self.referential.clear()\n  self.buckets.clear()\n  self.bucketsSize = 0\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const size = <K, V>(self: MutableHashMap<K, V>): number => {\n  return self.referential.size + self.bucketsSize\n}\n", "/**\n * @since 2.0.0\n */\nimport * as Dual from \"./Function.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableList\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface MutableList<out A> extends Iterable<A>, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n\n  /** @internal */\n  head: LinkedListNode<A> | undefined\n  /** @internal */\n  tail: LinkedListNode<A> | undefined\n}\n\nconst MutableListProto: Omit<MutableList<unknown>, \"head\" | \"tail\"> = {\n  [TypeId]: TypeId,\n  [Symbol.iterator](this: MutableList<unknown>): Iterator<unknown> {\n    let done = false\n    let head: LinkedListNode<unknown> | undefined = this.head\n    return {\n      next() {\n        if (done) {\n          return this.return!()\n        }\n        if (head == null) {\n          done = true\n          return this.return!()\n        }\n        const value = head.value\n        head = head.next\n        return { done, value }\n      },\n      return(value?: unknown) {\n        if (!done) {\n          done = true\n        }\n        return { done: true, value }\n      }\n    }\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"MutableList\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\ninterface MutableListImpl<A> extends MutableList<A> {\n  _length: number\n}\n\n/** @internal */\ninterface LinkedListNode<T> {\n  removed: boolean\n  value: T\n  prev: LinkedListNode<T> | undefined\n  next: LinkedListNode<T> | undefined\n}\n\n/** @internal */\nconst makeNode = <T>(value: T): LinkedListNode<T> => ({\n  value,\n  removed: false,\n  prev: undefined,\n  next: undefined\n})\n\n/**\n * Creates an empty `MutableList`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <A>(): MutableList<A> => {\n  const list = Object.create(MutableListProto)\n  list.head = undefined\n  list.tail = undefined\n  list._length = 0\n  return list\n}\n\n/**\n * Creates a new `MutableList` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <A>(iterable: Iterable<A>): MutableList<A> => {\n  const list = empty<A>()\n  for (const element of iterable) {\n    append(list, element)\n  }\n  return list\n}\n\n/**\n * Creates a new `MutableList` from the specified elements.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <A>(...elements: ReadonlyArray<A>): MutableList<A> => fromIterable(elements)\n\n/**\n * Returns `true` if the list contains zero elements, `false`, otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty = <A>(self: MutableList<A>): boolean => length(self) === 0\n\n/**\n * Returns the length of the list.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const length = <A>(self: MutableList<A>): number => (self as MutableListImpl<A>)._length\n\n/**\n * Returns the last element of the list, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const tail = <A>(self: MutableList<A>): A | undefined => self.tail === undefined ? undefined : self.tail.value\n\n/**\n * Returns the first element of the list, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const head = <A>(self: MutableList<A>): A | undefined => self.head === undefined ? undefined : self.head.value\n\n/**\n * Executes the specified function `f` for each element in the list.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  <A>(f: (element: A) => void): (self: MutableList<A>) => void\n  <A>(self: MutableList<A>, f: (element: A) => void): void\n} = Dual.dual<\n  <A>(f: (element: A) => void) => (self: MutableList<A>) => void,\n  <A>(self: MutableList<A>, f: (element: A) => void) => void\n>(2, (self, f) => {\n  let current = self.head\n  while (current !== undefined) {\n    f(current.value)\n    current = current.next\n  }\n})\n\n/**\n * Removes all elements from the doubly-linked list.\n *\n * @since 2.0.0\n */\nexport const reset = <A>(self: MutableList<A>): MutableList<A> => {\n  ;(self as MutableListImpl<A>)._length = 0\n  self.head = undefined\n  self.tail = undefined\n  return self\n}\n\n/**\n * Appends the specified element to the end of the `MutableList`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  <A>(value: A): (self: MutableList<A>) => MutableList<A>\n  <A>(self: MutableList<A>, value: A): MutableList<A>\n} = Dual.dual<\n  <A>(value: A) => (self: MutableList<A>) => MutableList<A>,\n  <A>(self: MutableList<A>, value: A) => MutableList<A>\n>(2, <A>(self: MutableList<A>, value: A) => {\n  const node = makeNode(value)\n  if (self.head === undefined) {\n    self.head = node\n  }\n  if (self.tail === undefined) {\n    self.tail = node\n  } else {\n    self.tail.next = node\n    node.prev = self.tail\n    self.tail = node\n  }\n  ;(self as MutableListImpl<A>)._length += 1\n  return self\n})\n\n/**\n * Removes the first value from the list and returns it, if it exists.\n *\n * @since 0.0.1\n */\nexport const shift = <A>(self: MutableList<A>): A | undefined => {\n  const head = self.head\n  if (head !== undefined) {\n    remove(self, head)\n    return head.value\n  }\n  return undefined\n}\n\n/**\n * Removes the last value from the list and returns it, if it exists.\n *\n * @since 0.0.1\n */\nexport const pop = <A>(self: MutableList<A>): A | undefined => {\n  const tail = self.tail\n  if (tail !== undefined) {\n    remove(self, tail)\n    return tail.value\n  }\n  return undefined\n}\n\n/**\n * Prepends the specified value to the beginning of the list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  <A>(value: A): (self: MutableList<A>) => MutableList<A>\n  <A>(self: MutableList<A>, value: A): MutableList<A>\n} = Dual.dual<\n  <A>(value: A) => (self: MutableList<A>) => MutableList<A>,\n  <A>(self: MutableList<A>, value: A) => MutableList<A>\n>(2, <A>(self: MutableList<A>, value: A) => {\n  const node = makeNode(value)\n  node.next = self.head\n  if (self.head !== undefined) {\n    self.head.prev = node\n  }\n  self.head = node\n  if (self.tail === undefined) {\n    self.tail = node\n  }\n  ;(self as MutableListImpl<A>)._length += 1\n  return self\n})\n\nconst remove = <A>(self: MutableList<A>, node: LinkedListNode<A>): void => {\n  if (node.removed) {\n    return\n  }\n  node.removed = true\n  if (node.prev !== undefined && node.next !== undefined) {\n    node.prev.next = node.next\n    node.next.prev = node.prev\n  } else if (node.prev !== undefined) {\n    self.tail = node.prev\n    node.prev.next = undefined\n  } else if (node.next !== undefined) {\n    self.head = node.next\n    node.next.prev = undefined\n  } else {\n    self.tail = undefined\n    self.head = undefined\n  }\n  if ((self as MutableListImpl<A>)._length > 0) {\n    ;(self as MutableListImpl<A>)._length -= 1\n  }\n}\n", "/**\n * @since 2.0.0\n */\nimport * as Chunk from \"./Chunk.js\"\nimport * as Dual from \"./Function.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport * as MutableList from \"./MutableList.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableQueue\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const EmptyMutableQueue = Symbol.for(\"effect/mutable/MutableQueue/Empty\")\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface MutableQueue<out A> extends Iterable<A>, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n\n  /** @internal */\n  queue: MutableList.MutableList<A>\n  /** @internal */\n  capacity: number | undefined\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace MutableQueue {\n  /**\n   * @since 2.0.0\n   */\n  export type Empty = typeof EmptyMutableQueue\n}\n\nconst MutableQueueProto: Omit<MutableQueue<unknown>, \"queue\" | \"capacity\"> = {\n  [TypeId]: TypeId,\n  [Symbol.iterator]<A>(this: MutableQueue<A>): Iterator<A> {\n    return Array.from(this.queue)[Symbol.iterator]()\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"MutableQueue\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst make = <A>(capacity: number | undefined): MutableQueue<A> => {\n  const queue = Object.create(MutableQueueProto)\n  queue.queue = MutableList.empty()\n  queue.capacity = capacity\n  return queue\n}\n\n/**\n * Creates a new bounded `MutableQueue`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const bounded = <A>(capacity: number): MutableQueue<A> => make(capacity)\n\n/**\n * Creates a new unbounded `MutableQueue`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unbounded = <A>(): MutableQueue<A> => make(undefined)\n\n/**\n * Returns the current number of elements in the queue.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const length = <A>(self: MutableQueue<A>): number => MutableList.length(self.queue)\n\n/**\n * Returns `true` if the queue is empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty = <A>(self: MutableQueue<A>): boolean => MutableList.isEmpty(self.queue)\n\n/**\n * Returns `true` if the queue is full, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFull = <A>(self: MutableQueue<A>): boolean =>\n  self.capacity === undefined ? false : MutableList.length(self.queue) === self.capacity\n\n/**\n * The **maximum** number of elements that a queue can hold.\n *\n * **Note**: unbounded queues can still implement this interface with\n * `capacity = Infinity`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const capacity = <A>(self: MutableQueue<A>): number => self.capacity === undefined ? Infinity : self.capacity\n\n/**\n * Offers an element to the queue.\n *\n * Returns whether the enqueue was successful or not.\n *\n * @since 2.0.0\n */\nexport const offer: {\n  <A>(self: MutableQueue<A>, value: A): boolean\n  <A>(value: A): (self: MutableQueue<A>) => boolean\n} = Dual.dual<\n  <A>(value: A) => (self: MutableQueue<A>) => boolean,\n  <A>(self: MutableQueue<A>, value: A) => boolean\n>(2, <A>(self: MutableQueue<A>, value: A) => {\n  const queueLength = MutableList.length(self.queue)\n  if (self.capacity !== undefined && queueLength === self.capacity) {\n    return false\n  }\n  MutableList.append(value)(self.queue)\n  return true\n})\n\n/**\n * Enqueues a collection of values into the queue.\n *\n * Returns a `Chunk` of the values that were **not** able to be enqueued.\n *\n * @since 2.0.0\n */\nexport const offerAll: {\n  <A>(values: Iterable<A>): (self: MutableQueue<A>) => Chunk.Chunk<A>\n  <A>(self: MutableQueue<A>, values: Iterable<A>): Chunk.Chunk<A>\n} = Dual.dual<\n  <A>(values: Iterable<A>) => (self: MutableQueue<A>) => Chunk.Chunk<A>,\n  <A>(self: MutableQueue<A>, values: Iterable<A>) => Chunk.Chunk<A>\n>(2, <A>(self: MutableQueue<A>, values: Iterable<A>) => {\n  const iterator = values[Symbol.iterator]()\n  let next: IteratorResult<A> | undefined\n  let remainder = Chunk.empty<A>()\n  let offering = true\n  while (offering && (next = iterator.next()) && !next.done) {\n    offering = offer(next.value)(self)\n  }\n  while (next != null && !next.done) {\n    remainder = Chunk.prepend<A>(next.value)(remainder)\n    next = iterator.next()\n  }\n  return Chunk.reverse(remainder)\n})\n\n/**\n * Dequeues an element from the queue.\n *\n * Returns either an element from the queue, or the `def` param.\n *\n * **Note**: if there is no meaningful default for your type, you can always\n * use `poll(MutableQueue.EmptyMutableQueue)`.\n *\n * @since 2.0.0\n */\nexport const poll: {\n  <D>(def: D): <A>(self: MutableQueue<A>) => D | A\n  <A, D>(self: MutableQueue<A>, def: D): A | D\n} = Dual.dual<\n  <D>(def: D) => <A>(self: MutableQueue<A>) => A | D,\n  <A, D>(self: MutableQueue<A>, def: D) => A | D\n>(2, (self, def) => {\n  if (MutableList.isEmpty(self.queue)) {\n    return def\n  }\n  return MutableList.shift(self.queue)!\n})\n\n/**\n * Dequeues up to `n` elements from the queue.\n *\n * Returns a `List` of up to `n` elements.\n *\n * @since 2.0.0\n */\nexport const pollUpTo: {\n  (n: number): <A>(self: MutableQueue<A>) => Chunk.Chunk<A>\n  <A>(self: MutableQueue<A>, n: number): Chunk.Chunk<A>\n} = Dual.dual<\n  (n: number) => <A>(self: MutableQueue<A>) => Chunk.Chunk<A>,\n  <A>(self: MutableQueue<A>, n: number) => Chunk.Chunk<A>\n>(2, <A>(self: MutableQueue<A>, n: number) => {\n  let result = Chunk.empty<A>()\n  let count = 0\n  while (count < n) {\n    const element = poll(EmptyMutableQueue)(self)\n    if (element === EmptyMutableQueue) {\n      break\n    }\n    result = Chunk.prepend(element)(result)\n    count += 1\n  }\n  return Chunk.reverse(result)\n})\n", "import type * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { constFalse } from \"../Function.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nconst ClockSymbolKey = \"effect/Clock\"\n\n/** @internal */\nexport const ClockTypeId: Clock.ClockTypeId = Symbol.for(ClockSymbolKey) as Clock.ClockTypeId\n\n/** @internal */\nexport const clockTag: Context.Tag<Clock.Clock, Clock.Clock> = Context.GenericTag(\"effect/Clock\")\n\n/** @internal */\nexport const MAX_TIMER_MILLIS = 2 ** 31 - 1\n\n/** @internal */\nexport const globalClockScheduler: Clock.ClockScheduler = {\n  unsafeSchedule(task: Clock.Task, duration: Duration.Duration): Clock.CancelToken {\n    const millis = Duration.toMillis(duration)\n    // If the duration is greater than the value allowable by the JS timer\n    // functions, treat the value as an infinite duration\n    if (millis > MAX_TIMER_MILLIS) {\n      return constFalse\n    }\n    let completed = false\n    const handle = setTimeout(() => {\n      completed = true\n      task()\n    }, millis)\n    return () => {\n      clearTimeout(handle)\n      return !completed\n    }\n  }\n}\n\nconst performanceNowNanos = (function() {\n  const bigint1e6 = BigInt(1_000_000)\n  if (typeof performance === \"undefined\") {\n    return () => BigInt(Date.now()) * bigint1e6\n  } else if (typeof performance.timeOrigin === \"number\" && performance.timeOrigin === 0) {\n    return () => BigInt(Math.round(performance.now() * 1_000_000))\n  }\n  const origin = (BigInt(Date.now()) * bigint1e6) - BigInt(Math.round(performance.now() * 1_000_000))\n  return () => origin + BigInt(Math.round(performance.now() * 1_000_000))\n})()\nconst processOrPerformanceNow = (function() {\n  const processHrtime =\n    typeof process === \"object\" && \"hrtime\" in process && typeof process.hrtime.bigint === \"function\" ?\n      process.hrtime :\n      undefined\n  if (!processHrtime) {\n    return performanceNowNanos\n  }\n  const origin = performanceNowNanos() - processHrtime.bigint()\n  return () => origin + processHrtime.bigint()\n})()\n\n/** @internal */\nclass ClockImpl implements Clock.Clock {\n  readonly [ClockTypeId]: Clock.ClockTypeId = ClockTypeId\n\n  unsafeCurrentTimeMillis(): number {\n    return Date.now()\n  }\n\n  unsafeCurrentTimeNanos(): bigint {\n    return processOrPerformanceNow()\n  }\n\n  currentTimeMillis: Effect.Effect<number> = core.sync(() => this.unsafeCurrentTimeMillis())\n\n  currentTimeNanos: Effect.Effect<bigint> = core.sync(() => this.unsafeCurrentTimeNanos())\n\n  scheduler(): Effect.Effect<Clock.ClockScheduler> {\n    return core.succeed(globalClockScheduler)\n  }\n\n  sleep(duration: Duration.Duration): Effect.Effect<void> {\n    return core.async<void>((resume) => {\n      const canceler = globalClockScheduler.unsafeSchedule(() => resume(core.void), duration)\n      return core.asVoid(core.sync(canceler))\n    })\n  }\n}\n\n/** @internal */\nexport const make = (): Clock.Clock => new ClockImpl()\n", "/**\n * This module provides utility functions and type class instances for working with the `number` type in TypeScript.\n * It includes functions for basic arithmetic operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nimport * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as option from \"./internal/option.js\"\nimport type { Option } from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Ordering } from \"./Ordering.js\"\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Tests if a value is a `number`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNumber } from \"effect/Number\"\n *\n * assert.deepStrictEqual(isNumber(2), true)\n * assert.deepStrictEqual(isNumber(\"2\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNumber: (input: unknown) => input is number = predicate.isNumber\n\n/**\n * Provides an addition operation on `number`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { sum } from \"effect/Number\"\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sum: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self + that)\n\n/**\n * Provides a multiplication operation on `number`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { multiply } from \"effect/Number\"\n *\n * assert.deepStrictEqual(multiply(2, 3), 6)\n *\n * @category math\n * @since 2.0.0\n */\nexport const multiply: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self * that)\n\n/**\n * Provides a subtraction operation on `number`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { subtract } from \"effect/Number\"\n *\n * assert.deepStrictEqual(subtract(2, 3), -1)\n *\n * @category math\n * @since 2.0.0\n */\nexport const subtract: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self - that)\n\n/**\n * Provides a division operation on `number`s.\n *\n * @param self - The dividend operand.\n * @param that - The divisor operand.\n *\n * @example\n * import { Number, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Number.divide(6, 3), Option.some(2))\n * assert.deepStrictEqual(Number.divide(6, 0), Option.none())\n *\n * @category math\n * @since 2.0.0\n */\nexport const divide: {\n  (that: number): (self: number) => Option<number>\n  (self: number, that: number): Option<number>\n} = dual(\n  2,\n  (self: number, that: number): Option<number> => that === 0 ? option.none : option.some(self / that)\n)\n\n/**\n * Provides a division operation on `number`s.\n *\n * Throws a `RangeError` if the divisor is `0`.\n *\n * @param self - The dividend operand.\n * @param that - The divisor operand.\n *\n * @example\n * import { unsafeDivide } from \"effect/Number\"\n *\n * assert.deepStrictEqual(unsafeDivide(6, 3), 2)\n *\n * @category math\n * @since 2.0.0\n */\nexport const unsafeDivide: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self / that)\n\n/**\n * Returns the result of adding `1` to a given number.\n *\n * @param n - A `number` to be incremented.\n *\n * @example\n * import { increment } from \"effect/Number\"\n *\n * assert.deepStrictEqual(increment(2), 3)\n *\n * @category math\n * @since 2.0.0\n */\nexport const increment = (n: number): number => n + 1\n\n/**\n * Decrements a number by `1`.\n *\n * @param n - A `number` to be decremented.\n *\n * @example\n * import { decrement } from \"effect/Number\"\n *\n * assert.deepStrictEqual(decrement(3), 2)\n *\n * @category math\n * @since 2.0.0\n */\nexport const decrement = (n: number): number => n - 1\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<number> = equivalence.number\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<number> = order.number\n\n/**\n * Returns `true` if the first argument is less than the second, otherwise `false`.\n *\n * @param self - The first argument.\n * @param that - The second argument.\n *\n * @example\n * import { lessThan } from \"effect/Number\"\n *\n * assert.deepStrictEqual(lessThan(2, 3), true)\n * assert.deepStrictEqual(lessThan(3, 3), false)\n * assert.deepStrictEqual(lessThan(4, 3), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const lessThan: {\n  (that: number): (self: number) => boolean\n  (self: number, that: number): boolean\n} = order.lessThan(Order)\n\n/**\n * Returns a function that checks if a given `number` is less than or equal to the provided one.\n *\n * @param self - The first `number` to compare with.\n * @param that - The second `number` to compare with.\n *\n * @example\n * import { lessThanOrEqualTo } from \"effect/Number\"\n *\n * assert.deepStrictEqual(lessThanOrEqualTo(2, 3), true)\n * assert.deepStrictEqual(lessThanOrEqualTo(3, 3), true)\n * assert.deepStrictEqual(lessThanOrEqualTo(4, 3), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo: {\n  (that: number): (self: number) => boolean\n  (self: number, that: number): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * Returns `true` if the first argument is greater than the second, otherwise `false`.\n *\n * @param self - The first argument.\n * @param that - The second argument.\n *\n * @example\n * import { greaterThan } from \"effect/Number\"\n *\n * assert.deepStrictEqual(greaterThan(2, 3), false)\n * assert.deepStrictEqual(greaterThan(3, 3), false)\n * assert.deepStrictEqual(greaterThan(4, 3), true)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const greaterThan: {\n  (that: number): (self: number) => boolean\n  (self: number, that: number): boolean\n} = order.greaterThan(Order)\n\n/**\n * Returns a function that checks if a given `number` is greater than or equal to the provided one.\n *\n * @param self - The first `number` to compare with.\n * @param that - The second `number` to compare with.\n *\n * @example\n * import { greaterThanOrEqualTo } from \"effect/Number\"\n *\n * assert.deepStrictEqual(greaterThanOrEqualTo(2, 3), false)\n * assert.deepStrictEqual(greaterThanOrEqualTo(3, 3), true)\n * assert.deepStrictEqual(greaterThanOrEqualTo(4, 3), true)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo: {\n  (that: number): (self: number) => boolean\n  (self: number, that: number): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n *\n * @param self - The `number` to check.\n * @param minimum - The `minimum` value to check.\n * @param maximum - The `maximum` value to check.\n *\n * @example\n * import { Number } from \"effect\"\n *\n * const between = Number.between({ minimum: 0, maximum: 5 })\n *\n * assert.deepStrictEqual(between(3), true)\n * assert.deepStrictEqual(between(-1), false)\n * assert.deepStrictEqual(between(6), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const between: {\n  (options: {\n    minimum: number\n    maximum: number\n  }): (self: number) => boolean\n  (self: number, options: {\n    minimum: number\n    maximum: number\n  }): boolean\n} = order.between(Order)\n\n/**\n * Restricts the given `number` to be within the range specified by the `minimum` and `maximum` values.\n *\n * - If the `number` is less than the `minimum` value, the function returns the `minimum` value.\n * - If the `number` is greater than the `maximum` value, the function returns the `maximum` value.\n * - Otherwise, it returns the original `number`.\n *\n * @param self - The `number` to be clamped.\n * @param minimum - The lower end of the range.\n * @param maximum - The upper end of the range.\n *\n * @example\n * import { Number } from \"effect\"\n *\n * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n *\n * @since 2.0.0\n */\nexport const clamp: {\n  (options: {\n    minimum: number\n    maximum: number\n  }): (self: number) => number\n  (self: number, options: {\n    minimum: number\n    maximum: number\n  }): number\n} = order.clamp(Order)\n\n/**\n * Returns the minimum between two `number`s.\n *\n * @param self - The first `number`.\n * @param that - The second `number`.\n *\n * @example\n * import { min } from \"effect/Number\"\n *\n * assert.deepStrictEqual(min(2, 3), 2)\n *\n * @since 2.0.0\n */\nexport const min: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = order.min(Order)\n\n/**\n * Returns the maximum between two `number`s.\n *\n * @param self - The first `number`.\n * @param that - The second `number`.\n *\n * @example\n * import { max } from \"effect/Number\"\n *\n * assert.deepStrictEqual(max(2, 3), 3)\n *\n * @since 2.0.0\n */\nexport const max: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = order.max(Order)\n\n/**\n * Determines the sign of a given `number`.\n *\n * @param n - The `number` to determine the sign of.\n *\n * @example\n * import { sign } from \"effect/Number\"\n *\n * assert.deepStrictEqual(sign(-5), -1)\n * assert.deepStrictEqual(sign(0), 0)\n * assert.deepStrictEqual(sign(5), 1)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sign = (n: number): Ordering => Order(n, 0)\n\n/**\n * Takes an `Iterable` of `number`s and returns their sum as a single `number`.\n *\n * @param collection - The collection of `number`s to sum.\n *\n * @example\n * import { sumAll } from \"effect/Number\"\n *\n * assert.deepStrictEqual(sumAll([2, 3, 4]), 9)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sumAll = (collection: Iterable<number>): number => {\n  let out = 0\n  for (const n of collection) {\n    out += n\n  }\n  return out\n}\n\n/**\n * Takes an `Iterable` of `number`s and returns their multiplication as a single `number`.\n *\n * @param collection - The collection of `number`s to multiply.\n *\n * @example\n * import { multiplyAll } from \"effect/Number\"\n *\n * assert.deepStrictEqual(multiplyAll([2, 3, 4]), 24)\n *\n * @category math\n * @since 2.0.0\n */\nexport const multiplyAll = (collection: Iterable<number>): number => {\n  let out = 1\n  for (const n of collection) {\n    if (n === 0) {\n      return 0\n    }\n    out *= n\n  }\n  return out\n}\n\n/**\n * Returns the remainder left over when one operand is divided by a second operand.\n *\n * It always takes the sign of the dividend.\n *\n * @param self - The dividend.\n * @param divisor - The divisor.\n *\n * @example\n * import { remainder } from \"effect/Number\"\n *\n * assert.deepStrictEqual(remainder(2, 2), 0)\n * assert.deepStrictEqual(remainder(3, 2), 1)\n * assert.deepStrictEqual(remainder(-4, 2), -0)\n *\n * @category math\n * @since 2.0.0\n */\nexport const remainder: {\n  (divisor: number): (self: number) => number\n  (self: number, divisor: number): number\n} = dual(2, (self: number, divisor: number): number => {\n  // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\n  const selfDecCount = (self.toString().split(\".\")[1] || \"\").length\n  const divisorDecCount = (divisor.toString().split(\".\")[1] || \"\").length\n  const decCount = selfDecCount > divisorDecCount ? selfDecCount : divisorDecCount\n  const selfInt = parseInt(self.toFixed(decCount).replace(\".\", \"\"))\n  const divisorInt = parseInt(divisor.toFixed(decCount).replace(\".\", \"\"))\n  return (selfInt % divisorInt) / Math.pow(10, decCount)\n})\n\n/**\n * Returns the next power of 2 from the given number.\n *\n * @param self - The number to find the next power of 2 from.\n *\n * @example\n * import { nextPow2 } from \"effect/Number\"\n *\n * assert.deepStrictEqual(nextPow2(5), 8)\n * assert.deepStrictEqual(nextPow2(17), 32)\n *\n * @category math\n * @since 2.0.0\n */\nexport const nextPow2 = (n: number): number => {\n  const nextPow = Math.ceil(Math.log(n) / Math.log(2))\n  return Math.max(Math.pow(2, nextPow), 2)\n}\n\n/**\n * Tries to parse a `number` from a `string` using the `Number()` function.\n * The following special string values are supported: \"NaN\", \"Infinity\", \"-Infinity\".\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const parse = (s: string): Option<number> => {\n  if (s === \"NaN\") {\n    return option.some(NaN)\n  }\n  if (s === \"Infinity\") {\n    return option.some(Infinity)\n  }\n  if (s === \"-Infinity\") {\n    return option.some(-Infinity)\n  }\n  if (s.trim() === \"\") {\n    return option.none\n  }\n  const n = Number(s)\n  return Number.isNaN(n)\n    ? option.none\n    : option.some(n)\n}\n", "/**\n * This module provides utility functions for working with RegExp in TypeScript.\n *\n * @since 2.0.0\n */\n\n/**\n * Escapes special characters in a regular expression pattern.\n *\n * @example\n * import { RegExp } from \"effect\"\n *\n * assert.deepStrictEqual(RegExp.escape(\"a*b\"), \"a\\\\*b\")\n *\n * @since 2.0.0\n */\nexport const escape = (string: string): string => string.replace(/[/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n", "/** @internal */\nexport type OP_AND = typeof OP_AND\n\n/** @internal */\nexport const OP_AND = \"And\" as const\n\n/** @internal */\nexport type OP_OR = typeof OP_OR\n\n/** @internal */\nexport const OP_OR = \"Or\" as const\n\n/** @internal */\nexport type OP_INVALID_DATA = typeof OP_INVALID_DATA\n\n/** @internal */\nexport const OP_INVALID_DATA = \"InvalidData\" as const\n\n/** @internal */\nexport type OP_MISSING_DATA = typeof OP_MISSING_DATA\n\n/** @internal */\nexport const OP_MISSING_DATA = \"MissingData\" as const\n\n/** @internal */\nexport type OP_SOURCE_UNAVAILABLE = typeof OP_SOURCE_UNAVAILABLE\n\n/** @internal */\nexport const OP_SOURCE_UNAVAILABLE = \"SourceUnavailable\" as const\n\n/** @internal */\nexport type OP_UNSUPPORTED = typeof OP_UNSUPPORTED\n\n/** @internal */\nexport const OP_UNSUPPORTED = \"Unsupported\" as const\n", "import * as RA from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport type * as ConfigError from \"../ConfigError.js\"\nimport * as Either from \"../Either.js\"\nimport { constFalse, constTrue, dual, pipe } from \"../Function.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport * as OpCodes from \"./opCodes/configError.js\"\n\n/** @internal */\nconst ConfigErrorSymbolKey = \"effect/ConfigError\"\n\n/** @internal */\nexport const ConfigErrorTypeId: ConfigError.ConfigErrorTypeId = Symbol.for(\n  ConfigErrorSymbolKey\n) as ConfigError.ConfigErrorTypeId\n\n/** @internal */\nexport const proto = {\n  _tag: \"ConfigError\",\n  [ConfigErrorTypeId]: ConfigErrorTypeId\n}\n\n/** @internal */\nexport const And = (self: ConfigError.ConfigError, that: ConfigError.ConfigError): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_AND\n  error.left = self\n  error.right = that\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.And) {\n      return `${this.left} and ${this.right}`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const Or = (self: ConfigError.ConfigError, that: ConfigError.ConfigError): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_OR\n  error.left = self\n  error.right = that\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.Or) {\n      return `${this.left} or ${this.right}`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const InvalidData = (\n  path: ReadonlyArray<string>,\n  message: string,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_INVALID_DATA\n  error.path = path\n  error.message = message\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.InvalidData) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Invalid data at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const MissingData = (\n  path: ReadonlyArray<string>,\n  message: string,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_MISSING_DATA\n  error.path = path\n  error.message = message\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.MissingData) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Missing data at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const SourceUnavailable = (\n  path: ReadonlyArray<string>,\n  message: string,\n  cause: Cause.Cause<unknown>,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_SOURCE_UNAVAILABLE\n  error.path = path\n  error.message = message\n  error.cause = cause\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.SourceUnavailable) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Source unavailable at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const Unsupported = (\n  path: ReadonlyArray<string>,\n  message: string,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_UNSUPPORTED\n  error.path = path\n  error.message = message\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.Unsupported) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Unsupported operation at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const isConfigError = (u: unknown): u is ConfigError.ConfigError => hasProperty(u, ConfigErrorTypeId)\n\n/** @internal */\nexport const isAnd = (self: ConfigError.ConfigError): self is ConfigError.And => self._op === OpCodes.OP_AND\n\n/** @internal */\nexport const isOr = (self: ConfigError.ConfigError): self is ConfigError.Or => self._op === OpCodes.OP_OR\n\n/** @internal */\nexport const isInvalidData = (self: ConfigError.ConfigError): self is ConfigError.InvalidData =>\n  self._op === OpCodes.OP_INVALID_DATA\n\n/** @internal */\nexport const isMissingData = (self: ConfigError.ConfigError): self is ConfigError.MissingData =>\n  self._op === OpCodes.OP_MISSING_DATA\n\n/** @internal */\nexport const isSourceUnavailable = (self: ConfigError.ConfigError): self is ConfigError.SourceUnavailable =>\n  self._op === OpCodes.OP_SOURCE_UNAVAILABLE\n\n/** @internal */\nexport const isUnsupported = (self: ConfigError.ConfigError): self is ConfigError.Unsupported =>\n  self._op === OpCodes.OP_UNSUPPORTED\n\n/** @internal */\nexport const prefixed: {\n  (prefix: ReadonlyArray<string>): (self: ConfigError.ConfigError) => ConfigError.ConfigError\n  (self: ConfigError.ConfigError, prefix: ReadonlyArray<string>): ConfigError.ConfigError\n} = dual<\n  (prefix: ReadonlyArray<string>) => (self: ConfigError.ConfigError) => ConfigError.ConfigError,\n  (self: ConfigError.ConfigError, prefix: ReadonlyArray<string>) => ConfigError.ConfigError\n>(2, (self, prefix) => {\n  switch (self._op) {\n    case OpCodes.OP_AND: {\n      return And(prefixed(self.left, prefix), prefixed(self.right, prefix))\n    }\n    case OpCodes.OP_OR: {\n      return Or(prefixed(self.left, prefix), prefixed(self.right, prefix))\n    }\n    case OpCodes.OP_INVALID_DATA: {\n      return InvalidData([...prefix, ...self.path], self.message)\n    }\n    case OpCodes.OP_MISSING_DATA: {\n      return MissingData([...prefix, ...self.path], self.message)\n    }\n    case OpCodes.OP_SOURCE_UNAVAILABLE: {\n      return SourceUnavailable([...prefix, ...self.path], self.message, self.cause)\n    }\n    case OpCodes.OP_UNSUPPORTED: {\n      return Unsupported([...prefix, ...self.path], self.message)\n    }\n  }\n})\n\n/** @internal */\nconst IsMissingDataOnlyReducer: ConfigError.ConfigErrorReducer<unknown, boolean> = {\n  andCase: (_, left, right) => left && right,\n  orCase: (_, left, right) => left && right,\n  invalidDataCase: constFalse,\n  missingDataCase: constTrue,\n  sourceUnavailableCase: constFalse,\n  unsupportedCase: constFalse\n}\n\n/** @internal */\ntype ConfigErrorCase = AndCase | OrCase\n\n/** @internal */\ninterface AndCase {\n  readonly _op: \"AndCase\"\n}\n\n/** @internal */\ninterface OrCase {\n  readonly _op: \"OrCase\"\n}\n\n/** @internal */\nexport const reduceWithContext = dual<\n  <C, Z>(context: C, reducer: ConfigError.ConfigErrorReducer<C, Z>) => (self: ConfigError.ConfigError) => Z,\n  <C, Z>(self: ConfigError.ConfigError, context: C, reducer: ConfigError.ConfigErrorReducer<C, Z>) => Z\n>(3, <C, Z>(self: ConfigError.ConfigError, context: C, reducer: ConfigError.ConfigErrorReducer<C, Z>) => {\n  const input: Array<ConfigError.ConfigError> = [self]\n  const output: Array<Either.Either<Z, ConfigErrorCase>> = []\n  while (input.length > 0) {\n    const error = input.pop()!\n    switch (error._op) {\n      case OpCodes.OP_AND: {\n        input.push(error.right)\n        input.push(error.left)\n        output.push(Either.left({ _op: \"AndCase\" }))\n        break\n      }\n      case OpCodes.OP_OR: {\n        input.push(error.right)\n        input.push(error.left)\n        output.push(Either.left({ _op: \"OrCase\" }))\n        break\n      }\n      case OpCodes.OP_INVALID_DATA: {\n        output.push(Either.right(reducer.invalidDataCase(context, error.path, error.message)))\n        break\n      }\n      case OpCodes.OP_MISSING_DATA: {\n        output.push(Either.right(reducer.missingDataCase(context, error.path, error.message)))\n        break\n      }\n      case OpCodes.OP_SOURCE_UNAVAILABLE: {\n        output.push(Either.right(reducer.sourceUnavailableCase(context, error.path, error.message, error.cause)))\n        break\n      }\n      case OpCodes.OP_UNSUPPORTED: {\n        output.push(Either.right(reducer.unsupportedCase(context, error.path, error.message)))\n        break\n      }\n    }\n  }\n  const accumulator: Array<Z> = []\n  while (output.length > 0) {\n    const either = output.pop()!\n    switch (either._op) {\n      case \"Left\": {\n        switch (either.left._op) {\n          case \"AndCase\": {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.andCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n          case \"OrCase\": {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.orCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n        }\n        break\n      }\n      case \"Right\": {\n        accumulator.push(either.right)\n        break\n      }\n    }\n  }\n  if (accumulator.length === 0) {\n    throw new Error(\n      \"BUG: ConfigError.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues\"\n    )\n  }\n  return accumulator.pop()!\n})\n\n/** @internal */\nexport const isMissingDataOnly = (self: ConfigError.ConfigError): boolean =>\n  reduceWithContext(self, void 0, IsMissingDataOnlyReducer)\n", "import * as RA from \"../../Array.js\"\nimport type * as ConfigError from \"../../ConfigError.js\"\nimport type * as PathPatch from \"../../ConfigProviderPathPatch.js\"\nimport * as Either from \"../../Either.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport * as List from \"../../List.js\"\nimport * as Option from \"../../Option.js\"\nimport * as configError from \"../configError.js\"\n\n/** @internal */\nexport const empty: PathPatch.PathPatch = {\n  _tag: \"Empty\"\n}\n\n/** @internal */\nexport const andThen = dual<\n  (that: PathPatch.PathPatch) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, that: PathPatch.PathPatch) => PathPatch.PathPatch\n>(2, (self, that) => ({\n  _tag: \"AndThen\",\n  first: self,\n  second: that\n}))\n\n/** @internal */\nexport const mapName = dual<\n  (f: (string: string) => string) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, f: (string: string) => string) => PathPatch.PathPatch\n>(2, (self, f) => andThen(self, { _tag: \"MapName\", f }))\n\n/** @internal */\nexport const nested = dual<\n  (name: string) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, name: string) => PathPatch.PathPatch\n>(2, (self, name) => andThen(self, { _tag: \"Nested\", name }))\n\n/** @internal */\nexport const unnested = dual<\n  (name: string) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, name: string) => PathPatch.PathPatch\n>(2, (self, name) => andThen(self, { _tag: \"Unnested\", name }))\n\n/** @internal */\nexport const patch = dual<\n  (\n    patch: PathPatch.PathPatch\n  ) => (\n    path: ReadonlyArray<string>\n  ) => Either.Either<ReadonlyArray<string>, ConfigError.ConfigError>,\n  (\n    path: ReadonlyArray<string>,\n    patch: PathPatch.PathPatch\n  ) => Either.Either<ReadonlyArray<string>, ConfigError.ConfigError>\n>(2, (path, patch) => {\n  let input: List.List<PathPatch.PathPatch> = List.of(patch)\n  let output: ReadonlyArray<string> = path\n  while (List.isCons(input)) {\n    const patch: PathPatch.PathPatch = input.head\n    switch (patch._tag) {\n      case \"Empty\": {\n        input = input.tail\n        break\n      }\n      case \"AndThen\": {\n        input = List.cons(patch.first, List.cons(patch.second, input.tail))\n        break\n      }\n      case \"MapName\": {\n        output = RA.map(output, patch.f)\n        input = input.tail\n        break\n      }\n      case \"Nested\": {\n        output = RA.prepend(output, patch.name)\n        input = input.tail\n        break\n      }\n      case \"Unnested\": {\n        const containsName = pipe(\n          RA.head(output),\n          Option.contains(patch.name)\n        )\n        if (containsName) {\n          output = RA.tailNonEmpty(output as RA.NonEmptyArray<string>)\n          input = input.tail\n        } else {\n          return Either.left(configError.MissingData(\n            output,\n            `Expected ${patch.name} to be in path in ConfigProvider#unnested`\n          ))\n        }\n        break\n      }\n    }\n  }\n  return Either.right(output)\n})\n", "/** @internal */\nexport type OP_CONSTANT = typeof OP_CONSTANT\n\n/** @internal */\nexport const OP_CONSTANT = \"Constant\" as const\n\n/** @internal */\nexport type OP_FAIL = typeof OP_FAIL\n\n/** @internal */\nexport const OP_FAIL = \"Fail\" as const\n\n/** @internal */\nexport type OP_FALLBACK = typeof OP_FALLBACK\n\n/** @internal */\nexport const OP_FALLBACK = \"Fallback\" as const\n\n/** @internal */\nexport type OP_DESCRIBED = typeof OP_DESCRIBED\n\n/** @internal */\nexport const OP_DESCRIBED = \"Described\" as const\n\n/** @internal */\nexport type OP_LAZY = typeof OP_LAZY\n\n/** @internal */\nexport const OP_LAZY = \"Lazy\" as const\n\n/** @internal */\nexport type OP_MAP_OR_FAIL = typeof OP_MAP_OR_FAIL\n\n/** @internal */\nexport const OP_MAP_OR_FAIL = \"MapOrFail\" as const\n\n/** @internal */\nexport type OP_NESTED = typeof OP_NESTED\n\n/** @internal */\nexport const OP_NESTED = \"Nested\" as const\n\n/** @internal */\nexport type OP_PRIMITIVE = typeof OP_PRIMITIVE\n\n/** @internal */\nexport const OP_PRIMITIVE = \"Primitive\" as const\n\n/** @internal */\nexport type OP_SEQUENCE = typeof OP_SEQUENCE\n\n/** @internal */\nexport const OP_SEQUENCE = \"Sequence\" as const\n\n/** @internal */\nexport type OP_HASHMAP = typeof OP_HASHMAP\n\n/** @internal */\nexport const OP_HASHMAP = \"HashMap\" as const\n\n/** @internal */\nexport type OP_ZIP_WITH = typeof OP_ZIP_WITH\n\n/** @internal */\nexport const OP_ZIP_WITH = \"ZipWith\" as const\n", "/**\n * Adapted from the `change-case` library.\n *\n * Copyright (c) 2014 Blake Embrey (hello@blakeembrey.com)\n */\n\n/** @internal */\nexport const lowerCase = (str: string) => str.toLowerCase()\n\n/** @internal */\nexport const upperCase = (str: string) => str.toUpperCase()\n\ninterface Options {\n  splitRegexp?: RegExp | ReadonlyArray<RegExp>\n  stripRegexp?: RegExp | ReadonlyArray<RegExp>\n  delimiter?: string\n  transform?: (part: string, index: number, parts: ReadonlyArray<string>) => string\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nconst replace = (input: string, re: RegExp | ReadonlyArray<RegExp>, value: string): string =>\n  re instanceof RegExp\n    ? input.replace(re, value)\n    : re.reduce((input, re) => input.replace(re, value), input)\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g]\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nconst noCase = (input: string, options: Options = {}): string => {\n  const {\n    delimiter = \" \",\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase\n  } = options\n  const result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\")\n  let start = 0\n  let end = result.length\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") {\n    start++\n  }\n  while (result.charAt(end - 1) === \"\\0\") {\n    end--\n  }\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter)\n}\n\nconst pascalCaseTransform = (input: string, index: number): string => {\n  const firstChar = input.charAt(0)\n  const lowerChars = input.substring(1).toLowerCase()\n  if (index > 0 && firstChar >= \"0\" && firstChar <= \"9\") {\n    return `_${firstChar}${lowerChars}`\n  }\n  return `${firstChar.toUpperCase()}${lowerChars}`\n}\n\n/** @internal */\nexport const pascalCase = (input: string, options?: Options): string =>\n  noCase(input, {\n    delimiter: \"\",\n    transform: pascalCaseTransform,\n    ...options\n  })\n\nconst camelCaseTransform = (input: string, index: number): string =>\n  index === 0\n    ? input.toLowerCase()\n    : pascalCaseTransform(input, index)\n\n/** @internal */\nexport const camelCase = (input: string, options?: Options): string =>\n  pascalCase(input, {\n    transform: camelCaseTransform,\n    ...options\n  })\n\n/** @internal */\nexport const constantCase = (input: string, options?: Options): string =>\n  noCase(input, {\n    delimiter: \"_\",\n    transform: upperCase,\n    ...options\n  })\n\n/** @internal */\nexport const kebabCase = (input: string, options?: Options) =>\n  noCase(input, {\n    delimiter: \"-\",\n    ...options\n  })\n\n/** @internal */\nexport const snakeCase = (input: string, options?: Options) =>\n  noCase(input, {\n    delimiter: \"_\",\n    ...options\n  })\n", "import * as Arr from \"../Array.js\"\nimport type * as Config from \"../Config.js\"\nimport type * as ConfigError from \"../ConfigError.js\"\nimport type * as ConfigProvider from \"../ConfigProvider.js\"\nimport type * as PathPatch from \"../ConfigProviderPathPatch.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as number from \"../Number.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as regexp from \"../RegExp.js\"\nimport type * as _config from \"./config.js\"\nimport * as configError from \"./configError.js\"\nimport * as pathPatch from \"./configProvider/pathPatch.js\"\nimport * as core from \"./core.js\"\nimport * as OpCodes from \"./opCodes/config.js\"\nimport * as StringUtils from \"./string-utils.js\"\n\ntype KeyComponent = ConfigProvider.ConfigProvider.KeyComponent\n\nconst concat = <A, B>(l: ReadonlyArray<A>, r: ReadonlyArray<B>): ReadonlyArray<A | B> => [...l, ...r]\n\n/** @internal */\nconst ConfigProviderSymbolKey = \"effect/ConfigProvider\"\n\n/** @internal */\nexport const ConfigProviderTypeId: ConfigProvider.ConfigProviderTypeId = Symbol.for(\n  ConfigProviderSymbolKey\n) as ConfigProvider.ConfigProviderTypeId\n\n/** @internal */\nexport const configProviderTag: Context.Tag<ConfigProvider.ConfigProvider, ConfigProvider.ConfigProvider> = Context\n  .GenericTag(\n    \"effect/ConfigProvider\"\n  )\n\n/** @internal */\nconst FlatConfigProviderSymbolKey = \"effect/ConfigProviderFlat\"\n\n/** @internal */\nexport const FlatConfigProviderTypeId: ConfigProvider.FlatConfigProviderTypeId = Symbol.for(\n  FlatConfigProviderSymbolKey\n) as ConfigProvider.FlatConfigProviderTypeId\n\n/** @internal */\nexport const make = (\n  options: {\n    readonly load: <A>(config: Config.Config<A>) => Effect.Effect<A, ConfigError.ConfigError>\n    readonly flattened: ConfigProvider.ConfigProvider.Flat\n  }\n): ConfigProvider.ConfigProvider => ({\n  [ConfigProviderTypeId]: ConfigProviderTypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  ...options\n})\n\n/** @internal */\nexport const makeFlat = (\n  options: {\n    readonly load: <A>(\n      path: ReadonlyArray<string>,\n      config: Config.Config.Primitive<A>,\n      split: boolean\n    ) => Effect.Effect<Array<A>, ConfigError.ConfigError>\n    readonly enumerateChildren: (\n      path: ReadonlyArray<string>\n    ) => Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError>\n    readonly patch: PathPatch.PathPatch\n  }\n): ConfigProvider.ConfigProvider.Flat => ({\n  [FlatConfigProviderTypeId]: FlatConfigProviderTypeId,\n  patch: options.patch,\n  load: (path, config, split = true) => options.load(path, config, split),\n  enumerateChildren: options.enumerateChildren\n})\n\n/** @internal */\nexport const fromFlat = (flat: ConfigProvider.ConfigProvider.Flat): ConfigProvider.ConfigProvider =>\n  make({\n    load: (config) =>\n      core.flatMap(fromFlatLoop(flat, Arr.empty(), config, false), (chunk) =>\n        Option.match(Arr.head(chunk), {\n          onNone: () =>\n            core.fail(\n              configError.MissingData(\n                Arr.empty(),\n                `Expected a single value having structure: ${config}`\n              )\n            ),\n          onSome: core.succeed\n        })),\n    flattened: flat\n  })\n\n/** @internal */\nexport const fromEnv = (\n  config?: Partial<ConfigProvider.ConfigProvider.FromEnvConfig>\n): ConfigProvider.ConfigProvider => {\n  const { pathDelim, seqDelim } = Object.assign({}, { pathDelim: \"_\", seqDelim: \",\" }, config)\n  const makePathString = (path: ReadonlyArray<string>): string => pipe(path, Arr.join(pathDelim))\n  const unmakePathString = (pathString: string): ReadonlyArray<string> => pathString.split(pathDelim)\n\n  const getEnv = () =>\n    typeof process !== \"undefined\" && \"env\" in process && typeof process.env === \"object\" ? process.env : {}\n\n  const load = <A>(\n    path: ReadonlyArray<string>,\n    primitive: Config.Config.Primitive<A>,\n    split = true\n  ): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n    const pathString = makePathString(path)\n    const current = getEnv()\n    const valueOpt = pathString in current ? Option.some(current[pathString]!) : Option.none()\n    return pipe(\n      valueOpt,\n      core.mapError(() => configError.MissingData(path, `Expected ${pathString} to exist in the process context`)),\n      core.flatMap((value) => parsePrimitive(value, path, primitive, seqDelim, split))\n    )\n  }\n\n  const enumerateChildren = (\n    path: ReadonlyArray<string>\n  ): Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError> =>\n    core.sync(() => {\n      const current = getEnv()\n      const keys = Object.keys(current)\n      const keyPaths = keys.map((value) => unmakePathString(value.toUpperCase()))\n      const filteredKeyPaths = keyPaths.filter((keyPath) => {\n        for (let i = 0; i < path.length; i++) {\n          const pathComponent = pipe(path, Arr.unsafeGet(i))\n          const currentElement = keyPath[i]\n          if (currentElement === undefined || pathComponent !== currentElement) {\n            return false\n          }\n        }\n        return true\n      }).flatMap((keyPath) => keyPath.slice(path.length, path.length + 1))\n      return HashSet.fromIterable(filteredKeyPaths)\n    })\n\n  return fromFlat(makeFlat({ load, enumerateChildren, patch: pathPatch.empty }))\n}\n\n/** @internal */\nexport const fromMap = (\n  map: Map<string, string>,\n  config?: Partial<ConfigProvider.ConfigProvider.FromMapConfig>\n): ConfigProvider.ConfigProvider => {\n  const { pathDelim, seqDelim } = Object.assign({ seqDelim: \",\", pathDelim: \".\" }, config)\n  const makePathString = (path: ReadonlyArray<string>): string => pipe(path, Arr.join(pathDelim))\n  const unmakePathString = (pathString: string): ReadonlyArray<string> => pathString.split(pathDelim)\n  const mapWithIndexSplit = splitIndexInKeys(\n    map,\n    (str) => unmakePathString(str),\n    makePathString\n  )\n  const load = <A>(\n    path: ReadonlyArray<string>,\n    primitive: Config.Config.Primitive<A>,\n    split = true\n  ): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n    const pathString = makePathString(path)\n    const valueOpt = mapWithIndexSplit.has(pathString) ?\n      Option.some(mapWithIndexSplit.get(pathString)!) :\n      Option.none()\n    return pipe(\n      valueOpt,\n      core.mapError(() => configError.MissingData(path, `Expected ${pathString} to exist in the provided map`)),\n      core.flatMap((value) => parsePrimitive(value, path, primitive, seqDelim, split))\n    )\n  }\n  const enumerateChildren = (\n    path: ReadonlyArray<string>\n  ): Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError> =>\n    core.sync(() => {\n      const keyPaths = Arr.fromIterable(mapWithIndexSplit.keys()).map(unmakePathString)\n      const filteredKeyPaths = keyPaths.filter((keyPath) => {\n        for (let i = 0; i < path.length; i++) {\n          const pathComponent = pipe(path, Arr.unsafeGet(i))\n          const currentElement = keyPath[i]\n          if (currentElement === undefined || pathComponent !== currentElement) {\n            return false\n          }\n        }\n        return true\n      }).flatMap((keyPath) => keyPath.slice(path.length, path.length + 1))\n      return HashSet.fromIterable(filteredKeyPaths)\n    })\n\n  return fromFlat(makeFlat({ load, enumerateChildren, patch: pathPatch.empty }))\n}\n\nconst extend = <A, B>(\n  leftDef: (n: number) => A,\n  rightDef: (n: number) => B,\n  left: ReadonlyArray<A>,\n  right: ReadonlyArray<B>\n): [ReadonlyArray<A>, ReadonlyArray<B>] => {\n  const leftPad = Arr.unfold(\n    left.length,\n    (index) =>\n      index >= right.length ?\n        Option.none() :\n        Option.some([leftDef(index), index + 1])\n  )\n  const rightPad = Arr.unfold(\n    right.length,\n    (index) =>\n      index >= left.length ?\n        Option.none() :\n        Option.some([rightDef(index), index + 1])\n  )\n  const leftExtension = concat(left, leftPad)\n  const rightExtension = concat(right, rightPad)\n  return [leftExtension, rightExtension]\n}\n\nconst appendConfigPath = (path: ReadonlyArray<string>, config: Config.Config<unknown>): ReadonlyArray<string> => {\n  let op = config as _config.ConfigPrimitive\n  if (op._tag === \"Nested\") {\n    const out = path.slice()\n    while (op._tag === \"Nested\") {\n      out.push(op.name)\n      op = op.config as _config.ConfigPrimitive\n    }\n    return out\n  }\n  return path\n}\n\nconst fromFlatLoop = <A>(\n  flat: ConfigProvider.ConfigProvider.Flat,\n  prefix: ReadonlyArray<string>,\n  config: Config.Config<A>,\n  split: boolean\n): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n  const op = config as _config.ConfigPrimitive\n  switch (op._tag) {\n    case OpCodes.OP_CONSTANT: {\n      return core.succeed(Arr.of(op.value)) as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_DESCRIBED: {\n      return core.suspend(\n        () => fromFlatLoop(flat, prefix, op.config, split)\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_FAIL: {\n      return core.fail(configError.MissingData(prefix, op.message)) as Effect.Effect<\n        Array<A>,\n        ConfigError.ConfigError\n      >\n    }\n    case OpCodes.OP_FALLBACK: {\n      return pipe(\n        core.suspend(() => fromFlatLoop(flat, prefix, op.first, split)),\n        core.catchAll((error1) => {\n          if (op.condition(error1)) {\n            return pipe(\n              fromFlatLoop(flat, prefix, op.second, split),\n              core.catchAll((error2) => core.fail(configError.Or(error1, error2)))\n            )\n          }\n          return core.fail(error1)\n        })\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_LAZY: {\n      return core.suspend(() => fromFlatLoop(flat, prefix, op.config(), split)) as Effect.Effect<\n        Array<A>,\n        ConfigError.ConfigError\n      >\n    }\n    case OpCodes.OP_MAP_OR_FAIL: {\n      return core.suspend(() =>\n        pipe(\n          fromFlatLoop(flat, prefix, op.original, split),\n          core.flatMap(\n            core.forEachSequential((a) =>\n              pipe(\n                op.mapOrFail(a),\n                core.mapError(configError.prefixed(appendConfigPath(prefix, op.original)))\n              )\n            )\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_NESTED: {\n      return core.suspend(() =>\n        fromFlatLoop(\n          flat,\n          concat(prefix, Arr.of(op.name)),\n          op.config,\n          split\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_PRIMITIVE: {\n      return pipe(\n        pathPatch.patch(prefix, flat.patch),\n        core.flatMap((prefix) =>\n          pipe(\n            flat.load(prefix, op, split),\n            core.flatMap((values) => {\n              if (values.length === 0) {\n                const name = pipe(Arr.last(prefix), Option.getOrElse(() => \"<n/a>\"))\n                return core.fail(configError.MissingData([], `Expected ${op.description} with name ${name}`))\n              }\n              return core.succeed(values)\n            })\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_SEQUENCE: {\n      return pipe(\n        pathPatch.patch(prefix, flat.patch),\n        core.flatMap((patchedPrefix) =>\n          pipe(\n            flat.enumerateChildren(patchedPrefix),\n            core.flatMap(indicesFrom),\n            core.flatMap((indices) => {\n              if (indices.length === 0) {\n                return core.suspend(() =>\n                  core.map(fromFlatLoop(flat, patchedPrefix, op.config, true), Arr.of)\n                ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n              }\n              return pipe(\n                core.forEachSequential(\n                  indices,\n                  (index) => fromFlatLoop(flat, Arr.append(prefix, `[${index}]`), op.config, true)\n                ),\n                core.map((chunkChunk) => {\n                  const flattened = Arr.flatten(chunkChunk)\n                  if (flattened.length === 0) {\n                    return Arr.of(Arr.empty<A>())\n                  }\n                  return Arr.of(flattened)\n                })\n              ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n            })\n          )\n        )\n      )\n    }\n    case OpCodes.OP_HASHMAP: {\n      return core.suspend(() =>\n        pipe(\n          pathPatch.patch(prefix, flat.patch),\n          core.flatMap((prefix) =>\n            pipe(\n              flat.enumerateChildren(prefix),\n              core.flatMap((keys) => {\n                return pipe(\n                  keys,\n                  core.forEachSequential((key) =>\n                    fromFlatLoop(\n                      flat,\n                      concat(prefix, Arr.of(key)),\n                      op.valueConfig,\n                      split\n                    )\n                  ),\n                  core.map((matrix) => {\n                    if (matrix.length === 0) {\n                      return Arr.of(HashMap.empty())\n                    }\n                    return pipe(\n                      transpose(matrix),\n                      Arr.map((values) => HashMap.fromIterable(Arr.zip(Arr.fromIterable(keys), values)))\n                    )\n                  })\n                )\n              })\n            )\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_ZIP_WITH: {\n      return core.suspend(() =>\n        pipe(\n          fromFlatLoop(flat, prefix, op.left, split),\n          core.either,\n          core.flatMap((left) =>\n            pipe(\n              fromFlatLoop(flat, prefix, op.right, split),\n              core.either,\n              core.flatMap((right) => {\n                if (Either.isLeft(left) && Either.isLeft(right)) {\n                  return core.fail(configError.And(left.left, right.left))\n                }\n                if (Either.isLeft(left) && Either.isRight(right)) {\n                  return core.fail(left.left)\n                }\n                if (Either.isRight(left) && Either.isLeft(right)) {\n                  return core.fail(right.left)\n                }\n                if (Either.isRight(left) && Either.isRight(right)) {\n                  const path = pipe(prefix, Arr.join(\".\"))\n                  const fail = fromFlatLoopFail(prefix, path)\n                  const [lefts, rights] = extend(\n                    fail,\n                    fail,\n                    pipe(left.right, Arr.map(Either.right)),\n                    pipe(right.right, Arr.map(Either.right))\n                  )\n                  return pipe(\n                    lefts,\n                    Arr.zip(rights),\n                    core.forEachSequential(([left, right]) =>\n                      pipe(\n                        core.zip(left, right),\n                        core.map(([left, right]) => op.zip(left, right))\n                      )\n                    )\n                  )\n                }\n                throw new Error(\n                  \"BUG: ConfigProvider.fromFlatLoop - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                )\n              })\n            )\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n  }\n}\n\nconst fromFlatLoopFail =\n  (prefix: ReadonlyArray<string>, path: string) => (index: number): Either.Either<unknown, ConfigError.ConfigError> =>\n    Either.left(\n      configError.MissingData(\n        prefix,\n        `The element at index ${index} in a sequence at path \"${path}\" was missing`\n      )\n    )\n\n/** @internal */\nexport const mapInputPath = dual<\n  (f: (path: string) => string) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (self: ConfigProvider.ConfigProvider, f: (path: string) => string) => ConfigProvider.ConfigProvider\n>(2, (self, f) => fromFlat(mapInputPathFlat(self.flattened, f)))\n\nconst mapInputPathFlat = (\n  self: ConfigProvider.ConfigProvider.Flat,\n  f: (path: string) => string\n): ConfigProvider.ConfigProvider.Flat =>\n  makeFlat({\n    load: (path, config, split = true) => self.load(path, config, split),\n    enumerateChildren: (path) => self.enumerateChildren(path),\n    patch: pathPatch.mapName(self.patch, f)\n  })\n\n/** @internal */\nexport const nested = dual<\n  (name: string) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (self: ConfigProvider.ConfigProvider, name: string) => ConfigProvider.ConfigProvider\n>(2, (self, name) =>\n  fromFlat(makeFlat({\n    load: (path, config) => self.flattened.load(path, config, true),\n    enumerateChildren: (path) => self.flattened.enumerateChildren(path),\n    patch: pathPatch.nested(self.flattened.patch, name)\n  })))\n\n/** @internal */\nexport const unnested = dual<\n  (name: string) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (self: ConfigProvider.ConfigProvider, name: string) => ConfigProvider.ConfigProvider\n>(2, (self, name) =>\n  fromFlat(makeFlat({\n    load: (path, config) => self.flattened.load(path, config, true),\n    enumerateChildren: (path) => self.flattened.enumerateChildren(path),\n    patch: pathPatch.unnested(self.flattened.patch, name)\n  })))\n\n/** @internal */\nexport const orElse = dual<\n  (\n    that: LazyArg<ConfigProvider.ConfigProvider>\n  ) => (\n    self: ConfigProvider.ConfigProvider\n  ) => ConfigProvider.ConfigProvider,\n  (\n    self: ConfigProvider.ConfigProvider,\n    that: LazyArg<ConfigProvider.ConfigProvider>\n  ) => ConfigProvider.ConfigProvider\n>(2, (self, that) => fromFlat(orElseFlat(self.flattened, () => that().flattened)))\n\nconst orElseFlat = (\n  self: ConfigProvider.ConfigProvider.Flat,\n  that: LazyArg<ConfigProvider.ConfigProvider.Flat>\n): ConfigProvider.ConfigProvider.Flat =>\n  makeFlat({\n    load: (path, config, split) =>\n      pipe(\n        pathPatch.patch(path, self.patch),\n        core.flatMap((patch) => self.load(patch, config, split)),\n        core.catchAll((error1) =>\n          pipe(\n            core.sync(that),\n            core.flatMap((that) =>\n              pipe(\n                pathPatch.patch(path, that.patch),\n                core.flatMap((patch) => that.load(patch, config, split)),\n                core.catchAll((error2) => core.fail(configError.Or(error1, error2)))\n              )\n            )\n          )\n        )\n      ),\n    enumerateChildren: (path) =>\n      pipe(\n        pathPatch.patch(path, self.patch),\n        core.flatMap((patch) => self.enumerateChildren(patch)),\n        core.either,\n        core.flatMap((left) =>\n          pipe(\n            core.sync(that),\n            core.flatMap((that) =>\n              pipe(\n                pathPatch.patch(path, that.patch),\n                core.flatMap((patch) => that.enumerateChildren(patch)),\n                core.either,\n                core.flatMap((right) => {\n                  if (Either.isLeft(left) && Either.isLeft(right)) {\n                    return core.fail(configError.And(left.left, right.left))\n                  }\n                  if (Either.isLeft(left) && Either.isRight(right)) {\n                    return core.succeed(right.right)\n                  }\n                  if (Either.isRight(left) && Either.isLeft(right)) {\n                    return core.succeed(left.right)\n                  }\n                  if (Either.isRight(left) && Either.isRight(right)) {\n                    return core.succeed(pipe(left.right, HashSet.union(right.right)))\n                  }\n                  throw new Error(\n                    \"BUG: ConfigProvider.orElseFlat - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                  )\n                })\n              )\n            )\n          )\n        )\n      ),\n    patch: pathPatch.empty\n  })\n\n/** @internal */\nexport const constantCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.constantCase)\n\n/** @internal */\nexport const kebabCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.kebabCase)\n\n/** @internal */\nexport const lowerCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.lowerCase)\n\n/** @internal */\nexport const snakeCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.snakeCase)\n\n/** @internal */\nexport const upperCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.upperCase)\n\n/** @internal */\nexport const within = dual<\n  (\n    path: ReadonlyArray<string>,\n    f: (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider\n  ) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (\n    self: ConfigProvider.ConfigProvider,\n    path: ReadonlyArray<string>,\n    f: (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider\n  ) => ConfigProvider.ConfigProvider\n>(3, (self, path, f) => {\n  const unnest = Arr.reduce(path, self, (provider, name) => unnested(provider, name))\n  const nest = Arr.reduceRight(path, f(unnest), (provider, name) => nested(provider, name))\n  return orElse(nest, () => self)\n})\n\nconst splitPathString = (text: string, delim: string): Array<string> => {\n  const split = text.split(new RegExp(`\\\\s*${regexp.escape(delim)}\\\\s*`))\n  return split\n}\n\nconst parsePrimitive = <A>(\n  text: string,\n  path: ReadonlyArray<string>,\n  primitive: Config.Config.Primitive<A>,\n  delimiter: string,\n  split: boolean\n): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n  if (!split) {\n    return pipe(\n      primitive.parse(text),\n      core.mapBoth({\n        onFailure: configError.prefixed(path),\n        onSuccess: Arr.of\n      })\n    )\n  }\n  return pipe(\n    splitPathString(text, delimiter),\n    core.forEachSequential((char) => primitive.parse(char.trim())),\n    core.mapError(configError.prefixed(path))\n  )\n}\n\nconst transpose = <A>(array: ReadonlyArray<ReadonlyArray<A>>): Array<Array<A>> => {\n  return Object.keys(array[0]).map((column) => array.map((row) => row[column as any]))\n}\n\nconst indicesFrom = (quotedIndices: HashSet.HashSet<string>): Effect.Effect<Array<number>> =>\n  pipe(\n    core.forEachSequential(quotedIndices, parseQuotedIndex),\n    core.mapBoth({\n      onFailure: () => Arr.empty<number>(),\n      onSuccess: Arr.sort(number.Order)\n    }),\n    core.either,\n    core.map(Either.merge)\n  )\n\nconst STR_INDEX_REGEX = /(^.+)(\\[(\\d+)\\])$/\nconst QUOTED_INDEX_REGEX = /^(\\[(\\d+)\\])$/\n\nconst parseQuotedIndex = (str: string): Option.Option<number> => {\n  const match = str.match(QUOTED_INDEX_REGEX)\n  if (match !== null) {\n    const matchedIndex = match[2]\n    return pipe(\n      matchedIndex !== undefined && matchedIndex.length > 0 ?\n        Option.some(matchedIndex) :\n        Option.none(),\n      Option.flatMap(parseInteger)\n    )\n  }\n  return Option.none()\n}\n\nconst splitIndexInKeys = (\n  map: Map<string, string>,\n  unmakePathString: (str: string) => ReadonlyArray<string>,\n  makePathString: (chunk: ReadonlyArray<string>) => string\n): Map<string, string> => {\n  const newMap: Map<string, string> = new Map()\n  for (const [pathString, value] of map) {\n    const keyWithIndex = pipe(\n      unmakePathString(pathString),\n      Arr.flatMap((key) =>\n        Option.match(splitIndexFrom(key), {\n          onNone: () => Arr.of(key),\n          onSome: ([key, index]) => Arr.make(key, `[${index}]`)\n        })\n      )\n    )\n    newMap.set(makePathString(keyWithIndex), value)\n  }\n  return newMap\n}\n\nconst splitIndexFrom = (key: string): Option.Option<[string, number]> => {\n  const match = key.match(STR_INDEX_REGEX)\n  if (match !== null) {\n    const matchedString = match[1]\n    const matchedIndex = match[3]\n    const optionalString = matchedString !== undefined && matchedString.length > 0 ?\n      Option.some(matchedString) :\n      Option.none()\n    const optionalIndex = pipe(\n      matchedIndex !== undefined && matchedIndex.length > 0 ?\n        Option.some(matchedIndex) :\n        Option.none(),\n      Option.flatMap(parseInteger)\n    )\n    return Option.all([optionalString, optionalIndex])\n  }\n  return Option.none()\n}\n\nconst parseInteger = (str: string): Option.Option<number> => {\n  const parsedIndex = Number.parseInt(str)\n  return Number.isNaN(parsedIndex) ?\n    Option.none() :\n    Option.some(parsedIndex)\n}\n\nconst keyName = (name: string): KeyComponent => ({\n  _tag: \"KeyName\",\n  name\n})\n\nconst keyIndex = (index: number): KeyComponent => ({\n  _tag: \"KeyIndex\",\n  index\n})\n\ninterface JsonMap {\n  [member: string]: string | number | boolean | null | JsonArray | JsonMap\n}\ninterface JsonArray extends Array<string | number | boolean | null | JsonArray | JsonMap> {}\n\n/** @internal */\nexport const fromJson = (json: unknown): ConfigProvider.ConfigProvider => {\n  const hiddenDelimiter = \"\\ufeff\"\n  const indexedEntries = Arr.map(\n    getIndexedEntries(json as JsonMap),\n    ([key, value]): [string, string] => [configPathToString(key).join(hiddenDelimiter), value]\n  )\n  return fromMap(new Map(indexedEntries), {\n    pathDelim: hiddenDelimiter,\n    seqDelim: hiddenDelimiter\n  })\n}\n\nconst configPathToString = (path: ReadonlyArray<KeyComponent>): ReadonlyArray<string> => {\n  const output: Array<string> = []\n  let i = 0\n  while (i < path.length) {\n    const component = path[i]\n    if (component._tag === \"KeyName\") {\n      if (i + 1 < path.length) {\n        const nextComponent = path[i + 1]\n        if (nextComponent._tag === \"KeyIndex\") {\n          output.push(`${component.name}[${nextComponent.index}]`)\n          i += 2\n        } else {\n          output.push(component.name)\n          i += 1\n        }\n      } else {\n        output.push(component.name)\n        i += 1\n      }\n    }\n  }\n  return output\n}\n\nconst getIndexedEntries = (\n  config: JsonMap\n): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> => {\n  const loopAny = (\n    path: ReadonlyArray<KeyComponent>,\n    value: string | number | boolean | JsonMap | JsonArray | null\n  ): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> => {\n    if (typeof value === \"string\") {\n      return Arr.make([path, value] as [ReadonlyArray<KeyComponent>, string])\n    }\n    if (typeof value === \"number\" || typeof value === \"boolean\") {\n      return Arr.make([path, String(value)] as [ReadonlyArray<KeyComponent>, string])\n    }\n    if (Arr.isArray(value)) {\n      return loopArray(path, value)\n    }\n    if (typeof value === \"object\" && value !== null) {\n      return loopObject(path, value)\n    }\n    return Arr.empty<[ReadonlyArray<KeyComponent>, string]>()\n  }\n  const loopArray = (\n    path: ReadonlyArray<KeyComponent>,\n    values: JsonArray\n  ): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> =>\n    Arr.match(values, {\n      onEmpty: () => Arr.make([path, \"<nil>\"] as [ReadonlyArray<KeyComponent>, string]),\n      onNonEmpty: Arr.flatMap((value, index) => loopAny(Arr.append(path, keyIndex(index)), value))\n    })\n  const loopObject = (\n    path: ReadonlyArray<KeyComponent>,\n    value: JsonMap\n  ): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> =>\n    Object.entries(value).flatMap(([key, value]) => {\n      const newPath = Arr.append(path, keyName(key))\n      const result = loopAny(newPath, value)\n      if (Arr.isEmptyReadonlyArray(result)) {\n        return Arr.make([newPath, \"\"] as [ReadonlyArray<KeyComponent>, string])\n      }\n      return result\n    })\n  return loopObject(Arr.empty(), config)\n}\n", "import type * as Console from \"../../Console.js\"\nimport * as Context from \"../../Context.js\"\nimport * as core from \"../core.js\"\n\n/** @internal */\nexport const TypeId: Console.TypeId = Symbol.for(\"effect/Console\") as Console.TypeId\n\n/** @internal */\nexport const consoleTag: Context.Tag<Console.Console, Console.Console> = Context.GenericTag<Console.Console>(\n  \"effect/Console\"\n)\n\n/** @internal */\nexport const defaultConsole: Console.Console = {\n  [TypeId]: TypeId,\n  assert(condition, ...args) {\n    return core.sync(() => {\n      console.assert(condition, ...args)\n    })\n  },\n  clear: core.sync(() => {\n    console.clear()\n  }),\n  count(label) {\n    return core.sync(() => {\n      console.count(label)\n    })\n  },\n  countReset(label) {\n    return core.sync(() => {\n      console.countReset(label)\n    })\n  },\n  debug(...args) {\n    return core.sync(() => {\n      console.debug(...args)\n    })\n  },\n  dir(item, options) {\n    return core.sync(() => {\n      console.dir(item, options)\n    })\n  },\n  dirxml(...args) {\n    return core.sync(() => {\n      console.dirxml(...args)\n    })\n  },\n  error(...args) {\n    return core.sync(() => {\n      console.error(...args)\n    })\n  },\n  group(options) {\n    return options?.collapsed ?\n      core.sync(() => console.groupCollapsed(options?.label)) :\n      core.sync(() => console.group(options?.label))\n  },\n  groupEnd: core.sync(() => {\n    console.groupEnd()\n  }),\n  info(...args) {\n    return core.sync(() => {\n      console.info(...args)\n    })\n  },\n  log(...args) {\n    return core.sync(() => {\n      console.log(...args)\n    })\n  },\n  table(tabularData, properties) {\n    return core.sync(() => {\n      console.table(tabularData, properties)\n    })\n  },\n  time(label) {\n    return core.sync(() => console.time(label))\n  },\n  timeEnd(label) {\n    return core.sync(() => console.timeEnd(label))\n  },\n  timeLog(label, ...args) {\n    return core.sync(() => {\n      console.timeLog(label, ...args)\n    })\n  },\n  trace(...args) {\n    return core.sync(() => {\n      console.trace(...args)\n    })\n  },\n  warn(...args) {\n    return core.sync(() => {\n      console.warn(...args)\n    })\n  },\n  unsafe: console\n}\n", "import * as Chunk from \"../Chunk.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport type * as Random from \"../Random.js\"\nimport * as PCGRandom from \"../Utils.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nconst RandomSymbolKey = \"effect/Random\"\n\n/** @internal */\nexport const RandomTypeId: Random.RandomTypeId = Symbol.for(\n  RandomSymbolKey\n) as Random.RandomTypeId\n\n/** @internal */\nexport const randomTag: Context.Tag<Random.Random, Random.Random> = Context.GenericTag(\"effect/Random\")\n/** @internal */\nclass RandomImpl implements Random.Random {\n  readonly [RandomTypeId]: Random.RandomTypeId = RandomTypeId\n\n  readonly PRNG: PCGRandom.PCGRandom\n\n  constructor(readonly seed: number) {\n    this.PRNG = new PCGRandom.PCGRandom(seed)\n  }\n\n  get next(): Effect.Effect<number> {\n    return core.sync(() => this.PRNG.number())\n  }\n\n  get nextBoolean(): Effect.Effect<boolean> {\n    return core.map(this.next, (n) => n > 0.5)\n  }\n\n  get nextInt(): Effect.Effect<number> {\n    return core.sync(() => this.PRNG.integer(Number.MAX_SAFE_INTEGER))\n  }\n\n  nextRange(min: number, max: number): Effect.Effect<number> {\n    return core.map(this.next, (n) => (max - min) * n + min)\n  }\n\n  nextIntBetween(min: number, max: number): Effect.Effect<number> {\n    return core.sync(() => this.PRNG.integer(max - min) + min)\n  }\n\n  shuffle<A>(elements: Iterable<A>): Effect.Effect<Chunk.Chunk<A>> {\n    return shuffleWith(elements, (n) => this.nextIntBetween(0, n))\n  }\n}\n\nconst shuffleWith = <A>(\n  elements: Iterable<A>,\n  nextIntBounded: (n: number) => Effect.Effect<number>\n): Effect.Effect<Chunk.Chunk<A>> => {\n  return core.suspend(() =>\n    pipe(\n      core.sync(() => Array.from(elements)),\n      core.flatMap((buffer) => {\n        const numbers: Array<number> = []\n        for (let i = buffer.length; i >= 2; i = i - 1) {\n          numbers.push(i)\n        }\n        return pipe(\n          numbers,\n          core.forEachSequentialDiscard((n) =>\n            pipe(\n              nextIntBounded(n),\n              core.map((k) => swap(buffer, n - 1, k))\n            )\n          ),\n          core.as(Chunk.fromIterable(buffer))\n        )\n      })\n    )\n  )\n}\n\nconst swap = <A>(buffer: Array<A>, index1: number, index2: number): Array<A> => {\n  const tmp = buffer[index1]!\n  buffer[index1] = buffer[index2]!\n  buffer[index2] = tmp\n  return buffer\n}\n\nexport const make = <A>(seed: A): Random.Random => new RandomImpl(Hash.hash(seed))\n", "import * as Array from \"../Array.js\"\nimport type * as Chunk from \"../Chunk.js\"\nimport type * as Clock from \"../Clock.js\"\nimport type * as Config from \"../Config.js\"\nimport type * as ConfigProvider from \"../ConfigProvider.js\"\nimport * as Context from \"../Context.js\"\nimport type * as DefaultServices from \"../DefaultServices.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as Random from \"../Random.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport * as clock from \"./clock.js\"\nimport * as configProvider from \"./configProvider.js\"\nimport * as core from \"./core.js\"\nimport * as console_ from \"./defaultServices/console.js\"\nimport * as random from \"./random.js\"\nimport * as tracer from \"./tracer.js\"\n\n/** @internal */\nexport const liveServices: Context.Context<DefaultServices.DefaultServices> = pipe(\n  Context.empty(),\n  Context.add(clock.clockTag, clock.make()),\n  Context.add(console_.consoleTag, console_.defaultConsole),\n  Context.add(random.randomTag, random.make(Math.random())),\n  Context.add(configProvider.configProviderTag, configProvider.fromEnv()),\n  Context.add(tracer.tracerTag, tracer.nativeTracer)\n)\n\n/**\n * The `FiberRef` holding the default `Effect` services.\n *\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentServices = globalValue(\n  Symbol.for(\"effect/DefaultServices/currentServices\"),\n  () => core.fiberRefUnsafeMakeContext(liveServices)\n)\n\n// circular with Clock\n\n/** @internal */\nexport const sleep = (duration: Duration.DurationInput): Effect.Effect<void> => {\n  const decodedDuration = Duration.decode(duration)\n  return clockWith((clock) => clock.sleep(decodedDuration))\n}\n\n/** @internal */\nexport const clockWith = <A, E, R>(f: (clock: Clock.Clock) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.fiberRefGetWith(currentServices, (services) => f(Context.get(services, clock.clockTag)))\n\n/** @internal */\nexport const currentTimeMillis: Effect.Effect<number> = clockWith((clock) => clock.currentTimeMillis)\n\n/** @internal */\nexport const currentTimeNanos: Effect.Effect<bigint> = clockWith((clock) => clock.currentTimeNanos)\n\n/** @internal */\nexport const withClock = dual<\n  <X extends Clock.Clock>(value: X) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <X extends Clock.Clock, A, E, R>(effect: Effect.Effect<A, E, R>, value: X) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(clock.clockTag, value)\n  )(effect))\n\n// circular with ConfigProvider\n\n/** @internal */\nexport const withConfigProvider = dual<\n  (value: ConfigProvider.ConfigProvider) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, value: ConfigProvider.ConfigProvider) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(configProvider.configProviderTag, value)\n  )(effect))\n\n/** @internal */\nexport const configProviderWith = <A, E, R>(\n  f: (configProvider: ConfigProvider.ConfigProvider) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  core.fiberRefGetWith(\n    currentServices,\n    (services) => f(Context.get(services, configProvider.configProviderTag))\n  )\n\n/** @internal */\nexport const config = <A>(config: Config.Config<A>) => configProviderWith((_) => _.load(config))\n\n/** @internal */\nexport const configOrDie = <A>(config: Config.Config<A>) => core.orDie(configProviderWith((_) => _.load(config)))\n\n// circular with Random\n\n/** @internal */\nexport const randomWith = <A, E, R>(f: (random: Random.Random) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.fiberRefGetWith(\n    currentServices,\n    (services) => f(Context.get(services, random.randomTag))\n  )\n\n/** @internal */\nexport const withRandom = dual<\n  <X extends Random.Random>(value: X) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <X extends Random.Random, A, E, R>(effect: Effect.Effect<A, E, R>, value: X) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(random.randomTag, value)\n  )(effect))\n\n/** @internal */\nexport const next: Effect.Effect<number> = randomWith((random) => random.next)\n\n/** @internal */\nexport const nextInt: Effect.Effect<number> = randomWith((random) => random.nextInt)\n\n/** @internal */\nexport const nextBoolean: Effect.Effect<boolean> = randomWith((random) => random.nextBoolean)\n\n/** @internal */\nexport const nextRange = (min: number, max: number): Effect.Effect<number> =>\n  randomWith((random) => random.nextRange(min, max))\n\n/** @internal */\nexport const nextIntBetween = (min: number, max: number): Effect.Effect<number> =>\n  randomWith((random) => random.nextIntBetween(min, max))\n\n/** @internal */\nexport const shuffle = <A>(elements: Iterable<A>): Effect.Effect<Chunk.Chunk<A>> =>\n  randomWith((random) => random.shuffle(elements))\n\n/** @internal */\nexport const choice = <Self extends Iterable<unknown>>(\n  elements: Self\n) => {\n  const array = Array.fromIterable(elements)\n  return core.map(\n    array.length === 0\n      ? core.fail(new core.NoSuchElementException(\"Cannot select a random element from an empty array\"))\n      : randomWith((random) => random.nextIntBetween(0, array.length)),\n    (i) => array[i]\n  ) as any\n}\n\n// circular with Tracer\n\n/** @internal */\nexport const tracerWith = <A, E, R>(f: (tracer: Tracer.Tracer) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.fiberRefGetWith(currentServices, (services) => f(Context.get(services, tracer.tracerTag)))\n\n/** @internal */\nexport const withTracer = dual<\n  (value: Tracer.Tracer) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, value: Tracer.Tracer) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(tracer.tracerTag, value)\n  )(effect))\n", "/**\n * @since 2.0.0\n */\nimport type * as Context from \"./Context.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/clock.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ClockTypeId: unique symbol = internal.ClockTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ClockTypeId = typeof ClockTypeId\n\n/**\n * Represents a time-based clock which provides functionality related to time\n * and scheduling.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Clock {\n  readonly [ClockTypeId]: ClockTypeId\n  /**\n   * Unsafely returns the current time in milliseconds.\n   */\n  unsafeCurrentTimeMillis(): number\n  /**\n   * Returns the current time in milliseconds.\n   */\n  readonly currentTimeMillis: Effect.Effect<number>\n  /**\n   * Unsafely returns the current time in nanoseconds.\n   */\n  unsafeCurrentTimeNanos(): bigint\n  /**\n   * Returns the current time in nanoseconds.\n   */\n  readonly currentTimeNanos: Effect.Effect<bigint>\n  /**\n   * Asynchronously sleeps for the specified duration.\n   */\n  sleep(duration: Duration.Duration): Effect.Effect<void>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type CancelToken = () => boolean\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Task = () => void\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ClockScheduler {\n  /**\n   * Unsafely schedules the specified task for the specified duration.\n   */\n  unsafeSchedule(task: Task, duration: Duration.Duration): CancelToken\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (_: void) => Clock = internal.make\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const sleep: (duration: Duration.DurationInput) => Effect.Effect<void> = defaultServices.sleep\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const currentTimeMillis: Effect.Effect<number> = defaultServices.currentTimeMillis\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const currentTimeNanos: Effect.Effect<bigint> = defaultServices.currentTimeNanos\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const clockWith: <A, E, R>(f: (clock: Clock) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  defaultServices.clockWith\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const Clock: Context.Tag<Clock, Clock> = internal.clockTag\n", "import * as Arr from \"../Array.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Equal from \"../Equal.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport type * as FiberRefs from \"../FiberRefs.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nexport function unsafeMake(\n  fiberRefLocals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n): FiberRefs.FiberRefs {\n  return new FiberRefsImpl(fiberRefLocals)\n}\n\n/** @internal */\nexport function empty(): FiberRefs.FiberRefs {\n  return unsafeMake(new Map())\n}\n\n/** @internal */\nexport const FiberRefsSym: FiberRefs.FiberRefsSym = Symbol.for(\"effect/FiberRefs\") as FiberRefs.FiberRefsSym\n\n/** @internal */\nexport class FiberRefsImpl implements FiberRefs.FiberRefs {\n  readonly [FiberRefsSym]: FiberRefs.FiberRefsSym = FiberRefsSym\n  constructor(\n    readonly locals: Map<\n      FiberRef.FiberRef<any>,\n      Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>\n    >\n  ) {\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nconst findAncestor = (\n  _ref: FiberRef.FiberRef<any>,\n  _parentStack: ReadonlyArray<readonly [FiberId.Single, unknown]>,\n  _childStack: ReadonlyArray<readonly [FiberId.Single, unknown]>,\n  _childModified = false\n): readonly [unknown, boolean] => {\n  const ref = _ref\n  let parentStack = _parentStack\n  let childStack = _childStack\n  let childModified = _childModified\n  let ret: readonly [unknown, boolean] | undefined = undefined\n  while (ret === undefined) {\n    if (Arr.isNonEmptyReadonlyArray(parentStack) && Arr.isNonEmptyReadonlyArray(childStack)) {\n      const parentFiberId = Arr.headNonEmpty(parentStack)[0]\n      const parentAncestors = Arr.tailNonEmpty(parentStack)\n      const childFiberId = Arr.headNonEmpty(childStack)[0]\n      const childRefValue = Arr.headNonEmpty(childStack)[1]\n      const childAncestors = Arr.tailNonEmpty(childStack)\n      if (parentFiberId.startTimeMillis < childFiberId.startTimeMillis) {\n        childStack = childAncestors\n        childModified = true\n      } else if (parentFiberId.startTimeMillis > childFiberId.startTimeMillis) {\n        parentStack = parentAncestors\n      } else {\n        if (parentFiberId.id < childFiberId.id) {\n          childStack = childAncestors\n          childModified = true\n        } else if (parentFiberId.id > childFiberId.id) {\n          parentStack = parentAncestors\n        } else {\n          ret = [childRefValue, childModified] as const\n        }\n      }\n    } else {\n      ret = [ref.initial, true] as const\n    }\n  }\n  return ret\n}\n\n/** @internal */\nexport const joinAs = dual<\n  (fiberId: FiberId.Single, that: FiberRefs.FiberRefs) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  (self: FiberRefs.FiberRefs, fiberId: FiberId.Single, that: FiberRefs.FiberRefs) => FiberRefs.FiberRefs\n>(3, (self, fiberId, that) => {\n  const parentFiberRefs = new Map(self.locals)\n  that.locals.forEach((childStack, fiberRef) => {\n    const childValue = childStack[0][1]\n    if (!childStack[0][0][Equal.symbol](fiberId)) {\n      if (!parentFiberRefs.has(fiberRef)) {\n        if (Equal.equals(childValue, fiberRef.initial)) {\n          return\n        }\n        parentFiberRefs.set(\n          fiberRef,\n          [[fiberId, fiberRef.join(fiberRef.initial, childValue)]]\n        )\n        return\n      }\n      const parentStack = parentFiberRefs.get(fiberRef)!\n      const [ancestor, wasModified] = findAncestor(\n        fiberRef,\n        parentStack,\n        childStack\n      )\n      if (wasModified) {\n        const patch = fiberRef.diff(ancestor, childValue)\n        const oldValue = parentStack[0][1]\n        const newValue = fiberRef.join(oldValue, fiberRef.patch(patch)(oldValue))\n        if (!Equal.equals(oldValue, newValue)) {\n          let newStack: Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, unknown]>\n          const parentFiberId = parentStack[0][0]\n          if (parentFiberId[Equal.symbol](fiberId)) {\n            newStack = [[parentFiberId, newValue] as const, ...parentStack.slice(1)]\n          } else {\n            newStack = [[fiberId, newValue] as const, ...parentStack]\n          }\n          parentFiberRefs.set(fiberRef, newStack)\n        }\n      }\n    }\n  })\n  return new FiberRefsImpl(parentFiberRefs)\n})\n\n/** @internal */\nexport const forkAs = dual<\n  (childId: FiberId.Single) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  (self: FiberRefs.FiberRefs, childId: FiberId.Single) => FiberRefs.FiberRefs\n>(2, (self, childId) => {\n  const map = new Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, unknown]>>()\n  unsafeForkAs(self, map, childId)\n  return new FiberRefsImpl(map)\n})\n\nconst unsafeForkAs = (\n  self: FiberRefs.FiberRefs,\n  map: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>,\n  fiberId: FiberId.Single\n) => {\n  self.locals.forEach((stack, fiberRef) => {\n    const oldValue = stack[0][1]\n    const newValue = fiberRef.patch(fiberRef.fork)(oldValue)\n    if (Equal.equals(oldValue, newValue)) {\n      map.set(fiberRef, stack)\n    } else {\n      map.set(fiberRef, [[fiberId, newValue] as const, ...stack])\n    }\n  })\n}\n\n/** @internal */\nexport const fiberRefs = (self: FiberRefs.FiberRefs) => HashSet.fromIterable(self.locals.keys())\n\n/** @internal */\nexport const setAll = (self: FiberRefs.FiberRefs): Effect.Effect<void> =>\n  core.forEachSequentialDiscard(\n    fiberRefs(self),\n    (fiberRef) => core.fiberRefSet(fiberRef, getOrDefault(self, fiberRef))\n  )\n\n/** @internal */\nexport const delete_ = dual<\n  <A>(fiberRef: FiberRef.FiberRef<A>) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  <A>(self: FiberRefs.FiberRefs, fiberRef: FiberRef.FiberRef<A>) => FiberRefs.FiberRefs\n>(2, (self, fiberRef) => {\n  const locals = new Map(self.locals)\n  locals.delete(fiberRef)\n  return new FiberRefsImpl(locals)\n})\n\n/** @internal */\nexport const get = dual<\n  <A>(fiberRef: FiberRef.FiberRef<A>) => (self: FiberRefs.FiberRefs) => Option.Option<A>,\n  <A>(self: FiberRefs.FiberRefs, fiberRef: FiberRef.FiberRef<A>) => Option.Option<A>\n>(2, (self, fiberRef) => {\n  if (!self.locals.has(fiberRef)) {\n    return Option.none()\n  }\n  return Option.some(Arr.headNonEmpty(self.locals.get(fiberRef)!)[1])\n})\n\n/** @internal */\nexport const getOrDefault = dual<\n  <A>(fiberRef: FiberRef.FiberRef<A>) => (self: FiberRefs.FiberRefs) => A,\n  <A>(self: FiberRefs.FiberRefs, fiberRef: FiberRef.FiberRef<A>) => A\n>(2, (self, fiberRef) => pipe(get(self, fiberRef), Option.getOrElse(() => fiberRef.initial)))\n\n/** @internal */\nexport const updateAs = dual<\n  <A>(\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  <A>(\n    self: FiberRefs.FiberRefs,\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ) => FiberRefs.FiberRefs\n>(2, <A>(self: FiberRefs.FiberRefs, { fiberId, fiberRef, value }: {\n  readonly fiberId: FiberId.Single\n  readonly fiberRef: FiberRef.FiberRef<A>\n  readonly value: A\n}) => {\n  if (self.locals.size === 0) {\n    return new FiberRefsImpl(new Map([[fiberRef, [[fiberId, value] as const]]]))\n  }\n  const locals = new Map(self.locals)\n  unsafeUpdateAs(locals, fiberId, fiberRef, value)\n  return new FiberRefsImpl(locals)\n})\n\nconst unsafeUpdateAs = (\n  locals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>,\n  fiberId: FiberId.Single,\n  fiberRef: FiberRef.FiberRef<any>,\n  value: any\n) => {\n  const oldStack: ReadonlyArray<readonly [FiberId.Single, any]> = locals.get(fiberRef) ?? []\n  let newStack: Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]> | undefined\n\n  if (Arr.isNonEmptyReadonlyArray(oldStack)) {\n    const [currentId, currentValue] = Arr.headNonEmpty(oldStack)\n    if (currentId[Equal.symbol](fiberId)) {\n      if (Equal.equals(currentValue, value)) {\n        return\n      } else {\n        newStack = [\n          [fiberId, value] as const,\n          ...oldStack.slice(1)\n        ]\n      }\n    } else {\n      newStack = [\n        [fiberId, value] as const,\n        ...oldStack\n      ]\n    }\n  } else {\n    newStack = [[fiberId, value] as const]\n  }\n\n  locals.set(fiberRef, newStack)\n}\n\n/** @internal */\nexport const updateManyAs = dual<\n  (\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: Arr.NonEmptyReadonlyArray<\n        readonly [FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>]\n      >\n    }\n  ) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  (\n    self: FiberRefs.FiberRefs,\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: Arr.NonEmptyReadonlyArray<\n        readonly [FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>]\n      >\n    }\n  ) => FiberRefs.FiberRefs\n>(2, (self: FiberRefs.FiberRefs, { entries, forkAs }: {\n  readonly forkAs?: FiberId.Single | undefined\n  readonly entries: Arr.NonEmptyReadonlyArray<\n    readonly [FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>]\n  >\n}) => {\n  if (self.locals.size === 0) {\n    return new FiberRefsImpl(new Map(entries))\n  }\n\n  const locals = new Map(self.locals)\n  if (forkAs !== undefined) {\n    unsafeForkAs(self, locals, forkAs)\n  }\n  entries.forEach(([fiberRef, values]) => {\n    if (values.length === 1) {\n      unsafeUpdateAs(locals, values[0][0], fiberRef, values[0][1])\n    } else {\n      values.forEach(([fiberId, value]) => {\n        unsafeUpdateAs(locals, fiberId, fiberRef, value)\n      })\n    }\n  })\n  return new FiberRefsImpl(locals)\n})\n", "/**\n * @since 2.0.0\n */\nimport type * as Arr from \"./Array.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/fiberRefs.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberRefsSym: unique symbol = internal.FiberRefsSym\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberRefsSym = typeof FiberRefsSym\n\n/**\n * `FiberRefs` is a data type that represents a collection of `FiberRef` values.\n *\n * This allows safely propagating `FiberRef` values across fiber boundaries, for\n * example between an asynchronous producer and consumer.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface FiberRefs extends Pipeable {\n  readonly [FiberRefsSym]: FiberRefsSym\n  readonly locals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n}\n\nconst delete_: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => FiberRefs\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): FiberRefs\n} = internal.delete_\n\nexport {\n  /**\n   * Deletes the specified `FiberRef` from the `FibterRefs`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  delete_ as delete\n}\n\n/**\n * Returns a set of each `FiberRef` in this collection.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const fiberRefs: (self: FiberRefs) => HashSet.HashSet<FiberRef.FiberRef<any>> = internal.fiberRefs\n\n/**\n * Forks this collection of fiber refs as the specified child fiber id. This\n * will potentially modify the value of the fiber refs, as determined by the\n * individual fiber refs that make up the collection.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const forkAs: {\n  (childId: FiberId.Single): (self: FiberRefs) => FiberRefs\n  (self: FiberRefs, childId: FiberId.Single): FiberRefs\n} = internal.forkAs\n\n/**\n * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n * values if it exists or `None` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const get: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => Option.Option<A>\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): Option.Option<A>\n} = internal.get\n\n/**\n * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n * values if it exists or the `initial` value of the `FiberRef` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrDefault: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => A\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): A\n} = internal.getOrDefault\n\n/**\n * Joins this collection of fiber refs to the specified collection, as the\n * specified fiber id. This will perform diffing and merging to ensure\n * preservation of maximum information from both child and parent refs.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const joinAs: {\n  (fiberId: FiberId.Single, that: FiberRefs): (self: FiberRefs) => FiberRefs\n  (self: FiberRefs, fiberId: FiberId.Single, that: FiberRefs): FiberRefs\n} = internal.joinAs\n\n/**\n * Set each ref to either its value or its default.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const setAll: (self: FiberRefs) => Effect.Effect<void> = internal.setAll\n\n/**\n * Updates the value of the specified `FiberRef` using the provided `FiberId`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const updateAs: {\n  <A>(\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ): (self: FiberRefs) => FiberRefs\n  <A>(\n    self: FiberRefs,\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ): FiberRefs\n} = internal.updateAs\n\n/**\n * Updates the values of the specified `FiberRef` & value pairs using the provided `FiberId`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const updateManyAs: {\n  (\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: readonly [\n        readonly [\n          FiberRef.FiberRef<any>,\n          readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n        ],\n        ...Array<\n          readonly [\n            FiberRef.FiberRef<any>,\n            readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n          ]\n        >\n      ]\n    }\n  ): (self: FiberRefs) => FiberRefs\n  (\n    self: FiberRefs,\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: readonly [\n        readonly [\n          FiberRef.FiberRef<any>,\n          readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n        ],\n        ...Array<\n          readonly [\n            FiberRef.FiberRef<any>,\n            readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n          ]\n        >\n      ]\n    }\n  ): FiberRefs\n} = internal.updateManyAs\n\n/**\n * Note: it will not copy the provided Map, make sure to provide a fresh one.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: (\n  fiberRefLocals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n) => FiberRefs = internal.unsafeMake\n\n/**\n * The empty collection of `FiberRef` values.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: () => FiberRefs = internal.empty\n", "/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport { dual, pipe } from \"./Function.js\"\nimport * as core from \"./internal/core.js\"\nimport * as number from \"./Number.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * A `LogLevel` represents the log level associated with an individual logging\n * operation. Log levels are used both to describe the granularity (or\n * importance) of individual log statements, as well as to enable tuning\n * verbosity of log output.\n *\n * @since 2.0.0\n * @category model\n * @property ordinal - The priority of the log message. Larger values indicate higher priority.\n * @property label - A label associated with the log level.\n * @property syslog -The syslog severity level of the log level.\n */\nexport type LogLevel = All | Fatal | Error | Warning | Info | Debug | Trace | None\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport type Literal = LogLevel[\"_tag\"]\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface All extends Pipeable {\n  readonly _tag: \"All\"\n  readonly label: \"ALL\"\n  readonly syslog: 0\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Fatal extends Pipeable {\n  readonly _tag: \"Fatal\"\n  readonly label: \"FATAL\"\n  readonly syslog: 2\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Error extends Pipeable {\n  readonly _tag: \"Error\"\n  readonly label: \"ERROR\"\n  readonly syslog: 3\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Warning extends Pipeable {\n  readonly _tag: \"Warning\"\n  readonly label: \"WARN\"\n  readonly syslog: 4\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Info extends Pipeable {\n  readonly _tag: \"Info\"\n  readonly label: \"INFO\"\n  readonly syslog: 6\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Debug extends Pipeable {\n  readonly _tag: \"Debug\"\n  readonly label: \"DEBUG\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Trace extends Pipeable {\n  readonly _tag: \"Trace\"\n  readonly label: \"TRACE\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface None extends Pipeable {\n  readonly _tag: \"None\"\n  readonly label: \"OFF\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const All: LogLevel = core.logLevelAll\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Fatal: LogLevel = core.logLevelFatal\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Error: LogLevel = core.logLevelError\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Warning: LogLevel = core.logLevelWarning\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Info: LogLevel = core.logLevelInfo\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Debug: LogLevel = core.logLevelDebug\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Trace: LogLevel = core.logLevelTrace\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const None: LogLevel = core.logLevelNone\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const allLevels = core.allLogLevels\n\n/**\n * Locally applies the specified `LogLevel` to an `Effect` workflow, reverting\n * to the previous `LogLevel` after the `Effect` workflow completes.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const locally: {\n  (self: LogLevel): <A, E, R>(use: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  <A, E, R>(use: Effect.Effect<A, E, R>, self: LogLevel): Effect.Effect<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(use: Effect.Effect<A, E, R>, self: LogLevel): Effect.Effect<A, E, R> =>\n    core.fiberRefLocally(use, core.currentLogLevel, self)\n)\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const Order: order.Order<LogLevel> = pipe(\n  number.Order,\n  order.mapInput((level: LogLevel) => level.ordinal)\n)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThan: {\n  (that: LogLevel): (self: LogLevel) => boolean\n  (self: LogLevel, that: LogLevel): boolean\n} = order.lessThan(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThanEqual: {\n  (that: LogLevel): (self: LogLevel) => boolean\n  (self: LogLevel, that: LogLevel): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const greaterThan: {\n  (that: LogLevel): (self: LogLevel) => boolean\n  (self: LogLevel, that: LogLevel): boolean\n} = order.greaterThan(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const greaterThanEqual: {\n  (that: LogLevel): (self: LogLevel) => boolean\n  (self: LogLevel, that: LogLevel): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * @since 2.0.0\n * @category conversions\n */\nexport const fromLiteral = (literal: Literal): LogLevel => {\n  switch (literal) {\n    case \"All\":\n      return All\n    case \"Debug\":\n      return Debug\n    case \"Error\":\n      return Error\n    case \"Fatal\":\n      return Fatal\n    case \"Info\":\n      return Info\n    case \"Trace\":\n      return Trace\n    case \"None\":\n      return None\n    case \"Warning\":\n      return Warning\n  }\n}\n", "import type * as LogSpan from \"../LogSpan.js\"\n\n/** @internal */\nexport const make = (label: string, startTime: number): LogSpan.LogSpan => ({\n  label,\n  startTime\n})\n\n/** @internal */\nexport const render = (now: number) => (self: LogSpan.LogSpan): string => {\n  const label = self.label.replace(/[\\s=\"]/g, \"_\")\n  return `${label}=${now - self.startTime}ms`\n}\n", "/**\n * @since 2.0.0\n */\nimport * as internal from \"./internal/logSpan.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface LogSpan {\n  readonly label: string\n  readonly startTime: number\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (label: string, startTime: number) => LogSpan = internal.make\n\n/**\n * @since 2.0.0\n * @category destructors\n */\nexport const render: (now: number) => (self: LogSpan) => string = internal.render\n", "/**\n * @since 2.0.0\n */\nimport type { Effect } from \"./Effect.js\"\nimport { dual } from \"./Function.js\"\nimport * as core from \"./internal/core.js\"\nimport { type Pipeable, pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Readable\")\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Readable<A, E = never, R = never> extends Pipeable {\n  readonly [TypeId]: TypeId\n  readonly get: Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isReadable = (u: unknown): u is Readable<unknown, unknown, unknown> => hasProperty(u, TypeId)\n\nconst Proto: Omit<Readable<any>, \"get\"> = {\n  [TypeId]: TypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <A, E, R>(get: Effect<A, E, R>): Readable<A, E, R> => {\n  const self = Object.create(Proto)\n  self.get = get\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category combinators\n */\nexport const map: {\n  <A, B>(f: (a: NoInfer<A>) => B): <E, R>(fa: Readable<A, E, R>) => Readable<B, E, R>\n  <A, E, R, B>(self: Readable<A, E, R>, f: (a: NoInfer<A>) => B): Readable<B, E, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Readable<A, E, R>, f: (a: NoInfer<A>) => B): Readable<B, E, R> => make(core.map(self.get, f))\n)\n\n/**\n * @since 2.0.0\n * @category combinators\n */\nexport const mapEffect: {\n  <A, B, E2, R2>(\n    f: (a: NoInfer<A>) => Effect<B, E2, R2>\n  ): <E, R>(fa: Readable<A, E, R>) => Readable<B, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Readable<A, E, R>,\n    f: (a: NoInfer<A>) => Effect<B, E2, R2>\n  ): Readable<B, E | E2, R | R2>\n} = dual(2, <A, E, R, B, E2, R2>(\n  self: Readable<A, E, R>,\n  f: (a: NoInfer<A>) => Effect<B, E2, R2>\n): Readable<B, E | E2, R | R2> => make(core.flatMap(self.get, f)))\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrap = <A, E, R, E1, R1>(\n  effect: Effect<Readable<A, E, R>, E1, R1>\n): Readable<A, E | E1, R | R1> =>\n  make(\n    core.flatMap(effect, (s) => s.get)\n  )\n", "import type * as Effect from \"../Effect.js\"\nimport { dual } from \"../Function.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Readable from \"../Readable.js\"\nimport type * as Ref from \"../Ref.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nexport const RefTypeId: Ref.RefTypeId = Symbol.for(\"effect/Ref\") as Ref.RefTypeId\n\n/** @internal */\nexport const refVariance = {\n  /* c8 ignore next */\n  _A: (_: any) => _\n}\n\nclass RefImpl<in out A> implements Ref.Ref<A> {\n  readonly [RefTypeId] = refVariance\n  readonly [Readable.TypeId]: Readable.TypeId\n  constructor(readonly ref: MutableRef.MutableRef<A>) {\n    this[Readable.TypeId] = Readable.TypeId\n    this.get = core.sync(() => MutableRef.get(this.ref))\n  }\n  readonly get: Effect.Effect<A>\n  modify<B>(f: (a: A) => readonly [B, A]): Effect.Effect<B> {\n    return core.sync(() => {\n      const current = MutableRef.get(this.ref)\n      const [b, a] = f(current)\n      if ((current as unknown) !== (a as unknown)) {\n        MutableRef.set(a)(this.ref)\n      }\n      return b\n    })\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const unsafeMake = <A>(value: A): Ref.Ref<A> => new RefImpl(MutableRef.make(value))\n\n/** @internal */\nexport const make = <A>(value: A): Effect.Effect<Ref.Ref<A>> => core.sync(() => unsafeMake(value))\n\n/** @internal */\nexport const get = <A>(self: Ref.Ref<A>) => self.get\n\n/** @internal */\nexport const set = dual<\n  <A>(value: A) => (self: Ref.Ref<A>) => Effect.Effect<void>,\n  <A>(self: Ref.Ref<A>, value: A) => Effect.Effect<void>\n>(2, <A>(self: Ref.Ref<A>, value: A) => self.modify((): [void, A] => [void 0, value]))\n\n/** @internal */\nexport const getAndSet = dual<\n  <A>(value: A) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, value: A) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, value: A) => self.modify((a): [A, A] => [a, value]))\n\n/** @internal */\nexport const getAndUpdate = dual<\n  <A>(f: (a: A) => A) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, f: (a: A) => A) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, f: (a: A) => A) => self.modify((a): [A, A] => [a, f(a)]))\n\n/** @internal */\nexport const getAndUpdateSome = dual<\n  <A>(pf: (a: A) => Option.Option<A>) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>) =>\n  self.modify((value): [A, A] => {\n    const option = pf(value)\n    switch (option._tag) {\n      case \"None\": {\n        return [value, value]\n      }\n      case \"Some\": {\n        return [value, option.value]\n      }\n    }\n  }))\n\n/** @internal */\nexport const setAndGet = dual<\n  <A>(value: A) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, value: A) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, value: A) => self.modify((): [A, A] => [value, value]))\n\n/** @internal */\nexport const modify = dual<\n  <A, B>(f: (a: A) => readonly [B, A]) => (self: Ref.Ref<A>) => Effect.Effect<B>,\n  <A, B>(self: Ref.Ref<A>, f: (a: A) => readonly [B, A]) => Effect.Effect<B>\n>(2, (self, f) => self.modify(f))\n\n/** @internal */\nexport const modifySome = dual<\n  <B, A>(\n    fallback: B,\n    pf: (a: A) => Option.Option<readonly [B, A]>\n  ) => (self: Ref.Ref<A>) => Effect.Effect<B>,\n  <A, B>(\n    self: Ref.Ref<A>,\n    fallback: B,\n    pf: (a: A) => Option.Option<readonly [B, A]>\n  ) => Effect.Effect<B>\n>(3, (self, fallback, pf) =>\n  self.modify((value) => {\n    const option = pf(value)\n    switch (option._tag) {\n      case \"None\": {\n        return [fallback, value]\n      }\n      case \"Some\": {\n        return option.value\n      }\n    }\n  }))\n\n/** @internal */\nexport const update = dual<\n  <A>(f: (a: A) => A) => (self: Ref.Ref<A>) => Effect.Effect<void>,\n  <A>(self: Ref.Ref<A>, f: (a: A) => A) => Effect.Effect<void>\n>(2, <A>(self: Ref.Ref<A>, f: (a: A) => A) => self.modify((a): [void, A] => [void 0, f(a)]))\n\n/** @internal */\nexport const updateAndGet = dual<\n  <A>(f: (a: A) => A) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, f: (a: A) => A) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, f: (a: A) => A) =>\n  self.modify((a): [A, A] => {\n    const result = f(a)\n    return [result, result]\n  }))\n\n/** @internal */\nexport const updateSome = dual<\n  <A>(f: (a: A) => Option.Option<A>) => (self: Ref.Ref<A>) => Effect.Effect<void>,\n  <A>(self: Ref.Ref<A>, f: (a: A) => Option.Option<A>) => Effect.Effect<void>\n>(2, <A>(self: Ref.Ref<A>, f: (a: A) => Option.Option<A>) =>\n  self.modify(\n    (a): [void, A] => [\n      void 0,\n      Option.match(f(a), {\n        onNone: () => a,\n        onSome: (b) => b\n      })\n    ]\n  ))\n\n/** @internal */\nexport const updateSomeAndGet = dual<\n  <A>(pf: (a: A) => Option.Option<A>) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>) =>\n  self.modify((value): [A, A] => {\n    const option = pf(value)\n    switch (option._tag) {\n      case \"None\": {\n        return [value, value]\n      }\n      case \"Some\": {\n        return [option.value, option.value]\n      }\n    }\n  }))\n\n/** @internal */\nexport const unsafeGet = <A>(self: Ref.Ref<A>): A => MutableRef.get((self as RefImpl<A>).ref)\n", "/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/ref.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Readable } from \"./Readable.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RefTypeId: unique symbol = internal.RefTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RefTypeId = typeof RefTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Ref<in out A> extends Ref.Variance<A>, Readable<A> {\n  modify<B>(f: (a: A) => readonly [B, A]): Effect.Effect<B>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport declare namespace Ref {\n  /**\n   * @since 2.0.0\n   */\n  export interface Variance<in out A> {\n    readonly [RefTypeId]: {\n      readonly _A: Types.Invariant<A>\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <A>(value: A) => Effect.Effect<Ref<A>> = internal.make\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const get: <A>(self: Ref<A>) => Effect.Effect<A> = internal.get\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndSet: {\n  <A>(value: A): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, value: A): Effect.Effect<A>\n} = internal.getAndSet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdate: {\n  <A>(f: (a: A) => A): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, f: (a: A) => A): Effect.Effect<A>\n} = internal.getAndUpdate\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdateSome: {\n  <A>(pf: (a: A) => Option.Option<A>): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = internal.getAndUpdateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modify: {\n  <A, B>(f: (a: A) => readonly [B, A]): (self: Ref<A>) => Effect.Effect<B>\n  <A, B>(self: Ref<A>, f: (a: A) => readonly [B, A]): Effect.Effect<B>\n} = internal.modify\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modifySome: {\n  <B, A>(fallback: B, pf: (a: A) => Option.Option<readonly [B, A]>): (self: Ref<A>) => Effect.Effect<B>\n  <A, B>(self: Ref<A>, fallback: B, pf: (a: A) => Option.Option<readonly [B, A]>): Effect.Effect<B>\n} = internal.modifySome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const set: {\n  <A>(value: A): (self: Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref<A>, value: A): Effect.Effect<void>\n} = internal.set\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const setAndGet: {\n  <A>(value: A): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, value: A): Effect.Effect<A>\n} = internal.setAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const update: {\n  <A>(f: (a: A) => A): (self: Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref<A>, f: (a: A) => A): Effect.Effect<void>\n} = internal.update\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateAndGet: {\n  <A>(f: (a: A) => A): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, f: (a: A) => A): Effect.Effect<A>\n} = internal.updateAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSome: {\n  <A>(f: (a: A) => Option.Option<A>): (self: Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref<A>, f: (a: A) => Option.Option<A>): Effect.Effect<void>\n} = internal.updateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSomeAndGet: {\n  <A>(pf: (a: A) => Option.Option<A>): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = internal.updateSomeAndGet\n\n/**\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: <A>(value: A) => Ref<A> = internal.unsafeMake\n", "/**\n * @since 2.0.0\n */\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as Fiber from \"./Fiber.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as internal from \"./internal/tracer.js\"\nimport type * as Option from \"./Option.js\"\n\n/**\n * @since 2.0.0\n */\nexport const TracerTypeId: unique symbol = internal.TracerTypeId\n\n/**\n * @since 2.0.0\n */\nexport type TracerTypeId = typeof TracerTypeId\n\n/**\n * @since 2.0.0\n */\nexport interface Tracer {\n  readonly [TracerTypeId]: TracerTypeId\n  span(\n    name: string,\n    parent: Option.Option<AnySpan>,\n    context: Context.Context<never>,\n    links: ReadonlyArray<SpanLink>,\n    startTime: bigint,\n    kind: SpanKind\n  ): Span\n  context<X>(f: () => X, fiber: Fiber.RuntimeFiber<any, any>): X\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type SpanStatus = {\n  _tag: \"Started\"\n  startTime: bigint\n} | {\n  _tag: \"Ended\"\n  startTime: bigint\n  endTime: bigint\n  exit: Exit.Exit<unknown, unknown>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type AnySpan = Span | ExternalSpan\n\n/**\n * @since 2.0.0\n * @category tags\n */\nexport interface ParentSpan {\n  readonly _: unique symbol\n}\n\n/**\n * @since 2.0.0\n * @category tags\n */\nexport const ParentSpan: Context.Tag<ParentSpan, AnySpan> = internal.spanTag\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ExternalSpan {\n  readonly _tag: \"ExternalSpan\"\n  readonly spanId: string\n  readonly traceId: string\n  readonly sampled: boolean\n  readonly context: Context.Context<never>\n}\n\n/**\n * @since 3.1.0\n * @category models\n */\nexport interface SpanOptions {\n  readonly attributes?: Record<string, unknown> | undefined\n  readonly links?: ReadonlyArray<SpanLink> | undefined\n  readonly parent?: AnySpan | undefined\n  readonly root?: boolean | undefined\n  readonly context?: Context.Context<never> | undefined\n  readonly kind?: SpanKind | undefined\n  readonly captureStackTrace?: boolean | LazyArg<string | undefined> | undefined\n}\n\n/**\n * @since 3.1.0\n * @category models\n */\nexport type SpanKind = \"internal\" | \"server\" | \"client\" | \"producer\" | \"consumer\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Span {\n  readonly _tag: \"Span\"\n  readonly name: string\n  readonly spanId: string\n  readonly traceId: string\n  readonly parent: Option.Option<AnySpan>\n  readonly context: Context.Context<never>\n  readonly status: SpanStatus\n  readonly attributes: ReadonlyMap<string, unknown>\n  readonly links: ReadonlyArray<SpanLink>\n  readonly sampled: boolean\n  readonly kind: SpanKind\n  end(endTime: bigint, exit: Exit.Exit<unknown, unknown>): void\n  attribute(key: string, value: unknown): void\n  event(name: string, startTime: bigint, attributes?: Record<string, unknown>): void\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SpanLink {\n  readonly _tag: \"SpanLink\"\n  readonly span: AnySpan\n  readonly attributes: Readonly<Record<string, unknown>>\n}\n\n/**\n * @since 2.0.0\n * @category tags\n */\nexport const Tracer: Context.Tag<Tracer, Tracer> = internal.tracerTag\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (options: Omit<Tracer, typeof TracerTypeId>) => Tracer = internal.make\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const externalSpan: (\n  options: {\n    readonly spanId: string\n    readonly traceId: string\n    readonly sampled?: boolean | undefined\n    readonly context?: Context.Context<never> | undefined\n  }\n) => ExternalSpan = internal.externalSpan\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const tracerWith: <A, E, R>(f: (tracer: Tracer) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  defaultServices.tracerWith\n", "import * as Arr from \"../../Array.js\"\nimport { equals } from \"../../Equal.js\"\nimport type * as FiberId from \"../../FiberId.js\"\nimport type * as FiberRefs from \"../../FiberRefs.js\"\nimport type * as FiberRefsPatch from \"../../FiberRefsPatch.js\"\nimport { dual } from \"../../Function.js\"\nimport * as _fiberRefs from \"../fiberRefs.js\"\n\n/** @internal */\nexport const OP_EMPTY = \"Empty\" as const\n\n/** @internal */\nexport type OP_EMPTY = typeof OP_EMPTY\n\n/** @internal */\nexport const OP_ADD = \"Add\" as const\n\n/** @internal */\nexport type OP_ADD = typeof OP_ADD\n\n/** @internal */\nexport const OP_REMOVE = \"Remove\" as const\n\n/** @internal */\nexport type OP_REMOVE = typeof OP_REMOVE\n\n/** @internal */\nexport const OP_UPDATE = \"Update\" as const\n\n/** @internal */\nexport type OP_UPDATE = typeof OP_UPDATE\n\n/** @internal */\nexport const OP_AND_THEN = \"AndThen\" as const\n\n/** @internal */\nexport type OP_AND_THEN = typeof OP_AND_THEN\n\n/** @internal */\nexport const empty: FiberRefsPatch.FiberRefsPatch = ({\n  _tag: OP_EMPTY\n}) as FiberRefsPatch.FiberRefsPatch\n\n/** @internal */\nexport const diff = (\n  oldValue: FiberRefs.FiberRefs,\n  newValue: FiberRefs.FiberRefs\n): FiberRefsPatch.FiberRefsPatch => {\n  const missingLocals = new Map(oldValue.locals)\n  let patch = empty\n  for (const [fiberRef, pairs] of newValue.locals.entries()) {\n    const newValue = Arr.headNonEmpty(pairs)[1]\n    const old = missingLocals.get(fiberRef)\n    if (old !== undefined) {\n      const oldValue = Arr.headNonEmpty(old)[1]\n      if (!equals(oldValue, newValue)) {\n        patch = combine({\n          _tag: OP_UPDATE,\n          fiberRef,\n          patch: fiberRef.diff(oldValue, newValue)\n        })(patch)\n      }\n    } else {\n      patch = combine({\n        _tag: OP_ADD,\n        fiberRef,\n        value: newValue\n      })(patch)\n    }\n    missingLocals.delete(fiberRef)\n  }\n  for (const [fiberRef] of missingLocals.entries()) {\n    patch = combine({\n      _tag: OP_REMOVE,\n      fiberRef\n    })(patch)\n  }\n  return patch\n}\n\n/** @internal */\nexport const combine = dual<\n  (that: FiberRefsPatch.FiberRefsPatch) => (self: FiberRefsPatch.FiberRefsPatch) => FiberRefsPatch.FiberRefsPatch,\n  (self: FiberRefsPatch.FiberRefsPatch, that: FiberRefsPatch.FiberRefsPatch) => FiberRefsPatch.FiberRefsPatch\n>(2, (self, that) => ({\n  _tag: OP_AND_THEN,\n  first: self,\n  second: that\n}))\n\n/** @internal */\nexport const patch = dual<\n  (\n    fiberId: FiberId.Runtime,\n    oldValue: FiberRefs.FiberRefs\n  ) => (self: FiberRefsPatch.FiberRefsPatch) => FiberRefs.FiberRefs,\n  (\n    self: FiberRefsPatch.FiberRefsPatch,\n    fiberId: FiberId.Runtime,\n    oldValue: FiberRefs.FiberRefs\n  ) => FiberRefs.FiberRefs\n>(3, (self, fiberId, oldValue) => {\n  let fiberRefs: FiberRefs.FiberRefs = oldValue\n  let patches: ReadonlyArray<FiberRefsPatch.FiberRefsPatch> = Arr.of(self)\n  while (Arr.isNonEmptyReadonlyArray(patches)) {\n    const head = Arr.headNonEmpty(patches)\n    const tail = Arr.tailNonEmpty(patches)\n    switch (head._tag) {\n      case OP_EMPTY: {\n        patches = tail\n        break\n      }\n      case OP_ADD: {\n        fiberRefs = _fiberRefs.updateAs(fiberRefs, {\n          fiberId,\n          fiberRef: head.fiberRef,\n          value: head.value\n        })\n        patches = tail\n        break\n      }\n      case OP_REMOVE: {\n        fiberRefs = _fiberRefs.delete_(fiberRefs, head.fiberRef)\n        patches = tail\n        break\n      }\n      case OP_UPDATE: {\n        const value = _fiberRefs.getOrDefault(fiberRefs, head.fiberRef)\n        fiberRefs = _fiberRefs.updateAs(fiberRefs, {\n          fiberId,\n          fiberRef: head.fiberRef,\n          value: head.fiberRef.patch(head.patch)(value)\n        })\n        patches = tail\n        break\n      }\n      case OP_AND_THEN: {\n        patches = Arr.prepend(head.first)(Arr.prepend(head.second)(tail))\n        break\n      }\n    }\n  }\n  return fiberRefs\n})\n", "import * as Equal from \"../../Equal.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricLabel from \"../../MetricLabel.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricLabelSymbolKey = \"effect/MetricLabel\"\n\n/** @internal */\nexport const MetricLabelTypeId: MetricLabel.MetricLabelTypeId = Symbol.for(\n  MetricLabelSymbolKey\n) as MetricLabel.MetricLabelTypeId\n\n/** @internal */\nclass MetricLabelImpl implements MetricLabel.MetricLabel {\n  readonly [MetricLabelTypeId]: MetricLabel.MetricLabelTypeId = MetricLabelTypeId\n  readonly _hash: number\n  constructor(readonly key: string, readonly value: string) {\n    this._hash = Hash.string(MetricLabelSymbolKey + this.key + this.value)\n  }\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isMetricLabel(that) &&\n      this.key === that.key &&\n      this.value === that.value\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const make = (key: string, value: string): MetricLabel.MetricLabel => {\n  return new MetricLabelImpl(key, value)\n}\n\n/** @internal */\nexport const isMetricLabel = (u: unknown): u is MetricLabel.MetricLabel => hasProperty(u, MetricLabelTypeId)\n", "import type { Exit } from \"effect/Exit\"\nimport { internalCall } from \"effect/Utils\"\nimport * as Arr from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport type * as FiberRefsPatch from \"../FiberRefsPatch.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constFalse, constTrue, constVoid, dual, identity, pipe } from \"../Function.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as List from \"../List.js\"\nimport * as LogLevel from \"../LogLevel.js\"\nimport * as LogSpan from \"../LogSpan.js\"\nimport type * as Metric from \"../Metric.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport * as Option from \"../Option.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport type * as Random from \"../Random.js\"\nimport * as Ref from \"../Ref.js\"\nimport type * as runtimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport * as Tracer from \"../Tracer.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport type { Unify } from \"../Unify.js\"\nimport { yieldWrapGet } from \"../Utils.js\"\nimport * as internalCause from \"./cause.js\"\nimport { clockTag } from \"./clock.js\"\nimport * as core from \"./core.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport * as doNotation from \"./doNotation.js\"\nimport * as fiberRefsPatch from \"./fiberRefs/patch.js\"\nimport type { FiberRuntime } from \"./fiberRuntime.js\"\nimport * as metricLabel from \"./metric/label.js\"\nimport * as runtimeFlags from \"./runtimeFlags.js\"\nimport * as internalTracer from \"./tracer.js\"\n\n/* @internal */\nexport const annotateLogs = dual<\n  {\n    (key: string, value: unknown): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n    (\n      values: Record<string, unknown>\n    ): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  },\n  {\n    <A, E, R>(effect: Effect.Effect<A, E, R>, key: string, value: unknown): Effect.Effect<A, E, R>\n    <A, E, R>(effect: Effect.Effect<A, E, R>, values: Record<string, unknown>): Effect.Effect<A, E, R>\n  }\n>(\n  (args) => core.isEffect(args[0]),\n  function<A, E, R>() {\n    const args = arguments\n    return core.fiberRefLocallyWith(\n      args[0] as Effect.Effect<A, E, R>,\n      core.currentLogAnnotations,\n      typeof args[1] === \"string\"\n        ? HashMap.set(args[1], args[2])\n        : (annotations) =>\n          Object.entries(args[1] as Record<string, unknown>).reduce(\n            (acc, [key, value]) => HashMap.set(acc, key, value),\n            annotations\n          )\n    )\n  }\n)\n\n/* @internal */\nexport const asSome = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Option.Option<A>, E, R> =>\n  core.map(self, Option.some)\n\n/* @internal */\nexport const asSomeError = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, Option.Option<E>, R> =>\n  core.mapError(self, Option.some)\n\n/* @internal */\nexport const try_: {\n  <A, E>(options: {\n    readonly try: LazyArg<A>\n    readonly catch: (error: unknown) => E\n  }): Effect.Effect<A, E>\n  <A>(evaluate: LazyArg<A>): Effect.Effect<A, Cause.UnknownException>\n} = <A, E>(\n  arg: LazyArg<A> | {\n    readonly try: LazyArg<A>\n    readonly catch: (error: unknown) => E\n  }\n) => {\n  let evaluate: LazyArg<A>\n  let onFailure: ((error: unknown) => E) | undefined = undefined\n  if (typeof arg === \"function\") {\n    evaluate = arg\n  } else {\n    evaluate = arg.try\n    onFailure = arg.catch\n  }\n  return core.sync(() => {\n    try {\n      return evaluate()\n    } catch (error) {\n      throw core.makeEffectError(internalCause.fail(\n        onFailure ? onFailure(error) : new core.UnknownException(error)\n      ))\n    }\n  })\n}\n\n/* @internal */\nexport const _catch: {\n  <N extends keyof E, K extends E[N] & string, E, A1, E1, R1>(\n    discriminator: N,\n    options: {\n      readonly failure: K\n      readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect.Effect<A1, E1, R1>\n    }\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<\n    A | A1,\n    Exclude<E, { [n in N]: K }> | E1,\n    R | R1\n  >\n  <A, E, R, N extends keyof E, K extends E[N] & string, A1, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    discriminator: N,\n    options: {\n      readonly failure: K\n      readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect.Effect<A1, E1, R1>\n    }\n  ): Effect.Effect<A | A1, Exclude<E, { [n in N]: K }> | E1, R | R1>\n} = dual(\n  3,\n  (self, tag, options) =>\n    core.catchAll(self, (e) => {\n      if (Predicate.hasProperty(e, tag) && e[tag] === options.failure) {\n        return options.onFailure(e)\n      }\n      return core.fail(e)\n    })\n)\n\n/* @internal */\nexport const catchAllDefect = dual<\n  <A2, E2, R2>(\n    f: (defect: unknown) => Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (defect: unknown) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  f: (defect: unknown) => Effect.Effect<A2, E2, R2>\n): Effect.Effect<A | A2, E | E2, R | R2> =>\n  core.catchAllCause(\n    self,\n    (cause): Effect.Effect<A | A2, E | E2, R | R2> => {\n      const option = internalCause.find(cause, (_) => internalCause.isDieType(_) ? Option.some(_) : Option.none())\n      switch (option._tag) {\n        case \"None\": {\n          return core.failCause(cause)\n        }\n        case \"Some\": {\n          return f(option.value.defect)\n        }\n      }\n    }\n  ))\n\n/* @internal */\nexport const catchSomeCause: {\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A2 | A, E | E2, R2 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A2 | A, E | E2, R2 | R> =>\n    core.matchCauseEffect(self, {\n      onFailure: (cause): Effect.Effect<A2, E | E2, R2> => {\n        const option = f(cause)\n        switch (option._tag) {\n          case \"None\": {\n            return core.failCause(cause)\n          }\n          case \"Some\": {\n            return option.value\n          }\n        }\n      },\n      onSuccess: core.succeed\n    })\n)\n\n/* @internal */\nexport const catchSomeDefect = dual<\n  <A2, E2, R2>(\n    pf: (defect: unknown) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (defect: unknown) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (defect: unknown) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A | A2, E | E2, R | R2> =>\n    core.catchAllCause(\n      self,\n      (cause): Effect.Effect<A | A2, E | E2, R | R2> => {\n        const option = internalCause.find(cause, (_) => internalCause.isDieType(_) ? Option.some(_) : Option.none())\n        switch (option._tag) {\n          case \"None\": {\n            return core.failCause(cause)\n          }\n          case \"Some\": {\n            const optionEffect = pf(option.value.defect)\n            return optionEffect._tag === \"Some\" ? optionEffect.value : core.failCause(cause)\n          }\n        }\n      }\n    )\n)\n\n/* @internal */\nexport const catchTag = dual<\n  <K extends (E extends { _tag: string } ? E[\"_tag\"] : never), E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect.Effect<A1, E1, R1>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A1, Exclude<E, { _tag: K }> | E1, R | R1>,\n  <A, E, R, K extends (E extends { _tag: string } ? E[\"_tag\"] : never), R1, E1, A1>(\n    self: Effect.Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect.Effect<A1, E1, R1>\n  ) => Effect.Effect<A | A1, Exclude<E, { _tag: K }> | E1, R | R1>\n>(3, <A, E, R, K extends (E extends { _tag: string } ? E[\"_tag\"] : never), R1, E1, A1>(\n  self: Effect.Effect<A, E, R>,\n  k: K,\n  f: (e: Extract<E, { _tag: K }>) => Effect.Effect<A1, E1, R1>\n): Effect.Effect<A | A1, Exclude<E, { _tag: K }> | E1, R | R1> =>\n  core.catchIf(self, Predicate.isTagged(k) as Predicate.Refinement<E, Extract<E, { _tag: K }>>, f) as any)\n\n/** @internal */\nexport const catchTags: {\n  <\n    E,\n    Cases extends (E extends { _tag: string } ? {\n        [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Effect.Effect<any, any, any>\n      } :\n      {})\n  >(\n    cases: Cases\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<infer A, any, any>) ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<any, infer E, any>) ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<any, any, infer R>) ? R : never\n    }[keyof Cases]\n  >\n  <\n    R,\n    E,\n    A,\n    Cases extends (E extends { _tag: string } ? {\n        [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Effect.Effect<any, any, any>\n      } :\n      {})\n  >(\n    self: Effect.Effect<A, E, R>,\n    cases: Cases\n  ): Effect.Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<infer A, any, any>) ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<any, infer E, any>) ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<any, any, infer R>) ? R : never\n    }[keyof Cases]\n  >\n} = dual(2, (self, cases) => {\n  let keys: Array<string>\n  return core.catchIf(\n    self,\n    (e): e is { readonly _tag: string } => {\n      keys ??= Object.keys(cases)\n      return Predicate.hasProperty(e, \"_tag\") && Predicate.isString(e[\"_tag\"]) && keys.includes(e[\"_tag\"])\n    },\n    (e) => cases[e[\"_tag\"]](e)\n  )\n})\n\n/* @internal */\nexport const cause = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Cause.Cause<E>, never, R> =>\n  core.matchCause(self, { onFailure: identity, onSuccess: () => internalCause.empty })\n\n/* @internal */\nexport const clockWith: <A, E, R>(f: (clock: Clock.Clock) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  Clock.clockWith\n\n/* @internal */\nexport const clock: Effect.Effect<Clock.Clock> = clockWith(core.succeed)\n\n/* @internal */\nexport const delay = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, duration: Duration.DurationInput) => Effect.Effect<A, E, R>\n>(2, (self, duration) => core.zipRight(Clock.sleep(duration), self))\n\n/* @internal */\nexport const descriptorWith = <A, E, R>(\n  f: (descriptor: Fiber.Fiber.Descriptor) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  core.withFiberRuntime((state, status) =>\n    f({\n      id: state.id(),\n      status,\n      interruptors: internalCause.interruptors(state.getFiberRef(core.currentInterruptedCause))\n    })\n  ) as Effect.Effect<A, E, R>\n\n/* @internal */\nexport const allowInterrupt: Effect.Effect<void> = descriptorWith(\n  (descriptor) =>\n    HashSet.size(descriptor.interruptors) > 0\n      ? core.interrupt\n      : core.void\n)\n\n/* @internal */\nexport const descriptor: Effect.Effect<Fiber.Fiber.Descriptor> = descriptorWith(core.succeed)\n\n/* @internal */\nexport const diffFiberRefs = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[FiberRefsPatch.FiberRefsPatch, A], E, R> => summarized(self, fiberRefs, fiberRefsPatch.diff)\n\n/* @internal */\nexport const diffFiberRefsAndRuntimeFlags = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[[FiberRefsPatch.FiberRefsPatch, runtimeFlagsPatch.RuntimeFlagsPatch], A], E, R> =>\n  summarized(\n    self,\n    core.zip(fiberRefs, core.runtimeFlags),\n    ([refs, flags], [refsNew, flagsNew]) => [fiberRefsPatch.diff(refs, refsNew), runtimeFlags.diff(flags, flagsNew)]\n  )\n\n/* @internal */\nexport const Do: Effect.Effect<{}> = core.succeed({})\n\n/* @internal */\nexport const bind: {\n  <N extends string, A extends object, B, E2, R2>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Effect.Effect<B, E2, R2>\n  ): <E1, R1>(\n    self: Effect.Effect<A, E1, R1>\n  ) => Effect.Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E2 | E1, R2 | R1>\n  <A extends object, N extends string, E1, R1, B, E2, R2>(\n    self: Effect.Effect<A, E1, R1>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Effect.Effect<B, E2, R2>\n  ): Effect.Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E1 | E2, R1 | R2>\n} = doNotation.bind<Effect.EffectTypeLambda>(core.map, core.flatMap)\n\n/* @internal */\nexport const bindTo: {\n  <N extends string>(name: N): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<{ [K in N]: A }, E, R>\n  <A, E, R, N extends string>(self: Effect.Effect<A, E, R>, name: N): Effect.Effect<{ [K in N]: A }, E, R>\n} = doNotation.bindTo<Effect.EffectTypeLambda>(core.map)\n\n/* @internal */\nexport const let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): <E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n  <A extends object, N extends string, E, R, B>(\n    self: Effect.Effect<A, E, R>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Effect.Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n} = doNotation.let_<Effect.EffectTypeLambda>(core.map)\n\n/* @internal */\nexport const dropUntil: {\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R> =>\n    core.suspend(() => {\n      const iterator = elements[Symbol.iterator]()\n      const builder: Array<A> = []\n      let next: IteratorResult<A, any>\n      let dropping: Effect.Effect<boolean, E, R> = core.succeed(false)\n      let i = 0\n      while ((next = iterator.next()) && !next.done) {\n        const a = next.value\n        const index = i++\n        dropping = core.flatMap(dropping, (bool) => {\n          if (bool) {\n            builder.push(a)\n            return core.succeed(true)\n          }\n          return predicate(a, index)\n        })\n      }\n      return core.map(dropping, () => builder)\n    })\n)\n\n/* @internal */\nexport const dropWhile: {\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R> =>\n    core.suspend(() => {\n      const iterator = elements[Symbol.iterator]()\n      const builder: Array<A> = []\n      let next\n      let dropping: Effect.Effect<boolean, E, R> = core.succeed(true)\n      let i = 0\n      while ((next = iterator.next()) && !next.done) {\n        const a = next.value\n        const index = i++\n        dropping = core.flatMap(dropping, (d) =>\n          core.map(d ? predicate(a, index) : core.succeed(false), (b) => {\n            if (!b) {\n              builder.push(a)\n            }\n            return b\n          }))\n      }\n      return core.map(dropping, () => builder)\n    })\n)\n\n/* @internal */\nexport const contextWith = <R, A>(f: (context: Context.Context<R>) => A): Effect.Effect<A, never, R> =>\n  core.map(core.context<R>(), f)\n\n/* @internal */\nexport const eventually = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, never, R> =>\n  core.orElse(self, () => core.flatMap(core.yieldNow(), () => eventually(self)))\n\n/* @internal */\nexport const filterMap = dual<\n  <Eff extends Effect.Effect<any, any, any>, B>(\n    pf: (a: Effect.Effect.Success<Eff>) => Option.Option<B>\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Array<B>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, B>(\n    elements: Iterable<Eff>,\n    pf: (a: Effect.Effect.Success<Eff>) => Option.Option<B>\n  ) => Effect.Effect<Array<B>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>\n>(2, (elements, pf) =>\n  core.map(\n    core.forEachSequential(elements, identity),\n    Arr.filterMap(pf)\n  ))\n\n/* @internal */\nexport const filterOrDie: {\n  <A, B extends A>(\n    refinement: Predicate.Refinement<NoInfer<A>, B>,\n    orDieWith: (a: NoInfer<A>) => unknown\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  <A>(\n    predicate: Predicate.Predicate<NoInfer<A>>,\n    orDieWith: (a: NoInfer<A>) => unknown\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  <A, E, R, B extends A>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Predicate.Refinement<A, B>,\n    orDieWith: (a: A) => unknown\n  ): Effect.Effect<B, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate.Predicate<A>,\n    orDieWith: (a: A) => unknown\n  ): Effect.Effect<A, E, R>\n} = dual(\n  3,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate.Predicate<A>,\n    orDieWith: (a: A) => unknown\n  ): Effect.Effect<A, E, R> => filterOrElse(self, predicate, (a) => core.dieSync(() => orDieWith(a)))\n)\n\n/* @internal */\nexport const filterOrDieMessage: {\n  <A, B extends A>(\n    refinement: Predicate.Refinement<NoInfer<A>, B>,\n    message: string\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  <A>(\n    predicate: Predicate.Predicate<NoInfer<A>>,\n    message: string\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  <A, E, R, B extends A>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Predicate.Refinement<A, B>,\n    message: string\n  ): Effect.Effect<B, E, R>\n  <A, E, R>(self: Effect.Effect<A, E, R>, predicate: Predicate.Predicate<A>, message: string): Effect.Effect<A, E, R>\n} = dual(\n  3,\n  <A, E, R>(self: Effect.Effect<A, E, R>, predicate: Predicate.Predicate<A>, message: string): Effect.Effect<A, E, R> =>\n    filterOrElse(self, predicate, () => core.dieMessage(message))\n)\n\n/* @internal */\nexport const filterOrElse: {\n  <A, B extends A, C, E2, R2>(\n    refinement: Predicate.Refinement<NoInfer<A>, B>,\n    orElse: (a: NoInfer<A>) => Effect.Effect<C, E2, R2>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B | C, E2 | E, R2 | R>\n  <A, B, E2, R2>(\n    predicate: Predicate.Predicate<NoInfer<A>>,\n    orElse: (a: NoInfer<A>) => Effect.Effect<B, E2, R2>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | B, E2 | E, R2 | R>\n  <A, E, R, B extends A, C, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Predicate.Refinement<A, B>,\n    orElse: (a: A) => Effect.Effect<C, E2, R2>\n  ): Effect.Effect<B | C, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate.Predicate<A>,\n    orElse: (a: A) => Effect.Effect<B, E2, R2>\n  ): Effect.Effect<A | B, E | E2, R | R2>\n} = dual(3, <A, E, R, B, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  predicate: Predicate.Predicate<A>,\n  orElse: (a: A) => Effect.Effect<B, E2, R2>\n): Effect.Effect<A | B, E | E2, R | R2> =>\n  core.flatMap(\n    self,\n    (a) => predicate(a) ? core.succeed<A | B>(a) : orElse(a)\n  ))\n\n/** @internal */\nexport const liftPredicate = dual<\n  {\n    <A, B extends A, E>(\n      refinement: Predicate.Refinement<NoInfer<A>, B>,\n      orFailWith: (a: NoInfer<A>) => E\n    ): (a: A) => Effect.Effect<B, E>\n    <A, E>(\n      predicate: Predicate.Predicate<NoInfer<A>>,\n      orFailWith: (a: NoInfer<A>) => E\n    ): (a: A) => Effect.Effect<A, E>\n  },\n  {\n    <A, E, B extends A>(\n      self: A,\n      refinement: Predicate.Refinement<A, B>,\n      orFailWith: (a: A) => E\n    ): Effect.Effect<B, E>\n    <A, E>(\n      self: A,\n      predicate: Predicate.Predicate<NoInfer<A>>,\n      orFailWith: (a: NoInfer<A>) => E\n    ): Effect.Effect<A, E>\n  }\n>(\n  3,\n  <A, E>(\n    self: A,\n    predicate: Predicate.Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E\n  ): Effect.Effect<A, E> => core.suspend(() => predicate(self) ? core.succeed(self) : core.fail(orFailWith(self)))\n)\n\n/* @internal */\nexport const filterOrFail: {\n  <A, B extends A, E2>(\n    refinement: Predicate.Refinement<NoInfer<A>, B>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E2 | E, R>\n  <A, E2>(\n    predicate: Predicate.Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2 | E, R>\n  <A, B extends A>(\n    refinement: Predicate.Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, Cause.NoSuchElementException | E, R>\n  <A>(\n    predicate: Predicate.Predicate<NoInfer<A>>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, Cause.NoSuchElementException | E, R>\n  <A, E, R, B extends A, E2>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Predicate.Refinement<A, B>,\n    orFailWith: (a: A) => E2\n  ): Effect.Effect<B, E | E2, R>\n  <A, E, R, E2>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate.Predicate<A>,\n    orFailWith: (a: A) => E2\n  ): Effect.Effect<A, E | E2, R>\n  <A, E, R, B extends A>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Predicate.Refinement<A, B>\n  ): Effect.Effect<B, E | Cause.NoSuchElementException, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate.Predicate<A>\n  ): Effect.Effect<A, E | Cause.NoSuchElementException, R>\n} = dual((args) => core.isEffect(args[0]), <A, E, R, E2>(\n  self: Effect.Effect<A, E, R>,\n  predicate: Predicate.Predicate<A>,\n  orFailWith?: (a: A) => E2\n): Effect.Effect<A, E | E2 | Cause.NoSuchElementException, R> =>\n  filterOrElse(\n    self,\n    predicate,\n    (a): Effect.Effect<never, E2 | Cause.NoSuchElementException, never> =>\n      orFailWith === undefined ? core.fail(new core.NoSuchElementException()) : core.failSync(() => orFailWith(a))\n  ))\n\n/* @internal */\nexport const findFirst: {\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<Option.Option<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Option.Option<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Option.Option<A>, E, R> =>\n    core.suspend(() => {\n      const iterator = elements[Symbol.iterator]()\n      const next = iterator.next()\n      if (!next.done) {\n        return findLoop(iterator, 0, f, next.value)\n      }\n      return core.succeed(Option.none())\n    })\n)\n\nconst findLoop = <A, E, R>(\n  iterator: Iterator<A>,\n  index: number,\n  f: (a: A, i: number) => Effect.Effect<boolean, E, R>,\n  value: A\n): Effect.Effect<Option.Option<A>, E, R> =>\n  core.flatMap(f(value, index), (result) => {\n    if (result) {\n      return core.succeed(Option.some(value))\n    }\n    const next = iterator.next()\n    if (!next.done) {\n      return findLoop(iterator, index + 1, f, next.value)\n    }\n    return core.succeed(Option.none())\n  })\n\n/* @internal */\nexport const firstSuccessOf = <Eff extends Effect.Effect<any, any, any>>(\n  effects: Iterable<Eff>\n): Effect.Effect<Effect.Effect.Success<Eff>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>> =>\n  core.suspend(() => {\n    const list = Chunk.fromIterable(effects)\n    if (!Chunk.isNonEmpty(list)) {\n      return core.dieSync(() => new core.IllegalArgumentException(`Received an empty collection of effects`))\n    }\n    return pipe(\n      Chunk.tailNonEmpty(list),\n      Arr.reduce(Chunk.headNonEmpty(list), (left, right) => core.orElse(left, () => right) as Eff)\n    )\n  })\n\n/* @internal */\nexport const flipWith: {\n  <E, A, R, E2, A2, R2>(\n    f: (effect: Effect.Effect<E, A, R>) => Effect.Effect<E2, A2, R2>\n  ): (self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2, R2>\n  <A, E, R, E2, A2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (effect: Effect.Effect<E, A, R>) => Effect.Effect<E2, A2, R2>\n  ): Effect.Effect<A2, E2, R2>\n} = dual(2, <A, E, R, E2, A2, R2>(\n  self: Effect.Effect<A, E, R>,\n  f: (effect: Effect.Effect<E, A, R>) => Effect.Effect<E2, A2, R2>\n): Effect.Effect<A2, E2, R2> => core.flip(f(core.flip(self))))\n\n/* @internal */\nexport const match: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Effect.Effect<A2 | A3, never, R>\n} = dual(2, <A, E, R, A2, A3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (error: E) => A2\n    readonly onSuccess: (value: A) => A3\n  }\n): Effect.Effect<A2 | A3, never, R> =>\n  core.matchEffect(self, {\n    onFailure: (e) => core.succeed(options.onFailure(e)),\n    onSuccess: (a) => core.succeed(options.onSuccess(a))\n  }))\n\n/* @internal */\nexport const every: {\n  <A, E, R>(\n    f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<boolean, E, R>\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<boolean, E, R>): Effect.Effect<boolean, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<boolean, E, R> => core.suspend(() => forAllLoop(elements[Symbol.iterator](), 0, f))\n)\n\nconst forAllLoop = <A, E, R>(\n  iterator: Iterator<A>,\n  index: number,\n  f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n): Effect.Effect<boolean, E, R> => {\n  const next = iterator.next()\n  return next.done\n    ? core.succeed(true)\n    : core.flatMap(\n      f(next.value, index),\n      (b) => b ? forAllLoop(iterator, index + 1, f) : core.succeed(b)\n    )\n}\n\n/* @internal */\nexport const forever = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<never, E, R> => {\n  const loop: Effect.Effect<never, E, R> = core.flatMap(core.flatMap(self, () => core.yieldNow()), () => loop)\n  return loop\n}\n\n/**\n * Inspired by https://github.com/tusharmath/qio/pull/22 (revised)\n  @internal */\nexport const gen: typeof Effect.gen = function() {\n  let f: any\n  if (arguments.length === 1) {\n    f = arguments[0]\n  } else {\n    f = arguments[1].bind(arguments[0])\n  }\n  return core.suspend(() => {\n    const iterator = f(pipe)\n    const state = internalCall(() => iterator.next())\n    const run = (\n      state: IteratorYieldResult<any> | IteratorReturnResult<any>\n    ): Effect.Effect<any, any, any> => {\n      return (state.done\n        ? core.succeed(state.value)\n        : core.flatMap(\n          yieldWrapGet(state.value) as any,\n          (val: any) => run(internalCall(() => iterator.next(val)))\n        ))\n    }\n    return run(state)\n  })\n}\n\n/* @internal */\nexport const fiberRefs: Effect.Effect<FiberRefs.FiberRefs> = core.withFiberRuntime((state) =>\n  core.succeed(state.getFiberRefs())\n)\n\n/* @internal */\nexport const head = <A, E, R>(\n  self: Effect.Effect<Iterable<A>, E, R>\n): Effect.Effect<A, E | Cause.NoSuchElementException, R> =>\n  core.flatMap(self, (as) => {\n    const iterator = as[Symbol.iterator]()\n    const next = iterator.next()\n    if (next.done) {\n      return core.fail(new core.NoSuchElementException())\n    }\n    return core.succeed(next.value)\n  })\n\n/* @internal */\nexport const ignore = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<void, never, R> =>\n  match(self, { onFailure: constVoid, onSuccess: constVoid })\n\n/* @internal */\nexport const ignoreLogged = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<void, never, R> =>\n  core.matchCauseEffect(self, {\n    onFailure: (cause) => logDebug(cause, \"An error was silently ignored because it is not anticipated to be useful\"),\n    onSuccess: () => core.void\n  })\n\n/* @internal */\nexport const inheritFiberRefs = (childFiberRefs: FiberRefs.FiberRefs) =>\n  updateFiberRefs((parentFiberId, parentFiberRefs) => FiberRefs.joinAs(parentFiberRefs, parentFiberId, childFiberRefs))\n\n/* @internal */\nexport const isFailure = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<boolean, never, R> =>\n  match(self, { onFailure: constTrue, onSuccess: constFalse })\n\n/* @internal */\nexport const isSuccess = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<boolean, never, R> =>\n  match(self, { onFailure: constFalse, onSuccess: constTrue })\n\n/* @internal */\nexport const iterate: {\n  <A, B extends A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Predicate.Refinement<A, B>\n      readonly body: (b: B) => Effect.Effect<A, E, R>\n    }\n  ): Effect.Effect<A, E, R>\n  <A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Predicate.Predicate<A>\n      readonly body: (a: A) => Effect.Effect<A, E, R>\n    }\n  ): Effect.Effect<A, E, R>\n} = <A, E, R>(\n  initial: A,\n  options: {\n    readonly while: Predicate.Predicate<A>\n    readonly body: (z: A) => Effect.Effect<A, E, R>\n  }\n): Effect.Effect<A, E, R> =>\n  core.suspend<A, E, R>(() => {\n    if (options.while(initial)) {\n      return core.flatMap(options.body(initial), (z2) => iterate(z2, options))\n    }\n    return core.succeed(initial)\n  })\n\n/** @internal */\nexport const logWithLevel = (level?: LogLevel.LogLevel) =>\n(\n  ...message: ReadonlyArray<any>\n): Effect.Effect<void> => {\n  const levelOption = Option.fromNullable(level)\n  let cause: Cause.Cause<unknown> | undefined = undefined\n  for (let i = 0, len = message.length; i < len; i++) {\n    const msg = message[i]\n    if (internalCause.isCause(msg)) {\n      if (cause !== undefined) {\n        cause = internalCause.sequential(cause, msg)\n      } else {\n        cause = msg\n      }\n      message = [...message.slice(0, i), ...message.slice(i + 1)]\n      i--\n    }\n  }\n  if (cause === undefined) {\n    cause = internalCause.empty\n  }\n  return core.withFiberRuntime((fiberState) => {\n    fiberState.log(message, cause, levelOption)\n    return core.void\n  })\n}\n\n/** @internal */\nexport const log: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel()\n\n/** @internal */\nexport const logTrace: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Trace\n)\n\n/** @internal */\nexport const logDebug: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Debug\n)\n\n/** @internal */\nexport const logInfo: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Info\n)\n\n/** @internal */\nexport const logWarning: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Warning\n)\n\n/** @internal */\nexport const logError: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Error\n)\n\n/** @internal */\nexport const logFatal: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Fatal\n)\n\n/* @internal */\nexport const withLogSpan = dual<\n  (label: string) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, label: string) => Effect.Effect<A, E, R>\n>(2, (effect, label) =>\n  core.flatMap(Clock.currentTimeMillis, (now) =>\n    core.fiberRefLocallyWith(\n      effect,\n      core.currentLogSpan,\n      List.prepend(LogSpan.make(label, now))\n    )))\n\n/* @internal */\nexport const logAnnotations: Effect.Effect<HashMap.HashMap<string, unknown>> = core\n  .fiberRefGet(\n    core.currentLogAnnotations\n  )\n\n/* @internal */\nexport const loop: {\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Predicate.Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect.Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect.Effect<Array<C>, E, R>\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect.Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect.Effect<Array<C>, E, R>\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Predicate.Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect.Effect<R, E, C>\n      readonly discard: true\n    }\n  ): Effect.Effect<void, E, R>\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect.Effect<C, E, R>\n      readonly discard: true\n    }\n  ): Effect.Effect<void, E, R>\n} = <A, C, E, R>(\n  initial: A,\n  options: {\n    readonly while: Predicate.Predicate<A>\n    readonly step: (a: A) => A\n    readonly body: (a: A) => Effect.Effect<C, E, R>\n    readonly discard?: boolean | undefined\n  }\n): any =>\n  options.discard\n    ? loopDiscard(initial, options.while, options.step, options.body)\n    : core.map(loopInternal(initial, options.while, options.step, options.body), Arr.fromIterable)\n\nconst loopInternal = <Z, A, E, R>(\n  initial: Z,\n  cont: Predicate.Predicate<Z>,\n  inc: (z: Z) => Z,\n  body: (z: Z) => Effect.Effect<A, E, R>\n): Effect.Effect<List.List<A>, E, R> =>\n  core.suspend(() =>\n    cont(initial)\n      ? core.flatMap(body(initial), (a) =>\n        core.map(\n          loopInternal(inc(initial), cont, inc, body),\n          List.prepend(a)\n        ))\n      : core.sync(() => List.empty())\n  )\n\nconst loopDiscard = <S, X, E, R>(\n  initial: S,\n  cont: Predicate.Predicate<S>,\n  inc: (s: S) => S,\n  body: (s: S) => Effect.Effect<X, E, R>\n): Effect.Effect<void, E, R> =>\n  core.suspend(() =>\n    cont(initial)\n      ? core.flatMap(\n        body(initial),\n        () => loopDiscard(inc(initial), cont, inc, body)\n      )\n      : core.void\n  )\n\n/* @internal */\nexport const mapAccum: {\n  <S, A, B, E, R>(\n    zero: S,\n    f: (s: S, a: A, i: number) => Effect.Effect<readonly [S, B], E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<[S, Array<B>], E, R>\n  <A, S, B, E, R>(\n    elements: Iterable<A>,\n    zero: S,\n    f: (s: S, a: A, i: number) => Effect.Effect<readonly [S, B], E, R>\n  ): Effect.Effect<[S, Array<B>], E, R>\n} = dual(3, <A, S, B, E, R>(\n  elements: Iterable<A>,\n  zero: S,\n  f: (s: S, a: A, i: number) => Effect.Effect<readonly [S, B], E, R>\n): Effect.Effect<[S, Array<B>], E, R> =>\n  core.suspend(() => {\n    const iterator = elements[Symbol.iterator]()\n    const builder: Array<B> = []\n    let result: Effect.Effect<S, E, R> = core.succeed(zero)\n    let next: IteratorResult<A, any>\n    let i = 0\n    while (!(next = iterator.next()).done) {\n      const index = i++\n      const value = next.value\n      result = core.flatMap(result, (state) =>\n        core.map(f(state, value, index), ([z, b]) => {\n          builder.push(b)\n          return z\n        }))\n    }\n    return core.map(result, (z) => [z, builder])\n  }))\n\n/* @internal */\nexport const mapErrorCause: {\n  <E, E2>(\n    f: (cause: Cause.Cause<E>) => Cause.Cause<E2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Effect.Effect<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Effect.Effect<A, E2, R> =>\n    core.matchCauseEffect(self, {\n      onFailure: (c) => core.failCauseSync(() => f(c)),\n      onSuccess: core.succeed\n    })\n)\n\n/* @internal */\nexport const memoize = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Effect.Effect<A, E, R>> =>\n  pipe(\n    core.deferredMake<[[FiberRefsPatch.FiberRefsPatch, runtimeFlagsPatch.RuntimeFlagsPatch], A], E>(),\n    core.flatMap((deferred) =>\n      pipe(\n        diffFiberRefsAndRuntimeFlags(self),\n        core.intoDeferred(deferred),\n        once,\n        core.map((complete) =>\n          core.zipRight(\n            complete,\n            pipe(\n              core.deferredAwait(deferred),\n              core.flatMap(([patch, a]) =>\n                core.as(core.zip(patchFiberRefs(patch[0]), core.updateRuntimeFlags(patch[1])), a)\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n\n/* @internal */\nexport const merge = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<E | A, never, R> =>\n  core.matchEffect(self, {\n    onFailure: (e) => core.succeed(e),\n    onSuccess: core.succeed\n  })\n\n/* @internal */\nexport const negate = <E, R>(self: Effect.Effect<boolean, E, R>): Effect.Effect<boolean, E, R> =>\n  core.map(self, (b) => !b)\n\n/* @internal */\nexport const none = <A, E, R>(\n  self: Effect.Effect<Option.Option<A>, E, R>\n): Effect.Effect<void, E | Cause.NoSuchElementException, R> =>\n  core.flatMap(self, (option) => {\n    switch (option._tag) {\n      case \"None\":\n        return core.void\n      case \"Some\":\n        return core.fail(new core.NoSuchElementException())\n    }\n  })\n\n/* @internal */\nexport const once = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Effect.Effect<void, E, R>> =>\n  core.map(\n    Ref.make(true),\n    (ref) => core.asVoid(core.whenEffect(self, Ref.getAndSet(ref, false)))\n  )\n\n/* @internal */\nexport const option = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Option.Option<A>, never, R> =>\n  core.matchEffect(self, {\n    onFailure: () => core.succeed(Option.none()),\n    onSuccess: (a) => core.succeed(Option.some(a))\n  })\n\n/* @internal */\nexport const orElseFail = dual<\n  <E2>(evaluate: LazyArg<E2>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2, R>,\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, evaluate: LazyArg<E2>) => Effect.Effect<A, E2, R>\n>(2, (self, evaluate) => core.orElse(self, () => core.failSync(evaluate)))\n\n/* @internal */\nexport const orElseSucceed = dual<\n  <A2>(evaluate: LazyArg<A2>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A2, never, R>,\n  <A, E, R, A2>(self: Effect.Effect<A, E, R>, evaluate: LazyArg<A2>) => Effect.Effect<A | A2, never, R>\n>(2, (self, evaluate) => core.orElse(self, () => core.sync(evaluate)))\n\n/* @internal */\nexport const parallelErrors = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, Array<E>, R> =>\n  core.matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const errors = Arr.fromIterable(internalCause.failures(cause))\n      return errors.length === 0\n        ? core.failCause(cause as Cause.Cause<never>)\n        : core.fail(errors)\n    },\n    onSuccess: core.succeed\n  })\n\n/* @internal */\nexport const patchFiberRefs = (patch: FiberRefsPatch.FiberRefsPatch): Effect.Effect<void> =>\n  updateFiberRefs((fiberId, fiberRefs) => pipe(patch, fiberRefsPatch.patch(fiberId, fiberRefs)))\n\n/* @internal */\nexport const promise = <A>(evaluate: (signal: AbortSignal) => PromiseLike<A>): Effect.Effect<A> =>\n  evaluate.length >= 1\n    ? core.async((resolve, signal) => {\n      try {\n        evaluate(signal)\n          .then((a) => resolve(core.exitSucceed(a)), (e) => resolve(core.exitDie(e)))\n      } catch (e) {\n        resolve(core.exitDie(e))\n      }\n    })\n    : core.async((resolve) => {\n      try {\n        ;(evaluate as LazyArg<PromiseLike<A>>)()\n          .then((a) => resolve(core.exitSucceed(a)), (e) => resolve(core.exitDie(e)))\n      } catch (e) {\n        resolve(core.exitDie(e))\n      }\n    })\n\n/* @internal */\nexport const provideService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    service: Context.Tag.Service<T>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect.Effect<A, E, R>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ) => Effect.Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect.Effect<A, E, R>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): Effect.Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>> =>\n    core.contextWithEffect((env) =>\n      core.provideContext(\n        self as Effect.Effect<A, E, Context.Tag.Identifier<T> | Exclude<R, Context.Tag.Identifier<T>>>,\n        Context.add(env, tag, service)\n      )\n    )\n)\n\n/* @internal */\nexport const provideServiceEffect = dual<\n  <T extends Context.Tag<any, any>, E1, R1>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E1, R1>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E1, R1 | Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E1, R1>\n  ) => Effect.Effect<A, E | E1, R1 | Exclude<R, Context.Tag.Identifier<T>>>\n>(3, <A, E, R, T extends Context.Tag<any, any>, E1, R1>(\n  self: Effect.Effect<A, E, R>,\n  tag: T,\n  effect: Effect.Effect<Context.Tag.Service<T>, E1, R1>\n) =>\n  core.contextWithEffect((env: Context.Context<R1 | Exclude<R, Context.Tag.Identifier<T>>>) =>\n    core.flatMap(\n      effect,\n      (service) => core.provideContext(self, pipe(env, Context.add(tag, service)) as Context.Context<R | R1>)\n    )\n  ))\n\n/* @internal */\nexport const random: Effect.Effect<Random.Random> = defaultServices.randomWith(core.succeed)\n\n/* @internal */\nexport const reduce = dual<\n  <Z, A, E, R>(\n    zero: Z,\n    f: (z: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Z, E, R>,\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    f: (z: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n  ) => Effect.Effect<Z, E, R>\n>(\n  3,\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    f: (z: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n  ) =>\n    Arr.fromIterable(elements).reduce(\n      (acc, el, i) => core.flatMap(acc, (a) => f(a, el, i)),\n      core.succeed(zero) as Effect.Effect<Z, E, R>\n    )\n)\n\n/* @internal */\nexport const reduceRight = dual<\n  <A, Z, R, E>(\n    zero: Z,\n    f: (a: A, z: Z, i: number) => Effect.Effect<Z, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Z, E, R>,\n  <A, Z, R, E>(\n    elements: Iterable<A>,\n    zero: Z,\n    f: (a: A, z: Z, i: number) => Effect.Effect<Z, E, R>\n  ) => Effect.Effect<Z, E, R>\n>(\n  3,\n  <A, Z, R, E>(elements: Iterable<A>, zero: Z, f: (a: A, z: Z, i: number) => Effect.Effect<Z, E, R>) =>\n    Arr.fromIterable(elements).reduceRight(\n      (acc, el, i) => core.flatMap(acc, (a) => f(el, a, i)),\n      core.succeed(zero) as Effect.Effect<Z, E, R>\n    )\n)\n\n/* @internal */\nexport const reduceWhile = dual<\n  <Z, A, E, R>(\n    zero: Z,\n    options: {\n      readonly while: Predicate.Predicate<Z>\n      readonly body: (s: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<Z, E, R>,\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    options: {\n      readonly while: Predicate.Predicate<Z>\n      readonly body: (s: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n    }\n  ) => Effect.Effect<Z, E, R>\n>(3, <A, Z, E, R>(\n  elements: Iterable<A>,\n  zero: Z,\n  options: {\n    readonly while: Predicate.Predicate<Z>\n    readonly body: (s: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n  }\n) =>\n  core.flatMap(\n    core.sync(() => elements[Symbol.iterator]()),\n    (iterator) => reduceWhileLoop(iterator, 0, zero, options.while, options.body)\n  ))\n\nconst reduceWhileLoop = <A, R, E, Z>(\n  iterator: Iterator<A>,\n  index: number,\n  state: Z,\n  predicate: Predicate.Predicate<Z>,\n  f: (s: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n): Effect.Effect<Z, E, R> => {\n  const next = iterator.next()\n  if (!next.done && predicate(state)) {\n    return core.flatMap(\n      f(state, next.value, index),\n      (nextState) => reduceWhileLoop(iterator, index + 1, nextState, predicate, f)\n    )\n  }\n  return core.succeed(state)\n}\n\n/* @internal */\nexport const repeatN = dual<\n  (n: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, n: number) => Effect.Effect<A, E, R>\n>(2, (self, n) => core.suspend(() => repeatNLoop(self, n)))\n\n/* @internal */\nconst repeatNLoop = <A, E, R>(self: Effect.Effect<A, E, R>, n: number): Effect.Effect<A, E, R> =>\n  core.flatMap(self, (a) =>\n    n <= 0\n      ? core.succeed(a)\n      : core.zipRight(core.yieldNow(), repeatNLoop(self, n - 1)))\n\n/* @internal */\nexport const sandbox = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, Cause.Cause<E>, R> =>\n  core.matchCauseEffect(self, {\n    onFailure: core.fail,\n    onSuccess: core.succeed\n  })\n\n/* @internal */\nexport const setFiberRefs = (fiberRefs: FiberRefs.FiberRefs): Effect.Effect<void> =>\n  core.suspend(() => FiberRefs.setAll(fiberRefs))\n\n/* @internal */\nexport const sleep: (duration: Duration.DurationInput) => Effect.Effect<void> = Clock.sleep\n\n/* @internal */\nexport const succeedNone: Effect.Effect<Option.Option<never>> = core.succeed(Option.none())\n\n/* @internal */\nexport const succeedSome = <A>(value: A): Effect.Effect<Option.Option<A>> => core.succeed(Option.some(value))\n\n/* @internal */\nexport const summarized: {\n  <B, E2, R2, C>(\n    summary: Effect.Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[C, A], E2 | E, R2 | R>\n  <A, E, R, B, E2, R2, C>(\n    self: Effect.Effect<A, E, R>,\n    summary: Effect.Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): Effect.Effect<[C, A], E2 | E, R2 | R>\n} = dual(\n  3,\n  <A, E, R, B, E2, R2, C>(\n    self: Effect.Effect<A, E, R>,\n    summary: Effect.Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): Effect.Effect<[C, A], E2 | E, R2 | R> =>\n    core.flatMap(\n      summary,\n      (start) => core.flatMap(self, (value) => core.map(summary, (end) => [f(start, end), value]))\n    )\n)\n\n/* @internal */\nexport const tagMetrics = dual<\n  {\n    (key: string, value: string): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n    (\n      values: Record<string, string>\n    ): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  },\n  {\n    <A, E, R>(effect: Effect.Effect<A, E, R>, key: string, value: string): Effect.Effect<A, E, R>\n    <A, E, R>(effect: Effect.Effect<A, E, R>, values: Record<string, string>): Effect.Effect<A, E, R>\n  }\n>((args) => core.isEffect(args[0]), function() {\n  return labelMetrics(\n    arguments[0],\n    typeof arguments[1] === \"string\"\n      ? [metricLabel.make(arguments[1], arguments[2])]\n      : Object.entries<string>(arguments[1]).map(([k, v]) => metricLabel.make(k, v))\n  )\n})\n\n/* @internal */\nexport const labelMetrics = dual<\n  (labels: Iterable<MetricLabel.MetricLabel>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, labels: Iterable<MetricLabel.MetricLabel>) => Effect.Effect<A, E, R>\n>(\n  2,\n  (self, labels) => core.fiberRefLocallyWith(self, core.currentMetricLabels, (old) => Arr.union(old, labels))\n)\n\n/* @internal */\nexport const takeUntil: {\n  <A, R, E>(\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R> =>\n    core.suspend(() => {\n      const iterator = elements[Symbol.iterator]()\n      const builder: Array<A> = []\n      let next: IteratorResult<A, any>\n      let effect: Effect.Effect<boolean, E, R> = core.succeed(false)\n      let i = 0\n      while ((next = iterator.next()) && !next.done) {\n        const a = next.value\n        const index = i++\n        effect = core.flatMap(effect, (bool) => {\n          if (bool) {\n            return core.succeed(true)\n          }\n          builder.push(a)\n          return predicate(a, index)\n        })\n      }\n      return core.map(effect, () => builder)\n    })\n)\n\n/* @internal */\nexport const takeWhile = dual<\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>,\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ) => Effect.Effect<Array<A>, E, R>\n>(\n  2,\n  <A, E, R>(elements: Iterable<A>, predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>) =>\n    core.suspend(() => {\n      const iterator = elements[Symbol.iterator]()\n      const builder: Array<A> = []\n      let next: IteratorResult<A, any>\n      let taking: Effect.Effect<boolean, E, R> = core.succeed(true)\n      let i = 0\n      while ((next = iterator.next()) && !next.done) {\n        const a = next.value\n        const index = i++\n        taking = core.flatMap(taking, (taking) =>\n          pipe(\n            taking ? predicate(a, index) : core.succeed(false),\n            core.map((bool) => {\n              if (bool) {\n                builder.push(a)\n              }\n              return bool\n            })\n          ))\n      }\n      return core.map(taking, () => builder)\n    })\n)\n\n/* @internal */\nexport const tapBoth = dual<\n  <E, X, E2, R2, A, X1, E3, R3>(\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X1, E3, R3>\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2 | E3, R | R2 | R3>,\n  <A, E, R, X, E2, R2, X1, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect.Effect<X, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<X1, E3, R3>\n    }\n  ) => Effect.Effect<A, E | E2 | E3, R | R2 | R3>\n>(2, (self, { onFailure, onSuccess }) =>\n  core.matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const either = internalCause.failureOrCause(cause)\n      switch (either._tag) {\n        case \"Left\": {\n          return core.zipRight(onFailure(either.left as any), core.failCause(cause))\n        }\n        case \"Right\": {\n          return core.failCause(cause)\n        }\n      }\n    },\n    onSuccess: (a) => core.as(onSuccess(a as any), a)\n  }))\n\n/* @internal */\nexport const tapDefect = dual<\n  <X, E2, R2>(\n    f: (cause: Cause.Cause<never>) => Effect.Effect<X, E2, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, X, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<never>) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(2, (self, f) =>\n  core.catchAllCause(self, (cause) =>\n    Option.match(internalCause.keepDefects(cause), {\n      onNone: () => core.failCause(cause),\n      onSome: (a) => core.zipRight(f(a), core.failCause(cause))\n    })))\n\n/* @internal */\nexport const tapError = dual<\n  <E, X, E2, R2>(\n    f: (e: NoInfer<E>) => Effect.Effect<X, E2, R2>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, X, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (e: E) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(2, (self, f) =>\n  core.matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const either = internalCause.failureOrCause(cause)\n      switch (either._tag) {\n        case \"Left\":\n          return core.zipRight(f(either.left as any), core.failCause(cause))\n        case \"Right\":\n          return core.failCause(cause)\n      }\n    },\n    onSuccess: core.succeed\n  }))\n\n/* @internal */\nexport const tapErrorTag = dual<\n  <K extends (E extends { _tag: string } ? E[\"_tag\"] : never), E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect.Effect<A1, E1, R1>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E1, R | R1>,\n  <A, E, R, K extends (E extends { _tag: string } ? E[\"_tag\"] : never), A1, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect.Effect<A1, E1, R1>\n  ) => Effect.Effect<A, E | E1, R | R1>\n>(3, (self, k, f) =>\n  tapError(self, (e) => {\n    if (Predicate.isTagged(e, k)) {\n      return f(e as any)\n    }\n    return core.void as any\n  }))\n\n/* @internal */\nexport const tapErrorCause = dual<\n  <E, X, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Effect.Effect<X, E2, R2>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, X, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(2, (self, f) =>\n  core.matchCauseEffect(self, {\n    onFailure: (cause) => core.zipRight(f(cause), core.failCause(cause)),\n    onSuccess: core.succeed\n  }))\n\n/* @internal */\nexport const timed = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[Duration.Duration, A], E, R> => timedWith(self, Clock.currentTimeNanos)\n\n/* @internal */\nexport const timedWith = dual<\n  <E1, R1>(\n    nanoseconds: Effect.Effect<bigint, E1, R1>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[Duration.Duration, A], E | E1, R | R1>,\n  <A, E, R, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    nanoseconds: Effect.Effect<bigint, E1, R1>\n  ) => Effect.Effect<[Duration.Duration, A], E | E1, R | R1>\n>(\n  2,\n  (self, nanos) => summarized(self, nanos, (start, end) => Duration.nanos(end - start))\n)\n\n/* @internal */\nexport const tracerWith: <A, E, R>(f: (tracer: Tracer.Tracer) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  Tracer.tracerWith\n\n/** @internal */\nexport const tracer: Effect.Effect<Tracer.Tracer> = tracerWith(core.succeed)\n\n/* @internal */\nexport const tryPromise: {\n  <A, E>(\n    options: {\n      readonly try: (signal: AbortSignal) => PromiseLike<A>\n      readonly catch: (error: unknown) => E\n    }\n  ): Effect.Effect<A, E>\n  <A>(try_: (signal: AbortSignal) => PromiseLike<A>): Effect.Effect<A, Cause.UnknownException>\n} = <A, E>(\n  arg: ((signal: AbortSignal) => PromiseLike<A>) | {\n    readonly try: (signal: AbortSignal) => PromiseLike<A>\n    readonly catch: (error: unknown) => E\n  }\n): Effect.Effect<A, E | Cause.UnknownException> => {\n  let evaluate: (signal?: AbortSignal) => PromiseLike<A>\n  let catcher: ((error: unknown) => E) | undefined = undefined\n  if (typeof arg === \"function\") {\n    evaluate = arg as (signal?: AbortSignal) => PromiseLike<A>\n  } else {\n    evaluate = arg.try as (signal?: AbortSignal) => PromiseLike<A>\n    catcher = arg.catch\n  }\n\n  if (evaluate.length >= 1) {\n    return core.async((resolve, signal) => {\n      try {\n        evaluate(signal)\n          .then(\n            (a) => resolve(core.exitSucceed(a)),\n            (e) => resolve(catcher ? core.failSync(() => catcher(e)) : core.fail(new core.UnknownException(e)))\n          )\n      } catch (e) {\n        resolve(catcher ? core.failSync(() => catcher(e)) : core.fail(new core.UnknownException(e)))\n      }\n    })\n  }\n\n  return core.async((resolve) => {\n    try {\n      evaluate()\n        .then(\n          (a) => resolve(core.exitSucceed(a)),\n          (e) => resolve(catcher ? core.failSync(() => catcher(e)) : core.fail(new core.UnknownException(e)))\n        )\n    } catch (e) {\n      resolve(catcher ? core.failSync(() => catcher(e)) : core.fail(new core.UnknownException(e)))\n    }\n  })\n}\n\n/* @internal */\nexport const tryMap = dual<\n  <A, B, E1>(\n    options: {\n      readonly try: (a: A) => B\n      readonly catch: (error: unknown) => E1\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E | E1, R>,\n  <A, E, R, B, E1>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly try: (a: A) => B\n      readonly catch: (error: unknown) => E1\n    }\n  ) => Effect.Effect<B, E | E1, R>\n>(2, (self, options) =>\n  core.flatMap(self, (a) =>\n    try_({\n      try: () => options.try(a),\n      catch: options.catch\n    })))\n\n/* @internal */\nexport const tryMapPromise = dual<\n  <A, B, E1>(\n    options: {\n      readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>\n      readonly catch: (error: unknown) => E1\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E | E1, R>,\n  <A, E, R, B, E1>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>\n      readonly catch: (error: unknown) => E1\n    }\n  ) => Effect.Effect<B, E | E1, R>\n>(2, <A, E, R, B, E1>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>\n    readonly catch: (error: unknown) => E1\n  }\n) =>\n  core.flatMap(self, (a) =>\n    tryPromise({\n      try: options.try.length >= 1\n        ? (signal) => options.try(a, signal)\n        : () => (options.try as (a: A) => PromiseLike<B>)(a),\n      catch: options.catch\n    })))\n\n/* @internal */\nexport const unless = dual<\n  (condition: LazyArg<boolean>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Option.Option<A>, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, condition: LazyArg<boolean>) => Effect.Effect<Option.Option<A>, E, R>\n>(2, (self, condition) =>\n  core.suspend(() =>\n    condition()\n      ? succeedNone\n      : asSome(self)\n  ))\n\n/* @internal */\nexport const unlessEffect = dual<\n  <E2, R2>(\n    condition: Effect.Effect<boolean, E2, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Option.Option<A>, E | E2, R | R2>,\n  <A, E, R, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    condition: Effect.Effect<boolean, E2, R2>\n  ) => Effect.Effect<Option.Option<A>, E | E2, R | R2>\n>(2, (self, condition) => core.flatMap(condition, (b) => (b ? succeedNone : asSome(self))))\n\n/* @internal */\nexport const unsandbox = <A, E, R>(self: Effect.Effect<A, Cause.Cause<E>, R>) =>\n  mapErrorCause(self, internalCause.flatten)\n\n/* @internal */\nexport const updateFiberRefs = (\n  f: (fiberId: FiberId.Runtime, fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs\n): Effect.Effect<void> =>\n  core.withFiberRuntime((state) => {\n    state.setFiberRefs(f(state.id(), state.getFiberRefs()))\n    return core.void\n  })\n\n/* @internal */\nexport const updateService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R | Context.Tag.Identifier<T>>,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect.Effect<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ) => Effect.Effect<A, E, R | Context.Tag.Identifier<T>>\n>(3, <A, E, R, T extends Context.Tag<any, any>>(\n  self: Effect.Effect<A, E, R>,\n  tag: T,\n  f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n) =>\n  core.mapInputContext(self, (context) =>\n    Context.add(\n      context,\n      tag,\n      f(Context.unsafeGet(context, tag))\n    )) as Effect.Effect<A, E, R | Context.Tag.Identifier<T>>)\n\n/* @internal */\nexport const when = dual<\n  (condition: LazyArg<boolean>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Option.Option<A>, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, condition: LazyArg<boolean>) => Effect.Effect<Option.Option<A>, E, R>\n>(2, (self, condition) =>\n  core.suspend(() =>\n    condition()\n      ? core.map(self, Option.some)\n      : core.succeed(Option.none())\n  ))\n\n/* @internal */\nexport const whenFiberRef = dual<\n  <S>(\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate.Predicate<S>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[S, Option.Option<A>], E, R>,\n  <A, E, R, S>(\n    self: Effect.Effect<A, E, R>,\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate.Predicate<S>\n  ) => Effect.Effect<[S, Option.Option<A>], E, R>\n>(\n  3,\n  <A, E, R, S>(\n    self: Effect.Effect<A, E, R>,\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate.Predicate<S>\n  ) =>\n    core.flatMap(core.fiberRefGet(fiberRef), (s) =>\n      predicate(s)\n        ? core.map(self, (a) => [s, Option.some(a)])\n        : core.succeed<[S, Option.Option<A>]>([s, Option.none()]))\n)\n\n/* @internal */\nexport const whenRef = dual<\n  <S>(\n    ref: Ref.Ref<S>,\n    predicate: Predicate.Predicate<S>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[S, Option.Option<A>], E, R>,\n  <A, E, R, S>(\n    self: Effect.Effect<A, E, R>,\n    ref: Ref.Ref<S>,\n    predicate: Predicate.Predicate<S>\n  ) => Effect.Effect<[S, Option.Option<A>], E, R>\n>(\n  3,\n  <A, E, R, S>(self: Effect.Effect<A, E, R>, ref: Ref.Ref<S>, predicate: Predicate.Predicate<S>) =>\n    core.flatMap(Ref.get(ref), (s) =>\n      predicate(s)\n        ? core.map(self, (a) => [s, Option.some(a)])\n        : core.succeed<[S, Option.Option<A>]>([s, Option.none()]))\n)\n\n/* @internal */\nexport const withMetric = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>\n  ) => <A extends In, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A extends In, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, metric) => metric(self))\n\n/** @internal */\nexport const serviceFunctionEffect = <T extends Effect.Effect<any, any, any>, Args extends Array<any>, A, E, R>(\n  getService: T,\n  f: (_: Effect.Effect.Success<T>) => (...args: Args) => Effect.Effect<A, E, R>\n) =>\n(...args: Args): Effect.Effect<A, E | Effect.Effect.Error<T>, R | Effect.Effect.Context<T>> =>\n  core.flatMap(getService, (a) => f(a)(...args))\n\n/** @internal */\nexport const serviceFunction = <T extends Effect.Effect<any, any, any>, Args extends Array<any>, A>(\n  getService: T,\n  f: (_: Effect.Effect.Success<T>) => (...args: Args) => A\n) =>\n(...args: Args): Effect.Effect<A, Effect.Effect.Error<T>, Effect.Effect.Context<T>> =>\n  core.map(getService, (a) => f(a)(...args))\n\n/** @internal */\nexport const serviceFunctions = <S, SE, SR>(\n  getService: Effect.Effect<S, SE, SR>\n): {\n  [k in keyof S as S[k] extends (...args: Array<any>) => Effect.Effect<any, any, any> ? k : never]: S[k] extends\n    (...args: infer Args) => Effect.Effect<infer A, infer E, infer R>\n    ? (...args: Args) => Effect.Effect<A, E | SE, R | SR>\n    : never\n} =>\n  new Proxy({} as any, {\n    get(_target: any, prop: any, _receiver) {\n      return (...args: Array<any>) => core.flatMap(getService, (s: any) => s[prop](...args))\n    }\n  })\n\n/** @internal */\nexport const serviceConstants = <S, SE, SR>(\n  getService: Effect.Effect<S, SE, SR>\n): {\n  [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect.Effect<infer A, infer E, infer R> ?\n    Effect.Effect<A, E | SE, R | SR> :\n    Effect.Effect<S[k], SE, SR>\n} =>\n  new Proxy({} as any, {\n    get(_target: any, prop: any, _receiver) {\n      return core.flatMap(getService, (s: any) => core.isEffect(s[prop]) ? s[prop] : core.succeed(s[prop]))\n    }\n  })\n\n/** @internal */\nexport const serviceMembers = <S, SE, SR>(getService: Effect.Effect<S, SE, SR>): {\n  functions: {\n    [k in keyof S as S[k] extends (...args: Array<any>) => Effect.Effect<any, any, any> ? k : never]: S[k] extends\n      (...args: infer Args) => Effect.Effect<infer A, infer E, infer R>\n      ? (...args: Args) => Effect.Effect<A, E | SE, R | SR>\n      : never\n  }\n  constants: {\n    [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect.Effect<infer A, infer E, infer R> ?\n      Effect.Effect<A, E | SE, R | SR> :\n      Effect.Effect<S[k], SE, SR>\n  }\n} => ({\n  functions: serviceFunctions(getService) as any,\n  constants: serviceConstants(getService)\n})\n\n/** @internal */\nexport const serviceOption = <I, S>(tag: Context.Tag<I, S>) => core.map(core.context<never>(), Context.getOption(tag))\n\n/** @internal */\nexport const serviceOptional = <I, S>(tag: Context.Tag<I, S>) =>\n  core.flatMap(core.context<never>(), Context.getOption(tag))\n\n// -----------------------------------------------------------------------------\n// tracing\n// -----------------------------------------------------------------------------\n\n/* @internal */\nexport const annotateCurrentSpan: {\n  (key: string, value: unknown): Effect.Effect<void>\n  (values: Record<string, unknown>): Effect.Effect<void>\n} = function(): Effect.Effect<void> {\n  const args = arguments\n  return ignore(core.flatMap(\n    currentSpan,\n    (span) =>\n      core.sync(() => {\n        if (typeof args[0] === \"string\") {\n          span.attribute(args[0], args[1])\n        } else {\n          for (const key in args[0]) {\n            span.attribute(key, args[0][key])\n          }\n        }\n      })\n  ))\n}\n\n/* @internal */\nexport const annotateSpans = dual<\n  {\n    (key: string, value: unknown): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n    (\n      values: Record<string, unknown>\n    ): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  },\n  {\n    <A, E, R>(effect: Effect.Effect<A, E, R>, key: string, value: unknown): Effect.Effect<A, E, R>\n    <A, E, R>(effect: Effect.Effect<A, E, R>, values: Record<string, unknown>): Effect.Effect<A, E, R>\n  }\n>(\n  (args) => core.isEffect(args[0]),\n  function<A, E, R>() {\n    const args = arguments\n    return core.fiberRefLocallyWith(\n      args[0] as Effect.Effect<A, E, R>,\n      core.currentTracerSpanAnnotations,\n      typeof args[1] === \"string\"\n        ? HashMap.set(args[1], args[2])\n        : (annotations) =>\n          Object.entries(args[1] as Record<string, unknown>).reduce(\n            (acc, [key, value]) => HashMap.set(acc, key, value),\n            annotations\n          )\n    )\n  }\n)\n\n/** @internal */\nexport const currentParentSpan: Effect.Effect<Tracer.AnySpan, Cause.NoSuchElementException> = serviceOptional(\n  internalTracer.spanTag\n)\n\n/** @internal */\nexport const currentSpan: Effect.Effect<Tracer.Span, Cause.NoSuchElementException> = core.flatMap(\n  core.context<never>(),\n  (context) => {\n    const span = context.unsafeMap.get(internalTracer.spanTag.key) as Tracer.AnySpan | undefined\n    return span !== undefined && span._tag === \"Span\"\n      ? core.succeed(span)\n      : core.fail(new core.NoSuchElementException())\n  }\n)\n\n/* @internal */\nexport const linkSpans = dual<\n  (\n    span: Tracer.AnySpan,\n    attributes?: Record<string, unknown>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    span: Tracer.AnySpan,\n    attributes?: Record<string, unknown>\n  ) => Effect.Effect<A, E, R>\n>(\n  (args) => core.isEffect(args[0]),\n  (self, span, attributes) =>\n    core.fiberRefLocallyWith(\n      self,\n      core.currentTracerSpanLinks,\n      Chunk.append(\n        {\n          _tag: \"SpanLink\",\n          span,\n          attributes: attributes ?? {}\n        } as const\n      )\n    )\n)\n\nconst bigint0 = BigInt(0)\n\n/** @internal */\nexport const unsafeMakeSpan = <XA, XE>(\n  fiber: FiberRuntime<XA, XE>,\n  name: string,\n  options: Tracer.SpanOptions\n) => {\n  const enabled = fiber.getFiberRef(core.currentTracerEnabled)\n  if (enabled === false) {\n    return core.noopSpan(name)\n  }\n\n  const context = fiber.getFiberRef(core.currentContext)\n  const services = fiber.getFiberRef(defaultServices.currentServices)\n\n  const tracer = Context.get(services, internalTracer.tracerTag)\n  const clock = Context.get(services, Clock.Clock)\n  const timingEnabled = fiber.getFiberRef(core.currentTracerTimingEnabled)\n\n  const fiberRefs = fiber.getFiberRefs()\n  const annotationsFromEnv = FiberRefs.get(fiberRefs, core.currentTracerSpanAnnotations)\n  const linksFromEnv = FiberRefs.get(fiberRefs, core.currentTracerSpanLinks)\n\n  const parent = options.parent\n    ? Option.some(options.parent)\n    : options.root\n    ? Option.none()\n    : Context.getOption(context, internalTracer.spanTag)\n\n  const links = linksFromEnv._tag === \"Some\" ?\n    options.links !== undefined ?\n      [\n        ...Chunk.toReadonlyArray(linksFromEnv.value),\n        ...(options.links ?? [])\n      ] :\n      Chunk.toReadonlyArray(linksFromEnv.value) :\n    options.links ?? Arr.empty()\n\n  const span = tracer.span(\n    name,\n    parent,\n    options.context ?? Context.empty(),\n    links,\n    timingEnabled ? clock.unsafeCurrentTimeNanos() : bigint0,\n    options.kind ?? \"internal\"\n  )\n\n  if (typeof options.captureStackTrace === \"function\") {\n    internalCause.spanToTrace.set(span, options.captureStackTrace)\n  }\n\n  if (annotationsFromEnv._tag === \"Some\") {\n    HashMap.forEach(annotationsFromEnv.value, (value, key) => span.attribute(key, value))\n  }\n  if (options.attributes !== undefined) {\n    Object.entries(options.attributes).forEach(([k, v]) => span.attribute(k, v))\n  }\n\n  return span\n}\n\n/** @internal */\nexport const makeSpan = (\n  name: string,\n  options?: Tracer.SpanOptions\n): Effect.Effect<Tracer.Span> => {\n  options = internalTracer.addSpanStackTrace(options)\n  return core.withFiberRuntime((fiber) => core.succeed(unsafeMakeSpan(fiber, name, options)))\n}\n\n/* @internal */\nexport const spanAnnotations: Effect.Effect<HashMap.HashMap<string, unknown>> = core\n  .fiberRefGet(core.currentTracerSpanAnnotations)\n\n/* @internal */\nexport const spanLinks: Effect.Effect<Chunk.Chunk<Tracer.SpanLink>> = core\n  .fiberRefGet(core.currentTracerSpanLinks)\n\n/** @internal */\nexport const endSpan = <A, E>(span: Tracer.Span, exit: Exit<A, E>, clock: Clock.Clock, timingEnabled: boolean) =>\n  core.sync(() => {\n    if (span.status._tag === \"Ended\") {\n      return\n    }\n    if (core.exitIsFailure(exit) && internalCause.spanToTrace.has(span)) {\n      span.attribute(\"code.stacktrace\", internalCause.spanToTrace.get(span)!())\n    }\n    span.end(timingEnabled ? clock.unsafeCurrentTimeNanos() : bigint0, exit)\n  })\n\n/** @internal */\nexport const useSpan: {\n  <A, E, R>(name: string, evaluate: (span: Tracer.Span) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>\n  <A, E, R>(\n    name: string,\n    options: Tracer.SpanOptions,\n    evaluate: (span: Tracer.Span) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R>\n} = <A, E, R>(\n  name: string,\n  ...args: [evaluate: (span: Tracer.Span) => Effect.Effect<A, E, R>] | [\n    options: any,\n    evaluate: (span: Tracer.Span) => Effect.Effect<A, E, R>\n  ]\n) => {\n  const options = internalTracer.addSpanStackTrace(args.length === 1 ? undefined : args[0])\n  const evaluate: (span: Tracer.Span) => Effect.Effect<A, E, R> = args[args.length - 1]\n\n  return core.withFiberRuntime<A, E, R>((fiber) => {\n    const span = unsafeMakeSpan(fiber, name, options)\n    const timingEnabled = fiber.getFiberRef(core.currentTracerTimingEnabled)\n    const clock = Context.get(fiber.getFiberRef(defaultServices.currentServices), clockTag)\n    return core.onExit(evaluate(span), (exit) => endSpan(span, exit, clock, timingEnabled))\n  })\n}\n\n/** @internal */\nexport const withParentSpan = dual<\n  (\n    span: Tracer.AnySpan\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Tracer.ParentSpan>>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, span: Tracer.AnySpan) => Effect.Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n>(2, (self, span) => provideService(self, internalTracer.spanTag, span))\n\n/** @internal */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): Effect.Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = internalTracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1])\n  if (dataFirst) {\n    const self = arguments[0]\n    return useSpan(name, options, (span) => withParentSpan(self, span))\n  }\n  return (self: Effect.Effect<any, any, any>) => useSpan(name, options, (span) => withParentSpan(self, span))\n} as any\n\nexport const functionWithSpan = <Args extends Array<any>, Ret extends Effect.Effect<any, any, any>>(\n  options: {\n    readonly body: (...args: Args) => Ret\n    readonly options: Effect.FunctionWithSpanOptions | ((...args: Args) => Effect.FunctionWithSpanOptions)\n    readonly captureStackTrace?: boolean | undefined\n  }\n): (...args: Args) => Unify<Ret> =>\n  (function(this: any) {\n    let captureStackTrace: LazyArg<string | undefined> | boolean = options.captureStackTrace ?? false\n    if (options.captureStackTrace !== false) {\n      const limit = Error.stackTraceLimit\n      Error.stackTraceLimit = 2\n      const error = new Error()\n      Error.stackTraceLimit = limit\n      let cache: false | string = false\n      captureStackTrace = () => {\n        if (cache !== false) {\n          return cache\n        }\n        if (error.stack) {\n          const stack = error.stack.trim().split(\"\\n\")\n          cache = stack.slice(2).join(\"\\n\").trim()\n          return cache\n        }\n      }\n    }\n    return core.suspend(() => {\n      const opts = typeof options.options === \"function\"\n        ? options.options.apply(null, arguments as any)\n        : options.options\n      return withSpan(\n        core.suspend(() => internalCall(() => options.body.apply(this, arguments as any))),\n        opts.name,\n        {\n          ...opts,\n          captureStackTrace\n        }\n      )\n    })\n  }) as any\n\n// -------------------------------------------------------------------------------------\n// optionality\n// -------------------------------------------------------------------------------------\n\n/* @internal */\nexport const fromNullable = <A>(value: A): Effect.Effect<NonNullable<A>, Cause.NoSuchElementException> =>\n  value == null ? core.fail(new core.NoSuchElementException()) : core.succeed(value as NonNullable<A>)\n\n/* @internal */\nexport const optionFromOptional = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Option.Option<A>, Exclude<E, Cause.NoSuchElementException>, R> =>\n  core.catchAll(\n    core.map(self, Option.some),\n    (error) =>\n      core.isNoSuchElementException(error) ?\n        succeedNone :\n        core.fail(error as Exclude<E, Cause.NoSuchElementException>)\n  )\n", "/**\n * @since 2.0.0\n */\nimport type * as Channel from \"./Channel.js\"\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/effectable.js\"\nimport type * as Sink from \"./Sink.js\"\nimport type * as Stream from \"./Stream.js\"\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const EffectTypeId: Effect.EffectTypeId = internal.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type EffectTypeId = Effect.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const StreamTypeId: Stream.StreamTypeId = internal.StreamTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type StreamTypeId = Stream.StreamTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const SinkTypeId: Sink.SinkTypeId = internal.SinkTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type SinkTypeId = Sink.SinkTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const ChannelTypeId: Channel.ChannelTypeId = internal.ChannelTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type ChannelTypeId = Channel.ChannelTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface CommitPrimitive {\n  new<A, E = never, R = never>(): Effect.Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const EffectPrototype: Effect.Effect<never> = internal.EffectPrototype\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const CommitPrototype: Effect.Effect<never> = internal.CommitPrototype\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const StructuralCommitPrototype: Effect.Effect<never> = internal.StructuralCommitPrototype\n\nconst Base: CommitPrimitive = internal.Base\nconst StructuralBase: CommitPrimitive = internal.StructuralBase\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport abstract class Class<A, E = never, R = never> extends Base<A, E, R> {\n  /**\n   * @since 2.0.0\n   */\n  abstract commit(): Effect.Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport abstract class StructuralClass<A, E = never, R = never> extends StructuralBase<A, E, R> {\n  /**\n   * @since 2.0.0\n   */\n  abstract commit(): Effect.Effect<A, E, R>\n}\n", "import type * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport { dual } from \"../Function.js\"\nimport type { LazyArg } from \"../Function.js\"\n\n/** @internal */\nexport const OP_SEQUENTIAL = \"Sequential\" as const\n\n/** @internal */\nexport type OP_SEQUENTIAL = typeof OP_SEQUENTIAL\n\n/** @internal */\nexport const OP_PARALLEL = \"Parallel\" as const\n\n/** @internal */\nexport type OP_PARALLEL = typeof OP_PARALLEL\n\n/** @internal */\nexport const OP_PARALLEL_N = \"ParallelN\" as const\n\n/** @internal */\nexport type OP_PARALLEL_N = typeof OP_PARALLEL_N\n\n/** @internal */\nexport const sequential: ExecutionStrategy.ExecutionStrategy = { _tag: OP_SEQUENTIAL }\n\n/** @internal */\nexport const parallel: ExecutionStrategy.ExecutionStrategy = { _tag: OP_PARALLEL }\n\n/** @internal */\nexport const parallelN = (parallelism: number): ExecutionStrategy.ExecutionStrategy => ({\n  _tag: OP_PARALLEL_N,\n  parallelism\n})\n\n/** @internal */\nexport const isSequential = (self: ExecutionStrategy.ExecutionStrategy): self is ExecutionStrategy.Sequential =>\n  self._tag === OP_SEQUENTIAL\n\n/** @internal */\nexport const isParallel = (self: ExecutionStrategy.ExecutionStrategy): self is ExecutionStrategy.Parallel =>\n  self._tag === OP_PARALLEL\n\n/** @internal */\nexport const isParallelN = (self: ExecutionStrategy.ExecutionStrategy): self is ExecutionStrategy.ParallelN =>\n  self._tag === OP_PARALLEL_N\n\n/** @internal */\nexport const match = dual<\n  <A>(options: {\n    readonly onSequential: LazyArg<A>\n    readonly onParallel: LazyArg<A>\n    readonly onParallelN: (n: number) => A\n  }) => (self: ExecutionStrategy.ExecutionStrategy) => A,\n  <A>(\n    self: ExecutionStrategy.ExecutionStrategy,\n    options: {\n      readonly onSequential: LazyArg<A>\n      readonly onParallel: LazyArg<A>\n      readonly onParallelN: (n: number) => A\n    }\n  ) => A\n>(2, (self, options) => {\n  switch (self._tag) {\n    case OP_SEQUENTIAL: {\n      return options.onSequential()\n    }\n    case OP_PARALLEL: {\n      return options.onParallel()\n    }\n    case OP_PARALLEL_N: {\n      return options.onParallelN(self.parallelism)\n    }\n  }\n})\n", "/**\n * @since 2.0.0\n */\nimport type { LazyArg } from \"./Function.js\"\nimport * as internal from \"./internal/executionStrategy.js\"\n\n/**\n * Describes a strategy for evaluating multiple effects, potentially in\n * parallel.\n *\n * There are 3 possible execution strategies: `Sequential`, `Parallel`,\n * `ParallelN`.\n *\n * @since 2.0.0\n * @category models\n */\nexport type ExecutionStrategy = Sequential | Parallel | ParallelN\n\n/**\n * Execute effects sequentially.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Sequential {\n  readonly _tag: \"Sequential\"\n}\n\n/**\n * Execute effects in parallel.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Parallel {\n  readonly _tag: \"Parallel\"\n}\n\n/**\n * Execute effects in parallel, up to the specified number of concurrent fibers.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface ParallelN {\n  readonly _tag: \"ParallelN\"\n  readonly parallelism: number\n}\n\n/**\n * Execute effects sequentially.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sequential: ExecutionStrategy = internal.sequential\n\n/**\n * Execute effects in parallel.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallel: ExecutionStrategy = internal.parallel\n\n/**\n * Execute effects in parallel, up to the specified number of concurrent fibers.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallelN: (parallelism: number) => ExecutionStrategy = internal.parallelN\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSequential: (self: ExecutionStrategy) => self is Sequential = internal.isSequential\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallel: (self: ExecutionStrategy) => self is Parallel = internal.isParallel\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallelN: (self: ExecutionStrategy) => self is ParallelN = internal.isParallelN\n\n/**\n * Folds over the specified `ExecutionStrategy` using the provided case\n * functions.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  <A>(options: {\n    readonly onSequential: LazyArg<A>\n    readonly onParallel: LazyArg<A>\n    readonly onParallelN: (n: number) => A\n  }): (self: ExecutionStrategy) => A\n  <A>(self: ExecutionStrategy, options: {\n    readonly onSequential: LazyArg<A>\n    readonly onParallel: LazyArg<A>\n    readonly onParallelN: (n: number) => A\n  }): A\n} = internal.match\n", "/**\n * @since 2.0.0\n */\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport * as internal from \"./internal/fiberRefs/patch.js\"\n\n/**\n * A `FiberRefsPatch` captures the changes in `FiberRef` values made by a single\n * fiber as a value. This allows fibers to apply the changes made by a workflow\n * without inheriting all the `FiberRef` values of the fiber that executed the\n * workflow.\n *\n * @since 2.0.0\n * @category models\n */\nexport type FiberRefsPatch = Empty | Add | Remove | Update | AndThen\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Empty {\n  readonly _tag: \"Empty\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Add {\n  readonly _tag: \"Add\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n  readonly value: unknown\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Remove {\n  readonly _tag: \"Remove\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Update {\n  readonly _tag: \"Update\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n  readonly patch: unknown\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface AndThen {\n  readonly _tag: \"AndThen\"\n  readonly first: FiberRefsPatch\n  readonly second: FiberRefsPatch\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: FiberRefsPatch = internal.empty\n\n/**\n * Constructs a patch that describes the changes between the specified\n * collections of `FiberRef`\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const diff: (oldValue: FiberRefs.FiberRefs, newValue: FiberRefs.FiberRefs) => FiberRefsPatch = internal.diff\n\n/**\n * Combines this patch and the specified patch to create a new patch that\n * describes applying the changes from this patch and the specified patch\n * sequentially.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combine: {\n  (that: FiberRefsPatch): (self: FiberRefsPatch) => FiberRefsPatch\n  (self: FiberRefsPatch, that: FiberRefsPatch): FiberRefsPatch\n} = internal.combine\n\n/**\n * Applies the changes described by this patch to the specified collection\n * of `FiberRef` values.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const patch: {\n  (fiberId: FiberId.Runtime, oldValue: FiberRefs.FiberRefs): (self: FiberRefsPatch) => FiberRefs.FiberRefs\n  (self: FiberRefsPatch, fiberId: FiberId.Runtime, oldValue: FiberRefs.FiberRefs): FiberRefs.FiberRefs\n} = internal.patch\n", "import * as Equal from \"../Equal.js\"\nimport type { FiberId } from \"../FiberId.js\"\nimport type * as FiberStatus from \"../FiberStatus.js\"\nimport { pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type { RuntimeFlags } from \"../RuntimeFlags.js\"\n\nconst FiberStatusSymbolKey = \"effect/FiberStatus\"\n\n/** @internal */\nexport const FiberStatusTypeId: FiberStatus.FiberStatusTypeId = Symbol.for(\n  FiberStatusSymbolKey\n) as FiberStatus.FiberStatusTypeId\n\n/** @internal */\nexport const OP_DONE = \"Done\" as const\n\n/** @internal */\nexport type OP_DONE = typeof OP_DONE\n\n/** @internal */\nexport const OP_RUNNING = \"Running\" as const\n\n/** @internal */\nexport type OP_RUNNING = typeof OP_RUNNING\n\n/** @internal */\nexport const OP_SUSPENDED = \"Suspended\" as const\n\n/** @internal */\nexport type OP_SUSPENDED = typeof OP_SUSPENDED\n\nconst DoneHash = Hash.string(`${FiberStatusSymbolKey}-${OP_DONE}`)\n\n/** @internal */\nclass Done implements FiberStatus.Done {\n  readonly [FiberStatusTypeId]: FiberStatus.FiberStatusTypeId = FiberStatusTypeId\n  readonly _tag = OP_DONE;\n  [Hash.symbol](): number {\n    return DoneHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberStatus(that) && that._tag === OP_DONE\n  }\n}\n\n/** @internal */\nclass Running implements FiberStatus.Running {\n  readonly [FiberStatusTypeId]: FiberStatus.FiberStatusTypeId = FiberStatusTypeId\n  readonly _tag = OP_RUNNING\n  constructor(readonly runtimeFlags: RuntimeFlags) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(FiberStatusSymbolKey),\n      Hash.combine(Hash.hash(this._tag)),\n      Hash.combine(Hash.hash(this.runtimeFlags)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return (\n      isFiberStatus(that) &&\n      that._tag === OP_RUNNING &&\n      this.runtimeFlags === that.runtimeFlags\n    )\n  }\n}\n\n/** @internal */\nclass Suspended implements FiberStatus.Suspended {\n  readonly [FiberStatusTypeId]: FiberStatus.FiberStatusTypeId = FiberStatusTypeId\n  readonly _tag = OP_SUSPENDED\n  constructor(\n    readonly runtimeFlags: RuntimeFlags,\n    readonly blockingOn: FiberId\n  ) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(FiberStatusSymbolKey),\n      Hash.combine(Hash.hash(this._tag)),\n      Hash.combine(Hash.hash(this.runtimeFlags)),\n      Hash.combine(Hash.hash(this.blockingOn)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return (\n      isFiberStatus(that) &&\n      that._tag === OP_SUSPENDED &&\n      this.runtimeFlags === that.runtimeFlags &&\n      Equal.equals(this.blockingOn, that.blockingOn)\n    )\n  }\n}\n\n/** @internal */\nexport const done: FiberStatus.FiberStatus = new Done()\n\n/** @internal */\nexport const running = (runtimeFlags: RuntimeFlags): FiberStatus.FiberStatus => new Running(runtimeFlags)\n\n/** @internal */\nexport const suspended = (\n  runtimeFlags: RuntimeFlags,\n  blockingOn: FiberId\n): FiberStatus.FiberStatus => new Suspended(runtimeFlags, blockingOn)\n\n/** @internal */\nexport const isFiberStatus = (u: unknown): u is FiberStatus.FiberStatus => hasProperty(u, FiberStatusTypeId)\n\n/** @internal */\nexport const isDone = (self: FiberStatus.FiberStatus): self is FiberStatus.Done => self._tag === OP_DONE\n\n/** @internal */\nexport const isRunning = (self: FiberStatus.FiberStatus): self is FiberStatus.Running => self._tag === OP_RUNNING\n\n/** @internal */\nexport const isSuspended = (self: FiberStatus.FiberStatus): self is FiberStatus.Suspended => self._tag === OP_SUSPENDED\n", "/**\n * @since 2.0.0\n */\nimport type * as Equal from \"./Equal.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport * as internal from \"./internal/fiberStatus.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberStatusTypeId: unique symbol = internal.FiberStatusTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberStatusTypeId = typeof FiberStatusTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type FiberStatus = Done | Running | Suspended\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Done extends Equal.Equal {\n  readonly _tag: \"Done\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Running extends Equal.Equal {\n  readonly _tag: \"Running\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n  readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Suspended extends Equal.Equal {\n  readonly _tag: \"Suspended\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n  readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n  readonly blockingOn: FiberId.FiberId\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const done: FiberStatus = internal.done\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const running: (runtimeFlags: RuntimeFlags.RuntimeFlags) => FiberStatus = internal.running\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const suspended: (runtimeFlags: RuntimeFlags.RuntimeFlags, blockingOn: FiberId.FiberId) => FiberStatus =\n  internal.suspended\n\n/**\n * Returns `true` if the specified value is a `FiberStatus`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiberStatus: (u: unknown) => u is FiberStatus = internal.isFiberStatus\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Done`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isDone: (self: FiberStatus) => self is Done = internal.isDone\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Running`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRunning: (self: FiberStatus) => self is Running = internal.isRunning\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Suspended`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSuspended: (self: FiberStatus) => self is Suspended = internal.isSuspended\n", "/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n */\nimport type { Channel, ChannelTypeId } from \"./Channel.js\"\nimport * as Context from \"./Context.js\"\nimport type { Effect, EffectTypeId, EffectUnify, EffectUnifyIgnore } from \"./Effect.js\"\nimport * as Effectable from \"./Effectable.js\"\nimport * as Either from \"./Either.js\"\nimport { constTrue, constVoid, dual, identity, type LazyArg } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { NodeInspectSymbol, toStringUnknown } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport { StructuralPrototype } from \"./internal/effectable.js\"\nimport { SingleShotGen } from \"./internal/singleShotGen.js\"\nimport * as Option from \"./Option.js\"\nimport { type Pipeable, pipeArguments } from \"./Pipeable.js\"\nimport { isIterable, isTagged, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { ReadonlyRecord } from \"./Record.js\"\nimport type { Sink, SinkTypeId } from \"./Sink.js\"\nimport type { Stream, StreamTypeId } from \"./Stream.js\"\nimport type { Concurrency, Covariant, Equals, NoInfer, NotFunction, Simplify } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport { YieldWrap, yieldWrapGet } from \"./Utils.js\"\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Micro\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category symbols\n */\nexport const runSymbol: unique symbol = Symbol.for(\"effect/Micro/runSymbol\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category symbols\n */\nexport type runSymbol = typeof runSymbol\n\n/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n * @category models\n */\nexport interface Micro<out A, out E = never, out R = never> extends Effect<A, E, R> {\n  readonly [TypeId]: Micro.Variance<A, E, R>\n  readonly [runSymbol]: (env: Env<any>, onExit: (exit: MicroExit<A, E>) => void) => void\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: MicroUnify<this>\n  [Unify.ignoreSymbol]?: MicroUnifyIgnore\n  [Symbol.iterator](): MicroIterator<Micro<A, E, R>>\n}\n\n/**\n * @category models\n * @since 3.4.3\n */\nexport interface MicroUnify<A extends { [Unify.typeSymbol]?: any }> extends EffectUnify<A> {\n  Micro?: () => A[Unify.typeSymbol] extends Micro<infer A0, infer E0, infer R0> | infer _ ? Micro<A0, E0, R0> : never\n}\n\n/**\n * @category models\n * @since 3.4.3\n */\nexport interface MicroUnifyIgnore extends EffectUnifyIgnore {\n  Effect?: true\n}\n/**\n * @category type lambdas\n * @since 3.4.1\n */\nexport interface MicroTypeLambda extends TypeLambda {\n  readonly type: Micro<this[\"Target\"], this[\"Out1\"], this[\"Out2\"]>\n}\n\n/**\n * @since 3.4.0\n * @experimental\n */\nexport declare namespace Micro {\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export interface Variance<A, E, R> {\n    _A: Covariant<A>\n    _E: Covariant<E>\n    _R: Covariant<R>\n  }\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Success<T> = T extends Micro<infer _A, infer _E, infer _R> ? _A : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Error<T> = T extends Micro<infer _A, infer _E, infer _R> ? _E : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Context<T> = T extends Micro<infer _A, infer _E, infer _R> ? _R : never\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category guards\n */\nexport const isMicro = (u: unknown): u is Micro<any, any, any> => typeof u === \"object\" && u !== null && TypeId in u\n\n/**\n * @since 3.4.0\n * @experimental\n * @category models\n */\nexport interface MicroIterator<T extends Micro<any, any, any>> {\n  next(...args: ReadonlyArray<any>): IteratorResult<YieldWrap<T>, Micro.Success<T>>\n}\n\n// ----------------------------------------------------------------------------\n// MicroCause\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const MicroCauseTypeId = Symbol.for(\"effect/Micro/MicroCause\")\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport type MicroCauseTypeId = typeof MicroCauseTypeId\n\n/**\n * A Micro Cause is a data type that represents the different ways a Micro can fail.\n *\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport type MicroCause<E> = MicroCause.Die | MicroCause.Fail<E> | MicroCause.Interrupt\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport declare namespace MicroCause {\n  /**\n   * @since 3.4.6\n   * @experimental\n   */\n  export type Error<T> = T extends MicroCause.Fail<infer E> ? E : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export interface Proto<Tag extends string, E> extends Pipeable, globalThis.Error {\n    readonly [MicroCauseTypeId]: {\n      _E: Covariant<E>\n    }\n    readonly _tag: Tag\n    readonly traces: ReadonlyArray<string>\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Die extends Proto<\"Die\", never> {\n    readonly defect: unknown\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Fail<E> extends Proto<\"Fail\", E> {\n    readonly error: E\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Interrupt extends Proto<\"Interrupt\", never> {}\n}\n\nconst microCauseVariance = {\n  _E: identity\n}\n\nabstract class MicroCauseImpl<Tag extends string, E> extends globalThis.Error implements MicroCause.Proto<Tag, E> {\n  readonly [MicroCauseTypeId]: {\n    _E: Covariant<E>\n  }\n  constructor(\n    readonly _tag: Tag,\n    originalError: unknown,\n    readonly traces: ReadonlyArray<string>\n  ) {\n    const causeName = `MicroCause.${_tag}`\n    let name: string\n    let message: string\n    let stack: string\n    if (originalError instanceof globalThis.Error) {\n      name = `(${causeName}) ${originalError.name}`\n      message = originalError.message as string\n      const messageLines = message.split(\"\\n\").length\n      stack = originalError.stack\n        ? `(${causeName}) ${originalError.stack.split(\"\\n\").slice(0, messageLines + 3).join(\"\\n\")}`\n        : `${name}: ${message}`\n    } else {\n      name = causeName\n      message = toStringUnknown(originalError, 0)\n      stack = `${name}: ${message}`\n    }\n    if (traces.length > 0) {\n      stack += `\\n    ${traces.join(\"\\n    \")}`\n    }\n    super(message)\n    this[MicroCauseTypeId] = microCauseVariance\n    this.name = name\n    this.stack = stack\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toString() {\n    return this.stack\n  }\n  [NodeInspectSymbol]() {\n    return this.stack\n  }\n}\n\nclass FailImpl<E> extends MicroCauseImpl<\"Fail\", E> implements MicroCause.Fail<E> {\n  constructor(readonly error: E, traces: ReadonlyArray<string> = []) {\n    super(\"Fail\", error, traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeFail = <E>(error: E, traces: ReadonlyArray<string> = []): MicroCause<E> => new FailImpl(error, traces)\n\nclass DieImpl extends MicroCauseImpl<\"Die\", never> implements MicroCause.Die {\n  constructor(readonly defect: unknown, traces: ReadonlyArray<string> = []) {\n    super(\"Die\", defect, traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeDie = (defect: unknown, traces: ReadonlyArray<string> = []): MicroCause<never> =>\n  new DieImpl(defect, traces)\n\nclass InterruptImpl extends MicroCauseImpl<\"Interrupt\", never> implements MicroCause.Interrupt {\n  constructor(traces: ReadonlyArray<string> = []) {\n    super(\"Interrupt\", \"interrupted\", traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeInterrupt = (traces: ReadonlyArray<string> = []): MicroCause<never> => new InterruptImpl(traces)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsFail = <E>(self: MicroCause<E>): self is MicroCause.Fail<E> => self._tag === \"Fail\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsDie = <E>(self: MicroCause<E>): self is MicroCause.Die => self._tag === \"Die\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsInterrupt = <E>(self: MicroCause<E>): self is MicroCause.Interrupt => self._tag === \"Interrupt\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeSquash = <E>(self: MicroCause<E>): unknown =>\n  self._tag === \"Fail\" ? self.error : self._tag === \"Die\" ? self.defect : self\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeWithTrace: {\n  (trace: string): <E>(self: MicroCause<E>) => MicroCause<E>\n  <E>(self: MicroCause<E>, trace: string): MicroCause<E>\n} = dual(2, <E>(self: MicroCause<E>, trace: string): MicroCause<E> => {\n  const traces = [...self.traces, trace]\n  switch (self._tag) {\n    case \"Die\":\n      return causeDie(self.defect, traces)\n    case \"Interrupt\":\n      return causeInterrupt(traces)\n    case \"Fail\":\n      return causeFail(self.error, traces)\n  }\n})\n\n// ----------------------------------------------------------------------------\n// MicroExit\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport declare namespace MicroExit {\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroExit\n   */\n  export type Success<A, E = never> = Either.Right<MicroCause<E>, A>\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroExit\n   */\n  export type Failure<A, E = never> = Either.Left<MicroCause<E>, A>\n}\n\n/**\n * The MicroExit type is a data type that represents the result of a Micro\n * computation.\n *\n * It uses the `Either` data type to represent the success and failure cases.\n *\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport type MicroExit<A, E = never> = MicroExit.Success<A, E> | MicroExit.Failure<A, E>\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitInterrupt: MicroExit<never> = Either.left(causeInterrupt())\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitSucceed: <A>(a: A) => MicroExit<A, never> = Either.right\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitFail = <E>(e: E): MicroExit<never, E> => Either.left(causeFail(e))\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitDie = (defect: unknown): MicroExit<never> => Either.left(causeDie(defect))\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitFailCause: <E>(cause: MicroCause<E>) => MicroExit<never, E> = Either.left\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsSuccess: <A, E>(self: MicroExit<A, E>) => self is MicroExit.Success<A, E> = Either.isRight\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsFailure: <A, E>(self: MicroExit<A, E>) => self is MicroExit.Failure<A, E> = Either.isLeft\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsInterrupt = <A, E>(self: MicroExit<A, E>): self is Either.Left<MicroCause.Interrupt, A> =>\n  exitIsFailure(self) && self.left._tag === \"Interrupt\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsFail = <A, E>(self: MicroExit<A, E>): self is Either.Left<MicroCause.Fail<E>, A> =>\n  exitIsFailure(self) && self.left._tag === \"Fail\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsDie = <A, E>(self: MicroExit<A, E>): self is Either.Left<MicroCause.Die, A> =>\n  exitIsFailure(self) && self.left._tag === \"Die\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitVoid: MicroExit<void> = exitSucceed(void 0)\n\n// ----------------------------------------------------------------------------\n// env\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const EnvTypeId = Symbol.for(\"effect/Micro/Env\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport type EnvTypeId = typeof EnvTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport interface Env<R> extends Pipeable {\n  readonly [EnvTypeId]: {\n    _R: Covariant<R>\n  }\n  readonly refs: ReadonlyRecord<string, unknown>\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const EnvRefTypeId: unique symbol = Symbol.for(\"effect/Micro/EnvRef\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport type EnvRefTypeId = typeof EnvRefTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport interface EnvRef<A> {\n  readonly [EnvRefTypeId]: EnvRefTypeId\n  readonly key: string\n  readonly initial: A\n}\n\nconst EnvProto = {\n  [EnvTypeId]: {\n    _R: identity\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envMake = <R = never>(\n  refs: Record<string, unknown>\n): Env<R> => {\n  const self = Object.create(EnvProto)\n  self.refs = refs\n  return self\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envUnsafeMakeEmpty = (): Env<never> => {\n  const controller = new AbortController()\n  const refs = Object.create(null)\n  refs[currentAbortController.key] = controller\n  refs[currentAbortSignal.key] = controller.signal\n  refs[currentScheduler.key] = new MicroSchedulerDefault()\n  return envMake(refs)\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envGet: {\n  <A>(ref: EnvRef<A>): <R>(self: Env<R>) => A\n  <A, R>(self: Env<R>, ref: EnvRef<A>): A\n} = dual(2, <R, A>(self: Env<R>, ref: EnvRef<A>): A => ref.key in self.refs ? (self.refs[ref.key] as A) : ref.initial)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envSet: {\n  <A>(ref: EnvRef<A>, value: A): <R>(self: Env<R>) => Env<R>\n  <A, R>(self: Env<R>, ref: EnvRef<A>, value: A): Env<R>\n} = dual(3, <R, A>(self: Env<R>, ref: EnvRef<A>, value: A): Env<R> => {\n  const refs = Object.assign(Object.create(null), self.refs)\n  refs[ref.key] = value\n  return envMake(refs)\n})\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envMutate: {\n  (f: (map: Record<string, unknown>) => void): <R>(self: Env<R>) => Env<R>\n  <R>(self: Env<R>, f: (map: Record<string, unknown>) => void): Env<R>\n} = dual(\n  2,\n  <R>(self: Env<R>, f: (map: Record<string, unknown>) => ReadonlyRecord<string, unknown>): Env<R> =>\n    envMake(f(Object.assign(Object.create(null), self.refs)))\n)\n\n/**\n * Access the given `Context.Tag` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const service = <I, S>(tag: Context.Tag<I, S>): Micro<S, never, I> =>\n  make(function(env, onExit) {\n    onExit(exitSucceed(Context.get(envGet(env, currentContext) as Context.Context<I>, tag as any) as S))\n  })\n\n/**\n * Access the given `Context.Tag` from the environment, without tracking the\n * dependency at the type level.\n *\n * It will return an `Option` of the service, depending on whether it is\n * available in the environment or not.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const serviceOption = <I, S>(tag: Context.Tag<I, S>): Micro<Option.Option<S>> =>\n  make(function(env, onExit) {\n    onExit(exitSucceed(Context.getOption(envGet(env, currentContext) as Context.Context<I>, tag)))\n  })\n\n/**\n * Retrieve the current value of the given `EnvRef`.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const getEnvRef = <A>(envRef: EnvRef<A>): Micro<A> =>\n  make((env, onExit) => onExit(Either.right(envGet(env, envRef))))\n\n/**\n * Set the value of the given `EnvRef` for the duration of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const locally: {\n  <A>(fiberRef: EnvRef<A>, value: A): <XA, E, R>(self: Micro<XA, E, R>) => Micro<XA, E, R>\n  <XA, E, R, A>(self: Micro<XA, E, R>, fiberRef: EnvRef<A>, value: A): Micro<XA, E, R>\n} = dual(\n  3,\n  <XA, E, R, A>(self: Micro<XA, E, R>, fiberRef: EnvRef<A>, value: A): Micro<XA, E, R> =>\n    make((env, onExit) => self[runSymbol](envSet(env, fiberRef, value), onExit))\n)\n\n/**\n * Access the current `Context` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const context = <R>(): Micro<Context.Context<R>> => getEnvRef(currentContext) as any\n\n/**\n * Merge the given `Context` with the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const provideContext: {\n  <XR>(context: Context.Context<XR>): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, XR>>\n  <A, E, R, XR>(self: Micro<A, E, R>, context: Context.Context<XR>): Micro<A, E, Exclude<R, XR>>\n} = dual(\n  2,\n  <A, E, R, XR>(self: Micro<A, E, R>, provided: Context.Context<XR>): Micro<A, E, Exclude<R, XR>> =>\n    make(function(env, onExit) {\n      const context = envGet(env, currentContext)\n      const nextEnv = envSet(env, currentContext, Context.merge(context, provided))\n      self[runSymbol](nextEnv, onExit)\n    })\n)\n\n/**\n * Add the provided service to the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const provideService: {\n  <I, S>(tag: Context.Tag<I, S>, service: S): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, I>>\n  <A, E, R, I, S>(self: Micro<A, E, R>, tag: Context.Tag<I, S>, service: S): Micro<A, E, Exclude<R, I>>\n} = dual(\n  3,\n  <A, E, R, I, S>(self: Micro<A, E, R>, tag: Context.Tag<I, S>, service: S): Micro<A, E, Exclude<R, I>> =>\n    make(function(env, onExit) {\n      const context = envGet(env, currentContext)\n      const nextEnv = envSet(env, currentContext, Context.add(context, tag, service))\n      self[runSymbol](nextEnv, onExit)\n    })\n)\n\n/**\n * Create a service using the provided `Micro` effect, and add it to the\n * current context.\n *\n * @since 3.4.6\n * @experimental\n * @category environment\n */\nexport const provideServiceEffect: {\n  <I, S, E2, R2>(\n    tag: Context.Tag<I, S>,\n    acquire: Micro<S, E2, R2>\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | E2, Exclude<R, I> | R2>\n  <A, E, R, I, S, E2, R2>(\n    self: Micro<A, E, R>,\n    tag: Context.Tag<I, S>,\n    acquire: Micro<S, E2, R2>\n  ): Micro<A, E | E2, Exclude<R, I> | R2>\n} = dual(\n  3,\n  <A, E, R, I, S, E2, R2>(\n    self: Micro<A, E, R>,\n    tag: Context.Tag<I, S>,\n    acquire: Micro<S, E2, R2>\n  ): Micro<A, E | E2, Exclude<R, I> | R2> => flatMap(acquire, (service) => provideService(self, tag, service))\n)\n\n// ----------------------------------------------------------------------------\n// scheduler\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */\nexport interface MicroScheduler {\n  readonly scheduleTask: (task: () => void, priority: number) => void\n  readonly shouldYield: (env: Env<unknown>) => boolean\n  readonly flush: () => void\n}\n\nconst setImmediate = \"setImmediate\" in globalThis ? globalThis.setImmediate : (f: () => void) => setTimeout(f, 0)\n\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */\nexport class MicroSchedulerDefault implements MicroScheduler {\n  private tasks: Array<() => void> = []\n  private running = false\n\n  /**\n   * @since 3.5.9\n   */\n  scheduleTask(task: () => void, _priority: number) {\n    this.tasks.push(task)\n    if (!this.running) {\n      this.running = true\n      setImmediate(this.afterScheduled)\n    }\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  afterScheduled = () => {\n    this.running = false\n    this.runTasks()\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  runTasks() {\n    const tasks = this.tasks\n    this.tasks = []\n    for (let i = 0, len = tasks.length; i < len; i++) {\n      tasks[i]()\n    }\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  shouldYield(_env: Env<unknown>) {\n    return false\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  flush() {\n    while (this.tasks.length > 0) {\n      this.runTasks()\n    }\n  }\n}\n\n// ========================================================================\n// Env refs\n// ========================================================================\n\nconst EnvRefProto = {\n  [EnvRefTypeId]: EnvRefTypeId\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const envRefMake = <A>(key: string, initial: LazyArg<A>): EnvRef<A> =>\n  globalValue(key, () => {\n    const self = Object.create(EnvRefProto)\n    self.key = key\n    self.initial = initial()\n    return self\n  })\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentAbortController: EnvRef<AbortController> = envRefMake(\n  \"effect/Micro/currentAbortController\",\n  () => undefined as any\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentAbortSignal: EnvRef<AbortSignal> = envRefMake(\n  \"effect/Micro/currentAbortSignal\",\n  () => undefined as any\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentContext: EnvRef<Context.Context<never>> = envRefMake(\n  \"effect/Micro/currentContext\",\n  () => Context.empty()\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentConcurrency: EnvRef<\"unbounded\" | number> = envRefMake(\n  \"effect/Micro/currentConcurrency\",\n  () => \"unbounded\"\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentMaxDepthBeforeYield: EnvRef<number> = envRefMake(\n  \"effect/Micro/currentMaxDepthBeforeYield\",\n  () => 2048\n)\n\nconst currentInterruptible: EnvRef<boolean> = envRefMake(\n  \"effect/Micro/currentInterruptible\",\n  () => true\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentScheduler: EnvRef<MicroScheduler> = envRefMake(\n  \"effect/Micro/currentScheduler\",\n  () => new MicroSchedulerDefault()\n)\n\n/**\n * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n * api to control the concurrency of that `Micro` when it is run.\n *\n * @since 3.4.0\n * @experimental\n * @category environment refs\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n *   concurrency: \"inherit\"\n * }).pipe(\n *   Micro.withConcurrency(2) // use a concurrency of 2\n * )\n */\nexport const withConcurrency: {\n  (concurrency: \"unbounded\" | number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(self: Micro<A, E, R>, concurrency: \"unbounded\" | number): Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, concurrency: \"unbounded\" | number): Micro<A, E, R> =>\n    locally(self, currentConcurrency, concurrency)\n)\n\n// ----------------------------------------------------------------------------\n// constructors\n// ----------------------------------------------------------------------------\n\nconst MicroProto = {\n  ...Effectable.EffectPrototype,\n  _op: \"Micro\",\n  [TypeId]: {\n    _A: identity,\n    _E: identity,\n    _R: identity\n  },\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this)) as any\n  }\n}\n\nconst microDepthState = globalValue(\"effect/Micro/microDepthState\", () => ({\n  depth: 0,\n  maxDepthBeforeYield: currentMaxDepthBeforeYield.initial\n}))\n\nconst unsafeMake = <R, A, E>(\n  run: (env: Env<R>, onExit: (exit: MicroExit<A, E>) => void) => void\n): Micro<A, E, R> => {\n  const self = Object.create(MicroProto)\n  self[runSymbol] = run\n  return self\n}\n\nconst unsafeMakeOptions = <R, A, E>(\n  run: (env: Env<R>, onExit: (exit: MicroExit<A, E>) => void) => void,\n  checkAbort: boolean\n): Micro<A, E, R> =>\n  unsafeMake(function execute(env, onExit) {\n    if (\n      checkAbort && env.refs[currentInterruptible.key] !== false &&\n      (env.refs[currentAbortSignal.key] as AbortSignal).aborted\n    ) {\n      return onExit(exitInterrupt)\n    }\n    microDepthState.depth++\n    if (microDepthState.depth === 1) {\n      microDepthState.maxDepthBeforeYield = envGet(env, currentMaxDepthBeforeYield)\n    }\n    const scheduler = env.refs[currentScheduler.key] as MicroScheduler\n    if (microDepthState.depth >= microDepthState.maxDepthBeforeYield || scheduler.shouldYield(env)) {\n      scheduler.scheduleTask(() => execute(env, onExit), 0)\n    } else {\n      try {\n        run(env, onExit)\n      } catch (err) {\n        onExit(exitDie(err))\n      }\n    }\n    microDepthState.depth--\n  })\n\n/**\n * A low-level constructor for creating a `Micro` effect. It takes a function\n * that receives an environment and a callback which should be called with the\n * result of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const make = <R, A, E>(\n  run: (env: Env<R>, onExit: (exit: MicroExit<A, E>) => void) => void\n): Micro<A, E, R> => unsafeMakeOptions(run, true)\n\n/**\n * Converts a `MicroExit` into a `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const fromExit = <A, E>(self: MicroExit<A, E>): Micro<A, E> =>\n  make(function(_env, onExit) {\n    onExit(self)\n  })\n\n/**\n * Converts a lazy `MicroExit` into a `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const fromExitSync = <A, E>(self: LazyArg<MicroExit<A, E>>): Micro<A, E> =>\n  make(function(_env, onExit) {\n    onExit(self())\n  })\n\n/**\n * Creates a `Micro` effect that will succeed with the specified constant value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeed = <A>(a: A): Micro<A> => fromExit(exitSucceed(a))\n\n/**\n * Creates a `Micro` effect that will succeed with `Option.Some` of the value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeedSome = <A>(a: A): Micro<Option.Option<A>> => succeed(Option.some(a))\n\n/**\n * Creates a `Micro` effect that will succeed with `Option.None`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeedNone: Micro<Option.Option<never>> = succeed(Option.none())\n\n/**\n * Creates a `Micro` effect that will fail with the specified error.\n *\n * This will result in a `CauseFail`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fail = <E>(e: E): Micro<never, E> => fromExit(exitFail(e))\n\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated error.\n *\n * This will result in a `CauseFail`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const failSync = <E>(e: LazyArg<E>): Micro<never, E> =>\n  make(function(_env, onExit) {\n    onExit(exitFail(e()))\n  })\n\n/**\n * Creates a `Micro` effect that will die with the specified error.\n *\n * This will result in a `CauseDie`, where the error is not tracked at\n * the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const die = (defect: unknown): Micro<never> => fromExit(exitDie(defect))\n\n/**\n * Creates a `Micro` effect that will fail with the specified `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const failCause = <E>(cause: MicroCause<E>): Micro<never, E> => fromExit(exitFailCause(cause))\n\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const failCauseSync = <E>(cause: LazyArg<MicroCause<E>>): Micro<never, E> =>\n  fromExitSync(() => exitFailCause(cause()))\n\n/**\n * Creates a `Micro` effect that will succeed with the lazily evaluated value.\n *\n * If the evaluation of the value throws an error, the effect will fail with\n * `CauseDie`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const sync = <A>(evaluate: LazyArg<A>): Micro<A> =>\n  make(function(_env, onExit) {\n    onExit(exitSucceed(evaluate()))\n  })\n\n/**\n * Converts an `Option` into a `Micro` effect, that will fail with\n * `NoSuchElementException` if the option is `None`. Otherwise, it will succeed with the\n * value of the option.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fromOption = <A>(option: Option.Option<A>): Micro<A, NoSuchElementException> =>\n  make(function(_env, onExit) {\n    onExit(option._tag === \"Some\" ? exitSucceed(option.value) : exitFail(new NoSuchElementException({})))\n  })\n\n/**\n * Converts an `Either` into a `Micro` effect, that will fail with the left side\n * of the either if it is a `Left`. Otherwise, it will succeed with the right\n * side of the either.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fromEither = <R, L>(either: Either.Either<R, L>): Micro<R, L> =>\n  make(function(_env, onExit) {\n    onExit(either._tag === \"Right\" ? either as MicroExit<R, never> : exitFail(either.left))\n  })\n\n/**\n * Lazily creates a `Micro` effect from the given side-effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const suspend = <A, E, R>(evaluate: LazyArg<Micro<A, E, R>>): Micro<A, E, R> =>\n  make(function(env, onExit) {\n    evaluate()[runSymbol](env, onExit)\n  })\n\nconst void_: Micro<void> = succeed(void 0)\nexport {\n  /**\n   * A `Micro` effect that will succeed with `void` (`undefined`).\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Create a `Micro` effect from an asynchronous computation.\n *\n * You can return a cleanup effect that will be run when the effect is aborted.\n * It is also passed an `AbortSignal` that is triggered when the effect is\n * aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const async = <A, E = never, R = never>(\n  register: (resume: (effect: Micro<A, E, R>) => void, signal: AbortSignal) => void | Micro<void, never, R>\n): Micro<A, E, R> =>\n  make(function(env, onExit) {\n    let resumed = false\n    const controller = register.length > 1 ? new AbortController() : undefined\n    const signal = envGet(env, currentAbortSignal)\n    let cleanup: Micro<void, never, R> | void = undefined\n    function onAbort() {\n      if (cleanup) {\n        resume(uninterruptible(andThen(cleanup, fromExit(exitInterrupt))))\n      } else {\n        resume(fromExit(exitInterrupt))\n      }\n      if (controller !== undefined) {\n        controller.abort()\n      }\n    }\n    function resume(effect: Micro<A, E, R>) {\n      if (resumed) {\n        return\n      }\n      resumed = true\n      signal.removeEventListener(\"abort\", onAbort)\n      effect[runSymbol](env, onExit)\n    }\n    cleanup = controller === undefined\n      ? (register as any)(resume)\n      : register(resume, controller.signal)\n    if (resumed) return\n    signal.addEventListener(\"abort\", onAbort)\n  })\n\nconst try_ = <A, E>(options: {\n  try: LazyArg<A>\n  catch: (error: unknown) => E\n}): Micro<A, E> =>\n  make(function(_env, onExit) {\n    try {\n      onExit(exitSucceed(options.try()))\n    } catch (err) {\n      onExit(exitFail(options.catch(err)))\n    }\n  })\nexport {\n  /**\n   * The `Micro` equivalent of a try / catch block, which allows you to map\n   * thrown errors to a specific error type.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category constructors\n   * @example\n   * import { Micro } from \"effect\"\n   *\n   * Micro.try({\n   *   try: () => throw new Error(\"boom\"),\n   *   catch: (cause) => new Error(\"caught\", { cause })\n   * })\n   */\n  try_ as try\n}\n\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will result in a\n * `CauseDie`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const promise = <A>(evaluate: (signal: AbortSignal) => PromiseLike<A>): Micro<A> =>\n  async<A>(function(resume, signal) {\n    evaluate(signal).then(\n      (a) => resume(succeed(a)),\n      (e) => resume(die(e))\n    )\n  })\n\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will be caught and\n * converted into a specific error type.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n * @example\n * import { Micro } from \"effect\"\n *\n * Micro.tryPromise({\n *   try: () => Promise.resolve(\"success\"),\n *   catch: (cause) => new Error(\"caught\", { cause })\n * })\n */\nexport const tryPromise = <A, E>(options: {\n  readonly try: (signal: AbortSignal) => PromiseLike<A>\n  readonly catch: (error: unknown) => E\n}): Micro<A, E> =>\n  async<A, E>(function(resume, signal) {\n    try {\n      options.try(signal).then(\n        (a) => resume(succeed(a)),\n        (e) => resume(fail(options.catch(e)))\n      )\n    } catch (err) {\n      resume(fail(options.catch(err)))\n    }\n  })\n\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * You can specify a priority for the task, which will determine when it is\n * executed relative to other tasks.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldWithPriority = (priority: number): Micro<void> =>\n  make(function(env, onExit) {\n    envGet(env, currentScheduler).scheduleTask(() => onExit(exitVoid), priority)\n  })\n\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldNow: Micro<void> = yieldWithPriority(0)\n\n/**\n * Flush any yielded effects that are waiting to be executed.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldFlush: Micro<void> = make(function(env, onExit) {\n  envGet(env, currentScheduler).flush()\n  onExit(exitVoid)\n})\n\n/**\n * A `Micro` that will never succeed or fail. It wraps `setInterval` to prevent\n * the Javascript runtime from exiting.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const never: Micro<never> = async<never>(function() {\n  const interval = setInterval(constVoid, 2147483646)\n  return sync(() => clearInterval(interval))\n})\n\n/**\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const gen = <Self, Eff extends YieldWrap<Micro<any, any, any>>, AEff>(\n  ...args:\n    | [self: Self, body: (this: Self) => Generator<Eff, AEff, never>]\n    | [body: () => Generator<Eff, AEff, never>]\n): Micro<\n  AEff,\n  [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Micro<infer _A, infer E, infer _R>>] ? E : never,\n  [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Micro<infer _A, infer _E, infer R>>] ? R : never\n> =>\n  make(function(env, onExit) {\n    const iterator: Generator<Eff, AEff, any> = args.length === 1 ? args[0]() : args[1].call(args[0])\n    let running = false\n    let value: any = undefined\n    function run() {\n      running = true\n      try {\n        let shouldContinue = true\n        while (shouldContinue) {\n          const result = iterator.next(value)\n          if (result.done) {\n            return onExit(exitSucceed(result.value))\n          }\n          shouldContinue = false\n          yieldWrapGet(result.value)[runSymbol](env, function(exit) {\n            if (exit._tag === \"Left\") {\n              onExit(exit)\n            } else {\n              shouldContinue = true\n              value = exit.right\n              if (!running) run()\n            }\n          })\n        }\n      } catch (err) {\n        onExit(exitDie(err))\n      }\n      running = false\n    }\n    run()\n  })\n\n// ----------------------------------------------------------------------------\n// mapping & sequencing\n// ----------------------------------------------------------------------------\n\n/**\n * Flattens any nested `Micro` effects, merging the error and requirement types.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flatten = <A, E, R, E2, R2>(self: Micro<Micro<A, E, R>, E2, R2>): Micro<A, E | E2, R | R2> =>\n  make(function(env, onExit) {\n    self[runSymbol](\n      env,\n      (exit) => exit._tag === \"Left\" ? onExit(exit as MicroExit<never, E2>) : exit.right[runSymbol](env, onExit)\n    )\n  })\n\n/**\n * Transforms the success value of the `Micro` effect with the specified\n * function.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E, R>(self: Micro<A, E, R>) => Micro<B, E, R>\n  <A, E, R, B>(self: Micro<A, E, R>, f: (a: A) => B): Micro<B, E, R>\n} = dual(2, <A, E, R, B>(self: Micro<A, E, R>, f: (a: A) => B): Micro<B, E, R> =>\n  make(function(env, onExit) {\n    self[runSymbol](env, function(exit) {\n      onExit(exit._tag === \"Left\" ? exit as MicroExit<never, E> : exitSucceed(f(exit.right)))\n    })\n  }))\n\n/**\n * Create a `Micro` effect that will replace the success value of the given\n * effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const as: {\n  <A, B>(value: B): <E, R>(self: Micro<A, E, R>) => Micro<B, E, R>\n  <A, E, R, B>(self: Micro<A, E, R>, value: B): Micro<B, E, R>\n} = dual(2, <A, E, R, B>(self: Micro<A, E, R>, value: B): Micro<B, E, R> => map(self, (_) => value))\n\n/**\n * Wrap the success value of this `Micro` effect in an `Option.Some`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const asSome = <A, E, R>(self: Micro<A, E, R>): Micro<Option.Option<A>, E, R> => map(self, Option.some)\n\n/**\n * Map the success value of this `Micro` effect to another `Micro` effect, then\n * flatten the result.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flatMap: {\n  <A, B, E2, R2>(f: (a: A) => Micro<B, E2, R2>): <E, R>(self: Micro<A, E, R>) => Micro<B, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<B, E | E2, R | R2> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        if (exit._tag === \"Left\") {\n          return onExit(exit as MicroExit<never, E>)\n        }\n        f(exit.right)[runSymbol](env, onExit)\n      })\n    })\n)\n\n/**\n * Swap the error and success types of the `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flip = <A, E, R>(self: Micro<A, E, R>): Micro<E, A, R> =>\n  matchEffect(self, {\n    onFailure: succeed,\n    onSuccess: fail\n  })\n\n/**\n * A more flexible version of `flatMap`, that combines `map` and `flatMap` into\n * a single api.\n *\n * It also allows you to pass in a `Micro` effect directly, which will be\n * executed after the current effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const andThen: {\n  <A, X>(\n    f: (a: A) => X\n  ): <E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: (a: A) => X\n  ): [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: any): Micro<B, E | E2, R | R2> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        if (exit._tag === \"Left\") {\n          return onExit(exit as MicroExit<never, E>)\n        } else if (envGet(env, currentAbortSignal).aborted) {\n          return onExit(exitInterrupt)\n        }\n        const value = isMicro(f) ? f : typeof f === \"function\" ? f(exit.right) : f\n        if (isMicro(value)) {\n          value[runSymbol](env, onExit)\n        } else {\n          onExit(exitSucceed(value))\n        }\n      })\n    })\n)\n\n/**\n * Execute a side effect from the success value of the `Micro` effect.\n *\n * It is similar to the `andThen` api, but the success value is ignored.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const tap: {\n  <A, X>(\n    f: (a: NoInfer<A>) => X\n  ): <E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(selfExit) {\n        if (selfExit._tag === \"Left\") {\n          return onExit(selfExit as MicroExit<never, E>)\n        } else if (envGet(env, currentAbortSignal).aborted) {\n          return onExit(exitInterrupt)\n        }\n        const value = isMicro(f) ? f : typeof f === \"function\" ? f(selfExit.right) : f\n        if (isMicro(value)) {\n          value[runSymbol](env, function(tapExit) {\n            if (tapExit._tag === \"Left\") {\n              return onExit(tapExit)\n            }\n            onExit(selfExit)\n          })\n        } else {\n          onExit(selfExit)\n        }\n      })\n    })\n)\n\n/**\n * Replace the success value of the `Micro` effect with `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const asVoid = <A, E, R>(self: Micro<A, E, R>): Micro<void, E, R> => map(self, (_) => void 0)\n\n/**\n * Access the `MicroExit` of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category mapping & sequencing\n */\nexport const exit = <A, E, R>(self: Micro<A, E, R>): Micro<MicroExit<A, E>, never, R> =>\n  make(function(env, onExit) {\n    self[runSymbol](env, function(exit) {\n      onExit(exitSucceed(exit))\n    })\n  })\n\n/**\n * Replace the error type of the given `Micro` with the full `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const sandbox = <A, E, R>(self: Micro<A, E, R>): Micro<A, MicroCause<E>, R> =>\n  catchAllCause(self, (cause) => fail(cause))\n\nfunction forkSignal(env: Env<any>) {\n  const controller = new AbortController()\n  const parentSignal = envGet(env, currentAbortSignal)\n  function onAbort() {\n    controller.abort()\n    parentSignal.removeEventListener(\"abort\", onAbort)\n  }\n  parentSignal.addEventListener(\"abort\", onAbort)\n  const envWithSignal = envMutate(env, function(refs) {\n    refs[currentAbortController.key] = controller\n    refs[currentAbortSignal.key] = controller.signal\n    return refs\n  })\n  return [envWithSignal, onAbort] as const\n}\n\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceAll = <Eff extends Micro<any, any, any>>(\n  all: Iterable<Eff>\n): Micro<Micro.Success<Eff>, Micro.Error<Eff>, Micro.Context<Eff>> =>\n  make(function(env, onExit) {\n    const [envWithSignal, onAbort] = forkSignal(env)\n\n    const effects = Array.from(all)\n    let len = effects.length\n    let index = 0\n    let done = 0\n    let exit: MicroExit<any, any> | undefined = undefined\n    const causes: Array<MicroCause<any>> = []\n    function onDone(exit_: MicroExit<any, any>) {\n      done++\n      if (exit_._tag === \"Right\" && exit === undefined) {\n        len = index\n        exit = exit_\n        onAbort()\n      } else if (exit_._tag === \"Left\") {\n        causes.push(exit_.left)\n      }\n      if (done >= len) {\n        onExit(exit ?? Either.left(causes[0]))\n      }\n    }\n\n    for (; index < len; index++) {\n      effects[index][runSymbol](envWithSignal, onDone)\n    }\n  })\n\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed or fail. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceAllFirst = <Eff extends Micro<any, any, any>>(\n  all: Iterable<Eff>\n): Micro<Micro.Success<Eff>, Micro.Error<Eff>, Micro.Context<Eff>> =>\n  make(function(env, onExit) {\n    const [envWithSignal, onAbort] = forkSignal(env)\n\n    const effects = Array.from(all)\n    let len = effects.length\n    let index = 0\n    let done = 0\n    let exit: MicroExit<any, any> | undefined = undefined\n    const causes: Array<MicroCause<any>> = []\n    function onDone(exit_: MicroExit<any, any>) {\n      done++\n      if (exit === undefined) {\n        len = index\n        exit = exit_\n        onAbort()\n      }\n      if (done >= len) {\n        onExit(exit ?? Either.left(causes[0]))\n      }\n    }\n\n    for (; index < len; index++) {\n      effects[index][runSymbol](envWithSignal, onDone)\n    }\n  })\n\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const race: {\n  <A2, E2, R2>(that: Micro<A2, E2, R2>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2> =>\n    raceAll([self, that])\n)\n\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed *or* fail. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceFirst: {\n  <A2, E2, R2>(that: Micro<A2, E2, R2>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2> =>\n    raceAllFirst([self, that])\n)\n\n// ----------------------------------------------------------------------------\n// zipping\n// ----------------------------------------------------------------------------\n\n/**\n * Combine two `Micro` effects into a single effect that produces a tuple of\n * their results.\n *\n * @since 3.4.0\n * @experimental\n * @category zipping\n */\nexport const zip: {\n  <A2, E2, R2>(\n    that: Micro<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined }\n      | undefined\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<[A, A2], E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    that: Micro<A2, E2, R2>,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): Micro<[A, A2], E | E2, R | R2>\n} = dual((args) => isMicro(args[1]), <A, E, R, A2, E2, R2>(\n  self: Micro<A, E, R>,\n  that: Micro<A2, E2, R2>,\n  options?: { readonly concurrent?: boolean | undefined }\n): Micro<[A, A2], E | E2, R | R2> => zipWith(self, that, (a, a2) => [a, a2], options))\n\n/**\n * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n * apply a function to the results of the combined effects, transforming them\n * into a single value.\n *\n * @since 3.4.3\n * @experimental\n * @category zipping\n */\nexport const zipWith: {\n  <A2, E2, R2, A, B>(\n    that: Micro<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2, B>(\n    self: Micro<A, E, R>,\n    that: Micro<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): Micro<B, E2 | E, R2 | R>\n} = dual((args) => isMicro(args[1]), <A, E, R, A2, E2, R2, B>(\n  self: Micro<A, E, R>,\n  that: Micro<A2, E2, R2>,\n  f: (a: A, b: A2) => B,\n  options?: { readonly concurrent?: boolean | undefined }\n): Micro<B, E2 | E, R2 | R> => {\n  if (options?.concurrent) {\n    // Use `all` exclusively for concurrent cases, as it introduces additional overhead due to the management of concurrency\n    return map(all([self, that], { concurrency: \"unbounded\" }), ([a, a2]) => f(a, a2))\n  }\n  return flatMap(self, (a) => map(that, (a2) => f(a, a2)))\n})\n\n// ----------------------------------------------------------------------------\n// filtering & conditionals\n// ----------------------------------------------------------------------------\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * `MicroCause` if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const filterOrFailCause: {\n  <A, B extends A, E2>(\n    refinement: Refinement<A, B>,\n    orFailWith: (a: NoInfer<A>) => MicroCause<E2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R>\n  <A, E2>(\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => MicroCause<E2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<A, E2 | E, R>\n  <A, E, R, B extends A, E2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => MicroCause<E2>\n  ): Micro<B, E | E2, R>\n  <A, E, R, E2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<A>,\n    orFailWith: (a: A) => MicroCause<E2>\n  ): Micro<A, E | E2, R>\n} = dual((args) => isMicro(args[0]), <A, E, R, B extends A, E2>(\n  self: Micro<A, E, R>,\n  refinement: Refinement<A, B>,\n  orFailWith: (a: A) => MicroCause<E2>\n): Micro<B, E | E2, R> => flatMap(self, (a) => refinement(a) ? succeed(a) : failCause(orFailWith(a))))\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const filterOrFail: {\n  <A, B extends A, E2>(\n    refinement: Refinement<A, B>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R>\n  <A, E2>(\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Micro<A, E, R>) => Micro<A, E2 | E, R>\n  <A, E, R, B extends A, E2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => E2\n  ): Micro<B, E | E2, R>\n  <A, E, R, E2>(self: Micro<A, E, R>, predicate: Predicate<A>, orFailWith: (a: A) => E2): Micro<A, E | E2, R>\n} = dual((args) => isMicro(args[0]), <A, E, R, B extends A, E2>(\n  self: Micro<A, E, R>,\n  refinement: Refinement<A, B>,\n  orFailWith: (a: A) => E2\n): Micro<B, E | E2, R> => flatMap(self, (a) => refinement(a) ? succeed(a) : fail(orFailWith(a))))\n\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const when: {\n  <E2 = never, R2 = never>(\n    condition: LazyArg<boolean> | Micro<boolean, E2, R2>\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<Option.Option<A>, E | E2, R | R2>\n  <A, E, R, E2 = never, R2 = never>(\n    self: Micro<A, E, R>,\n    condition: LazyArg<boolean> | Micro<boolean, E2, R2>\n  ): Micro<Option.Option<A>, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, E2 = never, R2 = never>(\n    self: Micro<A, E, R>,\n    condition: LazyArg<boolean> | Micro<boolean, E2, R2>\n  ): Micro<Option.Option<A>, E | E2, R | R2> =>\n    flatMap(isMicro(condition) ? condition : sync(condition), (pass) => pass ? asSome(self) : succeed(Option.none()))\n)\n\n// ----------------------------------------------------------------------------\n// repetition\n// ----------------------------------------------------------------------------\n\n/**\n * Repeat the given `Micro` using the provided options.\n *\n * The `while` predicate will be checked after each iteration, and can use the\n * fall `MicroExit` of the effect to determine if the repetition should continue.\n *\n * @since 3.4.6\n * @experimental\n * @category repetition\n */\nexport const repeatExit: {\n  <A, E>(options: {\n    while: Predicate<MicroExit<A, E>>\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  }): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(self: Micro<A, E, R>, options: {\n    while: Predicate<MicroExit<A, E>>\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  }): Micro<A, E, R>\n} = dual(2, <A, E, R>(self: Micro<A, E, R>, options: {\n  while: Predicate<MicroExit<A, E>>\n  times?: number | undefined\n  schedule?: MicroSchedule | undefined\n}): Micro<A, E, R> =>\n  make(function(env, onExit) {\n    const startedAt = options.schedule ? Date.now() : 0\n    let attempt = 0\n    self[runSymbol](env, function loop(exit) {\n      if (options.while !== undefined && !options.while(exit)) {\n        return onExit(exit)\n      } else if (options.times !== undefined && attempt >= options.times) {\n        return onExit(exit)\n      }\n      attempt++\n      let delayEffect = yieldNow\n      if (options.schedule !== undefined) {\n        const elapsed = Date.now() - startedAt\n        const duration = options.schedule(attempt, elapsed)\n        if (Option.isNone(duration)) {\n          return onExit(exit)\n        }\n        delayEffect = sleep(duration.value)\n      }\n      delayEffect[runSymbol](env, function(exit) {\n        if (exit._tag === \"Left\") {\n          return onExit(exit as MicroExit<never, never>)\n        }\n        self[runSymbol](env, loop)\n      })\n    })\n  }))\n\n/**\n * Repeat the given `Micro` effect using the provided options. Only successful\n * results will be repeated.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nexport const repeat: {\n  <A, E>(\n    options?: {\n      while?: Predicate<A> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    options?: {\n      while?: Predicate<A> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): Micro<A, E, R>\n} = dual((args) => isMicro(args[0]), <A, E, R>(\n  self: Micro<A, E, R>,\n  options?: {\n    while?: Predicate<A> | undefined\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  } | undefined\n): Micro<A, E, R> =>\n  repeatExit(self, {\n    ...options,\n    while: (exit) => exit._tag === \"Right\" && (options?.while === undefined || options.while(exit.right))\n  }))\n\n/**\n * Repeat the given `Micro` effect forever, only stopping if the effect fails.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nexport const forever = <A, E, R>(self: Micro<A, E, R>): Micro<never, E, R> => repeat(self) as any\n\n// ----------------------------------------------------------------------------\n// scheduling\n// ----------------------------------------------------------------------------\n\n/**\n * The `MicroSchedule` type represents a function that can be used to calculate\n * the delay between repeats.\n *\n * The function takes the current attempt number and the elapsed time since the\n * first attempt, and returns the delay for the next attempt. If the function\n * returns `None`, the repetition will stop.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport type MicroSchedule = (attempt: number, elapsed: number) => Option.Option<number>\n\n/**\n * Create a `MicroSchedule` that will stop repeating after the specified number\n * of attempts.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleRecurs = (n: number): MicroSchedule => (attempt) => attempt <= n ? Option.some(0) : Option.none()\n\n/**\n * Create a `MicroSchedule` that will generate a constant delay.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleSpaced = (millis: number): MicroSchedule => () => Option.some(millis)\n\n/**\n * Create a `MicroSchedule` that will generate a delay with an exponential backoff.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleExponential = (baseMillis: number, factor = 2): MicroSchedule => (attempt) =>\n  Option.some(Math.pow(factor, attempt) * baseMillis)\n\n/**\n * Returns a new `MicroSchedule` with an added calculated delay to each delay\n * returned by this schedule.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleAddDelay: {\n  (f: () => number): (self: MicroSchedule) => MicroSchedule\n  (self: MicroSchedule, f: () => number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, f: () => number): MicroSchedule => (attempt, elapsed) =>\n    Option.map(self(attempt, elapsed), (duration) => duration + f())\n)\n\n/**\n * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n * the specified maximum.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleWithMaxDelay: {\n  (max: number): (self: MicroSchedule) => MicroSchedule\n  (self: MicroSchedule, max: number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, max: number): MicroSchedule => (attempt, elapsed) =>\n    Option.map(self(attempt, elapsed), (duration) => Math.min(duration, max))\n)\n\n/**\n * Transform a `MicroSchedule` to one that will stop repeating after the specified\n * amount of time.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleWithMaxElapsed: {\n  (max: number): (self: MicroSchedule) => MicroSchedule\n  (self: MicroSchedule, max: number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, max: number): MicroSchedule => (attempt, elapsed) =>\n    elapsed < max ? self(attempt, elapsed) : Option.none()\n)\n\n/**\n * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n * recur, using the minimum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleUnion: {\n  (that: MicroSchedule): (self: MicroSchedule) => MicroSchedule\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule => (attempt, elapsed) =>\n    Option.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.min(d1, d2))\n)\n\n/**\n * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n * recur, using the maximum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleIntersect: {\n  (that: MicroSchedule): (self: MicroSchedule) => MicroSchedule\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule => (attempt, elapsed) =>\n    Option.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.max(d1, d2))\n)\n\n// ----------------------------------------------------------------------------\n// error handling\n// ----------------------------------------------------------------------------\n\n/**\n * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n * recover from any kind of cause.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAllCause: {\n  <E, B, E2, R2>(\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2> => catchCauseIf(self, constTrue, f) as Micro<A | B, E2, R | R2>\n)\n\n/**\n * Selectively catch a `MicroCause` object of the given `Micro` effect,\n * using the provided predicate to determine if the failure should be caught.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchCauseIf: {\n  <E, B, E2, R2, EB extends MicroCause<E>>(\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (cause: EB) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, Exclude<E, MicroCause.Error<EB>> | E2, R | R2>\n  <E, B, E2, R2>(\n    predicate: Predicate<MicroCause<NoInfer<E>>>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E | E2, R | R2>\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (cause: EB) => Micro<B, E2, R2>\n  ): Micro<A | B, Exclude<E, MicroCause.Error<EB>> | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<MicroCause<NoInfer<E>>>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E | E2, R | R2>\n} = dual(3, <A, E, R, B, E2, R2>(\n  self: Micro<A, E, R>,\n  predicate: Predicate<MicroCause<E>>,\n  f: (cause: MicroCause<E>) => Micro<B, E2, R2>\n): Micro<A | B, E | E2, R | R2> =>\n  make(function(env, onExit) {\n    self[runSymbol](env, function(exit) {\n      if (exit._tag === \"Right\" || !predicate(exit.left)) {\n        onExit(exit)\n      } else {\n        f(exit.left)[runSymbol](env, onExit)\n      }\n    })\n  }))\n\n/**\n * Catch the error of the given `Micro` effect, allowing you to recover from it.\n *\n * It only catches expected (`MicroCause.Fail`) errors.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAll: {\n  <E, B, E2, R2>(\n    f: (e: NoInfer<E>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E2, R | R2>\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A | B, E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (a: NoInfer<E>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2> => catchAllCause(self, (cause) => causeIsFail(cause) ? f(cause.error) : failCause(cause))\n)\n\n/**\n * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAllDefect: {\n  <E, B, E2, R2>(\n    f: (defect: unknown) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A | B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A | B, E | E2, R | R2> =>\n    catchCauseIf(self, causeIsDie, (die) => f(die.defect))\n)\n\n/**\n * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapErrorCause: {\n  <E, B, E2, R2>(\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2> => tapErrorCauseIf(self, constTrue, f)\n)\n\n/**\n * Perform a side effect using if a `MicroCause` object matches the specified\n * predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const tapErrorCauseIf: {\n  <E, B, E2, R2, EB extends MicroCause<E>>(\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  <E, B, E2, R2>(\n    predicate: (cause: NoInfer<MicroCause<E>>) => boolean,\n    f: (a: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: (cause: NoInfer<MicroCause<E>>) => boolean,\n    f: (a: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n} = dual(\n  3,\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2> => catchCauseIf(self, refinement, (cause) => andThen(f(cause), failCause(cause)))\n)\n\n/**\n * Perform a side effect from expected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapError: {\n  <E, B, E2, R2>(\n    f: (e: NoInfer<E>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    tapErrorCauseIf(self, causeIsFail, (fail) => f(fail.error))\n)\n\n/**\n * Perform a side effect from unexpected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapDefect: {\n  <E, B, E2, R2>(\n    f: (defect: unknown) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    tapErrorCauseIf(self, causeIsDie, (die) => f(die.defect))\n)\n\n/**\n * Catch any expected errors that match the specified predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const catchIf: {\n  <E, EB extends E, A2, E2, R2>(\n    refinement: Refinement<NoInfer<E>, EB>,\n    f: (e: EB) => Micro<A2, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  <E, A2, E2, R2>(\n    predicate: Predicate<NoInfer<E>>,\n    f: (e: NoInfer<E>) => Micro<A2, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A2 | A, E | E2, R2 | R>\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E2 | Exclude<E, EB>, R | R2>\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E | E2, R | R2> =>\n    catchCauseIf(\n      self,\n      (f): f is MicroCause.Fail<E> => causeIsFail(f) && predicate(f.error),\n      (fail) => f(fail.error)\n    )\n)\n\n/**\n * Recovers from the specified tagged error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const catchTag: {\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A1 | A, E1 | Exclude<E, { _tag: K }>, R1 | R>\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n    self: Micro<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n  ): Micro<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1>\n} = dual(3, <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n  self: Micro<A, E, R>,\n  k: K,\n  f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n): Micro<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1> =>\n  catchIf(self, isTagged(k) as Refinement<E, Extract<E, { _tag: K }>>, f) as any)\n\n/**\n * Transform the full `MicroCause` object of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const mapErrorCause: {\n  <E, E2>(f: (e: MicroCause<E>) => MicroCause<E2>): <A, R>(self: Micro<A, E, R>) => Micro<A, E2, R>\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: MicroCause<E>) => MicroCause<E2>): Micro<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: MicroCause<E>) => MicroCause<E2>): Micro<A, E2, R> =>\n    catchAllCause(self, (cause) => failCause(f(cause)))\n)\n\n/**\n * Transform any expected errors of the given `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const mapError: {\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Micro<A, E, R>) => Micro<A, E2, R>\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: E) => E2): Micro<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: E) => E2): Micro<A, E2, R> => catchAll(self, (error) => fail(f(error)))\n)\n\n/**\n * Elevate any expected errors of the given `Micro` effect to unexpected errors,\n * resulting in an error type of `never`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const orDie = <A, E, R>(self: Micro<A, E, R>): Micro<A, never, R> => catchAll(self, die)\n\n/**\n * Recover from all errors by succeeding with the given value.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const orElseSucceed: {\n  <B>(f: LazyArg<B>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | B, never, R>\n  <A, E, R, B>(self: Micro<A, E, R>, f: LazyArg<B>): Micro<A | B, never, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Micro<A, E, R>, f: LazyArg<B>): Micro<A | B, never, R> => catchAll(self, (_) => sync(f))\n)\n\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const ignore = <A, E, R>(self: Micro<A, E, R>): Micro<void, never, R> =>\n  matchEffect(self, { onFailure: (_) => void_, onSuccess: (_) => void_ })\n\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const ignoreLogged = <A, E, R>(self: Micro<A, E, R>): Micro<void, never, R> =>\n  matchEffect(self, {\n    onFailure: (error) => sync(() => console.error(error)),\n    onSuccess: (_) => void_\n  })\n\n/**\n * Replace the success value of the given `Micro` effect with an `Option`,\n * wrapping the success value in `Some` and returning `None` if the effect fails\n * with an expected error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const option = <A, E, R>(self: Micro<A, E, R>): Micro<Option.Option<A>, never, R> =>\n  match(self, { onFailure: (_) => Option.none(), onSuccess: Option.some })\n\n/**\n * Replace the success value of the given `Micro` effect with an `Either`,\n * wrapping the success value in `Right` and wrapping any expected errors with\n * a `Left`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const either = <A, E, R>(self: Micro<A, E, R>): Micro<Either.Either<A, E>, never, R> =>\n  match(self, { onFailure: Either.left, onSuccess: Either.right })\n\n/**\n * Retry the given `Micro` effect using the provided options.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const retry: {\n  <A, E>(\n    options?: {\n      while?: Predicate<E> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    options?: {\n      while?: Predicate<E> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): Micro<A, E, R>\n} = dual((args) => isMicro(args[0]), <A, E, R>(\n  self: Micro<A, E, R>,\n  options?: {\n    while?: Predicate<E> | undefined\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  } | undefined\n): Micro<A, E, R> =>\n  repeatExit(self, {\n    ...options,\n    while: (exit) =>\n      exit._tag === \"Left\" && exit.left._tag === \"Fail\" &&\n      (options?.while === undefined || options.while(exit.left.error))\n  }))\n\n/**\n * Add a stack trace to any failures that occur in the effect. The trace will be\n * added to the `traces` field of the `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const withTrace: {\n  (name: string): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(self: Micro<A, E, R>, name: string): Micro<A, E, R>\n} = function() {\n  const prevLimit = globalThis.Error.stackTraceLimit\n  globalThis.Error.stackTraceLimit = 2\n  const error = new globalThis.Error()\n  globalThis.Error.stackTraceLimit = prevLimit\n  function generate(name: string, cause: MicroCause<any>) {\n    const stack = error.stack\n    if (!stack) {\n      return cause\n    }\n    const line = stack.split(\"\\n\")[2]?.trim().replace(/^at /, \"\")\n    if (!line) {\n      return cause\n    }\n    const lineMatch = line.match(/\\((.*)\\)$/)\n    return causeWithTrace(cause, `at ${name} (${lineMatch ? lineMatch[1] : line})`)\n  }\n  const f = (name: string) => (self: Micro<any, any, any>) =>\n    unsafeMakeOptions(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        onExit(exit._tag === \"Left\" ? Either.left(generate(name, exit.left)) : exit)\n      })\n    }, false)\n  if (arguments.length === 2) {\n    return f(arguments[1])(arguments[0])\n  }\n  return f(arguments[0])\n} as any\n\n// ----------------------------------------------------------------------------\n// pattern matching\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchCauseEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        try {\n          const next = exit._tag === \"Left\" ? options.onFailure(exit.left) : options.onSuccess(exit.right)\n          next[runSymbol](env, onExit)\n        } catch (err) {\n          onExit(exitDie(err))\n        }\n      })\n    })\n)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchCause: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Micro<A2 | A3, never, R>\n} = dual(\n  2,\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Micro<A2 | A3, never, R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => sync(() => options.onFailure(cause)),\n      onSuccess: (value) => sync(() => options.onSuccess(value))\n    })\n)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => cause._tag === \"Fail\" ? options.onFailure(cause.error) : failCause(cause),\n      onSuccess: options.onSuccess\n    })\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */\nexport const match: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Micro<A2 | A3, never, R>\n} = dual(\n  2,\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Micro<A2 | A3, never, R> =>\n    matchEffect(self, {\n      onFailure: (error) => sync(() => options.onFailure(error)),\n      onSuccess: (value) => sync(() => options.onSuccess(value))\n    })\n)\n\n// ----------------------------------------------------------------------------\n// delays & timeouts\n// ----------------------------------------------------------------------------\n\n/**\n * Create a `Micro` effect that will sleep for the specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const sleep = (millis: number): Micro<void> =>\n  async(function(resume) {\n    const timeout = setTimeout(function() {\n      resume(void_)\n    }, millis)\n    return sync(() => {\n      return clearTimeout(timeout)\n    })\n  })\n\n/**\n * Returns an effect that will delay the execution of this effect by the\n * specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const delay: {\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E, R> => andThen(sleep(millis), self)\n)\n\n/**\n * Returns an effect that will timeout this effect, that will execute the\n * fallback effect if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeoutOrElse: {\n  <A2, E2, R2>(options: {\n    readonly duration: number\n    readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n  }): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, options: {\n    readonly duration: number\n    readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n  }): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, options: {\n    readonly duration: number\n    readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n  }): Micro<A | A2, E | E2, R | R2> =>\n    raceFirst(self, andThen(interruptible(sleep(options.duration)), options.onTimeout))\n)\n\n/**\n * Returns an effect that will timeout this effect, that will fail with a\n * `TimeoutException` if the timeout elapses before the effect has produced a\n * value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeout: {\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | TimeoutException, R>\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E | TimeoutException, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E | TimeoutException, R> =>\n    timeoutOrElse(self, { duration: millis, onTimeout: () => fail(new TimeoutException()) })\n)\n\n/**\n * Returns an effect that will timeout this effect, succeeding with a `None`\n * if the timeout elapses before the effect has produced a value; and `Some` of\n * the produced value otherwise.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeoutOption: {\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<Option.Option<A>, E, R>\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<Option.Option<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<Option.Option<A>, E, R> =>\n    raceFirst(\n      asSome(self),\n      as(interruptible(sleep(millis)), Option.none())\n    )\n)\n\n// ----------------------------------------------------------------------------\n// resources & finalization\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const MicroScopeTypeId: unique symbol = Symbol.for(\"effect/Micro/MicroScope\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport type MicroScopeTypeId = typeof MicroScopeTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport interface MicroScope {\n  readonly [MicroScopeTypeId]: MicroScopeTypeId\n  readonly addFinalizer: (finalizer: (exit: MicroExit<unknown, unknown>) => Micro<void>) => Micro<void>\n  readonly fork: Micro<MicroScope.Closeable>\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport declare namespace MicroScope {\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  export interface Closeable extends MicroScope {\n    readonly close: (exit: MicroExit<any, any>) => Micro<void>\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const MicroScope: Context.Tag<MicroScope, MicroScope> = Context.GenericTag<MicroScope>(\"effect/Micro/MicroScope\")\n\nclass MicroScopeImpl implements MicroScope.Closeable {\n  readonly [MicroScopeTypeId]: MicroScopeTypeId\n  state: {\n    readonly _tag: \"Open\"\n    readonly finalizers: Set<(exit: MicroExit<any, any>) => Micro<void>>\n  } | {\n    readonly _tag: \"Closed\"\n    readonly exit: MicroExit<any, any>\n  } = { _tag: \"Open\", finalizers: new Set() }\n\n  constructor() {\n    this[MicroScopeTypeId] = MicroScopeTypeId\n  }\n\n  unsafeAddFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): void {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.add(finalizer)\n    }\n  }\n  addFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): Micro<void> {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        this.state.finalizers.add(finalizer)\n        return void_\n      }\n      return finalizer(this.state.exit)\n    })\n  }\n  unsafeRemoveFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): void {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.delete(finalizer)\n    }\n  }\n  close(microExit: MicroExit<any, any>): Micro<void> {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        const finalizers = Array.from(this.state.finalizers).reverse()\n        this.state = { _tag: \"Closed\", exit: microExit }\n        return flatMap(\n          forEach(finalizers, (finalizer) => exit(finalizer(microExit))),\n          (exits) => asVoid(fromExit(Either.all(exits)))\n        )\n      }\n      return void_\n    })\n  }\n  get fork() {\n    return sync(() => {\n      const newScope = new MicroScopeImpl()\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state\n        return newScope\n      }\n      function fin(exit: MicroExit<any, any>) {\n        return newScope.close(exit)\n      }\n      this.state.finalizers.add(fin)\n      newScope.unsafeAddFinalizer((_) => sync(() => this.unsafeRemoveFinalizer(fin)))\n      return newScope\n    })\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scopeMake: Micro<MicroScope.Closeable> = sync(() => new MicroScopeImpl())\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scopeUnsafeMake = (): MicroScope.Closeable => new MicroScopeImpl()\n\n/**\n * Access the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scope: Micro<MicroScope, never, MicroScope> = service(MicroScope)\n\n/**\n * Provide a `MicroScope` to an effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const provideScope: {\n  (scope: MicroScope): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, MicroScope>>\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<A, E, Exclude<R, MicroScope>>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<A, E, Exclude<R, MicroScope>> =>\n    provideService(self, MicroScope, scope)\n)\n\n/**\n * Provide a `MicroScope` to the given effect, closing it after the effect has\n * finished executing.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scoped = <A, E, R>(self: Micro<A, E, R>): Micro<A, E, Exclude<R, MicroScope>> =>\n  suspend(function() {\n    const scope = new MicroScopeImpl()\n    return onExit(provideService(self, MicroScope, scope), (exit) => scope.close(exit))\n  })\n\n/**\n * Create a resource with a cleanup `Micro` effect, ensuring the cleanup is\n * executed when the `MicroScope` is closed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const acquireRelease = <A, E, R>(\n  acquire: Micro<A, E, R>,\n  release: (a: A, exit: MicroExit<unknown, unknown>) => Micro<void>\n): Micro<A, E, R | MicroScope> =>\n  uninterruptible(flatMap(\n    scope,\n    (scope) => tap(acquire, (a) => scope.addFinalizer((exit) => release(a, exit)))\n  ))\n\n/**\n * Add a finalizer to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const addFinalizer = (\n  finalizer: (exit: MicroExit<unknown, unknown>) => Micro<void>\n): Micro<void, never, MicroScope> => flatMap(scope, (scope) => scope.addFinalizer(finalizer))\n\n/**\n * When the `Micro` effect is completed, run the given finalizer effect with the\n * `MicroExit` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onExit: {\n  <A, E, XE, XR>(\n    f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> => onExitIf(self, constTrue, f)\n)\n\n/**\n * When the `Micro` effect is completed, run the given finalizer effect if it\n * matches the specified predicate.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onExitIf: {\n  <A, E, XE, XR, B extends MicroExit<A, E>>(\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, XE, XR>(\n    predicate: Predicate<MicroExit<NoInfer<A>, NoInfer<E>>>,\n    f: (exit: MicroExit<NoInfer<A>, NoInfer<E>>) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR, B extends MicroExit<A, E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<MicroExit<NoInfer<A>, NoInfer<E>>>,\n    f: (exit: MicroExit<NoInfer<A>, NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n} = dual(\n  3,\n  <A, E, R, XE, XR, B extends MicroExit<A, E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> =>\n    uninterruptibleMask((restore) =>\n      make(function(env, onExit) {\n        restore(self)[runSymbol](env, function(exit) {\n          if (!refinement(exit)) {\n            return onExit(exit)\n          }\n          f(exit)[runSymbol](env, function(finalizerExit) {\n            if (finalizerExit._tag === \"Left\") {\n              return onExit(finalizerExit as MicroExit<never, XE>)\n            }\n            onExit(exit)\n          })\n        })\n      })\n    )\n)\n\n/**\n * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const ensuring: {\n  <XE, XR>(\n    finalizer: Micro<void, XE, XR>\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR> =>\n    onExit(self, (_) => finalizer)\n)\n\n/**\n * When the `Micro` effect fails, run the given finalizer effect with the\n * `MicroCause` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onError: {\n  <A, E, XE, XR>(\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> => onExitIf(self, exitIsFailure, (exit) => f(exit.left))\n)\n\n/**\n * If this `Micro` effect is aborted, run the finalizer effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onInterrupt: {\n  <XE, XR>(\n    finalizer: Micro<void, XE, XR>\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR> =>\n    onExitIf(self, exitIsInterrupt, (_) => finalizer)\n)\n\n/**\n * Acquire a resource, use it, and then release the resource when the `use`\n * effect has completed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const acquireUseRelease = <Resource, E, R, A, E2, R2, E3, R3>(\n  acquire: Micro<Resource, E, R>,\n  use: (a: Resource) => Micro<A, E2, R2>,\n  release: (a: Resource, exit: MicroExit<A, E2>) => Micro<void, E3, R3>\n): Micro<A, E | E2 | E3, R | R2 | R3> =>\n  uninterruptibleMask((restore) =>\n    flatMap(\n      acquire,\n      (a) =>\n        flatMap(\n          exit(restore(use(a))),\n          (exit) => andThen(release(a, exit), fromExit(exit))\n        )\n    )\n  )\n\n// ----------------------------------------------------------------------------\n// interruption\n// ----------------------------------------------------------------------------\n\n/**\n * Abort the current `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category interruption\n */\nexport const interrupt: Micro<never> = make(function(env, onExit) {\n  const controller = envGet(env, currentAbortController)\n  controller.abort()\n  onExit(exitInterrupt)\n})\n\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nexport const uninterruptible = <A, E, R>(self: Micro<A, E, R>): Micro<A, E, R> =>\n  unsafeMakeOptions(function(env, onExit) {\n    const nextEnv = envMutate(env, function(env) {\n      env[currentInterruptible.key] = false\n      env[currentAbortSignal.key] = new AbortController().signal\n      return env\n    })\n    self[runSymbol](nextEnv, onExit)\n  }, false)\n\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * You can use the `restore` function to restore a `Micro` effect to the\n * interruptibility state before the `uninterruptibleMask` was applied.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.uninterruptibleMask((restore) =>\n *   Micro.sleep(1000).pipe( // uninterruptible\n *     Micro.andThen(restore(Micro.sleep(1000))) // interruptible\n *   )\n * )\n */\nexport const uninterruptibleMask = <A, E, R>(\n  f: (restore: <A, E, R>(effect: Micro<A, E, R>) => Micro<A, E, R>) => Micro<A, E, R>\n): Micro<A, E, R> =>\n  unsafeMakeOptions((env, onExit) => {\n    const isInterruptible = envGet(env, currentInterruptible)\n    const effect = isInterruptible ? f(interruptible) : f(identity)\n    const nextEnv = isInterruptible ?\n      envMutate(env, function(env) {\n        env[currentInterruptible.key] = false\n        env[currentAbortSignal.key] = new AbortController().signal\n        return env\n      }) :\n      env\n    effect[runSymbol](nextEnv, onExit)\n  }, false)\n\n/**\n * Wrap the given `Micro` effect in an interruptible region, allowing the effect\n * to be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nexport const interruptible = <A, E, R>(self: Micro<A, E, R>): Micro<A, E, R> =>\n  make((env, onExit) => {\n    const isInterruptible = envGet(env, currentInterruptible)\n    let newEnv = env\n    if (!isInterruptible) {\n      const controller = envGet(env, currentAbortController)\n      newEnv = envMutate(env, function(env) {\n        env[currentInterruptible.key] = true\n        env[currentAbortSignal.key] = controller.signal\n        return env\n      })\n    }\n    self[runSymbol](newEnv, onExit)\n  })\n\n// ========================================================================\n// collecting & elements\n// ========================================================================\n\n/**\n * @since 3.4.0\n * @experimental\n */\nexport declare namespace All {\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type MicroAny = Micro<any, any, any>\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnIterable<T extends Iterable<MicroAny>, Discard extends boolean> = [T] extends\n    [Iterable<Micro<infer A, infer E, infer R>>] ? Micro<\n      Discard extends true ? void : Array<A>,\n      E,\n      R\n    >\n    : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnTuple<T extends ReadonlyArray<unknown>, Discard extends boolean> = Micro<\n    Discard extends true ? void\n      : T[number] extends never ? []\n      : { -readonly [K in keyof T]: T[K] extends Micro<infer _A, infer _E, infer _R> ? _A : never },\n    T[number] extends never ? never\n      : T[number] extends Micro<infer _A, infer _E, infer _R> ? _E\n      : never,\n    T[number] extends never ? never\n      : T[number] extends Micro<infer _A, infer _E, infer _R> ? _R\n      : never\n  > extends infer X ? X : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnObject<T, Discard extends boolean> = [T] extends [{ [K: string]: MicroAny }] ? Micro<\n      Discard extends true ? void :\n        { -readonly [K in keyof T]: [T[K]] extends [Micro<infer _A, infer _E, infer _R>] ? _A : never },\n      keyof T extends never ? never\n        : T[keyof T] extends Micro<infer _A, infer _E, infer _R> ? _E\n        : never,\n      keyof T extends never ? never\n        : T[keyof T] extends Micro<infer _A, infer _E, infer _R> ? _R\n        : never\n    >\n    : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type IsDiscard<A> = [Extract<A, { readonly discard: true }>] extends [never] ? false : true\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Return<\n    Arg extends Iterable<MicroAny> | Record<string, MicroAny>,\n    O extends {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard?: boolean | undefined\n    }\n  > = [Arg] extends [ReadonlyArray<MicroAny>] ? ReturnTuple<Arg, IsDiscard<O>>\n    : [Arg] extends [Iterable<MicroAny>] ? ReturnIterable<Arg, IsDiscard<O>>\n    : [Arg] extends [Record<string, MicroAny>] ? ReturnObject<Arg, IsDiscard<O>>\n    : never\n}\n\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const all = <\n  const Arg extends Iterable<Micro<any, any, any>> | Record<string, Micro<any, any, any>>,\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly discard?: boolean | undefined\n  }\n>(arg: Arg, options?: O): All.Return<Arg, O> => {\n  if (Array.isArray(arg) || isIterable(arg)) {\n    return (forEach as any)(arg, identity, options)\n  } else if (options?.discard) {\n    return (forEach as any)(Object.values(arg), identity, options)\n  }\n  return suspend(() => {\n    const out: Record<string, unknown> = {}\n    return as(\n      forEach(Object.entries(arg), ([key, effect]) =>\n        map(effect, (value) => {\n          out[key] = value\n        }), {\n        discard: true,\n        concurrency: options?.concurrency\n      }),\n      out\n    )\n  }) as any\n}\n\n/**\n * For each element of the provided iterable, run the effect and collect the results.\n *\n * If the `discard` option is set to `true`, the results will be discarded and\n * the effect will return `void`.\n *\n * The `concurrency` option can be set to control how many effects are run in\n * parallel. By default, the effects are run sequentially.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const forEach: {\n  <A, B, E, R>(iterable: Iterable<A>, f: (a: A, index: number) => Micro<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly discard?: false | undefined\n  }): Micro<Array<B>, E, R>\n  <A, B, E, R>(iterable: Iterable<A>, f: (a: A, index: number) => Micro<B, E, R>, options: {\n    readonly concurrency?: Concurrency | undefined\n    readonly discard: true\n  }): Micro<void, E, R>\n} = <\n  A,\n  B,\n  E,\n  R\n>(iterable: Iterable<A>, f: (a: A, index: number) => Micro<B, E, R>, options?: {\n  readonly concurrency?: Concurrency | undefined\n  readonly discard?: boolean | undefined\n}): Micro<any, E, R> =>\n  make(function(env, onExit) {\n    const concurrencyOption = options?.concurrency === \"inherit\"\n      ? envGet(env, currentConcurrency)\n      : options?.concurrency ?? 1\n    const concurrency = concurrencyOption === \"unbounded\"\n      ? Number.POSITIVE_INFINITY\n      : Math.max(1, concurrencyOption)\n\n    // abort\n    const [envWithSignal, onAbort] = forkSignal(env)\n\n    // iterate\n    let result: MicroExit<any, any> | undefined = undefined\n    const items = Array.from(iterable)\n    let length = items.length\n    const out: Array<B> | undefined = options?.discard ? undefined : new Array(length)\n    let index = 0\n    let inProgress = 0\n    let doneCount = 0\n    let pumping = false\n    function pump() {\n      pumping = true\n      while (inProgress < concurrency && index < length) {\n        const currentIndex = index\n        const item = items[currentIndex]\n        index++\n        inProgress++\n        try {\n          f(item, currentIndex)[runSymbol](envWithSignal, function(exit) {\n            if (exit._tag === \"Left\") {\n              if (result === undefined) {\n                result = exit\n                length = index\n                onAbort()\n              }\n            } else if (out !== undefined) {\n              out[currentIndex] = exit.right\n            }\n            doneCount++\n            inProgress--\n            if (doneCount === length) {\n              onExit(result ?? Either.right(out))\n            } else if (!pumping && inProgress < concurrency) {\n              pump()\n            }\n          })\n        } catch (err) {\n          result = exitDie(err)\n          length = index\n          onAbort()\n        }\n      }\n      pumping = false\n    }\n    pump()\n  })\n\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const filter = <A, E, R>(iterable: Iterable<A>, f: (a: NoInfer<A>) => Micro<boolean, E, R>, options?: {\n  readonly concurrency?: Concurrency | undefined\n  readonly negate?: boolean | undefined\n}): Micro<Array<A>, E, R> =>\n  filterMap(iterable, (a) =>\n    map(f(a), (pass) => {\n      pass = options?.negate ? !pass : pass\n      return pass ? Option.some(a) : Option.none()\n    }), options)\n\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const filterMap = <A, B, E, R>(\n  iterable: Iterable<A>,\n  f: (a: NoInfer<A>) => Micro<Option.Option<B>, E, R>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n  }\n): Micro<Array<B>, E, R> =>\n  suspend(() => {\n    const out: Array<B> = []\n    return as(\n      forEach(iterable, (a) =>\n        map(f(a), (o) => {\n          if (o._tag === \"Some\") {\n            out.push(o.value)\n          }\n        }), {\n        discard: true,\n        concurrency: options?.concurrency\n      }),\n      out\n    )\n  })\n\n// ----------------------------------------------------------------------------\n// do notation\n// ----------------------------------------------------------------------------\n\n/**\n * Start a do notation block.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const Do: Micro<{}> = succeed({})\n\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const bindTo: {\n  <N extends string>(name: N): <A, E, R>(self: Micro<A, E, R>) => Micro<{ [K in N]: A }, E, R>\n  <A, E, R, N extends string>(self: Micro<A, E, R>, name: N): Micro<{ [K in N]: A }, E, R>\n} = doNotation.bindTo<MicroTypeLambda>(map)\n\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const bind: {\n  <N extends string, A extends Record<string, any>, B, E2, R2>(\n    name: N,\n    f: (a: A) => Micro<B, E2, R2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E | E2, R | R2>\n  <A extends Record<string, any>, E, R, B, E2, R2, N extends string>(\n    self: Micro<A, E, R>,\n    name: N,\n    f: (a: A) => Micro<B, E2, R2>\n  ): Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E | E2, R | R2>\n} = doNotation.bind<MicroTypeLambda>(map, flatMap)\n\nconst let_: {\n  <N extends string, A extends Record<string, any>, B>(\n    name: N,\n    f: (a: A) => B\n  ): <E, R>(self: Micro<A, E, R>) => Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E, R>\n  <A extends Record<string, any>, E, R, B, N extends string>(\n    self: Micro<A, E, R>,\n    name: N,\n    f: (a: A) => B\n  ): Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E, R>\n} = doNotation.let_<MicroTypeLambda>(map)\n\nexport {\n  /**\n   * Bind the result of a synchronous computation to the given name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  let_ as let\n}\n\n// ----------------------------------------------------------------------------\n// handle & forking\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const HandleTypeId: unique symbol = Symbol.for(\"effect/Micro/Handle\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport type HandleTypeId = typeof HandleTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport interface Handle<A, E = never> {\n  readonly [HandleTypeId]: HandleTypeId\n  readonly await: Micro<MicroExit<A, E>>\n  readonly join: Micro<A, E>\n  readonly interrupt: Micro<MicroExit<A, E>>\n  readonly unsafeInterrupt: () => void\n  readonly addObserver: (observer: (exit: MicroExit<A, E>) => void) => void\n  readonly removeObserver: (observer: (exit: MicroExit<A, E>) => void) => void\n  readonly unsafePoll: () => MicroExit<A, E> | null\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const isHandle = (u: unknown): u is Handle<unknown, unknown> =>\n  typeof u === \"object\" && u !== null && HandleTypeId in u\n\nclass HandleImpl<A, E> implements Handle<A, E> {\n  readonly [HandleTypeId]: HandleTypeId\n\n  readonly observers: Set<(exit: MicroExit<A, E>) => void> = new Set()\n  private _exit: MicroExit<A, E> | undefined = undefined\n  _controller: AbortController\n  readonly isRoot: boolean\n\n  constructor(readonly parentSignal: AbortSignal, controller?: AbortController) {\n    this[HandleTypeId] = HandleTypeId\n    this.isRoot = controller !== undefined\n    this._controller = controller ?? new AbortController()\n    if (!this.isRoot) {\n      parentSignal.addEventListener(\"abort\", this.unsafeInterrupt)\n    }\n  }\n\n  unsafePoll(): MicroExit<A, E> | null {\n    return this._exit ?? null\n  }\n\n  unsafeInterrupt = () => {\n    this._controller.abort()\n  }\n\n  emit(exit: MicroExit<A, E>): void {\n    if (this._exit) {\n      return\n    }\n    this._exit = exit\n    if (!this.isRoot) {\n      this.parentSignal.removeEventListener(\"abort\", this.unsafeInterrupt)\n    }\n    this.observers.forEach((observer) => observer(exit))\n    this.observers.clear()\n  }\n\n  addObserver(observer: (exit: MicroExit<A, E>) => void): void {\n    if (this._exit) {\n      return observer(this._exit)\n    }\n    this.observers.add(observer)\n  }\n\n  removeObserver(observer: (exit: MicroExit<A, E>) => void): void {\n    this.observers.delete(observer)\n  }\n\n  get await(): Micro<MicroExit<A, E>> {\n    return suspend(() => {\n      if (this._exit) {\n        return succeed(this._exit)\n      }\n      return async((resume) => {\n        function observer(exit: MicroExit<A, E>) {\n          resume(succeed(exit))\n        }\n        this.addObserver(observer)\n        return sync(() => {\n          this.removeObserver(observer)\n        })\n      })\n    })\n  }\n\n  get join(): Micro<A, E> {\n    return flatMap(this.await, fromExit)\n  }\n\n  get interrupt(): Micro<MicroExit<A, E>> {\n    return suspend(() => {\n      this.unsafeInterrupt()\n      return this.await\n    })\n  }\n}\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * When the parent `Micro` finishes, this `Micro` will be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const fork = <A, E, R>(self: Micro<A, E, R>): Micro<Handle<A, E>, never, R> =>\n  make(function(env, onExit) {\n    const signal = envGet(env, currentAbortSignal)\n    const handle = new HandleImpl<A, E>(signal)\n    const nextEnv = envMutate(env, (map) => {\n      map[currentAbortController.key] = handle._controller\n      map[currentAbortSignal.key] = handle._controller.signal\n      return map\n    })\n    envGet(env, currentScheduler).scheduleTask(() => {\n      self[runSymbol](nextEnv, (exit) => {\n        handle.emit(exit)\n      })\n    }, 0)\n    onExit(Either.right(handle))\n  })\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * It will not be aborted when the parent `Micro` finishes.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkDaemon = <A, E, R>(self: Micro<A, E, R>): Micro<Handle<A, E>, never, R> =>\n  make(function(env, onExit) {\n    const controller = new AbortController()\n    const handle = new HandleImpl<A, E>(controller.signal, controller)\n    const nextEnv = envMutate(env, (map) => {\n      map[currentAbortController.key] = controller\n      map[currentAbortSignal.key] = controller.signal\n      return map\n    })\n    envGet(env, currentScheduler).scheduleTask(() => {\n      self[runSymbol](nextEnv, (exit) => {\n        handle.emit(exit)\n      })\n    }, 0)\n    onExit(Either.right(handle))\n  })\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the provided `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkIn: {\n  (scope: MicroScope): <A, E, R>(self: Micro<A, E, R>) => Micro<Handle<A, E>, never, R>\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<Handle<A, E>, never, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<Handle<A, E>, never, R> =>\n    uninterruptibleMask((restore) =>\n      flatMap(scope.fork, (scope) =>\n        tap(\n          restore(forkDaemon(onExit(self, (exit) => scope.close(exit)))),\n          (fiber) => scope.addFinalizer((_) => asVoid(fiber.interrupt))\n        ))\n    )\n)\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkScoped = <A, E, R>(self: Micro<A, E, R>): Micro<Handle<A, E>, never, R | MicroScope> =>\n  flatMap(scope, (scope) => forkIn(self, scope))\n\n// ----------------------------------------------------------------------------\n// execution\n// ----------------------------------------------------------------------------\n\n/**\n * Execute the `Micro` effect and return a `Handle` that can be awaited, joined,\n * or aborted.\n *\n * You can listen for the result by adding an observer using the handle's\n * `addObserver` method.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * const handle = Micro.succeed(42).pipe(\n *   Micro.delay(1000),\n *   Micro.runFork\n * )\n *\n * handle.addObserver((exit) => {\n *   console.log(exit)\n * })\n */\nexport const runFork = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Handle<A, E> => {\n  const controller = new AbortController()\n  const refs = Object.create(null)\n  refs[currentAbortController.key] = controller\n  refs[currentAbortSignal.key] = controller.signal\n  refs[currentScheduler.key] = options?.scheduler ?? new MicroSchedulerDefault()\n  const env = envMake(refs)\n  const handle = new HandleImpl<A, E>(controller.signal, controller)\n  effect[runSymbol](envSet(env, currentAbortSignal, handle._controller.signal), (exit) => {\n    handle.emit(exit)\n    if (options?.signal) {\n      options.signal.removeEventListener(\"abort\", handle.unsafeInterrupt)\n    }\n  })\n  if (options?.signal) {\n    if (options.signal.aborted) {\n      handle.unsafeInterrupt()\n    } else {\n      options.signal.addEventListener(\"abort\", handle.unsafeInterrupt, { once: true })\n    }\n  }\n  return handle\n}\n\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * `MicroExit` of the computation.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nexport const runPromiseExit = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Promise<MicroExit<A, E>> =>\n  new Promise((resolve, _reject) => {\n    const handle = runFork(effect, options)\n    handle.addObserver(resolve)\n  })\n\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * successful value of the computation.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runPromise = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Promise<A> =>\n  runPromiseExit(effect, options).then((exit) => {\n    if (exit._tag === \"Left\") {\n      throw exit.left\n    }\n    return exit.right\n  })\n\n/**\n * Attempt to execute the `Micro` effect synchronously and return the `MicroExit`.\n *\n * If any asynchronous effects are encountered, the function will return a\n * `CauseDie` containing the `Handle`.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nexport const runSyncExit = <A, E>(effect: Micro<A, E>): MicroExit<A, E> => {\n  const scheduler = new MicroSchedulerDefault()\n  const handle = runFork(effect, { scheduler })\n  scheduler.flush()\n  const exit = handle.unsafePoll()\n  if (exit === null) {\n    return exitDie(handle)\n  }\n  return exit\n}\n\n/**\n * Attempt to execute the `Micro` effect synchronously and return the success\n * value.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runSync = <A, E>(effect: Micro<A, E>): A => {\n  const exit = runSyncExit(effect)\n  if (exit._tag === \"Left\") {\n    throw exit.left\n  }\n  return exit.right\n}\n\n// ----------------------------------------------------------------------------\n// Errors\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport interface YieldableError extends Pipeable, Inspectable, Readonly<Error> {\n  readonly [EffectTypeId]: Effect.VarianceStruct<never, this, never>\n  readonly [StreamTypeId]: Stream.VarianceStruct<never, this, never>\n  readonly [SinkTypeId]: Sink.VarianceStruct<never, unknown, never, this, never>\n  readonly [ChannelTypeId]: Channel.VarianceStruct<never, unknown, this, unknown, never, unknown, never>\n  readonly [TypeId]: Micro.Variance<never, this, never>\n  readonly [runSymbol]: (env: Env<any>, onExit: (exit: MicroExit<never, this>) => void) => void\n  [Symbol.iterator](): MicroIterator<Micro<never, this, never>>\n}\n\nconst YieldableError: new(message?: string) => YieldableError = (function() {\n  class YieldableError extends globalThis.Error {\n    [runSymbol](_env: any, onExit: any) {\n      onExit(exitFail(this))\n    }\n    toString() {\n      return this.message ? `${this.name}: ${this.message}` : this.name\n    }\n    toJSON() {\n      return { ...this }\n    }\n    [NodeInspectSymbol](): string {\n      const stack = this.stack\n      if (stack) {\n        return `${this.toString()}\\n${stack.split(\"\\n\").slice(1).join(\"\\n\")}`\n      }\n      return this.toString()\n    }\n  }\n  Object.assign(YieldableError.prototype, MicroProto, StructuralPrototype)\n  return YieldableError as any\n})()\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport const Error: new<A extends Record<string, any> = {}>(\n  args: Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => YieldableError & Readonly<A> = (function() {\n  return class extends YieldableError {\n    constructor(args: any) {\n      super()\n      if (args) {\n        Object.assign(this, args)\n      }\n    }\n  } as any\n})()\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport const TaggedError = <Tag extends string>(tag: Tag): new<A extends Record<string, any> = {}>(\n  args: Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" ? never : P]: A[P] }\n) => YieldableError & { readonly _tag: Tag } & Readonly<A> => {\n  class Base extends Error<{}> {\n    readonly _tag = tag\n  }\n  ;(Base.prototype as any).name = tag\n  return Base as any\n}\n\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nexport class NoSuchElementException extends TaggedError(\"NoSuchElementException\")<{ message?: string | undefined }> {}\n\n/**\n * Represents a checked exception which occurs when a timeout occurs.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nexport class TimeoutException extends TaggedError(\"TimeoutException\") {}\n", "/**\n * @since 2.0.0\n */\n\nimport type { Effect } from \"./Effect.js\"\nimport type { RuntimeFiber } from \"./Fiber.js\"\nimport type { FiberRef } from \"./FiberRef.js\"\nimport { dual } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport * as core from \"./internal/core.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Task = () => void\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Scheduler {\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false\n  scheduleTask(task: Task, priority: number): void\n}\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport class PriorityBuckets<in out T = Task> {\n  /**\n   * @since 2.0.0\n   */\n  public buckets: Array<[number, Array<T>]> = []\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: T, priority: number) {\n    const length = this.buckets.length\n    let bucket: [number, Array<T>] | undefined = undefined\n    let index = 0\n    for (; index < length; index++) {\n      if (this.buckets[index][0] <= priority) {\n        bucket = this.buckets[index]\n      } else {\n        break\n      }\n    }\n    if (bucket && bucket[0] === priority) {\n      bucket[1].push(task)\n    } else if (index === length) {\n      this.buckets.push([priority, [task]])\n    } else {\n      this.buckets.splice(index, 0, [priority, [task]])\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class MixedScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  running = false\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  constructor(\n    /**\n     * @since 2.0.0\n     */\n    readonly maxNextTickBeforeTimer: number\n  ) {}\n\n  /**\n   * @since 2.0.0\n   */\n  private starveInternal(depth: number) {\n    const tasks = this.tasks.buckets\n    this.tasks.buckets = []\n    for (const [_, toRun] of tasks) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n    if (this.tasks.buckets.length === 0) {\n      this.running = false\n    } else {\n      this.starve(depth)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  private starve(depth = 0) {\n    if (depth >= this.maxNextTickBeforeTimer) {\n      setTimeout(() => this.starveInternal(0), 0)\n    } else {\n      Promise.resolve(void 0).then(() => this.starveInternal(depth + 1))\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    this.tasks.scheduleTask(task, priority)\n    if (!this.running) {\n      this.running = true\n      this.starve()\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category schedulers\n */\nexport const defaultScheduler: Scheduler = globalValue(\n  Symbol.for(\"effect/Scheduler/defaultScheduler\"),\n  () => new MixedScheduler(2048)\n)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class SyncScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  /**\n   * @since 2.0.0\n   */\n  deferred = false\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    if (this.deferred) {\n      defaultScheduler.scheduleTask(task, priority)\n    } else {\n      this.tasks.scheduleTask(task, priority)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  flush() {\n    while (this.tasks.buckets.length > 0) {\n      const tasks = this.tasks.buckets\n      this.tasks.buckets = []\n      for (const [_, toRun] of tasks) {\n        for (let i = 0; i < toRun.length; i++) {\n          toRun[i]()\n        }\n      }\n    }\n    this.deferred = true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class ControlledScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  /**\n   * @since 2.0.0\n   */\n  deferred = false\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    if (this.deferred) {\n      defaultScheduler.scheduleTask(task, priority)\n    } else {\n      this.tasks.scheduleTask(task, priority)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  step() {\n    const tasks = this.tasks.buckets\n    this.tasks.buckets = []\n    for (const [_, toRun] of tasks) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeMatrix = (...record: Array<[number, Scheduler]>): Scheduler => {\n  const index = record.sort(([p0], [p1]) => p0 < p1 ? -1 : p0 > p1 ? 1 : 0)\n  return {\n    shouldYield(fiber) {\n      for (const scheduler of record) {\n        const priority = scheduler[1].shouldYield(fiber)\n        if (priority !== false) {\n          return priority\n        }\n      }\n      return false\n    },\n    scheduleTask(task, priority) {\n      let scheduler: Scheduler | undefined = undefined\n      for (const i of index) {\n        if (priority >= i[0]) {\n          scheduler = i[1]\n        } else {\n          return (scheduler ?? defaultScheduler).scheduleTask(task, priority)\n        }\n      }\n      return (scheduler ?? defaultScheduler).scheduleTask(task, priority)\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category utilities\n */\nexport const defaultShouldYield: Scheduler[\"shouldYield\"] = (fiber) => {\n  return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n    ? fiber.getFiberRef(core.currentSchedulingPriority)\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = (\n  scheduleTask: Scheduler[\"scheduleTask\"],\n  shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield\n): Scheduler => ({\n  scheduleTask,\n  shouldYield\n})\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeBatched = (\n  callback: (runBatch: () => void) => void,\n  shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield\n) => {\n  let running = false\n  const tasks = new PriorityBuckets()\n  const starveInternal = () => {\n    const tasksToRun = tasks.buckets\n    tasks.buckets = []\n    for (const [_, toRun] of tasksToRun) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n    if (tasks.buckets.length === 0) {\n      running = false\n    } else {\n      starve()\n    }\n  }\n\n  const starve = () => callback(starveInternal)\n\n  return make((task, priority) => {\n    tasks.scheduleTask(task, priority)\n    if (!running) {\n      running = true\n      starve()\n    }\n  }, shouldYield)\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const timer = (ms: number, shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield) =>\n  make((task) => setTimeout(task, ms), shouldYield)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const timerBatched = (ms: number, shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield) =>\n  makeBatched((task) => setTimeout(task, ms), shouldYield)\n\n/** @internal */\nexport const currentScheduler: FiberRef<Scheduler> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentScheduler\"),\n  () => core.fiberRefUnsafeMake(defaultScheduler)\n)\n\n/** @internal */\nexport const withScheduler = dual<\n  (scheduler: Scheduler) => <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>,\n  <A, E, R>(self: Effect<A, E, R>, scheduler: Scheduler) => Effect<A, E, R>\n>(2, (self, scheduler) => core.fiberRefLocally(self, currentScheduler, scheduler))\n", "import { globalValue } from \"../GlobalValue.js\"\nimport type * as Request from \"../Request.js\"\nimport { fiberRefUnsafeMake } from \"./core.js\"\n\n/** @internal */\nexport const currentRequestMap = globalValue(\n  Symbol.for(\"effect/FiberRef/currentRequestMap\"),\n  () => fiberRefUnsafeMake(new Map<any, Request.Entry<any>>())\n)\n", "import type { Effect } from \"../Effect.js\"\nimport type { Concurrency } from \"../Types.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nexport const match = <A, E, R>(\n  concurrency: Concurrency | undefined,\n  sequential: () => Effect<A, E, R>,\n  unbounded: () => Effect<A, E, R>,\n  bounded: (limit: number) => Effect<A, E, R>\n): Effect<A, E, R> => {\n  switch (concurrency) {\n    case undefined:\n      return sequential()\n    case \"unbounded\":\n      return unbounded()\n    case \"inherit\":\n      return core.fiberRefGetWith(\n        core.currentConcurrency,\n        (concurrency) =>\n          concurrency === \"unbounded\" ?\n            unbounded() :\n            concurrency > 1 ?\n            bounded(concurrency) :\n            sequential()\n      )\n    default:\n      return concurrency > 1 ? bounded(concurrency) : sequential()\n  }\n}\n\n/** @internal */\nexport const matchSimple = <A, E, R>(\n  concurrency: Concurrency | undefined,\n  sequential: () => Effect<A, E, R>,\n  concurrent: () => Effect<A, E, R>\n): Effect<A, E, R> => {\n  switch (concurrency) {\n    case undefined:\n      return sequential()\n    case \"unbounded\":\n      return concurrent()\n    case \"inherit\":\n      return core.fiberRefGetWith(\n        core.currentConcurrency,\n        (concurrency) =>\n          concurrency === \"unbounded\" || concurrency > 1 ?\n            concurrent() :\n            sequential()\n      )\n    default:\n      return concurrency > 1 ? concurrent() : sequential()\n  }\n}\n", "import type * as Cause from \"../Cause.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as FiberStatus from \"../FiberStatus.js\"\nimport type * as FiberRuntime from \"./fiberRuntime.js\"\n\n/** @internal */\nexport type FiberMessage = InterruptSignal | Stateful | Resume | YieldNow\n\n/** @internal */\nexport const OP_INTERRUPT_SIGNAL = \"InterruptSignal\" as const\n\n/** @internal */\nexport type OP_INTERRUPT_SIGNAL = typeof OP_INTERRUPT_SIGNAL\n\n/** @internal */\nexport const OP_STATEFUL = \"Stateful\" as const\n\n/** @internal */\nexport type OP_STATEFUL = typeof OP_STATEFUL\n\n/** @internal */\nexport const OP_RESUME = \"Resume\" as const\n\n/** @internal */\nexport type OP_RESUME = typeof OP_RESUME\n\n/** @internal */\nexport const OP_YIELD_NOW = \"YieldNow\" as const\n\n/** @internal */\nexport type OP_YIELD_NOW = typeof OP_YIELD_NOW\n\n/** @internal */\nexport interface InterruptSignal {\n  readonly _tag: OP_INTERRUPT_SIGNAL\n  readonly cause: Cause.Cause<never>\n}\n\n/** @internal */\nexport interface Stateful {\n  readonly _tag: OP_STATEFUL\n  onFiber(fiber: FiberRuntime.FiberRuntime<any, any>, status: FiberStatus.FiberStatus): void\n}\n\n/** @internal */\nexport interface Resume {\n  readonly _tag: OP_RESUME\n  readonly effect: Effect.Effect<any, any, any>\n}\n\n/** @internal */\nexport interface YieldNow {\n  readonly _tag: OP_YIELD_NOW\n}\n\n/** @internal */\nexport const interruptSignal = (cause: Cause.Cause<never>): FiberMessage => ({\n  _tag: OP_INTERRUPT_SIGNAL,\n  cause\n})\n\n/** @internal */\nexport const stateful = (\n  onFiber: (\n    fiber: FiberRuntime.FiberRuntime<any, any>,\n    status: FiberStatus.FiberStatus\n  ) => void\n): FiberMessage => ({\n  _tag: OP_STATEFUL,\n  onFiber\n})\n\n/** @internal */\nexport const resume = (effect: Effect.Effect<any, any, any>): FiberMessage => ({\n  _tag: OP_RESUME,\n  effect\n})\n\n/** @internal */\nexport const yieldNow = (): FiberMessage => ({\n  _tag: OP_YIELD_NOW\n})\n", "import * as FiberId from \"../FiberId.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as FiberMessage from \"./fiberMessage.js\"\nimport type * as FiberRuntime from \"./fiberRuntime.js\"\nimport * as _runtimeFlags from \"./runtimeFlags.js\"\n\n/** @internal */\nconst FiberScopeSymbolKey = \"effect/FiberScope\"\n\n/** @internal */\nexport const FiberScopeTypeId = Symbol.for(FiberScopeSymbolKey)\n\nexport type FiberScopeTypeId = typeof FiberScopeTypeId\n\n/**\n * A `FiberScope` represents the scope of a fiber lifetime. The scope of a\n * fiber can be retrieved using `Effect.descriptor`, and when forking fibers,\n * you can specify a custom scope to fork them on by using the `forkIn`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface FiberScope {\n  readonly [FiberScopeTypeId]: FiberScopeTypeId\n  get fiberId(): FiberId.FiberId\n  add(runtimeFlags: RuntimeFlags.RuntimeFlags, child: FiberRuntime.FiberRuntime<any, any>): void\n}\n\n/** @internal */\nclass Global implements FiberScope {\n  readonly [FiberScopeTypeId]: FiberScopeTypeId = FiberScopeTypeId\n  readonly fiberId = FiberId.none\n  readonly roots = new Set<FiberRuntime.FiberRuntime<any, any>>()\n  add(_runtimeFlags: RuntimeFlags.RuntimeFlags, child: FiberRuntime.FiberRuntime<any, any>): void {\n    this.roots.add(child)\n    child.addObserver(() => {\n      this.roots.delete(child)\n    })\n  }\n}\n\n/** @internal */\nclass Local implements FiberScope {\n  readonly [FiberScopeTypeId]: FiberScopeTypeId = FiberScopeTypeId\n  constructor(\n    readonly fiberId: FiberId.FiberId,\n    readonly parent: FiberRuntime.FiberRuntime<any, any>\n  ) {\n  }\n  add(_runtimeFlags: RuntimeFlags.RuntimeFlags, child: FiberRuntime.FiberRuntime<any, any>): void {\n    this.parent.tell(\n      FiberMessage.stateful((parentFiber) => {\n        parentFiber.addChild(child)\n        child.addObserver(() => {\n          parentFiber.removeChild(child)\n        })\n      })\n    )\n  }\n}\n\n/** @internal */\nexport const unsafeMake = (fiber: FiberRuntime.FiberRuntime<any, any>): FiberScope => {\n  return new Local(fiber.id(), fiber)\n}\n\n/** @internal */\nexport const globalScope = globalValue(\n  Symbol.for(\"effect/FiberScope/Global\"),\n  () => new Global()\n)\n", "import type * as Cause from \"../Cause.js\"\nimport * as Clock from \"../Clock.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport * as FiberStatus from \"../FiberStatus.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as number from \"../Number.js\"\nimport * as Option from \"../Option.js\"\nimport * as order from \"../Order.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport * as core from \"./core.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as runtimeFlags from \"./runtimeFlags.js\"\n\n/** @internal */\nconst FiberSymbolKey = \"effect/Fiber\"\n\n/** @internal */\nexport const FiberTypeId: Fiber.FiberTypeId = Symbol.for(\n  FiberSymbolKey\n) as Fiber.FiberTypeId\n\n/** @internal */\nexport const fiberVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\n/** @internal */\nconst fiberProto = {\n  [FiberTypeId]: fiberVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nconst RuntimeFiberSymbolKey = \"effect/Fiber\"\n\n/** @internal */\nexport const RuntimeFiberTypeId: Fiber.RuntimeFiberTypeId = Symbol.for(\n  RuntimeFiberSymbolKey\n) as Fiber.RuntimeFiberTypeId\n\n/** @internal */\nexport const Order: order.Order<Fiber.RuntimeFiber<unknown, unknown>> = pipe(\n  order.tuple(number.Order, number.Order),\n  order.mapInput((fiber: Fiber.RuntimeFiber<unknown, unknown>) =>\n    [\n      (fiber.id() as FiberId.Runtime).startTimeMillis,\n      (fiber.id() as FiberId.Runtime).id\n    ] as const\n  )\n)\n\n/** @internal */\nexport const isFiber = (u: unknown): u is Fiber.Fiber<unknown, unknown> => hasProperty(u, FiberTypeId)\n\n/** @internal */\nexport const isRuntimeFiber = <A, E>(self: Fiber.Fiber<A, E>): self is Fiber.RuntimeFiber<A, E> =>\n  RuntimeFiberTypeId in self\n\n/** @internal */\nexport const _await = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Exit.Exit<A, E>> => self.await\n\n/** @internal */\nexport const children = <A, E>(\n  self: Fiber.Fiber<A, E>\n): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> => self.children\n\n/** @internal */\nexport const done = <A, E>(exit: Exit.Exit<A, E>): Fiber.Fiber<A, E> => ({\n  ...fiberProto,\n  id: () => FiberId.none,\n  await: core.succeed(exit),\n  children: core.succeed([]),\n  inheritAll: core.void,\n  poll: core.succeed(Option.some(exit)),\n  interruptAsFork: () => core.void\n})\n\n/** @internal */\nexport const dump = <A, E>(self: Fiber.RuntimeFiber<A, E>): Effect.Effect<Fiber.Fiber.Dump> =>\n  core.map(self.status, (status) => ({ id: self.id(), status }))\n\n/** @internal */\nexport const dumpAll = (\n  fibers: Iterable<Fiber.RuntimeFiber<unknown, unknown>>\n): Effect.Effect<Array<Fiber.Fiber.Dump>> => core.forEachSequential(fibers, dump)\n\n/** @internal */\nexport const fail = <E>(error: E): Fiber.Fiber<never, E> => done(Exit.fail(error))\n\n/** @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Fiber.Fiber<never, E> => done(Exit.failCause(cause))\n\n/** @internal */\nexport const fromEffect = <A, E>(effect: Effect.Effect<A, E>): Effect.Effect<Fiber.Fiber<A, E>> =>\n  core.map(core.exit(effect), done)\n\n/** @internal */\nexport const id = <A, E>(self: Fiber.Fiber<A, E>): FiberId.FiberId => self.id()\n\n/** @internal */\nexport const inheritAll = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<void> => self.inheritAll\n\n/** @internal */\nexport const interrupted = (fiberId: FiberId.FiberId): Fiber.Fiber<never> => done(Exit.interrupt(fiberId))\n\n/** @internal */\nexport const interruptAll = (fibers: Iterable<Fiber.Fiber<any, any>>): Effect.Effect<void> =>\n  core.flatMap(core.fiberId, (fiberId) => pipe(fibers, interruptAllAs(fiberId)))\n\n/** @internal */\nexport const interruptAllAs = dual<\n  (fiberId: FiberId.FiberId) => (fibers: Iterable<Fiber.Fiber<any, any>>) => Effect.Effect<void>,\n  (fibers: Iterable<Fiber.Fiber<any, any>>, fiberId: FiberId.FiberId) => Effect.Effect<void>\n>(2, (fibers, fiberId) =>\n  pipe(\n    core.forEachSequentialDiscard(fibers, interruptAsFork(fiberId)),\n    core.zipRight(pipe(fibers, core.forEachSequentialDiscard(_await)))\n  ))\n\n/** @internal */\nexport const interruptAsFork = dual<\n  (fiberId: FiberId.FiberId) => <A, E>(self: Fiber.Fiber<A, E>) => Effect.Effect<void>,\n  <A, E>(self: Fiber.Fiber<A, E>, fiberId: FiberId.FiberId) => Effect.Effect<void>\n>(2, (self, fiberId) => self.interruptAsFork(fiberId))\n\n/** @internal */\nexport const join = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<A, E> =>\n  core.zipLeft(core.flatten(self.await), self.inheritAll)\n\n/** @internal */\nexport const map = dual<\n  <A, B>(f: (a: A) => B) => <E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<B, E>,\n  <A, E, B>(self: Fiber.Fiber<A, E>, f: (a: A) => B) => Fiber.Fiber<B, E>\n>(2, (self, f) => mapEffect(self, (a) => core.sync(() => f(a))))\n\n/** @internal */\nexport const mapEffect = dual<\n  <A, A2, E2>(f: (a: A) => Effect.Effect<A2, E2>) => <E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<A2, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, f: (a: A) => Effect.Effect<A2, E2>) => Fiber.Fiber<A2, E | E2>\n>(2, (self, f) => ({\n  ...fiberProto,\n  id: () => self.id(),\n  await: core.flatMap(self.await, Exit.forEachEffect(f)),\n  children: self.children,\n  inheritAll: self.inheritAll,\n  poll: core.flatMap(self.poll, (result) => {\n    switch (result._tag) {\n      case \"None\":\n        return core.succeed(Option.none())\n      case \"Some\":\n        return pipe(\n          Exit.forEachEffect(result.value, f),\n          core.map(Option.some)\n        )\n    }\n  }),\n  interruptAsFork: (id) => self.interruptAsFork(id)\n}))\n\n/** @internal */\nexport const mapFiber = dual<\n  <E, E2, A, B>(\n    f: (a: A) => Fiber.Fiber<B, E2>\n  ) => (self: Fiber.Fiber<A, E>) => Effect.Effect<Fiber.Fiber<B, E | E2>>,\n  <A, E, E2, B>(\n    self: Fiber.Fiber<A, E>,\n    f: (a: A) => Fiber.Fiber<B, E2>\n  ) => Effect.Effect<Fiber.Fiber<B, E | E2>>\n>(2, <A, E, E2, B>(\n  self: Fiber.Fiber<A, E>,\n  f: (a: A) => Fiber.Fiber<B, E2>\n) =>\n  core.map(\n    self.await,\n    Exit.match({\n      onFailure: (cause): Fiber.Fiber<B, E | E2> => failCause(cause),\n      onSuccess: (a) => f(a)\n    })\n  ))\n\n/** @internal */\nexport const match = dual<\n  <A, E, Z>(\n    options: {\n      readonly onFiber: (fiber: Fiber.Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: Fiber.RuntimeFiber<A, E>) => Z\n    }\n  ) => (self: Fiber.Fiber<A, E>) => Z,\n  <A, E, Z>(\n    self: Fiber.Fiber<A, E>,\n    options: {\n      readonly onFiber: (fiber: Fiber.Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: Fiber.RuntimeFiber<A, E>) => Z\n    }\n  ) => Z\n>(2, (self, { onFiber, onRuntimeFiber }) => {\n  if (isRuntimeFiber(self)) {\n    return onRuntimeFiber(self)\n  }\n  return onFiber(self)\n})\n\n/** @internal */\nexport const never: Fiber.Fiber<never> = {\n  ...fiberProto,\n  id: () => FiberId.none,\n  await: core.never,\n  children: core.succeed([]),\n  inheritAll: core.never,\n  poll: core.succeed(Option.none()),\n  interruptAsFork: () => core.never\n}\n\n/** @internal */\nexport const orElse = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<A | A2, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<A | A2, E | E2>\n>(2, (self, that) => ({\n  ...fiberProto,\n  id: () => FiberId.getOrElse(self.id(), that.id()),\n  await: core.zipWith(\n    self.await,\n    that.await,\n    (exit1, exit2) => (Exit.isSuccess(exit1) ? exit1 : exit2)\n  ),\n  children: self.children,\n  inheritAll: core.zipRight(that.inheritAll, self.inheritAll),\n  poll: core.zipWith(\n    self.poll,\n    that.poll,\n    (option1, option2) => {\n      switch (option1._tag) {\n        case \"None\": {\n          return Option.none()\n        }\n        case \"Some\": {\n          return Exit.isSuccess(option1.value) ? option1 : option2\n        }\n      }\n    }\n  ),\n  interruptAsFork: (id) =>\n    pipe(\n      core.interruptAsFiber(self, id),\n      core.zipRight(pipe(that, core.interruptAsFiber(id))),\n      core.asVoid\n    )\n}))\n\n/** @internal */\nexport const orElseEither = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<Either.Either<A2, A>, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<Either.Either<A2, A>, E | E2>\n>(2, (self, that) => orElse(map(self, Either.left), map(that, Either.right)))\n\n/** @internal */\nexport const poll = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Option.Option<Exit.Exit<A, E>>> => self.poll\n\n// forked from https://github.com/sindresorhus/parse-ms/blob/4da2ffbdba02c6e288c08236695bdece0adca173/index.js\n// MIT License\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n/** @internal */\nconst parseMs = (milliseconds: number) => {\n  const roundTowardsZero = milliseconds > 0 ? Math.floor : Math.ceil\n  return {\n    days: roundTowardsZero(milliseconds / 86400000),\n    hours: roundTowardsZero(milliseconds / 3600000) % 24,\n    minutes: roundTowardsZero(milliseconds / 60000) % 60,\n    seconds: roundTowardsZero(milliseconds / 1000) % 60,\n    milliseconds: roundTowardsZero(milliseconds) % 1000,\n    microseconds: roundTowardsZero(milliseconds * 1000) % 1000,\n    nanoseconds: roundTowardsZero(milliseconds * 1e6) % 1000\n  }\n}\n\n/** @internal */\nconst renderStatus = (status: FiberStatus.FiberStatus): string => {\n  if (FiberStatus.isDone(status)) {\n    return \"Done\"\n  }\n  if (FiberStatus.isRunning(status)) {\n    return \"Running\"\n  }\n\n  const isInterruptible = runtimeFlags.interruptible(status.runtimeFlags) ?\n    \"interruptible\" :\n    \"uninterruptible\"\n  return `Suspended(${isInterruptible})`\n}\n\n/** @internal */\nexport const pretty = <A, E>(self: Fiber.RuntimeFiber<A, E>): Effect.Effect<string> =>\n  core.flatMap(Clock.currentTimeMillis, (now) =>\n    core.map(dump(self), (dump) => {\n      const time = now - dump.id.startTimeMillis\n      const { days, hours, milliseconds, minutes, seconds } = parseMs(time)\n      const lifeMsg = (days === 0 ? \"\" : `${days}d`) +\n        (days === 0 && hours === 0 ? \"\" : `${hours}h`) +\n        (days === 0 && hours === 0 && minutes === 0 ? \"\" : `${minutes}m`) +\n        (days === 0 && hours === 0 && minutes === 0 && seconds === 0 ? \"\" : `${seconds}s`) +\n        `${milliseconds}ms`\n      const waitMsg = FiberStatus.isSuspended(dump.status) ?\n        (() => {\n          const ids = FiberId.ids(dump.status.blockingOn)\n          return HashSet.size(ids) > 0\n            ? `waiting on ` + Array.from(ids).map((id) => `${id}`).join(\", \")\n            : \"\"\n        })() :\n        \"\"\n      const statusMsg = renderStatus(dump.status)\n      return `[Fiber](#${dump.id.id}) (${lifeMsg}) ${waitMsg}\\n   Status: ${statusMsg}`\n    }))\n\n/** @internal */\nexport const unsafeRoots = (): Array<Fiber.RuntimeFiber<any, any>> => Array.from(fiberScope.globalScope.roots)\n\n/** @internal */\nexport const roots: Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> = core.sync(unsafeRoots)\n\n/** @internal */\nexport const status = <A, E>(self: Fiber.RuntimeFiber<A, E>): Effect.Effect<FiberStatus.FiberStatus> => self.status\n\n/** @internal */\nexport const succeed = <A>(value: A): Fiber.Fiber<A> => done(Exit.succeed(value))\n\nconst void_: Fiber.Fiber<void> = succeed(void 0)\nexport {\n  /** @internal */\n  void_ as void\n}\n\n/** @internal */\nexport const currentFiberURI = \"effect/FiberCurrent\"\n\n/** @internal */\nexport const getCurrentFiber = (): Option.Option<Fiber.RuntimeFiber<any, any>> =>\n  Option.fromNullable((globalThis as any)[currentFiberURI])\n", "import * as Arr from \"../Array.js\"\nimport * as Context from \"../Context.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constVoid, dual, pipe } from \"../Function.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport * as List from \"../List.js\"\nimport type * as Logger from \"../Logger.js\"\nimport type * as LogLevel from \"../LogLevel.js\"\nimport * as LogSpan from \"../LogSpan.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Cause from \"./cause.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport { consoleTag } from \"./defaultServices/console.js\"\nimport * as _fiberId from \"./fiberId.js\"\n\n/** @internal */\nconst LoggerSymbolKey = \"effect/Logger\"\n\n/** @internal */\nexport const LoggerTypeId: Logger.LoggerTypeId = Symbol.for(\n  LoggerSymbolKey\n) as Logger.LoggerTypeId\n\nconst loggerVariance = {\n  /* c8 ignore next */\n  _Message: (_: unknown) => _,\n  /* c8 ignore next */\n  _Output: (_: never) => _\n}\n\n/** @internal */\nexport const makeLogger = <Message, Output>(\n  log: (options: Logger.Logger.Options<Message>) => Output\n): Logger.Logger<Message, Output> => ({\n  [LoggerTypeId]: loggerVariance,\n  log,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/** @internal */\nexport const mapInput = dual<\n  <Message, Message2>(\n    f: (message: Message2) => Message\n  ) => <Output>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message2, Output>,\n  <Output, Message, Message2>(\n    self: Logger.Logger<Message, Output>,\n    f: (message: Message2) => Message\n  ) => Logger.Logger<Message2, Output>\n>(2, (self, f) =>\n  makeLogger(\n    (options) => self.log({ ...options, message: f(options.message) })\n  ))\n\n/** @internal */\nexport const mapInputOptions = dual<\n  <Message, Message2>(\n    f: (options: Logger.Logger.Options<Message2>) => Logger.Logger.Options<Message>\n  ) => <Output>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message2, Output>,\n  <Output, Message, Message2>(\n    self: Logger.Logger<Message, Output>,\n    f: (options: Logger.Logger.Options<Message2>) => Logger.Logger.Options<Message>\n  ) => Logger.Logger<Message2, Output>\n>(2, (self, f) => makeLogger((options) => self.log(f(options))))\n\n/** @internal */\nexport const filterLogLevel = dual<\n  (\n    f: (logLevel: LogLevel.LogLevel) => boolean\n  ) => <Message, Output>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message, Option.Option<Output>>,\n  <Message, Output>(\n    self: Logger.Logger<Message, Output>,\n    f: (logLevel: LogLevel.LogLevel) => boolean\n  ) => Logger.Logger<Message, Option.Option<Output>>\n>(2, (self, f) =>\n  makeLogger((options) =>\n    f(options.logLevel)\n      ? Option.some(self.log(options))\n      : Option.none()\n  ))\n\n/** @internal */\nexport const map = dual<\n  <Output, Output2>(\n    f: (output: Output) => Output2\n  ) => <Message>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message, Output2>,\n  <Message, Output, Output2>(\n    self: Logger.Logger<Message, Output>,\n    f: (output: Output) => Output2\n  ) => Logger.Logger<Message, Output2>\n>(2, (self, f) => makeLogger((options) => f(self.log(options))))\n\n/** @internal */\nexport const none: Logger.Logger<unknown, void> = {\n  [LoggerTypeId]: loggerVariance,\n  log: constVoid,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as Logger.Logger<unknown, void>\n\n/** @internal */\nexport const simple = <A, B>(log: (a: A) => B): Logger.Logger<A, B> => ({\n  [LoggerTypeId]: loggerVariance,\n  log: ({ message }) => log(message),\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/** @internal */\nexport const succeed = <A>(value: A): Logger.Logger<unknown, A> => {\n  return simple(() => value)\n}\n\n/** @internal */\nexport const sync = <A>(evaluate: LazyArg<A>): Logger.Logger<unknown, A> => {\n  return simple(evaluate)\n}\n\n/** @internal */\nexport const zip = dual<\n  <Message2, Output2>(\n    that: Logger.Logger<Message2, Output2>\n  ) => <Message, Output>(\n    self: Logger.Logger<Message, Output>\n  ) => Logger.Logger<Message & Message2, [Output, Output2]>,\n  <Message, Output, Message2, Output2>(\n    self: Logger.Logger<Message, Output>,\n    that: Logger.Logger<Message2, Output2>\n  ) => Logger.Logger<Message & Message2, [Output, Output2]>\n>(2, (self, that) => makeLogger((options) => [self.log(options), that.log(options)]))\n\n/** @internal */\nexport const zipLeft = dual<\n  <Message2, Output2>(\n    that: Logger.Logger<Message2, Output2>\n  ) => <Message, Output>(\n    self: Logger.Logger<Message, Output>\n  ) => Logger.Logger<Message & Message2, Output>,\n  <Message, Output, Message2, Output2>(\n    self: Logger.Logger<Message, Output>,\n    that: Logger.Logger<Message2, Output2>\n  ) => Logger.Logger<Message & Message2, Output>\n>(2, (self, that) => map(zip(self, that), (tuple) => tuple[0]))\n\n/** @internal */\nexport const zipRight = dual<\n  <Message2, Output2>(\n    that: Logger.Logger<Message2, Output2>\n  ) => <Message, Output>(\n    self: Logger.Logger<Message, Output>\n  ) => Logger.Logger<Message & Message2, Output2>,\n  <Message, Output, Message2, Output2>(\n    self: Logger.Logger<Message, Output>,\n    that: Logger.Logger<Message2, Output2>\n  ) => Logger.Logger<Message & Message2, Output2>\n>(2, (self, that) => map(zip(self, that), (tuple) => tuple[1]))\n\n/** @internal */\nexport const stringLogger: Logger.Logger<unknown, string> = makeLogger(\n  ({ annotations, cause, date, fiberId, logLevel, message, spans }) => {\n    const nowMillis = date.getTime()\n\n    const outputArray = [\n      `timestamp=${date.toISOString()}`,\n      `level=${logLevel.label}`,\n      `fiber=${_fiberId.threadName(fiberId)}`\n    ]\n\n    let output = outputArray.join(\" \")\n\n    const messageArr = Arr.ensure(message)\n    for (let i = 0; i < messageArr.length; i++) {\n      const stringMessage = Inspectable.toStringUnknown(messageArr[i])\n      if (stringMessage.length > 0) {\n        output = output + \" message=\"\n        output = appendQuoted(stringMessage, output)\n      }\n    }\n\n    if (cause != null && cause._tag !== \"Empty\") {\n      output = output + \" cause=\"\n      output = appendQuoted(Cause.pretty(cause, { renderErrorCause: true }), output)\n    }\n\n    if (List.isCons(spans)) {\n      output = output + \" \"\n\n      let first = true\n      for (const span of spans) {\n        if (first) {\n          first = false\n        } else {\n          output = output + \" \"\n        }\n        output = output + pipe(span, LogSpan.render(nowMillis))\n      }\n    }\n\n    if (HashMap.size(annotations) > 0) {\n      output = output + \" \"\n\n      let first = true\n      for (const [key, value] of annotations) {\n        if (first) {\n          first = false\n        } else {\n          output = output + \" \"\n        }\n        output = output + filterKeyName(key)\n        output = output + \"=\"\n        output = appendQuoted(Inspectable.toStringUnknown(value), output)\n      }\n    }\n\n    return output\n  }\n)\n\n/** @internal */\nconst escapeDoubleQuotes = (str: string) => `\"${str.replace(/\\\\([\\s\\S])|(\")/g, \"\\\\$1$2\")}\"`\n\nconst textOnly = /^[^\\s\"=]+$/\n\n/** @internal */\nconst appendQuoted = (label: string, output: string): string =>\n  output + (label.match(textOnly) ? label : escapeDoubleQuotes(label))\n\n/** @internal */\nexport const logfmtLogger = makeLogger<unknown, string>(\n  ({ annotations, cause, date, fiberId, logLevel, message, spans }) => {\n    const nowMillis = date.getTime()\n\n    const outputArray = [\n      `timestamp=${date.toISOString()}`,\n      `level=${logLevel.label}`,\n      `fiber=${_fiberId.threadName(fiberId)}`\n    ]\n\n    let output = outputArray.join(\" \")\n\n    const messageArr = Arr.ensure(message)\n    for (let i = 0; i < messageArr.length; i++) {\n      const stringMessage = Inspectable.toStringUnknown(messageArr[i], 0)\n      if (stringMessage.length > 0) {\n        output = output + \" message=\"\n        output = appendQuotedLogfmt(stringMessage, output)\n      }\n    }\n\n    if (cause != null && cause._tag !== \"Empty\") {\n      output = output + \" cause=\"\n      output = appendQuotedLogfmt(Cause.pretty(cause, { renderErrorCause: true }), output)\n    }\n\n    if (List.isCons(spans)) {\n      output = output + \" \"\n\n      let first = true\n      for (const span of spans) {\n        if (first) {\n          first = false\n        } else {\n          output = output + \" \"\n        }\n        output = output + pipe(span, renderLogSpanLogfmt(nowMillis))\n      }\n    }\n\n    if (HashMap.size(annotations) > 0) {\n      output = output + \" \"\n\n      let first = true\n      for (const [key, value] of annotations) {\n        if (first) {\n          first = false\n        } else {\n          output = output + \" \"\n        }\n        output = output + filterKeyName(key)\n        output = output + \"=\"\n        output = appendQuotedLogfmt(Inspectable.toStringUnknown(value, 0), output)\n      }\n    }\n\n    return output\n  }\n)\n\n/** @internal */\nexport const structuredLogger = makeLogger<unknown, {\n  readonly logLevel: string\n  readonly fiberId: string\n  readonly timestamp: string\n  readonly message: unknown\n  readonly cause: string | undefined\n  readonly annotations: Record<string, unknown>\n  readonly spans: Record<string, number>\n}>(\n  ({ annotations, cause, date, fiberId, logLevel, message, spans }) => {\n    const now = date.getTime()\n    const annotationsObj: Record<string, unknown> = {}\n    const spansObj: Record<string, number> = {}\n\n    if (HashMap.size(annotations) > 0) {\n      for (const [k, v] of annotations) {\n        annotationsObj[k] = structuredMessage(v)\n      }\n    }\n\n    if (List.isCons(spans)) {\n      for (const span of spans) {\n        spansObj[span.label] = now - span.startTime\n      }\n    }\n\n    const messageArr = Arr.ensure(message)\n    return {\n      message: messageArr.length === 1 ? structuredMessage(messageArr[0]) : messageArr.map(structuredMessage),\n      logLevel: logLevel.label,\n      timestamp: date.toISOString(),\n      cause: Cause.isEmpty(cause) ? undefined : Cause.pretty(cause, { renderErrorCause: true }),\n      annotations: annotationsObj,\n      spans: spansObj,\n      fiberId: _fiberId.threadName(fiberId)\n    }\n  }\n)\n\nexport const structuredMessage = (u: unknown): unknown => {\n  switch (typeof u) {\n    case \"bigint\":\n    case \"function\":\n    case \"symbol\": {\n      return String(u)\n    }\n    default: {\n      return u\n    }\n  }\n}\n\n/** @internal */\nexport const jsonLogger = map(structuredLogger, Inspectable.stringifyCircular)\n\n/** @internal */\nconst filterKeyName = (key: string) => key.replace(/[\\s=\"]/g, \"_\")\n\n/** @internal */\nconst escapeDoubleQuotesLogfmt = (str: string) => JSON.stringify(str)\n\n/** @internal */\nconst appendQuotedLogfmt = (label: string, output: string): string =>\n  output + (label.match(textOnly) ? label : escapeDoubleQuotesLogfmt(label))\n\n/** @internal */\nconst renderLogSpanLogfmt = (now: number) => (self: LogSpan.LogSpan): string => {\n  const label = filterKeyName(self.label)\n  return `${label}=${now - self.startTime}ms`\n}\n\n/** @internal */\nexport const isLogger = (u: unknown): u is Logger.Logger<unknown, unknown> => {\n  return typeof u === \"object\" && u != null && LoggerTypeId in u\n}\n\nconst withColor = (text: string, ...colors: ReadonlyArray<string>) => {\n  let out = \"\"\n  for (let i = 0; i < colors.length; i++) {\n    out += `\\x1b[${colors[i]}m`\n  }\n  return out + text + \"\\x1b[0m\"\n}\nconst withColorNoop = (text: string, ..._colors: ReadonlyArray<string>) => text\nconst colors = {\n  bold: \"1\",\n  red: \"31\",\n  green: \"32\",\n  yellow: \"33\",\n  blue: \"34\",\n  cyan: \"36\",\n  white: \"37\",\n  gray: \"90\",\n  black: \"30\",\n  bgBrightRed: \"101\"\n} as const\n\nconst logLevelColors: Record<LogLevel.LogLevel[\"_tag\"], ReadonlyArray<string>> = {\n  None: [],\n  All: [],\n  Trace: [colors.gray],\n  Debug: [colors.blue],\n  Info: [colors.green],\n  Warning: [colors.yellow],\n  Error: [colors.red],\n  Fatal: [colors.bgBrightRed, colors.black]\n}\nconst logLevelStyle: Record<LogLevel.LogLevel[\"_tag\"], string> = {\n  None: \"\",\n  All: \"\",\n  Trace: \"color:gray\",\n  Debug: \"color:blue\",\n  Info: \"color:green\",\n  Warning: \"color:orange\",\n  Error: \"color:red\",\n  Fatal: \"background-color:red;color:white\"\n}\n\nconst defaultDateFormat = (date: Date): string =>\n  `${date.getHours().toString().padStart(2, \"0\")}:${date.getMinutes().toString().padStart(2, \"0\")}:${\n    date.getSeconds().toString().padStart(2, \"0\")\n  }.${date.getMilliseconds().toString().padStart(3, \"0\")}`\n\nconst processStdoutIsTTY = typeof process === \"object\" &&\n  process !== null &&\n  typeof process.stdout === \"object\" &&\n  process.stdout !== null &&\n  process.stdout.isTTY === true\nconst hasWindow = typeof window === \"object\"\nconst isWorker = typeof self === \"object\" &&\n  self !== null &&\n  typeof self.constructor === \"function\" &&\n  self.constructor.name.includes(\"Worker\")\n\n/** @internal */\nexport const prettyLogger = (options?: {\n  readonly colors?: \"auto\" | boolean | undefined\n  readonly stderr?: boolean | undefined\n  readonly formatDate?: ((date: Date) => string) | undefined\n  readonly mode?: \"browser\" | \"tty\" | \"auto\" | undefined\n}) => {\n  const mode_ = options?.mode ?? \"auto\"\n  const mode = mode_ === \"auto\" ? (hasWindow || isWorker ? \"browser\" : \"tty\") : mode_\n  const isBrowser = mode === \"browser\"\n  const showColors = typeof options?.colors === \"boolean\" ? options.colors : processStdoutIsTTY || isBrowser\n  const formatDate = options?.formatDate ?? defaultDateFormat\n  return isBrowser\n    ? prettyLoggerBrowser({ colors: showColors, formatDate })\n    : prettyLoggerTty({ colors: showColors, formatDate, stderr: options?.stderr === true })\n}\n\nconst prettyLoggerTty = (options: {\n  readonly colors: boolean\n  readonly stderr: boolean\n  readonly formatDate: (date: Date) => string\n}) => {\n  const processIsBun = typeof process === \"object\" && \"isBun\" in process && process.isBun === true\n  const color = options.colors && processStdoutIsTTY ? withColor : withColorNoop\n  return makeLogger<unknown, void>(\n    ({ annotations, cause, context, date, fiberId, logLevel, message: message_, spans }) => {\n      const services = FiberRefs.getOrDefault(context, defaultServices.currentServices)\n      const console = Context.get(services, consoleTag).unsafe\n      const log = options.stderr === true ? console.error : console.log\n\n      const message = Arr.ensure(message_)\n\n      let firstLine = color(`[${options.formatDate(date)}]`, colors.white)\n        + ` ${color(logLevel.label, ...logLevelColors[logLevel._tag])}`\n        + ` (${_fiberId.threadName(fiberId)})`\n\n      if (List.isCons(spans)) {\n        const now = date.getTime()\n        const render = renderLogSpanLogfmt(now)\n        for (const span of spans) {\n          firstLine += \" \" + render(span)\n        }\n      }\n\n      firstLine += \":\"\n      let messageIndex = 0\n      if (message.length > 0) {\n        const firstMaybeString = structuredMessage(message[0])\n        if (typeof firstMaybeString === \"string\") {\n          firstLine += \" \" + color(firstMaybeString, colors.bold, colors.cyan)\n          messageIndex++\n        }\n      }\n\n      log(firstLine)\n      if (!processIsBun) console.group()\n\n      if (!Cause.isEmpty(cause)) {\n        log(Cause.pretty(cause, { renderErrorCause: true }))\n      }\n\n      if (messageIndex < message.length) {\n        for (; messageIndex < message.length; messageIndex++) {\n          log(message[messageIndex])\n        }\n      }\n\n      if (HashMap.size(annotations) > 0) {\n        for (const [key, value] of annotations) {\n          log(color(`${key}:`, colors.bold, colors.white), value)\n        }\n      }\n\n      if (!processIsBun) console.groupEnd()\n    }\n  )\n}\n\nconst prettyLoggerBrowser = (options: {\n  readonly colors: boolean\n  readonly formatDate: (date: Date) => string\n}) => {\n  const color = options.colors ? \"%c\" : \"\"\n  return makeLogger<unknown, void>(\n    ({ annotations, cause, context, date, fiberId, logLevel, message: message_, spans }) => {\n      const services = FiberRefs.getOrDefault(context, defaultServices.currentServices)\n      const console = Context.get(services, consoleTag).unsafe\n      const message = Arr.ensure(message_)\n\n      let firstLine = `${color}[${options.formatDate(date)}]`\n      const firstParams = []\n      if (options.colors) {\n        firstParams.push(\"color:gray\")\n      }\n      firstLine += ` ${color}${logLevel.label}${color} (${_fiberId.threadName(fiberId)})`\n      if (options.colors) {\n        firstParams.push(logLevelStyle[logLevel._tag], \"\")\n      }\n      if (List.isCons(spans)) {\n        const now = date.getTime()\n        const render = renderLogSpanLogfmt(now)\n        for (const span of spans) {\n          firstLine += \" \" + render(span)\n        }\n      }\n\n      firstLine += \":\"\n\n      let messageIndex = 0\n      if (message.length > 0) {\n        const firstMaybeString = structuredMessage(message[0])\n        if (typeof firstMaybeString === \"string\") {\n          firstLine += ` ${color}${firstMaybeString}`\n          if (options.colors) {\n            firstParams.push(\"color:deepskyblue\")\n          }\n          messageIndex++\n        }\n      }\n\n      console.groupCollapsed(firstLine, ...firstParams)\n\n      if (!Cause.isEmpty(cause)) {\n        console.error(Cause.pretty(cause, { renderErrorCause: true }))\n      }\n\n      if (messageIndex < message.length) {\n        for (; messageIndex < message.length; messageIndex++) {\n          console.log(message[messageIndex])\n        }\n      }\n\n      if (HashMap.size(annotations) > 0) {\n        for (const [key, value] of annotations) {\n          if (options.colors) {\n            console.log(`%c${key}:`, \"color:gray\", value)\n          } else {\n            console.log(`${key}:`, value)\n          }\n        }\n      }\n\n      console.groupEnd()\n    }\n  )\n}\n", "import * as Arr from \"../../Array.js\"\nimport * as Chunk from \"../../Chunk.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricBoundaries from \"../../MetricBoundaries.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricBoundariesSymbolKey = \"effect/MetricBoundaries\"\n\n/** @internal */\nexport const MetricBoundariesTypeId: MetricBoundaries.MetricBoundariesTypeId = Symbol.for(\n  MetricBoundariesSymbolKey\n) as MetricBoundaries.MetricBoundariesTypeId\n\n/** @internal */\nclass MetricBoundariesImpl implements MetricBoundaries.MetricBoundaries {\n  readonly [MetricBoundariesTypeId]: MetricBoundaries.MetricBoundariesTypeId = MetricBoundariesTypeId\n  constructor(readonly values: ReadonlyArray<number>) {\n    this._hash = pipe(\n      Hash.string(MetricBoundariesSymbolKey),\n      Hash.combine(Hash.array(this.values))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](u: unknown): boolean {\n    return isMetricBoundaries(u) && Equal.equals(this.values, u.values)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isMetricBoundaries = (u: unknown): u is MetricBoundaries.MetricBoundaries =>\n  hasProperty(u, MetricBoundariesTypeId)\n\n/** @internal */\nexport const fromIterable = (iterable: Iterable<number>): MetricBoundaries.MetricBoundaries => {\n  const values = pipe(\n    iterable,\n    Arr.appendAll(Chunk.of(Number.POSITIVE_INFINITY)),\n    Arr.dedupe\n  )\n  return new MetricBoundariesImpl(values)\n}\n\n/** @internal */\nexport const linear = (options: {\n  readonly start: number\n  readonly width: number\n  readonly count: number\n}): MetricBoundaries.MetricBoundaries =>\n  pipe(\n    Arr.makeBy(options.count - 1, (i) => options.start + i * options.width),\n    Chunk.unsafeFromArray,\n    fromIterable\n  )\n\n/** @internal */\nexport const exponential = (options: {\n  readonly start: number\n  readonly factor: number\n  readonly count: number\n}): MetricBoundaries.MetricBoundaries =>\n  pipe(\n    Arr.makeBy(options.count - 1, (i) => options.start * Math.pow(options.factor, i)),\n    Chunk.unsafeFromArray,\n    fromIterable\n  )\n", "import * as Duration from \"../../Duration.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricBoundaries from \"../../MetricBoundaries.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricKeyTypeSymbolKey = \"effect/MetricKeyType\"\n\n/** @internal */\nexport const MetricKeyTypeTypeId: MetricKeyType.MetricKeyTypeTypeId = Symbol.for(\n  MetricKeyTypeSymbolKey\n) as MetricKeyType.MetricKeyTypeTypeId\n\n/** @internal */\nconst CounterKeyTypeSymbolKey = \"effect/MetricKeyType/Counter\"\n\n/** @internal */\nexport const CounterKeyTypeTypeId: MetricKeyType.CounterKeyTypeTypeId = Symbol.for(\n  CounterKeyTypeSymbolKey\n) as MetricKeyType.CounterKeyTypeTypeId\n\n/** @internal */\nconst FrequencyKeyTypeSymbolKey = \"effect/MetricKeyType/Frequency\"\n\n/** @internal */\nexport const FrequencyKeyTypeTypeId: MetricKeyType.FrequencyKeyTypeTypeId = Symbol.for(\n  FrequencyKeyTypeSymbolKey\n) as MetricKeyType.FrequencyKeyTypeTypeId\n\n/** @internal */\nconst GaugeKeyTypeSymbolKey = \"effect/MetricKeyType/Gauge\"\n\n/** @internal */\nexport const GaugeKeyTypeTypeId: MetricKeyType.GaugeKeyTypeTypeId = Symbol.for(\n  GaugeKeyTypeSymbolKey\n) as MetricKeyType.GaugeKeyTypeTypeId\n\n/** @internal */\nconst HistogramKeyTypeSymbolKey = \"effect/MetricKeyType/Histogram\"\n\n/** @internal */\nexport const HistogramKeyTypeTypeId: MetricKeyType.HistogramKeyTypeTypeId = Symbol.for(\n  HistogramKeyTypeSymbolKey\n) as MetricKeyType.HistogramKeyTypeTypeId\n\n/** @internal */\nconst SummaryKeyTypeSymbolKey = \"effect/MetricKeyType/Summary\"\n\n/** @internal */\nexport const SummaryKeyTypeTypeId: MetricKeyType.SummaryKeyTypeTypeId = Symbol.for(\n  SummaryKeyTypeSymbolKey\n) as MetricKeyType.SummaryKeyTypeTypeId\n\nconst metricKeyTypeVariance = {\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _Out: (_: never) => _\n}\n\n/** @internal */\nclass CounterKeyType<A extends (number | bigint)> implements MetricKeyType.MetricKeyType.Counter<A> {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [CounterKeyTypeTypeId]: MetricKeyType.CounterKeyTypeTypeId = CounterKeyTypeTypeId\n  constructor(readonly incremental: boolean, readonly bigint: boolean) {\n    this._hash = Hash.string(CounterKeyTypeSymbolKey)\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isCounterKey(that)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst FrequencyKeyTypeHash = Hash.string(FrequencyKeyTypeSymbolKey)\n\n/** @internal */\nclass FrequencyKeyType implements MetricKeyType.MetricKeyType.Frequency {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [FrequencyKeyTypeTypeId]: MetricKeyType.FrequencyKeyTypeTypeId = FrequencyKeyTypeTypeId\n  constructor(readonly preregisteredWords: ReadonlyArray<string>) {}\n  [Hash.symbol](): number {\n    return FrequencyKeyTypeHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFrequencyKey(that)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst GaugeKeyTypeHash = Hash.string(GaugeKeyTypeSymbolKey)\n\n/** @internal */\nclass GaugeKeyType<A extends (number | bigint)> implements MetricKeyType.MetricKeyType.Gauge<A> {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [GaugeKeyTypeTypeId]: MetricKeyType.GaugeKeyTypeTypeId = GaugeKeyTypeTypeId\n  constructor(readonly bigint: boolean) {}\n  [Hash.symbol](): number {\n    return GaugeKeyTypeHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isGaugeKey(that)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport class HistogramKeyType implements MetricKeyType.MetricKeyType.Histogram {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [HistogramKeyTypeTypeId]: MetricKeyType.HistogramKeyTypeTypeId = HistogramKeyTypeTypeId\n  constructor(readonly boundaries: MetricBoundaries.MetricBoundaries) {\n    this._hash = pipe(\n      Hash.string(HistogramKeyTypeSymbolKey),\n      Hash.combine(Hash.hash(this.boundaries))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isHistogramKey(that) && Equal.equals(this.boundaries, that.boundaries)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nclass SummaryKeyType implements MetricKeyType.MetricKeyType.Summary {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [SummaryKeyTypeTypeId]: MetricKeyType.SummaryKeyTypeTypeId = SummaryKeyTypeTypeId\n  constructor(\n    readonly maxAge: Duration.Duration,\n    readonly maxSize: number,\n    readonly error: number,\n    readonly quantiles: ReadonlyArray<number>\n  ) {\n    this._hash = pipe(\n      Hash.string(SummaryKeyTypeSymbolKey),\n      Hash.combine(Hash.hash(this.maxAge)),\n      Hash.combine(Hash.hash(this.maxSize)),\n      Hash.combine(Hash.hash(this.error)),\n      Hash.combine(Hash.array(this.quantiles))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isSummaryKey(that) &&\n      Equal.equals(this.maxAge, that.maxAge) &&\n      this.maxSize === that.maxSize &&\n      this.error === that.error &&\n      Equal.equals(this.quantiles, that.quantiles)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const counter: <A extends number | bigint>(options?: {\n  readonly bigint: boolean\n  readonly incremental: boolean\n}) => CounterKeyType<A> = (options) =>\n  new CounterKeyType(\n    options?.incremental ?? false,\n    options?.bigint ?? false\n  )\n\n/** @internal */\nexport const frequency = (options?: {\n  readonly preregisteredWords?: ReadonlyArray<string> | undefined\n}): MetricKeyType.MetricKeyType.Frequency => new FrequencyKeyType(options?.preregisteredWords ?? [])\n\n/** @internal */\nexport const gauge: <A extends number | bigint>(options?: {\n  readonly bigint: boolean\n}) => GaugeKeyType<A> = (options) =>\n  new GaugeKeyType(\n    options?.bigint ?? false\n  )\n\n/** @internal */\nexport const histogram = (boundaries: MetricBoundaries.MetricBoundaries): MetricKeyType.MetricKeyType.Histogram => {\n  return new HistogramKeyType(boundaries)\n}\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n  }\n): MetricKeyType.MetricKeyType.Summary => {\n  return new SummaryKeyType(Duration.decode(options.maxAge), options.maxSize, options.error, options.quantiles)\n}\n\n/** @internal */\nexport const isMetricKeyType = (u: unknown): u is MetricKeyType.MetricKeyType<unknown, unknown> =>\n  hasProperty(u, MetricKeyTypeTypeId)\n\n/** @internal */\nexport const isCounterKey = (u: unknown): u is MetricKeyType.MetricKeyType.Counter<number | bigint> =>\n  hasProperty(u, CounterKeyTypeTypeId)\n\n/** @internal */\nexport const isFrequencyKey = (u: unknown): u is MetricKeyType.MetricKeyType.Frequency =>\n  hasProperty(u, FrequencyKeyTypeTypeId)\n\n/** @internal */\nexport const isGaugeKey = (u: unknown): u is MetricKeyType.MetricKeyType.Gauge<number | bigint> =>\n  hasProperty(u, GaugeKeyTypeTypeId)\n\n/** @internal */\nexport const isHistogramKey = (u: unknown): u is MetricKeyType.MetricKeyType.Histogram =>\n  hasProperty(u, HistogramKeyTypeTypeId)\n\n/** @internal */\nexport const isSummaryKey = (u: unknown): u is MetricKeyType.MetricKeyType.Summary =>\n  hasProperty(u, SummaryKeyTypeTypeId)\n", "import * as Arr from \"../../Array.js\"\nimport type * as Duration from \"../../Duration.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricBoundaries from \"../../MetricBoundaries.js\"\nimport type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport type * as MetricLabel from \"../../MetricLabel.js\"\nimport * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\nimport * as metricKeyType from \"./keyType.js\"\nimport * as metricLabel from \"./label.js\"\n\n/** @internal */\nconst MetricKeySymbolKey = \"effect/MetricKey\"\n\n/** @internal */\nexport const MetricKeyTypeId: MetricKey.MetricKeyTypeId = Symbol.for(\n  MetricKeySymbolKey\n) as MetricKey.MetricKeyTypeId\n\nconst metricKeyVariance = {\n  /* c8 ignore next */\n  _Type: (_: never) => _\n}\n\nconst arrayEquivilence = Arr.getEquivalence(Equal.equals)\n\n/** @internal */\nclass MetricKeyImpl<out Type extends MetricKeyType.MetricKeyType<any, any>> implements MetricKey.MetricKey<Type> {\n  readonly [MetricKeyTypeId] = metricKeyVariance\n  constructor(\n    readonly name: string,\n    readonly keyType: Type,\n    readonly description: Option.Option<string>,\n    readonly tags: ReadonlyArray<MetricLabel.MetricLabel> = []\n  ) {\n    this._hash = pipe(\n      Hash.string(this.name + this.description),\n      Hash.combine(Hash.hash(this.keyType)),\n      Hash.combine(Hash.array(this.tags))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](u: unknown): boolean {\n    return isMetricKey(u) &&\n      this.name === u.name &&\n      Equal.equals(this.keyType, u.keyType) &&\n      Equal.equals(this.description, u.description) &&\n      arrayEquivilence(this.tags, u.tags)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isMetricKey = (u: unknown): u is MetricKey.MetricKey<MetricKeyType.MetricKeyType<unknown, unknown>> =>\n  hasProperty(u, MetricKeyTypeId)\n\n/** @internal */\nexport const counter: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n    readonly incremental?: boolean | undefined\n  }): MetricKey.MetricKey.Counter<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n    readonly incremental?: boolean | undefined\n  }): MetricKey.MetricKey.Counter<bigint>\n} = (name: string, options) =>\n  new MetricKeyImpl(\n    name,\n    metricKeyType.counter(options as any),\n    Option.fromNullable(options?.description)\n  )\n\n/** @internal */\nexport const frequency = (name: string, options?: {\n  readonly description?: string | undefined\n  readonly preregisteredWords?: ReadonlyArray<string> | undefined\n}): MetricKey.MetricKey.Frequency =>\n  new MetricKeyImpl(name, metricKeyType.frequency(options), Option.fromNullable(options?.description))\n\n/** @internal */\nexport const gauge: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n  }): MetricKey.MetricKey.Gauge<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n  }): MetricKey.MetricKey.Gauge<bigint>\n} = (name, options) =>\n  new MetricKeyImpl(\n    name,\n    metricKeyType.gauge(options as any),\n    Option.fromNullable(options?.description)\n  )\n\n/** @internal */\nexport const histogram = (\n  name: string,\n  boundaries: MetricBoundaries.MetricBoundaries,\n  description?: string\n): MetricKey.MetricKey.Histogram =>\n  new MetricKeyImpl(\n    name,\n    metricKeyType.histogram(boundaries),\n    Option.fromNullable(description)\n  )\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly name: string\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n    readonly description?: string | undefined\n  }\n): MetricKey.MetricKey.Summary =>\n  new MetricKeyImpl(\n    options.name,\n    metricKeyType.summary(options),\n    Option.fromNullable(options.description)\n  )\n\n/** @internal */\nexport const tagged = dual<\n  (\n    key: string,\n    value: string\n  ) => <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>\n  ) => MetricKey.MetricKey<Type>,\n  <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>,\n    key: string,\n    value: string\n  ) => MetricKey.MetricKey<Type>\n>(3, (self, key, value) => taggedWithLabels(self, [metricLabel.make(key, value)]))\n\n/** @internal */\nexport const taggedWithLabels = dual<\n  (\n    extraTags: ReadonlyArray<MetricLabel.MetricLabel>\n  ) => <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>\n  ) => MetricKey.MetricKey<Type>,\n  <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>,\n    extraTags: ReadonlyArray<MetricLabel.MetricLabel>\n  ) => MetricKey.MetricKey<Type>\n>(2, (self, extraTags) =>\n  extraTags.length === 0\n    ? self\n    : new MetricKeyImpl(self.name, self.keyType, self.description, Arr.union(self.tags, extraTags)))\n", "import * as Arr from \"../../Array.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricState from \"../../MetricState.js\"\nimport type * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricStateSymbolKey = \"effect/MetricState\"\n\n/** @internal */\nexport const MetricStateTypeId: MetricState.MetricStateTypeId = Symbol.for(\n  MetricStateSymbolKey\n) as MetricState.MetricStateTypeId\n\n/** @internal */\nconst CounterStateSymbolKey = \"effect/MetricState/Counter\"\n\n/** @internal */\nexport const CounterStateTypeId: MetricState.CounterStateTypeId = Symbol.for(\n  CounterStateSymbolKey\n) as MetricState.CounterStateTypeId\n\n/** @internal */\nconst FrequencyStateSymbolKey = \"effect/MetricState/Frequency\"\n\n/** @internal */\nexport const FrequencyStateTypeId: MetricState.FrequencyStateTypeId = Symbol.for(\n  FrequencyStateSymbolKey\n) as MetricState.FrequencyStateTypeId\n\n/** @internal */\nconst GaugeStateSymbolKey = \"effect/MetricState/Gauge\"\n\n/** @internal */\nexport const GaugeStateTypeId: MetricState.GaugeStateTypeId = Symbol.for(\n  GaugeStateSymbolKey\n) as MetricState.GaugeStateTypeId\n\n/** @internal */\nconst HistogramStateSymbolKey = \"effect/MetricState/Histogram\"\n\n/** @internal */\nexport const HistogramStateTypeId: MetricState.HistogramStateTypeId = Symbol.for(\n  HistogramStateSymbolKey\n) as MetricState.HistogramStateTypeId\n\n/** @internal */\nconst SummaryStateSymbolKey = \"effect/MetricState/Summary\"\n\n/** @internal */\nexport const SummaryStateTypeId: MetricState.SummaryStateTypeId = Symbol.for(\n  SummaryStateSymbolKey\n) as MetricState.SummaryStateTypeId\n\nconst metricStateVariance = {\n  /* c8 ignore next */\n  _A: (_: unknown) => _\n}\n\n/** @internal */\nclass CounterState<A extends (number | bigint)> implements MetricState.MetricState.Counter<A> {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [CounterStateTypeId]: MetricState.CounterStateTypeId = CounterStateTypeId\n  constructor(readonly count: A) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(CounterStateSymbolKey),\n      Hash.combine(Hash.hash(this.count)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isCounterState(that) && this.count === that.count\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst arrayEquals = Arr.getEquivalence(Equal.equals)\n\n/** @internal */\nclass FrequencyState implements MetricState.MetricState.Frequency {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [FrequencyStateTypeId]: MetricState.FrequencyStateTypeId = FrequencyStateTypeId\n  constructor(readonly occurrences: ReadonlyMap<string, number>) {}\n  _hash: number | undefined;\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.string(FrequencyStateSymbolKey),\n      Hash.combine(Hash.array(Arr.fromIterable(this.occurrences.entries()))),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFrequencyState(that) && arrayEquals(\n      Arr.fromIterable(this.occurrences.entries()),\n      Arr.fromIterable(that.occurrences.entries())\n    )\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nclass GaugeState<A extends (number | bigint)> implements MetricState.MetricState.Gauge<A> {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [GaugeStateTypeId]: MetricState.GaugeStateTypeId = GaugeStateTypeId\n  constructor(readonly value: A) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(GaugeStateSymbolKey),\n      Hash.combine(Hash.hash(this.value)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](u: unknown): boolean {\n    return isGaugeState(u) && this.value === u.value\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport class HistogramState implements MetricState.MetricState.Histogram {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [HistogramStateTypeId]: MetricState.HistogramStateTypeId = HistogramStateTypeId\n  constructor(\n    readonly buckets: ReadonlyArray<readonly [number, number]>,\n    readonly count: number,\n    readonly min: number,\n    readonly max: number,\n    readonly sum: number\n  ) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(HistogramStateSymbolKey),\n      Hash.combine(Hash.hash(this.buckets)),\n      Hash.combine(Hash.hash(this.count)),\n      Hash.combine(Hash.hash(this.min)),\n      Hash.combine(Hash.hash(this.max)),\n      Hash.combine(Hash.hash(this.sum)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isHistogramState(that) &&\n      Equal.equals(this.buckets, that.buckets) &&\n      this.count === that.count &&\n      this.min === that.min &&\n      this.max === that.max &&\n      this.sum === that.sum\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport class SummaryState implements MetricState.MetricState.Summary {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [SummaryStateTypeId]: MetricState.SummaryStateTypeId = SummaryStateTypeId\n  constructor(\n    readonly error: number,\n    readonly quantiles: ReadonlyArray<readonly [number, Option.Option<number>]>,\n    readonly count: number,\n    readonly min: number,\n    readonly max: number,\n    readonly sum: number\n  ) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(SummaryStateSymbolKey),\n      Hash.combine(Hash.hash(this.error)),\n      Hash.combine(Hash.hash(this.quantiles)),\n      Hash.combine(Hash.hash(this.count)),\n      Hash.combine(Hash.hash(this.min)),\n      Hash.combine(Hash.hash(this.max)),\n      Hash.combine(Hash.hash(this.sum)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isSummaryState(that) &&\n      this.error === that.error &&\n      Equal.equals(this.quantiles, that.quantiles) &&\n      this.count === that.count &&\n      this.min === that.min &&\n      this.max === that.max &&\n      this.sum === that.sum\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const counter: {\n  (count: number): MetricState.MetricState.Counter<number>\n  (count: bigint): MetricState.MetricState.Counter<bigint>\n} = (count) => new CounterState(count) as any\n\n/** @internal */\nexport const frequency = (occurrences: ReadonlyMap<string, number>): MetricState.MetricState.Frequency => {\n  return new FrequencyState(occurrences)\n}\n\n/** @internal */\nexport const gauge: {\n  (count: number): MetricState.MetricState.Gauge<number>\n  (count: bigint): MetricState.MetricState.Gauge<bigint>\n} = (count) => new GaugeState(count) as any\n\n/** @internal */\nexport const histogram = (\n  options: {\n    readonly buckets: ReadonlyArray<readonly [number, number]>\n    readonly count: number\n    readonly min: number\n    readonly max: number\n    readonly sum: number\n  }\n): MetricState.MetricState.Histogram =>\n  new HistogramState(\n    options.buckets,\n    options.count,\n    options.min,\n    options.max,\n    options.sum\n  )\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly error: number\n    readonly quantiles: ReadonlyArray<readonly [number, Option.Option<number>]>\n    readonly count: number\n    readonly min: number\n    readonly max: number\n    readonly sum: number\n  }\n): MetricState.MetricState.Summary =>\n  new SummaryState(\n    options.error,\n    options.quantiles,\n    options.count,\n    options.min,\n    options.max,\n    options.sum\n  )\n\n/** @internal */\nexport const isMetricState = (u: unknown): u is MetricState.MetricState.Counter<number | bigint> =>\n  hasProperty(u, MetricStateTypeId)\n\n/** @internal */\nexport const isCounterState = (u: unknown): u is MetricState.MetricState.Counter<number | bigint> =>\n  hasProperty(u, CounterStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isFrequencyState = (u: unknown): u is MetricState.MetricState.Frequency =>\n  hasProperty(u, FrequencyStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isGaugeState = (u: unknown): u is MetricState.MetricState.Gauge<number | bigint> =>\n  hasProperty(u, GaugeStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHistogramState = (u: unknown): u is MetricState.MetricState.Histogram =>\n  hasProperty(u, HistogramStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isSummaryState = (u: unknown): u is MetricState.MetricState.Summary => hasProperty(u, SummaryStateTypeId)\n", "import * as Arr from \"../../Array.js\"\nimport * as Duration from \"../../Duration.js\"\nimport type { LazyArg } from \"../../Function.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport type * as MetricHook from \"../../MetricHook.js\"\nimport type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricState from \"../../MetricState.js\"\nimport * as number from \"../../Number.js\"\nimport * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport * as metricState from \"./state.js\"\n\n/** @internal */\nconst MetricHookSymbolKey = \"effect/MetricHook\"\n\n/** @internal */\nexport const MetricHookTypeId: MetricHook.MetricHookTypeId = Symbol.for(\n  MetricHookSymbolKey\n) as MetricHook.MetricHookTypeId\n\nconst metricHookVariance = {\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _Out: (_: never) => _\n}\n\n/** @internal */\nexport const make = <In, Out>(\n  options: {\n    readonly get: LazyArg<Out>\n    readonly update: (input: In) => void\n    readonly modify: (input: In) => void\n  }\n): MetricHook.MetricHook<In, Out> => ({\n  [MetricHookTypeId]: metricHookVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  ...options\n})\n\n/** @internal */\nexport const onModify = dual<\n  <In, Out>(f: (input: In) => void) => (self: MetricHook.MetricHook<In, Out>) => MetricHook.MetricHook<In, Out>,\n  <In, Out>(self: MetricHook.MetricHook<In, Out>, f: (input: In) => void) => MetricHook.MetricHook<In, Out>\n>(2, (self, f) => ({\n  [MetricHookTypeId]: metricHookVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  get: self.get,\n  update: self.update,\n  modify: (input) => {\n    self.modify(input)\n    return f(input)\n  }\n}))\n\n/** @internal */\nexport const onUpdate = dual<\n  <In, Out>(f: (input: In) => void) => (self: MetricHook.MetricHook<In, Out>) => MetricHook.MetricHook<In, Out>,\n  <In, Out>(self: MetricHook.MetricHook<In, Out>, f: (input: In) => void) => MetricHook.MetricHook<In, Out>\n>(2, (self, f) => ({\n  [MetricHookTypeId]: metricHookVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  get: self.get,\n  update: (input) => {\n    self.update(input)\n    return f(input)\n  },\n  modify: self.modify\n}))\n\nconst bigint0 = BigInt(0)\n\n/** @internal */\nexport const counter = <A extends (number | bigint)>(\n  key: MetricKey.MetricKey.Counter<A>\n): MetricHook.MetricHook.Counter<A> => {\n  let sum: A = key.keyType.bigint ? bigint0 as A : 0 as A\n  const canUpdate = key.keyType.incremental\n    ? key.keyType.bigint\n      ? (value: A) => value >= bigint0\n      : (value: A) => value >= 0\n    : (_value: A) => true\n  const update = (value: A) => {\n    if (canUpdate(value)) {\n      sum = (sum as any) + value\n    }\n  }\n  return make({\n    get: () => metricState.counter(sum as number) as unknown as MetricState.MetricState.Counter<A>,\n    update,\n    modify: update\n  })\n}\n\n/** @internal */\nexport const frequency = (key: MetricKey.MetricKey.Frequency): MetricHook.MetricHook.Frequency => {\n  const values = new Map<string, number>()\n  for (const word of key.keyType.preregisteredWords) {\n    values.set(word, 0)\n  }\n  const update = (word: string) => {\n    const slotCount = values.get(word) ?? 0\n    values.set(word, slotCount + 1)\n  }\n  return make({\n    get: () => metricState.frequency(values),\n    update,\n    modify: update\n  })\n}\n\n/** @internal */\nexport const gauge: {\n  (key: MetricKey.MetricKey.Gauge<number>, startAt: number): MetricHook.MetricHook.Gauge<number>\n  (key: MetricKey.MetricKey.Gauge<bigint>, startAt: bigint): MetricHook.MetricHook.Gauge<bigint>\n} = <A extends (number | bigint)>(\n  _key: MetricKey.MetricKey.Gauge<A>,\n  startAt: A\n): MetricHook.MetricHook.Gauge<A> => {\n  let value = startAt\n  return make({\n    get: () => metricState.gauge(value as number) as unknown as MetricState.MetricState.Gauge<A>,\n    update: (v) => {\n      value = v\n    },\n    modify: (v) => {\n      value = (value as any) + v\n    }\n  })\n}\n\n/** @internal */\nexport const histogram = (key: MetricKey.MetricKey.Histogram): MetricHook.MetricHook.Histogram => {\n  const bounds = key.keyType.boundaries.values\n  const size = bounds.length\n  const values = new Uint32Array(size + 1)\n  const boundaries = new Float32Array(size)\n  let count = 0\n  let sum = 0\n  let min = Number.MAX_VALUE\n  let max = Number.MIN_VALUE\n\n  pipe(\n    bounds,\n    Arr.sort(number.Order),\n    Arr.map((n, i) => {\n      boundaries[i] = n\n    })\n  )\n\n  // Insert the value into the right bucket with a binary search\n  const update = (value: number) => {\n    let from = 0\n    let to = size\n    while (from !== to) {\n      const mid = Math.floor(from + (to - from) / 2)\n      const boundary = boundaries[mid]\n      if (value <= boundary) {\n        to = mid\n      } else {\n        from = mid\n      }\n      // The special case when to / from have a distance of one\n      if (to === from + 1) {\n        if (value <= boundaries[from]) {\n          to = from\n        } else {\n          from = to\n        }\n      }\n    }\n    values[from] = values[from]! + 1\n    count = count + 1\n    sum = sum + value\n    if (value < min) {\n      min = value\n    }\n    if (value > max) {\n      max = value\n    }\n  }\n\n  const getBuckets = (): ReadonlyArray<readonly [number, number]> => {\n    const builder: Array<readonly [number, number]> = Arr.allocate(size) as any\n    let cumulated = 0\n    for (let i = 0; i < size; i++) {\n      const boundary = boundaries[i]\n      const value = values[i]\n      cumulated = cumulated + value\n      builder[i] = [boundary, cumulated]\n    }\n    return builder\n  }\n\n  return make({\n    get: () =>\n      metricState.histogram({\n        buckets: getBuckets(),\n        count,\n        min,\n        max,\n        sum\n      }),\n    update,\n    modify: update\n  })\n}\n\n/** @internal */\nexport const summary = (key: MetricKey.MetricKey.Summary): MetricHook.MetricHook.Summary => {\n  const { error, maxAge, maxSize, quantiles } = key.keyType\n  const sortedQuantiles = pipe(quantiles, Arr.sort(number.Order))\n  const values = Arr.allocate<readonly [number, number]>(maxSize)\n\n  let head = 0\n  let count = 0\n  let sum = 0\n  let min = Number.MAX_VALUE\n  let max = Number.MIN_VALUE\n\n  // Just before the snapshot we filter out all values older than maxAge\n  const snapshot = (now: number): ReadonlyArray<readonly [number, Option.Option<number>]> => {\n    const builder: Array<number> = []\n    // If the buffer is not full yet it contains valid items at the 0..last\n    // indices and null values at the rest of the positions.\n    //\n    // If the buffer is already full then all elements contains a valid\n    // measurement with timestamp.\n    //\n    // At any given point in time we can enumerate all the non-null elements in\n    // the buffer and filter them by timestamp to get a valid view of a time\n    // window.\n    //\n    // The order does not matter because it gets sorted before passing to\n    // `calculateQuantiles`.\n    let i = 0\n    while (i !== maxSize - 1) {\n      const item = values[i]\n      if (item != null) {\n        const [t, v] = item\n        const age = Duration.millis(now - t)\n        if (Duration.greaterThanOrEqualTo(age, Duration.zero) && age <= maxAge) {\n          builder.push(v)\n        }\n      }\n      i = i + 1\n    }\n    return calculateQuantiles(\n      error,\n      sortedQuantiles,\n      Arr.sort(builder, number.Order)\n    )\n  }\n\n  const observe = (value: number, timestamp: number) => {\n    if (maxSize > 0) {\n      head = head + 1\n      const target = head % maxSize\n      values[target] = [timestamp, value] as const\n    }\n    count = count + 1\n    sum = sum + value\n    if (value < min) {\n      min = value\n    }\n    if (value > max) {\n      max = value\n    }\n  }\n\n  return make({\n    get: () =>\n      metricState.summary({\n        error,\n        quantiles: snapshot(Date.now()),\n        count,\n        min,\n        max,\n        sum\n      }),\n    update: ([value, timestamp]) => observe(value, timestamp),\n    modify: ([value, timestamp]) => observe(value, timestamp)\n  })\n}\n\n/** @internal */\ninterface ResolvedQuantile {\n  /**\n   * The quantile that shall be resolved.\n   */\n  readonly quantile: number\n  /**\n   * `Some<number>` if a value for the quantile could be found, otherwise\n   * `None`.\n   */\n  readonly value: Option.Option<number>\n  /**\n   * How many samples have been consumed prior to this quantile.\n   */\n  readonly consumed: number\n  /**\n   * The rest of the samples after the quantile has been resolved.\n   */\n  readonly rest: ReadonlyArray<number>\n}\n\n/** @internal */\nconst calculateQuantiles = (\n  error: number,\n  sortedQuantiles: ReadonlyArray<number>,\n  sortedSamples: ReadonlyArray<number>\n): ReadonlyArray<readonly [number, Option.Option<number>]> => {\n  // The number of samples examined\n  const sampleCount = sortedSamples.length\n  if (!Arr.isNonEmptyReadonlyArray(sortedQuantiles)) {\n    return Arr.empty()\n  }\n  const head = sortedQuantiles[0]\n  const tail = sortedQuantiles.slice(1)\n  const resolvedHead = resolveQuantile(\n    error,\n    sampleCount,\n    Option.none(),\n    0,\n    head,\n    sortedSamples\n  )\n  const resolved = Arr.of(resolvedHead)\n  tail.forEach((quantile) => {\n    resolved.push(\n      resolveQuantile(\n        error,\n        sampleCount,\n        resolvedHead.value,\n        resolvedHead.consumed,\n        quantile,\n        resolvedHead.rest\n      )\n    )\n  })\n  return Arr.map(resolved, (rq) => [rq.quantile, rq.value] as const)\n}\n\n/** @internal */\nconst resolveQuantile = (\n  error: number,\n  sampleCount: number,\n  current: Option.Option<number>,\n  consumed: number,\n  quantile: number,\n  rest: ReadonlyArray<number>\n): ResolvedQuantile => {\n  let error_1 = error\n  let sampleCount_1 = sampleCount\n  let current_1 = current\n  let consumed_1 = consumed\n  let quantile_1 = quantile\n  let rest_1 = rest\n  let error_2 = error\n  let sampleCount_2 = sampleCount\n  let current_2 = current\n  let consumed_2 = consumed\n  let quantile_2 = quantile\n  let rest_2 = rest\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    // If the remaining list of samples is empty, there is nothing more to resolve\n    if (!Arr.isNonEmptyReadonlyArray(rest_1)) {\n      return {\n        quantile: quantile_1,\n        value: Option.none(),\n        consumed: consumed_1,\n        rest: []\n      }\n    }\n    // If the quantile is the 100% quantile, we can take the maximum of all the\n    // remaining values as the result\n    if (quantile_1 === 1) {\n      return {\n        quantile: quantile_1,\n        value: Option.some(Arr.lastNonEmpty(rest_1)),\n        consumed: consumed_1 + rest_1.length,\n        rest: []\n      }\n    }\n    // Split into two chunks - the first chunk contains all elements of the same\n    // value as the chunk head\n    const sameHead = Arr.span(rest_1, (n) => n <= rest_1[0])\n    // How many elements do we want to accept for this quantile\n    const desired = quantile_1 * sampleCount_1\n    // The error margin\n    const allowedError = (error_1 / 2) * desired\n    // Taking into account the elements consumed from the samples so far and the\n    // number of same elements at the beginning of the chunk, calculate the number\n    // of elements we would have if we selected the current head as result\n    const candConsumed = consumed_1 + sameHead[0].length\n    const candError = Math.abs(candConsumed - desired)\n    // If we haven't got enough elements yet, recurse\n    if (candConsumed < desired - allowedError) {\n      error_2 = error_1\n      sampleCount_2 = sampleCount_1\n      current_2 = Arr.head(rest_1)\n      consumed_2 = candConsumed\n      quantile_2 = quantile_1\n      rest_2 = sameHead[1]\n      error_1 = error_2\n      sampleCount_1 = sampleCount_2\n      current_1 = current_2\n      consumed_1 = consumed_2\n      quantile_1 = quantile_2\n      rest_1 = rest_2\n      continue\n    }\n    // If we have too many elements, select the previous value and hand back the\n    // the rest as leftover\n    if (candConsumed > desired + allowedError) {\n      return {\n        quantile: quantile_1,\n        value: current_1,\n        consumed: consumed_1,\n        rest: rest_1\n      }\n    }\n    // If we are in the target interval, select the current head and hand back the leftover after dropping all elements\n    // from the sample chunk that are equal to the current head\n    switch (current_1._tag) {\n      case \"None\": {\n        error_2 = error_1\n        sampleCount_2 = sampleCount_1\n        current_2 = Arr.head(rest_1)\n        consumed_2 = candConsumed\n        quantile_2 = quantile_1\n        rest_2 = sameHead[1]\n        error_1 = error_2\n        sampleCount_1 = sampleCount_2\n        current_1 = current_2\n        consumed_1 = consumed_2\n        quantile_1 = quantile_2\n        rest_1 = rest_2\n        continue\n      }\n      case \"Some\": {\n        const prevError = Math.abs(desired - current_1.value)\n        if (candError < prevError) {\n          error_2 = error_1\n          sampleCount_2 = sampleCount_1\n          current_2 = Arr.head(rest_1)\n          consumed_2 = candConsumed\n          quantile_2 = quantile_1\n          rest_2 = sameHead[1]\n          error_1 = error_2\n          sampleCount_1 = sampleCount_2\n          current_1 = current_2\n          consumed_1 = consumed_2\n          quantile_1 = quantile_2\n          rest_1 = rest_2\n          continue\n        }\n        return {\n          quantile: quantile_1,\n          value: Option.some(current_1.value),\n          consumed: consumed_1,\n          rest: rest_1\n        }\n      }\n    }\n  }\n  throw new Error(\n    \"BUG: MetricHook.resolveQuantiles - please report an issue at https://github.com/Effect-TS/effect/issues\"\n  )\n}\n", "import type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport type * as MetricPair from \"../../MetricPair.js\"\nimport type * as MetricState from \"../../MetricState.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\n\n/** @internal */\nconst MetricPairSymbolKey = \"effect/MetricPair\"\n\n/** @internal */\nexport const MetricPairTypeId: MetricPair.MetricPairTypeId = Symbol.for(\n  MetricPairSymbolKey\n) as MetricPair.MetricPairTypeId\n\nconst metricPairVariance = {\n  /* c8 ignore next */\n  _Type: (_: never) => _\n}\n\n/** @internal */\nexport const make = <Type extends MetricKeyType.MetricKeyType<any, any>>(\n  metricKey: MetricKey.MetricKey<Type>,\n  metricState: MetricState.MetricState<MetricKeyType.MetricKeyType.OutType<Type>>\n): MetricPair.MetricPair.Untyped => {\n  return {\n    [MetricPairTypeId]: metricPairVariance,\n    metricKey,\n    metricState,\n    pipe() {\n      return pipeArguments(this, arguments)\n    }\n  }\n}\n\n/** @internal */\nexport const unsafeMake = <Type extends MetricKeyType.MetricKeyType<any, any>>(\n  metricKey: MetricKey.MetricKey<Type>,\n  metricState: MetricState.MetricState.Untyped\n): MetricPair.MetricPair.Untyped => {\n  return {\n    [MetricPairTypeId]: metricPairVariance,\n    metricKey,\n    metricState,\n    pipe() {\n      return pipeArguments(this, arguments)\n    }\n  }\n}\n", "import { pipe } from \"../../Function.js\"\nimport type * as MetricHook from \"../../MetricHook.js\"\nimport type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport type * as MetricPair from \"../../MetricPair.js\"\nimport type * as MetricRegistry from \"../../MetricRegistry.js\"\nimport * as MutableHashMap from \"../../MutableHashMap.js\"\nimport * as Option from \"../../Option.js\"\nimport * as metricHook from \"./hook.js\"\nimport * as metricKeyType from \"./keyType.js\"\nimport * as metricPair from \"./pair.js\"\n\n/** @internal */\nconst MetricRegistrySymbolKey = \"effect/MetricRegistry\"\n\n/** @internal */\nexport const MetricRegistryTypeId: MetricRegistry.MetricRegistryTypeId = Symbol.for(\n  MetricRegistrySymbolKey\n) as MetricRegistry.MetricRegistryTypeId\n\n/** @internal */\nclass MetricRegistryImpl implements MetricRegistry.MetricRegistry {\n  readonly [MetricRegistryTypeId]: MetricRegistry.MetricRegistryTypeId = MetricRegistryTypeId\n\n  private map = MutableHashMap.empty<\n    MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n    MetricHook.MetricHook.Root\n  >()\n\n  snapshot(): Array<MetricPair.MetricPair.Untyped> {\n    const result: Array<MetricPair.MetricPair.Untyped> = []\n    for (const [key, hook] of this.map) {\n      result.push(metricPair.unsafeMake(key, hook.get()))\n    }\n    return result\n  }\n\n  get<Type extends MetricKeyType.MetricKeyType<any, any>>(\n    key: MetricKey.MetricKey<Type>\n  ): MetricHook.MetricHook<\n    MetricKeyType.MetricKeyType.InType<typeof key[\"keyType\"]>,\n    MetricKeyType.MetricKeyType.OutType<typeof key[\"keyType\"]>\n  > {\n    const hook = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (hook == null) {\n      if (metricKeyType.isCounterKey(key.keyType)) {\n        return this.getCounter(key as unknown as MetricKey.MetricKey.Counter<any>) as any\n      }\n      if (metricKeyType.isGaugeKey(key.keyType)) {\n        return this.getGauge(key as unknown as MetricKey.MetricKey.Gauge<any>) as any\n      }\n      if (metricKeyType.isFrequencyKey(key.keyType)) {\n        return this.getFrequency(key as unknown as MetricKey.MetricKey.Frequency) as any\n      }\n      if (metricKeyType.isHistogramKey(key.keyType)) {\n        return this.getHistogram(key as unknown as MetricKey.MetricKey.Histogram) as any\n      }\n      if (metricKeyType.isSummaryKey(key.keyType)) {\n        return this.getSummary(key as unknown as MetricKey.MetricKey.Summary) as any\n      }\n      throw new Error(\n        \"BUG: MetricRegistry.get - unknown MetricKeyType - please report an issue at https://github.com/Effect-TS/effect/issues\"\n      )\n    } else {\n      return hook as any\n    }\n  }\n\n  getCounter<A extends (number | bigint)>(key: MetricKey.MetricKey.Counter<A>): MetricHook.MetricHook.Counter<A> {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const counter = metricHook.counter(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            counter as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = counter\n    }\n    return value as MetricHook.MetricHook.Counter<A>\n  }\n\n  getFrequency(key: MetricKey.MetricKey.Frequency): MetricHook.MetricHook.Frequency {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const frequency = metricHook.frequency(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            frequency as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = frequency\n    }\n    return value as MetricHook.MetricHook.Frequency\n  }\n\n  getGauge<A extends (number | bigint)>(key: MetricKey.MetricKey.Gauge<A>): MetricHook.MetricHook.Gauge<A> {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const gauge = metricHook.gauge(key as any, key.keyType.bigint ? BigInt(0) as any : 0)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            gauge as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = gauge\n    }\n    return value as MetricHook.MetricHook.Gauge<A>\n  }\n\n  getHistogram(key: MetricKey.MetricKey.Histogram): MetricHook.MetricHook.Histogram {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const histogram = metricHook.histogram(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            histogram as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = histogram\n    }\n    return value as MetricHook.MetricHook.Histogram\n  }\n\n  getSummary(key: MetricKey.MetricKey.Summary): MetricHook.MetricHook.Summary {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const summary = metricHook.summary(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            summary as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = summary\n    }\n    return value as MetricHook.MetricHook.Summary\n  }\n}\n\n/** @internal */\nexport const make = (): MetricRegistry.MetricRegistry => {\n  return new MetricRegistryImpl()\n}\n", "import * as Arr from \"../Array.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constVoid, dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as Metric from \"../Metric.js\"\nimport type * as MetricBoundaries from \"../MetricBoundaries.js\"\nimport type * as MetricHook from \"../MetricHook.js\"\nimport type * as MetricKey from \"../MetricKey.js\"\nimport type * as MetricKeyType from \"../MetricKeyType.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport type * as MetricPair from \"../MetricPair.js\"\nimport type * as MetricRegistry from \"../MetricRegistry.js\"\nimport type * as MetricState from \"../MetricState.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Cause from \"./cause.js\"\nimport * as _effect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as metricBoundaries from \"./metric/boundaries.js\"\nimport * as metricKey from \"./metric/key.js\"\nimport * as metricKeyType from \"./metric/keyType.js\"\nimport * as metricLabel from \"./metric/label.js\"\nimport * as metricRegistry from \"./metric/registry.js\"\n\n/** @internal */\nconst MetricSymbolKey = \"effect/Metric\"\n\n/** @internal */\nexport const MetricTypeId: Metric.MetricTypeId = Symbol.for(\n  MetricSymbolKey\n) as Metric.MetricTypeId\n\nconst metricVariance = {\n  /* c8 ignore next */\n  _Type: (_: any) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _Out: (_: never) => _\n}\n\n/** @internal */\nexport const globalMetricRegistry: MetricRegistry.MetricRegistry = globalValue(\n  Symbol.for(\"effect/Metric/globalMetricRegistry\"),\n  () => metricRegistry.make()\n)\n\n/** @internal */\nexport const make: Metric.MetricApply = function<Type, In, Out>(\n  keyType: Type,\n  unsafeUpdate: (input: In, extraTags: ReadonlyArray<MetricLabel.MetricLabel>) => void,\n  unsafeValue: (extraTags: ReadonlyArray<MetricLabel.MetricLabel>) => Out,\n  unsafeModify: (input: In, extraTags: ReadonlyArray<MetricLabel.MetricLabel>) => void\n): Metric.Metric<Type, In, Out> {\n  const metric: Metric.Metric<Type, In, Out> = Object.assign(\n    <A extends In, E, R>(effect: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n      core.tap(effect, (a) => update(metric, a)),\n    {\n      [MetricTypeId]: metricVariance,\n      keyType,\n      unsafeUpdate,\n      unsafeValue,\n      unsafeModify,\n      register() {\n        this.unsafeValue([])\n        return this as any\n      },\n      pipe() {\n        return pipeArguments(this, arguments)\n      }\n    } as const\n  )\n  return metric\n}\n\n/** @internal */\nexport const mapInput = dual<\n  <In, In2>(f: (input: In2) => In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In2, Out>,\n  <Type, In, Out, In2>(self: Metric.Metric<Type, In, Out>, f: (input: In2) => In) => Metric.Metric<Type, In2, Out>\n>(2, (self, f) =>\n  make(\n    self.keyType,\n    (input, extraTags) => self.unsafeUpdate(f(input), extraTags),\n    self.unsafeValue,\n    (input, extraTags) => self.unsafeModify(f(input), extraTags)\n  ))\n\n/** @internal */\nexport const counter: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n    readonly incremental?: boolean | undefined\n  }): Metric.Metric.Counter<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n    readonly incremental?: boolean | undefined\n  }): Metric.Metric.Counter<bigint>\n} = (name, options) => fromMetricKey(metricKey.counter(name, options as any)) as any\n\n/** @internal */\nexport const frequency = (name: string, options?: {\n  readonly description?: string | undefined\n  readonly preregisteredWords?: ReadonlyArray<string> | undefined\n}): Metric.Metric.Frequency<string> => fromMetricKey(metricKey.frequency(name, options))\n\n/** @internal */\nexport const withConstantInput = dual<\n  <In>(input: In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, unknown, Out>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, input: In) => Metric.Metric<Type, unknown, Out>\n>(2, (self, input) => mapInput(self, () => input))\n\n/** @internal */\nexport const fromMetricKey = <Type extends MetricKeyType.MetricKeyType<any, any>>(\n  key: MetricKey.MetricKey<Type>\n): Metric.Metric<\n  Type,\n  MetricKeyType.MetricKeyType.InType<Type>,\n  MetricKeyType.MetricKeyType.OutType<Type>\n> => {\n  let untaggedHook:\n    | MetricHook.MetricHook<\n      MetricKeyType.MetricKeyType.InType<Type>,\n      MetricKeyType.MetricKeyType.OutType<Type>\n    >\n    | undefined\n  const hookCache = new WeakMap<ReadonlyArray<MetricLabel.MetricLabel>, MetricHook.MetricHook<any, any>>()\n\n  const hook = (extraTags: ReadonlyArray<MetricLabel.MetricLabel>): MetricHook.MetricHook<\n    MetricKeyType.MetricKeyType.InType<Type>,\n    MetricKeyType.MetricKeyType.OutType<Type>\n  > => {\n    if (extraTags.length === 0) {\n      if (untaggedHook !== undefined) {\n        return untaggedHook\n      }\n      untaggedHook = globalMetricRegistry.get(key)\n      return untaggedHook\n    }\n\n    let hook = hookCache.get(extraTags)\n    if (hook !== undefined) {\n      return hook\n    }\n    hook = globalMetricRegistry.get(metricKey.taggedWithLabels(key, extraTags))\n    hookCache.set(extraTags, hook)\n    return hook\n  }\n\n  return make(\n    key.keyType,\n    (input, extraTags) => hook(extraTags).update(input),\n    (extraTags) => hook(extraTags).get(),\n    (input, extraTags) => hook(extraTags).modify(input)\n  )\n}\n\n/** @internal */\nexport const gauge: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n  }): Metric.Metric.Gauge<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n  }): Metric.Metric.Gauge<bigint>\n} = (name, options) => fromMetricKey(metricKey.gauge(name, options as any)) as any\n\n/** @internal */\nexport const histogram = (name: string, boundaries: MetricBoundaries.MetricBoundaries, description?: string) =>\n  fromMetricKey(metricKey.histogram(name, boundaries, description))\n\n/* @internal */\nexport const increment = (\n  self:\n    | Metric.Metric.Counter<number>\n    | Metric.Metric.Counter<bigint>\n    | Metric.Metric.Gauge<number>\n    | Metric.Metric.Gauge<bigint>\n): Effect.Effect<void> =>\n  metricKeyType.isCounterKey(self.keyType)\n    ? update(self as Metric.Metric.Counter<number>, self.keyType.bigint ? BigInt(1) as any : 1)\n    : modify(self as Metric.Metric.Gauge<number>, self.keyType.bigint ? BigInt(1) as any : 1)\n\n/* @internal */\nexport const incrementBy = dual<\n  {\n    (amount: number): (self: Metric.Metric.Counter<number> | Metric.Metric.Counter<number>) => Effect.Effect<void>\n    (amount: bigint): (self: Metric.Metric.Counter<bigint> | Metric.Metric.Gauge<bigint>) => Effect.Effect<void>\n  },\n  {\n    (self: Metric.Metric.Counter<number> | Metric.Metric.Gauge<number>, amount: number): Effect.Effect<void>\n    (self: Metric.Metric.Counter<bigint> | Metric.Metric.Gauge<bigint>, amount: bigint): Effect.Effect<void>\n  }\n>(2, (self, amount) =>\n  metricKeyType.isCounterKey(self.keyType)\n    ? update(self as any, amount)\n    : modify(self as any, amount))\n\n/** @internal */\nexport const map = dual<\n  <Out, Out2>(f: (out: Out) => Out2) => <Type, In>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, Out2>,\n  <Type, In, Out, Out2>(self: Metric.Metric<Type, In, Out>, f: (out: Out) => Out2) => Metric.Metric<Type, In, Out2>\n>(2, (self, f) =>\n  make(\n    self.keyType,\n    self.unsafeUpdate,\n    (extraTags) => f(self.unsafeValue(extraTags)),\n    self.unsafeModify\n  ))\n\n/** @internal */\nexport const mapType = dual<\n  <Type, Type2>(\n    f: (type: Type) => Type2\n  ) => <In, Out>(\n    self: Metric.Metric<Type, In, Out>\n  ) => Metric.Metric<Type2, In, Out>,\n  <Type, In, Out, Type2>(\n    self: Metric.Metric<Type, In, Out>,\n    f: (type: Type) => Type2\n  ) => Metric.Metric<Type2, In, Out>\n>(2, (self, f) =>\n  make(\n    f(self.keyType),\n    self.unsafeUpdate,\n    self.unsafeValue,\n    self.unsafeModify\n  ))\n\n/** @internal */\nexport const modify = dual<\n  <In>(input: In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Effect.Effect<void>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, input: In) => Effect.Effect<void>\n>(2, (self, input) =>\n  core.fiberRefGetWith(\n    core.currentMetricLabels,\n    (tags) => core.sync(() => self.unsafeModify(input, tags))\n  ))\n\n/* @internal */\nexport const set = dual<\n  {\n    (value: number): (self: Metric.Metric.Gauge<number>) => Effect.Effect<void>\n    (value: bigint): (self: Metric.Metric.Gauge<bigint>) => Effect.Effect<void>\n  },\n  {\n    (self: Metric.Metric.Gauge<number>, value: number): Effect.Effect<void>\n    (self: Metric.Metric.Gauge<bigint>, value: bigint): Effect.Effect<void>\n  }\n>(2, (self, value) => update(self as any, value))\n\n/** @internal */\nexport const succeed = <Out>(out: Out): Metric.Metric<void, unknown, Out> =>\n  make(void 0 as void, constVoid, () => out, constVoid)\n\n/** @internal */\nexport const sync = <Out>(evaluate: LazyArg<Out>): Metric.Metric<void, unknown, Out> =>\n  make(void 0 as void, constVoid, evaluate, constVoid)\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly name: string\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n    readonly description?: string | undefined\n  }\n): Metric.Metric.Summary<number> => withNow(summaryTimestamp(options))\n\n/** @internal */\nexport const summaryTimestamp = (\n  options: {\n    readonly name: string\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n    readonly description?: string | undefined\n  }\n): Metric.Metric.Summary<readonly [value: number, timestamp: number]> => fromMetricKey(metricKey.summary(options))\n\n/** @internal */\nexport const tagged = dual<\n  <Type, In, Out>(key: string, value: string) => (self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, Out>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, key: string, value: string) => Metric.Metric<Type, In, Out>\n>(3, (self, key, value) => taggedWithLabels(self, [metricLabel.make(key, value)]))\n\n/** @internal */\nexport const taggedWithLabelsInput = dual<\n  <In>(\n    f: (input: In) => Iterable<MetricLabel.MetricLabel>\n  ) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, void>,\n  <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>,\n    f: (input: In) => Iterable<MetricLabel.MetricLabel>\n  ) => Metric.Metric<Type, In, void>\n>(2, (self, f) =>\n  map(\n    make(\n      self.keyType,\n      (input, extraTags) =>\n        self.unsafeUpdate(\n          input,\n          Arr.union(f(input), extraTags)\n        ),\n      self.unsafeValue,\n      (input, extraTags) =>\n        self.unsafeModify(\n          input,\n          Arr.union(f(input), extraTags)\n        )\n    ),\n    constVoid\n  ))\n\n/** @internal */\nexport const taggedWithLabels = dual<\n  <Type, In, Out>(\n    extraTags: Iterable<MetricLabel.MetricLabel>\n  ) => (self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, Out>,\n  <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>,\n    extraTags: Iterable<MetricLabel.MetricLabel>\n  ) => Metric.Metric<Type, In, Out>\n>(2, (self, extraTags) => {\n  return make(\n    self.keyType,\n    (input, extraTags1) => self.unsafeUpdate(input, Arr.union(extraTags, extraTags1)),\n    (extraTags1) => self.unsafeValue(Arr.union(extraTags, extraTags1)),\n    (input, extraTags1) => self.unsafeModify(input, Arr.union(extraTags, extraTags1))\n  )\n})\n\n/** @internal */\nexport const timer = (name: string, description?: string): Metric.Metric<\n  MetricKeyType.MetricKeyType.Histogram,\n  Duration.Duration,\n  MetricState.MetricState.Histogram\n> => {\n  const boundaries = metricBoundaries.exponential({\n    start: 0.5,\n    factor: 2,\n    count: 35\n  })\n  const base = pipe(histogram(name, boundaries, description), tagged(\"time_unit\", \"milliseconds\"))\n  return mapInput(base, Duration.toMillis)\n}\n\n/** @internal */\nexport const timerWithBoundaries = (\n  name: string,\n  boundaries: ReadonlyArray<number>,\n  description?: string\n): Metric.Metric<\n  MetricKeyType.MetricKeyType.Histogram,\n  Duration.Duration,\n  MetricState.MetricState.Histogram\n> => {\n  const base = pipe(\n    histogram(name, metricBoundaries.fromIterable(boundaries), description),\n    tagged(\"time_unit\", \"milliseconds\")\n  )\n  return mapInput(base, Duration.toMillis)\n}\n\n/* @internal */\nexport const trackAll = dual<\n  <In>(\n    input: In\n  ) => <Type, Out>(\n    self: Metric.Metric<Type, In, Out>\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>,\n    input: In\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n>(2, (self, input) => (effect) =>\n  core.matchCauseEffect(effect, {\n    onFailure: (cause) => core.zipRight(update(self, input), core.failCause(cause)),\n    onSuccess: (value) => core.zipRight(update(self, input), core.succeed(value))\n  }))\n\n/* @internal */\nexport const trackDefect = dual<\n  <Type, Out>(\n    metric: Metric.Metric<Type, unknown, Out>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, unknown, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, metric) => trackDefectWith(self, metric, identity))\n\n/* @internal */\nexport const trackDefectWith = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (defect: unknown) => In\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (defect: unknown) => In\n  ) => Effect.Effect<A, E, R>\n>(3, (self, metric, f) => {\n  const updater = (defect: unknown) => update(metric, f(defect))\n  return _effect.tapDefect(self, (cause) => core.forEachSequentialDiscard(Cause.defects(cause), updater))\n})\n\n/* @internal */\nexport const trackDuration = dual<\n  <Type, Out>(\n    metric: Metric.Metric<Type, Duration.Duration, Out>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, Duration.Duration, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, metric) => trackDurationWith(self, metric, identity))\n\n/* @internal */\nexport const trackDurationWith = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (duration: Duration.Duration) => In\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (duration: Duration.Duration) => In\n  ) => Effect.Effect<A, E, R>\n>(3, (self, metric, f) =>\n  Clock.clockWith((clock) => {\n    const startTime = clock.unsafeCurrentTimeNanos()\n    return core.tap(self, (_) => {\n      const endTime = clock.unsafeCurrentTimeNanos()\n      const duration = Duration.nanos(endTime - startTime)\n      return update(metric, f(duration))\n    })\n  }))\n\n/* @internal */\nexport const trackError = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>\n  ) => <A, E extends In, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E extends In, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, <A, E extends In, R, Type, In, Out>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>\n) => trackErrorWith(self, metric, (a: In) => a))\n\n/* @internal */\nexport const trackErrorWith = dual<\n  <Type, In, Out, In2>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (error: In2) => In\n  ) => <A, E extends In2, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E extends In2, R, Type, In, Out, In2>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (error: In2) => In\n  ) => Effect.Effect<A, E, R>\n>(3, <A, E extends In2, R, Type, In, Out, In2>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>,\n  f: (error: In2) => In\n) => {\n  const updater = (error: E): Effect.Effect<void> => update(metric, f(error))\n  return _effect.tapError(self, updater)\n})\n\n/* @internal */\nexport const trackSuccess = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>\n  ) => <A extends In, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A extends In, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, <A extends In, E, R, Type, In, Out>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>\n) => trackSuccessWith(self, metric, (a: In) => a))\n\n/* @internal */\nexport const trackSuccessWith = dual<\n  <Type, In, Out, In2>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (value: In2) => In\n  ) => <A extends In2, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A extends In2, E, R, Type, In, Out, In2>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (value: In2) => In\n  ) => Effect.Effect<A, E, R>\n>(3, <A extends In2, E, R, Type, In, Out, In2>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>,\n  f: (value: In2) => In\n) => {\n  const updater = (value: A): Effect.Effect<void> => update(metric, f(value))\n  return core.tap(self, updater)\n})\n\n/* @internal */\nexport const update = dual<\n  <In>(input: In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Effect.Effect<void>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, input: In) => Effect.Effect<void>\n>(2, (self, input) =>\n  core.fiberRefGetWith(\n    core.currentMetricLabels,\n    (tags) => core.sync(() => self.unsafeUpdate(input, tags))\n  ))\n\n/* @internal */\nexport const value = <Type, In, Out>(\n  self: Metric.Metric<Type, In, Out>\n): Effect.Effect<Out> =>\n  core.fiberRefGetWith(\n    core.currentMetricLabels,\n    (tags) => core.sync(() => self.unsafeValue(tags))\n  )\n\n/** @internal */\nexport const withNow = <Type, In, Out>(\n  self: Metric.Metric<Type, readonly [In, number], Out>\n): Metric.Metric<Type, In, Out> => mapInput(self, (input: In) => [input, Date.now()] as const)\n\n/** @internal */\nexport const zip = dual<\n  <Type2, In2, Out2>(\n    that: Metric.Metric<Type2, In2, Out2>\n  ) => <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>\n  ) => Metric.Metric<readonly [Type, Type2], readonly [In, In2], [Out, Out2]>,\n  <Type, In, Out, Type2, In2, Out2>(\n    self: Metric.Metric<Type, In, Out>,\n    that: Metric.Metric<Type2, In2, Out2>\n  ) => Metric.Metric<readonly [Type, Type2], readonly [In, In2], [Out, Out2]>\n>(\n  2,\n  <Type, In, Out, Type2, In2, Out2>(self: Metric.Metric<Type, In, Out>, that: Metric.Metric<Type2, In2, Out2>) =>\n    make(\n      [self.keyType, that.keyType] as const,\n      (input: readonly [In, In2], extraTags) => {\n        const [l, r] = input\n        self.unsafeUpdate(l, extraTags)\n        that.unsafeUpdate(r, extraTags)\n      },\n      (extraTags) => [self.unsafeValue(extraTags), that.unsafeValue(extraTags)],\n      (input: readonly [In, In2], extraTags) => {\n        const [l, r] = input\n        self.unsafeModify(l, extraTags)\n        that.unsafeModify(r, extraTags)\n      }\n    )\n)\n\n/** @internal */\nexport const unsafeSnapshot = (): Array<MetricPair.MetricPair.Untyped> => globalMetricRegistry.snapshot()\n\n/** @internal */\nexport const snapshot: Effect.Effect<Array<MetricPair.MetricPair.Untyped>> = core.sync(\n  unsafeSnapshot\n)\n", "import type * as Cause from \"../Cause.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { dual } from \"../Function.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as Types from \"../Types.js\"\nimport * as completedRequestMap from \"./completedRequestMap.js\"\nimport * as core from \"./core.js\"\nimport { StructuralPrototype } from \"./effectable.js\"\n\n/** @internal */\nconst RequestSymbolKey = \"effect/Request\"\n\n/** @internal */\nexport const RequestTypeId: Request.RequestTypeId = Symbol.for(\n  RequestSymbolKey\n) as Request.RequestTypeId\n\nconst requestVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\nconst RequestPrototype = {\n  ...StructuralPrototype,\n  [RequestTypeId]: requestVariance\n}\n\n/** @internal */\nexport const isRequest = (u: unknown): u is Request.Request<unknown, unknown> => hasProperty(u, RequestTypeId)\n\n/** @internal */\nexport const of = <R extends Request.Request<any, any>>(): Request.Request.Constructor<R> => (args) =>\n  Object.assign(Object.create(RequestPrototype), args)\n\n/** @internal */\nexport const tagged = <R extends Request.Request<any, any> & { _tag: string }>(\n  tag: R[\"_tag\"]\n): Request.Request.Constructor<R, \"_tag\"> =>\n(args) => {\n  const request = Object.assign(Object.create(RequestPrototype), args)\n  request._tag = tag\n  return request\n}\n\n/** @internal */\nexport const Class: new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request.Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends keyof Request.Request<unknown, unknown> ? never : P]: A[P] }\n) => Request.Request<Success, Error> & Readonly<A> = (function() {\n  function Class(this: any, args: any) {\n    if (args) {\n      Object.assign(this, args)\n    }\n  }\n  Class.prototype = RequestPrototype\n  return Class as any\n})()\n\n/** @internal */\nexport const TaggedClass = <Tag extends string>(\n  tag: Tag\n): new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request.Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" | keyof Request.Request<unknown, unknown> ? never : P]: A[P] }\n) => Request.Request<Success, Error> & Readonly<A> & { readonly _tag: Tag } => {\n  return class TaggedClass extends Class<any, any, any> {\n    readonly _tag = tag\n  } as any\n}\n\n/** @internal */\nexport const complete = dual<\n  <A extends Request.Request<any, any>>(\n    result: Request.Request.Result<A>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    result: Request.Request.Result<A>\n  ) => Effect.Effect<void>\n>(2, (self, result) =>\n  core.fiberRefGetWith(\n    completedRequestMap.currentRequestMap,\n    (map) =>\n      core.sync(() => {\n        if (map.has(self)) {\n          const entry = map.get(self)!\n          if (!entry.state.completed) {\n            entry.state.completed = true\n            core.deferredUnsafeDone(entry.result, result)\n          }\n        }\n      })\n  ))\n\n/** @internal */\nexport const completeEffect = dual<\n  <A extends Request.Request<any, any>, R>(\n    effect: Effect.Effect<Request.Request.Success<A>, Request.Request.Error<A>, R>\n  ) => (self: A) => Effect.Effect<void, never, R>,\n  <A extends Request.Request<any, any>, R>(\n    self: A,\n    effect: Effect.Effect<Request.Request.Success<A>, Request.Request.Error<A>, R>\n  ) => Effect.Effect<void, never, R>\n>(2, (self, effect) =>\n  core.matchEffect(effect, {\n    onFailure: (error) => complete(self, core.exitFail(error) as any),\n    onSuccess: (value) => complete(self, core.exitSucceed(value) as any)\n  }))\n\n/** @internal */\nexport const fail = dual<\n  <A extends Request.Request<any, any>>(\n    error: Request.Request.Error<A>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    error: Request.Request.Error<A>\n  ) => Effect.Effect<void>\n>(2, (self, error) => complete(self, core.exitFail(error) as any))\n\n/** @internal */\nexport const failCause = dual<\n  <A extends Request.Request<any, any>>(\n    cause: Cause.Cause<Request.Request.Error<A>>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    cause: Cause.Cause<Request.Request.Error<A>>\n  ) => Effect.Effect<void>\n>(2, (self, cause) => complete(self, core.exitFailCause(cause) as any))\n\n/** @internal */\nexport const succeed = dual<\n  <A extends Request.Request<any, any>>(\n    value: Request.Request.Success<A>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    value: Request.Request.Success<A>\n  ) => Effect.Effect<void>\n>(2, (self, value) => complete(self, core.exitSucceed(value) as any))\n\n/** @internal */\nexport class Listeners {\n  count = 0\n  observers: Set<(count: number) => void> = new Set()\n  interrupted = false\n  addObserver(f: (count: number) => void): void {\n    this.observers.add(f)\n  }\n  removeObserver(f: (count: number) => void): void {\n    this.observers.delete(f)\n  }\n  increment() {\n    this.count++\n    this.observers.forEach((f) => f(this.count))\n  }\n  decrement() {\n    this.count--\n    this.observers.forEach((f) => f(this.count))\n  }\n}\n\n/**\n * @internal\n */\nexport const filterOutCompleted = <A extends Request.Request<any, any>>(requests: Array<A>) =>\n  core.fiberRefGetWith(\n    completedRequestMap.currentRequestMap,\n    (map) =>\n      core.succeed(\n        requests.filter((request) => !(map.get(request)?.state.completed === true))\n      )\n  )\n", "import * as Arr from \"../../Array.js\"\nimport * as Option from \"../../Option.js\"\nimport type * as RBT from \"../../RedBlackTree.js\"\nimport type { RedBlackTreeImpl } from \"../redBlackTree.js\"\nimport type * as Node from \"./node.js\"\n\n/** @internal */\nexport const Direction = {\n  Forward: 0 as RBT.RedBlackTree.Direction,\n  Backward: 1 << 0 as RBT.RedBlackTree.Direction\n} as const\n\n/** @internal */\nexport class RedBlackTreeIterator<in out K, out V> implements Iterator<[K, V]> {\n  private count = 0\n\n  constructor(\n    readonly self: RBT.RedBlackTree<K, V>,\n    readonly stack: Array<Node.Node<K, V>>,\n    readonly direction: RBT.RedBlackTree.Direction\n  ) {}\n\n  /**\n   * Clones the iterator\n   */\n  clone(): RedBlackTreeIterator<K, V> {\n    return new RedBlackTreeIterator(this.self, this.stack.slice(), this.direction)\n  }\n\n  /**\n   * Reverse the traversal direction\n   */\n  reversed(): RedBlackTreeIterator<K, V> {\n    return new RedBlackTreeIterator(\n      this.self,\n      this.stack.slice(),\n      this.direction === Direction.Forward ? Direction.Backward : Direction.Forward\n    )\n  }\n\n  /**\n   * Iterator next\n   */\n  next(): IteratorResult<[K, V], number> {\n    const entry = this.entry\n    this.count++\n    if (this.direction === Direction.Forward) {\n      this.moveNext()\n    } else {\n      this.movePrev()\n    }\n    switch (entry._tag) {\n      case \"None\": {\n        return { done: true, value: this.count }\n      }\n      case \"Some\": {\n        return { done: false, value: entry.value }\n      }\n    }\n  }\n\n  /**\n   * Returns the key\n   */\n  get key(): Option.Option<K> {\n    if (this.stack.length > 0) {\n      return Option.some(this.stack[this.stack.length - 1]!.key)\n    }\n    return Option.none()\n  }\n\n  /**\n   * Returns the value\n   */\n  get value(): Option.Option<V> {\n    if (this.stack.length > 0) {\n      return Option.some(this.stack[this.stack.length - 1]!.value)\n    }\n    return Option.none()\n  }\n\n  /**\n   * Returns the key\n   */\n  get entry(): Option.Option<[K, V]> {\n    return Option.map(Arr.last(this.stack), (node) => [node.key, node.value])\n  }\n\n  /**\n   * Returns the position of this iterator in the sorted list\n   */\n  get index(): number {\n    let idx = 0\n    const stack = this.stack\n    if (stack.length === 0) {\n      const r = (this.self as RedBlackTreeImpl<K, V>)._root\n      if (r != null) {\n        return r.count\n      }\n      return 0\n    } else if (stack[stack.length - 1]!.left != null) {\n      idx = stack[stack.length - 1]!.left!.count\n    }\n    for (let s = stack.length - 2; s >= 0; --s) {\n      if (stack[s + 1] === stack[s]!.right) {\n        ;++idx\n        if (stack[s]!.left != null) {\n          idx += stack[s]!.left!.count\n        }\n      }\n    }\n    return idx\n  }\n\n  /**\n   * Advances iterator to next element in list\n   */\n  moveNext() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return\n    }\n    let n: Node.Node<K, V> | undefined = stack[stack.length - 1]!\n    if (n.right != null) {\n      n = n.right\n      while (n != null) {\n        stack.push(n)\n        n = n.left\n      }\n    } else {\n      stack.pop()\n      while (stack.length > 0 && stack[stack.length - 1]!.right === n) {\n        n = stack[stack.length - 1]\n        stack.pop()\n      }\n    }\n  }\n\n  /**\n   * Checks if there is a next element\n   */\n  get hasNext() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return false\n    }\n    if (stack[stack.length - 1]!.right != null) {\n      return true\n    }\n    for (let s = stack.length - 1; s > 0; --s) {\n      if (stack[s - 1]!.left === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * Advances iterator to previous element in list\n   */\n  movePrev() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return\n    }\n    let n: Node.Node<K, V> | undefined = stack[stack.length - 1]\n    if (n != null && n.left != null) {\n      n = n.left\n      while (n != null) {\n        stack.push(n)\n        n = n.right\n      }\n    } else {\n      stack.pop()\n      while (stack.length > 0 && stack[stack.length - 1]!.left === n) {\n        n = stack[stack.length - 1]\n        stack.pop()\n      }\n    }\n  }\n\n  /**\n   * Checks if there is a previous element\n   */\n  get hasPrev() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return false\n    }\n    if (stack[stack.length - 1]!.left != null) {\n      return true\n    }\n    for (let s = stack.length - 1; s > 0; --s) {\n      if (stack[s - 1]!.right === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n}\n", "/** @internal */\nexport const Color = {\n  Red: 0 as Node.Color,\n  Black: 1 << 0 as Node.Color\n} as const\n\nexport declare namespace Node {\n  export type Color = number & {\n    readonly Color: unique symbol\n  }\n}\n\nexport interface Node<out K, out V> {\n  color: Node.Color\n  key: K\n  value: V\n  left: Node<K, V> | undefined\n  right: Node<K, V> | undefined\n  count: number\n}\n\n/** @internal */\nexport const clone = <K, V>({\n  color,\n  count,\n  key,\n  left,\n  right,\n  value\n}: Node<K, V>) => ({\n  color,\n  key,\n  value,\n  left,\n  right,\n  count\n})\n\n/** @internal */\nexport function swap<K, V>(n: Node<K, V>, v: Node<K, V>) {\n  n.key = v.key\n  n.value = v.value\n  n.left = v.left\n  n.right = v.right\n  n.color = v.color\n  n.count = v.count\n}\n\n/** @internal */\nexport const repaint = <K, V>({\n  count,\n  key,\n  left,\n  right,\n  value\n}: Node<K, V>, color: Node.Color) => ({\n  color,\n  key,\n  value,\n  left,\n  right,\n  count\n})\n\n/** @internal */\nexport const recount = <K, V>(node: Node<K, V>) => {\n  node.count = 1 + (node.left?.count ?? 0) + (node.right?.count ?? 0)\n}\n", "import * as Chunk from \"../Chunk.js\"\nimport * as Equal from \"../Equal.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport type * as Order from \"../Order.js\"\nimport type * as Ordering from \"../Ordering.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as RBT from \"../RedBlackTree.js\"\nimport { Direction, RedBlackTreeIterator } from \"./redBlackTree/iterator.js\"\nimport * as Node from \"./redBlackTree/node.js\"\nimport * as Stack from \"./stack.js\"\n\nconst RedBlackTreeSymbolKey = \"effect/RedBlackTree\"\n\n/** @internal */\nexport const RedBlackTreeTypeId: RBT.TypeId = Symbol.for(RedBlackTreeSymbolKey) as RBT.TypeId\n\n/** @internal */\nexport interface RedBlackTreeImpl<in out K, out V> extends RBT.RedBlackTree<K, V> {\n  readonly _ord: Order.Order<K>\n  readonly _root: Node.Node<K, V> | undefined\n}\n\nconst redBlackTreeVariance = {\n  /* c8 ignore next */\n  _Key: (_: any) => _,\n  /* c8 ignore next */\n  _Value: (_: never) => _\n}\n\nconst RedBlackTreeProto: RBT.RedBlackTree<unknown, unknown> = {\n  [RedBlackTreeTypeId]: redBlackTreeVariance,\n  [Hash.symbol](this: RBT.RedBlackTree<unknown, unknown>): number {\n    let hash = Hash.hash(RedBlackTreeSymbolKey)\n    for (const item of this) {\n      hash ^= pipe(Hash.hash(item[0]), Hash.combine(Hash.hash(item[1])))\n    }\n    return Hash.cached(this, hash)\n  },\n  [Equal.symbol]<K, V>(this: RedBlackTreeImpl<K, V>, that: unknown): boolean {\n    if (isRedBlackTree(that)) {\n      if ((this._root?.count ?? 0) !== ((that as RedBlackTreeImpl<K, V>)._root?.count ?? 0)) {\n        return false\n      }\n      const entries = Array.from(that)\n      return Array.from(this).every((itemSelf, i) => {\n        const itemThat = entries[i]\n        return Equal.equals(itemSelf[0], itemThat[0]) && Equal.equals(itemSelf[1], itemThat[1])\n      })\n    }\n    return false\n  },\n  [Symbol.iterator]<K, V>(this: RedBlackTreeImpl<K, V>): RedBlackTreeIterator<K, V> {\n    const stack: Array<Node.Node<K, V>> = []\n    let n = this._root\n    while (n != null) {\n      stack.push(n)\n      n = n.left\n    }\n    return new RedBlackTreeIterator(this, stack, Direction.Forward)\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"RedBlackTree\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst makeImpl = <K, V>(ord: Order.Order<K>, root: Node.Node<K, V> | undefined): RedBlackTreeImpl<K, V> => {\n  const tree = Object.create(RedBlackTreeProto)\n  tree._ord = ord\n  tree._root = root\n  return tree\n}\n\n/** @internal */\nexport const isRedBlackTree: {\n  <K, V>(u: Iterable<readonly [K, V]>): u is RBT.RedBlackTree<K, V>\n  (u: unknown): u is RBT.RedBlackTree<unknown, unknown>\n} = (u: unknown): u is RBT.RedBlackTree<unknown, unknown> => hasProperty(u, RedBlackTreeTypeId)\n\n/** @internal */\nexport const empty = <K, V = never>(ord: Order.Order<K>): RBT.RedBlackTree<K, V> => makeImpl<K, V>(ord, undefined)\n\n/** @internal */\nexport const fromIterable = dual<\n  <B>(ord: Order.Order<B>) => <K extends B, V>(entries: Iterable<readonly [K, V]>) => RBT.RedBlackTree<K, V>,\n  <K extends B, V, B>(entries: Iterable<readonly [K, V]>, ord: Order.Order<B>) => RBT.RedBlackTree<K, V>\n>(2, <K extends B, V, B>(entries: Iterable<readonly [K, V]>, ord: Order.Order<B>) => {\n  let tree = empty<K, V>(ord)\n  for (const [key, value] of entries) {\n    tree = insert(tree, key, value)\n  }\n  return tree\n})\n\n/** @internal */\nexport const make =\n  <K>(ord: Order.Order<K>) =>\n  <Entries extends Array<readonly [K, any]>>(...entries: Entries): RBT.RedBlackTree<\n    K,\n    Entries[number] extends readonly [any, infer V] ? V : never\n  > => {\n    return fromIterable(entries, ord)\n  }\n\n/** @internal */\nexport const atBackwards = dual<\n  (index: number) => <K, V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => Iterable<[K, V]>\n>(2, (self, index) => at(self, index, Direction.Backward))\n\n/** @internal */\nexport const atForwards = dual<\n  (index: number) => <K, V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => Iterable<[K, V]>\n>(2, (self, index) => at(self, index, Direction.Forward))\n\nconst at = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  index: number,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      if (index < 0) {\n        return new RedBlackTreeIterator(self, [], direction)\n      }\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack: Array<Node.Node<K, V>> = []\n      while (node !== undefined) {\n        stack.push(node)\n        if (node.left !== undefined) {\n          if (index < node.left.count) {\n            node = node.left\n            continue\n          }\n          index -= node.left.count\n        }\n        if (!index) {\n          return new RedBlackTreeIterator(self, stack, direction)\n        }\n        index -= 1\n        if (node.right !== undefined) {\n          if (index >= node.right.count) {\n            break\n          }\n          node = node.right\n        } else {\n          break\n        }\n      }\n      return new RedBlackTreeIterator(self, [], direction)\n    }\n  }\n}\n\n/** @internal */\nexport const findAll = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Chunk.Chunk<V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Chunk.Chunk<V>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => {\n  const stack: Array<Node.Node<K, V>> = []\n  let node = (self as RedBlackTreeImpl<K, V>)._root\n  let result = Chunk.empty<V>()\n  while (node !== undefined || stack.length > 0) {\n    if (node) {\n      stack.push(node)\n      node = node.left\n    } else {\n      const current = stack.pop()!\n      if (Equal.equals(key, current.key)) {\n        result = Chunk.prepend(current.value)(result)\n      }\n      node = current.right\n    }\n  }\n  return result\n})\n\n/** @internal */\nexport const findFirst = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Option.Option<V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Option.Option<V>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => {\n  const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n  let node = (self as RedBlackTreeImpl<K, V>)._root\n  while (node !== undefined) {\n    const d = cmp(key, node.key)\n    if (Equal.equals(key, node.key)) {\n      return Option.some(node.value)\n    }\n    if (d <= 0) {\n      node = node.left\n    } else {\n      node = node.right\n    }\n  }\n  return Option.none()\n})\n\n/** @internal */\nexport const first = <K, V>(self: RBT.RedBlackTree<K, V>): Option.Option<[K, V]> => {\n  let node: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  let current: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  while (node !== undefined) {\n    current = node\n    node = node.left\n  }\n  return current ? Option.some([current.key, current.value]) : Option.none()\n}\n\n/** @internal */\nexport const getAt = dual<\n  (index: number) => <K, V>(self: RBT.RedBlackTree<K, V>) => Option.Option<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => Option.Option<[K, V]>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => {\n  if (index < 0) {\n    return Option.none()\n  }\n  let root = (self as RedBlackTreeImpl<K, V>)._root\n  let node: Node.Node<K, V> | undefined = undefined\n  while (root !== undefined) {\n    node = root\n    if (root.left) {\n      if (index < root.left.count) {\n        root = root.left\n        continue\n      }\n      index -= root.left.count\n    }\n    if (!index) {\n      return Option.some([node.key, node.value])\n    }\n    index -= 1\n    if (root.right) {\n      if (index >= root.right.count) {\n        break\n      }\n      root = root.right\n    } else {\n      break\n    }\n  }\n  return Option.none()\n})\n\n/** @internal */\nexport const getOrder = <K, V>(tree: RBT.RedBlackTree<K, V>): Order.Order<K> => (tree as RedBlackTreeImpl<K, V>)._ord\n\n/** @internal */\nexport const has = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => boolean,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => boolean\n>(2, (self, key) => Option.isSome(findFirst(self, key)))\n\n/** @internal */\nexport const insert = dual<\n  <K, V>(key: K, value: V) => (self: RBT.RedBlackTree<K, V>) => RBT.RedBlackTree<K, V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K, value: V) => RBT.RedBlackTree<K, V>\n>(3, <K, V>(self: RBT.RedBlackTree<K, V>, key: K, value: V) => {\n  const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n  // Find point to insert new node at\n  let n: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  const n_stack: Array<Node.Node<K, V>> = []\n  const d_stack: Array<Ordering.Ordering> = []\n  while (n != null) {\n    const d = cmp(key, n.key)\n    n_stack.push(n)\n    d_stack.push(d)\n    if (d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  // Rebuild path to leaf node\n  n_stack.push({\n    color: Node.Color.Red,\n    key,\n    value,\n    left: undefined,\n    right: undefined,\n    count: 1\n  })\n  for (let s = n_stack.length - 2; s >= 0; --s) {\n    const n2 = n_stack[s]!\n    if (d_stack[s]! <= 0) {\n      n_stack[s] = {\n        color: n2.color,\n        key: n2.key,\n        value: n2.value,\n        left: n_stack[s + 1],\n        right: n2.right,\n        count: n2.count + 1\n      }\n    } else {\n      n_stack[s] = {\n        color: n2.color,\n        key: n2.key,\n        value: n2.value,\n        left: n2.left,\n        right: n_stack[s + 1],\n        count: n2.count + 1\n      }\n    }\n  }\n  // Rebalance tree using rotations\n  for (let s = n_stack.length - 1; s > 1; --s) {\n    const p = n_stack[s - 1]!\n    const n3 = n_stack[s]!\n    if (p.color === Node.Color.Black || n3.color === Node.Color.Black) {\n      break\n    }\n    const pp = n_stack[s - 2]!\n    if (pp.left === p) {\n      if (p.left === n3) {\n        const y = pp.right\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.right = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          pp.color = Node.Color.Red\n          pp.left = p.right\n          p.color = Node.Color.Black\n          p.right = pp\n          n_stack[s - 2] = p\n          n_stack[s - 1] = n3\n          Node.recount(pp)\n          Node.recount(p)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.left === pp) {\n              ppp.left = p\n            } else {\n              ppp.right = p\n            }\n          }\n          break\n        }\n      } else {\n        const y = pp.right\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.right = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          p.right = n3.left\n          pp.color = Node.Color.Red\n          pp.left = n3.right\n          n3.color = Node.Color.Black\n          n3.left = p\n          n3.right = pp\n          n_stack[s - 2] = n3\n          n_stack[s - 1] = p\n          Node.recount(pp)\n          Node.recount(p)\n          Node.recount(n3)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.left === pp) {\n              ppp.left = n3\n            } else {\n              ppp.right = n3\n            }\n          }\n          break\n        }\n      }\n    } else {\n      if (p.right === n3) {\n        const y = pp.left\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.left = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          pp.color = Node.Color.Red\n          pp.right = p.left\n          p.color = Node.Color.Black\n          p.left = pp\n          n_stack[s - 2] = p\n          n_stack[s - 1] = n3\n          Node.recount(pp)\n          Node.recount(p)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.right === pp) {\n              ppp.right = p\n            } else {\n              ppp.left = p\n            }\n          }\n          break\n        }\n      } else {\n        const y = pp.left\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.left = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          p.left = n3.right\n          pp.color = Node.Color.Red\n          pp.right = n3.left\n          n3.color = Node.Color.Black\n          n3.right = p\n          n3.left = pp\n          n_stack[s - 2] = n3\n          n_stack[s - 1] = p\n          Node.recount(pp)\n          Node.recount(p)\n          Node.recount(n3)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.right === pp) {\n              ppp.right = n3\n            } else {\n              ppp.left = n3\n            }\n          }\n          break\n        }\n      }\n    }\n  }\n  // Return new tree\n  n_stack[0]!.color = Node.Color.Black\n  return makeImpl((self as RedBlackTreeImpl<K, V>)._ord, n_stack[0])\n})\n\n/** @internal */\nexport const keysForward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<K> => keys(self, Direction.Forward)\n\n/** @internal */\nexport const keysBackward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<K> => keys(self, Direction.Backward)\n\nconst keys = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  direction: RBT.RedBlackTree.Direction\n): IterableIterator<K> => {\n  const begin: RedBlackTreeIterator<K, V> = self[Symbol.iterator]() as RedBlackTreeIterator<K, V>\n  let count = 0\n  return {\n    [Symbol.iterator]: () => keys(self, direction),\n    next: (): IteratorResult<K, number> => {\n      count++\n      const entry = begin.key\n      if (direction === Direction.Forward) {\n        begin.moveNext()\n      } else {\n        begin.movePrev()\n      }\n      switch (entry._tag) {\n        case \"None\": {\n          return { done: true, value: count }\n        }\n        case \"Some\": {\n          return { done: false, value: entry.value }\n        }\n      }\n    }\n  }\n}\n\n/** @internal */\nexport const last = <K, V>(self: RBT.RedBlackTree<K, V>): Option.Option<[K, V]> => {\n  let node: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  let current: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  while (node !== undefined) {\n    current = node\n    node = node.right\n  }\n  return current ? Option.some([current.key, current.value]) : Option.none()\n}\n\n/** @internal */\nexport const reversed = <K, V>(self: RBT.RedBlackTree<K, V>): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const stack: Array<Node.Node<K, V>> = []\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      while (node !== undefined) {\n        stack.push(node)\n        node = node.right\n      }\n      return new RedBlackTreeIterator(self, stack, Direction.Backward)\n    }\n  }\n}\n\n/** @internal */\nexport const greaterThanBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThan(self, key, Direction.Backward))\n\n/** @internal */\nexport const greaterThanForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThan(self, key, Direction.Forward))\n\nconst greaterThan = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d < 0) {\n          last_ptr = stack.length\n        }\n        if (d < 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const greaterThanEqualBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThanEqual(self, key, Direction.Backward))\n\n/** @internal */\nexport const greaterThanEqualForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThanEqual(self, key, Direction.Forward))\n\nconst greaterThanEqual = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction = Direction.Forward\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d <= 0) {\n          last_ptr = stack.length\n        }\n        if (d <= 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const lessThanBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThan(self, key, Direction.Backward))\n\n/** @internal */\nexport const lessThanForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThan(self, key, Direction.Forward))\n\nconst lessThan = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d > 0) {\n          last_ptr = stack.length\n        }\n        if (d <= 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const lessThanEqualBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThanEqual(self, key, Direction.Backward))\n\n/** @internal */\nexport const lessThanEqualForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThanEqual(self, key, Direction.Forward))\n\nconst lessThanEqual = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d >= 0) {\n          last_ptr = stack.length\n        }\n        if (d < 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const forEach = dual<\n  <K, V>(f: (key: K, value: V) => void) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, f: (key: K, value: V) => void) => void\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, f: (key: K, value: V) => void) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  if (root !== undefined) {\n    visitFull(root, (key, value) => {\n      f(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const forEachGreaterThanEqual = dual<\n  <K, V>(min: K, f: (key: K, value: V) => void) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, min: K, f: (key: K, value: V) => void) => void\n>(3, <K, V>(self: RBT.RedBlackTree<K, V>, min: K, f: (key: K, value: V) => void) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  if (root !== undefined) {\n    visitGreaterThanEqual(root, min, ord, (key, value) => {\n      f(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const forEachLessThan = dual<\n  <K, V>(max: K, f: (key: K, value: V) => void) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, max: K, f: (key: K, value: V) => void) => void\n>(3, <K, V>(self: RBT.RedBlackTree<K, V>, max: K, f: (key: K, value: V) => void) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  if (root !== undefined) {\n    visitLessThan(root, max, ord, (key, value) => {\n      f(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const forEachBetween = dual<\n  <K, V>(options: {\n    readonly min: K\n    readonly max: K\n    readonly body: (key: K, value: V) => void\n  }) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, options: {\n    readonly min: K\n    readonly max: K\n    readonly body: (key: K, value: V) => void\n  }) => void\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, { body, max, min }: {\n  readonly min: K\n  readonly max: K\n  readonly body: (key: K, value: V) => void\n}) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  if (root) {\n    visitBetween(root, min, max, ord, (key, value) => {\n      body(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const reduce = dual<\n  <Z, V, K>(\n    zero: Z,\n    f: (accumulator: Z, value: V, key: K) => Z\n  ) => (self: RBT.RedBlackTree<K, V>) => Z,\n  <Z, V, K>(self: RBT.RedBlackTree<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => Z\n>(3, (self, zero, f) => {\n  let accumulator = zero\n  for (const entry of self) {\n    accumulator = f(accumulator, entry[1], entry[0])\n  }\n  return accumulator\n})\n\n/** @internal */\nexport const removeFirst = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => RBT.RedBlackTree<K, V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => RBT.RedBlackTree<K, V>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => {\n  if (!has(self, key)) {\n    return self\n  }\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  const cmp = ord\n  let node: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  const stack = []\n  while (node !== undefined) {\n    const d = cmp(key, node.key)\n    stack.push(node)\n    if (Equal.equals(key, node.key)) {\n      node = undefined\n    } else if (d <= 0) {\n      node = node.left\n    } else {\n      node = node.right\n    }\n  }\n  if (stack.length === 0) {\n    return self\n  }\n  const cstack = new Array<Node.Node<K, V>>(stack.length)\n  let n = stack[stack.length - 1]!\n  cstack[cstack.length - 1] = {\n    color: n.color,\n    key: n.key,\n    value: n.value,\n    left: n.left,\n    right: n.right,\n    count: n.count\n  }\n  for (let i = stack.length - 2; i >= 0; --i) {\n    n = stack[i]!\n    if (n.left === stack[i + 1]) {\n      cstack[i] = {\n        color: n.color,\n        key: n.key,\n        value: n.value,\n        left: cstack[i + 1],\n        right: n.right,\n        count: n.count\n      }\n    } else {\n      cstack[i] = {\n        color: n.color,\n        key: n.key,\n        value: n.value,\n        left: n.left,\n        right: cstack[i + 1],\n        count: n.count\n      }\n    }\n  }\n  // Get node\n  n = cstack[cstack.length - 1]!\n  // If not leaf, then swap with previous node\n  if (n.left !== undefined && n.right !== undefined) {\n    // First walk to previous leaf\n    const split = cstack.length\n    n = n.left\n    while (n.right != null) {\n      cstack.push(n)\n      n = n.right\n    }\n    // Copy path to leaf\n    const v = cstack[split - 1]\n    cstack.push({\n      color: n.color,\n      key: v!.key,\n      value: v!.value,\n      left: n.left,\n      right: n.right,\n      count: n.count\n    })\n    cstack[split - 1]!.key = n.key\n    cstack[split - 1]!.value = n.value\n    // Fix up stack\n    for (let i = cstack.length - 2; i >= split; --i) {\n      n = cstack[i]!\n      cstack[i] = {\n        color: n.color,\n        key: n.key,\n        value: n.value,\n        left: n.left,\n        right: cstack[i + 1],\n        count: n.count\n      }\n    }\n    cstack[split - 1]!.left = cstack[split]\n  }\n\n  // Remove leaf node\n  n = cstack[cstack.length - 1]!\n  if (n.color === Node.Color.Red) {\n    // Easy case: removing red leaf\n    const p = cstack[cstack.length - 2]!\n    if (p.left === n) {\n      p.left = undefined\n    } else if (p.right === n) {\n      p.right = undefined\n    }\n    cstack.pop()\n    for (let i = 0; i < cstack.length; ++i) {\n      cstack[i]!.count--\n    }\n    return makeImpl(ord, cstack[0])\n  } else {\n    if (n.left !== undefined || n.right !== undefined) {\n      // Second easy case:  Single child black parent\n      if (n.left !== undefined) {\n        Node.swap(n, n.left)\n      } else if (n.right !== undefined) {\n        Node.swap(n, n.right)\n      }\n      // Child must be red, so repaint it black to balance color\n      n.color = Node.Color.Black\n      for (let i = 0; i < cstack.length - 1; ++i) {\n        cstack[i]!.count--\n      }\n      return makeImpl(ord, cstack[0])\n    } else if (cstack.length === 1) {\n      // Third easy case: root\n      return makeImpl(ord, undefined)\n    } else {\n      // Hard case: Repaint n, and then do some nasty stuff\n      for (let i = 0; i < cstack.length; ++i) {\n        cstack[i]!.count--\n      }\n      const parent = cstack[cstack.length - 2]\n      fixDoubleBlack(cstack)\n      // Fix up links\n      if (parent!.left === n) {\n        parent!.left = undefined\n      } else {\n        parent!.right = undefined\n      }\n    }\n  }\n  return makeImpl(ord, cstack[0])\n})\n\n/** @internal */\nexport const size = <K, V>(self: RBT.RedBlackTree<K, V>): number => (self as RedBlackTreeImpl<K, V>)._root?.count ?? 0\n\n/** @internal */\nexport const valuesForward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<V> =>\n  values(self, Direction.Forward)\n\n/** @internal */\nexport const valuesBackward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<V> =>\n  values(self, Direction.Backward)\n\n/** @internal */\nconst values = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  direction: RBT.RedBlackTree.Direction\n): IterableIterator<V> => {\n  const begin: RedBlackTreeIterator<K, V> = self[Symbol.iterator]() as RedBlackTreeIterator<K, V>\n  let count = 0\n  return {\n    [Symbol.iterator]: () => values(self, direction),\n    next: (): IteratorResult<V, number> => {\n      count++\n      const entry = begin.value\n      if (direction === Direction.Forward) {\n        begin.moveNext()\n      } else {\n        begin.movePrev()\n      }\n      switch (entry._tag) {\n        case \"None\": {\n          return { done: true, value: count }\n        }\n        case \"Some\": {\n          return { done: false, value: entry.value }\n        }\n      }\n    }\n  }\n}\n\nconst visitFull = <K, V, A>(\n  node: Node.Node<K, V>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current != null) {\n      stack = Stack.make(current, stack)\n      current = current.left\n    } else if (stack != null) {\n      const value = visit(stack.value.key, stack.value.value)\n      if (Option.isSome(value)) {\n        return value\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\nconst visitGreaterThanEqual = <K, V, A>(\n  node: Node.Node<K, V>,\n  min: K,\n  ord: Order.Order<K>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current !== undefined) {\n      stack = Stack.make(current, stack)\n      if (ord(min, current.key) <= 0) {\n        current = current.left\n      } else {\n        current = undefined\n      }\n    } else if (stack !== undefined) {\n      if (ord(min, stack.value.key) <= 0) {\n        const value = visit(stack.value.key, stack.value.value)\n        if (Option.isSome(value)) {\n          return value\n        }\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\nconst visitLessThan = <K, V, A>(\n  node: Node.Node<K, V>,\n  max: K,\n  ord: Order.Order<K>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current !== undefined) {\n      stack = Stack.make(current, stack)\n      current = current.left\n    } else if (stack !== undefined && ord(max, stack.value.key) > 0) {\n      const value = visit(stack.value.key, stack.value.value)\n      if (Option.isSome(value)) {\n        return value\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\nconst visitBetween = <K, V, A>(\n  node: Node.Node<K, V>,\n  min: K,\n  max: K,\n  ord: Order.Order<K>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current !== undefined) {\n      stack = Stack.make(current, stack)\n      if (ord(min, current.key) <= 0) {\n        current = current.left\n      } else {\n        current = undefined\n      }\n    } else if (stack !== undefined && ord(max, stack.value.key) > 0) {\n      if (ord(min, stack.value.key) <= 0) {\n        const value = visit(stack.value.key, stack.value.value)\n        if (Option.isSome(value)) {\n          return value\n        }\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\n/**\n * Fix up a double black node in a Red-Black Tree.\n */\nconst fixDoubleBlack = <K, V>(stack: Array<Node.Node<K, V>>) => {\n  let n, p, s, z\n  for (let i = stack.length - 1; i >= 0; --i) {\n    n = stack[i]!\n    if (i === 0) {\n      n.color = Node.Color.Black\n      return\n    }\n    p = stack[i - 1]!\n    if (p.left === n) {\n      s = p.right\n      if (s !== undefined && s.right !== undefined && s.right.color === Node.Color.Red) {\n        s = p.right = Node.clone(s)\n        z = s.right = Node.clone(s.right!)\n        p.right = s.left\n        s.left = p\n        s.right = z\n        s.color = p.color\n        n.color = Node.Color.Black\n        p.color = Node.Color.Black\n        z.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i - 1] = s\n        return\n      } else if (s !== undefined && s.left !== undefined && s.left.color === Node.Color.Red) {\n        s = p.right = Node.clone(s)\n        z = s.left = Node.clone(s.left!)\n        p.right = z.left\n        s.left = z.right\n        z.left = p\n        z.right = s\n        z.color = p.color\n        p.color = Node.Color.Black\n        s.color = Node.Color.Black\n        n.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        Node.recount(z)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.left === p) {\n            pp.left = z\n          } else {\n            pp.right = z\n          }\n        }\n        stack[i - 1] = z\n        return\n      }\n      if (s !== undefined && s.color === Node.Color.Black) {\n        if (p.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          p.right = Node.repaint(s, Node.Color.Red)\n          return\n        } else {\n          p.right = Node.repaint(s, Node.Color.Red)\n          continue\n        }\n      } else if (s !== undefined) {\n        s = Node.clone(s)\n        p.right = s.left\n        s.left = p\n        s.color = p.color\n        p.color = Node.Color.Red\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i - 1] = s\n        stack[i] = p\n        if (i + 1 < stack.length) {\n          stack[i + 1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i + 2\n      }\n    } else {\n      s = p.left\n      if (s !== undefined && s.left !== undefined && s.left.color === Node.Color.Red) {\n        s = p.left = Node.clone(s)\n        z = s.left = Node.clone(s.left!)\n        p.left = s.right\n        s.right = p\n        s.left = z\n        s.color = p.color\n        n.color = Node.Color.Black\n        p.color = Node.Color.Black\n        z.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i - 1] = s\n        return\n      } else if (s !== undefined && s.right !== undefined && s.right.color === Node.Color.Red) {\n        s = p.left = Node.clone(s)\n        z = s.right = Node.clone(s.right!)\n        p.left = z.right\n        s.right = z.left\n        z.right = p\n        z.left = s\n        z.color = p.color\n        p.color = Node.Color.Black\n        s.color = Node.Color.Black\n        n.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        Node.recount(z)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.right === p) {\n            pp.right = z\n          } else {\n            pp.left = z\n          }\n        }\n        stack[i - 1] = z\n        return\n      }\n      if (s !== undefined && s.color === Node.Color.Black) {\n        if (p.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          p.left = Node.repaint(s, Node.Color.Red)\n          return\n        } else {\n          p.left = Node.repaint(s, Node.Color.Red)\n          continue\n        }\n      } else if (s !== undefined) {\n        s = Node.clone(s)\n        p.left = s.right\n        s.right = p\n        s.color = p.color\n        p.color = Node.Color.Red\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i - 1] = s\n        stack[i] = p\n        if (i + 1 < stack.length) {\n          stack[i + 1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i + 2\n      }\n    }\n  }\n}\n", "/**\n * @since 2.0.0\n */\nimport type { Chunk } from \"./Chunk.js\"\nimport type { Equal } from \"./Equal.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as RBT from \"./internal/redBlackTree.js\"\nimport * as RBTI from \"./internal/redBlackTree/iterator.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Order } from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\n\nconst TypeId: unique symbol = RBT.RedBlackTreeTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category constants\n */\nexport const Direction = RBTI.Direction\n\n/**\n * A Red-Black Tree.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface RedBlackTree<in out Key, out Value> extends Iterable<[Key, Value]>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _Key: Types.Invariant<Key>\n    readonly _Value: Types.Covariant<Value>\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace RedBlackTree {\n  /**\n   * @since 2.0.0\n   */\n  export type Direction = number & {\n    readonly Direction: unique symbol\n  }\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isRedBlackTree: {\n  <K, V>(u: Iterable<readonly [K, V]>): u is RedBlackTree<K, V>\n  (u: unknown): u is RedBlackTree<unknown, unknown>\n} = RBT.isRedBlackTree\n\n/**\n * Creates an empty `RedBlackTree`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <K, V = never>(ord: Order<K>) => RedBlackTree<K, V> = RBT.empty\n\n/**\n * Creates a new `RedBlackTree` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: {\n  <B>(ord: Order<B>): <K extends B, V>(entries: Iterable<readonly [K, V]>) => RedBlackTree<K, V>\n  <K extends B, V, B>(entries: Iterable<readonly [K, V]>, ord: Order<B>): RedBlackTree<K, V>\n} = RBT.fromIterable\n\n/**\n * Constructs a new `RedBlackTree` from the specified entries.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <K>(\n  ord: Order<K>\n) => <Entries extends Array<readonly [K, any]>>(\n  ...entries: Entries\n) => RedBlackTree<K, Entries[number] extends readonly [any, infer V] ? V : never> = RBT.make\n\n/**\n * Returns an iterator that points to the element at the specified index of the\n * tree.\n *\n * **Note**: The iterator will run through elements in order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const at: {\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, index: number): Iterable<[K, V]>\n} = RBT.atForwards\n\n/**\n * Returns an iterator that points to the element at the specified index of the\n * tree.\n *\n * **Note**: The iterator will run through elements in reverse order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const atReversed: {\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, index: number): Iterable<[K, V]>\n} = RBT.atBackwards\n\n/**\n * Finds all values in the tree associated with the specified key.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const findAll: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Chunk<V>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Chunk<V>\n} = RBT.findAll\n\n/**\n * Finds the first value in the tree associated with the specified key, if it exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Option<V>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Option<V>\n} = RBT.findFirst\n\n/**\n * Returns the first entry in the tree, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const first: <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]> = RBT.first\n\n/**\n * Returns the element at the specified index within the tree or `None` if the\n * specified index does not exist.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const getAt: {\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, index: number): Option<[K, V]>\n} = RBT.getAt\n\n/**\n * Gets the `Order<K>` that the `RedBlackTree<K, V>` is using.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrder: <K, V>(self: RedBlackTree<K, V>) => Order<K> = RBT.getOrder\n\n/**\n * Returns an iterator that traverse entries in order with keys greater than the\n * specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThan: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys greater\n * than the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanReversed: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanBackwards\n\n/**\n * Returns an iterator that traverse entries in order with keys greater than or\n * equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanEqual: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanEqualForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys greater\n * than or equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanEqualReversed: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanEqualBackwards\n\n/**\n * Finds the item with key, if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => boolean\n  <K, V>(self: RedBlackTree<K, V>, key: K): boolean\n} = RBT.has\n\n/**\n * Insert a new item into the tree.\n *\n * @since 2.0.0\n */\nexport const insert: {\n  <K, V>(key: K, value: V): (self: RedBlackTree<K, V>) => RedBlackTree<K, V>\n  <K, V>(self: RedBlackTree<K, V>, key: K, value: V): RedBlackTree<K, V>\n} = RBT.insert\n\n/**\n * Get all the keys present in the tree in order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keys: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<K> = RBT.keysForward\n\n/**\n * Get all the keys present in the tree in reverse order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keysReversed: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<K> = RBT.keysBackward\n\n/**\n * Returns the last entry in the tree, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const last: <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]> = RBT.last\n\n/**\n * Returns an iterator that traverse entries in order with keys less than the\n * specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThan: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys less\n * than the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanReversed: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanBackwards\n\n/**\n * Returns an iterator that traverse entries in order with keys less than or\n * equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanEqual: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanEqualForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys less\n * than or equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanEqualReversed: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanEqualBackwards\n\n/**\n * Execute the specified function for each node of the tree, in order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  <K, V>(f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  <K, V>(self: RedBlackTree<K, V>, f: (key: K, value: V) => void): void\n} = RBT.forEach\n\n/**\n * Visit each node of the tree in order with key greater then or equal to max.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachGreaterThanEqual: {\n  <K, V>(min: K, f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  <K, V>(self: RedBlackTree<K, V>, min: K, f: (key: K, value: V) => void): void\n} = RBT.forEachGreaterThanEqual\n\n/**\n * Visit each node of the tree in order with key lower then max.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachLessThan: {\n  <K, V>(max: K, f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  <K, V>(self: RedBlackTree<K, V>, max: K, f: (key: K, value: V) => void): void\n} = RBT.forEachLessThan\n\n/**\n * Visit each node of the tree in order with key lower than max and greater\n * than or equal to min.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachBetween: {\n  <K, V>(\n    options: {\n      readonly min: K\n      readonly max: K\n      readonly body: (key: K, value: V) => void\n    }\n  ): (self: RedBlackTree<K, V>) => void\n  <K, V>(\n    self: RedBlackTree<K, V>,\n    options: {\n      readonly min: K\n      readonly max: K\n      readonly body: (key: K, value: V) => void\n    }\n  ): void\n} = RBT.forEachBetween\n\n/**\n * Reduce a state over the entries of the tree.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: RedBlackTree<K, V>) => Z\n  <Z, V, K>(self: RedBlackTree<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z): Z\n} = RBT.reduce\n\n/**\n * Removes the entry with the specified key, if it exists.\n *\n * @since 2.0.0\n */\nexport const removeFirst: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => RedBlackTree<K, V>\n  <K, V>(self: RedBlackTree<K, V>, key: K): RedBlackTree<K, V>\n} = RBT.removeFirst\n\n/**\n * Traverse the tree in reverse order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const reversed: <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]> = RBT.reversed\n\n/**\n * Returns the size of the tree.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <K, V>(self: RedBlackTree<K, V>) => number = RBT.size\n\n/**\n * Get all values present in the tree in order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<V> = RBT.valuesForward\n\n/**\n * Get all values present in the tree in reverse order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const valuesReversed: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<V> = RBT.valuesBackward\n", "/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport type * as Equivalence from \"./Equivalence.js\"\nimport * as Dual from \"./Function.js\"\nimport { pipe } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Order } from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport type { Predicate } from \"./Predicate.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport * as RBT from \"./RedBlackTree.js\"\nimport type { Invariant, NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/SortedSet\")\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SortedSet<in out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _A: Invariant<A>\n  }\n  /** @internal */\n  readonly keyTree: RBT.RedBlackTree<A, boolean>\n}\n\nconst SortedSetProto: Omit<SortedSet<unknown>, \"keyTree\"> = {\n  [TypeId]: {\n    _A: (_: any) => _\n  },\n  [Hash.symbol]<A>(this: SortedSet<A>): number {\n    return pipe(\n      Hash.hash(this.keyTree),\n      Hash.combine(Hash.hash(TypeId)),\n      Hash.cached(this)\n    )\n  },\n  [Equal.symbol]<A>(this: SortedSet<A>, that: unknown): boolean {\n    return isSortedSet(that) && Equal.equals(this.keyTree, that.keyTree)\n  },\n  [Symbol.iterator]<A>(this: SortedSet<A>): Iterator<A> {\n    return RBT.keys(this.keyTree)\n  },\n  toString<A>(this: SortedSet<A>) {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"SortedSet\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst fromTree = <A>(keyTree: RBT.RedBlackTree<A, boolean>): SortedSet<A> => {\n  const a = Object.create(SortedSetProto)\n  a.keyTree = keyTree\n  return a\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isSortedSet: {\n  <A>(u: Iterable<A>): u is SortedSet<A>\n  (u: unknown): u is SortedSet<unknown>\n} = (u: unknown): u is SortedSet<unknown> => hasProperty(u, TypeId)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <A>(O: Order<A>): SortedSet<A> => fromTree(RBT.empty(O))\n\n/**\n * Creates a new `SortedSet` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: {\n  <B>(ord: Order<B>): <A extends B>(iterable: Iterable<A>) => SortedSet<A>\n  <A extends B, B>(iterable: Iterable<A>, ord: Order<B>): SortedSet<A>\n} = Dual.dual(\n  2,\n  <A extends B, B>(iterable: Iterable<A>, ord: Order<B>): SortedSet<A> =>\n    fromTree(RBT.fromIterable(Array.from(iterable).map((k) => [k, true]), ord))\n)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make =\n  <K>(ord: Order<K>) => <Entries extends ReadonlyArray<K>>(...entries: Entries): SortedSet<Entries[number]> =>\n    fromIterable(entries, ord)\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const add: {\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) =>\n  RBT.has(self.keyTree, value)\n    ? self\n    : fromTree(RBT.insert(self.keyTree, value, true)))\n\n/**\n * @since 2.0.0\n */\nexport const difference: {\n  <A, B extends A>(that: Iterable<B>): (self: SortedSet<A>) => SortedSet<A>\n  <A, B extends A>(self: SortedSet<A>, that: Iterable<B>): SortedSet<A>\n} = Dual.dual<\n  <A, B extends A>(that: Iterable<B>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A, B extends A>(self: SortedSet<A>, that: Iterable<B>) => SortedSet<A>\n>(2, <A, B extends A>(self: SortedSet<A>, that: Iterable<B>) => {\n  let out = self\n  for (const value of that) {\n    out = remove<A | B>(out, value)\n  }\n  return out\n})\n\n/**\n * Check if a predicate holds true for every `SortedSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  <A>(predicate: Predicate<A>): (self: SortedSet<A>) => boolean\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean\n} = Dual.dual(2, <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean => {\n  for (const value of self) {\n    if (!predicate(value)) {\n      return false\n    }\n  }\n  return true\n})\n\n/**\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  <A, B extends A>(predicate: Predicate<B>): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): SortedSet<A>\n} = Dual.dual(2, <A>(self: SortedSet<A>, predicate: Predicate<A>): SortedSet<A> => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty<A>(ord)\n  for (const value of self) {\n    if (predicate(value)) {\n      out = add(out, value)\n    }\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <B, A>(O: Order<B>, f: (a: A) => Iterable<B>): (self: SortedSet<A>) => SortedSet<B>\n  <A, B>(self: SortedSet<A>, O: Order<B>, f: (a: A) => Iterable<B>): SortedSet<B>\n} = Dual.dual<\n  <B, A>(O: Order<B>, f: (a: A) => Iterable<B>) => (self: SortedSet<A>) => SortedSet<B>,\n  <A, B>(self: SortedSet<A>, O: Order<B>, f: (a: A) => Iterable<B>) => SortedSet<B>\n>(3, (self, O, f) => {\n  let out = empty(O)\n  forEach(self, (a) => {\n    for (const b of f(a)) {\n      out = add(out, b)\n    }\n  })\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  <A>(f: (a: A) => void): (self: SortedSet<A>) => void\n  <A>(self: SortedSet<A>, f: (a: A) => void): void\n} = Dual.dual<\n  <A>(f: (a: A) => void) => (self: SortedSet<A>) => void,\n  <A>(self: SortedSet<A>, f: (a: A) => void) => void\n>(2, (self, f) => RBT.forEach(self.keyTree, f))\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  <A>(value: A): (self: SortedSet<A>) => boolean\n  <A>(self: SortedSet<A>, value: A): boolean\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, value: A) => boolean\n>(2, (self, value) => RBT.has(self.keyTree, value))\n\n/**\n * @since 2.0.0\n */\nexport const intersection: {\n  <A>(that: Iterable<A>): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, that: Iterable<A>): SortedSet<A>\n} = Dual.dual<\n  <A>(that: Iterable<A>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, that: Iterable<A>) => SortedSet<A>\n>(2, (self, that) => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty(ord)\n  for (const value of that) {\n    if (has(self, value)) {\n      out = add(out, value)\n    }\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const isSubset: {\n  <A>(that: SortedSet<A>): (self: SortedSet<A>) => boolean\n  <A>(self: SortedSet<A>, that: SortedSet<A>): boolean\n} = Dual.dual<\n  <A>(that: SortedSet<A>) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, that: SortedSet<A>) => boolean\n>(2, (self, that) => every(self, (a) => has(that, a)))\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <B, A>(O: Order<B>, f: (a: A) => B): (self: SortedSet<A>) => SortedSet<B>\n  <B, A>(self: SortedSet<A>, O: Order<B>, f: (a: A) => B): SortedSet<B>\n} = Dual.dual<\n  <B, A>(O: Order<B>, f: (a: A) => B) => (self: SortedSet<A>) => SortedSet<B>,\n  <B, A>(self: SortedSet<A>, O: Order<B>, f: (a: A) => B) => SortedSet<B>\n>(3, (self, O, f) => {\n  let out = empty(O)\n  forEach(self, (a) => {\n    const b = f(a)\n    if (!has(out, b)) {\n      out = add(out, b)\n    }\n  })\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category filtering\n */\nexport const partition: {\n  <A>(\n    predicate: (a: NoInfer<A>) => boolean\n  ): (self: SortedSet<A>) => [excluded: SortedSet<A>, satisfying: SortedSet<A>]\n  <A>(self: SortedSet<A>, predicate: (a: A) => boolean): [excluded: SortedSet<A>, satisfying: SortedSet<A>]\n} = Dual.dual(\n  2,\n  <A>(self: SortedSet<A>, predicate: (a: A) => boolean): [excluded: SortedSet<A>, satisfying: SortedSet<A>] => {\n    const ord = RBT.getOrder(self.keyTree)\n    let right = empty(ord)\n    let left = empty(ord)\n    for (const value of self) {\n      if (predicate(value)) {\n        right = add(right, value)\n      } else {\n        left = add(left, value)\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const remove: {\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) => fromTree(RBT.removeFirst(self.keyTree, value)))\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const size = <A>(self: SortedSet<A>): number => RBT.size(self.keyTree)\n\n/**\n * Check if a predicate holds true for some `SortedSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  <A>(predicate: Predicate<A>): (self: SortedSet<A>) => boolean\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean\n} = Dual.dual<\n  <A>(predicate: Predicate<A>) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, predicate: Predicate<A>) => boolean\n>(2, (self, predicate) => {\n  for (const value of self) {\n    if (predicate(value)) {\n      return true\n    }\n  }\n  return false\n})\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const toggle: {\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) => has(self, value) ? remove(self, value) : add(self, value))\n\n/**\n * @since 2.0.0\n */\nexport const union: {\n  <A>(that: Iterable<A>): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, that: Iterable<A>): SortedSet<A>\n} = Dual.dual<\n  <A>(that: Iterable<A>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, that: Iterable<A>) => SortedSet<A>\n>(2, <A>(self: SortedSet<A>, that: Iterable<A>) => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty<A>(ord)\n  for (const value of self) {\n    out = add(value)(out)\n  }\n  for (const value of that) {\n    out = add(value)(out)\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const values = <A>(self: SortedSet<A>): IterableIterator<A> => RBT.keys(self.keyTree)\n\n/**\n * @since 2.0.0\n * @category equivalence\n */\nexport const getEquivalence = <A>(): Equivalence.Equivalence<SortedSet<A>> => (a, b) => isSubset(a, b) && isSubset(b, a)\n", "import type * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport { pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport type * as Option from \"../Option.js\"\nimport { hasProperty, isTagged } from \"../Predicate.js\"\nimport * as SortedSet from \"../SortedSet.js\"\nimport type * as Supervisor from \"../Supervisor.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nconst SupervisorSymbolKey = \"effect/Supervisor\"\n\n/** @internal */\nexport const SupervisorTypeId: Supervisor.SupervisorTypeId = Symbol.for(\n  SupervisorSymbolKey\n) as Supervisor.SupervisorTypeId\n\n/** @internal */\nexport const supervisorVariance = {\n  /* c8 ignore next */\n  _T: (_: never) => _\n}\n\n/** @internal */\nexport class ProxySupervisor<out T> implements Supervisor.Supervisor<T> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(\n    readonly underlying: Supervisor.Supervisor<any>,\n    readonly value0: Effect.Effect<T>\n  ) {\n  }\n\n  get value(): Effect.Effect<T> {\n    return this.value0\n  }\n\n  onStart<A, E, R>(\n    context: Context.Context<R>,\n    effect: Effect.Effect<A, E, R>,\n    parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    this.underlying.onStart(context, effect, parent, fiber)\n  }\n\n  onEnd<A, E>(value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.underlying.onEnd(value, fiber)\n  }\n\n  onEffect<A, E>(fiber: Fiber.RuntimeFiber<A, E>, effect: Effect.Effect<any, any, any>): void {\n    this.underlying.onEffect(fiber, effect)\n  }\n\n  onSuspend<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.underlying.onSuspend(fiber)\n  }\n\n  onResume<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.underlying.onResume(fiber)\n  }\n\n  map<B>(f: (a: T) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<B>(right: Supervisor.Supervisor<B>): Supervisor.Supervisor<[T, B]> {\n    return new Zip(this, right)\n  }\n}\n\n/** @internal */\nexport class Zip<out T0, out T1> implements Supervisor.Supervisor<readonly [T0, T1]> {\n  readonly _tag = \"Zip\"\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(\n    readonly left: Supervisor.Supervisor<T0>,\n    readonly right: Supervisor.Supervisor<T1>\n  ) {\n  }\n\n  get value(): Effect.Effect<[T0, T1]> {\n    return core.zip(this.left.value, this.right.value)\n  }\n\n  onStart<A, E, R>(\n    context: Context.Context<R>,\n    effect: Effect.Effect<A, E, R>,\n    parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    this.left.onStart(context, effect, parent, fiber)\n    this.right.onStart(context, effect, parent, fiber)\n  }\n\n  onEnd<A, E>(value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.left.onEnd(value, fiber)\n    this.right.onEnd(value, fiber)\n  }\n\n  onEffect<A, E>(fiber: Fiber.RuntimeFiber<A, E>, effect: Effect.Effect<any, any, any>): void {\n    this.left.onEffect(fiber, effect)\n    this.right.onEffect(fiber, effect)\n  }\n\n  onSuspend<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.left.onSuspend(fiber)\n    this.right.onSuspend(fiber)\n  }\n\n  onResume<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.left.onResume(fiber)\n    this.right.onResume(fiber)\n  }\n\n  map<B>(f: (a: [T0, T1]) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(right: Supervisor.Supervisor<A>): Supervisor.Supervisor<[[T0, T1], A]> {\n    return new Zip(this, right)\n  }\n}\n\n/** @internal */\nexport const isZip = (self: unknown): self is Zip<any, any> =>\n  hasProperty(self, SupervisorTypeId) && isTagged(self, \"Zip\")\n\n/** @internal */\nexport class Track implements Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  readonly fibers: Set<Fiber.RuntimeFiber<any, any>> = new Set()\n\n  get value(): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> {\n    return core.sync(() => Array.from(this.fibers))\n  }\n\n  onStart<A, E, R>(\n    _context: Context.Context<R>,\n    _effect: Effect.Effect<A, E, R>,\n    _parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    this.fibers.add(fiber)\n  }\n\n  onEnd<A, E>(_value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.fibers.delete(fiber)\n  }\n\n  onEffect<A, E>(_fiber: Fiber.RuntimeFiber<A, E>, _effect: Effect.Effect<any, any, any>): void {\n    //\n  }\n\n  onSuspend<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onResume<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  map<B>(f: (a: Array<Fiber.RuntimeFiber<any, any>>) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(\n    right: Supervisor.Supervisor<A>\n  ): Supervisor.Supervisor<[Array<Fiber.RuntimeFiber<any, any>>, A]> {\n    return new Zip(this, right)\n  }\n\n  onRun<E, A, X>(execution: () => X, _fiber: Fiber.RuntimeFiber<A, E>): X {\n    return execution()\n  }\n}\n\n/** @internal */\nexport class Const<out T> implements Supervisor.Supervisor<T> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(readonly effect: Effect.Effect<T>) {\n  }\n\n  get value(): Effect.Effect<T> {\n    return this.effect\n  }\n\n  onStart<A, E, R>(\n    _context: Context.Context<R>,\n    _effect: Effect.Effect<A, E, R>,\n    _parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    _fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    //\n  }\n\n  onEnd<A, E>(_value: Exit.Exit<A, E>, _fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onEffect<A, E>(_fiber: Fiber.RuntimeFiber<A, E>, _effect: Effect.Effect<any, any, any>): void {\n    //\n  }\n\n  onSuspend<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onResume<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  map<B>(f: (a: T) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(right: Supervisor.Supervisor<A>): Supervisor.Supervisor<[T, A]> {\n    return new Zip(this, right)\n  }\n\n  onRun<E, A, X>(execution: () => X, _fiber: Fiber.RuntimeFiber<A, E>): X {\n    return execution()\n  }\n}\n\nclass FibersIn implements Supervisor.Supervisor<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(readonly ref: MutableRef.MutableRef<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>>) {\n  }\n\n  get value(): Effect.Effect<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>> {\n    return core.sync(() => MutableRef.get(this.ref))\n  }\n\n  onStart<A, E, R>(\n    _context: Context.Context<R>,\n    _effect: Effect.Effect<A, E, R>,\n    _parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    pipe(this.ref, MutableRef.set(pipe(MutableRef.get(this.ref), SortedSet.add(fiber))))\n  }\n\n  onEnd<A, E>(_value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    pipe(this.ref, MutableRef.set(pipe(MutableRef.get(this.ref), SortedSet.remove(fiber))))\n  }\n\n  onEffect<A, E>(_fiber: Fiber.RuntimeFiber<A, E>, _effect: Effect.Effect<any, any, any>): void {\n    //\n  }\n\n  onSuspend<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onResume<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  map<B>(f: (a: SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(\n    right: Supervisor.Supervisor<A>\n  ): Supervisor.Supervisor<[SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>, A]> {\n    return new Zip(this, right)\n  }\n\n  onRun<E, A, X>(execution: () => X, _fiber: Fiber.RuntimeFiber<A, E>): X {\n    return execution()\n  }\n}\n\n/** @internal */\nexport const unsafeTrack = (): Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>> => {\n  return new Track()\n}\n\n/** @internal */\nexport const track: Effect.Effect<Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>>> = core.sync(unsafeTrack)\n\n/** @internal */\nexport const fromEffect = <A>(effect: Effect.Effect<A>): Supervisor.Supervisor<A> => {\n  return new Const(effect)\n}\n\n/** @internal */\nexport const none = globalValue(\"effect/Supervisor/none\", () => fromEffect(core.void))\n\n/** @internal */\nexport const fibersIn = (\n  ref: MutableRef.MutableRef<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>>\n): Effect.Effect<Supervisor.Supervisor<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>>> =>\n  core.sync(() => new FibersIn(ref))\n", "/**\n * @since 2.0.0\n */\nimport type { Chunk } from \"./Chunk.js\"\nimport type { Context } from \"./Context.js\"\nimport type { Either } from \"./Either.js\"\nimport type { Equal } from \"./Equal.js\"\nimport * as Dual from \"./Function.js\"\nimport type { HashMap } from \"./HashMap.js\"\nimport type { HashSet } from \"./HashSet.js\"\nimport * as internal from \"./internal/differ.js\"\nimport * as ChunkPatch from \"./internal/differ/chunkPatch.js\"\nimport * as ContextPatch from \"./internal/differ/contextPatch.js\"\nimport * as HashMapPatch from \"./internal/differ/hashMapPatch.js\"\nimport * as HashSetPatch from \"./internal/differ/hashSetPatch.js\"\nimport * as OrPatch from \"./internal/differ/orPatch.js\"\nimport * as ReadonlyArrayPatch from \"./internal/differ/readonlyArrayPatch.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const TypeId: unique symbol = internal.DifferTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * A `Differ<Value, Patch>` knows how to compare an old value and new value of\n * type `Value` to produce a patch of type `Patch` that describes the\n * differences between those values. A `Differ` also knows how to apply a patch\n * to an old value to produce a new value that represents the old value updated\n * with the changes described by the patch.\n *\n * A `Differ` can be used to construct a `FiberRef` supporting compositional\n * updates using the `FiberRef.makePatch` constructor.\n *\n * The `Differ` companion object contains constructors for `Differ` values for\n * common data types such as `Chunk`, `HashMap`, and `HashSet``. In addition,\n * `Differ`values can be transformed using the `transform` operator and combined\n * using the `orElseEither` and `zip` operators. This allows creating `Differ`\n * values for arbitrarily complex data types compositionally.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Differ<in out Value, in out Patch> {\n  readonly [TypeId]: {\n    readonly _V: Types.Invariant<Value>\n    readonly _P: Types.Invariant<Patch>\n  }\n  readonly empty: Patch\n  diff(oldValue: Value, newValue: Value): Patch\n  combine(first: Patch, second: Patch): Patch\n  patch(patch: Patch, oldValue: Value): Value\n}\n\nconst ChunkPatchTypeId: unique symbol = ChunkPatch.ChunkPatchTypeId as Differ.Chunk.TypeId\nconst ContextPatchTypeId: unique symbol = ContextPatch.ContextPatchTypeId as Differ.Context.TypeId\nconst HashMapPatchTypeId: unique symbol = HashMapPatch.HashMapPatchTypeId as Differ.HashMap.TypeId\nconst HashSetPatchTypeId: unique symbol = HashSetPatch.HashSetPatchTypeId as Differ.HashSet.TypeId\nconst OrPatchTypeId: unique symbol = OrPatch.OrPatchTypeId as Differ.Or.TypeId\nconst ReadonlyArrayPatchTypeId: unique symbol = ReadonlyArrayPatch\n  .ReadonlyArrayPatchTypeId as Differ.ReadonlyArray.TypeId\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Differ {\n  /**\n   * @since 2.0.0\n   */\n  export namespace Context {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ContextPatchTypeId\n    /**\n     * A `Patch<Input, Output>` describes an update that transforms a `Env<Input>`\n     * to a `Env<Output>` as a data structure. This allows combining updates to\n     * different services in the environment in a compositional way.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in Input, out Output> extends Equal {\n      readonly [ContextPatchTypeId]: {\n        readonly _Input: Types.Contravariant<Input>\n        readonly _Output: Types.Covariant<Output>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace Chunk {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ChunkPatchTypeId\n    /**\n     * A patch which describes updates to a chunk of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Patch> extends Equal {\n      readonly [ChunkPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace HashMap {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof HashMapPatchTypeId\n    /**\n     * A patch which describes updates to a map of keys and values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Key, in out Value, in out Patch> extends Equal {\n      readonly [HashMapPatchTypeId]: {\n        readonly _Key: Types.Invariant<Key>\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace HashSet {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof HashSetPatchTypeId\n    /**\n     * A patch which describes updates to a set of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value> extends Equal {\n      readonly [HashSetPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace Or {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof OrPatchTypeId\n    /**\n     * A patch which describes updates to either one value or another.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Value2, in out Patch, in out Patch2> extends Equal {\n      readonly [OrPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Value2: Types.Invariant<Value2>\n        readonly _Patch: Types.Invariant<Patch>\n        readonly _Patch2: Types.Invariant<Patch2>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace ReadonlyArray {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ReadonlyArrayPatchTypeId\n    /**\n     * A patch which describes updates to a ReadonlyArray of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Patch> extends Equal {\n      readonly [ReadonlyArrayPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n}\n\n/**\n * An empty patch that describes no changes.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const empty: <Value, Patch>(self: Differ<Value, Patch>) => Patch = (\n  self\n) => self.empty\n\n/**\n * @since 2.0.0\n * @category patch\n */\nexport const diff: {\n  <Value>(oldValue: Value, newValue: Value): <Patch>(\n    self: Differ<Value, Patch>\n  ) => Patch\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    oldValue: Value,\n    newValue: Value\n  ): Patch\n} = Dual.dual(\n  3,\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    oldValue: Value,\n    newValue: Value\n  ): Patch => self.diff(oldValue, newValue)\n)\n\n/**\n * Combines two patches to produce a new patch that describes the updates of\n * the first patch and then the updates of the second patch. The combine\n * operation should be associative. In addition, if the combine operation is\n * commutative then joining multiple fibers concurrently will result in\n * deterministic `FiberRef` values.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const combine: {\n  <Patch>(first: Patch, second: Patch): <Value>(\n    self: Differ<Value, Patch>\n  ) => Patch\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    first: Patch,\n    second: Patch\n  ): Patch\n} = Dual.dual(\n  3,\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    first: Patch,\n    second: Patch\n  ): Patch => self.combine(first, second)\n)\n\n/**\n * Applies a patch to an old value to produce a new value that is equal to the\n * old value with the updates described by the patch.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const patch: {\n  <Patch, Value>(patch: Patch, oldValue: Value): (\n    self: Differ<Value, Patch>\n  ) => Value\n  <Patch, Value>(\n    self: Differ<Value, Patch>,\n    patch: Patch,\n    oldValue: Value\n  ): Value\n} = Dual.dual(\n  3,\n  <Patch, Value>(\n    self: Differ<Value, Patch>,\n    patch: Patch,\n    oldValue: Value\n  ): Value => self.patch(patch, oldValue)\n)\n\n/**\n * Constructs a new `Differ`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Value, Patch>(params: {\n  readonly empty: Patch\n  readonly diff: (oldValue: Value, newValue: Value) => Patch\n  readonly combine: (first: Patch, second: Patch) => Patch\n  readonly patch: (patch: Patch, oldValue: Value) => Value\n}) => Differ<Value, Patch> = internal.make\n\n/**\n * Constructs a differ that knows how to diff `Env` values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const environment: <A>() => Differ<\n  Context<A>,\n  Differ.Context.Patch<A, A>\n> = internal.environment\n\n/**\n * Constructs a differ that knows how to diff a `Chunk` of values given a\n * differ that knows how to diff the values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const chunk: <Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<Chunk<Value>, Differ.Chunk.Patch<Value, Patch>> = internal.chunk\n\n/**\n * Constructs a differ that knows how to diff a `HashMap` of keys and values given\n * a differ that knows how to diff the values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashMap: <Key, Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<HashMap<Key, Value>, Differ.HashMap.Patch<Key, Value, Patch>> = internal.hashMap\n\n/**\n * Constructs a differ that knows how to diff a `HashSet` of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashSet: <Value>() => Differ<\n  HashSet<Value>,\n  Differ.HashSet.Patch<Value>\n> = internal.hashSet\n\n/**\n * Combines this differ and the specified differ to produce a differ that\n * knows how to diff the sum of their values.\n *\n * @since 2.0.0\n */\nexport const orElseEither: {\n  <Value2, Patch2>(that: Differ<Value2, Patch2>): <Value, Patch>(\n    self: Differ<Value, Patch>\n  ) => Differ<\n    Either<Value2, Value>,\n    Differ.Or.Patch<Value, Value2, Patch, Patch2>\n  >\n  <Value, Patch, Value2, Patch2>(\n    self: Differ<Value, Patch>,\n    that: Differ<Value2, Patch2>\n  ): Differ<\n    Either<Value2, Value>,\n    Differ.Or.Patch<Value, Value2, Patch, Patch2>\n  >\n} = internal.orElseEither\n\n/**\n * Constructs a differ that knows how to diff a `ReadonlyArray` of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const readonlyArray: <Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<ReadonlyArray<Value>, Differ.ReadonlyArray.Patch<Value, Patch>> = internal.readonlyArray\n\n/**\n * Transforms the type of values that this differ knows how to differ using\n * the specified functions that map the new and old value types to each other.\n *\n * @since 2.0.0\n */\nexport const transform: {\n  <Value, Value2>(options: {\n    readonly toNew: (value: Value) => Value2\n    readonly toOld: (value: Value2) => Value\n  }): <Patch>(self: Differ<Value, Patch>) => Differ<Value2, Patch>\n  <Value, Patch, Value2>(\n    self: Differ<Value, Patch>,\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ): Differ<Value2, Patch>\n} = internal.transform\n\n/**\n * Constructs a differ that just diffs two values by returning a function that\n * sets the value to the new value. This differ does not support combining\n * multiple updates to the value compositionally and should only be used when\n * there is no compositional way to update them.\n *\n * @since 2.0.0\n */\nexport const update: <A>() => Differ<A, (a: A) => A> = internal.update\n\n/**\n * A variant of `update` that allows specifying the function that will be used\n * to combine old values with new values.\n *\n * @since 2.0.0\n */\nexport const updateWith: <A>(f: (x: A, y: A) => A) => Differ<A, (a: A) => A> = internal.updateWith\n\n/**\n * Combines this differ and the specified differ to produce a new differ that\n * knows how to diff the product of their values.\n *\n * @since 2.0.0\n */\nexport const zip: {\n  <Value2, Patch2>(that: Differ<Value2, Patch2>): <Value, Patch>(\n    self: Differ<Value, Patch>\n  ) => Differ<\n    readonly [Value, Value2], // readonly because invariant\n    readonly [Patch, Patch2] // readonly because invariant\n  >\n  <Value, Patch, Value2, Patch2>(\n    self: Differ<Value, Patch>,\n    that: Differ<Value2, Patch2>\n  ): Differ<\n    readonly [Value, Value2], // readonly because invariant\n    readonly [Patch, Patch2] // readonly because invariant\n  >\n} = internal.zip\n", "import * as Chunk from \"../../Chunk.js\"\nimport * as Differ from \"../../Differ.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as HashSet from \"../../HashSet.js\"\nimport type * as Supervisor from \"../../Supervisor.js\"\nimport * as supervisor from \"../supervisor.js\"\n\n/** @internal */\nexport type SupervisorPatch = Empty | AddSupervisor | RemoveSupervisor | AndThen\n\n/** @internal */\nexport const OP_EMPTY = \"Empty\" as const\n\n/** @internal */\nexport type OP_EMPTY = typeof OP_EMPTY\n\n/** @internal */\nexport const OP_ADD_SUPERVISOR = \"AddSupervisor\" as const\n\n/** @internal */\nexport type OP_ADD_SUPERVISOR = typeof OP_ADD_SUPERVISOR\n\n/** @internal */\nexport const OP_REMOVE_SUPERVISOR = \"RemoveSupervisor\" as const\n\n/** @internal */\nexport type OP_REMOVE_SUPERVISOR = typeof OP_REMOVE_SUPERVISOR\n\n/** @internal */\nexport const OP_AND_THEN = \"AndThen\" as const\n\n/** @internal */\nexport type OP_AND_THEN = typeof OP_AND_THEN\n\n/** @internal */\nexport interface Empty {\n  readonly _tag: OP_EMPTY\n}\n\n/** @internal */\nexport interface AddSupervisor {\n  readonly _tag: OP_ADD_SUPERVISOR\n  readonly supervisor: Supervisor.Supervisor<any>\n}\n\n/** @internal */\nexport interface RemoveSupervisor {\n  readonly _tag: OP_REMOVE_SUPERVISOR\n  readonly supervisor: Supervisor.Supervisor<any>\n}\n\n/** @internal */\nexport interface AndThen {\n  readonly _tag: OP_AND_THEN\n  readonly first: SupervisorPatch\n  readonly second: SupervisorPatch\n}\n\n/**\n * The empty `SupervisorPatch`.\n *\n * @internal\n */\nexport const empty: SupervisorPatch = { _tag: OP_EMPTY }\n\n/**\n * Combines two patches to produce a new patch that describes applying the\n * updates from this patch and then the updates from the specified patch.\n *\n * @internal\n */\nexport const combine = (self: SupervisorPatch, that: SupervisorPatch): SupervisorPatch => {\n  return {\n    _tag: OP_AND_THEN,\n    first: self,\n    second: that\n  }\n}\n\n/**\n * Applies a `SupervisorPatch` to a `Supervisor` to produce a new `Supervisor`.\n *\n * @internal\n */\nexport const patch = (\n  self: SupervisorPatch,\n  supervisor: Supervisor.Supervisor<any>\n): Supervisor.Supervisor<any> => {\n  return patchLoop(supervisor, Chunk.of(self))\n}\n\n/** @internal */\nconst patchLoop = (\n  _supervisor: Supervisor.Supervisor<any>,\n  _patches: Chunk.Chunk<SupervisorPatch>\n): Supervisor.Supervisor<any> => {\n  let supervisor = _supervisor\n  let patches = _patches\n  while (Chunk.isNonEmpty(patches)) {\n    const head = Chunk.headNonEmpty(patches)\n    switch (head._tag) {\n      case OP_EMPTY: {\n        patches = Chunk.tailNonEmpty(patches)\n        break\n      }\n      case OP_ADD_SUPERVISOR: {\n        supervisor = supervisor.zip(head.supervisor)\n        patches = Chunk.tailNonEmpty(patches)\n        break\n      }\n      case OP_REMOVE_SUPERVISOR: {\n        supervisor = removeSupervisor(supervisor, head.supervisor)\n        patches = Chunk.tailNonEmpty(patches)\n        break\n      }\n      case OP_AND_THEN: {\n        patches = Chunk.prepend(head.first)(Chunk.prepend(head.second)(Chunk.tailNonEmpty(patches)))\n        break\n      }\n    }\n  }\n  return supervisor\n}\n\n/** @internal */\nconst removeSupervisor = (\n  self: Supervisor.Supervisor<any>,\n  that: Supervisor.Supervisor<any>\n): Supervisor.Supervisor<any> => {\n  if (Equal.equals(self, that)) {\n    return supervisor.none\n  } else {\n    if (supervisor.isZip(self)) {\n      return removeSupervisor(self.left, that).zip(removeSupervisor(self.right, that))\n    } else {\n      return self\n    }\n  }\n}\n\n/** @internal */\nconst toSet = (self: Supervisor.Supervisor<any>): HashSet.HashSet<Supervisor.Supervisor<any>> => {\n  if (Equal.equals(self, supervisor.none)) {\n    return HashSet.empty()\n  } else {\n    if (supervisor.isZip(self)) {\n      return pipe(toSet(self.left), HashSet.union(toSet(self.right)))\n    } else {\n      return HashSet.make(self)\n    }\n  }\n}\n\n/** @internal */\nexport const diff = (\n  oldValue: Supervisor.Supervisor<any>,\n  newValue: Supervisor.Supervisor<any>\n): SupervisorPatch => {\n  if (Equal.equals(oldValue, newValue)) {\n    return empty\n  }\n  const oldSupervisors = toSet(oldValue)\n  const newSupervisors = toSet(newValue)\n  const added = pipe(\n    newSupervisors,\n    HashSet.difference(oldSupervisors),\n    HashSet.reduce(\n      empty as SupervisorPatch,\n      (patch, supervisor) => combine(patch, { _tag: OP_ADD_SUPERVISOR, supervisor })\n    )\n  )\n  const removed = pipe(\n    oldSupervisors,\n    HashSet.difference(newSupervisors),\n    HashSet.reduce(\n      empty as SupervisorPatch,\n      (patch, supervisor) => combine(patch, { _tag: OP_REMOVE_SUPERVISOR, supervisor })\n    )\n  )\n  return combine(added, removed)\n}\n\n/** @internal */\nexport const differ = Differ.make<Supervisor.Supervisor<any>, SupervisorPatch>({\n  empty,\n  patch,\n  combine,\n  diff\n})\n", "import { internalCall } from \"effect/Utils\"\nimport * as RA from \"../Array.js\"\nimport * as Boolean from \"../Boolean.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport type * as Clock from \"../Clock.js\"\nimport type { ConfigProvider } from \"../ConfigProvider.js\"\nimport * as Context from \"../Context.js\"\nimport * as Deferred from \"../Deferred.js\"\nimport type * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { EffectTypeId } from \"../Effectable.js\"\nimport type * as Either from \"../Either.js\"\nimport * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport * as FiberRefsPatch from \"../FiberRefsPatch.js\"\nimport * as FiberStatus from \"../FiberStatus.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport type { Logger } from \"../Logger.js\"\nimport * as LogLevel from \"../LogLevel.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport * as Micro from \"../Micro.js\"\nimport * as MRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport type * as Random from \"../Random.js\"\nimport * as Ref from \"../Ref.js\"\nimport type { Entry, Request } from \"../Request.js\"\nimport type * as RequestBlock from \"../RequestBlock.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport { currentScheduler, type Scheduler } from \"../Scheduler.js\"\nimport type * as Scope from \"../Scope.js\"\nimport type * as Supervisor from \"../Supervisor.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport type { Concurrency, NoInfer } from \"../Types.js\"\nimport * as _RequestBlock from \"./blockedRequests.js\"\nimport * as internalCause from \"./cause.js\"\nimport * as clock from \"./clock.js\"\nimport { currentRequestMap } from \"./completedRequestMap.js\"\nimport * as concurrency from \"./concurrency.js\"\nimport { configProviderTag } from \"./configProvider.js\"\nimport * as internalEffect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport { consoleTag } from \"./defaultServices/console.js\"\nimport * as executionStrategy from \"./executionStrategy.js\"\nimport * as internalFiber from \"./fiber.js\"\nimport * as FiberMessage from \"./fiberMessage.js\"\nimport * as fiberRefs from \"./fiberRefs.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as internalLogger from \"./logger.js\"\nimport * as metric from \"./metric.js\"\nimport * as metricBoundaries from \"./metric/boundaries.js\"\nimport * as metricLabel from \"./metric/label.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport { randomTag } from \"./random.js\"\nimport { complete } from \"./request.js\"\nimport * as _runtimeFlags from \"./runtimeFlags.js\"\nimport { OpSupervision } from \"./runtimeFlags.js\"\nimport * as supervisor from \"./supervisor.js\"\nimport * as SupervisorPatch from \"./supervisor/patch.js\"\nimport * as tracer from \"./tracer.js\"\nimport * as version from \"./version.js\"\n\n/** @internal */\nexport const fiberStarted = metric.counter(\"effect_fiber_started\", { incremental: true })\n/** @internal */\nexport const fiberActive = metric.counter(\"effect_fiber_active\")\n/** @internal */\nexport const fiberSuccesses = metric.counter(\"effect_fiber_successes\", { incremental: true })\n/** @internal */\nexport const fiberFailures = metric.counter(\"effect_fiber_failures\", { incremental: true })\n/** @internal */\nexport const fiberLifetimes = metric.tagged(\n  metric.histogram(\n    \"effect_fiber_lifetimes\",\n    metricBoundaries.exponential({\n      start: 0.5,\n      factor: 2,\n      count: 35\n    })\n  ),\n  \"time_unit\",\n  \"milliseconds\"\n)\n\n/** @internal */\ntype EvaluationSignal =\n  | EvaluationSignalContinue\n  | EvaluationSignalDone\n  | EvaluationSignalYieldNow\n\n/** @internal */\nconst EvaluationSignalContinue = \"Continue\" as const\n\n/** @internal */\ntype EvaluationSignalContinue = typeof EvaluationSignalContinue\n\n/** @internal */\nconst EvaluationSignalDone = \"Done\" as const\n\n/** @internal */\ntype EvaluationSignalDone = typeof EvaluationSignalDone\n\n/** @internal */\nconst EvaluationSignalYieldNow = \"Yield\" as const\n\n/** @internal */\ntype EvaluationSignalYieldNow = typeof EvaluationSignalYieldNow\n\nconst runtimeFiberVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\nconst absurd = (_: never): never => {\n  throw new Error(\n    `BUG: FiberRuntime - ${\n      Inspectable.toStringUnknown(_)\n    } - please report an issue at https://github.com/Effect-TS/effect/issues`\n  )\n}\n\nconst YieldedOp = Symbol.for(\"effect/internal/fiberRuntime/YieldedOp\")\ntype YieldedOp = typeof YieldedOp\nconst yieldedOpChannel: {\n  currentOp: core.Primitive | null\n} = globalValue(\"effect/internal/fiberRuntime/yieldedOpChannel\", () => ({\n  currentOp: null\n}))\n\nconst contOpSuccess = {\n  [OpCodes.OP_ON_SUCCESS]: (\n    _: FiberRuntime<any, any>,\n    cont: core.OnSuccess,\n    value: unknown\n  ) => {\n    return internalCall(() => cont.effect_instruction_i1(value))\n  },\n  [\"OnStep\"]: (\n    _: FiberRuntime<any, any>,\n    _cont: core.OnStep,\n    value: unknown\n  ) => {\n    return core.exitSucceed(core.exitSucceed(value))\n  },\n  [OpCodes.OP_ON_SUCCESS_AND_FAILURE]: (\n    _: FiberRuntime<any, any>,\n    cont: core.OnSuccessAndFailure,\n    value: unknown\n  ) => {\n    return internalCall(() => cont.effect_instruction_i2(value))\n  },\n  [OpCodes.OP_REVERT_FLAGS]: (\n    self: FiberRuntime<any, any>,\n    cont: core.RevertFlags,\n    value: unknown\n  ) => {\n    self.patchRuntimeFlags(self._runtimeFlags, cont.patch)\n    if (_runtimeFlags.interruptible(self._runtimeFlags) && self.isInterrupted()) {\n      return core.exitFailCause(self.getInterruptedCause())\n    } else {\n      return core.exitSucceed(value)\n    }\n  },\n  [OpCodes.OP_WHILE]: (\n    self: FiberRuntime<any, any>,\n    cont: core.While,\n    value: unknown\n  ) => {\n    internalCall(() => cont.effect_instruction_i2(value))\n    if (internalCall(() => cont.effect_instruction_i0())) {\n      self.pushStack(cont)\n      return internalCall(() => cont.effect_instruction_i1())\n    } else {\n      return core.void\n    }\n  }\n}\n\nconst drainQueueWhileRunningTable = {\n  [FiberMessage.OP_INTERRUPT_SIGNAL]: (\n    self: FiberRuntime<any, any>,\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_INTERRUPT_SIGNAL }\n  ) => {\n    self.processNewInterruptSignal(message.cause)\n    return _runtimeFlags.interruptible(runtimeFlags) ? core.exitFailCause(message.cause) : cur\n  },\n  [FiberMessage.OP_RESUME]: (\n    _self: FiberRuntime<any, any>,\n    _runtimeFlags: RuntimeFlags.RuntimeFlags,\n    _cur: Effect.Effect<any, any, any>,\n    _message: FiberMessage.FiberMessage\n  ) => {\n    throw new Error(\"It is illegal to have multiple concurrent run loops in a single fiber\")\n  },\n  [FiberMessage.OP_STATEFUL]: (\n    self: FiberRuntime<any, any>,\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_STATEFUL }\n  ) => {\n    message.onFiber(self, FiberStatus.running(runtimeFlags))\n    return cur\n  },\n  [FiberMessage.OP_YIELD_NOW]: (\n    _self: FiberRuntime<any, any>,\n    _runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    _message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_YIELD_NOW }\n  ) => {\n    return core.flatMap(core.yieldNow(), () => cur)\n  }\n}\n\n/**\n * Executes all requests, submitting requests to each data source in parallel.\n */\nconst runBlockedRequests = (self: RequestBlock.RequestBlock) =>\n  core.forEachSequentialDiscard(\n    _RequestBlock.flatten(self),\n    (requestsByRequestResolver) =>\n      forEachConcurrentDiscard(\n        _RequestBlock.sequentialCollectionToChunk(requestsByRequestResolver),\n        ([dataSource, sequential]) => {\n          const map = new Map<Request<any, any>, Entry<any>>()\n          const arr: Array<Array<Entry<any>>> = []\n          for (const block of sequential) {\n            arr.push(Chunk.toReadonlyArray(block) as any)\n            for (const entry of block) {\n              map.set(entry.request as Request<any, any>, entry)\n            }\n          }\n          const flat = arr.flat()\n          return core.fiberRefLocally(\n            invokeWithInterrupt(dataSource.runAll(arr), flat, () =>\n              flat.forEach((entry) => {\n                entry.listeners.interrupted = true\n              })),\n            currentRequestMap,\n            map\n          )\n        },\n        false,\n        false\n      )\n  )\n\n/** @internal */\nexport interface Snapshot {\n  refs: FiberRefs.FiberRefs\n  flags: RuntimeFlags.RuntimeFlags\n}\n\n/** @internal */\nexport class FiberRuntime<in out A, in out E = never> implements Fiber.RuntimeFiber<A, E> {\n  readonly [internalFiber.FiberTypeId] = internalFiber.fiberVariance\n  readonly [internalFiber.RuntimeFiberTypeId] = runtimeFiberVariance\n\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n\n  private _fiberRefs: FiberRefs.FiberRefs\n  private _fiberId: FiberId.Runtime\n  public _runtimeFlags: RuntimeFlags.RuntimeFlags\n\n  private _queue = new Array<FiberMessage.FiberMessage>()\n  private _children: Set<FiberRuntime<any, any>> | null = null\n  private _observers = new Array<(exit: Exit.Exit<A, E>) => void>()\n  private _running = false\n  private _stack: Array<core.Continuation> = []\n  private _asyncInterruptor: ((effect: Effect.Effect<any, any, any>) => any) | null = null\n  private _asyncBlockingOn: FiberId.FiberId | null = null\n  private _exitValue: Exit.Exit<A, E> | null = null\n  private _steps: Array<Snapshot> = []\n  public _supervisor: Supervisor.Supervisor<any>\n  public _scheduler: Scheduler\n  private _tracer: Tracer.Tracer\n  public currentOpCount: number = 0\n  private isYielding = false\n\n  constructor(\n    fiberId: FiberId.Runtime,\n    fiberRefs0: FiberRefs.FiberRefs,\n    runtimeFlags0: RuntimeFlags.RuntimeFlags\n  ) {\n    this._runtimeFlags = runtimeFlags0\n    this._fiberId = fiberId\n    this._fiberRefs = fiberRefs0\n    this._supervisor = this.getFiberRef(currentSupervisor)\n    this._scheduler = this.getFiberRef(currentScheduler)\n    if (_runtimeFlags.runtimeMetrics(runtimeFlags0)) {\n      const tags = this.getFiberRef(core.currentMetricLabels)\n      fiberStarted.unsafeUpdate(1, tags)\n      fiberActive.unsafeUpdate(1, tags)\n    }\n    this._tracer = Context.get(this.getFiberRef(defaultServices.currentServices), tracer.tracerTag)\n  }\n\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.Runtime {\n    return this._fiberId\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background. This can be called to \"kick off\" execution of a fiber after\n   * it has been created.\n   */\n  resume<A, E>(effect: Effect.Effect<A, E, any>): void {\n    this.tell(FiberMessage.resume(effect))\n  }\n\n  /**\n   * The status of the fiber.\n   */\n  get status(): Effect.Effect<FiberStatus.FiberStatus> {\n    return this.ask((_, status) => status)\n  }\n\n  /**\n   * Gets the fiber runtime flags.\n   */\n  get runtimeFlags(): Effect.Effect<RuntimeFlags.RuntimeFlags> {\n    return this.ask((state, status) => {\n      if (FiberStatus.isDone(status)) {\n        return state._runtimeFlags\n      }\n      return status.runtimeFlags\n    })\n  }\n\n  /**\n   * Returns the current `FiberScope` for the fiber.\n   */\n  scope(): fiberScope.FiberScope {\n    return fiberScope.unsafeMake(this)\n  }\n\n  /**\n   * Retrieves the immediate children of the fiber.\n   */\n  get children(): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> {\n    return this.ask((fiber) => Array.from(fiber.getChildren()))\n  }\n\n  /**\n   * Gets the fiber's set of children.\n   */\n  getChildren(): Set<FiberRuntime<any, any>> {\n    if (this._children === null) {\n      this._children = new Set()\n    }\n    return this._children\n  }\n\n  /**\n   * Retrieves the interrupted cause of the fiber, which will be `Cause.empty`\n   * if the fiber has not been interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getInterruptedCause() {\n    return this.getFiberRef(core.currentInterruptedCause)\n  }\n\n  /**\n   * Retrieves the whole set of fiber refs.\n   */\n  fiberRefs(): Effect.Effect<FiberRefs.FiberRefs> {\n    return this.ask((fiber) => fiber.getFiberRefs())\n  }\n\n  /**\n   * Returns an effect that will contain information computed from the fiber\n   * state and status while running on the fiber.\n   *\n   * This allows the outside world to interact safely with mutable fiber state\n   * without locks or immutable data.\n   */\n  ask<Z>(\n    f: (runtime: FiberRuntime<any, any>, status: FiberStatus.FiberStatus) => Z\n  ): Effect.Effect<Z> {\n    return core.suspend(() => {\n      const deferred = core.deferredUnsafeMake<Z>(this._fiberId)\n      this.tell(\n        FiberMessage.stateful((fiber, status) => {\n          core.deferredUnsafeDone(deferred, core.sync(() => f(fiber, status)))\n        })\n      )\n      return core.deferredAwait(deferred)\n    })\n  }\n\n  /**\n   * Adds a message to be processed by the fiber on the fiber.\n   */\n  tell(message: FiberMessage.FiberMessage): void {\n    this._queue.push(message)\n    if (!this._running) {\n      this._running = true\n      this.drainQueueLaterOnExecutor()\n    }\n  }\n\n  get await(): Effect.Effect<Exit.Exit<A, E>> {\n    return core.async((resume) => {\n      const cb = (exit: Exit.Exit<A, E>) => resume(core.succeed(exit))\n      this.tell(\n        FiberMessage.stateful((fiber, _) => {\n          if (fiber._exitValue !== null) {\n            cb(this._exitValue!)\n          } else {\n            fiber.addObserver(cb)\n          }\n        })\n      )\n      return core.sync(() =>\n        this.tell(\n          FiberMessage.stateful((fiber, _) => {\n            fiber.removeObserver(cb)\n          })\n        )\n      )\n    }, this.id())\n  }\n\n  get inheritAll(): Effect.Effect<void> {\n    return core.withFiberRuntime((parentFiber, parentStatus) => {\n      const parentFiberId = parentFiber.id()\n      const parentFiberRefs = parentFiber.getFiberRefs()\n      const parentRuntimeFlags = parentStatus.runtimeFlags\n      const childFiberRefs = this.getFiberRefs()\n      const updatedFiberRefs = fiberRefs.joinAs(parentFiberRefs, parentFiberId, childFiberRefs)\n\n      parentFiber.setFiberRefs(updatedFiberRefs)\n\n      const updatedRuntimeFlags = parentFiber.getFiberRef(currentRuntimeFlags)\n\n      const patch = pipe(\n        _runtimeFlags.diff(parentRuntimeFlags, updatedRuntimeFlags),\n        // Do not inherit WindDown or Interruption!\n        RuntimeFlagsPatch.exclude(_runtimeFlags.Interruption),\n        RuntimeFlagsPatch.exclude(_runtimeFlags.WindDown)\n      )\n\n      return core.updateRuntimeFlags(patch)\n    })\n  }\n\n  /**\n   * Tentatively observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  get poll(): Effect.Effect<Option.Option<Exit.Exit<A, E>>> {\n    return core.sync(() => Option.fromNullable(this._exitValue))\n  }\n\n  /**\n   * Unsafely observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  unsafePoll(): Exit.Exit<A, E> | null {\n    return this._exitValue\n  }\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */\n  interruptAsFork(fiberId: FiberId.FiberId): Effect.Effect<void> {\n    return core.sync(() => this.tell(FiberMessage.interruptSignal(internalCause.interrupt(fiberId))))\n  }\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */\n  unsafeInterruptAsFork(fiberId: FiberId.FiberId) {\n    this.tell(FiberMessage.interruptSignal(internalCause.interrupt(fiberId)))\n  }\n\n  /**\n   * Adds an observer to the list of observers.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addObserver(observer: (exit: Exit.Exit<A, E>) => void): void {\n    if (this._exitValue !== null) {\n      observer(this._exitValue!)\n    } else {\n      this._observers.push(observer)\n    }\n  }\n\n  /**\n   * Removes the specified observer from the list of observers that will be\n   * notified when the fiber exits.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  removeObserver(observer: (exit: Exit.Exit<A, E>) => void): void {\n    this._observers = this._observers.filter((o) => o !== observer)\n  }\n  /**\n   * Retrieves all fiber refs of the fiber.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getFiberRefs(): FiberRefs.FiberRefs {\n    this.setFiberRef(currentRuntimeFlags, this._runtimeFlags)\n    return this._fiberRefs\n  }\n\n  /**\n   * Deletes the specified fiber ref.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  unsafeDeleteFiberRef<X>(fiberRef: FiberRef.FiberRef<X>): void {\n    this._fiberRefs = fiberRefs.delete_(this._fiberRefs, fiberRef)\n  }\n\n  /**\n   * Retrieves the state of the fiber ref, or else its initial value.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getFiberRef<X>(fiberRef: FiberRef.FiberRef<X>): X {\n    if (this._fiberRefs.locals.has(fiberRef)) {\n      return this._fiberRefs.locals.get(fiberRef)![0][1] as X\n    }\n    return fiberRef.initial\n  }\n\n  /**\n   * Sets the fiber ref to the specified value.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  setFiberRef<X>(fiberRef: FiberRef.FiberRef<X>, value: X): void {\n    this._fiberRefs = fiberRefs.updateAs(this._fiberRefs, {\n      fiberId: this._fiberId,\n      fiberRef,\n      value\n    })\n    this.refreshRefCache()\n  }\n\n  refreshRefCache() {\n    this._tracer = Context.get(this.getFiberRef(defaultServices.currentServices), tracer.tracerTag)\n    this._supervisor = this.getFiberRef(currentSupervisor)\n    this._scheduler = this.getFiberRef(currentScheduler)\n  }\n\n  /**\n   * Wholesale replaces all fiber refs of this fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  setFiberRefs(fiberRefs: FiberRefs.FiberRefs): void {\n    this._fiberRefs = fiberRefs\n    this.refreshRefCache()\n  }\n\n  /**\n   * Adds a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addChild(child: FiberRuntime<any, any>) {\n    this.getChildren().add(child)\n  }\n\n  /**\n   * Removes a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  removeChild(child: FiberRuntime<any, any>) {\n    this.getChildren().delete(child)\n  }\n\n  /**\n   * On the current thread, executes all messages in the fiber's inbox. This\n   * method may return before all work is done, in the event the fiber executes\n   * an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueOnCurrentThread() {\n    let recurse = true\n    while (recurse) {\n      let evaluationSignal: EvaluationSignal = EvaluationSignalContinue\n      const prev = (globalThis as any)[internalFiber.currentFiberURI]\n      ;(globalThis as any)[internalFiber.currentFiberURI] = this\n      try {\n        while (evaluationSignal === EvaluationSignalContinue) {\n          evaluationSignal = this._queue.length === 0 ?\n            EvaluationSignalDone :\n            this.evaluateMessageWhileSuspended(this._queue.splice(0, 1)[0]!)\n        }\n      } finally {\n        this._running = false\n        ;(globalThis as any)[internalFiber.currentFiberURI] = prev\n      }\n      // Maybe someone added something to the queue between us checking, and us\n      // giving up the drain. If so, we need to restart the draining, but only\n      // if we beat everyone else to the restart:\n      if (this._queue.length > 0 && !this._running) {\n        this._running = true\n        if (evaluationSignal === EvaluationSignalYieldNow) {\n          this.drainQueueLaterOnExecutor()\n          recurse = false\n        } else {\n          recurse = true\n        }\n      } else {\n        recurse = false\n      }\n    }\n  }\n\n  /**\n   * Schedules the execution of all messages in the fiber's inbox.\n   *\n   * This method will return immediately after the scheduling\n   * operation is completed, but potentially before such messages have been\n   * executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueLaterOnExecutor() {\n    this._scheduler.scheduleTask(\n      this.run,\n      this.getFiberRef(core.currentSchedulingPriority)\n    )\n  }\n\n  /**\n   * Drains the fiber's message queue while the fiber is actively running,\n   * returning the next effect to execute, which may be the input effect if no\n   * additional effect needs to be executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueWhileRunning(\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur0: Effect.Effect<any, any, any>\n  ) {\n    let cur = cur0\n    while (this._queue.length > 0) {\n      const message = this._queue.splice(0, 1)[0]\n      // @ts-expect-error\n      cur = drainQueueWhileRunningTable[message._tag](this, runtimeFlags, cur, message)\n    }\n    return cur\n  }\n\n  /**\n   * Determines if the fiber is interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  isInterrupted(): boolean {\n    return !internalCause.isEmpty(this.getFiberRef(core.currentInterruptedCause))\n  }\n\n  /**\n   * Adds an interruptor to the set of interruptors that are interrupting this\n   * fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addInterruptedCause(cause: Cause.Cause<never>) {\n    const oldSC = this.getFiberRef(core.currentInterruptedCause)\n    this.setFiberRef(core.currentInterruptedCause, internalCause.sequential(oldSC, cause))\n  }\n\n  /**\n   * Processes a new incoming interrupt signal.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  processNewInterruptSignal(cause: Cause.Cause<never>): void {\n    this.addInterruptedCause(cause)\n    this.sendInterruptSignalToAllChildren()\n  }\n\n  /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  sendInterruptSignalToAllChildren(): boolean {\n    if (this._children === null || this._children.size === 0) {\n      return false\n    }\n    let told = false\n    for (const child of this._children) {\n      child.tell(FiberMessage.interruptSignal(internalCause.interrupt(this.id())))\n      told = true\n    }\n    return told\n  }\n\n  /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  interruptAllChildren() {\n    if (this.sendInterruptSignalToAllChildren()) {\n      const it = this._children!.values()\n      this._children = null\n      let isDone = false\n      const body = () => {\n        const next = it.next()\n        if (!next.done) {\n          return core.asVoid(next.value.await)\n        } else {\n          return core.sync(() => {\n            isDone = true\n          })\n        }\n      }\n      return core.whileLoop({\n        while: () => !isDone,\n        body,\n        step: () => {\n          //\n        }\n      })\n    }\n    return null\n  }\n\n  reportExitValue(exit: Exit.Exit<A, E>) {\n    if (_runtimeFlags.runtimeMetrics(this._runtimeFlags)) {\n      const tags = this.getFiberRef(core.currentMetricLabels)\n      const startTimeMillis = this.id().startTimeMillis\n      const endTimeMillis = Date.now()\n      fiberLifetimes.unsafeUpdate(endTimeMillis - startTimeMillis, tags)\n      fiberActive.unsafeUpdate(-1, tags)\n      switch (exit._tag) {\n        case OpCodes.OP_SUCCESS: {\n          fiberSuccesses.unsafeUpdate(1, tags)\n          break\n        }\n        case OpCodes.OP_FAILURE: {\n          fiberFailures.unsafeUpdate(1, tags)\n          break\n        }\n      }\n    }\n    if (exit._tag === \"Failure\") {\n      const level = this.getFiberRef(core.currentUnhandledErrorLogLevel)\n      if (!internalCause.isInterruptedOnly(exit.cause) && level._tag === \"Some\") {\n        this.log(\"Fiber terminated with an unhandled error\", exit.cause, level)\n      }\n    }\n  }\n\n  setExitValue(exit: Exit.Exit<A, E>) {\n    this._exitValue = exit\n    this.reportExitValue(exit)\n    for (let i = this._observers.length - 1; i >= 0; i--) {\n      this._observers[i](exit)\n    }\n  }\n\n  getLoggers() {\n    return this.getFiberRef(currentLoggers)\n  }\n\n  log(\n    message: unknown,\n    cause: Cause.Cause<any>,\n    overrideLogLevel: Option.Option<LogLevel.LogLevel>\n  ): void {\n    const logLevel = Option.isSome(overrideLogLevel) ?\n      overrideLogLevel.value :\n      this.getFiberRef(core.currentLogLevel)\n    const minimumLogLevel = this.getFiberRef(currentMinimumLogLevel)\n    if (LogLevel.greaterThan(minimumLogLevel, logLevel)) {\n      return\n    }\n    const spans = this.getFiberRef(core.currentLogSpan)\n    const annotations = this.getFiberRef(core.currentLogAnnotations)\n    const loggers = this.getLoggers()\n    const contextMap = this.getFiberRefs()\n    if (HashSet.size(loggers) > 0) {\n      const clockService = Context.get(this.getFiberRef(defaultServices.currentServices), clock.clockTag)\n      const date = new Date(clockService.unsafeCurrentTimeMillis())\n      for (const logger of loggers) {\n        logger.log({\n          fiberId: this.id(),\n          logLevel,\n          message,\n          cause,\n          context: contextMap,\n          spans,\n          annotations,\n          date\n        })\n      }\n    }\n  }\n\n  /**\n   * Evaluates a single message on the current thread, while the fiber is\n   * suspended. This method should only be called while evaluation of the\n   * fiber's effect is suspended due to an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  evaluateMessageWhileSuspended(message: FiberMessage.FiberMessage): EvaluationSignal {\n    switch (message._tag) {\n      case FiberMessage.OP_YIELD_NOW: {\n        return EvaluationSignalYieldNow\n      }\n      case FiberMessage.OP_INTERRUPT_SIGNAL: {\n        this.processNewInterruptSignal(message.cause)\n        if (this._asyncInterruptor !== null) {\n          this._asyncInterruptor(core.exitFailCause(message.cause))\n          this._asyncInterruptor = null\n        }\n        return EvaluationSignalContinue\n      }\n      case FiberMessage.OP_RESUME: {\n        this._asyncInterruptor = null\n        this._asyncBlockingOn = null\n        this.evaluateEffect(message.effect)\n        return EvaluationSignalContinue\n      }\n      case FiberMessage.OP_STATEFUL: {\n        message.onFiber(\n          this,\n          this._exitValue !== null ?\n            FiberStatus.done :\n            FiberStatus.suspended(this._runtimeFlags, this._asyncBlockingOn!)\n        )\n        return EvaluationSignalContinue\n      }\n      default: {\n        return absurd(message)\n      }\n    }\n  }\n\n  /**\n   * Evaluates an effect until completion, potentially asynchronously.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  evaluateEffect(effect0: Effect.Effect<any, any, any>) {\n    this._supervisor.onResume(this)\n    try {\n      let effect: Effect.Effect<any, any, any> | null =\n        _runtimeFlags.interruptible(this._runtimeFlags) && this.isInterrupted() ?\n          core.exitFailCause(this.getInterruptedCause()) :\n          effect0\n      while (effect !== null) {\n        const eff: Effect.Effect<any, any, any> = effect\n        const exit = this.runLoop(eff)\n        if (exit === YieldedOp) {\n          const op = yieldedOpChannel.currentOp!\n          yieldedOpChannel.currentOp = null\n          if (op._op === OpCodes.OP_YIELD) {\n            if (_runtimeFlags.cooperativeYielding(this._runtimeFlags)) {\n              this.tell(FiberMessage.yieldNow())\n              this.tell(FiberMessage.resume(core.exitVoid))\n              effect = null\n            } else {\n              effect = core.exitVoid\n            }\n          } else if (op._op === OpCodes.OP_ASYNC) {\n            // Terminate this evaluation, async resumption will continue evaluation:\n            effect = null\n          }\n        } else {\n          this._runtimeFlags = pipe(this._runtimeFlags, _runtimeFlags.enable(_runtimeFlags.WindDown))\n          const interruption = this.interruptAllChildren()\n          if (interruption !== null) {\n            effect = core.flatMap(interruption, () => exit)\n          } else {\n            if (this._queue.length === 0) {\n              // No more messages to process, so we will allow the fiber to end life:\n              this.setExitValue(exit)\n            } else {\n              // There are messages, possibly added by the final op executed by\n              // the fiber. To be safe, we should execute those now before we\n              // allow the fiber to end life:\n              this.tell(FiberMessage.resume(exit))\n            }\n            effect = null\n          }\n        }\n      }\n    } finally {\n      this._supervisor.onSuspend(this)\n    }\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on the current\n   * thread. This can be called to \"kick off\" execution of a fiber after it has\n   * been created, in hopes that the effect can be executed synchronously.\n   *\n   * This is not the normal way of starting a fiber, but it is useful when the\n   * express goal of executing the fiber is to synchronously produce its exit.\n   */\n  start<R>(effect: Effect.Effect<A, E, R>): void {\n    if (!this._running) {\n      this._running = true\n      const prev = (globalThis as any)[internalFiber.currentFiberURI]\n      ;(globalThis as any)[internalFiber.currentFiberURI] = this\n      try {\n        this.evaluateEffect(effect)\n      } finally {\n        this._running = false\n        ;(globalThis as any)[internalFiber.currentFiberURI] = prev\n        // Because we're special casing `start`, we have to be responsible\n        // for spinning up the fiber if there were new messages added to\n        // the queue between the completion of the effect and the transition\n        // to the not running state.\n        if (this._queue.length > 0) {\n          this.drainQueueLaterOnExecutor()\n        }\n      }\n    } else {\n      this.tell(FiberMessage.resume(effect))\n    }\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background, and on the correct thread pool. This can be called to \"kick\n   * off\" execution of a fiber after it has been created, in hopes that the\n   * effect can be executed synchronously.\n   */\n  startFork<R>(effect: Effect.Effect<A, E, R>): void {\n    this.tell(FiberMessage.resume(effect))\n  }\n\n  /**\n   * Takes the current runtime flags, patches them to return the new runtime\n   * flags, and then makes any changes necessary to fiber state based on the\n   * specified patch.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  patchRuntimeFlags(oldRuntimeFlags: RuntimeFlags.RuntimeFlags, patch: RuntimeFlagsPatch.RuntimeFlagsPatch) {\n    const newRuntimeFlags = _runtimeFlags.patch(oldRuntimeFlags, patch)\n    ;(globalThis as any)[internalFiber.currentFiberURI] = this\n    this._runtimeFlags = newRuntimeFlags\n    return newRuntimeFlags\n  }\n\n  /**\n   * Initiates an asynchronous operation, by building a callback that will\n   * resume execution, and then feeding that callback to the registration\n   * function, handling error cases and repeated resumptions appropriately.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  initiateAsync(\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    asyncRegister: (resume: (effect: Effect.Effect<any, any, any>) => void) => void\n  ) {\n    let alreadyCalled = false\n    const callback = (effect: Effect.Effect<any, any, any>) => {\n      if (!alreadyCalled) {\n        alreadyCalled = true\n        this.tell(FiberMessage.resume(effect))\n      }\n    }\n    if (_runtimeFlags.interruptible(runtimeFlags)) {\n      this._asyncInterruptor = callback\n    }\n    try {\n      asyncRegister(callback)\n    } catch (e) {\n      callback(core.failCause(internalCause.die(e)))\n    }\n  }\n\n  pushStack(cont: core.Continuation) {\n    this._stack.push(cont)\n    if (cont._op === \"OnStep\") {\n      this._steps.push({ refs: this.getFiberRefs(), flags: this._runtimeFlags })\n    }\n  }\n\n  popStack() {\n    const item = this._stack.pop()\n    if (item) {\n      if (item._op === \"OnStep\") {\n        this._steps.pop()\n      }\n      return item\n    }\n    return\n  }\n\n  getNextSuccessCont() {\n    let frame = this.popStack()\n    while (frame) {\n      if (frame._op !== OpCodes.OP_ON_FAILURE) {\n        return frame\n      }\n      frame = this.popStack()\n    }\n  }\n\n  getNextFailCont() {\n    let frame = this.popStack()\n    while (frame) {\n      if (frame._op !== OpCodes.OP_ON_SUCCESS && frame._op !== OpCodes.OP_WHILE) {\n        return frame\n      }\n      frame = this.popStack()\n    }\n  }\n\n  [OpCodes.OP_TAG](op: core.Primitive & { _op: OpCodes.OP_SYNC }) {\n    return core.map(\n      core.fiberRefGet(core.currentContext),\n      (context) => Context.unsafeGet(context, op as unknown as Context.Tag<any, any>)\n    )\n  }\n\n  [\"Left\"](op: core.Primitive & { _op: \"Left\" }) {\n    return core.fail(op.left)\n  }\n\n  [\"None\"](_: core.Primitive & { _op: \"None\" }) {\n    return core.fail(new core.NoSuchElementException())\n  }\n\n  [\"Right\"](op: core.Primitive & { _op: \"Right\" }) {\n    return core.exitSucceed(op.right)\n  }\n\n  [\"Some\"](op: core.Primitive & { _op: \"Some\" }) {\n    return core.exitSucceed(op.value)\n  }\n\n  [\"Micro\"](op: Micro.Micro<any, any, never> & { _op: \"Micro\" }) {\n    return core.unsafeAsync<any, any>((microResume) => {\n      const env = Micro.envUnsafeMakeEmpty().pipe(\n        Micro.envSet(Micro.currentContext, this.getFiberRef(core.currentContext))\n      )\n      let resume = microResume\n      op[Micro.runSymbol](env, (result) => {\n        if (result._tag === \"Right\") {\n          return resume(core.exitSucceed(result.right))\n        }\n        switch (result.left._tag) {\n          case \"Interrupt\": {\n            return resume(core.exitFailCause(internalCause.interrupt(FiberId.none)))\n          }\n          case \"Fail\": {\n            return resume(core.fail(result.left.error))\n          }\n          case \"Die\": {\n            return resume(core.die(result.left.defect))\n          }\n        }\n      })\n      return core.async<void>((abortResume) => {\n        resume = (_: any) => {\n          abortResume(core.void)\n        }\n        Micro.envGet(env, Micro.currentAbortController).abort()\n      })\n    })\n  }\n\n  [OpCodes.OP_SYNC](op: core.Primitive & { _op: OpCodes.OP_SYNC }) {\n    const value = internalCall(() => op.effect_instruction_i0())\n    const cont = this.getNextSuccessCont()\n    if (cont !== undefined) {\n      if (!(cont._op in contOpSuccess)) {\n        // @ts-expect-error\n        absurd(cont)\n      }\n      // @ts-expect-error\n      return contOpSuccess[cont._op](this, cont, value)\n    } else {\n      yieldedOpChannel.currentOp = core.exitSucceed(value) as any\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_SUCCESS](op: core.Primitive & { _op: OpCodes.OP_SUCCESS }) {\n    const oldCur = op\n    const cont = this.getNextSuccessCont()\n    if (cont !== undefined) {\n      if (!(cont._op in contOpSuccess)) {\n        // @ts-expect-error\n        absurd(cont)\n      }\n      // @ts-expect-error\n      return contOpSuccess[cont._op](this, cont, oldCur.effect_instruction_i0)\n    } else {\n      yieldedOpChannel.currentOp = oldCur\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_FAILURE](op: core.Primitive & { _op: OpCodes.OP_FAILURE }) {\n    const cause = op.effect_instruction_i0\n    const cont = this.getNextFailCont()\n    if (cont !== undefined) {\n      switch (cont._op) {\n        case OpCodes.OP_ON_FAILURE:\n        case OpCodes.OP_ON_SUCCESS_AND_FAILURE: {\n          if (!(_runtimeFlags.interruptible(this._runtimeFlags) && this.isInterrupted())) {\n            return internalCall(() => cont.effect_instruction_i1(cause))\n          } else {\n            return core.exitFailCause(internalCause.stripFailures(cause))\n          }\n        }\n        case \"OnStep\": {\n          if (!(_runtimeFlags.interruptible(this._runtimeFlags) && this.isInterrupted())) {\n            return core.exitSucceed(core.exitFailCause(cause))\n          } else {\n            return core.exitFailCause(internalCause.stripFailures(cause))\n          }\n        }\n        case OpCodes.OP_REVERT_FLAGS: {\n          this.patchRuntimeFlags(this._runtimeFlags, cont.patch)\n          if (_runtimeFlags.interruptible(this._runtimeFlags) && this.isInterrupted()) {\n            return core.exitFailCause(internalCause.sequential(cause, this.getInterruptedCause()))\n          } else {\n            return core.exitFailCause(cause)\n          }\n        }\n        default: {\n          absurd(cont)\n        }\n      }\n    } else {\n      yieldedOpChannel.currentOp = core.exitFailCause(cause) as any\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_WITH_RUNTIME](op: core.Primitive & { _op: OpCodes.OP_WITH_RUNTIME }) {\n    return internalCall(() =>\n      op.effect_instruction_i0(\n        this as FiberRuntime<unknown, unknown>,\n        FiberStatus.running(this._runtimeFlags) as FiberStatus.Running\n      )\n    )\n  }\n\n  [\"Blocked\"](op: core.Primitive & { _op: \"Blocked\" }) {\n    const refs = this.getFiberRefs()\n    const flags = this._runtimeFlags\n    if (this._steps.length > 0) {\n      const frames: Array<core.Continuation> = []\n      const snap = this._steps[this._steps.length - 1]\n      let frame = this.popStack()\n      while (frame && frame._op !== \"OnStep\") {\n        frames.push(frame)\n        frame = this.popStack()\n      }\n      this.setFiberRefs(snap.refs)\n      this._runtimeFlags = snap.flags\n      const patchRefs = FiberRefsPatch.diff(snap.refs, refs)\n      const patchFlags = _runtimeFlags.diff(snap.flags, flags)\n      return core.exitSucceed(core.blocked(\n        op.effect_instruction_i0,\n        core.withFiberRuntime<unknown, unknown>((newFiber) => {\n          while (frames.length > 0) {\n            newFiber.pushStack(frames.pop()!)\n          }\n          newFiber.setFiberRefs(\n            FiberRefsPatch.patch(newFiber.id(), newFiber.getFiberRefs())(patchRefs)\n          )\n          newFiber._runtimeFlags = _runtimeFlags.patch(patchFlags)(newFiber._runtimeFlags)\n          return op.effect_instruction_i1\n        })\n      ))\n    }\n    return core.uninterruptibleMask((restore) =>\n      core.flatMap(\n        forkDaemon(core.runRequestBlock(op.effect_instruction_i0)),\n        () => restore(op.effect_instruction_i1)\n      )\n    )\n  }\n\n  [\"RunBlocked\"](op: core.Primitive & { _op: \"RunBlocked\" }) {\n    return runBlockedRequests(op.effect_instruction_i0)\n  }\n\n  [OpCodes.OP_UPDATE_RUNTIME_FLAGS](op: core.Primitive & { _op: OpCodes.OP_UPDATE_RUNTIME_FLAGS }) {\n    const updateFlags = op.effect_instruction_i0\n    const oldRuntimeFlags = this._runtimeFlags\n    const newRuntimeFlags = _runtimeFlags.patch(oldRuntimeFlags, updateFlags)\n    // One more chance to short circuit: if we're immediately going\n    // to interrupt. Interruption will cause immediate reversion of\n    // the flag, so as long as we \"peek ahead\", there's no need to\n    // set them to begin with.\n    if (_runtimeFlags.interruptible(newRuntimeFlags) && this.isInterrupted()) {\n      return core.exitFailCause(this.getInterruptedCause())\n    } else {\n      // Impossible to short circuit, so record the changes\n      this.patchRuntimeFlags(this._runtimeFlags, updateFlags)\n      if (op.effect_instruction_i1) {\n        // Since we updated the flags, we need to revert them\n        const revertFlags = _runtimeFlags.diff(newRuntimeFlags, oldRuntimeFlags)\n        this.pushStack(new core.RevertFlags(revertFlags, op))\n        return internalCall(() => op.effect_instruction_i1!(oldRuntimeFlags))\n      } else {\n        return core.exitVoid\n      }\n    }\n  }\n\n  [OpCodes.OP_ON_SUCCESS](op: core.Primitive & { _op: OpCodes.OP_ON_SUCCESS }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [\"OnStep\"](op: core.Primitive & { _op: \"OnStep\" }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ON_FAILURE](op: core.Primitive & { _op: OpCodes.OP_ON_FAILURE }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ON_SUCCESS_AND_FAILURE](op: core.Primitive & { _op: OpCodes.OP_ON_SUCCESS_AND_FAILURE }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ASYNC](op: core.Primitive & { _op: OpCodes.OP_ASYNC }) {\n    this._asyncBlockingOn = op.effect_instruction_i1\n    this.initiateAsync(this._runtimeFlags, op.effect_instruction_i0)\n    yieldedOpChannel.currentOp = op\n    return YieldedOp\n  }\n\n  [OpCodes.OP_YIELD](op: core.Primitive & { op: OpCodes.OP_YIELD }) {\n    this.isYielding = false\n    yieldedOpChannel.currentOp = op\n    return YieldedOp\n  }\n\n  [OpCodes.OP_WHILE](op: core.Primitive & { _op: OpCodes.OP_WHILE }) {\n    const check = op.effect_instruction_i0\n    const body = op.effect_instruction_i1\n    if (check()) {\n      this.pushStack(op)\n      return body()\n    } else {\n      return core.exitVoid\n    }\n  }\n\n  [OpCodes.OP_COMMIT](op: core.Primitive & { _op: OpCodes.OP_COMMIT }) {\n    return internalCall(() => op.commit())\n  }\n\n  /**\n   * The main run-loop for evaluating effects.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  runLoop(effect0: Effect.Effect<any, any, any>): Exit.Exit<any, any> | YieldedOp {\n    let cur: Effect.Effect<any, any, any> | YieldedOp = effect0\n    this.currentOpCount = 0\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if ((this._runtimeFlags & OpSupervision) !== 0) {\n        this._supervisor.onEffect(this, cur)\n      }\n      if (this._queue.length > 0) {\n        cur = this.drainQueueWhileRunning(this._runtimeFlags, cur)\n      }\n      if (!this.isYielding) {\n        this.currentOpCount += 1\n        const shouldYield = this._scheduler.shouldYield(this)\n        if (shouldYield !== false) {\n          this.isYielding = true\n          this.currentOpCount = 0\n          const oldCur = cur\n          cur = core.flatMap(core.yieldNow({ priority: shouldYield }), () => oldCur)\n        }\n      }\n      try {\n        if (!(\"_op\" in cur) || !((cur as core.Primitive)._op in this)) {\n          // @ts-expect-error\n          absurd(cur)\n        }\n\n        // @ts-expect-error\n        cur = this._tracer.context(\n          () => {\n            if (version.getCurrentVersion() !== (cur as core.Primitive)[EffectTypeId]._V) {\n              return core.dieMessage(\n                `Cannot execute an Effect versioned ${\n                  (cur as core.Primitive)[EffectTypeId]._V\n                } with a Runtime of version ${version.getCurrentVersion()}`\n              )\n            }\n            // @ts-expect-error\n            return this[(cur as core.Primitive)._op](cur as core.Primitive)\n          },\n          this\n        )\n\n        if (cur === YieldedOp) {\n          const op = yieldedOpChannel.currentOp!\n          if (\n            op._op === OpCodes.OP_YIELD ||\n            op._op === OpCodes.OP_ASYNC\n          ) {\n            return YieldedOp\n          }\n\n          yieldedOpChannel.currentOp = null\n          return (\n              op._op === OpCodes.OP_SUCCESS ||\n              op._op === OpCodes.OP_FAILURE\n            ) ?\n            op as unknown as Exit.Exit<A, E> :\n            core.exitFailCause(internalCause.die(op))\n        }\n      } catch (e) {\n        if (core.isEffectError(e)) {\n          cur = core.exitFailCause(e.cause)\n        } else if (core.isInterruptedException(e)) {\n          cur = core.exitFailCause(\n            internalCause.sequential(internalCause.die(e), internalCause.interrupt(FiberId.none))\n          )\n        } else {\n          cur = core.die(e)\n        }\n      }\n    }\n  }\n\n  run = () => {\n    this.drainQueueOnCurrentThread()\n  }\n}\n\n// circular with Logger\n\n/** @internal */\nexport const currentMinimumLogLevel: FiberRef.FiberRef<LogLevel.LogLevel> = globalValue(\n  \"effect/FiberRef/currentMinimumLogLevel\",\n  () => core.fiberRefUnsafeMake<LogLevel.LogLevel>(LogLevel.fromLiteral(\"Info\"))\n)\n\n/** @internal */\nexport const loggerWithConsoleLog = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    Context.get(services, consoleTag).unsafe.log(self.log(opts))\n  })\n\n/** @internal */\nexport const loggerWithConsoleError = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    Context.get(services, consoleTag).unsafe.error(self.log(opts))\n  })\n\n/** @internal */\nexport const defaultLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/defaultLogger\"),\n  () => loggerWithConsoleLog(internalLogger.stringLogger)\n)\n\n/** @internal */\nexport const jsonLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/jsonLogger\"),\n  () => loggerWithConsoleLog(internalLogger.jsonLogger)\n)\n\n/** @internal */\nexport const logFmtLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/logFmtLogger\"),\n  () => loggerWithConsoleLog(internalLogger.logfmtLogger)\n)\n\n/** @internal */\nexport const prettyLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/prettyLogger\"),\n  () => internalLogger.prettyLogger()\n)\n\n/** @internal */\nexport const structuredLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/structuredLogger\"),\n  () => loggerWithConsoleLog(internalLogger.structuredLogger)\n)\n\n/** @internal */\nexport const tracerLogger = globalValue(\n  Symbol.for(\"effect/Logger/tracerLogger\"),\n  () =>\n    internalLogger.makeLogger<unknown, void>(({\n      annotations,\n      cause,\n      context,\n      fiberId,\n      logLevel,\n      message\n    }) => {\n      const span = Option.flatMap(fiberRefs.get(context, core.currentContext), Context.getOption(tracer.spanTag))\n      const clockService = Option.map(\n        fiberRefs.get(context, defaultServices.currentServices),\n        (_) => Context.get(_, clock.clockTag)\n      )\n      if (span._tag === \"None\" || span.value._tag === \"ExternalSpan\" || clockService._tag === \"None\") {\n        return\n      }\n\n      const attributes = Object.fromEntries(HashMap.map(annotations, Inspectable.toStringUnknown))\n      attributes[\"effect.fiberId\"] = FiberId.threadName(fiberId)\n      attributes[\"effect.logLevel\"] = logLevel.label\n\n      if (cause !== null && cause._tag !== \"Empty\") {\n        attributes[\"effect.cause\"] = internalCause.pretty(cause)\n      }\n\n      span.value.event(\n        String(message),\n        clockService.value.unsafeCurrentTimeNanos(),\n        attributes\n      )\n    })\n)\n\n/** @internal */\nexport const loggerWithSpanAnnotations = <Message, Output>(self: Logger<Message, Output>): Logger<Message, Output> =>\n  internalLogger.mapInputOptions(self, (options: Logger.Options<Message>) => {\n    const span = Option.flatMap(fiberRefs.get(options.context, core.currentContext), Context.getOption(tracer.spanTag))\n    if (span._tag === \"None\") {\n      return options\n    }\n    return {\n      ...options,\n      annotations: pipe(\n        options.annotations,\n        HashMap.set(\"effect.traceId\", span.value.traceId as unknown),\n        HashMap.set(\"effect.spanId\", span.value.spanId as unknown),\n        span.value._tag === \"Span\" ? HashMap.set(\"effect.spanName\", span.value.name as unknown) : identity\n      )\n    }\n  })\n\n/** @internal */\nexport const currentLoggers: FiberRef.FiberRef<\n  HashSet.HashSet<Logger<unknown, any>>\n> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLoggers\"),\n  () => core.fiberRefUnsafeMakeHashSet(HashSet.make(defaultLogger, tracerLogger))\n)\n\n/** @internal */\nexport const batchedLogger = dual<\n  <Output, R>(\n    window: Duration.DurationInput,\n    f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n  ) => <Message>(\n    self: Logger<Message, Output>\n  ) => Effect.Effect<Logger<Message, void>, never, Scope.Scope | R>,\n  <Message, Output, R>(\n    self: Logger<Message, Output>,\n    window: Duration.DurationInput,\n    f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n  ) => Effect.Effect<Logger<Message, void>, never, Scope.Scope | R>\n>(3, <Message, Output, R>(\n  self: Logger<Message, Output>,\n  window: Duration.DurationInput,\n  f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n): Effect.Effect<Logger<Message, void>, never, Scope.Scope | R> =>\n  core.flatMap(scope, (scope) => {\n    let buffer: Array<Output> = []\n    const flush = core.suspend(() => {\n      if (buffer.length === 0) {\n        return core.void\n      }\n      const arr = buffer\n      buffer = []\n      return f(arr)\n    })\n\n    return core.uninterruptibleMask((restore) =>\n      pipe(\n        internalEffect.sleep(window),\n        core.zipRight(flush),\n        internalEffect.forever,\n        restore,\n        forkDaemon,\n        core.flatMap((fiber) => core.scopeAddFinalizer(scope, core.interruptFiber(fiber))),\n        core.zipRight(addFinalizer(() => flush)),\n        core.as(\n          internalLogger.makeLogger((options) => {\n            buffer.push(self.log(options))\n          })\n        )\n      )\n    )\n  }))\n\nexport const annotateLogsScoped: {\n  (key: string, value: unknown): Effect.Effect<void, never, Scope.Scope>\n  (values: Record<string, unknown>): Effect.Effect<void, never, Scope.Scope>\n} = function() {\n  if (typeof arguments[0] === \"string\") {\n    return fiberRefLocallyScopedWith(\n      core.currentLogAnnotations,\n      HashMap.set(arguments[0], arguments[1])\n    )\n  }\n  const entries = Object.entries(arguments[0])\n  return fiberRefLocallyScopedWith(\n    core.currentLogAnnotations,\n    HashMap.mutate((annotations) => {\n      for (let i = 0; i < entries.length; i++) {\n        const [key, value] = entries[i]\n        HashMap.set(annotations, key, value)\n      }\n      return annotations\n    })\n  )\n}\n\n// circular with Effect\n\n/* @internal */\nexport const acquireRelease: {\n  <A, X, R2>(\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): <E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R | Scope.Scope>\n  <A, E, R, X, R2>(\n    acquire: Effect.Effect<A, E, R>,\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R | Scope.Scope>\n} = dual((args) => core.isEffect(args[0]), (acquire, release) =>\n  core.uninterruptible(\n    core.tap(acquire, (a) => addFinalizer((exit) => release(a, exit)))\n  ))\n\n/* @internal */\nexport const acquireReleaseInterruptible: {\n  <X, R2>(\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): <A, E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Scope.Scope | R2 | R>\n  <A, E, R, X, R2>(\n    acquire: Effect.Effect<A, E, R>,\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, Scope.Scope | R2 | R>\n} = dual((args) => core.isEffect(args[0]), (acquire, release) =>\n  ensuring(\n    acquire,\n    addFinalizer((exit) => release(exit))\n  ))\n\n/* @internal */\nexport const addFinalizer = <X, R>(\n  finalizer: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R>\n): Effect.Effect<void, never, R | Scope.Scope> =>\n  core.withFiberRuntime(\n    (runtime) => {\n      const acquireRefs = runtime.getFiberRefs()\n      const acquireFlags = runtime._runtimeFlags\n      return core.flatMap(scope, (scope) =>\n        core.scopeAddFinalizerExit(scope, (exit) =>\n          core.withFiberRuntime((runtimeFinalizer) => {\n            const preRefs = runtimeFinalizer.getFiberRefs()\n            const preFlags = runtimeFinalizer._runtimeFlags\n            const patchRefs = FiberRefsPatch.diff(preRefs, acquireRefs)\n            const patchFlags = _runtimeFlags.diff(preFlags, acquireFlags)\n            const inverseRefs = FiberRefsPatch.diff(acquireRefs, preRefs)\n            runtimeFinalizer.setFiberRefs(\n              FiberRefsPatch.patch(patchRefs, runtimeFinalizer.id(), acquireRefs)\n            )\n\n            return ensuring(\n              core.withRuntimeFlags(finalizer(exit) as Effect.Effect<X>, patchFlags),\n              core.sync(() => {\n                runtimeFinalizer.setFiberRefs(\n                  FiberRefsPatch.patch(inverseRefs, runtimeFinalizer.id(), runtimeFinalizer.getFiberRefs())\n                )\n              })\n            )\n          })))\n    }\n  )\n\n/* @internal */\nexport const daemonChildren = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> => {\n  const forkScope = core.fiberRefLocally(core.currentForkScopeOverride, Option.some(fiberScope.globalScope))\n  return forkScope(self)\n}\n\n/** @internal */\nconst _existsParFound = Symbol.for(\"effect/Effect/existsPar/found\")\n\n/* @internal */\nexport const exists: {\n  <A, E, R>(f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }): (elements: Iterable<A>) => Effect.Effect<boolean, E, R>\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }): Effect.Effect<boolean, E, R>\n} = dual(\n  (args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]),\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) =>\n    concurrency.matchSimple(\n      options?.concurrency,\n      () => core.suspend(() => existsLoop(elements[Symbol.iterator](), 0, f)),\n      () =>\n        core.matchEffect(\n          forEach(\n            elements,\n            (a, i) => core.if_(f(a, i), { onTrue: () => core.fail(_existsParFound), onFalse: () => core.void }),\n            options\n          ),\n          {\n            onFailure: (e) => e === _existsParFound ? core.succeed(true) : core.fail(e),\n            onSuccess: () => core.succeed(false)\n          }\n        )\n    )\n)\n\nconst existsLoop = <A, E, R>(\n  iterator: Iterator<A>,\n  index: number,\n  f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n): Effect.Effect<boolean, E, R> => {\n  const next = iterator.next()\n  if (next.done) {\n    return core.succeed(false)\n  }\n  return pipe(core.flatMap(\n    f(next.value, index),\n    (b) => b ? core.succeed(b) : existsLoop(iterator, index + 1, f)\n  ))\n}\n\n/* @internal */\nexport const filter = dual<\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>,\n  <A, E, R>(elements: Iterable<A>, f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly negate?: boolean | undefined\n  }) => Effect.Effect<Array<A>, E, R>\n>(\n  (args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]),\n  <A, E, R>(elements: Iterable<A>, f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly negate?: boolean | undefined\n  }) => {\n    const predicate = options?.negate ? (a: A, i: number) => core.map(f(a, i), Boolean.not) : f\n    return concurrency.matchSimple(\n      options?.concurrency,\n      () =>\n        core.suspend(() =>\n          RA.fromIterable(elements).reduceRight(\n            (effect, a, i) =>\n              core.zipWith(\n                effect,\n                core.suspend(() => predicate(a, i)),\n                (list, b) => b ? [a, ...list] : list\n              ),\n            core.sync(() => new Array<A>()) as Effect.Effect<Array<A>, E, R>\n          )\n        ),\n      () =>\n        core.map(\n          forEach(\n            elements,\n            (a, i) => core.map(predicate(a, i), (b) => (b ? Option.some(a) : Option.none())),\n            options\n          ),\n          RA.getSomes\n        )\n    )\n  }\n)\n\n// === all\n\nconst allResolveInput = (\n  input: Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>\n): [Iterable<Effect.Effect<any, any, any>>, Option.Option<(as: ReadonlyArray<any>) => any>] => {\n  if (Array.isArray(input) || Predicate.isIterable(input)) {\n    return [input, Option.none()]\n  }\n  const keys = Object.keys(input)\n  const size = keys.length\n  return [\n    keys.map((k) => input[k]),\n    Option.some((values: ReadonlyArray<any>) => {\n      const res = {}\n      for (let i = 0; i < size; i++) {\n        ;(res as any)[keys[i]] = values[i]\n      }\n      return res\n    })\n  ]\n}\n\nconst allValidate = (\n  effects: Iterable<Effect.Effect<any, any, any>>,\n  reconcile: Option.Option<(as: ReadonlyArray<any>) => any>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n) => {\n  const eitherEffects: Array<Effect.Effect<unknown, never, Either.Either<unknown, unknown>>> = []\n  for (const effect of effects) {\n    eitherEffects.push(core.either(effect))\n  }\n  return core.flatMap(\n    forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching\n    }),\n    (eithers) => {\n      const none = Option.none()\n      const size = eithers.length\n      const errors: Array<unknown> = new Array(size)\n      const successes: Array<unknown> = new Array(size)\n      let errored = false\n      for (let i = 0; i < size; i++) {\n        const either = eithers[i] as Either.Either<unknown, unknown>\n        if (either._tag === \"Left\") {\n          errors[i] = Option.some(either.left)\n          errored = true\n        } else {\n          successes[i] = either.right\n          errors[i] = none\n        }\n      }\n      if (errored) {\n        return reconcile._tag === \"Some\" ?\n          core.fail(reconcile.value(errors)) :\n          core.fail(errors)\n      } else if (options?.discard) {\n        return core.void\n      }\n      return reconcile._tag === \"Some\" ?\n        core.succeed(reconcile.value(successes)) :\n        core.succeed(successes)\n    }\n  )\n}\n\nconst allEither = (\n  effects: Iterable<Effect.Effect<any, any, any>>,\n  reconcile: Option.Option<(as: ReadonlyArray<any>) => any>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n) => {\n  const eitherEffects: Array<Effect.Effect<unknown, never, Either.Either<unknown, unknown>>> = []\n  for (const effect of effects) {\n    eitherEffects.push(core.either(effect))\n  }\n\n  if (options?.discard) {\n    return forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching,\n      discard: true\n    })\n  }\n\n  return core.map(\n    forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching\n    }),\n    (eithers) =>\n      reconcile._tag === \"Some\" ?\n        reconcile.value(eithers) :\n        eithers\n  )\n}\n\n/* @internal */\nexport const all = <\n  const Arg extends Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>,\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n>(\n  arg: Arg,\n  options?: O\n): Effect.All.Return<Arg, O> => {\n  const [effects, reconcile] = allResolveInput(arg)\n\n  if (options?.mode === \"validate\") {\n    return allValidate(effects, reconcile, options) as any\n  } else if (options?.mode === \"either\") {\n    return allEither(effects, reconcile, options) as any\n  }\n\n  return options?.discard !== true && reconcile._tag === \"Some\"\n    ? core.map(\n      forEach(effects, identity, options as any),\n      reconcile.value\n    ) as any\n    : forEach(effects, identity, options as any) as any\n}\n\n/* @internal */\nexport const allWith = <\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n>(options?: O) =>\n<const Arg extends Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>>(\n  arg: Arg\n): Effect.All.Return<Arg, O> => all(arg, options)\n\n/* @internal */\nexport const allSuccesses = <Eff extends Effect.Effect<any, any, any>>(\n  elements: Iterable<Eff>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }\n): Effect.Effect<Array<Effect.Effect.Success<Eff>>, never, Effect.Effect.Context<Eff>> =>\n  core.map(\n    all(RA.fromIterable(elements).map(core.exit), options),\n    RA.filterMap((exit) => core.exitIsSuccess(exit) ? Option.some(exit.effect_instruction_i0) : Option.none())\n  )\n\n/* @internal */\nexport const replicate = dual<\n  (n: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Array<Effect.Effect<A, E, R>>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, n: number) => Array<Effect.Effect<A, E, R>>\n>(2, (self, n) => Array.from({ length: n }, () => self))\n\n/* @internal */\nexport const replicateEffect: {\n  (\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Array<A>, E, R>\n  (\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<void, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    }\n  ): Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): Effect.Effect<void, E, R>\n} = dual(\n  (args) => core.isEffect(args[0]),\n  (self, n, options) => all(replicate(self, n), options)\n)\n\n/* @internal */\nexport const forEach: {\n  <B, E, R, S extends Iterable<any>>(\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): (\n    self: S\n  ) => Effect.Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): (self: Iterable<A>) => Effect.Effect<void, E, R>\n  <A, B, E, R>(\n    self: RA.NonEmptyReadonlyArray<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): Effect.Effect<RA.NonEmptyArray<B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): Effect.Effect<Array<B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): Effect.Effect<void, E, R>\n} = dual((args) => Predicate.isIterable(args[0]), <A, R, E, B>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n  }\n) =>\n  core.withFiberRuntime<A | void, E, R>((r) => {\n    const isRequestBatchingEnabled = options?.batching === true ||\n      (options?.batching === \"inherit\" && r.getFiberRef(core.currentRequestBatching))\n\n    if (options?.discard) {\n      return concurrency.match(\n        options.concurrency,\n        () =>\n          finalizersMask(ExecutionStrategy.sequential)((restore) =>\n            isRequestBatchingEnabled\n              ? forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), true, false, 1)\n              : core.forEachSequentialDiscard(self, (a, i) => restore(f(a, i)))\n          ),\n        () =>\n          finalizersMask(ExecutionStrategy.parallel)((restore) =>\n            forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false)\n          ),\n        (n) =>\n          finalizersMask(ExecutionStrategy.parallelN(n))((restore) =>\n            forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false, n)\n          )\n      )\n    }\n\n    return concurrency.match(\n      options?.concurrency,\n      () =>\n        finalizersMask(ExecutionStrategy.sequential)((restore) =>\n          isRequestBatchingEnabled\n            ? forEachParN(self, 1, (a, i) => restore(f(a, i)), true)\n            : core.forEachSequential(self, (a, i) => restore(f(a, i)))\n        ),\n      () =>\n        finalizersMask(ExecutionStrategy.parallel)((restore) =>\n          forEachParUnbounded(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)\n        ),\n      (n) =>\n        finalizersMask(ExecutionStrategy.parallelN(n))((restore) =>\n          forEachParN(self, n, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)\n        )\n    )\n  }))\n\n/* @internal */\nexport const forEachParUnbounded = <A, B, E, R>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  batching: boolean\n): Effect.Effect<Array<B>, E, R> =>\n  core.suspend(() => {\n    const as = RA.fromIterable(self)\n    const array = new Array<B>(as.length)\n    const fn = (a: A, i: number) => core.flatMap(f(a, i), (b) => core.sync(() => array[i] = b))\n    return core.zipRight(forEachConcurrentDiscard(as, fn, batching, false), core.succeed(array))\n  })\n\n/** @internal */\nexport const forEachConcurrentDiscard = <A, X, E, R>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<X, E, R>,\n  batching: boolean,\n  processAll: boolean,\n  n?: number\n): Effect.Effect<void, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    core.transplant((graft) =>\n      core.withFiberRuntime((parent) => {\n        let todos = Array.from(self).reverse()\n        let target = todos.length\n        if (target === 0) {\n          return core.void\n        }\n        let counter = 0\n        let interrupted = false\n        const fibersCount = n ? Math.min(todos.length, n) : todos.length\n        const fibers = new Set<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const results = new Array()\n        const interruptAll = () =>\n          fibers.forEach((fiber) => {\n            fiber._scheduler.scheduleTask(() => {\n              fiber.unsafeInterruptAsFork(parent.id())\n            }, 0)\n          })\n        const startOrder = new Array<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const joinOrder = new Array<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const residual = new Array<core.Blocked>()\n        const collectExits = () => {\n          const exits: Array<Exit.Exit<any, E>> = results\n            .filter(({ exit }) => exit._tag === \"Failure\")\n            .sort((a, b) => a.index < b.index ? -1 : a.index === b.index ? 0 : 1)\n            .map(({ exit }) => exit)\n          if (exits.length === 0) {\n            exits.push(core.exitVoid)\n          }\n          return exits\n        }\n        const runFiber = <A, E, R>(eff: Effect.Effect<A, E, R>, interruptImmediately = false) => {\n          const runnable = core.uninterruptible(graft(eff))\n          const fiber = unsafeForkUnstarted(\n            runnable,\n            parent,\n            parent._runtimeFlags,\n            fiberScope.globalScope\n          )\n          parent._scheduler.scheduleTask(() => {\n            if (interruptImmediately) {\n              fiber.unsafeInterruptAsFork(parent.id())\n            }\n            fiber.resume(runnable)\n          }, 0)\n          return fiber\n        }\n        const onInterruptSignal = () => {\n          if (!processAll) {\n            target -= todos.length\n            todos = []\n          }\n          interrupted = true\n          interruptAll()\n        }\n        const stepOrExit = batching ? core.step : core.exit\n        const processingFiber = runFiber(\n          core.async<any, any, any>((resume) => {\n            const pushResult = <X, E>(res: Exit.Exit<X, E> | Effect.Blocked<X, E>, index: number) => {\n              if (res._op === \"Blocked\") {\n                residual.push(res as core.Blocked)\n              } else {\n                results.push({ index, exit: res })\n                if (res._op === \"Failure\" && !interrupted) {\n                  onInterruptSignal()\n                }\n              }\n            }\n            const next = () => {\n              if (todos.length > 0) {\n                const a = todos.pop()!\n                let index = counter++\n                const returnNextElement = () => {\n                  const a = todos.pop()!\n                  index = counter++\n                  return core.flatMap(core.yieldNow(), () =>\n                    core.flatMap(\n                      stepOrExit(restore(f(a, index))),\n                      onRes\n                    ))\n                }\n                const onRes = (\n                  res: Exit.Exit<X, E> | Effect.Blocked<X, E>\n                ): Effect.Effect<Exit.Exit<X, E> | Effect.Blocked<X, E>, never, R> => {\n                  if (todos.length > 0) {\n                    pushResult(res, index)\n                    if (todos.length > 0) {\n                      return returnNextElement()\n                    }\n                  }\n                  return core.succeed(res)\n                }\n                const todo = core.flatMap(\n                  stepOrExit(restore(f(a, index))),\n                  onRes\n                )\n                const fiber = runFiber(todo)\n                startOrder.push(fiber)\n                fibers.add(fiber)\n                if (interrupted) {\n                  fiber._scheduler.scheduleTask(() => {\n                    fiber.unsafeInterruptAsFork(parent.id())\n                  }, 0)\n                }\n                fiber.addObserver((wrapped) => {\n                  let exit: Exit.Exit<any, any> | core.Blocked\n                  if (wrapped._op === \"Failure\") {\n                    exit = wrapped\n                  } else {\n                    exit = wrapped.effect_instruction_i0 as any\n                  }\n                  joinOrder.push(fiber)\n                  fibers.delete(fiber)\n                  pushResult(exit, index)\n                  if (results.length === target) {\n                    resume(core.succeed(Option.getOrElse(\n                      core.exitCollectAll(collectExits(), { parallel: true }),\n                      () => core.exitVoid\n                    )))\n                  } else if (residual.length + results.length === target) {\n                    const requests = residual.map((blocked) => blocked.effect_instruction_i0).reduce(_RequestBlock.par)\n                    resume(core.succeed(core.blocked(\n                      requests,\n                      forEachConcurrentDiscard(\n                        [\n                          Option.getOrElse(\n                            core.exitCollectAll(collectExits(), { parallel: true }),\n                            () => core.exitVoid\n                          ),\n                          ...residual.map((blocked) => blocked.effect_instruction_i1)\n                        ],\n                        (i) => i,\n                        batching,\n                        true,\n                        n\n                      )\n                    )))\n                  } else {\n                    next()\n                  }\n                })\n              }\n            }\n            for (let i = 0; i < fibersCount; i++) {\n              next()\n            }\n          })\n        )\n        return core.asVoid(\n          core.onExit(\n            core.flatten(restore(internalFiber.join(processingFiber))),\n            core.exitMatch({\n              onFailure: () => {\n                onInterruptSignal()\n                const target = residual.length + 1\n                const concurrency = Math.min(typeof n === \"number\" ? n : residual.length, residual.length)\n                const toPop = Array.from(residual)\n                return core.async<any, any>((cb) => {\n                  const exits: Array<Exit.Exit<any, any>> = []\n                  let count = 0\n                  let index = 0\n                  const check = (index: number, hitNext: boolean) => (exit: Exit.Exit<any, any>) => {\n                    exits[index] = exit\n                    count++\n                    if (count === target) {\n                      cb(Option.getOrThrow(core.exitCollectAll(exits, { parallel: true })))\n                    }\n                    if (toPop.length > 0 && hitNext) {\n                      next()\n                    }\n                  }\n                  const next = () => {\n                    runFiber(toPop.pop()!, true).addObserver(check(index, true))\n                    index++\n                  }\n                  processingFiber.addObserver(check(index, false))\n                  index++\n                  for (let i = 0; i < concurrency; i++) {\n                    next()\n                  }\n                }) as any\n              },\n              onSuccess: () => core.forEachSequential(joinOrder, (f) => f.inheritAll)\n            })\n          )\n        )\n      })\n    )\n  )\n\n/* @internal */\nexport const forEachParN = <A, B, E, R>(\n  self: Iterable<A>,\n  n: number,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  batching: boolean\n): Effect.Effect<Array<B>, E, R> =>\n  core.suspend(() => {\n    const as = RA.fromIterable(self)\n    const array = new Array<B>(as.length)\n    const fn = (a: A, i: number) => core.map(f(a, i), (b) => array[i] = b)\n    return core.zipRight(forEachConcurrentDiscard(as, fn, batching, false, n), core.succeed(array))\n  })\n\n/* @internal */\nexport const fork = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  core.withFiberRuntime((state, status) => core.succeed(unsafeFork(self, state, status.runtimeFlags)))\n\n/* @internal */\nexport const forkDaemon = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  forkWithScopeOverride(self, fiberScope.globalScope)\n\n/* @internal */\nexport const forkWithErrorHandler = dual<\n  <E, X>(\n    handler: (e: E) => Effect.Effect<X>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>,\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    handler: (e: E) => Effect.Effect<X>\n  ) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>\n>(2, (self, handler) =>\n  fork(core.onError(self, (cause) => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return handler(either.left)\n      case \"Right\":\n        return core.failCause(either.right)\n    }\n  })))\n\n/** @internal */\nexport const unsafeFork = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope)\n  childFiber.resume(effect)\n  return childFiber\n}\n\n/** @internal */\nexport const unsafeForkUnstarted = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope)\n  return childFiber\n}\n\n/** @internal */\nexport const unsafeMakeChildFiber = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childId = FiberId.unsafeMake()\n  const parentFiberRefs = parentFiber.getFiberRefs()\n  const childFiberRefs = fiberRefs.forkAs(parentFiberRefs, childId)\n  const childFiber = new FiberRuntime<A, E>(childId, childFiberRefs, parentRuntimeFlags)\n  const childContext = fiberRefs.getOrDefault(\n    childFiberRefs,\n    core.currentContext as unknown as FiberRef.FiberRef<Context.Context<R>>\n  )\n  const supervisor = childFiber._supervisor\n\n  supervisor.onStart(\n    childContext,\n    effect,\n    Option.some(parentFiber),\n    childFiber\n  )\n\n  childFiber.addObserver((exit) => supervisor.onEnd(exit, childFiber))\n\n  const parentScope = overrideScope !== null ? overrideScope : pipe(\n    parentFiber.getFiberRef(core.currentForkScopeOverride),\n    Option.getOrElse(() => parentFiber.scope())\n  )\n\n  parentScope.add(parentRuntimeFlags, childFiber)\n\n  return childFiber\n}\n\n/* @internal */\nconst forkWithScopeOverride = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  scopeOverride: fiberScope.FiberScope\n): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  core.withFiberRuntime((parentFiber, parentStatus) =>\n    core.succeed(unsafeFork(self, parentFiber, parentStatus.runtimeFlags, scopeOverride))\n  )\n\n/* @internal */\nexport const mergeAll = dual<\n  <Z, Eff extends Effect.Effect<any, any, any>>(\n    zero: Z,\n    f: (z: Z, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Z, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, Z>(\n    elements: Iterable<Eff>,\n    zero: Z,\n    f: (z: Z, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<Z, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>\n>(\n  (args) => Predicate.isFunction(args[2]),\n  <A, E, R, Z>(elements: Iterable<Effect.Effect<A, E, R>>, zero: Z, f: (z: Z, a: A, i: number) => Z, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) =>\n    concurrency.matchSimple(\n      options?.concurrency,\n      () =>\n        RA.fromIterable(elements).reduce(\n          (acc, a, i) => core.zipWith(acc, a, (acc, a) => f(acc, a, i)),\n          core.succeed(zero) as Effect.Effect<Z, E, R>\n        ),\n      () =>\n        core.flatMap(Ref.make(zero), (acc) =>\n          core.flatMap(\n            forEach(\n              elements,\n              (effect, i) => core.flatMap(effect, (a) => Ref.update(acc, (b) => f(b, a, i))),\n              options\n            ),\n            () => Ref.get(acc)\n          ))\n    )\n)\n\n/* @internal */\nexport const partition = dual<\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>,\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n>((args) => Predicate.isIterable(args[0]), (elements, f, options) =>\n  pipe(\n    forEach(elements, (a, i) => core.either(f(a, i)), options),\n    core.map((chunk) => core.partitionMap(chunk, identity))\n  ))\n\n/* @internal */\nexport const validateAll = dual<\n  {\n    <A, B, E, R>(\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options?: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard?: false | undefined\n      }\n    ): (elements: Iterable<A>) => Effect.Effect<Array<B>, Array<E>, R>\n    <A, B, E, R>(\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard: true\n      }\n    ): (elements: Iterable<A>) => Effect.Effect<void, Array<E>, R>\n  },\n  {\n    <A, B, E, R>(\n      elements: Iterable<A>,\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options?: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard?: false | undefined\n      }\n    ): Effect.Effect<Array<B>, Array<E>, R>\n    <A, B, E, R>(\n      elements: Iterable<A>,\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard: true\n      }\n    ): Effect.Effect<void, Array<E>, R>\n  }\n>(\n  (args) => Predicate.isIterable(args[0]),\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n  }): Effect.Effect<any, Array<E>, R> =>\n    core.flatMap(\n      partition(elements, f, {\n        concurrency: options?.concurrency,\n        batching: options?.batching\n      }),\n      ([es, bs]) =>\n        es.length === 0\n          ? options?.discard ? core.void : core.succeed(bs)\n          : core.fail(es)\n    )\n)\n\n/* @internal */\nexport const raceAll: <Eff extends Effect.Effect<any, any, any>>(\n  all: Iterable<Eff>\n) => Effect.Effect<Effect.Effect.Success<Eff>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>> = <\n  A,\n  E,\n  R\n>(all: Iterable<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R> => {\n  const list = Chunk.fromIterable(all)\n  if (!Chunk.isNonEmpty(list)) {\n    return core.dieSync(() => new core.IllegalArgumentException(`Received an empty collection of effects`))\n  }\n  const self = Chunk.headNonEmpty(list)\n  const effects = Chunk.tailNonEmpty(list)\n  const inheritAll = (res: readonly [A, Fiber.Fiber<A, E>]) =>\n    pipe(\n      internalFiber.inheritAll(res[1]),\n      core.as(res[0])\n    )\n  return pipe(\n    core.deferredMake<readonly [A, Fiber.Fiber<A, E>], E>(),\n    core.flatMap((done) =>\n      pipe(\n        Ref.make(effects.length),\n        core.flatMap((fails) =>\n          core.uninterruptibleMask<A, E, R>((restore) =>\n            pipe(\n              fork(core.interruptible(self)),\n              core.flatMap((head) =>\n                pipe(\n                  effects,\n                  core.forEachSequential((effect) => fork(core.interruptible(effect))),\n                  core.map((fibers) => Chunk.unsafeFromArray(fibers)),\n                  core.map((tail) => pipe(tail, Chunk.prepend(head)) as Chunk.Chunk<Fiber.RuntimeFiber<A, E>>),\n                  core.tap((fibers) =>\n                    pipe(\n                      fibers,\n                      RA.reduce(core.void, (effect, fiber) =>\n                        pipe(\n                          effect,\n                          core.zipRight(\n                            pipe(\n                              internalFiber._await(fiber),\n                              core.flatMap(raceAllArbiter(fibers, fiber, done, fails)),\n                              fork,\n                              core.asVoid\n                            )\n                          )\n                        ))\n                    )\n                  ),\n                  core.flatMap((fibers) =>\n                    pipe(\n                      restore(pipe(Deferred.await(done), core.flatMap(inheritAll))),\n                      core.onInterrupt(() =>\n                        pipe(\n                          fibers,\n                          RA.reduce(\n                            core.void,\n                            (effect, fiber) => pipe(effect, core.zipLeft(core.interruptFiber(fiber)))\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n}\n\nconst raceAllArbiter = <E, E1, A, A1>(\n  fibers: Iterable<Fiber.Fiber<A | A1, E | E1>>,\n  winner: Fiber.Fiber<A | A1, E | E1>,\n  deferred: Deferred.Deferred<readonly [A | A1, Fiber.Fiber<A | A1, E | E1>], E | E1>,\n  fails: Ref.Ref<number>\n) =>\n(exit: Exit.Exit<A | A1, E | E1>): Effect.Effect<void> =>\n  core.exitMatchEffect(exit, {\n    onFailure: (cause) =>\n      pipe(\n        Ref.modify(fails, (fails) =>\n          [\n            fails === 0 ?\n              pipe(core.deferredFailCause(deferred, cause), core.asVoid) :\n              core.void,\n            fails - 1\n          ] as const),\n        core.flatten\n      ),\n    onSuccess: (value): Effect.Effect<void> =>\n      pipe(\n        core.deferredSucceed(deferred, [value, winner] as const),\n        core.flatMap((set) =>\n          set ?\n            pipe(\n              Chunk.fromIterable(fibers),\n              RA.reduce(\n                core.void,\n                (effect, fiber) =>\n                  fiber === winner ?\n                    effect :\n                    pipe(effect, core.zipLeft(core.interruptFiber(fiber)))\n              )\n            ) :\n            core.void\n        )\n      )\n  })\n\n/* @internal */\nexport const reduceEffect = dual<\n  <Z, E, R, Eff extends Effect.Effect<any, any, any>>(\n    zero: Effect.Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Z, E | Effect.Effect.Error<Eff>, R | Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, Z, E, R>(\n    elements: Iterable<Eff>,\n    zero: Effect.Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<Z, E | Effect.Effect.Error<Eff>, R | Effect.Effect.Context<Eff>>\n>((args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]), <A, E, R, Z>(\n  elements: Iterable<Effect.Effect<A, E, R>>,\n  zero: Effect.Effect<Z, E, R>,\n  f: (acc: NoInfer<Z>, a: NoInfer<A>, i: number) => Z,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }\n) =>\n  concurrency.matchSimple(\n    options?.concurrency,\n    () => RA.fromIterable(elements).reduce((acc, a, i) => core.zipWith(acc, a, (acc, a) => f(acc, a, i)), zero),\n    () =>\n      core.suspend(() =>\n        pipe(\n          mergeAll(\n            [zero, ...elements],\n            Option.none<Z>(),\n            (acc, elem, i) => {\n              switch (acc._tag) {\n                case \"None\": {\n                  return Option.some(elem as Z)\n                }\n                case \"Some\": {\n                  return Option.some(f(acc.value, elem as A, i))\n                }\n              }\n            },\n            options\n          ),\n          core.map((option) => {\n            switch (option._tag) {\n              case \"None\": {\n                throw new Error(\n                  \"BUG: Effect.reduceEffect - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                )\n              }\n              case \"Some\": {\n                return option.value\n              }\n            }\n          })\n        )\n      )\n  ))\n\n/* @internal */\nexport const parallelFinalizers = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self,\n      onSome: (scope) => {\n        switch (scope.strategy._tag) {\n          case \"Parallel\":\n            return self\n          case \"Sequential\":\n          case \"ParallelN\":\n            return core.flatMap(\n              core.scopeFork(scope, ExecutionStrategy.parallel),\n              (inner) => scopeExtend(self, inner)\n            )\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const parallelNFinalizers =\n  (parallelism: number) => <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n    core.contextWithEffect((context) =>\n      Option.match(Context.getOption(context, scopeTag), {\n        onNone: () => self,\n        onSome: (scope) => {\n          if (scope.strategy._tag === \"ParallelN\" && scope.strategy.parallelism === parallelism) {\n            return self\n          }\n          return core.flatMap(\n            core.scopeFork(scope, ExecutionStrategy.parallelN(parallelism)),\n            (inner) => scopeExtend(self, inner)\n          )\n        }\n      })\n    )\n\n/* @internal */\nexport const finalizersMask = (strategy: ExecutionStrategy.ExecutionStrategy) =>\n<A, E, R>(\n  self: (restore: <A1, E1, R1>(self: Effect.Effect<A1, E1, R1>) => Effect.Effect<A1, E1, R1>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self(identity),\n      onSome: (scope) => {\n        const patch = strategy._tag === \"Parallel\"\n          ? parallelFinalizers\n          : strategy._tag === \"Sequential\"\n          ? sequentialFinalizers\n          : parallelNFinalizers(strategy.parallelism)\n        switch (scope.strategy._tag) {\n          case \"Parallel\":\n            return patch(self(parallelFinalizers))\n          case \"Sequential\":\n            return patch(self(sequentialFinalizers))\n          case \"ParallelN\":\n            return patch(self(parallelNFinalizers(scope.strategy.parallelism)))\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const scopeWith = <A, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R | Scope.Scope> => core.flatMap(scopeTag, f)\n\n/* @internal */\nexport const scopedEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Effect.Effect<A, E, Exclude<R, Scope.Scope>> =>\n  core.flatMap(scopeMake(), (scope) => scopeUse(effect, scope))\n\n/* @internal */\nexport const sequentialFinalizers = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self,\n      onSome: (scope) => {\n        switch (scope.strategy._tag) {\n          case \"Sequential\":\n            return self\n          case \"Parallel\":\n          case \"ParallelN\":\n            return core.flatMap(\n              core.scopeFork(scope, ExecutionStrategy.sequential),\n              (inner) => scopeExtend(self, inner)\n            )\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const tagMetricsScoped = (key: string, value: string): Effect.Effect<void, never, Scope.Scope> =>\n  labelMetricsScoped([metricLabel.make(key, value)])\n\n/* @internal */\nexport const labelMetricsScoped = (\n  labels: Iterable<MetricLabel.MetricLabel>\n): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRefLocallyScopedWith(core.currentMetricLabels, (old) => RA.union(old, labels))\n\n/* @internal */\nexport const using = dual<\n  <A, A2, E2, R2>(\n    use: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E | E2, Exclude<R, Scope.Scope> | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    use: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A2, E | E2, Exclude<R, Scope.Scope> | R2>\n>(2, (self, use) =>\n  core.acquireUseRelease(\n    scopeMake(),\n    (scope) => core.flatMap(scopeExtend(self, scope), use),\n    (scope, exit) => core.scopeClose(scope, exit)\n  ))\n\n/** @internal */\nexport const validate = dual<\n  <B, E1, R1>(\n    that: Effect.Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[A, B], E | E1, R | R1>,\n  <A, E, R, B, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<[A, B], E | E1, R | R1>\n>(\n  (args) => core.isEffect(args[1]),\n  (self, that, options) => validateWith(self, that, (a, b) => [a, b], options)\n)\n\n/** @internal */\nexport const validateWith = dual<\n  <B, E1, R1, A, C>(\n    that: Effect.Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<C, E | E1, R | R1>,\n  <A, E, R, B, E1, R1, C>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<C, E | E1, R | R1>\n>((args) => core.isEffect(args[1]), (self, that, f, options) =>\n  core.flatten(zipWithOptions(\n    core.exit(self),\n    core.exit(that),\n    (ea, eb) =>\n      core.exitZipWith(ea, eb, {\n        onSuccess: f,\n        onFailure: (ca, cb) => options?.concurrent ? internalCause.parallel(ca, cb) : internalCause.sequential(ca, cb)\n      }),\n    options\n  )))\n\n/* @internal */\nexport const validateAllPar = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<B>, Array<E>, R>,\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => Effect.Effect<Array<B>, Array<E>, R>\n>(2, (elements, f) =>\n  core.flatMap(\n    partition(elements, f),\n    ([es, bs]) =>\n      es.length === 0\n        ? core.succeed(bs)\n        : core.fail(es)\n  ))\n\n/* @internal */\nexport const validateAllParDiscard = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<void, Array<E>, R>,\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A) => Effect.Effect<B, E, R>) => Effect.Effect<void, Array<E>, R>\n>(2, (elements, f) =>\n  core.flatMap(\n    partition(elements, f),\n    ([es, _]) =>\n      es.length === 0\n        ? core.void\n        : core.fail(es)\n  ))\n\n/* @internal */\nexport const validateFirst = dual<\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) => (elements: Iterable<A>) => Effect.Effect<B, Array<E>, R>,\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) => Effect.Effect<B, Array<E>, R>\n>(\n  (args) => Predicate.isIterable(args[0]),\n  (elements, f, options) => core.flip(forEach(elements, (a, i) => core.flip(f(a, i)), options))\n)\n\n/* @internal */\nexport const withClockScoped = <A extends Clock.Clock>(value: A) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(clock.clockTag, value))\n\n/* @internal */\nexport const withRandomScoped = <A extends Random.Random>(value: A) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(randomTag, value))\n\n/* @internal */\nexport const withConfigProviderScoped = (value: ConfigProvider) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(configProviderTag, value))\n\n/* @internal */\nexport const withEarlyRelease = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[Effect.Effect<void>, A], E, R | Scope.Scope> =>\n  scopeWith((parent) =>\n    core.flatMap(core.scopeFork(parent, executionStrategy.sequential), (child) =>\n      pipe(\n        self,\n        scopeExtend(child),\n        core.map((value) => [\n          core.fiberIdWith((fiberId) => core.scopeClose(child, core.exitInterrupt(fiberId))),\n          value\n        ])\n      ))\n  )\n\n/** @internal */\nexport const zipOptions = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>\n>((args) => core.isEffect(args[1]), (\n  self,\n  that,\n  options\n) => zipWithOptions(self, that, (a, b) => [a, b], options))\n\n/** @internal */\nexport const zipLeftOptions = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(\n  (args) => core.isEffect(args[1]),\n  (self, that, options) => {\n    if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {\n      return core.zipLeft(self, that)\n    }\n    return zipWithOptions(self, that, (a, _) => a, options)\n  }\n)\n\n/** @internal */\nexport const zipRightOptions: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): Effect.Effect<A2, E2 | E, R2 | R>\n} = dual((args) => core.isEffect(args[1]), <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  options?: {\n    readonly concurrent?: boolean | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }\n): Effect.Effect<A2, E2 | E, R2 | R> => {\n  if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {\n    return core.zipRight(self, that)\n  }\n  return zipWithOptions(self, that, (_, b) => b, options)\n})\n\n/** @internal */\nexport const zipWithOptions: {\n  <A2, E2, R2, A, B>(\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): Effect.Effect<B, E2 | E, R2 | R>\n} = dual((args) => core.isEffect(args[1]), <A, E, R, A2, E2, R2, B>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  f: (a: A, b: A2) => B,\n  options?: {\n    readonly concurrent?: boolean | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }\n): Effect.Effect<B, E2 | E, R2 | R> =>\n  core.map(\n    all([self, that], {\n      concurrency: options?.concurrent ? 2 : 1,\n      batching: options?.batching\n    }),\n    ([a, a2]) => f(a, a2)\n  ))\n\n/* @internal */\nexport const withRuntimeFlagsScoped = (\n  update: RuntimeFlagsPatch.RuntimeFlagsPatch\n): Effect.Effect<void, never, Scope.Scope> => {\n  if (update === RuntimeFlagsPatch.empty) {\n    return core.void\n  }\n  return pipe(\n    core.runtimeFlags,\n    core.flatMap((runtimeFlags) => {\n      const updatedRuntimeFlags = _runtimeFlags.patch(runtimeFlags, update)\n      const revertRuntimeFlags = _runtimeFlags.diff(updatedRuntimeFlags, runtimeFlags)\n      return pipe(\n        core.updateRuntimeFlags(update),\n        core.zipRight(addFinalizer(() => core.updateRuntimeFlags(revertRuntimeFlags))),\n        core.asVoid\n      )\n    }),\n    core.uninterruptible\n  )\n}\n\n// circular with Scope\n\n/** @internal */\nexport const scopeTag = Context.GenericTag<Scope.Scope>(\"effect/Scope\")\n\n/* @internal */\nexport const scope: Effect.Effect<Scope.Scope, never, Scope.Scope> = scopeTag\n\ninterface ScopeImpl extends Scope.CloseableScope {\n  state: {\n    readonly _tag: \"Open\"\n    readonly finalizers: Set<Scope.Scope.Finalizer>\n  } | {\n    readonly _tag: \"Closed\"\n    readonly exit: Exit.Exit<unknown, unknown>\n  }\n}\n\nconst scopeUnsafeAddFinalizer = (scope: ScopeImpl, fin: Scope.Scope.Finalizer): void => {\n  if (scope.state._tag === \"Open\") {\n    scope.state.finalizers.add(fin)\n  }\n}\n\nconst ScopeImplProto: Omit<ScopeImpl, \"strategy\" | \"state\"> = {\n  [core.ScopeTypeId]: core.ScopeTypeId,\n  [core.CloseableScopeTypeId]: core.CloseableScopeTypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  fork(this: ScopeImpl, strategy) {\n    return core.sync(() => {\n      const newScope = scopeUnsafeMake(strategy)\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state\n        return newScope\n      }\n      const fin = (exit: Exit.Exit<unknown, unknown>) => newScope.close(exit)\n      this.state.finalizers.add(fin)\n      scopeUnsafeAddFinalizer(newScope, (_) =>\n        core.sync(() => {\n          if (this.state._tag === \"Open\") {\n            this.state.finalizers.delete(fin)\n          }\n        }))\n      return newScope\n    })\n  },\n  close(this: ScopeImpl, exit) {\n    return core.suspend(() => {\n      if (this.state._tag === \"Closed\") {\n        return core.void\n      }\n      const finalizers = Array.from(this.state.finalizers.values()).reverse()\n      this.state = { _tag: \"Closed\", exit }\n      if (finalizers.length === 0) {\n        return core.void\n      }\n      return executionStrategy.isSequential(this.strategy) ?\n        pipe(\n          core.forEachSequential(finalizers, (fin) => core.exit(fin(exit))),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        ) :\n        executionStrategy.isParallel(this.strategy) ?\n        pipe(\n          forEachParUnbounded(finalizers, (fin) => core.exit(fin(exit)), false),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results, { parallel: true }),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        ) :\n        pipe(\n          forEachParN(finalizers, this.strategy.parallelism, (fin) => core.exit(fin(exit)), false),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results, { parallel: true }),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        )\n    })\n  },\n  addFinalizer(this: ScopeImpl, fin) {\n    return core.suspend(() => {\n      if (this.state._tag === \"Closed\") {\n        return fin(this.state.exit)\n      }\n      this.state.finalizers.add(fin)\n      return core.void\n    })\n  }\n}\n\nconst scopeUnsafeMake = (\n  strategy: ExecutionStrategy.ExecutionStrategy = executionStrategy.sequential\n): ScopeImpl => {\n  const scope = Object.create(ScopeImplProto)\n  scope.strategy = strategy\n  scope.state = { _tag: \"Open\", finalizers: new Set() }\n  return scope\n}\n\n/* @internal */\nexport const scopeMake = (\n  strategy: ExecutionStrategy.ExecutionStrategy = executionStrategy.sequential\n): Effect.Effect<Scope.Scope.Closeable> => core.sync(() => scopeUnsafeMake(strategy))\n\n/* @internal */\nexport const scopeExtend = dual<\n  (scope: Scope.Scope) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope.Scope) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope.Scope) =>\n    core.mapInputContext<A, E, R, Exclude<R, Scope.Scope>>(\n      effect,\n      // @ts-expect-error\n      Context.merge(Context.make(scopeTag, scope))\n    )\n)\n\n/* @internal */\nexport const scopeUse = dual<\n  (\n    scope: Scope.Scope.Closeable\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    effect: Effect.Effect<A, E, R>,\n    scope: Scope.Scope.Closeable\n  ) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>\n>(2, (effect, scope) =>\n  pipe(\n    effect,\n    scopeExtend(scope),\n    core.onExit((exit) => scope.close(exit))\n  ))\n\n// circular with Supervisor\n\n/** @internal */\nexport const fiberRefUnsafeMakeSupervisor = (\n  initial: Supervisor.Supervisor<any>\n): FiberRef.FiberRef<Supervisor.Supervisor<any>> =>\n  core.fiberRefUnsafeMakePatch(initial, {\n    differ: SupervisorPatch.differ,\n    fork: SupervisorPatch.empty\n  })\n\n// circular with FiberRef\n\n/* @internal */\nexport const fiberRefLocallyScoped = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void, never, Scope.Scope>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<void, never, Scope.Scope>\n>(2, (self, value) =>\n  core.asVoid(\n    acquireRelease(\n      core.flatMap(\n        core.fiberRefGet(self),\n        (oldValue) => core.as(core.fiberRefSet(self, value), oldValue)\n      ),\n      (oldValue) => core.fiberRefSet(self, oldValue)\n    )\n  ))\n\n/* @internal */\nexport const fiberRefLocallyScopedWith = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void, never, Scope.Scope>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<void, never, Scope.Scope>\n>(2, (self, f) => core.fiberRefGetWith(self, (a) => fiberRefLocallyScoped(self, f(a))))\n\n/* @internal */\nexport const fiberRefMake = <A>(\n  initial: A,\n  options?: {\n    readonly fork?: ((a: A) => A) | undefined\n    readonly join?: ((left: A, right: A) => A) | undefined\n  }\n): Effect.Effect<FiberRef.FiberRef<A>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMake(initial, options))\n\n/* @internal */\nexport const fiberRefMakeWith = <Value>(\n  ref: LazyArg<FiberRef.FiberRef<Value>>\n): Effect.Effect<FiberRef.FiberRef<Value>, never, Scope.Scope> =>\n  acquireRelease(\n    core.tap(core.sync(ref), (ref) => core.fiberRefUpdate(ref, identity)),\n    (fiberRef) => core.fiberRefDelete(fiberRef)\n  )\n\n/* @internal */\nexport const fiberRefMakeContext = <A>(\n  initial: Context.Context<A>\n): Effect.Effect<FiberRef.FiberRef<Context.Context<A>>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMakeContext(initial))\n\n/* @internal */\nexport const fiberRefMakeRuntimeFlags = (\n  initial: RuntimeFlags.RuntimeFlags\n): Effect.Effect<FiberRef.FiberRef<RuntimeFlags.RuntimeFlags>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMakeRuntimeFlags(initial))\n\n/** @internal */\nexport const currentRuntimeFlags: FiberRef.FiberRef<RuntimeFlags.RuntimeFlags> = core.fiberRefUnsafeMakeRuntimeFlags(\n  _runtimeFlags.none\n)\n\n/** @internal */\nexport const currentSupervisor: FiberRef.FiberRef<Supervisor.Supervisor<any>> = fiberRefUnsafeMakeSupervisor(\n  supervisor.none\n)\n\n// circular with Fiber\n\n/* @internal */\nexport const fiberAwaitAll = (fibers: Iterable<Fiber.Fiber<any, any>>): Effect.Effect<void> =>\n  core.asVoid(internalFiber._await(fiberAll(fibers)))\n\n/** @internal */\nexport const fiberAll = <A, E>(fibers: Iterable<Fiber.Fiber<A, E>>): Fiber.Fiber<Array<A>, E> => ({\n  [internalFiber.FiberTypeId]: internalFiber.fiberVariance,\n  id: () =>\n    RA.fromIterable(fibers).reduce((id, fiber) => FiberId.combine(id, fiber.id()), FiberId.none as FiberId.FiberId),\n  await: core.exit(forEachParUnbounded(fibers, (fiber) => core.flatten(fiber.await), false)),\n  children: core.map(forEachParUnbounded(fibers, (fiber) => fiber.children, false), RA.flatten),\n  inheritAll: core.forEachSequentialDiscard(fibers, (fiber) => fiber.inheritAll),\n  poll: core.map(\n    core.forEachSequential(fibers, (fiber) => fiber.poll),\n    RA.reduceRight(\n      Option.some<Exit.Exit<Array<A>, E>>(core.exitSucceed(new Array())),\n      (optionB, optionA) => {\n        switch (optionA._tag) {\n          case \"None\": {\n            return Option.none()\n          }\n          case \"Some\": {\n            switch (optionB._tag) {\n              case \"None\": {\n                return Option.none()\n              }\n              case \"Some\": {\n                return Option.some(\n                  core.exitZipWith(optionA.value, optionB.value, {\n                    onSuccess: (a, chunk) => [a, ...chunk],\n                    onFailure: internalCause.parallel\n                  })\n                )\n              }\n            }\n          }\n        }\n      }\n    )\n  ),\n  interruptAsFork: (fiberId) => core.forEachSequentialDiscard(fibers, (fiber) => fiber.interruptAsFork(fiberId)),\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/* @internal */\nexport const fiberInterruptFork = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<void> =>\n  core.asVoid(forkDaemon(core.interruptFiber(self)))\n\n/* @internal */\nexport const fiberJoinAll = <A, E>(fibers: Iterable<Fiber.Fiber<A, E>>): Effect.Effect<Array<A>, E> =>\n  internalFiber.join(fiberAll(fibers))\n\n/* @internal */\nexport const fiberScoped = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Fiber.Fiber<A, E>, never, Scope.Scope> =>\n  acquireRelease(core.succeed(self), core.interruptFiber)\n\n//\n// circular race\n//\n\n/** @internal */\nexport const raceWith = dual<\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect.Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect.Effect<A3, E3, R3>\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>,\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect.Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect.Effect<A3, E3, R3>\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n>(3, (self, other, options) =>\n  raceFibersWith(self, other, {\n    onSelfWin: (winner, loser) =>\n      core.flatMap(winner.await, (exit) => {\n        switch (exit._tag) {\n          case OpCodes.OP_SUCCESS: {\n            return core.flatMap(\n              winner.inheritAll,\n              () => options.onSelfDone(exit, loser)\n            )\n          }\n          case OpCodes.OP_FAILURE: {\n            return options.onSelfDone(exit, loser)\n          }\n        }\n      }),\n    onOtherWin: (winner, loser) =>\n      core.flatMap(winner.await, (exit) => {\n        switch (exit._tag) {\n          case OpCodes.OP_SUCCESS: {\n            return core.flatMap(\n              winner.inheritAll,\n              () => options.onOtherDone(exit, loser)\n            )\n          }\n          case OpCodes.OP_FAILURE: {\n            return options.onOtherDone(exit, loser)\n          }\n        }\n      })\n  }))\n\n/** @internal */\nexport const disconnect = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    core.fiberIdWith((fiberId) =>\n      core.flatMap(forkDaemon(restore(self)), (fiber) =>\n        pipe(\n          restore(internalFiber.join(fiber)),\n          core.onInterrupt(() => pipe(fiber, internalFiber.interruptAsFork(fiberId)))\n        ))\n    )\n  )\n\n/** @internal */\nexport const race = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>\n>(\n  2,\n  (self, that) =>\n    core.fiberIdWith((parentFiberId) =>\n      raceWith(self, that, {\n        onSelfDone: (exit, right) =>\n          core.exitMatchEffect(exit, {\n            onFailure: (cause) =>\n              pipe(\n                internalFiber.join(right),\n                internalEffect.mapErrorCause((cause2) => internalCause.parallel(cause, cause2))\n              ),\n            onSuccess: (value) =>\n              pipe(\n                right,\n                core.interruptAsFiber(parentFiberId),\n                core.as(value)\n              )\n          }),\n        onOtherDone: (exit, left) =>\n          core.exitMatchEffect(exit, {\n            onFailure: (cause) =>\n              pipe(\n                internalFiber.join(left),\n                internalEffect.mapErrorCause((cause2) => internalCause.parallel(cause2, cause))\n              ),\n            onSuccess: (value) =>\n              pipe(\n                left,\n                core.interruptAsFiber(parentFiberId),\n                core.as(value)\n              )\n          })\n      })\n    )\n)\n\n/** @internal */\nexport const raceFibersWith = dual<\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfWin: (\n        winner: Fiber.RuntimeFiber<A, E>,\n        loser: Fiber.RuntimeFiber<A1, E1>\n      ) => Effect.Effect<A2, E2, R2>\n      readonly onOtherWin: (\n        winner: Fiber.RuntimeFiber<A1, E1>,\n        loser: Fiber.RuntimeFiber<A, E>\n      ) => Effect.Effect<A3, E3, R3>\n      readonly selfScope?: fiberScope.FiberScope | undefined\n      readonly otherScope?: fiberScope.FiberScope | undefined\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>,\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfWin: (\n        winner: Fiber.RuntimeFiber<A, E>,\n        loser: Fiber.RuntimeFiber<A1, E1>\n      ) => Effect.Effect<A2, E2, R2>\n      readonly onOtherWin: (\n        winner: Fiber.RuntimeFiber<A1, E1>,\n        loser: Fiber.RuntimeFiber<A, E>\n      ) => Effect.Effect<A3, E3, R3>\n      readonly selfScope?: fiberScope.FiberScope | undefined\n      readonly otherScope?: fiberScope.FiberScope | undefined\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n>(3, <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  other: Effect.Effect<A1, E1, R1>,\n  options: {\n    readonly onSelfWin: (\n      winner: Fiber.RuntimeFiber<A, E>,\n      loser: Fiber.RuntimeFiber<A1, E1>\n    ) => Effect.Effect<A2, E2, R2>\n    readonly onOtherWin: (\n      winner: Fiber.RuntimeFiber<A1, E1>,\n      loser: Fiber.RuntimeFiber<A, E>\n    ) => Effect.Effect<A3, E3, R3>\n    readonly selfScope?: fiberScope.FiberScope | undefined\n    readonly otherScope?: fiberScope.FiberScope | undefined\n  }\n) =>\n  core.withFiberRuntime((parentFiber, parentStatus) => {\n    const parentRuntimeFlags = parentStatus.runtimeFlags\n    const raceIndicator = MRef.make(true)\n    const leftFiber: FiberRuntime<A, E> = unsafeMakeChildFiber(\n      self,\n      parentFiber,\n      parentRuntimeFlags,\n      options.selfScope\n    )\n    const rightFiber: FiberRuntime<A1, E1> = unsafeMakeChildFiber(\n      other,\n      parentFiber,\n      parentRuntimeFlags,\n      options.otherScope\n    )\n    return core.async((cb) => {\n      leftFiber.addObserver(() => completeRace(leftFiber, rightFiber, options.onSelfWin, raceIndicator, cb))\n      rightFiber.addObserver(() => completeRace(rightFiber, leftFiber, options.onOtherWin, raceIndicator, cb))\n      leftFiber.startFork(self)\n      rightFiber.startFork(other)\n    }, FiberId.combine(leftFiber.id(), rightFiber.id()))\n  }))\n\nconst completeRace = <A2, A3, E2, E3, R, R1, R2, R3>(\n  winner: Fiber.RuntimeFiber<any, any>,\n  loser: Fiber.RuntimeFiber<any, any>,\n  cont: (winner: Fiber.RuntimeFiber<any, any>, loser: Fiber.RuntimeFiber<any, any>) => Effect.Effect<any, any, any>,\n  ab: MRef.MutableRef<boolean>,\n  cb: (_: Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>) => void\n): void => {\n  if (MRef.compareAndSet(true, false)(ab)) {\n    cb(cont(winner, loser))\n  }\n}\n\n/** @internal */\nexport const ensuring: {\n  <X, R1>(\n    finalizer: Effect.Effect<X, never, R1>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R1 | R>\n  <A, E, R, X, R1>(self: Effect.Effect<A, E, R>, finalizer: Effect.Effect<X, never, R1>): Effect.Effect<A, E, R1 | R>\n} = dual(\n  2,\n  <A, E, R, X, R1>(self: Effect.Effect<A, E, R>, finalizer: Effect.Effect<X, never, R1>): Effect.Effect<A, E, R1 | R> =>\n    core.uninterruptibleMask((restore) =>\n      core.matchCauseEffect(restore(self), {\n        onFailure: (cause1) =>\n          core.matchCauseEffect(finalizer, {\n            onFailure: (cause2) => core.failCause(internalCause.sequential(cause1, cause2)),\n            onSuccess: () => core.failCause(cause1)\n          }),\n        onSuccess: (a) => core.as(finalizer, a)\n      })\n    )\n)\n\n/** @internal */\nexport const invokeWithInterrupt: <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  entries: ReadonlyArray<Entry<unknown>>,\n  onInterrupt?: () => void\n) => Effect.Effect<void, E, R> = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  entries: ReadonlyArray<Entry<unknown>>,\n  onInterrupt?: () => void\n) =>\n  core.fiberIdWith((id) =>\n    core.flatMap(\n      core.flatMap(\n        forkDaemon(core.interruptible(self)),\n        (processing) =>\n          core.async<void, E>((cb) => {\n            const counts = entries.map((_) => _.listeners.count)\n            const checkDone = () => {\n              if (counts.every((count) => count === 0)) {\n                if (\n                  entries.every((_) => {\n                    if (_.result.state.current._tag === \"Pending\") {\n                      return true\n                    } else if (\n                      _.result.state.current._tag === \"Done\" &&\n                      core.exitIsExit(_.result.state.current.effect) &&\n                      _.result.state.current.effect._tag === \"Failure\" &&\n                      internalCause.isInterrupted(_.result.state.current.effect.cause)\n                    ) {\n                      return true\n                    } else {\n                      return false\n                    }\n                  })\n                ) {\n                  cleanup.forEach((f) => f())\n                  onInterrupt?.()\n                  cb(core.interruptFiber(processing))\n                }\n              }\n            }\n            processing.addObserver((exit) => {\n              cleanup.forEach((f) => f())\n              cb(exit)\n            })\n            const cleanup = entries.map((r, i) => {\n              const observer = (count: number) => {\n                counts[i] = count\n                checkDone()\n              }\n              r.listeners.addObserver(observer)\n              return () => r.listeners.removeObserver(observer)\n            })\n            checkDone()\n            return core.sync(() => {\n              cleanup.forEach((f) => f())\n            })\n          })\n      ),\n      () =>\n        core.suspend(() => {\n          const residual = entries.flatMap((entry) => {\n            if (!entry.state.completed) {\n              return [entry]\n            }\n            return []\n          })\n          return core.forEachSequentialDiscard(\n            residual,\n            (entry) => complete(entry.request as any, core.exitInterrupt(id))\n          )\n        })\n    )\n  )\n\n/** @internal */\nexport const interruptWhenPossible = dual<\n  (all: Iterable<Request<any, any>>) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<void, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    all: Iterable<Request<any, any>>\n  ) => Effect.Effect<void, E, R>\n>(2, (self, all) =>\n  core.fiberRefGetWith(\n    currentRequestMap,\n    (map) =>\n      core.suspend(() => {\n        const entries = RA.fromIterable(all).flatMap((_) => map.has(_) ? [map.get(_)!] : [])\n        return invokeWithInterrupt(self, entries)\n      })\n  ))\n\n// circular Tracer\n\n/** @internal */\nexport const makeSpanScoped = (\n  name: string,\n  options?: Tracer.SpanOptions | undefined\n): Effect.Effect<Tracer.Span, never, Scope.Scope> => {\n  options = tracer.addSpanStackTrace(options)\n  return core.uninterruptible(\n    core.withFiberRuntime((fiber) => {\n      const scope = Context.unsafeGet(fiber.getFiberRef(core.currentContext), scopeTag)\n      const span = internalEffect.unsafeMakeSpan(fiber, name, options)\n      const timingEnabled = fiber.getFiberRef(core.currentTracerTimingEnabled)\n      const clock_ = Context.get(fiber.getFiberRef(defaultServices.currentServices), clock.clockTag)\n      return core.as(\n        core.scopeAddFinalizerExit(scope, (exit) => internalEffect.endSpan(span, exit, clock_, timingEnabled)),\n        span\n      )\n    })\n  )\n}\n\n/* @internal */\nexport const withTracerScoped = (value: Tracer.Tracer): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(tracer.tracerTag, value))\n\n/** @internal */\nexport const withSpanScoped: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Scope.Scope | Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Effect.Effect<A, E, Scope.Scope | Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = tracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1])\n  if (dataFirst) {\n    const self = arguments[0]\n    return core.flatMap(\n      makeSpanScoped(name, tracer.addSpanStackTrace(options)),\n      (span) => internalEffect.provideService(self, tracer.spanTag, span)\n    )\n  }\n  return (self: Effect.Effect<any, any, any>) =>\n    core.flatMap(\n      makeSpanScoped(name, tracer.addSpanStackTrace(options)),\n      (span) => internalEffect.provideService(self, tracer.spanTag, span)\n    )\n} as any\n", "import type * as Cache from \"../Cache.js\"\nimport type * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Deferred from \"../Deferred.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Exit from \"../Exit.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport { pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as MutableHashMap from \"../MutableHashMap.js\"\nimport * as MutableQueue from \"../MutableQueue.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport * as effect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as Data from \"./data.js\"\nimport { none } from \"./fiberId.js\"\nimport * as fiberRuntime from \"./fiberRuntime.js\"\n\n/**\n * A `MapValue` represents a value in the cache. A value may either be\n * `Pending` with a `Promise` that will contain the result of computing the\n * lookup function, when it is available, or `Complete` with an `Exit` value\n * that contains the result of computing the lookup function.\n *\n * @internal\n */\nexport type MapValue<Key, Value, Error> =\n  | Complete<Key, Value, Error>\n  | Pending<Key, Value, Error>\n  | Refreshing<Key, Value, Error>\n\n/** @internal */\nexport interface Complete<out Key, out Value, out Error> {\n  readonly _tag: \"Complete\"\n  readonly key: MapKey<Key>\n  readonly exit: Exit.Exit<Value, Error>\n  readonly entryStats: Cache.EntryStats\n  readonly timeToLiveMillis: number\n}\n\n/** @internal */\nexport interface Pending<out Key, in out Value, in out Error> {\n  readonly _tag: \"Pending\"\n  readonly key: MapKey<Key>\n  readonly deferred: Deferred.Deferred<Value, Error>\n}\n\n/** @internal */\nexport interface Refreshing<out Key, in out Value, in out Error> {\n  readonly _tag: \"Refreshing\"\n  readonly deferred: Deferred.Deferred<Value, Error>\n  readonly complete: Complete<Key, Value, Error>\n}\n\n/** @internal */\nexport const complete = <Key, Value, Error>(\n  key: MapKey<Key>,\n  exit: Exit.Exit<Value, Error>,\n  entryStats: Cache.EntryStats,\n  timeToLiveMillis: number\n): MapValue<Key, Value, Error> =>\n  Data.struct({\n    _tag: \"Complete\" as const,\n    key,\n    exit,\n    entryStats,\n    timeToLiveMillis\n  })\n\n/** @internal */\nexport const pending = <Key, Value, Error>(\n  key: MapKey<Key>,\n  deferred: Deferred.Deferred<Value, Error>\n): MapValue<Key, Value, Error> =>\n  Data.struct({\n    _tag: \"Pending\" as const,\n    key,\n    deferred\n  })\n\n/** @internal */\nexport const refreshing = <Key, Value, Error>(\n  deferred: Deferred.Deferred<Value, Error>,\n  complete: Complete<Key, Value, Error>\n): MapValue<Key, Value, Error> =>\n  Data.struct({\n    _tag: \"Refreshing\" as const,\n    deferred,\n    complete\n  })\n\n/** @internal */\nexport const MapKeyTypeId = Symbol.for(\"effect/Cache/MapKey\")\n\n/** @internal */\nexport type MapKeyTypeId = typeof MapKeyTypeId\n\n/**\n * A `MapKey` represents a key in the cache. It contains mutable references\n * to the previous key and next key in the `KeySet` to support an efficient\n * implementation of a sorted set of keys.\n *\n * @internal\n */\nexport interface MapKey<out K> extends Equal.Equal {\n  readonly [MapKeyTypeId]: MapKeyTypeId\n  readonly current: K\n  previous: MapKey<K> | undefined // mutable by design\n  next: MapKey<K> | undefined // mutable by design\n}\n\nclass MapKeyImpl<out K> implements MapKey<K> {\n  readonly [MapKeyTypeId]: MapKeyTypeId = MapKeyTypeId\n  previous: MapKey<K> | undefined = undefined\n  next: MapKey<K> | undefined = undefined\n  constructor(readonly current: K) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(this.current),\n      Hash.combine(Hash.hash(this.previous)),\n      Hash.combine(Hash.hash(this.next)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    if (this === that) {\n      return true\n    }\n    return isMapKey(that) &&\n      Equal.equals(this.current, that.current) &&\n      Equal.equals(this.previous, that.previous) &&\n      Equal.equals(this.next, that.next)\n  }\n}\n\n/** @internal */\nexport const makeMapKey = <K>(current: K): MapKey<K> => new MapKeyImpl(current)\n\n/** @internal */\nexport const isMapKey = (u: unknown): u is MapKey<unknown> => hasProperty(u, MapKeyTypeId)\n\n/**\n * A `KeySet` is a sorted set of keys in the cache ordered by last access.\n * For efficiency, the set is implemented in terms of a doubly linked list\n * and is not safe for concurrent access.\n *\n * @internal\n */\nexport interface KeySet<in out K> {\n  head: MapKey<K> | undefined // mutable by design\n  tail: MapKey<K> | undefined // mutable by design\n  /**\n   * Adds the specified key to the set.\n   */\n  add(key: MapKey<K>): void\n  /**\n   * Removes the lowest priority key from the set.\n   */\n  remove(): MapKey<K> | undefined\n}\n\nclass KeySetImpl<in out K> implements KeySet<K> {\n  head: MapKey<K> | undefined = undefined\n  tail: MapKey<K> | undefined = undefined\n  add(key: MapKey<K>): void {\n    if (key !== this.tail) {\n      if (this.tail === undefined) {\n        this.head = key\n        this.tail = key\n      } else {\n        const previous = key.previous\n        const next = key.next\n        if (next !== undefined) {\n          key.next = undefined\n          if (previous !== undefined) {\n            previous.next = next\n            next.previous = previous\n          } else {\n            this.head = next\n            this.head.previous = undefined\n          }\n        }\n        this.tail.next = key\n        key.previous = this.tail\n        this.tail = key\n      }\n    }\n  }\n  remove(): MapKey<K> | undefined {\n    const key = this.head\n    if (key !== undefined) {\n      const next = key.next\n      if (next !== undefined) {\n        key.next = undefined\n        this.head = next\n        this.head.previous = undefined\n      } else {\n        this.head = undefined\n        this.tail = undefined\n      }\n    }\n    return key\n  }\n}\n\n/** @internal */\nexport const makeKeySet = <K>(): KeySet<K> => new KeySetImpl<K>()\n\n/**\n * The `CacheState` represents the mutable state underlying the cache.\n *\n * @internal\n */\nexport interface CacheState<in out Key, in out Value, in out Error> {\n  map: MutableHashMap.MutableHashMap<Key, MapValue<Key, Value, Error>> // mutable by design\n  keys: KeySet<Key> // mutable by design\n  accesses: MutableQueue.MutableQueue<MapKey<Key>> // mutable by design\n  updating: MutableRef.MutableRef<boolean> // mutable by design\n  hits: number // mutable by design\n  misses: number // mutable by design\n}\n\n/**\n * Constructs a new `CacheState` from the specified values.\n *\n * @internal\n */\nexport const makeCacheState = <Key, Value, Error>(\n  map: MutableHashMap.MutableHashMap<Key, MapValue<Key, Value, Error>>,\n  keys: KeySet<Key>,\n  accesses: MutableQueue.MutableQueue<MapKey<Key>>,\n  updating: MutableRef.MutableRef<boolean>,\n  hits: number,\n  misses: number\n): CacheState<Key, Value, Error> => ({\n  map,\n  keys,\n  accesses,\n  updating,\n  hits,\n  misses\n})\n\n/**\n * Constructs an initial cache state.\n *\n * @internal\n */\nexport const initialCacheState = <Key, Value, Error>(): CacheState<Key, Value, Error> =>\n  makeCacheState(\n    MutableHashMap.empty(),\n    makeKeySet(),\n    MutableQueue.unbounded(),\n    MutableRef.make(false),\n    0,\n    0\n  )\n\n/** @internal */\nconst CacheSymbolKey = \"effect/Cache\"\n\n/** @internal */\nexport const CacheTypeId: Cache.CacheTypeId = Symbol.for(\n  CacheSymbolKey\n) as Cache.CacheTypeId\n\nconst cacheVariance = {\n  /* c8 ignore next */\n  _Key: (_: any) => _,\n  /* c8 ignore next */\n  _Error: (_: never) => _,\n  /* c8 ignore next */\n  _Value: (_: any) => _\n}\n\n/** @internal */\nconst ConsumerCacheSymbolKey = \"effect/ConsumerCache\"\n\n/** @internal */\nexport const ConsumerCacheTypeId: Cache.ConsumerCacheTypeId = Symbol.for(\n  ConsumerCacheSymbolKey\n) as Cache.ConsumerCacheTypeId\n\nconst consumerCacheVariance = {\n  /* c8 ignore next */\n  _Key: (_: any) => _,\n  /* c8 ignore next */\n  _Error: (_: never) => _,\n  /* c8 ignore next */\n  _Value: (_: never) => _\n}\n\n/** @internal */\nexport const makeCacheStats = (\n  options: {\n    readonly hits: number\n    readonly misses: number\n    readonly size: number\n  }\n): Cache.CacheStats => options\n\n/** @internal */\nexport const makeEntryStats = (loadedMillis: number): Cache.EntryStats => ({\n  loadedMillis\n})\n\nclass CacheImpl<in out Key, in out Value, in out Error> implements Cache.Cache<Key, Value, Error> {\n  readonly [CacheTypeId] = cacheVariance\n  readonly [ConsumerCacheTypeId] = consumerCacheVariance\n  readonly cacheState: CacheState<Key, Value, Error>\n  constructor(\n    readonly capacity: number,\n    readonly context: Context.Context<any>,\n    readonly fiberId: FiberId.FiberId,\n    readonly lookup: Cache.Lookup<Key, Value, Error, any>,\n    readonly timeToLive: (exit: Exit.Exit<Value, Error>) => Duration.DurationInput\n  ) {\n    this.cacheState = initialCacheState()\n  }\n\n  get(key: Key): Effect.Effect<Value, Error> {\n    return core.map(this.getEither(key), Either.merge)\n  }\n\n  get cacheStats(): Effect.Effect<Cache.CacheStats> {\n    return core.sync(() =>\n      makeCacheStats({\n        hits: this.cacheState.hits,\n        misses: this.cacheState.misses,\n        size: MutableHashMap.size(this.cacheState.map)\n      })\n    )\n  }\n\n  getOption(key: Key): Effect.Effect<Option.Option<Value>, Error> {\n    return core.suspend(() =>\n      Option.match(MutableHashMap.get(this.cacheState.map, key), {\n        onNone: () => {\n          const mapKey = makeMapKey(key)\n          this.trackAccess(mapKey)\n          this.trackMiss()\n          return core.succeed(Option.none<Value>())\n        },\n        onSome: (value) => this.resolveMapValue(value)\n      })\n    )\n  }\n\n  getOptionComplete(key: Key): Effect.Effect<Option.Option<Value>> {\n    return core.suspend(() =>\n      Option.match(MutableHashMap.get(this.cacheState.map, key), {\n        onNone: () => {\n          const mapKey = makeMapKey(key)\n          this.trackAccess(mapKey)\n          this.trackMiss()\n          return core.succeed(Option.none<Value>())\n        },\n        onSome: (value) => this.resolveMapValue(value, true) as Effect.Effect<Option.Option<Value>>\n      })\n    )\n  }\n\n  contains(key: Key): Effect.Effect<boolean> {\n    return core.sync(() => MutableHashMap.has(this.cacheState.map, key))\n  }\n\n  entryStats(key: Key): Effect.Effect<Option.Option<Cache.EntryStats>> {\n    return core.sync(() => {\n      const option = MutableHashMap.get(this.cacheState.map, key)\n      if (Option.isSome(option)) {\n        switch (option.value._tag) {\n          case \"Complete\": {\n            const loaded = option.value.entryStats.loadedMillis\n            return Option.some(makeEntryStats(loaded))\n          }\n          case \"Pending\": {\n            return Option.none()\n          }\n          case \"Refreshing\": {\n            const loaded = option.value.complete.entryStats.loadedMillis\n            return Option.some(makeEntryStats(loaded))\n          }\n        }\n      }\n      return Option.none()\n    })\n  }\n\n  getEither(key: Key): Effect.Effect<Either.Either<Value, Value>, Error> {\n    return core.suspend((): Effect.Effect<Either.Either<Value, Value>, Error> => {\n      const k = key\n      let mapKey: MapKey<Key> | undefined = undefined\n      let deferred: Deferred.Deferred<Value, Error> | undefined = undefined\n      let value = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n      if (value === undefined) {\n        deferred = Deferred.unsafeMake<Value, Error>(this.fiberId)\n        mapKey = makeMapKey(k)\n        if (MutableHashMap.has(this.cacheState.map, k)) {\n          value = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n        } else {\n          MutableHashMap.set(this.cacheState.map, k, pending(mapKey, deferred))\n        }\n      }\n      if (value === undefined) {\n        this.trackAccess(mapKey!)\n        this.trackMiss()\n        return core.map(this.lookupValueOf(key, deferred!), Either.right)\n      } else {\n        return core.flatMap(\n          this.resolveMapValue(value),\n          Option.match({\n            onNone: () => this.getEither(key),\n            onSome: (value) => core.succeed(Either.left(value))\n          })\n        )\n      }\n    })\n  }\n\n  invalidate(key: Key): Effect.Effect<void> {\n    return core.sync(() => {\n      MutableHashMap.remove(this.cacheState.map, key)\n    })\n  }\n\n  invalidateWhen(key: Key, when: (value: Value) => boolean): Effect.Effect<void> {\n    return core.sync(() => {\n      const value = MutableHashMap.get(this.cacheState.map, key)\n      if (Option.isSome(value) && value.value._tag === \"Complete\") {\n        if (value.value.exit._tag === \"Success\") {\n          if (when(value.value.exit.value)) {\n            MutableHashMap.remove(this.cacheState.map, key)\n          }\n        }\n      }\n    })\n  }\n\n  get invalidateAll(): Effect.Effect<void> {\n    return core.sync(() => {\n      this.cacheState.map = MutableHashMap.empty()\n    })\n  }\n\n  refresh(key: Key): Effect.Effect<void, Error> {\n    return effect.clockWith((clock) =>\n      core.suspend(() => {\n        const k = key\n        const deferred: Deferred.Deferred<Value, Error> = Deferred.unsafeMake(this.fiberId)\n        let value = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n        if (value === undefined) {\n          if (MutableHashMap.has(this.cacheState.map, k)) {\n            value = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n          } else {\n            MutableHashMap.set(this.cacheState.map, k, pending(makeMapKey(k), deferred))\n          }\n        }\n        if (value === undefined) {\n          return core.asVoid(this.lookupValueOf(key, deferred))\n        } else {\n          switch (value._tag) {\n            case \"Complete\": {\n              if (this.hasExpired(clock, value.timeToLiveMillis)) {\n                const found = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n                if (Equal.equals(found, value)) {\n                  MutableHashMap.remove(this.cacheState.map, k)\n                }\n                return core.asVoid(this.get(key))\n              }\n              // Only trigger the lookup if we're still the current value, `completedResult`\n              return pipe(\n                this.lookupValueOf(key, deferred),\n                effect.when(() => {\n                  const current = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n                  if (Equal.equals(current, value)) {\n                    const mapValue = refreshing(deferred, value as Complete<Key, Value, Error>)\n                    MutableHashMap.set(this.cacheState.map, k, mapValue)\n                    return true\n                  }\n                  return false\n                }),\n                core.asVoid\n              )\n            }\n            case \"Pending\": {\n              return Deferred.await(value.deferred)\n            }\n            case \"Refreshing\": {\n              return Deferred.await(value.deferred)\n            }\n          }\n        }\n      })\n    )\n  }\n\n  set(key: Key, value: Value): Effect.Effect<void> {\n    return effect.clockWith((clock) =>\n      core.sync(() => {\n        const now = clock.unsafeCurrentTimeMillis()\n        const k = key\n        const lookupResult = Exit.succeed(value)\n        const mapValue = complete(\n          makeMapKey(k),\n          lookupResult,\n          makeEntryStats(now),\n          now + Duration.toMillis(Duration.decode(this.timeToLive(lookupResult)))\n        )\n        MutableHashMap.set(\n          this.cacheState.map,\n          k,\n          mapValue as Complete<Key, Value, Error>\n        )\n      })\n    )\n  }\n\n  get size(): Effect.Effect<number> {\n    return core.sync(() => {\n      return MutableHashMap.size(this.cacheState.map)\n    })\n  }\n\n  get values(): Effect.Effect<Array<Value>> {\n    return core.sync(() => {\n      const values: Array<Value> = []\n      for (const entry of this.cacheState.map) {\n        if (entry[1]._tag === \"Complete\" && entry[1].exit._tag === \"Success\") {\n          values.push(entry[1].exit.value)\n        }\n      }\n      return values\n    })\n  }\n\n  get entries(): Effect.Effect<Array<[Key, Value]>> {\n    return core.sync(() => {\n      const values: Array<[Key, Value]> = []\n      for (const entry of this.cacheState.map) {\n        if (entry[1]._tag === \"Complete\" && entry[1].exit._tag === \"Success\") {\n          values.push([entry[0], entry[1].exit.value])\n        }\n      }\n      return values\n    })\n  }\n\n  get keys(): Effect.Effect<Array<Key>> {\n    return core.sync(() => {\n      const keys: Array<Key> = []\n      for (const entry of this.cacheState.map) {\n        if (entry[1]._tag === \"Complete\" && entry[1].exit._tag === \"Success\") {\n          keys.push(entry[0])\n        }\n      }\n      return keys\n    })\n  }\n\n  resolveMapValue(\n    value: MapValue<Key, Value, Error>,\n    ignorePending = false\n  ): Effect.Effect<Option.Option<Value>, Error> {\n    return effect.clockWith((clock) => {\n      switch (value._tag) {\n        case \"Complete\": {\n          this.trackAccess(value.key)\n          if (this.hasExpired(clock, value.timeToLiveMillis)) {\n            MutableHashMap.remove(this.cacheState.map, value.key.current)\n            return core.succeed(Option.none<Value>())\n          }\n          this.trackHit()\n          return core.map(value.exit, Option.some)\n        }\n        case \"Pending\": {\n          this.trackAccess(value.key)\n          this.trackHit()\n          if (ignorePending) {\n            return core.succeed(Option.none<Value>())\n          }\n          return core.map(Deferred.await(value.deferred), Option.some)\n        }\n        case \"Refreshing\": {\n          this.trackAccess(value.complete.key)\n          this.trackHit()\n          if (this.hasExpired(clock, value.complete.timeToLiveMillis)) {\n            if (ignorePending) {\n              return core.succeed(Option.none<Value>())\n            }\n            return core.map(Deferred.await(value.deferred), Option.some)\n          }\n          return core.map(value.complete.exit, Option.some)\n        }\n      }\n    })\n  }\n\n  trackHit(): void {\n    this.cacheState.hits = this.cacheState.hits + 1\n  }\n\n  trackMiss(): void {\n    this.cacheState.misses = this.cacheState.misses + 1\n  }\n\n  trackAccess(key: MapKey<Key>): void {\n    MutableQueue.offer(this.cacheState.accesses, key)\n    if (MutableRef.compareAndSet(this.cacheState.updating, false, true)) {\n      let loop = true\n      while (loop) {\n        const key = MutableQueue.poll(this.cacheState.accesses, MutableQueue.EmptyMutableQueue)\n        if (key === MutableQueue.EmptyMutableQueue) {\n          loop = false\n        } else {\n          this.cacheState.keys.add(key)\n        }\n      }\n      let size = MutableHashMap.size(this.cacheState.map)\n      loop = size > this.capacity\n      while (loop) {\n        const key = this.cacheState.keys.remove()\n        if (key !== undefined) {\n          if (MutableHashMap.has(this.cacheState.map, key.current)) {\n            MutableHashMap.remove(this.cacheState.map, key.current)\n            size = size - 1\n            loop = size > this.capacity\n          }\n        } else {\n          loop = false\n        }\n      }\n      MutableRef.set(this.cacheState.updating, false)\n    }\n  }\n\n  hasExpired(clock: Clock.Clock, timeToLiveMillis: number): boolean {\n    return clock.unsafeCurrentTimeMillis() > timeToLiveMillis\n  }\n\n  lookupValueOf(\n    input: Key,\n    deferred: Deferred.Deferred<Value, Error>\n  ): Effect.Effect<Value, Error> {\n    return effect.clockWith((clock) =>\n      core.suspend(() => {\n        const key = input\n        return pipe(\n          this.lookup(input),\n          core.provideContext(this.context),\n          core.exit,\n          core.flatMap((exit) => {\n            const now = clock.unsafeCurrentTimeMillis()\n            const stats = makeEntryStats(now)\n            const value = complete(\n              makeMapKey(key),\n              exit,\n              stats,\n              now + Duration.toMillis(Duration.decode(this.timeToLive(exit)))\n            )\n            MutableHashMap.set(this.cacheState.map, key, value)\n            return core.zipRight(\n              Deferred.done(deferred, exit),\n              exit\n            )\n          }),\n          core.onInterrupt(() =>\n            core.zipRight(\n              Deferred.interrupt(deferred),\n              core.sync(() => {\n                MutableHashMap.remove(this.cacheState.map, key)\n              })\n            )\n          )\n        )\n      })\n    )\n  }\n}\n\n/** @internal */\nexport const make = <Key, Value, Error = never, Environment = never>(\n  options: {\n    readonly capacity: number\n    readonly timeToLive: Duration.DurationInput\n    readonly lookup: Cache.Lookup<Key, Value, Error, Environment>\n  }\n): Effect.Effect<Cache.Cache<Key, Value, Error>, never, Environment> => {\n  const timeToLive = Duration.decode(options.timeToLive)\n  return makeWith({\n    capacity: options.capacity,\n    lookup: options.lookup,\n    timeToLive: () => timeToLive\n  })\n}\n\n/** @internal */\nexport const makeWith = <Key, Value, Error = never, Environment = never>(\n  options: {\n    readonly capacity: number\n    readonly lookup: Cache.Lookup<Key, Value, Error, Environment>\n    readonly timeToLive: (exit: Exit.Exit<Value, Error>) => Duration.DurationInput\n  }\n): Effect.Effect<Cache.Cache<Key, Value, Error>, never, Environment> =>\n  core.map(\n    fiberRuntime.all([core.context<Environment>(), core.fiberId]),\n    ([context, fiberId]) =>\n      new CacheImpl(\n        options.capacity,\n        context,\n        fiberId,\n        options.lookup,\n        (exit) => Duration.decode(options.timeToLive(exit))\n      )\n  )\n\n/** @internal */\nexport const unsafeMakeWith = <Key, Value, Error = never>(\n  capacity: number,\n  lookup: Cache.Lookup<Key, Value, Error>,\n  timeToLive: (exit: Exit.Exit<Value, Error>) => Duration.DurationInput\n): Cache.Cache<Key, Value, Error> =>\n  new CacheImpl<Key, Value, Error>(\n    capacity,\n    Context.empty() as Context.Context<any>,\n    none,\n    lookup,\n    (exit) => Duration.decode(timeToLive(exit))\n  )\n", "/**\n * The `Effect<A, E, R>` type is polymorphic in values of type `E` and we can\n * work with any error type that we want. However, there is a lot of information\n * that is not inside an arbitrary `E` value. So as a result, an `Effect` needs\n * somewhere to store things like unexpected errors or defects, stack and\n * execution traces, causes of fiber interruptions, and so forth.\n *\n * Effect-TS is very strict about preserving the full information related to a\n * failure. It captures all type of errors into the `Cause` data type. `Effect`\n * uses the `Cause<E>` data type to store the full story of failure. So its\n * error model is lossless. It doesn't throw information related to the failure\n * result. So we can figure out exactly what happened during the operation of\n * our effects.\n *\n * It is important to note that `Cause` is an underlying data type representing\n * errors occuring within an `Effect` workflow. Thus, we don't usually deal with\n * `Cause`s directly. Even though it is not a data type that we deal with very\n * often, the `Cause` of a failing `Effect` workflow can be accessed at any\n * time, which gives us total access to all parallel and sequential errors in\n * occurring within our codebase.\n *\n * @since 2.0.0\n */\nimport type * as Channel from \"./Channel.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as Equal from \"./Equal.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/cause.js\"\nimport * as core from \"./internal/core.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as Sink from \"./Sink.js\"\nimport type * as Stream from \"./Stream.js\"\nimport type { Span } from \"./Tracer.js\"\nimport type { Covariant, NoInfer } from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const CauseTypeId: unique symbol = internal.CauseTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type CauseTypeId = typeof CauseTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RuntimeExceptionTypeId: unique symbol = core.RuntimeExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RuntimeExceptionTypeId = typeof RuntimeExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const InterruptedExceptionTypeId: unique symbol = core.InterruptedExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type InterruptedExceptionTypeId = typeof InterruptedExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const IllegalArgumentExceptionTypeId: unique symbol = core.IllegalArgumentExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type IllegalArgumentExceptionTypeId = typeof IllegalArgumentExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const NoSuchElementExceptionTypeId: unique symbol = core.NoSuchElementExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type NoSuchElementExceptionTypeId = typeof NoSuchElementExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const InvalidPubSubCapacityExceptionTypeId: unique symbol = core.InvalidPubSubCapacityExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type InvalidPubSubCapacityExceptionTypeId = typeof InvalidPubSubCapacityExceptionTypeId\n\n/**\n * @since 3.5.0\n * @category symbols\n */\nexport const ExceededCapacityExceptionTypeId: unique symbol = core.ExceededCapacityExceptionTypeId\n\n/**\n * @since 3.5.0\n * @category symbols\n */\nexport type ExceededCapacityExceptionTypeId = typeof ExceededCapacityExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const TimeoutExceptionTypeId: unique symbol = core.TimeoutExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type TimeoutExceptionTypeId = typeof TimeoutExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const UnknownExceptionTypeId: unique symbol = core.UnknownExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type UnknownExceptionTypeId = typeof UnknownExceptionTypeId\n\n/**\n * A `Cause` represents the full history of a failure resulting from running an\n * `Effect` workflow.\n *\n * Effect-TS uses a data structure from functional programming called a semiring\n * to represent the `Cause` data type. This allows us to take a base type `E`\n * (which represents the error type of an `Effect`) and capture the sequential\n * and parallel composition of errors in a fully lossless fashion.\n *\n * @since 2.0.0\n * @category models\n */\nexport type Cause<E> =\n  | Empty\n  | Fail<E>\n  | Die\n  | Interrupt\n  | Sequential<E>\n  | Parallel<E>\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Cause {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out E> {\n    readonly [CauseTypeId]: {\n      readonly _E: Covariant<E>\n    }\n  }\n}\n\n/**\n * Represents a set of methods that can be used to reduce a `Cause<E>` to a\n * specified value of type `Z` with access to a context of type `C`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface CauseReducer<in C, in E, in out Z> {\n  emptyCase(context: C): Z\n  failCase(context: C, error: E): Z\n  dieCase(context: C, defect: unknown): Z\n  interruptCase(context: C, fiberId: FiberId.FiberId): Z\n  sequentialCase(context: C, left: Z, right: Z): Z\n  parallelCase(context: C, left: Z, right: Z): Z\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface YieldableError extends Pipeable, Inspectable, Readonly<Error> {\n  readonly [Effect.EffectTypeId]: Effect.Effect.VarianceStruct<never, this, never>\n  readonly [Stream.StreamTypeId]: Stream.Stream.VarianceStruct<never, this, never>\n  readonly [Sink.SinkTypeId]: Sink.Sink.VarianceStruct<never, unknown, never, this, never>\n  readonly [Channel.ChannelTypeId]: Channel.Channel.VarianceStruct<never, unknown, this, unknown, never, unknown, never>\n  [Symbol.iterator](): Effect.EffectGenerator<Effect.Effect<never, this, never>>\n}\n\n/**\n * Represents a generic checked exception which occurs at runtime.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const YieldableError: new(message?: string | undefined) => YieldableError = core.YieldableError\n\n/**\n * Represents a generic checked exception which occurs at runtime.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface RuntimeException extends YieldableError {\n  readonly _tag: \"RuntimeException\"\n  readonly [RuntimeExceptionTypeId]: RuntimeExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when a `Fiber` is interrupted.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface InterruptedException extends YieldableError {\n  readonly _tag: \"InterruptedException\"\n  readonly [InterruptedExceptionTypeId]: InterruptedExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when an invalid argument is\n * provided to a method.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface IllegalArgumentException extends YieldableError {\n  readonly _tag: \"IllegalArgumentException\"\n  readonly [IllegalArgumentExceptionTypeId]: IllegalArgumentExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface NoSuchElementException extends YieldableError {\n  readonly _tag: \"NoSuchElementException\"\n  readonly [NoSuchElementExceptionTypeId]: NoSuchElementExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when attempting to construct a\n * `PubSub` with an invalid capacity.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface InvalidPubSubCapacityException extends YieldableError {\n  readonly _tag: \"InvalidPubSubCapacityException\"\n  readonly [InvalidPubSubCapacityExceptionTypeId]: InvalidPubSubCapacityExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when a resources capacity has\n * been exceeded.\n *\n * @since 3.5.0\n * @category models\n */\nexport interface ExceededCapacityException extends YieldableError {\n  readonly _tag: \"ExceededCapacityException\"\n  readonly [ExceededCapacityExceptionTypeId]: ExceededCapacityExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when a computation doesn't\n * finish on schedule.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface TimeoutException extends YieldableError {\n  readonly _tag: \"TimeoutException\"\n  readonly [TimeoutExceptionTypeId]: TimeoutExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when an unknown error is thrown, such as\n * from a rejected promise.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface UnknownException extends YieldableError {\n  readonly _tag: \"UnknownException\"\n  readonly [UnknownExceptionTypeId]: UnknownExceptionTypeId\n  readonly error: unknown\n}\n\n/**\n * The `Empty` cause represents a lack of errors.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Empty extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Empty\"\n}\n\n/**\n * The `Fail` cause represents a `Cause` which failed with an expected error of\n * type `E`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Fail<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Fail\"\n  readonly error: E\n}\n\n/**\n * The `Die` cause represents a `Cause` which failed as a result of a defect, or\n * in other words, an unexpected error.\n *\n * type `E`.\n * @since 2.0.0\n * @category models\n */\nexport interface Die extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Die\"\n  readonly defect: unknown\n}\n\n/**\n * The `Interrupt` cause represents failure due to `Fiber` interruption, which\n * contains the `FiberId` of the interrupted `Fiber`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Interrupt extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Interrupt\"\n  readonly fiberId: FiberId.FiberId\n}\n\n/**\n * The `Parallel` cause represents the composition of two causes which occurred\n * in parallel.\n *\n * In Effect-TS programs, it is possible that two operations may be performed in\n * parallel. In these cases, the `Effect` workflow can fail for more than one\n * reason. If both computations fail, then there are actually two errors which\n * occurred in parallel. In these cases, the errors can be represented by the\n * `Parallel` cause.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Parallel<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Parallel\"\n  readonly left: Cause<E>\n  readonly right: Cause<E>\n}\n\n/**\n * The `Sequential` cause represents the composition of two causes which occurred\n * sequentially.\n *\n * For example, if we perform Effect-TS's analog of `try-finally` (i.e.\n * `Effect.ensuring`), and both the `try` and `finally` blocks fail, we have two\n * errors which occurred sequentially. In these cases, the errors can be\n * represented by the `Sequential` cause.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Sequential<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Sequential\"\n  readonly left: Cause<E>\n  readonly right: Cause<E>\n}\n\n/**\n * Constructs a new `Empty` cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Cause<never> = internal.empty\n\n/**\n * Constructs a new `Fail` cause from the specified `error`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Cause<E> = internal.fail\n\n/**\n * Constructs a new `Die` cause from the specified `defect`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Cause<never> = internal.die\n\n/**\n * Constructs a new `Interrupt` cause from the specified `fiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const interrupt: (fiberId: FiberId.FiberId) => Cause<never> = internal.interrupt\n\n/**\n * Constructs a new `Parallel` cause from the specified `left` and `right`\n * causes.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallel: <E, E2>(left: Cause<E>, right: Cause<E2>) => Cause<E | E2> = internal.parallel\n\n/**\n * Constructs a new `Sequential` cause from the specified pecified `left` and\n * `right` causes.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sequential: <E, E2>(left: Cause<E>, right: Cause<E2>) => Cause<E | E2> = internal.sequential\n\n/**\n * Returns `true` if the specified value is a `Cause`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isCause: (u: unknown) => u is Cause<never> = internal.isCause\n\n/**\n * Returns `true` if the specified `Cause` is an `Empty` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isEmptyType: <E>(self: Cause<E>) => self is Empty = internal.isEmptyType\n\n/**\n * Returns `true` if the specified `Cause` is a `Fail` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFailType: <E>(self: Cause<E>) => self is Fail<E> = internal.isFailType\n\n/**\n * Returns `true` if the specified `Cause` is a `Die` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isDieType: <E>(self: Cause<E>) => self is Die = internal.isDieType\n\n/**\n * Returns `true` if the specified `Cause` is an `Interrupt` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isInterruptType: <E>(self: Cause<E>) => self is Interrupt = internal.isInterruptType\n\n/**\n * Returns `true` if the specified `Cause` is a `Sequential` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSequentialType: <E>(self: Cause<E>) => self is Sequential<E> = internal.isSequentialType\n\n/**\n * Returns `true` if the specified `Cause` is a `Parallel` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallelType: <E>(self: Cause<E>) => self is Parallel<E> = internal.isParallelType\n\n/**\n * Returns the size of the cause, calculated as the number of individual `Cause`\n * nodes found in the `Cause` semiring structure.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <E>(self: Cause<E>) => number = internal.size\n\n/**\n * Returns `true` if the specified cause is empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: <E>(self: Cause<E>) => boolean = internal.isEmpty\n\n/**\n * Returns `true` if the specified cause contains a failure, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFailure: <E>(self: Cause<E>) => boolean = internal.isFailure\n\n/**\n * Returns `true` if the specified cause contains a defect, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isDie: <E>(self: Cause<E>) => boolean = internal.isDie\n\n/**\n * Returns `true` if the specified cause contains an interruption, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isInterrupted: <E>(self: Cause<E>) => boolean = internal.isInterrupted\n\n/**\n * Returns `true` if the specified cause contains only interruptions (without\n * any `Die` or `Fail` causes), `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isInterruptedOnly: <E>(self: Cause<E>) => boolean = internal.isInterruptedOnly\n\n/**\n * Returns a `List` of all recoverable errors of type `E` in the specified\n * cause.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const failures: <E>(self: Cause<E>) => Chunk.Chunk<E> = internal.failures\n\n/**\n * Returns a `List` of all unrecoverable defects in the specified cause.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const defects: <E>(self: Cause<E>) => Chunk.Chunk<unknown> = internal.defects\n\n/**\n * Returns a `HashSet` of `FiberId`s for all fibers that interrupted the fiber\n * described by the specified cause.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const interruptors: <E>(self: Cause<E>) => HashSet.HashSet<FiberId.FiberId> = internal.interruptors\n\n/**\n * Returns the `E` associated with the first `Fail` in this `Cause`, if one\n * exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const failureOption: <E>(self: Cause<E>) => Option.Option<E> = internal.failureOption\n\n/**\n * Returns the first checked error on the `Left` if available, if there are\n * no checked errors return the rest of the `Cause` that is known to contain\n * only `Die` or `Interrupt` causes.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const failureOrCause: <E>(self: Cause<E>) => Either.Either<Cause<never>, E> = internal.failureOrCause\n\n/**\n * Converts the specified `Cause<Option<E>>` to an `Option<Cause<E>>` by\n * recursively stripping out any failures with the error `None`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const flipCauseOption: <E>(self: Cause<Option.Option<E>>) => Option.Option<Cause<E>> = internal.flipCauseOption\n\n/**\n * Returns the defect associated with the first `Die` in this `Cause`, if one\n * exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const dieOption: <E>(self: Cause<E>) => Option.Option<unknown> = internal.dieOption\n\n/**\n * Returns the `FiberId` associated with the first `Interrupt` in the specified\n * cause, if one exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const interruptOption: <E>(self: Cause<E>) => Option.Option<FiberId.FiberId> = internal.interruptOption\n\n/**\n * Remove all `Fail` and `Interrupt` nodes from the specified cause, and return\n * a cause containing only `Die` cause/finalizer defects.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keepDefects: <E>(self: Cause<E>) => Option.Option<Cause<never>> = internal.keepDefects\n\n/**\n * Linearizes the specified cause into a `HashSet` of parallel causes where each\n * parallel cause contains a linear sequence of failures.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const linearize: <E>(self: Cause<E>) => HashSet.HashSet<Cause<E>> = internal.linearize\n\n/**\n * Remove all `Fail` and `Interrupt` nodes from the specified cause, and return\n * a cause containing only `Die` cause/finalizer defects.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const stripFailures: <E>(self: Cause<E>) => Cause<never> = internal.stripFailures\n\n/**\n * Remove all `Die` causes that the specified partial function is defined at,\n * returning `Some` with the remaining causes or `None` if there are no\n * remaining causes.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const stripSomeDefects: {\n  (pf: (defect: unknown) => Option.Option<unknown>): <E>(self: Cause<E>) => Option.Option<Cause<E>>\n  <E>(self: Cause<E>, pf: (defect: unknown) => Option.Option<unknown>): Option.Option<Cause<E>>\n} = internal.stripSomeDefects\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  <E2>(error: E2): <E>(self: Cause<E>) => Cause<E2>\n  <E, E2>(self: Cause<E>, error: E2): Cause<E2>\n} = internal.as\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <E, E2>(f: (e: E) => E2): (self: Cause<E>) => Cause<E2>\n  <E, E2>(self: Cause<E>, f: (e: E) => E2): Cause<E2>\n} = internal.map\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <E, E2>(f: (e: E) => Cause<E2>): (self: Cause<E>) => Cause<E2>\n  <E, E2>(self: Cause<E>, f: (e: E) => Cause<E2>): Cause<E2>\n} = internal.flatMap\n\n/**\n * Executes a sequence of two `Cause`s. The second `Cause` can be dependent on the result of the first `Cause`.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const andThen: {\n  <E, E2>(f: (e: E) => Cause<E2>): (self: Cause<E>) => Cause<E2>\n  <E2>(f: Cause<E2>): <E>(self: Cause<E>) => Cause<E2>\n  <E, E2>(self: Cause<E>, f: (e: E) => Cause<E2>): Cause<E2>\n  <E, E2>(self: Cause<E>, f: Cause<E2>): Cause<E2>\n} = internal.andThen\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <E>(self: Cause<Cause<E>>) => Cause<E> = internal.flatten\n\n/**\n * Returns `true` if the `self` cause contains or is equal to `that` cause,\n * `false` otherwise.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const contains: {\n  <E2>(that: Cause<E2>): <E>(self: Cause<E>) => boolean\n  <E, E2>(self: Cause<E>, that: Cause<E2>): boolean\n} = internal.contains\n\n/**\n * Squashes a `Cause` down to a single defect, chosen to be the \"most important\"\n * defect.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const squash: <E>(self: Cause<E>) => unknown = core.causeSquash\n\n/**\n * Squashes a `Cause` down to a single defect, chosen to be the \"most important\"\n * defect. If a recoverable error is found, the provided function will be used\n * to map the error a defect, and the resulting value will be returned.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const squashWith: {\n  <E>(f: (error: E) => unknown): (self: Cause<E>) => unknown\n  <E>(self: Cause<E>, f: (error: E) => unknown): unknown\n} = core.causeSquashWith\n\n/**\n * Uses the provided partial function to search the specified cause and attempt\n * to extract information from it.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const find: {\n  <E, Z>(pf: (cause: Cause<E>) => Option.Option<Z>): (self: Cause<E>) => Option.Option<Z>\n  <E, Z>(self: Cause<E>, pf: (cause: Cause<E>) => Option.Option<Z>): Option.Option<Z>\n} = internal.find\n\n/**\n * Filters causes which match the provided predicate out of the specified cause.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  <E, EB extends E>(refinement: Refinement<Cause<NoInfer<E>>, Cause<EB>>): (self: Cause<E>) => Cause<EB>\n  <E>(predicate: Predicate<Cause<NoInfer<E>>>): (self: Cause<E>) => Cause<E>\n  <E, EB extends E>(self: Cause<E>, refinement: Refinement<Cause<E>, Cause<EB>>): Cause<EB>\n  <E>(self: Cause<E>, predicate: Predicate<Cause<E>>): Cause<E>\n} = internal.filter\n\n/**\n * Folds the specified cause into a value of type `Z`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  <Z, E>(\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ): (self: Cause<E>) => Z\n  <Z, E>(\n    self: Cause<E>,\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ): Z\n} = internal.match\n\n/**\n * Reduces the specified cause into a value of type `Z`, beginning with the\n * provided `zero` value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  <Z, E>(zero: Z, pf: (accumulator: Z, cause: Cause<E>) => Option.Option<Z>): (self: Cause<E>) => Z\n  <Z, E>(self: Cause<E>, zero: Z, pf: (accumulator: Z, cause: Cause<E>) => Option.Option<Z>): Z\n} = internal.reduce\n\n/**\n * Reduces the specified cause into a value of type `Z` using a `Cause.Reducer`.\n * Also allows for accessing the provided context during reduction.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduceWithContext: {\n  <C, E, Z>(context: C, reducer: CauseReducer<C, E, Z>): (self: Cause<E>) => Z\n  <C, E, Z>(self: Cause<E>, context: C, reducer: CauseReducer<C, E, Z>): Z\n} = internal.reduceWithContext\n\n/**\n * Represents a checked exception which occurs when a `Fiber` is interrupted.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const InterruptedException: new(message?: string | undefined) => InterruptedException = core.InterruptedException\n\n/**\n * Returns `true` if the specified value is an `InterruptedException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isInterruptedException: (u: unknown) => u is InterruptedException = core.isInterruptedException\n\n/**\n * Represents a checked exception which occurs when an invalid argument is\n * provided to a method.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const IllegalArgumentException: new(message?: string | undefined) => IllegalArgumentException =\n  core.IllegalArgumentException\n\n/**\n * Returns `true` if the specified value is an `IllegalArgumentException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isIllegalArgumentException: (u: unknown) => u is IllegalArgumentException = core.isIllegalArgumentException\n\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const NoSuchElementException: new(message?: string | undefined) => NoSuchElementException =\n  core.NoSuchElementException\n\n/**\n * Returns `true` if the specified value is an `NoSuchElementException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNoSuchElementException: (u: unknown) => u is NoSuchElementException = core.isNoSuchElementException\n\n/**\n * Represents a generic checked exception which occurs at runtime.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const RuntimeException: new(message?: string | undefined) => RuntimeException = core.RuntimeException\n\n/**\n * Returns `true` if the specified value is an `RuntimeException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRuntimeException: (u: unknown) => u is RuntimeException = core.isRuntimeException\n\n/**\n * Represents a checked exception which occurs when a computation doesn't\n * finish on schedule.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const TimeoutException: new(message?: string | undefined) => TimeoutException = core.TimeoutException\n\n/**\n * Represents a checked exception which occurs when an unknown error is thrown, such as\n * from a rejected promise.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const UnknownException: new(error: unknown, message?: string | undefined) => UnknownException =\n  core.UnknownException\n\n/**\n * Returns `true` if the specified value is an `UnknownException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isUnknownException: (u: unknown) => u is UnknownException = core.isUnknownException\n\n/**\n * Represents a checked exception which occurs when a resources capacity has\n * been exceeded.\n *\n * @since 3.5.0\n * @category errors\n */\nexport const ExceededCapacityException: new(message?: string | undefined) => ExceededCapacityException =\n  core.ExceededCapacityException\n\n/**\n * Returns `true` if the specified value is an `ExceededCapacityException`, `false`\n * otherwise.\n *\n * @since 3.5.0\n * @category refinements\n */\nexport const isExceededCapacityException: (u: unknown) => u is ExceededCapacityException =\n  core.isExceededCapacityException\n\n/**\n * Returns the specified `Cause` as a pretty-printed string.\n *\n * @since 2.0.0\n * @category rendering\n */\nexport const pretty: <E>(cause: Cause<E>, options?: {\n  readonly renderErrorCause?: boolean | undefined\n}) => string = internal.pretty\n\n/**\n * @since 3.2.0\n * @category models\n */\nexport interface PrettyError extends Error {\n  readonly span: Span | undefined\n}\n\n/**\n * Returns the specified `Cause` as a pretty-printed string.\n *\n * @since 3.2.0\n * @category rendering\n */\nexport const prettyErrors: <E>(cause: Cause<E>) => Array<PrettyError> = internal.prettyErrors\n\n/**\n * Returns the original, unproxied, instance of a thrown error\n *\n * @since 2.0.0\n * @category errors\n */\nexport const originalError: <E>(obj: E) => E = core.originalInstance\n", "/**\n * @since 2.0.0\n */\nimport type * as RA from \"./Array.js\"\nimport type * as Cause from \"./Cause.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Clock from \"./Clock.js\"\nimport type { ConfigProvider } from \"./ConfigProvider.js\"\nimport type { Console } from \"./Console.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Deferred from \"./Deferred.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Either from \"./Either.js\"\nimport type { Equivalence } from \"./Equivalence.js\"\nimport type { ExecutionStrategy } from \"./ExecutionStrategy.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as Fiber from \"./Fiber.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport type * as FiberRefsPatch from \"./FiberRefsPatch.js\"\nimport type * as FiberStatus from \"./FiberStatus.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual } from \"./Function.js\"\nimport type * as HashMap from \"./HashMap.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as _console from \"./internal/console.js\"\nimport { TagProto } from \"./internal/context.js\"\nimport * as effect from \"./internal/core-effect.js\"\nimport * as core from \"./internal/core.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as circular from \"./internal/effect/circular.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as layer from \"./internal/layer.js\"\nimport * as query from \"./internal/query.js\"\nimport * as _runtime from \"./internal/runtime.js\"\nimport * as _schedule from \"./internal/schedule.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type { LogLevel } from \"./LogLevel.js\"\nimport type * as Metric from \"./Metric.js\"\nimport type * as MetricLabel from \"./MetricLabel.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as Random from \"./Random.js\"\nimport type * as Ref from \"./Ref.js\"\nimport * as Request from \"./Request.js\"\nimport type { RequestBlock } from \"./RequestBlock.js\"\nimport type { RequestResolver } from \"./RequestResolver.js\"\nimport type * as Runtime from \"./Runtime.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\nimport type * as RuntimeFlagsPatch from \"./RuntimeFlagsPatch.js\"\nimport type * as Schedule from \"./Schedule.js\"\nimport * as Scheduler from \"./Scheduler.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Supervisor from \"./Supervisor.js\"\nimport type * as Tracer from \"./Tracer.js\"\nimport type { Concurrency, Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport type { YieldWrap } from \"./Utils.js\"\n\n// -------------------------------------------------------------------------------------\n// models\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const EffectTypeId: unique symbol = core.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type EffectTypeId = typeof EffectTypeId\n\n/**\n * The `Effect` interface defines a value that lazily describes a workflow or job.\n * The workflow requires some context `R`, and may fail with an error of type `E`,\n * or succeed with a value of type `A`.\n *\n * `Effect` values model resourceful interaction with the outside world, including\n * synchronous, asynchronous, concurrent, and parallel interaction. They use a\n * fiber-based concurrency model, with built-in support for scheduling, fine-grained\n * interruption, structured concurrency, and high scalability.\n *\n * To run an `Effect` value, you need a `Runtime`, which is a type that is capable\n * of executing `Effect` values.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Effect<out A, out E = never, out R = never> extends Effect.Variance<A, E, R>, Pipeable {\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: EffectUnify<this>\n  readonly [Unify.ignoreSymbol]?: EffectUnifyIgnore\n  [Symbol.iterator](): EffectGenerator<Effect<A, E, R>>\n}\n\n/**\n * @since 3.0.0\n * @category models\n */\nexport interface EffectGenerator<T extends Effect<any, any, any>> {\n  next(...args: ReadonlyArray<any>): IteratorResult<YieldWrap<T>, Effect.Success<T>>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface EffectUnify<A extends { [Unify.typeSymbol]?: any }>\n  extends Either.EitherUnify<A>, Option.OptionUnify<A>, Context.TagUnify<A>\n{\n  Effect?: () => A[Unify.typeSymbol] extends Effect<infer A0, infer E0, infer R0> | infer _ ? Effect<A0, E0, R0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EffectUnifyIgnore {\n  Tag?: true\n  Option?: true\n  Either?: true\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EffectTypeLambda extends TypeLambda {\n  readonly type: Effect<this[\"Target\"], this[\"Out1\"], this[\"Out2\"]>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Blocked<out A, out E> extends Effect<A, E> {\n  readonly _op: \"Blocked\"\n  readonly effect_instruction_i0: RequestBlock\n  readonly effect_instruction_i1: Effect<A, E>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Context.js\" {\n  interface Tag<Id, Value> extends Effect<Value, never, Id> {\n    [Symbol.iterator](): EffectGenerator<Tag<Id, Value>>\n  }\n  interface TagUnifyIgnore {\n    Effect?: true\n    Either?: true\n    Option?: true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Either.js\" {\n  interface Left<L, R> extends Effect<R, L> {\n    readonly _tag: \"Left\"\n    [Symbol.iterator](): EffectGenerator<Left<L, R>>\n  }\n  interface Right<L, R> extends Effect<R, L> {\n    readonly _tag: \"Right\"\n    [Symbol.iterator](): EffectGenerator<Right<L, R>>\n  }\n  interface EitherUnifyIgnore {\n    Effect?: true\n    Tag?: true\n    Option?: true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Option.js\" {\n  interface None<A> extends Effect<A, Cause.NoSuchElementException> {\n    readonly _tag: \"None\"\n    [Symbol.iterator](): EffectGenerator<None<A>>\n  }\n  interface Some<A> extends Effect<A, Cause.NoSuchElementException> {\n    readonly _tag: \"Some\"\n    [Symbol.iterator](): EffectGenerator<Some<A>>\n  }\n  interface OptionUnifyIgnore {\n    Effect?: true\n    Tag?: true\n    Either?: true\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Effect {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, out E, out R> {\n    readonly [EffectTypeId]: VarianceStruct<A, E, R>\n  }\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface VarianceStruct<out A, out E, out R> {\n    readonly _V: string\n    readonly _A: Covariant<A>\n    readonly _E: Covariant<E>\n    readonly _R: Covariant<R>\n  }\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Context<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _R : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Error<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _E : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Success<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _A : never\n}\n\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n\n/**\n * This function returns `true` if the specified value is an `Effect` value,\n * `false` otherwise.\n *\n * This function can be useful for checking the type of a value before\n * attempting to operate on it as an `Effect` value. For example, you could\n * use `isEffect` to check the type of a value before using it as an\n * argument to a function that expects an `Effect` value.\n *\n * @param u - The value to check for being an `Effect` value.\n *\n * @returns `true` if the specified value is an `Effect` value, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isEffect: (u: unknown) => u is Effect<unknown, unknown, unknown> = core.isEffect\n\n// -------------------------------------------------------------------------------------\n// caching\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that caches its result for a specified duration, known as\n * the `timeToLive`. When the cache expires after the duration, the effect will be\n * recomputed upon next evaluation.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   const cached = yield* Effect.cachedWithTTL(expensiveTask, \"150 millis\")\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* Effect.sleep(\"100 millis\")\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // expensive task...\n * // result 1\n * // result 1\n * // expensive task...\n * // result 2\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cachedWithTTL: {\n  (timeToLive: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<A, E>, never, R>\n  <A, E, R>(self: Effect<A, E, R>, timeToLive: Duration.DurationInput): Effect<Effect<A, E>, never, R>\n} = circular.cached\n\n/**\n * Similar to {@link cachedWithTTL}, this function caches an effect's result for a\n * specified duration. It also includes an additional effect for manually\n * invalidating the cached value before it naturally expires.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   const [cached, invalidate] = yield* Effect.cachedInvalidateWithTTL(\n *     expensiveTask,\n *     \"1 hour\"\n *   )\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* invalidate\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // expensive task...\n * // result 1\n * // result 1\n * // expensive task...\n * // result 2\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cachedInvalidateWithTTL: {\n  (timeToLive: Duration.DurationInput): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<[Effect<A, E>, Effect<void>], never, R>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    timeToLive: Duration.DurationInput\n  ): Effect<[Effect<A, E>, Effect<void>], never, R>\n} = circular.cachedInvalidateWithTTL\n\n/**\n * Returns an effect that computes a result lazily and caches it. Subsequent\n * evaluations of this effect will return the cached result without re-executing\n * the logic.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   console.log(\"non-cached version:\")\n *   yield* expensiveTask.pipe(Effect.andThen(Console.log))\n *   yield* expensiveTask.pipe(Effect.andThen(Console.log))\n *   console.log(\"cached version:\")\n *   const cached = yield* Effect.cached(expensiveTask)\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // non-cached version:\n * // expensive task...\n * // result 1\n * // expensive task...\n * // result 2\n * // cached version:\n * // expensive task...\n * // result 3\n * // result 3\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cached: <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<A, E, R>> = effect.memoize\n\n/**\n * Returns a memoized version of a function with effects. Memoization ensures\n * that results are stored and reused for the same inputs, reducing the need to\n * recompute them.\n *\n * @example\n * import { Effect, Random } from \"effect\"\n *\n * const program = Effect.gen(function* () {\n *   const randomNumber = (n: number) => Random.nextIntBetween(1, n)\n *   console.log(\"non-memoized version:\")\n *   console.log(yield* randomNumber(10))\n *   console.log(yield* randomNumber(10))\n *\n *   console.log(\"memoized version:\")\n *   const memoized = yield* Effect.cachedFunction(randomNumber)\n *   console.log(yield* memoized(10))\n *   console.log(yield* memoized(10))\n * })\n *\n * Effect.runFork(program)\n * // Example Output:\n * // non-memoized version:\n * // 2\n * // 8\n * // memoized version:\n * // 5\n * // 5\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cachedFunction: <A, B, E, R>(\n  f: (a: A) => Effect<B, E, R>,\n  eq?: Equivalence<A>\n) => Effect<(a: A) => Effect<B, E, R>> = circular.cachedFunction\n\n/**\n * Returns an effect that executes only once, regardless of how many times it's\n * called.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * const program = Effect.gen(function* () {\n *   const task1 = Console.log(\"task1\")\n *   yield* Effect.repeatN(task1, 2)\n *   const task2 = yield* Effect.once(Console.log(\"task2\"))\n *   yield* Effect.repeatN(task2, 2)\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // task1\n * // task1\n * // task1\n * // task2\n *\n * @since 2.0.0\n * @category caching\n */\nexport const once: <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<void, E, R>> = effect.once\n\n// -------------------------------------------------------------------------------------\n// collecting & elements\n// -------------------------------------------------------------------------------------\n\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const all: <\n  const Arg extends Iterable<Effect<any, any, any>> | Record<string, Effect<any, any, any>>,\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n>(arg: Arg, options?: O) => All.Return<Arg, O> = fiberRuntime.all\n\n/**\n * Data-last variant of `Effect.all`.\n *\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const allWith: <\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n>(\n  options?: O\n) => <const Arg extends Iterable<Effect<any, any, any>> | Record<string, Effect<any, any, any>>>(\n  arg: Arg\n) => All.Return<Arg, O> = fiberRuntime.allWith\n\n/**\n * @since 2.0.0\n */\nexport declare namespace All {\n  /**\n   * @since 2.0.0\n   */\n  export type EffectAny = Effect<any, any, any>\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnIterable<T extends Iterable<EffectAny>, Discard extends boolean, Mode> = [T] extends\n    [Iterable<Effect.Variance<infer R0, infer L0, infer R>>] ? Effect<\n      Discard extends true ? void : Mode extends \"either\" ? Array<Either.Either<R0, L0>> : Array<R0>,\n      Mode extends \"either\" ? never\n        : Mode extends \"validate\" ? Array<Option.Option<L0>>\n        : L0,\n      R\n    >\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnTuple<T extends ReadonlyArray<unknown>, Discard extends boolean, Mode> = Effect<\n    Discard extends true ? void\n      : T[number] extends never ? []\n      : Mode extends \"either\" ? {\n          -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ?\n            Either.Either<_A, _E>\n            : never\n        }\n      : { -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? _A : never },\n    Mode extends \"either\" ? never\n      : T[number] extends never ? never\n      : Mode extends \"validate\" ? {\n          -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? Option.Option<_E>\n            : never\n        }\n      : [T[number]] extends [{ [EffectTypeId]: { _E: (_: never) => infer E } }] ? E\n      : never,\n    T[number] extends never ? never\n      : [T[number]] extends [{ [EffectTypeId]: { _R: (_: never) => infer R } }] ? R\n      : never\n  > extends infer X ? X : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnObject<T, Discard extends boolean, Mode> = [T] extends [{ [K: string]: EffectAny }] ? Effect<\n      Discard extends true ? void\n        : Mode extends \"either\" ? {\n            -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ?\n              Either.Either<_A, _E>\n              : never\n          }\n        : { -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? _A : never },\n      Mode extends \"either\" ? never\n        : keyof T extends never ? never\n        : Mode extends \"validate\" ? {\n            -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? Option.Option<_E>\n              : never\n          }\n        : [T[keyof T]] extends [{ [EffectTypeId]: { _E: (_: never) => infer E } }] ? E\n        : never,\n      keyof T extends never ? never\n        : [T[keyof T]] extends [{ [EffectTypeId]: { _R: (_: never) => infer R } }] ? R\n        : never\n    >\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type IsDiscard<A> = [Extract<A, { readonly discard: true }>] extends [never] ? false : true\n\n  /**\n   * @since 2.0.0\n   */\n  export type ExtractMode<A> = [A] extends [{ mode: infer M }] ? M : \"default\"\n\n  /**\n   * @since 2.0.0\n   */\n  export type Return<\n    Arg extends Iterable<EffectAny> | Record<string, EffectAny>,\n    O extends {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: boolean | undefined\n      readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    }\n  > = [Arg] extends [ReadonlyArray<EffectAny>] ? ReturnTuple<Arg, IsDiscard<O>, ExtractMode<O>>\n    : [Arg] extends [Iterable<EffectAny>] ? ReturnIterable<Arg, IsDiscard<O>, ExtractMode<O>>\n    : [Arg] extends [Record<string, EffectAny>] ? ReturnObject<Arg, IsDiscard<O>, ExtractMode<O>>\n    : never\n}\n\n/**\n * Evaluate and run each effect in the structure and collect the results,\n * discarding results from failed effects.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const allSuccesses: <X extends Effect<any, any, any>>(\n  elements: Iterable<X>,\n  options?:\n    | {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n    | undefined\n) => Effect<Array<Effect.Success<X>>, never, Effect.Context<X>> = fiberRuntime.allSuccesses\n\n/**\n * Drops all elements until the effectful predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const dropUntil: {\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  <A, E, R>(elements: Iterable<A>, predicate: (a: A, i: number) => Effect<boolean, E, R>): Effect<Array<A>, E, R>\n} = effect.dropUntil\n\n/**\n * Drops all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const dropWhile: {\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  <A, E, R>(elements: Iterable<A>, predicate: (a: A, i: number) => Effect<boolean, E, R>): Effect<Array<A>, E, R>\n} = effect.dropWhile\n\n/**\n * Determines whether all elements of the `Collection<A>` satisfies the effectual\n * predicate `f`.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const every: {\n  <A, E, R>(f: (a: A, i: number) => Effect<boolean, E, R>): (elements: Iterable<A>) => Effect<boolean, E, R>\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect<boolean, E, R>): Effect<boolean, E, R>\n} = effect.every\n\n/**\n * Determines whether any element of the `Iterable<A>` satisfies the effectual\n * predicate `f`.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const exists: {\n  <A, E, R>(\n    f: (a: A, i: number) => Effect<boolean, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n      }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<boolean, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<boolean, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n      }\n      | undefined\n  ): Effect<boolean, E, R>\n} = fiberRuntime.exists\n\n/**\n * Filters the collection using the specified effectful predicate.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const filter: {\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n    } | undefined\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n    } | undefined\n  ): Effect<Array<A>, E, R>\n} = fiberRuntime.filter\n\n/**\n * Performs a filter and map in a single step.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const filterMap: {\n  <Eff extends Effect<any, any, any>, B>(\n    pf: (a: Effect.Success<Eff>) => Option.Option<B>\n  ): (elements: Iterable<Eff>) => Effect<Array<B>, Effect.Error<Eff>, Effect.Context<Eff>>\n  <Eff extends Effect<any, any, any>, B>(\n    elements: Iterable<Eff>,\n    pf: (a: Effect.Success<Eff>) => Option.Option<B>\n  ): Effect<Array<B>, Effect.Error<Eff>, Effect.Context<Eff>>\n} = effect.filterMap\n\n/**\n * Returns the first element that satisfies the effectful predicate.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const findFirst: {\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Option.Option<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Option.Option<A>, E, R>\n} = effect.findFirst\n\n/**\n * This function takes an iterable of `Effect` values and returns a new\n * `Effect` value that represents the first `Effect` value in the iterable\n * that succeeds. If all of the `Effect` values in the iterable fail, then\n * the resulting `Effect` value will fail as well.\n *\n * This function is sequential, meaning that the `Effect` values in the\n * iterable will be executed in sequence, and the first one that succeeds\n * will determine the outcome of the resulting `Effect` value.\n *\n * @param effects - The iterable of `Effect` values to evaluate.\n *\n * @returns A new `Effect` value that represents the first successful\n * `Effect` value in the iterable, or a failed `Effect` value if all of the\n * `Effect` values in the iterable fail.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const firstSuccessOf: <Eff extends Effect<any, any, any>>(\n  effects: Iterable<Eff>\n) => Effect<Effect.Success<Eff>, Effect.Error<Eff>, Effect.Context<Eff>> = effect.firstSuccessOf\n/**\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const forEach: {\n  <B, E, R, S extends Iterable<any>>(\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): (\n    self: S\n  ) => Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): (self: Iterable<A>) => Effect<void, E, R>\n  <B, E, R, S extends Iterable<any>>(\n    self: S,\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n} = fiberRuntime.forEach as any\n\n/**\n * Returns a successful effect with the head of the collection if the collection\n * is non-empty, or fails with the error `None` if the collection is empty.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const head: <A, E, R>(self: Effect<Iterable<A>, E, R>) => Effect<A, Cause.NoSuchElementException | E, R> =\n  effect.head\n\n/**\n * Merges an `Iterable<Effect<A, E, R>>` to a single effect, working\n * sequentially.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const mergeAll: {\n  <Z, Eff extends Effect<any, any, any>>(\n    zero: Z,\n    f: (z: Z, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): (elements: Iterable<Eff>) => Effect<Z, Effect.Error<Eff>, Effect.Context<Eff>>\n  <Eff extends Effect<any, any, any>, Z>(\n    elements: Iterable<Eff>,\n    zero: Z,\n    f: (z: Z, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<Z, Effect.Error<Eff>, Effect.Context<Eff>>\n} = fiberRuntime.mergeAll\n\n/**\n * Feeds elements of type `A` to a function `f` that returns an effect.\n * Collects all successes and failures in a tupled fashion.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const partition: {\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n} = fiberRuntime.partition\n\n/**\n * Folds an `Iterable<A>` using an effectual function f, working sequentially\n * from left to right.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduce: {\n  <Z, A, E, R>(zero: Z, f: (z: Z, a: A, i: number) => Effect<Z, E, R>): (elements: Iterable<A>) => Effect<Z, E, R>\n  <A, Z, E, R>(elements: Iterable<A>, zero: Z, f: (z: Z, a: A, i: number) => Effect<Z, E, R>): Effect<Z, E, R>\n} = effect.reduce\n\n/**\n * Reduces an `Iterable<Effect<A, E, R>>` to a single effect.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduceEffect: {\n  <Z, E, R, Eff extends Effect<any, any, any>>(\n    zero: Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): (elements: Iterable<Eff>) => Effect<Z, E | Effect.Error<Eff>, R | Effect.Context<Eff>>\n  <Eff extends Effect<any, any, any>, Z, E, R>(\n    elements: Iterable<Eff>,\n    zero: Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<Z, E | Effect.Error<Eff>, R | Effect.Context<Eff>>\n} = fiberRuntime.reduceEffect\n\n/**\n * Folds an `Iterable<A>` using an effectual function f, working sequentially from left to right.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduceRight: {\n  <A, Z, R, E>(zero: Z, f: (a: A, z: Z, i: number) => Effect<Z, E, R>): (elements: Iterable<A>) => Effect<Z, E, R>\n  <A, Z, R, E>(elements: Iterable<A>, zero: Z, f: (a: A, z: Z, i: number) => Effect<Z, E, R>): Effect<Z, E, R>\n} = effect.reduceRight\n\n/**\n * Folds over the elements in this chunk from the left, stopping the fold early\n * when the predicate is not satisfied.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduceWhile: {\n  <Z, A, E, R>(\n    zero: Z,\n    options: { readonly while: Predicate<Z>; readonly body: (s: Z, a: A, i: number) => Effect<Z, E, R> }\n  ): (elements: Iterable<A>) => Effect<Z, E, R>\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    options: { readonly while: Predicate<Z>; readonly body: (s: Z, a: A, i: number) => Effect<Z, E, R> }\n  ): Effect<Z, E, R>\n} = effect.reduceWhile\n\n/**\n * Replicates the given effect `n` times.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const replicate: {\n  (n: number): <A, E, R>(self: Effect<A, E, R>) => Array<Effect<A, E, R>>\n  <A, E, R>(self: Effect<A, E, R>, n: number): Array<Effect<A, E, R>>\n} = fiberRuntime.replicate\n\n/**\n * Performs this effect the specified number of times and collects the\n * results.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const replicateEffect: {\n  (\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<Array<A>, E, R>\n  (\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<void, E, R>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    }\n  ): Effect<Array<A>, E, R>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n} = fiberRuntime.replicateEffect\n\n/**\n * Takes elements until the effectual predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const takeUntil: {\n  <A, R, E>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.takeUntil\n\n/**\n * Takes all elements so long as the effectual predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const takeWhile: {\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.takeWhile\n\n/**\n * Feeds elements of type `A` to `f` and accumulates all errors in error\n * channel or successes in success channel.\n *\n * This combinator is lossy meaning that if there are errors all successes\n * will be lost. To retain all information please use `partition`.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const validateAll: {\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): (elements: Iterable<A>) => Effect<Array<B>, Array<E>, R>\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): (elements: Iterable<A>) => Effect<void, Array<E>, R>\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): Effect<Array<B>, Array<E>, R>\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): Effect<void, Array<E>, R>\n} = fiberRuntime.validateAll\n\n/**\n * Feeds elements of type `A` to `f` until it succeeds. Returns first success\n * or the accumulation of all errors.\n *\n * If `elements` is empty then `Effect.fail([])` is returned.\n *\n * @example\n * import { Effect, Exit } from \"effect\"\n *\n * const f = (n: number) => (n > 0 ? Effect.succeed(n) : Effect.fail(`${n} is negative`))\n *\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([], f)), Exit.fail([]))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([1, 2], f)), Exit.succeed(1))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([1, -1], f)), Exit.succeed(1))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([-1, 2], f)), Exit.succeed(2))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([-1, -2], f)), Exit.fail(['-1 is negative', '-2 is negative']))\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const validateFirst: {\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<B, Array<E>, R>\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<B, Array<E>, R>\n} = fiberRuntime.validateFirst\n\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Imports an asynchronous side-effect into a pure `Effect` value. The callback\n * function `Effect<A, E, R> => void` **MUST** be called at most once.\n *\n * The registration function can optionally return an Effect, which will be\n * executed if the `Fiber` executing this Effect is interrupted.\n *\n * The registration function can also receive an `AbortSignal` if required for\n * interruption.\n *\n * The `FiberId` of the fiber that may complete the async callback may also be\n * specified. This is called the \"blocking fiber\" because it suspends the fiber\n * executing the `async` Effect (i.e. semantically blocks the fiber from making\n * progress). Specifying this fiber id in cases where it is known will improve\n * diagnostics, but not affect the behavior of the returned effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const async: <A, E = never, R = never>(\n  register: (callback: (_: Effect<A, E, R>) => void, signal: AbortSignal) => void | Effect<void, never, R>,\n  blockingOn?: FiberId.FiberId\n) => Effect<A, E, R> = core.async\n\n/**\n * Converts an asynchronous, callback-style API into an `Effect`, which will\n * be executed asynchronously.\n *\n * With this variant, the registration function may return a an `Effect`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const asyncEffect: <A, E, R, R3, E2, R2>(\n  register: (callback: (_: Effect<A, E, R>) => void) => Effect<Effect<void, never, R3> | void, E2, R2>\n) => Effect<A, E | E2, R | R2 | R3> = _runtime.asyncEffect\n\n/**\n * Low level constructor that enables for custom stack tracing cutpoints.\n *\n * It is meant to be called with a bag of instructions that become available in the \"this\" of the effect.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const throwingFunction = () => { throw new Error() }\n * const blowUp = Effect.custom(throwingFunction, function() {\n *   return Effect.succeed(this.effect_instruction_i0())\n * })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const custom: {\n  <X, A, E, R>(i0: X, body: (this: { effect_instruction_i0: X }) => Effect<A, E, R>): Effect<A, E, R>\n  <X, Y, A, E, R>(\n    i0: X,\n    i1: Y,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y }) => Effect<A, E, R>\n  ): Effect<A, E, R>\n  <X, Y, Z, A, E, R>(\n    i0: X,\n    i1: Y,\n    i2: Z,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y; effect_instruction_i2: Z }) => Effect<A, E, R>\n  ): Effect<A, E, R>\n} = core.custom\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const withFiberRuntime: <A, E = never, R = never>(\n  withRuntime: (\n    fiber: Fiber.RuntimeFiber<A, E>,\n    status: FiberStatus.Running\n  ) => Effect<A, E, R>\n) => Effect<A, E, R> = core.withFiberRuntime\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Effect<never, E> = core.fail\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const failSync: <E>(evaluate: LazyArg<E>) => Effect<never, E> = core.failSync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Effect<never, E> = core.failCause\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const failCauseSync: <E>(evaluate: LazyArg<Cause.Cause<E>>) => Effect<never, E> = core.failCauseSync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Effect<never> = core.die\n\n/**\n * Returns an effect that dies with a `RuntimeException` having the specified\n * text message. This method can be used for terminating a fiber because a\n * defect has been detected in the code.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dieMessage: (message: string) => Effect<never> = core.dieMessage\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const dieSync: (evaluate: LazyArg<unknown>) => Effect<never> = core.dieSync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const gen: {\n  <Eff extends YieldWrap<Effect<any, any, any>>, AEff>(\n    f: (resume: Adapter) => Generator<Eff, AEff, never>\n  ): Effect<\n    AEff,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n  >\n  <Self, Eff extends YieldWrap<Effect<any, any, any>>, AEff>(\n    self: Self,\n    f: (this: Self, resume: Adapter) => Generator<Eff, AEff, never>\n  ): Effect<\n    AEff,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n  >\n} = effect.gen\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Adapter {\n  <A, E, R>(self: Effect<A, E, R>): Effect<A, E, R>\n  <A, _A, _E, _R>(a: A, ab: (a: A) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, _A, _E, _R>(a: A, ab: (a: A) => B, bc: (b: B) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, C, _A, _E, _R>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, C, D, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (g: H) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => T,\n    tu: (s: T) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n}\n\n/**\n * Returns an effect that will never produce anything. The moral equivalent of\n * `while(true) {}`, only without the wasted CPU cycles.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const never: Effect<never> = core.never\n\n/**\n * Requires the option produced by this value to be `None`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const none: <A, E, R>(\n  self: Effect<Option.Option<A>, E, R>\n) => Effect<void, E | Cause.NoSuchElementException, R> = effect.none\n\n/**\n * Like `tryPromise` but produces a defect in case of errors.\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped Promise api.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const promise: <A>(\n  evaluate: (signal: AbortSignal) => PromiseLike<A>\n) => Effect<A> = effect.promise\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Effect<A> = core.succeed\n\n/**\n * Returns an effect which succeeds with `None`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeedNone: Effect<Option.Option<never>> = effect.succeedNone\n\n/**\n * Returns an effect which succeeds with the value wrapped in a `Some`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeedSome: <A>(value: A) => Effect<Option.Option<A>> = effect.succeedSome\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <A, E, R>(effect: LazyArg<Effect<A, E, R>>) => Effect<A, E, R> = core.suspend\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: <A>(evaluate: LazyArg<A>) => Effect<A> = core.sync\n\nconst _void: Effect<void> = core.void\nexport {\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  _void as void\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const yieldNow: (options?: {\n  readonly priority?: number | undefined\n}) => Effect<void> = core.yieldNow\n\n// -------------------------------------------------------------------------------------\n// error handling\n// -------------------------------------------------------------------------------------\n\nconst _catch: {\n  <N extends keyof E, K extends E[N] & string, E, A1, E1, R1>(\n    discriminator: N,\n    options: { readonly failure: K; readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect<A1, E1, R1> }\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A1 | A, E1 | Exclude<E, { [n in N]: K }>, R1 | R>\n  <A, E, R, N extends keyof E, K extends E[N] & string, A1, E1, R1>(\n    self: Effect<A, E, R>,\n    discriminator: N,\n    options: { readonly failure: K; readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect<A1, E1, R1> }\n  ): Effect<A | A1, E1 | Exclude<E, { [n in N]: K }>, R | R1>\n} = effect._catch\n\nexport {\n  /**\n   * Recovers from specified error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  _catch as catch\n}\n\n/**\n * Recovers from all recoverable errors.\n *\n * **Note**: that `Effect.catchAll` will not recover from unrecoverable defects. To\n * recover from both recoverable and unrecoverable errors use\n * `Effect.catchAllCause`.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAll: {\n  <E, A2, E2, R2>(f: (e: E) => Effect<A2, E2, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, f: (e: E) => Effect<A2, E2, R2>): Effect<A2 | A, E2, R2 | R>\n} = core.catchAll\n\n/**\n * Recovers from both recoverable and unrecoverable errors.\n *\n * See `sandbox`, `mapErrorCause` for other functions that can\n * recover from defects.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllCause: {\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2, R | R2>\n} = core.catchAllCause\n\n/**\n * Recovers from all defects with provided function.\n *\n * **WARNING**: There is no sensible way to recover from defects. This\n * method should be used only at the boundary between Effect and an external\n * system, to transmit information on a defect for diagnostic or explanatory\n * purposes.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllDefect: {\n  <A2, E2, R2>(\n    f: (defect: unknown) => Effect<A2, E2, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (defect: unknown) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E | E2, R | R2>\n} = effect.catchAllDefect\n\n/**\n * Recovers from errors that match the given predicate.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchIf: {\n  <E, EB extends E, A2, E2, R2>(\n    refinement: Refinement<NoInfer<E>, EB>,\n    f: (e: EB) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  <E, A2, E2, R2>(\n    predicate: Predicate<NoInfer<E>>,\n    f: (e: NoInfer<E>) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2 | Exclude<E, EB>, R | R2>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E | E2, R | R2>\n} = core.catchIf\n\n/**\n * Recovers from some or all of the error cases.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSome: {\n  <E, A2, E2, R2>(\n    pf: (e: NoInfer<E>) => Option.Option<Effect<A2, E2, R2>>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    pf: (e: NoInfer<E>) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A | A2, E | E2, R | R2>\n} = core.catchSome\n\n/**\n * Recovers from some or all of the error cases with provided cause.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSomeCause: {\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect<A2, E2, R2>>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A2 | A, E | E2, R2 | R>\n} = effect.catchSomeCause\n\n/**\n * Recovers from some or all of the defects with provided partial function.\n *\n * **WARNING**: There is no sensible way to recover from defects. This\n * method should be used only at the boundary between Effect and an external\n * system, to transmit information on a defect for diagnostic or explanatory\n * purposes.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSomeDefect: {\n  <A2, E2, R2>(\n    pf: (defect: unknown) => Option.Option<Effect<A2, E2, R2>>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    pf: (defect: unknown) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A | A2, E | E2, R | R2>\n} = effect.catchSomeDefect\n\n/**\n * Recovers from the specified tagged error.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchTag: {\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A1 | A, E1 | Exclude<E, { _tag: K }>, R1 | R>\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n    self: Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): Effect<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1>\n} = effect.catchTag\n\n/**\n * Recovers from the specified tagged errors.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchTags: {\n  <\n    E,\n    Cases extends\n      & { [K in Extract<E, { _tag: string }>[\"_tag\"]]+?: ((error: Extract<E, { _tag: K }>) => Effect<any, any, any>) }\n      & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string }>[\"_tag\"]>]: never })\n  >(\n    cases: Cases\n  ): <A, R>(\n    self: Effect<A, E, R>\n  ) => Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<infer A, any, any> ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, infer E, any> ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, any, infer R> ? R : never\n    }[keyof Cases]\n  >\n  <\n    R,\n    E,\n    A,\n    Cases extends\n      & { [K in Extract<E, { _tag: string }>[\"_tag\"]]+?: ((error: Extract<E, { _tag: K }>) => Effect<any, any, any>) }\n      & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string }>[\"_tag\"]>]: never })\n  >(\n    self: Effect<A, E, R>,\n    cases: Cases\n  ): Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<infer A, any, any> ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, infer E, any> ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, any, infer R> ? R : never\n    }[keyof Cases]\n  >\n} = effect.catchTags\n\n/**\n * Returns an effect that succeeds with the cause of failure of this effect,\n * or `Cause.empty` if the effect did succeed.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const cause: <A, E, R>(self: Effect<A, E, R>) => Effect<Cause.Cause<E>, never, R> = effect.cause\n\n/**\n * Returns an effect that ignores errors and runs repeatedly until it\n * eventually succeeds.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const eventually: <A, E, R>(self: Effect<A, E, R>) => Effect<A, never, R> = effect.eventually\n\n/**\n * Returns a new effect that ignores the success or failure of this effect.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const ignore: <A, E, R>(self: Effect<A, E, R>) => Effect<void, never, R> = effect.ignore\n\n/**\n * Returns a new effect that ignores the success or failure of this effect,\n * but which also logs failures at the Debug level, just in case the failure\n * turns out to be important.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const ignoreLogged: <A, E, R>(self: Effect<A, E, R>) => Effect<void, never, R> = effect.ignoreLogged\n\n/**\n * Exposes all parallel errors in a single call.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const parallelErrors: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Array<E>, R> = effect.parallelErrors\n\n/**\n * Exposes the full `Cause` of failure for the specified effect.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const sandbox: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Cause.Cause<E>, R> = effect.sandbox\n\n/**\n * @since 2.0.0\n * @category error handling\n */\nexport declare namespace Retry {\n  /**\n   * @since 2.0.0\n   * @category error handling\n   */\n  export type Return<R, E, A, O extends Options<E>> = Effect<\n    A,\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer _R> } ? E\n      : O extends { until: Refinement<E, infer E2> } ? E2\n      : E)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never),\n    | R\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer R> } ? R : never)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n  > extends infer Z ? Z : never\n\n  /**\n   * @since 2.0.0\n   * @category error handling\n   */\n  export interface Options<E> {\n    while?: ((error: E) => boolean | Effect<boolean, any, any>) | undefined\n    until?: ((error: E) => boolean | Effect<boolean, any, any>) | undefined\n    times?: number | undefined\n    schedule?: Schedule.Schedule<any, E, any> | undefined\n  }\n}\n\n/**\n * Retries according to the options provided\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const retry: {\n  <E, O extends Retry.Options<E>>(\n    options: O\n  ): <A, R>(\n    self: Effect<A, E, R>\n  ) => Retry.Return<R, E, A, O>\n  <B, E, R1>(\n    policy: Schedule.Schedule<B, NoInfer<E>, R1>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E, R1 | R>\n  <A, E, R, O extends Retry.Options<E>>(\n    self: Effect<A, E, R>,\n    options: O\n  ): Retry.Return<R, E, A, O>\n  <A, E, R, B, R1>(\n    self: Effect<A, E, R>,\n    policy: Schedule.Schedule<B, E, R1>\n  ): Effect<A, E, R1 | R>\n} = _schedule.retry_combined\n\n/**\n * Retries with the specified schedule, until it fails, and then both the\n * value produced by the schedule together with the last error are passed to\n * the recovery function.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const retryOrElse: {\n  <A1, E, R1, A2, E2, R2>(\n    policy: Schedule.Schedule<A1, NoInfer<E>, R1>,\n    orElse: (e: NoInfer<E>, out: A1) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R1 | R2 | R>\n  <A, E, R, A1, R1, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    policy: Schedule.Schedule<A1, NoInfer<E>, R1>,\n    orElse: (e: NoInfer<E>, out: A1) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2, R | R1 | R2>\n} = _schedule.retryOrElse_Effect\n\nconst try_: {\n  <A, E>(options: { readonly try: LazyArg<A>; readonly catch: (error: unknown) => E }): Effect<A, E>\n  <A>(evaluate: LazyArg<A>): Effect<A, Cause.UnknownException>\n} = effect.try_\n\nexport {\n  /**\n   * Imports a synchronous side-effect into a pure `Effect` value, translating any\n   * thrown exceptions into typed failed effects creating with `Effect.fail`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  try_ as try\n}\n\n/**\n * Returns an effect whose success is mapped by the specified side effecting\n * `try` function, translating any promise rejections into typed failed effects\n * via the `catch` function.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const tryMap: {\n  <A, B, E1>(\n    options: { readonly try: (a: A) => B; readonly catch: (error: unknown) => E1 }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R>\n  <A, E, R, B, E1>(self: Effect<A, E, R>, options: {\n    readonly try: (a: A) => B\n    readonly catch: (error: unknown) => E1\n  }): Effect<B, E | E1, R>\n} = effect.tryMap\n\n/**\n * Returns an effect whose success is mapped by the specified side effecting\n * `try` function, translating any promise rejections into typed failed effects\n * via the `catch` function.\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped Promise api.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const tryMapPromise: {\n  <A, B, E1>(\n    options: { readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>; readonly catch: (error: unknown) => E1 }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R>\n  <A, E, R, B, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>; readonly catch: (error: unknown) => E1 }\n  ): Effect<B, E | E1, R>\n} = effect.tryMapPromise\n\n/**\n * Create an `Effect` that when executed will construct `promise` and wait for\n * its result, errors will produce failure as `unknown`.\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped Promise api.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const tryPromise: {\n  <A, E>(\n    options: { readonly try: (signal: AbortSignal) => PromiseLike<A>; readonly catch: (error: unknown) => E }\n  ): Effect<A, E>\n  <A>(try_: (signal: AbortSignal) => PromiseLike<A>): Effect<A, Cause.UnknownException>\n} = effect.tryPromise\n\n/**\n * The inverse operation `sandbox(effect)`\n *\n * Terminates with exceptions on the `Left` side of the `Either` error, if it\n * exists. Otherwise extracts the contained `Effect<A, E, R>`\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const unsandbox: <A, E, R>(self: Effect<A, Cause.Cause<E>, R>) => Effect<A, E, R> = effect.unsandbox\n\n// -------------------------------------------------------------------------------------\n// interuption\n// -------------------------------------------------------------------------------------\n\n/**\n * This function checks if any fibers are attempting to interrupt the current\n * fiber, and if so, performs self-interruption.\n *\n * Note that this allows for interruption to occur in uninterruptible regions.\n *\n * @returns A new `Effect` value that represents the check for interruption\n * and the potential self-interruption of the current fiber.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const allowInterrupt: Effect<void> = effect.allowInterrupt\n\n/**\n * Checks the interrupt status, and produces the effect returned by the\n * specified callback.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const checkInterruptible: <A, E, R>(f: (isInterruptible: boolean) => Effect<A, E, R>) => Effect<A, E, R> =\n  core.checkInterruptible\n\n/**\n * Returns an effect whose interruption will be disconnected from the\n * fiber's own interruption, being performed in the background without\n * slowing down the fiber's interruption.\n *\n * This method is useful to create \"fast interrupting\" effects. For\n * example, if you call this on a bracketed effect, then even if the\n * effect is \"stuck\" in acquire or release, its interruption will return\n * immediately, while the acquire / release are performed in the\n * background.\n *\n * See timeout and race for other applications.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const disconnect: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.disconnect\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interrupt: Effect<never> = core.interrupt\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptWith: (fiberId: FiberId.FiberId) => Effect<never> = core.interruptWith\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptible: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = core.interruptible\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptibleMask: <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect<AX, EX, RX>) => Effect<AX, EX, RX>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.interruptibleMask\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const onInterrupt: {\n  <X, R2>(\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = core.onInterrupt\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const uninterruptible: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = core.uninterruptible\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const uninterruptibleMask: <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect<AX, EX, RX>) => Effect<AX, EX, RX>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.uninterruptibleMask\n\n// -------------------------------------------------------------------------------------\n// lifting\n// -------------------------------------------------------------------------------------\n\n/**\n * Transforms a `Predicate` function into an `Effect` returning the input value if the predicate returns `true`\n * or failing with specified error if the predicate fails\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * // succeeds with `1`\n * Effect.liftPredicate(1, isPositive, n => `${n} is not positive`)\n *\n * // fails with `\"0 is not positive\"`\n * Effect.liftPredicate(0, isPositive, n => `${n} is not positive`)\n *\n * @category lifting\n * @since 3.4.0\n */\nexport const liftPredicate: {\n  <A, B extends A, E>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orFailWith: (a: NoInfer<A>) => E\n  ): (a: A) => Effect<B, E>\n  <A, E>(predicate: Predicate<NoInfer<A>>, orFailWith: (a: NoInfer<A>) => E): (a: A) => Effect<A, E>\n  <A, E, B extends A>(self: A, refinement: Refinement<A, B>, orFailWith: (a: A) => E): Effect<B, E>\n  <A, E>(self: A, predicate: Predicate<NoInfer<A>>, orFailWith: (a: NoInfer<A>) => E): Effect<A, E>\n} = effect.liftPredicate\n\n// -------------------------------------------------------------------------------------\n// mapping\n// -------------------------------------------------------------------------------------\n\n/**\n * This function maps the success value of an `Effect` value to a specified\n * constant value.\n *\n * @param value - The constant value that the success value of the `Effect`\n * value will be mapped to.\n * @param self - The `Effect` value whose success value will be mapped to the\n * specified constant value.\n *\n * @returns A new `Effect` value that represents the mapping of the success\n * value of the original `Effect` value to the specified constant value.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  <B>(value: B): <A, E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  <A, E, R, B>(self: Effect<A, E, R>, value: B): Effect<B, E, R>\n} = core.as\n\n/**\n * This function maps the success value of an `Effect` value to a `Some` value\n * in an `Option` value. If the original `Effect` value fails, the returned\n * `Effect` value will also fail.\n *\n * @param self - The `Effect` value whose success value will be mapped to a\n * `Some` value in an `Option` value.\n *\n * @returns A new `Effect` value that represents the mapping of the success\n * value of the original `Effect` value to a `Some` value in an `Option`\n * value. The returned `Effect` value may fail if the original `Effect` value\n * fails.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const asSome: <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R> = effect.asSome\n\n/**\n * This function maps the error value of an `Effect` value to a `Some` value\n * in an `Option` value. If the original `Effect` value succeeds, the returned\n * `Effect` value will also succeed.\n *\n * @param self - The `Effect` value whose error value will be mapped to a\n * `Some` value in an `Option` value.\n *\n * @returns A new `Effect` value that represents the mapping of the error\n * value of the original `Effect` value to a `Some` value in an `Option`\n * value. The returned `Effect` value may succeed if the original `Effect`\n * value succeeds.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const asSomeError: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Option.Option<E>, R> = effect.asSomeError\n\n/**\n * This function maps the success value of an `Effect` value to `void`. If the\n * original `Effect` value succeeds, the returned `Effect` value will also\n * succeed. If the original `Effect` value fails, the returned `Effect` value\n * will fail with the same error.\n *\n * @param self - The `Effect` value whose success value will be mapped to `void`.\n *\n * @returns A new `Effect` value that represents the mapping of the success\n * value of the original `Effect` value to `void`.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const asVoid: <A, E, R>(self: Effect<A, E, R>) => Effect<void, E, R> = core.asVoid\n\n/**\n * Returns an effect that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flip: <A, E, R>(self: Effect<A, E, R>) => Effect<E, A, R> = core.flip\n\n/**\n * Swaps the error/value parameters, applies the function `f` and flips the\n * parameters back\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flipWith: {\n  <E, A, R, E2, A2, R2>(\n    f: (effect: Effect<E, A, R>) => Effect<E2, A2, R2>\n  ): (self: Effect<A, E, R>) => Effect<A2, E2, R2>\n  <A, E, R, E2, A2, R2>(\n    self: Effect<A, E, R>,\n    f: (effect: Effect<E, A, R>) => Effect<E2, A2, R2>\n  ): Effect<A2, E2, R2>\n} = effect.flipWith\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  <A, E, R, B>(self: Effect<A, E, R>, f: (a: A) => B): Effect<B, E, R>\n} = core.map\n\n/**\n * Statefully and effectfully maps over the elements of this chunk to produce\n * new elements.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapAccum: {\n  <S, A, B, E, R>(\n    zero: S,\n    f: (s: S, a: A, i: number) => Effect<readonly [S, B], E, R>\n  ): (elements: Iterable<A>) => Effect<[S, Array<B>], E, R>\n  <A, S, B, E, R>(\n    elements: Iterable<A>,\n    zero: S,\n    f: (s: S, a: A, i: number) => Effect<readonly [S, B], E, R>\n  ): Effect<[S, Array<B>], E, R>\n} = effect.mapAccum\n\n/**\n * Returns an effect whose failure and success channels have been mapped by\n * the specified `onFailure` and `onSuccess` functions.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapBoth: {\n  <E, E2, A, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2, E2, R>\n  <A, E, R, E2, A2>(\n    self: Effect<A, E, R>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Effect<A2, E2, R>\n} = core.mapBoth\n\n/**\n * Returns an effect with its error channel mapped using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect<A, E, R>, f: (e: E) => E2): Effect<A, E2, R>\n} = core.mapError\n\n/**\n * Returns an effect with its full cause of failure mapped using the specified\n * function. This can be used to transform errors while preserving the\n * original structure of `Cause`.\n *\n * See `sandbox`, `catchAllCause` for other functions for dealing\n * with defects.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapErrorCause: {\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): <A, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Effect<A, E2, R>\n} = effect.mapErrorCause\n\n/**\n * Returns a new effect where the error channel has been merged into the\n * success channel to their common combined type.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const merge: <A, E, R>(self: Effect<A, E, R>) => Effect<E | A, never, R> = effect.merge\n\n/**\n * Returns a new effect where boolean value of this effect is negated.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const negate: <E, R>(self: Effect<boolean, E, R>) => Effect<boolean, E, R> = effect.negate\n\n// -------------------------------------------------------------------------------------\n// scoping, resources & finalization\n// -------------------------------------------------------------------------------------\n\n/**\n * This function constructs a scoped resource from an `acquire` and `release`\n * `Effect` value.\n *\n * If the `acquire` `Effect` value successfully completes execution, then the\n * `release` `Effect` value will be added to the finalizers associated with the\n * scope of this `Effect` value, and it is guaranteed to be run when the scope\n * is closed.\n *\n * The `acquire` and `release` `Effect` values will be run uninterruptibly.\n * Additionally, the `release` `Effect` value may depend on the `Exit` value\n * specified when the scope is closed.\n *\n * @param acquire - The `Effect` value that acquires the resource.\n * @param release - The `Effect` value that releases the resource.\n *\n * @returns A new `Effect` value that represents the scoped resource.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const acquireRelease: {\n  <A, X, R2>(\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): <E, R>(acquire: Effect<A, E, R>) => Effect<A, E, Scope.Scope | R2 | R>\n  <A, E, R, X, R2>(\n    acquire: Effect<A, E, R>,\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): Effect<A, E, Scope.Scope | R | R2>\n} = fiberRuntime.acquireRelease\n\n/**\n * This function constructs a scoped resource from an `acquire` and `release`\n * `Effect` value.\n *\n * If the `acquire` `Effect` value successfully completes execution, then the\n * `release` `Effect` value will be added to the finalizers associated with the\n * scope of this `Effect` value, and it is guaranteed to be run when the scope\n * is closed.\n *\n * The `acquire` `Effect` values will be run interruptibly.\n * The `release` `Effect` values will be run uninterruptibly.\n *\n * Additionally, the `release` `Effect` value may depend on the `Exit` value\n * specified when the scope is closed.\n *\n * @param acquire - The `Effect` value that acquires the resource.\n * @param release - The `Effect` value that releases the resource.\n *\n * @returns A new `Effect` value that represents the scoped resource.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const acquireReleaseInterruptible: {\n  <X, R2>(\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): <A, E, R>(acquire: Effect<A, E, R>) => Effect<A, E, Scope.Scope | R2 | R>\n  <A, E, R, X, R2>(\n    acquire: Effect<A, E, R>,\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): Effect<A, E, Scope.Scope | R | R2>\n} = fiberRuntime.acquireReleaseInterruptible\n\n/**\n * This function is used to ensure that an `Effect` value that represents the\n * acquisition of a resource (for example, opening a file, launching a thread,\n * etc.) will not be interrupted, and that the resource will always be released\n * when the `Effect` value completes execution.\n *\n * `acquireUseRelease` does the following:\n *\n *   1. Ensures that the `Effect` value that acquires the resource will not be\n *      interrupted. Note that acquisition may still fail due to internal\n *      reasons (such as an uncaught exception).\n *   2. Ensures that the `release` `Effect` value will not be interrupted,\n *      and will be executed as long as the acquisition `Effect` value\n *      successfully acquires the resource.\n *\n * During the time period between the acquisition and release of the resource,\n * the `use` `Effect` value will be executed.\n *\n * If the `release` `Effect` value fails, then the entire `Effect` value will\n * fail, even if the `use` `Effect` value succeeds. If this fail-fast behavior\n * is not desired, errors produced by the `release` `Effect` value can be caught\n * and ignored.\n *\n * @param acquire - The `Effect` value that acquires the resource.\n * @param use - The `Effect` value that is executed between the acquisition\n * and release of the resource.\n * @param release - The `Effect` value that releases the resource.\n *\n * @returns A new `Effect` value that represents the acquisition, use, and\n * release of the resource.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const acquireUseRelease: {\n  <A2, E2, R2, A, X, R3>(\n    use: (a: A) => Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect<X, never, R3>\n  ): <E, R>(acquire: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, X, R3>(\n    acquire: Effect<A, E, R>,\n    use: (a: A) => Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect<X, never, R3>\n  ): Effect<A2, E | E2, R | R2 | R3>\n} = core.acquireUseRelease\n\n/**\n * This function adds a finalizer to the scope of the calling `Effect` value.\n * The finalizer is guaranteed to be run when the scope is closed, and it may\n * depend on the `Exit` value that the scope is closed with.\n *\n * @param finalizer - The finalizer to add to the scope of the calling\n * `Effect` value. This function must take an `Exit` value as its parameter,\n * and return a new `Effect` value.\n *\n * @returns A new `Effect` value that represents the addition of the finalizer\n * to the scope of the calling `Effect` value.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const addFinalizer: <X, R>(\n  finalizer: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R>\n) => Effect<void, never, Scope.Scope | R> = fiberRuntime.addFinalizer\n\n/**\n * Returns an effect that, if this effect _starts_ execution, then the\n * specified `finalizer` is guaranteed to be executed, whether this effect\n * succeeds, fails, or is interrupted.\n *\n * For use cases that need access to the effect's result, see `onExit`.\n *\n * Finalizers offer very powerful guarantees, but they are low-level, and\n * should generally not be used for releasing resources. For higher-level\n * logic built on `ensuring`, see the `acquireRelease` family of methods.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const ensuring: {\n  <X, R1>(finalizer: Effect<X, never, R1>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R1 | R>\n  <A, E, R, X, R1>(self: Effect<A, E, R>, finalizer: Effect<X, never, R1>): Effect<A, E, R1 | R>\n} = fiberRuntime.ensuring\n\n/**\n * Runs the specified effect if this effect fails, providing the error to the\n * effect if it exists. The provided effect will not be interrupted.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const onError: {\n  <E, X, R2>(\n    cleanup: (cause: Cause.Cause<E>) => Effect<X, never, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect<X, never, R2>\n  ): Effect<A, E, R2 | R>\n} = core.onError\n\n/**\n * Ensures that a cleanup functions runs, whether this effect succeeds, fails,\n * or is interrupted.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const onExit: {\n  <A, E, X, R2>(\n    cleanup: (exit: Exit.Exit<A, E>) => Effect<X, never, R2>\n  ): <R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (exit: Exit.Exit<A, E>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = core.onExit\n\n/**\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const parallelFinalizers: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.parallelFinalizers\n\n/**\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const finalizersMask: (\n  strategy: ExecutionStrategy\n) => <A, E, R>(\n  self: (restore: <A1, E1, R1>(self: Effect<A1, E1, R1>) => Effect<A1, E1, R1>) => Effect<A, E, R>\n) => Effect<A, E, R> = fiberRuntime.finalizersMask\n\n/**\n * Returns a new scoped workflow that runs finalizers added to the scope of\n * this workflow sequentially in the reverse of the order in which they were\n * added. Note that finalizers are run sequentially by default so this only\n * has meaning if used within a scope where finalizers are being run in\n * parallel.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const sequentialFinalizers: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> =\n  fiberRuntime.sequentialFinalizers\n\n/**\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const scope: Effect<Scope.Scope, never, Scope.Scope> = fiberRuntime.scope\n\n/**\n * Accesses the current scope and uses it to perform the specified effect.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const scopeWith: <A, E, R>(f: (scope: Scope.Scope) => Effect<A, E, R>) => Effect<A, E, R | Scope.Scope> =\n  fiberRuntime.scopeWith\n\n/**\n * Scopes all resources used in this workflow to the lifetime of the workflow,\n * ensuring that their finalizers are run as soon as this workflow completes\n * execution, whether by success, failure, or interruption.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const scoped: <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, Exclude<R, Scope.Scope>> =\n  fiberRuntime.scopedEffect\n\n/**\n * Scopes all resources acquired by `resource` to the lifetime of `use`\n * without effecting the scope of any resources acquired by `use`.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const using: {\n  <A, A2, E2, R2>(\n    use: (a: A) => Effect<A2, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | Exclude<R, Scope.Scope>>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    use: (a: A) => Effect<A2, E2, R2>\n  ): Effect<A2, E | E2, R2 | Exclude<R, Scope.Scope>>\n} = fiberRuntime.using\n\n/**\n * Returns a new scoped workflow that returns the result of this workflow as\n * well as a finalizer that can be run to close the scope of this workflow.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const withEarlyRelease: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<[Effect<void>, A], E, R | Scope.Scope> = fiberRuntime.withEarlyRelease\n\n// -------------------------------------------------------------------------------------\n// supervision & fibers\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns a new effect that will not succeed with its value before first\n * waiting for the end of all child fibers forked by the effect.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const awaitAllChildren: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = circular.awaitAllChildren\n\n/**\n * Returns a new workflow that will not supervise any fibers forked by this\n * workflow.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const daemonChildren: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.daemonChildren\n\n/**\n * Constructs an effect with information about the current `Fiber`.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const descriptor: Effect<Fiber.Fiber.Descriptor> = effect.descriptor\n\n/**\n * Constructs an effect based on information about the current `Fiber`.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const descriptorWith: <A, E, R>(f: (descriptor: Fiber.Fiber.Descriptor) => Effect<A, E, R>) => Effect<A, E, R> =\n  effect.descriptorWith\n\n/**\n * Returns a new workflow that executes this one and captures the changes in\n * `FiberRef` values.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const diffFiberRefs: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<[FiberRefsPatch.FiberRefsPatch, A], E, R> = effect.diffFiberRefs\n\n/**\n * Acts on the children of this fiber (collected into a single fiber),\n * guaranteeing the specified callback will be invoked, whether or not this\n * effect succeeds.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const ensuringChild: {\n  <X, R2>(\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = circular.ensuringChild\n\n/**\n * Acts on the children of this fiber, guaranteeing the specified callback\n * will be invoked, whether or not this effect succeeds.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const ensuringChildren: {\n  <X, R2>(\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = circular.ensuringChildren\n\n/**\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fiberId: Effect<FiberId.FiberId> = core.fiberId\n\n/**\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fiberIdWith: <A, E, R>(f: (descriptor: FiberId.Runtime) => Effect<A, E, R>) => Effect<A, E, R> =\n  core.fiberIdWith\n\n/**\n * Returns an effect that forks this effect into its own separate fiber,\n * returning the fiber immediately, without waiting for it to begin executing\n * the effect.\n *\n * You can use the `fork` method whenever you want to execute an effect in a\n * new fiber, concurrently and without \"blocking\" the fiber executing other\n * effects. Using fibers can be tricky, so instead of using this method\n * directly, consider other higher-level methods, such as `raceWith`,\n * `zipPar`, and so forth.\n *\n * The fiber returned by this method has methods to interrupt the fiber and to\n * wait for it to finish executing the effect. See `Fiber` for more\n * information.\n *\n * Whenever you use this method to launch a new fiber, the new fiber is\n * attached to the parent fiber's scope. This means when the parent fiber\n * terminates, the child fiber will be terminated as well, ensuring that no\n * fibers leak. This behavior is called \"auto supervision\", and if this\n * behavior is not desired, you may use the `forkDaemon` or `forkIn` methods.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fork: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R> = fiberRuntime.fork\n\n/**\n * Forks the effect into a new fiber attached to the global scope. Because the\n * new fiber is attached to the global scope, when the fiber executing the\n * returned effect terminates, the forked fiber will continue running.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkDaemon: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R> =\n  fiberRuntime.forkDaemon\n\n/**\n * Returns an effect that forks all of the specified values, and returns a\n * composite fiber that produces a list of their results, in order.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkAll: {\n  (\n    options?: { readonly discard?: false | undefined } | undefined\n  ): <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>\n  ) => Effect<Fiber.Fiber<Array<Effect.Success<Eff>>, Effect.Error<Eff>>, never, Effect.Context<Eff>>\n  (\n    options: { readonly discard: true }\n  ): <Eff extends Effect<any, any, any>>(effects: Iterable<Eff>) => Effect<void, never, Effect.Context<Eff>>\n  <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>,\n    options?: { readonly discard?: false | undefined } | undefined\n  ): Effect<Fiber.Fiber<Array<Effect.Success<Eff>>, Effect.Error<Eff>>, never, Effect.Context<Eff>>\n  <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>,\n    options: { readonly discard: true }\n  ): Effect<void, never, Effect.Context<Eff>>\n} = circular.forkAll\n\n/**\n * Forks the effect in the specified scope. The fiber will be interrupted\n * when the scope is closed.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkIn: {\n  (scope: Scope.Scope): <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R>\n  <A, E, R>(self: Effect<A, E, R>, scope: Scope.Scope): Effect<Fiber.RuntimeFiber<A, E>, never, R>\n} = circular.forkIn\n\n/**\n * Forks the fiber in a `Scope`, interrupting it when the scope is closed.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkScoped: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, Scope.Scope | R> =\n  circular.forkScoped\n\n/**\n * Like fork but handles an error with the provided handler.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkWithErrorHandler: {\n  <E, X>(\n    handler: (e: E) => Effect<X>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R>\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    handler: (e: E) => Effect<X>\n  ): Effect<Fiber.RuntimeFiber<A, E>, never, R>\n} = fiberRuntime.forkWithErrorHandler\n\n/**\n * Creates an `Effect` value that represents the exit value of the specified\n * fiber.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fromFiber: <A, E>(fiber: Fiber.Fiber<A, E>) => Effect<A, E> = circular.fromFiber\n\n/**\n * Creates an `Effect` value that represents the exit value of the specified\n * fiber.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fromFiberEffect: <A, E, R>(fiber: Effect<Fiber.Fiber<A, E>, E, R>) => Effect<A, E, R> =\n  circular.fromFiberEffect\n\n/**\n * Returns an effect with the behavior of this one, but where all child fibers\n * forked in the effect are reported to the specified supervisor.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const supervised: {\n  <X>(supervisor: Supervisor.Supervisor<X>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R, X>(self: Effect<A, E, R>, supervisor: Supervisor.Supervisor<X>): Effect<A, E, R>\n} = circular.supervised\n\n/**\n * Transplants specified effects so that when those effects fork other\n * effects, the forked effects will be governed by the scope of the fiber that\n * executes this effect.\n *\n * This can be used to \"graft\" deep grandchildren onto a higher-level scope,\n * effectively extending their lifespans into the parent scope.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const transplant: <A, E, R>(\n  f: (grafter: <A2, E2, R2>(effect: Effect<A2, E2, R2>) => Effect<A2, E2, R2>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.transplant\n\n/**\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const withConcurrency: {\n  (concurrency: number | \"unbounded\"): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, concurrency: number | \"unbounded\"): Effect<A, E, R>\n} = core.withConcurrency\n\n// ---------------------------------------------------------------------------------------\n// scheduler\n// ---------------------------------------------------------------------------------------\n\n/**\n * Sets the provided scheduler for usage in the wrapped effect\n *\n * @since 2.0.0\n * @category scheduler\n */\nexport const withScheduler: {\n  (scheduler: Scheduler.Scheduler): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, scheduler: Scheduler.Scheduler): Effect<A, E, R>\n} = Scheduler.withScheduler\n\n/**\n * Sets the scheduling priority used when yielding\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withSchedulingPriority: {\n  (priority: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, priority: number): Effect<A, E, R>\n} = core.withSchedulingPriority\n\n/**\n * Sets the maximum number of operations before yield by the default schedulers\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withMaxOpsBeforeYield: {\n  (priority: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, priority: number): Effect<A, E, R>\n} = core.withMaxOpsBeforeYield\n\n// ---------------------------------------------------------------------------------------\n// clock\n// ---------------------------------------------------------------------------------------\n\n/**\n * Retreives the `Clock` service from the context\n *\n * @since 2.0.0\n * @category clock\n */\nexport const clock: Effect<Clock.Clock> = effect.clock\n\n/**\n * Retreives the `Clock` service from the context and provides it to the\n * specified effectful function.\n *\n * @since 2.0.0\n * @category clock\n */\nexport const clockWith: <A, E, R>(f: (clock: Clock.Clock) => Effect<A, E, R>) => Effect<A, E, R> = effect.clockWith\n\n/**\n * Sets the implementation of the clock service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const withClockScoped: <A extends Clock.Clock>(value: A) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withClockScoped\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * clock service.\n *\n * @since 2.0.0\n * @category clock\n */\nexport const withClock: {\n  <X extends Clock.Clock>(value: X): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <X extends Clock.Clock, A, E, R>(effect: Effect<A, E, R>, value: X): Effect<A, E, R>\n} = defaultServices.withClock\n\n// -------------------------------------------------------------------------------------\n// console\n// -------------------------------------------------------------------------------------\n\n/**\n * Retreives the `Console` service from the context\n *\n * @since 2.0.0\n * @category console\n */\nexport const console: Effect<Console> = _console.console\n\n/**\n * Retreives the `Console` service from the context and provides it to the\n * specified effectful function.\n *\n * @since 2.0.0\n * @category console\n */\nexport const consoleWith: <A, E, R>(f: (console: Console) => Effect<A, E, R>) => Effect<A, E, R> = _console.consoleWith\n\n/**\n * Sets the implementation of the console service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const withConsoleScoped: <A extends Console>(console: A) => Effect<void, never, Scope.Scope> =\n  _console.withConsoleScoped\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * console service.\n *\n * @since 2.0.0\n * @category console\n */\nexport const withConsole: {\n  <C extends Console>(console: C): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R, C extends Console>(effect: Effect<A, E, R>, console: C): Effect<A, E, R>\n} = _console.withConsole\n\n// ---------------------------------------------------------------------------------------\n// delays & timeouts\n// ---------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that is delayed from this effect by the specified\n * `Duration`.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const delay: {\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<A, E, R>\n} = effect.delay\n\n/**\n * Returns an effect that suspends for the specified duration. This method is\n * asynchronous, and does not actually block the fiber executing the effect.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const sleep: (duration: Duration.DurationInput) => Effect<void> = effect.sleep\n\n/**\n * Returns a new effect that executes this one and times the execution.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timed: <A, E, R>(self: Effect<A, E, R>) => Effect<[Duration.Duration, A], E, R> = effect.timed\n\n/**\n * A more powerful variation of `timed` that allows specifying the clock.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timedWith: {\n  <E1, R1>(\n    nanoseconds: Effect<bigint, E1, R1>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[Duration.Duration, A], E1 | E, R1 | R>\n  <A, E, R, E1, R1>(\n    self: Effect<A, E, R>,\n    nanoseconds: Effect<bigint, E1, R1>\n  ): Effect<[Duration.Duration, A], E | E1, R | R1>\n} = effect.timedWith\n\n/**\n * Returns an effect that will timeout this effect, failing with a `Cause.TimeoutException`\n * if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses without producing a value, the running effect will\n * be safely interrupted.\n *\n * WARNING: The effect returned by this method will not itself return until\n * the underlying effect is actually interrupted. This leads to more\n * predictable resource utilization. If early return is desired, then instead\n * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which\n * first disconnects the effect's interruption signal before performing the\n * timeout, resulting in earliest possible return, before an underlying effect\n * has been successfully interrupted.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeout: {\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E | Cause.TimeoutException, R>\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<A, Cause.TimeoutException | E, R>\n} = circular.timeout\n\n/**\n * Returns an effect that will timeout this effect, returning `None` if the\n * timeout elapses before the effect has produced a value; and returning\n * `Some` of the produced value otherwise.\n *\n * If the timeout elapses without producing a value, the running effect will\n * be safely interrupted.\n *\n * WARNING: The effect returned by this method will not itself return until\n * the underlying effect is actually interrupted. This leads to more\n * predictable resource utilization. If early return is desired, then instead\n * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which\n * first disconnects the effect's interruption signal before performing the\n * timeout, resulting in earliest possible return, before an underlying effect\n * has been successfully interrupted.\n *\n * @since 3.1.0\n * @category delays & timeouts\n */\nexport const timeoutOption: {\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<Option.Option<A>, E, R>\n} = circular.timeoutOption\n\n/**\n * The same as `timeout`, but instead of producing a `None` in the event of\n * timeout, it will produce the specified error.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeoutFail: {\n  <E1>(\n    options: { readonly onTimeout: LazyArg<E1>; readonly duration: Duration.DurationInput }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R>\n  <A, E, R, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly onTimeout: LazyArg<E1>; readonly duration: Duration.DurationInput }\n  ): Effect<A, E | E1, R>\n} = circular.timeoutFail\n\n/**\n * The same as `timeout`, but instead of producing a `None` in the event of\n * timeout, it will produce the specified failure.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeoutFailCause: {\n  <E1>(\n    options: { readonly onTimeout: LazyArg<Cause.Cause<E1>>; readonly duration: Duration.DurationInput }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R>\n  <A, E, R, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly onTimeout: LazyArg<Cause.Cause<E1>>; readonly duration: Duration.DurationInput }\n  ): Effect<A, E | E1, R>\n} = circular.timeoutFailCause\n\n/**\n * Returns an effect that will timeout this effect, returning either the\n * default value if the timeout elapses before the effect has produced a\n * value or returning the result of applying the function `onSuccess` to the\n * success value of the effect.\n *\n * If the timeout elapses without producing a value, the running effect will\n * be safely interrupted.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeoutTo: {\n  <A, B, B1>(\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B | B1, E, R>\n  <A, E, R, B1, B>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ): Effect<B1 | B, E, R>\n} = circular.timeoutTo\n\n// -------------------------------------------------------------------------------------\n// config\n// -------------------------------------------------------------------------------------\n\n/**\n * Retrieves the default config provider, and passes it to the specified\n * function, which may return an effect that uses the provider to perform some\n * work or compute some value.\n *\n * @since 2.0.0\n * @category config\n */\nexport const configProviderWith: <A, E, R>(f: (configProvider: ConfigProvider) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.configProviderWith\n\n/**\n * Executes the specified workflow with the specified configuration provider.\n *\n * @since 2.0.0\n * @category config\n */\nexport const withConfigProvider: {\n  (value: ConfigProvider): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, value: ConfigProvider): Effect<A, E, R>\n} = defaultServices.withConfigProvider\n\n/**\n * Sets the configuration provider to the specified value and restores it to its original value\n * when the scope is closed.\n *\n * @since 2.0.0\n * @category config\n */\nexport const withConfigProviderScoped: (value: ConfigProvider) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withConfigProviderScoped\n\n// -------------------------------------------------------------------------------------\n// context\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const context: <R>() => Effect<Context.Context<R>, never, R> = core.context\n\n/**\n * Accesses the context of the effect.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWith: <R, A>(f: (context: Context.Context<R>) => A) => Effect<A, never, R> = effect.contextWith\n\n/**\n * Effectually accesses the context of the effect.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWithEffect: <R0, A, E, R>(\n  f: (context: Context.Context<R0>) => Effect<A, E, R>\n) => Effect<A, E, R | R0> = core.contextWithEffect\n\n/**\n * Provides some of the context required to run this effect,\n * leaving the remainder `R0`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const mapInputContext: {\n  <R0, R>(f: (context: Context.Context<R0>) => Context.Context<R>): <A, E>(self: Effect<A, E, R>) => Effect<A, E, R0>\n  <A, E, R, R0>(self: Effect<A, E, R>, f: (context: Context.Context<R0>) => Context.Context<R>): Effect<A, E, R0>\n} = core.mapInputContext\n\n/**\n * Splits the context into two parts, providing one part using the\n * specified layer/context/runtime and leaving the remainder `R0`\n *\n * @since 2.0.0\n * @category context\n */\nexport const provide: {\n  <ROut, E2, RIn>(\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, RIn | Exclude<R, ROut>>\n  <R2>(context: Context.Context<R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, R2>>\n  <R2>(runtime: Runtime.Runtime<R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, R2>>\n  <A, E, R, ROut, E2, RIn>(\n    self: Effect<A, E, R>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): Effect<A, E | E2, RIn | Exclude<R, ROut>>\n  <A, E, R, R2>(self: Effect<A, E, R>, context: Context.Context<R2>): Effect<A, E, Exclude<R, R2>>\n  <A, E, R, R2>(self: Effect<A, E, R>, runtime: Runtime.Runtime<R2>): Effect<A, E, Exclude<R, R2>>\n} = layer.effect_provide\n\n/**\n * Provides the effect with the single service it requires. If the effect\n * requires more than one service use `provide` instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideService: {\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect<A, E, R>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n} = effect.provideService\n\n/**\n * Provides the effect with the single service it requires. If the effect\n * requires more than one service use `provide` instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideServiceEffect: {\n  <T extends Context.Tag<any, any>, E1, R1>(\n    tag: T,\n    effect: Effect<Context.Tag.Service<T>, E1, R1>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R1 | Exclude<R, Context.Tag.Identifier<T>>>\n  <A, E, R, T extends Context.Tag<any, any>, E1, R1>(\n    self: Effect<A, E, R>,\n    tag: T,\n    effect: Effect<Context.Tag.Service<T>, E1, R1>\n  ): Effect<A, E | E1, R1 | Exclude<R, Context.Tag.Identifier<T>>>\n} = effect.provideServiceEffect\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceFunction: <T extends Effect<any, any, any>, Args extends Array<any>, A>(\n  getService: T,\n  f: (_: Effect.Success<T>) => (...args: Args) => A\n) => (...args: Args) => Effect<A, Effect.Error<T>, Effect.Context<T>> = effect.serviceFunction\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceFunctionEffect: <T extends Effect<any, any, any>, Args extends Array<any>, A, E, R>(\n  getService: T,\n  f: (_: Effect.Success<T>) => (...args: Args) => Effect<A, E, R>\n) => (...args: Args) => Effect<A, E | Effect.Error<T>, R | Effect.Context<T>> = effect.serviceFunctionEffect\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceFunctions: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  [k in keyof S as S[k] extends (...args: Array<any>) => Effect<any, any, any> ? k : never]: S[k] extends\n    (...args: infer Args) => Effect<infer A, infer E, infer R> ? (...args: Args) => Effect<A, SE | E, SR | R>\n    : never\n} = effect.serviceFunctions as any\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceConstants: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect<infer A, infer E, infer R> ? Effect<A, SE | E, SR | R>\n    : Effect<S[k], SE, SR>\n} = effect.serviceConstants\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceMembers: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  functions: {\n    [k in keyof S as S[k] extends (...args: Array<any>) => Effect<any, any, any> ? k : never]: S[k] extends\n      (...args: infer Args) => Effect<infer A, infer E, infer R> ? (...args: Args) => Effect<A, SE | E, SR | R>\n      : never\n  }\n  constants: {\n    [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect<infer A, infer E, infer R> ? Effect<A, SE | E, SR | R>\n      : Effect<S[k], SE, SR>\n  }\n} = effect.serviceMembers as any\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceOption: <I, S>(tag: Context.Tag<I, S>) => Effect<Option.Option<S>> = effect.serviceOption\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceOptional: <I, S>(tag: Context.Tag<I, S>) => Effect<S, Cause.NoSuchElementException> =\n  effect.serviceOptional\n\n/**\n * Updates the service with the required service entry.\n *\n * @since 2.0.0\n * @category context\n */\nexport const updateService: {\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R | Context.Tag.Identifier<T>>\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): Effect<A, E, R | Context.Tag.Identifier<T>>\n} = effect.updateService\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Effect<{}> = effect.Do\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  <N extends string, A extends object, B, E2, R2>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Effect<B, E2, R2>\n  ): <E1, R1>(self: Effect<A, E1, R1>) => Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E2 | E1, R2 | R1>\n  <A extends object, N extends string, E1, R1, B, E2, R2>(\n    self: Effect<A, E1, R1>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Effect<B, E2, R2>\n  ): Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E1 | E2, R1 | R2>\n} = effect.bind\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  <N extends string>(name: N): <A, E, R>(self: Effect<A, E, R>) => Effect<{ [K in N]: A }, E, R>\n  <A, E, R, N extends string>(self: Effect<A, E, R>, name: N): Effect<{ [K in N]: A }, E, R>\n} = effect.bindTo\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): <E, R>(self: Effect<A, E, R>) => Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n  <A extends object, N extends string, E, R, B>(\n    self: Effect<A, E, R>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n} = effect.let_\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindTo}\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect whose failure and success have been lifted into an\n * `Either`. The resulting effect cannot fail, because the failure case has\n * been exposed as part of the `Either` success case.\n *\n * This method is useful for recovering from effects that may fail.\n *\n * The error parameter of the returned `Effect` is `never`, since it is\n * guaranteed the effect does not model failure.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const either: <A, E, R>(self: Effect<A, E, R>) => Effect<Either.Either<A, E>, never, R> = core.either\n\n/**\n * @since 2.0.0\n * @category conversions\n */\nexport const exit: <A, E, R>(self: Effect<A, E, R>) => Effect<Exit.Exit<A, E>, never, R> = core.exit\n\n/**\n * Returns an effect that will succeed or fail the specified `Deferred` based\n * upon the result of the effect. Also synchronizes interruption, so if the\n * provided effect is interrupted, the specified `Deferred` will be interrupted\n * as well.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const intoDeferred: {\n  <A, E>(deferred: Deferred.Deferred<A, E>): <R>(self: Effect<A, E, R>) => Effect<boolean, never, R>\n  <A, E, R>(self: Effect<A, E, R>, deferred: Deferred.Deferred<A, E>): Effect<boolean, never, R>\n} = core.intoDeferred\n\n/**\n * Executes this effect, skipping the error but returning optionally the\n * success.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const option: <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, never, R> = effect.option\n\n// -------------------------------------------------------------------------------------\n// filtering & conditionals\n// -------------------------------------------------------------------------------------\n\nconst if_: {\n  <A1, E1, R1, A2, E2, R2>(\n    options: { readonly onTrue: LazyArg<Effect<A1, E1, R1>>; readonly onFalse: LazyArg<Effect<A2, E2, R2>> }\n  ): <E = never, R = never>(self: boolean | Effect<boolean, E, R>) => Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n  <A1, E1, R1, A2, E2, R2, E = never, R = never>(\n    self: boolean | Effect<boolean, E, R>,\n    options: { readonly onTrue: LazyArg<Effect<A1, E1, R1>>; readonly onFalse: LazyArg<Effect<A2, E2, R2>> }\n  ): Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n} = core.if_\n\nexport {\n  /**\n   * Runs `onTrue` if the result of `self` is `true` and `onFalse` otherwise.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  if_ as if\n}\n\n/**\n * Filter the specified effect with the provided function, dying with specified\n * defect if the predicate fails.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrDie: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orDieWith: (a: NoInfer<A>) => unknown\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  <A>(\n    predicate: Predicate<NoInfer<A>>,\n    orDieWith: (a: NoInfer<A>) => unknown\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R, B extends A>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orDieWith: (a: A) => unknown\n  ): Effect<B, E, R>\n  <A, E, R>(self: Effect<A, E, R>, predicate: Predicate<A>, orDieWith: (a: A) => unknown): Effect<A, E, R>\n} = effect.filterOrDie\n\n/**\n * Filter the specified effect with the provided function, dying with specified\n * message if the predicate fails.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrDieMessage: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>,\n    message: string\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  <A>(predicate: Predicate<NoInfer<A>>, message: string): <E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R, B extends A>(self: Effect<A, E, R>, refinement: Refinement<A, B>, message: string): Effect<B, E, R>\n  <A, E, R>(self: Effect<A, E, R>, predicate: Predicate<A>, message: string): Effect<A, E, R>\n} = effect.filterOrDieMessage\n\n/**\n * Filters the specified effect with the provided function returning the value\n * of the effect if it is successful, otherwise returns the value of `orElse`.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrElse: {\n  <A, B extends A, C, E2, R2>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orElse: (a: NoInfer<A>) => Effect<C, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B | C, E2 | E, R2 | R>\n  <A, B, E2, R2>(\n    predicate: Predicate<NoInfer<A>>,\n    orElse: (a: NoInfer<A>) => Effect<B, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A | B, E2 | E, R2 | R>\n  <A, E, R, B extends A, C, E2, R2>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orElse: (a: A) => Effect<C, E2, R2>\n  ): Effect<B | C, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Effect<A, E, R>,\n    predicate: Predicate<A>,\n    orElse: (a: A) => Effect<B, E2, R2>\n  ): Effect<A | B, E | E2, R | R2>\n} = effect.filterOrElse\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n * Let's explore this concept through an example:\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * // Define a user interface\n * interface User {\n *   readonly name: string\n * }\n *\n * // Assume an asynchronous authentication function\n * declare const auth: () => Promise<User | null>\n *\n * const program = pipe(\n *   Effect.promise(() => auth()),\n *   Effect.filterOrFail(\n *     // Define a guard to narrow down the type\n *     (user): user is User => user !== null,\n *     () => new Error(\"Unauthorized\")\n *   ),\n *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n * )\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrFail: {\n  <A, B extends A, E2>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E2 | E, R>\n  <A, E2>(\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R>\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, Cause.NoSuchElementException | E, R>\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Effect<A, E, R>) => Effect<A, Cause.NoSuchElementException | E, R>\n  <A, E, R, B extends A, E2>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => E2\n  ): Effect<B, E | E2, R>\n  <A, E, R, E2>(self: Effect<A, E, R>, predicate: Predicate<A>, orFailWith: (a: A) => E2): Effect<A, E | E2, R>\n  <A, E, R, B extends A>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>\n  ): Effect<B, E | Cause.NoSuchElementException, R>\n  <A, E, R>(self: Effect<A, E, R>, predicate: Predicate<A>): Effect<A, E | Cause.NoSuchElementException, R>\n} = effect.filterOrFail\n\n/**\n * The moral equivalent of `if (!p) exp`.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const unless: {\n  (condition: LazyArg<boolean>): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  <A, E, R>(self: Effect<A, E, R>, condition: LazyArg<boolean>): Effect<Option.Option<A>, E, R>\n} = effect.unless\n\n/**\n * The moral equivalent of `if (!p) exp` when `p` has side-effects.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const unlessEffect: {\n  <E2, R2>(\n    condition: Effect<boolean, E2, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E2 | E, R2 | R>\n  <A, E, R, E2, R2>(self: Effect<A, E, R>, condition: Effect<boolean, E2, R2>): Effect<Option.Option<A>, E | E2, R | R2>\n} = effect.unlessEffect\n\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const when: {\n  (condition: LazyArg<boolean>): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  <A, E, R>(self: Effect<A, E, R>, condition: LazyArg<boolean>): Effect<Option.Option<A>, E, R>\n} = effect.when\n\n/**\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const whenEffect: {\n  <E, R>(\n    condition: Effect<boolean, E, R>\n  ): <A, E2, R2>(effect: Effect<A, E2, R2>) => Effect<Option.Option<A>, E | E2, R | R2>\n  <A, E2, R2, E, R>(self: Effect<A, E2, R2>, condition: Effect<boolean, E, R>): Effect<Option.Option<A>, E2 | E, R2 | R>\n} = core.whenEffect\n\n/**\n * Executes this workflow when value of the specified `FiberRef` satisfies the\n * predicate.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const whenFiberRef: {\n  <S>(\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate<S>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[S, Option.Option<A>], E, R>\n  <A, E, R, S>(\n    self: Effect<A, E, R>,\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate<S>\n  ): Effect<[S, Option.Option<A>], E, R>\n} = effect.whenFiberRef\n\n/**\n * Executes this workflow when the value of the `Ref` satisfies the predicate.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const whenRef: {\n  <S>(ref: Ref.Ref<S>, predicate: Predicate<S>): <A, E, R>(self: Effect<A, E, R>) => Effect<[S, Option.Option<A>], E, R>\n  <A, E, R, S>(self: Effect<A, E, R>, ref: Ref.Ref<S>, predicate: Predicate<S>): Effect<[S, Option.Option<A>], E, R>\n} = effect.whenRef\n\n// -------------------------------------------------------------------------------------\n// sequencing\n// -------------------------------------------------------------------------------------\n\n/**\n * This function is a pipeable operator that maps over an `Effect` value,\n * flattening the result of the mapping function into a new `Effect` value.\n *\n * @param f - The mapping function to apply to the `Effect` value.\n * This function must return another `Effect` value.\n *\n * @returns A new `Effect` value that is the result of flattening the\n * mapped `Effect` value.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <A, B, E1, R1>(f: (a: A) => Effect<B, E1, R1>): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R1 | R>\n  <A, E, R, B, E1, R1>(self: Effect<A, E, R>, f: (a: A) => Effect<B, E1, R1>): Effect<B, E | E1, R | R1>\n} = core.flatMap\n\n/**\n * Executes a sequence of two actions, typically two `Effect`s, where the second action can depend on the result of the first action.\n *\n * The `that` action can take various forms:\n *\n * - a value\n * - a function returning a value\n * - a promise\n * - a function returning a promise\n * - an effect\n * - a function returning an effect\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(1))), 1)\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => s.length))), 2)\n *\n * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen(Promise.resolve(1)))), 1)\n * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Promise.resolve(s.length)))), 2)\n *\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(Effect.succeed(1)))), 1)\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Effect.succeed(s.length)))), 2)\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const andThen: {\n  <A, X>(\n    f: (a: NoInfer<A>) => X\n  ): <E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n} = core.andThen\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <A, E1, R1, E, R>(self: Effect<Effect<A, E1, R1>, E, R>) => Effect<A, E | E1, R | R1> =\n  core.flatten\n\n/**\n * Returns an effect that races this effect with all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const raceAll: <Eff extends Effect<any, any, any>>(\n  all: Iterable<Eff>\n) => Effect<Effect.Success<Eff>, Effect.Error<Eff>, Effect.Context<Eff>> = fiberRuntime.raceAll\n\n/**\n * Returns an effect that races this effect with the specified effect,\n * returning the first successful `A` from the faster side. If one effect\n * succeeds, the other will be interrupted. If neither succeeds, then the\n * effect will fail with some error.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const race: {\n  <A2, E2, R2>(that: Effect<A2, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: Effect<A2, E2, R2>): Effect<A | A2, E | E2, R | R2>\n} = fiberRuntime.race\n\n/**\n * Returns an effect that races this effect with the specified effect,\n * yielding the first result to complete, whether by success or failure. If\n * neither effect completes, then the composed effect will not complete.\n *\n * WARNING: The raced effect will safely interrupt the \"loser\", but will not\n * resume until the loser has been cleanly terminated. If early return is\n * desired, then instead of performing `l raceFirst r`, perform\n * `l.disconnect raceFirst r.disconnect`, which disconnects left and right\n * interrupt signal, allowing a fast return, with interruption performed\n * in the background.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const raceFirst: {\n  <A2, E2, R2>(that: Effect<A2, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: Effect<A2, E2, R2>): Effect<A | A2, E | E2, R | R2>\n} = circular.raceFirst\n\n/**\n * Returns an effect that races this effect with the specified effect, calling\n * the specified finisher as soon as one result or the other has been computed.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const raceWith: {\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R1 | R2 | R3 | R>\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    other: Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n} = fiberRuntime.raceWith\n\n/**\n * Summarizes a effect by computing some value before and after execution, and\n * then combining the values to produce a summary, together with the result of\n * execution.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const summarized: {\n  <B, E2, R2, C>(\n    summary: Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[C, A], E2 | E, R2 | R>\n  <A, E, R, B, E2, R2, C>(\n    self: Effect<A, E, R>,\n    summary: Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): Effect<[C, A], E2 | E, R2 | R>\n} = effect.summarized\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const tap: {\n  <A, X>(\n    f: (a: NoInfer<A>) => X\n  ): <E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  <A, X, E1, R1>(\n    f: (a: NoInfer<A>) => Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): <E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<A, E | E1, R | R1>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  <X, E1, R1>(\n    f: Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<A, E | E1, R | R1>\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  <A, E, R, X, E1, R1>(\n    self: Effect<A, E, R>,\n    f: (a: NoInfer<A>) => Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): Effect<A, E | E1, R | R1>\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  <A, E, R, X, E1, R1>(\n    self: Effect<A, E, R>,\n    f: Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): Effect<A, E | E1, R | R1>\n} = core.tap\n\n/**\n * Inspects both success and failure outcomes of an effect, performing different actions based on the result.\n *\n * @example\n * import { Effect, Random, Console } from \"effect\"\n *\n * // Simulate an effect that might fail\n * const task = Effect.filterOrFail(\n *   Random.nextRange(-1, 1),\n *   (n) => n >= 0,\n *   () => \"random number is negative\"\n * )\n *\n * // Define an effect that logs both success and failure outcomes of the 'task'\n * const tapping = Effect.tapBoth(task, {\n *   onFailure: (error) => Console.log(`failure: ${error}`),\n *   onSuccess: (randomNumber) => Console.log(`random number: ${randomNumber}`)\n * })\n *\n * Effect.runFork(tapping)\n * // Example Output:\n * // failure: random number is negative\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapBoth: {\n  <E, X, E2, R2, A, X1, E3, R3>(\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect<X, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect<X1, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A, E | E2 | E3, R2 | R3 | R>\n  <A, E, R, X, E2, R2, X1, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect<X, E2, R2>\n      readonly onSuccess: (a: A) => Effect<X1, E3, R3>\n    }\n  ): Effect<A, E | E2 | E3, R | R2 | R3>\n} = effect.tapBoth\n\n/**\n * Specifically inspects non-recoverable failures or defects in an effect (i.e., one or more `Die` causes).\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // this won't log anything because is not a defect\n * const tapping1 = Effect.tapDefect(task1, (cause) =>\n *   Console.log(`defect: ${cause}`)\n * )\n *\n * Effect.runFork(tapping1)\n * // No Output\n *\n * // Simulate a severe failure in the system by causing a defect with a specific message.\n * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n *   \"Something went wrong\"\n * )\n *\n * // This will only log defects, not errors\n * const tapping2 = Effect.tapDefect(task2, (cause) =>\n *   Console.log(`defect: ${cause}`)\n * )\n *\n * Effect.runFork(tapping2)\n * // Output:\n * // defect: RuntimeException: Something went wrong\n * //   ... stack trace ...\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapDefect: {\n  <X, E2, R2>(\n    f: (cause: Cause.Cause<never>) => Effect<X, E2, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<never>) => Effect<X, E2, R2>\n  ): Effect<A, E | E2, R | R2>\n} = effect.tapDefect\n\n/**\n * Executes an effectful operation to inspect the failure of an effect without altering it.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // Log the error message if the task fails. This function only executes if there is an error,\n * // providing a method to handle or inspect errors without altering the outcome of the original effect.\n * const tapping = Effect.tapError(task, (error) =>\n *   Console.log(`expected error: ${error}`)\n * )\n *\n * Effect.runFork(tapping)\n * // Output:\n * // expected error: NetworkError\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapError: {\n  <E, X, E2, R2>(\n    f: (e: NoInfer<E>) => Effect<X, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E2, R2 | R>\n  <A, E, R, X, E2, R2>(self: Effect<A, E, R>, f: (e: E) => Effect<X, E2, R2>): Effect<A, E | E2, R | R2>\n} = effect.tapError\n\n/**\n * Specifically inspects a failure with a particular tag, allowing focused error handling.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * class NetworkError {\n *   readonly _tag = \"NetworkError\"\n *   constructor(readonly statusCode: number) {}\n * }\n * class ValidationError {\n *   readonly _tag = \"ValidationError\"\n *   constructor(readonly field: string) {}\n * }\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task: Effect.Effect<number, NetworkError | ValidationError> =\n *   Effect.fail(new NetworkError(504))\n *\n * // Apply an error handling function only to errors tagged as \"NetworkError\",\n * // and log the corresponding status code of the error.\n * const tapping = Effect.tapErrorTag(task, \"NetworkError\", (error) =>\n *   Console.log(`expected error: ${error.statusCode}`)\n * )\n *\n * Effect.runFork(tapping)\n * // Output:\n * // expected error: 504\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapErrorTag: {\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E1, R1 | R>\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, A1, E1, R1>(\n    self: Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): Effect<A, E | E1, R | R1>\n} = effect.tapErrorTag\n\n/**\n * Inspects the underlying cause of an effect's failure.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // This will log the cause of any expected error or defect\n * const tapping1 = Effect.tapErrorCause(task1, (cause) =>\n *   Console.log(`error cause: ${cause}`)\n * )\n *\n * Effect.runFork(tapping1)\n * // Output:\n * // error cause: Error: NetworkError\n *\n * // Simulate a severe failure in the system by causing a defect with a specific message.\n * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n *   \"Something went wrong\"\n * )\n *\n * // This will log the cause of any expected error or defect\n * const tapping2 = Effect.tapErrorCause(task2, (cause) =>\n *   Console.log(`error cause: ${cause}`)\n * )\n *\n * Effect.runFork(tapping2)\n * // Output:\n * // error cause: RuntimeException: Something went wrong\n * //   ... stack trace ...\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapErrorCause: {\n  <E, X, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Effect<X, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E2, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect<X, E2, R2>\n  ): Effect<A, E | E2, R | R2>\n} = effect.tapErrorCause\n\n// -------------------------------------------------------------------------------------\n// repetition / recursion\n// -------------------------------------------------------------------------------------\n\n/**\n * Repeats this effect forever (until the first error).\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const forever: <A, E, R>(self: Effect<A, E, R>) => Effect<never, E, R> = effect.forever\n\n/**\n * The `Effect.iterate` function allows you to iterate with an effectful operation. It uses an effectful `body` operation to change the state during each iteration and continues the iteration as long as the `while` function evaluates to `true`:\n *\n * ```ts\n * Effect.iterate(initial, options: { while, body })\n * ```\n *\n * We can think of `Effect.iterate` as equivalent to a `while` loop in JavaScript:\n *\n * ```ts\n * let result = initial\n *\n * while (options.while(result)) {\n *   result = options.body(result)\n * }\n *\n * return result\n * ```\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const iterate: {\n  <A, B extends A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly body: (b: B) => Effect<A, E, R>\n    }\n  ): Effect<A, E, R>\n  <A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Predicate<A>\n      readonly body: (a: A) => Effect<A, E, R>\n    }\n  ): Effect<A, E, R>\n} = effect.iterate\n\n/**\n * The `Effect.loop` function allows you to repeatedly change the state based on an `step` function until a condition given by the `while` function is evaluated to `true`:\n *\n * ```ts\n * Effect.loop(initial, options: { while, step, body })\n * ```\n *\n * It collects all intermediate states in an array and returns it as the final result.\n *\n * We can think of Effect.loop as equivalent to a while loop in JavaScript:\n *\n * ```ts\n * let state = initial\n * const result = []\n *\n * while (options.while(state)) {\n *   result.push(options.body(state))\n *   state = options.step(state)\n * }\n *\n * return result\n * ```\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const loop: {\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect<Array<C>, E, R>\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect<Array<C>, E, R>\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect<C, E, R>\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect<C, E, R>\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n} = effect.loop\n\n/**\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport declare namespace Repeat {\n  /**\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  export type Return<R, E, A, O extends Options<A>> = Effect<\n    (O extends { schedule: Schedule.Schedule<infer Out, infer _I, infer _R> } ? Out\n      : O extends { until: Refinement<A, infer B> } ? B\n      : A),\n    | E\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never),\n    | R\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer R> } ? R : never)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n  > extends infer Z ? Z : never\n\n  /**\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  export interface Options<A> {\n    while?: ((_: A) => boolean | Effect<boolean, any, any>) | undefined\n    until?: ((_: A) => boolean | Effect<boolean, any, any>) | undefined\n    times?: number | undefined\n    schedule?: Schedule.Schedule<any, A, any> | undefined\n  }\n}\n\n/**\n * The `repeat` function returns a new effect that repeats the given effect\n * according to a specified schedule or until the first failure. The scheduled\n * recurrences are in addition to the initial execution, so `Effect.repeat(action,\n * Schedule.once)` executes `action` once initially, and if it succeeds, repeats it\n * an additional time.\n *\n * @example\n * // Success Example\n * import { Effect, Schedule, Console } from \"effect\"\n *\n * const action = Console.log(\"success\")\n * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n * const program = Effect.repeat(action, policy)\n *\n * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n *\n * @example\n * // Failure Example\n * import { Effect, Schedule } from \"effect\"\n *\n * let count = 0\n *\n * // Define an async effect that simulates an action with possible failures\n * const action = Effect.async<string, string>((resume) => {\n *   if (count > 1) {\n *     console.log(\"failure\")\n *     resume(Effect.fail(\"Uh oh!\"))\n *   } else {\n *     count++\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n * const program = Effect.repeat(action, policy)\n *\n * Effect.runPromiseExit(program).then(console.log)\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const repeat: {\n  <O extends Repeat.Options<A>, A>(\n    options: O\n  ): <E, R>(\n    self: Effect<A, E, R>\n  ) => Repeat.Return<R, E, A, O>\n  <B, A, R1>(\n    schedule: Schedule.Schedule<B, A, R1>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R1 | R>\n  <A, E, R, O extends Repeat.Options<A>>(\n    self: Effect<A, E, R>,\n    options: O\n  ): Repeat.Return<R, E, A, O>\n  <A, E, R, B, R1>(self: Effect<A, E, R>, schedule: Schedule.Schedule<B, A, R1>): Effect<B, E, R | R1>\n} = _schedule.repeat_combined\n\n/**\n * The `repeatN` function returns a new effect that repeats the specified effect a\n * given number of times or until the first failure. The repeats are in addition\n * to the initial execution, so `Effect.repeatN(action, 1)` executes `action` once\n * initially and then repeats it one additional time if it succeeds.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * const action = Console.log(\"success\")\n * const program = Effect.repeatN(action, 2)\n *\n * Effect.runPromise(program)\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const repeatN: {\n  (n: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, n: number): Effect<A, E, R>\n} = effect.repeatN\n\n/**\n * The `repeatOrElse` function returns a new effect that repeats the specified\n * effect according to the given schedule or until the first failure. When a\n * failure occurs, the failure value and schedule output are passed to a\n * specified handler. Scheduled recurrences are in addition to the initial\n * execution, so `Effect.repeat(action, Schedule.once)` executes `action` once\n * initially and then repeats it an additional time if it succeeds.\n *\n * @example\n * import { Effect, Schedule } from \"effect\"\n *\n * let count = 0\n *\n * // Define an async effect that simulates an action with possible failures\n * const action = Effect.async<string, string>((resume) => {\n *   if (count > 1) {\n *     console.log(\"failure\")\n *     resume(Effect.fail(\"Uh oh!\"))\n *   } else {\n *     count++\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * const policy = Schedule.addDelay(\n *   Schedule.recurs(2), // Repeat for a maximum of 2 times\n *   () => \"100 millis\" // Add a delay of 100 milliseconds between repetitions\n * )\n *\n * const program = Effect.repeatOrElse(action, policy, () =>\n *   Effect.sync(() => {\n *     console.log(\"orElse\")\n *     return count - 1\n *   })\n * )\n *\n * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const repeatOrElse: {\n  <R2, A, B, E, E2, R3>(\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect<B, E2, R3>\n  ): <R>(self: Effect<A, E, R>) => Effect<B, E2, R2 | R3 | R>\n  <A, E, R, R2, B, E2, R3>(\n    self: Effect<A, E, R>,\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect<B, E2, R3>\n  ): Effect<B, E2, R | R2 | R3>\n} = _schedule.repeatOrElse_Effect\n\n/**\n * Runs this effect according to the specified schedule.\n *\n * See `scheduleFrom` for a variant that allows the schedule's decision to\n * depend on the result of this effect.\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const schedule: {\n  <R2, Out>(schedule: Schedule.Schedule<Out, unknown, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<Out, E, R2 | R>\n  <A, E, R, R2, Out>(self: Effect<A, E, R>, schedule: Schedule.Schedule<Out, unknown, R2>): Effect<Out, E, R | R2>\n} = _schedule.schedule_Effect\n\n/**\n * Runs this effect according to the specified schedule in a new fiber\n * attached to the current scope.\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const scheduleForked: {\n  <Out, R2>(\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<Out, E>, never, Scope.Scope | R2 | R>\n  <A, E, R, Out, R2>(\n    self: Effect<A, E, R>,\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ): Effect<Fiber.RuntimeFiber<Out, E>, never, Scope.Scope | R | R2>\n} = circular.scheduleForked\n\n/**\n * Runs this effect according to the specified schedule starting from the\n * specified input value.\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const scheduleFrom: {\n  <R2, In, Out>(\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ): <E, R>(self: Effect<In, E, R>) => Effect<Out, E, R2 | R>\n  <In, E, R, R2, Out>(\n    self: Effect<In, E, R>,\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ): Effect<Out, E, R | R2>\n} = _schedule.scheduleFrom_Effect\n\n/**\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const whileLoop: <A, E, R>(\n  options: {\n    readonly while: LazyArg<boolean>\n    readonly body: LazyArg<Effect<A, E, R>>\n    readonly step: (a: A) => void\n  }\n) => Effect<void, E, R> = core.whileLoop\n\n// -------------------------------------------------------------------------------------\n// fiber refs\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns a collection of all `FiberRef` values for the fiber running this\n * effect.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const getFiberRefs: Effect<FiberRefs.FiberRefs> = effect.fiberRefs\n\n/**\n * Inherits values from all `FiberRef` instances into current fiber.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const inheritFiberRefs: (childFiberRefs: FiberRefs.FiberRefs) => Effect<void> = effect.inheritFiberRefs\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locally: {\n  <A>(self: FiberRef.FiberRef<A>, value: A): <B, E, R>(use: Effect<B, E, R>) => Effect<B, E, R>\n  <B, E, R, A>(use: Effect<B, E, R>, self: FiberRef.FiberRef<A>, value: A): Effect<B, E, R>\n} = core.fiberRefLocally\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locallyWith: {\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A): <B, E, R>(use: Effect<B, E, R>) => Effect<B, E, R>\n  <B, E, R, A>(use: Effect<B, E, R>, self: FiberRef.FiberRef<A>, f: (a: A) => A): Effect<B, E, R>\n} = core.fiberRefLocallyWith\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locallyScoped: {\n  <A>(value: A): (self: FiberRef.FiberRef<A>) => Effect<void, never, Scope.Scope>\n  <A>(self: FiberRef.FiberRef<A>, value: A): Effect<void, never, Scope.Scope>\n} = fiberRuntime.fiberRefLocallyScoped\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locallyScopedWith: {\n  <A>(f: (a: A) => A): (self: FiberRef.FiberRef<A>) => Effect<void, never, Scope.Scope>\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A): Effect<void, never, Scope.Scope>\n} = fiberRuntime.fiberRefLocallyScopedWith\n\n/**\n * Applies the specified changes to the `FiberRef` values for the fiber\n * running this workflow.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const patchFiberRefs: (patch: FiberRefsPatch.FiberRefsPatch) => Effect<void> = effect.patchFiberRefs\n\n/**\n * Sets the `FiberRef` values for the fiber running this effect to the values\n * in the specified collection of `FiberRef` values.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const setFiberRefs: (fiberRefs: FiberRefs.FiberRefs) => Effect<void> = effect.setFiberRefs\n\n/**\n * Updates the `FiberRef` values for the fiber running this effect using the\n * specified function.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const updateFiberRefs: (\n  f: (fiberId: FiberId.Runtime, fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs\n) => Effect<void> = effect.updateFiberRefs\n\n// -------------------------------------------------------------------------------------\n// getters & folding\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns `true` if this effect is a failure, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters & folding\n */\nexport const isFailure: <A, E, R>(self: Effect<A, E, R>) => Effect<boolean, never, R> = effect.isFailure\n\n/**\n * Returns `true` if this effect is a success, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters & folding\n */\nexport const isSuccess: <A, E, R>(self: Effect<A, E, R>) => Effect<boolean, never, R> = effect.isSuccess\n\n/**\n * Folds over the failure value or the success value to yield an effect that\n * does not fail, but succeeds with the value returned by the left or right\n * function passed to `match`.\n *\n * @since 2.0.0\n * @category getters & folding\n */\nexport const match: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Effect<A2 | A3, never, R>\n} = effect.match\n\n/**\n * @since 2.0.0\n * @category getters & folding\n */\nexport const matchCause: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Effect<A2 | A3, never, R>\n} = core.matchCause\n\n/**\n * @since 2.0.0\n * @category getters & folding\n */\nexport const matchCauseEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = core.matchCauseEffect\n\n/**\n * @since 2.0.0\n * @category getters & folding\n */\nexport const matchEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = core.matchEffect\n\n// -------------------------------------------------------------------------------------\n// logging\n// -------------------------------------------------------------------------------------\n\n/**\n * Logs one or more messages or error causes at the current log level, which is INFO by default.\n * This function allows logging multiple items at once and can include detailed error information using `Cause` instances.\n *\n * To adjust the log level, use the `Logger.withMinimumLogLevel` function.\n *\n * @example\n * import { Cause, Effect } from \"effect\"\n *\n * const program = Effect.log(\n *   \"message1\",\n *   \"message2\",\n *   Cause.die(\"Oh no!\"),\n *   Cause.die(\"Oh uh!\")\n * )\n *\n * // Effect.runFork(program)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=message1 message=message2 cause=\"Error: Oh no!\n * // Error: Oh uh!\"\n *\n * @since 2.0.0\n * @category logging\n */\nexport const log: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.log\n\n/**\n * Logs the specified message or cause at the specified log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logWithLevel = (\n  level: LogLevel,\n  ...message: ReadonlyArray<any>\n): Effect<void> => effect.logWithLevel(level)(...message)\n\n/**\n * Logs the specified message or cause at the Trace log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logTrace: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logTrace\n\n/**\n * Logs the specified messages at the DEBUG log level.\n * DEBUG messages are not shown by default.\n *\n * To view DEBUG messages, adjust the logging settings using\n * `Logger.withMinimumLogLevel` and set the log level to `LogLevel.Debug`.\n *\n * @example\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const program = Effect.logDebug(\"message1\").pipe(Logger.withMinimumLogLevel(LogLevel.Debug))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=DEBUG fiber=#0 message=message1\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logDebug: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logDebug\n\n/**\n * Logs the specified message or cause at the Info log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logInfo: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logInfo\n\n/**\n * Logs the specified message or cause at the Warning log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logWarning: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logWarning\n\n/**\n * Logs the specified message or cause at the Error log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logError: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logError\n\n/**\n * Logs the specified message or cause at the Fatal log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logFatal: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logFatal\n\n/**\n * Adds a log span to your effects, which tracks and logs the duration of\n * operations or tasks. This is useful for performance monitoring and debugging\n * time-sensitive processes.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.sleep(\"1 second\")\n *   yield* Effect.log(\"The job is finished!\")\n * }).pipe(Effect.withLogSpan(\"myspan\"))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=\"The job is finished!\" myspan=1011ms\n *\n * @since 2.0.0\n * @category logging\n */\nexport const withLogSpan: {\n  (label: string): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, label: string): Effect<A, E, R>\n} = effect.withLogSpan\n\n/**\n * Augments log outputs by appending custom annotations to log entries generated\n * within an effect. This function provides a way to add more context and detail\n * to log messages, making them more informative and easier to trace.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"message1\")\n *   yield* Effect.log(\"message2\")\n * }).pipe(Effect.annotateLogs(\"key\", \"value\")) // Annotation as key/value pair\n *\n * // Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n *\n * @since 2.0.0\n * @category logging\n */\nexport const annotateLogs: {\n  (key: string, value: unknown): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  (values: Record<string, unknown>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: unknown): Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, unknown>): Effect<A, E, R>\n} = effect.annotateLogs\n\n/**\n * Applies log annotations with a limited scope, restricting their appearance to\n * specific sections of your effect computations. Use\n * `Effect.annotateLogsScoped` to add metadata to logs that only appear within a\n * defined `Scope`, making it easier to manage context-specific logging.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"no annotations\")\n *   yield* Effect.annotateLogsScoped({ key: \"value\" })\n *   yield* Effect.log(\"message1\") // Annotation is applied to this log\n *   yield* Effect.log(\"message2\") // Annotation is applied to this log\n * }).pipe(Effect.scoped, Effect.andThen(Effect.log(\"no annotations again\")))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=\"no annotations\"\n * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n * // timestamp=... level=INFO fiber=#0 message=\"no annotations again\"\n *\n * @since 3.1.0\n * @category logging\n */\nexport const annotateLogsScoped: {\n  (key: string, value: unknown): Effect<void, never, Scope.Scope>\n  (values: Record<string, unknown>): Effect<void, never, Scope.Scope>\n} = fiberRuntime.annotateLogsScoped\n\n/**\n * Retrieves the log annotations associated with the current scope.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logAnnotations: Effect<HashMap.HashMap<string, unknown>> = effect.logAnnotations\n\n/**\n * Decides wether child fibers will report or not unhandled errors via the logger\n *\n * @since 2.0.0\n * @category logging\n */\nexport const withUnhandledErrorLogLevel: {\n  (level: Option.Option<LogLevel>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, level: Option.Option<LogLevel>): Effect<A, E, R>\n} = core.withUnhandledErrorLogLevel\n\n// -------------------------------------------------------------------------------------\n// alternatives\n// -------------------------------------------------------------------------------------\n\n/**\n * Translates effect failure into death of the fiber, making all failures\n * unchecked and not a part of the type of the effect.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orDie: <A, E, R>(self: Effect<A, E, R>) => Effect<A, never, R> = core.orDie\n\n/**\n * Keeps none of the errors, and terminates the fiber with them, using the\n * specified function to convert the `E` into a `Throwable`.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orDieWith: {\n  <E>(f: (error: E) => unknown): <A, R>(self: Effect<A, E, R>) => Effect<A, never, R>\n  <A, E, R>(self: Effect<A, E, R>, f: (error: E) => unknown): Effect<A, never, R>\n} = core.orDieWith\n\n/**\n * Executes this effect and returns its value, if it succeeds, but otherwise\n * executes the specified effect.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElse: {\n  <A2, E2, R2>(that: LazyArg<Effect<A2, E2, R2>>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: LazyArg<Effect<A2, E2, R2>>): Effect<A2 | A, E2, R2 | R>\n} = core.orElse\n\n/**\n * Executes this effect and returns its value, if it succeeds, but otherwise\n * fails with the specified error.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElseFail: {\n  <E2>(evaluate: LazyArg<E2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect<A, E, R>, evaluate: LazyArg<E2>): Effect<A, E2, R>\n} = effect.orElseFail\n\n/**\n * Executes this effect and returns its value, if it succeeds, but\n * otherwise succeeds with the specified value.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElseSucceed: {\n  <A2>(evaluate: LazyArg<A2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, never, R>\n  <A, E, R, A2>(self: Effect<A, E, R>, evaluate: LazyArg<A2>): Effect<A | A2, never, R>\n} = effect.orElseSucceed\n\n// -------------------------------------------------------------------------------------\n// random\n// -------------------------------------------------------------------------------------\n\n/**\n * Retreives the `Random` service from the context.\n *\n * @since 2.0.0\n * @category random\n */\nexport const random: Effect<Random.Random> = effect.random\n\n/**\n * Retreives the `Random` service from the context and uses it to run the\n * specified workflow.\n *\n * @since 2.0.0\n * @category random\n */\nexport const randomWith: <A, E, R>(f: (random: Random.Random) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.randomWith\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * random service.\n *\n * @since 2.0.0\n * @category random\n */\nexport const withRandom: {\n  <X extends Random.Random>(value: X): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <X extends Random.Random, A, E, R>(effect: Effect<A, E, R>, value: X): Effect<A, E, R>\n} = defaultServices.withRandom\n\n/**\n * Sets the implementation of the random service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const withRandomScoped: <A extends Random.Random>(value: A) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withRandomScoped\n\n// -------------------------------------------------------------------------------------\n// runtime\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that accesses the runtime, which can be used to\n * (unsafely) execute tasks. This is useful for integration with legacy code\n * that must call back into Effect code.\n *\n * @since 2.0.0\n * @category runtime\n */\nexport const runtime: <R = never>() => Effect<Runtime.Runtime<R>, never, R> = _runtime.runtime\n\n/**\n * Retrieves an effect that succeeds with the current runtime flags, which\n * govern behavior and features of the runtime system.\n *\n * @since 2.0.0\n * @category runtime\n */\nexport const getRuntimeFlags: Effect<RuntimeFlags.RuntimeFlags> = core.runtimeFlags\n\n/**\n * @since 2.0.0\n * @category runtime\n */\nexport const patchRuntimeFlags: (patch: RuntimeFlagsPatch.RuntimeFlagsPatch) => Effect<void> = core.updateRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category runtime\n */\nexport const withRuntimeFlagsPatch: {\n  (update: RuntimeFlagsPatch.RuntimeFlagsPatch): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, update: RuntimeFlagsPatch.RuntimeFlagsPatch): Effect<A, E, R>\n} = core.withRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category runtime\n */\nexport const withRuntimeFlagsPatchScoped: (\n  update: RuntimeFlagsPatch.RuntimeFlagsPatch\n) => Effect<void, never, Scope.Scope> = fiberRuntime.withRuntimeFlagsScoped\n\n// -------------------------------------------------------------------------------------\n// metrics\n// -------------------------------------------------------------------------------------\n\n/**\n * Tags each metric in this effect with the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const tagMetrics: {\n  (key: string, value: string): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  (values: Record<string, string>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: string): Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, string>): Effect<A, E, R>\n} = effect.tagMetrics\n\n/**\n * Tags each metric in this effect with the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const labelMetrics: {\n  (labels: Iterable<MetricLabel.MetricLabel>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, labels: Iterable<MetricLabel.MetricLabel>): Effect<A, E, R>\n} = effect.labelMetrics\n\n/**\n * Tags each metric in a scope with a the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const tagMetricsScoped: (key: string, value: string) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.tagMetricsScoped\n\n/**\n * Tags each metric in a scope with a the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const labelMetricsScoped: (\n  labels: ReadonlyArray<MetricLabel.MetricLabel>\n) => Effect<void, never, Scope.Scope> = fiberRuntime.labelMetricsScoped\n\n/**\n * Retrieves the metric labels associated with the current scope.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const metricLabels: Effect<ReadonlyArray<MetricLabel.MetricLabel>> = core.metricLabels\n\n/**\n * @since 2.0.0\n * @category metrics\n */\nexport const withMetric: {\n  <Type, In, Out>(metric: Metric.Metric<Type, In, Out>): <A extends In, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A extends In, E, R, Type, In, Out>(self: Effect<A, E, R>, metric: Metric.Metric<Type, In, Out>): Effect<A, E, R>\n} = effect.withMetric\n\n// -------------------------------------------------------------------------------------\n// semaphore\n// -------------------------------------------------------------------------------------\n\n/**\n * @category semaphore\n * @since 2.0.0\n */\nexport interface Permit {\n  readonly index: number\n}\n\n/**\n * @category semaphore\n * @since 2.0.0\n */\nexport interface Semaphore {\n  /** when the given amount of permits are available, run the effect and release the permits when finished */\n  withPermits(permits: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /** take the given amount of permits, suspending if they are not yet available */\n  take(permits: number): Effect<number>\n  /** release the given amount of permits, and return the resulting available permits */\n  release(permits: number): Effect<number>\n  /** release all the taken permits, and return the resulting available permits */\n  releaseAll: Effect<number>\n}\n\n/**\n * Unsafely creates a new Semaphore\n *\n * @since 2.0.0\n * @category semaphore\n */\nexport const unsafeMakeSemaphore: (permits: number) => Semaphore = circular.unsafeMakeSemaphore\n\n/**\n * Creates a new Semaphore\n *\n * @since 2.0.0\n * @category semaphore\n */\nexport const makeSemaphore: (permits: number) => Effect<Semaphore> = circular.makeSemaphore\n\n// -------------------------------------------------------------------------------------\n// execution\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category execution\n */\nexport const runFork: <A, E>(\n  effect: Effect<A, E>,\n  options?: Runtime.RunForkOptions\n) => Fiber.RuntimeFiber<A, E> = _runtime.unsafeForkEffect\n\n/**\n * @since 2.0.0\n * @category execution\n */\nexport const runCallback: <A, E>(\n  effect: Effect<A, E>,\n  options?: Runtime.RunCallbackOptions<A, E> | undefined\n) => Runtime.Cancel<A, E> = _runtime.unsafeRunEffect\n\n/**\n * Runs an `Effect` workflow, returning a `Promise` which resolves with the\n * result of the workflow or rejects with an error.\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runPromise: <A, E>(\n  effect: Effect<A, E, never>,\n  options?: { readonly signal?: AbortSignal } | undefined\n) => Promise<A> = _runtime.unsafeRunPromiseEffect\n\n/**\n * Runs an `Effect` workflow, returning a `Promise` which resolves with the\n * `Exit` value of the workflow.\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runPromiseExit: <A, E>(\n  effect: Effect<A, E, never>,\n  options?: { readonly signal?: AbortSignal } | undefined\n) => Promise<Exit.Exit<A, E>> = _runtime.unsafeRunPromiseExitEffect\n\n/**\n * @since 2.0.0\n * @category execution\n */\nexport const runSync: <A, E>(effect: Effect<A, E>) => A = _runtime.unsafeRunSyncEffect\n\n/**\n * @since 2.0.0\n * @category execution\n */\nexport const runSyncExit: <A, E>(effect: Effect<A, E>) => Exit.Exit<A, E> = _runtime.unsafeRunSyncExitEffect\n\n// -------------------------------------------------------------------------------------\n// zipping\n// -------------------------------------------------------------------------------------\n\n/**\n * Sequentially zips the this result with the specified result. Combines both\n * `Cause`s when both effects fail.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const validate: {\n  <B, E1, R1>(\n    that: Effect<B, E1, R1>,\n    options?: {\n      /**\n       * @since 2.0.0\n       * @category supervision & fibers\n       */\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    } | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[A, B], E1 | E, R1 | R>\n  <A, E, R, B, E1, R1>(\n    self: Effect<A, E, R>,\n    that: Effect<B, E1, R1>,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<[A, B], E | E1, R | R1>\n} = fiberRuntime.validate\n\n/**\n * Sequentially zips this effect with the specified effect using the specified\n * combiner function. Combines the causes in case both effect fail.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const validateWith: {\n  <B, E1, R1, A, C>(\n    that: Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): <E, R>(self: Effect<A, E, R>) => Effect<C, E1 | E, R1 | R>\n  <A, E, R, B, E1, R1, C>(\n    self: Effect<A, E, R>,\n    that: Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<C, E | E1, R | R1>\n} = fiberRuntime.validateWith\n\n/**\n * The `Effect.zip` function allows you to combine two effects into a single\n * effect. This combined effect yields a tuple containing the results of both\n * input effects once they succeed.\n *\n * Note that `Effect.zip` processes effects sequentially: it first completes the\n * effect on the left and then the effect on the right.\n *\n * If you want to run the effects concurrently, you can use the `concurrent` option.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const task3 = Effect.zip(task1, task2)\n *\n * Effect.runPromise(task3).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n * // [ 1, 'hello' ]\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const task3 = Effect.zip(task1, task2, { concurrent: true })\n *\n * Effect.runPromise(task3).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n * // [ 1, 'hello' ]\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[A, A2], E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<[A, A2], E | E2, R | R2>\n} = fiberRuntime.zipOptions\n\n/**\n * Sequentially run this effect with the specified effect, _discarding_ the result\n * of the second effect (`that`) in the chain.\n *\n * `{ concurrent: true }` can be passed to the options to make it a concurrent execution\n * of both effects instead of sequential.\n *\n * @example\n *\n * import { Effect } from 'effect';\n *\n * const effect = Effect.succeed(\"a message\").pipe(\n *   Effect.zipLeft(Effect.succeed(42)),\n * )\n *\n * assert.deepStrictEqual(Effect.runSync(effect), \"a message\");\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<A, E | E2, R | R2>\n} = fiberRuntime.zipLeftOptions\n\n/**\n * Sequentially run this effect with the specified effect, _returning_ the result\n * of the second effect (`that`) in the chain.\n *\n * `{ concurrent: true }` can be passed to the options to make it a concurrent execution\n * of both effects instead of sequential.\n *\n * @example\n *\n * import { Effect } from 'effect';\n *\n * const effect = Effect.succeed(\"a message\").pipe(\n *   Effect.zipRight(Effect.succeed(42)),\n * )\n *\n * assert.deepStrictEqual(Effect.runSync(effect), 42);\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): Effect<A2, E2 | E, R2 | R>\n} = fiberRuntime.zipRightOptions\n\n/**\n * The `Effect.zipWith` function operates similarly to {@link zip} by combining\n * two effects. However, instead of returning a tuple, it allows you to apply a\n * function to the results of the combined effects, transforming them into a\n * single value\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const task3 = Effect.zipWith(\n *   task1,\n *   task2,\n *   (number, string) => number + string.length\n * )\n *\n * Effect.runPromise(task3).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#3 message=\"task1 done\"\n * // timestamp=... level=INFO fiber=#2 message=\"task2 done\"\n * // 6\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <A2, E2, R2, A, B>(\n    that: Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): Effect<B, E2 | E, R2 | R>\n} = fiberRuntime.zipWithOptions\n\n// -------------------------------------------------------------------------------------\n// applicatives\n// -------------------------------------------------------------------------------------\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  <A, E2, R2>(that: Effect<A, E2, R2>): <B, R, E>(self: Effect<(a: A) => B, E, R>) => Effect<B, E | E2, R | R2>\n  <A, B, E, R, E2, R2>(self: Effect<(a: A) => B, E, R>, that: Effect<A, E2, R2>): Effect<B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, B, E, R, E2, R2>(self: Effect<(a: A) => B, E, R>, that: Effect<A, E2, R2>): Effect<B, E | E2, R | R2> =>\n    zipWith(self, that, (f, a) => f(a))\n)\n// -------------------------------------------------------------------------------------\n// requests & batching\n// -------------------------------------------------------------------------------------\n\n/**\n * @category requests & batching\n * @since 2.0.0\n */\nexport const blocked: <A, E>(blockedRequests: RequestBlock, _continue: Effect<A, E>) => Blocked<A, E> = core.blocked\n\n/**\n * @category requests & batching\n * @since 2.0.0\n */\nexport const runRequestBlock: (blockedRequests: RequestBlock) => Effect<void> = core.runRequestBlock\n\n/**\n * @category requests & batching\n * @since 2.0.0\n */\nexport const step: <A, E, R>(self: Effect<A, E, R>) => Effect<Exit.Exit<A, E> | Blocked<A, E>, never, R> = core.step\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const request: {\n  <A extends Request.Request<any, any>, Ds extends RequestResolver<A> | Effect<RequestResolver<A>, any, any>>(\n    dataSource: Ds\n  ): (\n    self: A\n  ) => Effect<\n    Request.Request.Success<A>,\n    Request.Request.Error<A>,\n    [Ds] extends [Effect<any, any, any>] ? Effect.Context<Ds> : never\n  >\n  <\n    Ds extends RequestResolver<A> | Effect<RequestResolver<A>, any, any>,\n    A extends Request.Request<any, any>\n  >(\n    self: A,\n    dataSource: Ds\n  ): Effect<\n    Request.Request.Success<A>,\n    Request.Request.Error<A>,\n    [Ds] extends [Effect<any, any, any>] ? Effect.Context<Ds> : never\n  >\n} = dual((args) => Request.isRequest(args[0]), query.fromRequest)\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const cacheRequestResult: <A extends Request.Request<any, any>>(\n  request: A,\n  result: Request.Request.Result<A>\n) => Effect<void> = query.cacheRequest\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const withRequestBatching: {\n  (requestBatching: boolean): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, requestBatching: boolean): Effect<A, E, R>\n} = core.withRequestBatching\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const withRequestCaching: {\n  (strategy: boolean): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, strategy: boolean): Effect<A, E, R>\n} = query.withRequestCaching\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const withRequestCache: {\n  (cache: Request.Cache): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, cache: Request.Cache): Effect<A, E, R>\n} = query.withRequestCache\n\n// -------------------------------------------------------------------------------------\n// tracing\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const tracer: Effect<Tracer.Tracer> = effect.tracer\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const tracerWith: <A, E, R>(f: (tracer: Tracer.Tracer) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.tracerWith\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withTracer: {\n  (value: Tracer.Tracer): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, value: Tracer.Tracer): Effect<A, E, R>\n} = defaultServices.withTracer\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withTracerScoped: (value: Tracer.Tracer) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withTracerScoped\n\n/**\n * Disable the tracer for the given Effect.\n *\n * @since 2.0.0\n * @category tracing\n * @example\n * import { Effect } from \"effect\"\n *\n * Effect.succeed(42).pipe(\n *   Effect.withSpan(\"my-span\"),\n *   // the span will not be registered with the tracer\n *   Effect.withTracerEnabled(false)\n * )\n */\nexport const withTracerEnabled: {\n  (enabled: boolean): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, enabled: boolean): Effect<A, E, R>\n} = core.withTracerEnabled\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withTracerTiming: {\n  (enabled: boolean): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, enabled: boolean): Effect<A, E, R>\n} = core.withTracerTiming\n\n/**\n * Adds an annotation to each span in this effect.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const annotateSpans: {\n  (key: string, value: unknown): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  (values: Record<string, unknown>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: unknown): Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, unknown>): Effect<A, E, R>\n} = effect.annotateSpans\n\n/**\n * Adds an annotation to the current span if available\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const annotateCurrentSpan: {\n  (key: string, value: unknown): Effect<void>\n  (values: Record<string, unknown>): Effect<void>\n} = effect.annotateCurrentSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const currentSpan: Effect<Tracer.Span, Cause.NoSuchElementException> = effect.currentSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const currentParentSpan: Effect<Tracer.AnySpan, Cause.NoSuchElementException> = effect.currentParentSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const spanAnnotations: Effect<HashMap.HashMap<string, unknown>> = effect.spanAnnotations\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const spanLinks: Effect<Chunk.Chunk<Tracer.SpanLink>> = effect.spanLinks\n\n/**\n * For all spans in this effect, add a link with the provided span.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const linkSpans: {\n  (\n    span: Tracer.AnySpan,\n    attributes?: Record<string, unknown>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    span: Tracer.AnySpan,\n    attributes?: Record<string, unknown>\n  ): Effect<A, E, R>\n} = effect.linkSpans\n\n/**\n * Create a new span for tracing.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const makeSpan: (\n  name: string,\n  options?: Tracer.SpanOptions\n) => Effect<Tracer.Span> = effect.makeSpan\n\n/**\n * Create a new span for tracing, and automatically close it when the Scope\n * finalizes.\n *\n * The span is not added to the current span stack, so no child spans will be\n * created for it.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const makeSpanScoped: (\n  name: string,\n  options?: Tracer.SpanOptions | undefined\n) => Effect<Tracer.Span, never, Scope.Scope> = fiberRuntime.makeSpanScoped\n\n/**\n * Create a new span for tracing, and automatically close it when the effect\n * completes.\n *\n * The span is not added to the current span stack, so no child spans will be\n * created for it.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const useSpan: {\n  <A, E, R>(name: string, evaluate: (span: Tracer.Span) => Effect<A, E, R>): Effect<A, E, R>\n  <A, E, R>(\n    name: string,\n    options: Tracer.SpanOptions,\n    evaluate: (span: Tracer.Span) => Effect<A, E, R>\n  ): Effect<A, E, R>\n} = effect.useSpan\n\n/**\n * Wraps the effect with a new span for tracing.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n} = effect.withSpan\n\n/**\n * Wraps a function that returns an effect with a new span for tracing.\n *\n * @since 3.2.0\n * @category models\n */\nexport interface FunctionWithSpanOptions {\n  readonly name: string\n  readonly attributes?: Record<string, unknown> | undefined\n  readonly links?: ReadonlyArray<Tracer.SpanLink> | undefined\n  readonly parent?: Tracer.AnySpan | undefined\n  readonly root?: boolean | undefined\n  readonly context?: Context.Context<never> | undefined\n  readonly kind?: Tracer.SpanKind | undefined\n}\n\n/**\n * Wraps a function that returns an effect with a new span for tracing.\n *\n * @since 3.2.0\n * @category tracing\n * @example\n * import { Effect } from \"effect\"\n *\n * const getTodo = Effect.functionWithSpan({\n *   body: (id: number) => Effect.succeed(`Got todo ${id}!`),\n *   options: (id) => ({\n *     name: `getTodo-${id}`,\n *     attributes: { id }\n *   })\n * })\n */\nexport const functionWithSpan: <Args extends Array<any>, Ret extends Effect<any, any, any>>(\n  options: {\n    readonly body: (...args: Args) => Ret\n    readonly options: FunctionWithSpanOptions | ((...args: Args) => FunctionWithSpanOptions)\n    readonly captureStackTrace?: boolean | undefined\n  }\n) => (...args: Args) => Unify.Unify<Ret> = effect.functionWithSpan\n\n/**\n * Wraps the effect with a new span for tracing.\n *\n * The span is ended when the Scope is finalized.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpanScoped: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan> | Scope.Scope>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Effect<A, E, Exclude<R, Tracer.ParentSpan> | Scope.Scope>\n} = fiberRuntime.withSpanScoped\n\n/**\n * Adds the provided span to the current span stack.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withParentSpan: {\n  (span: Tracer.AnySpan): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(self: Effect<A, E, R>, span: Tracer.AnySpan): Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n} = effect.withParentSpan\n\n// -------------------------------------------------------------------------------------\n// optionality\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that errors with `NoSuchElementException` if the value is\n * null or undefined, otherwise succeeds with the value.\n *\n * @since 2.0.0\n * @category optionality\n */\nexport const fromNullable: <A>(value: A) => Effect<NonNullable<A>, Cause.NoSuchElementException> = effect.fromNullable\n\n/**\n * Wraps the success value of this effect with `Option.some`, and maps\n * `Cause.NoSuchElementException` to `Option.none`.\n *\n * @since 2.0.0\n * @category optionality\n */\nexport const optionFromOptional: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<Option.Option<A>, Exclude<E, Cause.NoSuchElementException>, R> = effect.optionFromOptional\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport declare namespace Tag {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface ProhibitedType {\n    Service?: `property \"Service\" is forbidden`\n    Identifier?: `property \"Identifier\" is forbidden`\n    _op?: `property \"_op\" is forbidden`\n    _tag?: `property \"_tag\" is forbidden`\n    of?: `property \"of\" is forbidden`\n    context?: `property \"context\" is forbidden`\n    key?: `property \"key\" is forbidden`\n    stack?: `property \"stack\" is forbidden`\n    name?: `property \"name\" is forbidden`\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type AllowedType = (Record<PropertyKey, any> & ProhibitedType) | string | number | symbol\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Tag: <const Id extends string>(id: Id) => <\n  Self,\n  Type extends Tag.AllowedType\n>() =>\n  & Context.TagClass<Self, Id, Type>\n  & (Type extends Record<PropertyKey, any> ? {\n      [\n        k in keyof Type as Type[k] extends ((...args: [...infer Args]) => infer Ret) ?\n          ((...args: Readonly<Args>) => Ret) extends Type[k] ? k : never\n          : k\n      ]: Type[k] extends (...args: [...infer Args]) => Effect<infer A, infer E, infer R> ?\n        (...args: Readonly<Args>) => Effect<A, E, Self | R>\n        : Type[k] extends (...args: [...infer Args]) => infer A ? (...args: Readonly<Args>) => Effect<A, never, Self>\n        : Type[k] extends Effect<infer A, infer E, infer R> ? Effect<A, E, Self | R>\n        : Effect<Type[k], never, Self>\n    } :\n    {})\n  & {\n    use: <X>(\n      body: (_: Type) => X\n    ) => X extends Effect<infer A, infer E, infer R> ? Effect<A, E, R | Self> : Effect<X, never, Self>\n  } = (id) => () => {\n    const limit = Error.stackTraceLimit\n    Error.stackTraceLimit = 2\n    const creationError = new Error()\n    Error.stackTraceLimit = limit\n    function TagClass() {}\n    Object.setPrototypeOf(TagClass, TagProto)\n    TagClass.key = id\n    Object.defineProperty(TagClass, \"stack\", {\n      get() {\n        return creationError.stack\n      }\n    })\n    const cache = new Map()\n    const done = new Proxy(TagClass, {\n      get(_target: any, prop: any, _receiver) {\n        if (prop === \"use\") {\n          // @ts-expect-error\n          return (body) => core.andThen(TagClass, body)\n        }\n        if (prop in TagClass) {\n          // @ts-expect-error\n          return TagClass[prop]\n        }\n        if (cache.has(prop)) {\n          return cache.get(prop)\n        }\n        const fn = (...args: Array<any>) =>\n          // @ts-expect-error\n          core.andThen(TagClass, (s: any) => {\n            if (typeof s[prop] === \"function\") {\n              // @ts-expect-error\n              cache.set(prop, (...args: Array<any>) => core.andThen(TagClass, (s: any) => s[prop](...args)))\n              return s[prop](...args)\n            }\n            // @ts-expect-error\n            cache.set(prop, core.andThen(TagClass, (s) => s[prop]))\n            return s[prop]\n          })\n        // @ts-expect-error\n        const cn = core.andThen(TagClass, (s) => s[prop])\n        Object.assign(fn, cn)\n        Object.setPrototypeOf(fn, Object.getPrototypeOf(cn))\n        cache.set(prop, fn)\n        return fn\n      }\n    })\n    return done\n  }\n", "import * as Duration from \"../../Duration.js\"\nimport { dual } from \"../../Function.js\"\nimport * as Option from \"../../Option.js\"\nimport type * as Interval from \"../../ScheduleInterval.js\"\n\n/** @internal */\nconst IntervalSymbolKey = \"effect/ScheduleInterval\"\n\n/** @internal */\nexport const IntervalTypeId: Interval.IntervalTypeId = Symbol.for(\n  IntervalSymbolKey\n) as Interval.IntervalTypeId\n\n/** @internal */\nexport const empty: Interval.Interval = {\n  [IntervalTypeId]: IntervalTypeId,\n  startMillis: 0,\n  endMillis: 0\n}\n\n/** @internal */\nexport const make = (startMillis: number, endMillis: number): Interval.Interval => {\n  if (startMillis > endMillis) {\n    return empty\n  }\n  return {\n    [IntervalTypeId]: IntervalTypeId,\n    startMillis,\n    endMillis\n  }\n}\n\n/** @internal */\nexport const lessThan = dual<\n  (that: Interval.Interval) => (self: Interval.Interval) => boolean,\n  (self: Interval.Interval, that: Interval.Interval) => boolean\n>(2, (self, that) => min(self, that) === self)\n\n/** @internal */\nexport const min = dual<\n  (that: Interval.Interval) => (self: Interval.Interval) => Interval.Interval,\n  (self: Interval.Interval, that: Interval.Interval) => Interval.Interval\n>(2, (self, that) => {\n  if (self.endMillis <= that.startMillis) return self\n  if (that.endMillis <= self.startMillis) return that\n  if (self.startMillis < that.startMillis) return self\n  if (that.startMillis < self.startMillis) return that\n  if (self.endMillis <= that.endMillis) return self\n  return that\n})\n\n/** @internal */\nexport const max = dual<\n  (that: Interval.Interval) => (self: Interval.Interval) => Interval.Interval,\n  (self: Interval.Interval, that: Interval.Interval) => Interval.Interval\n>(2, (self, that) => min(self, that) === self ? that : self)\n\n/** @internal */\nexport const isEmpty = (self: Interval.Interval): boolean => {\n  return self.startMillis >= self.endMillis\n}\n\n/** @internal */\nexport const isNonEmpty = (self: Interval.Interval): boolean => {\n  return !isEmpty(self)\n}\n\n/** @internal */\nexport const intersect = dual<\n  (that: Interval.Interval) => (self: Interval.Interval) => Interval.Interval,\n  (self: Interval.Interval, that: Interval.Interval) => Interval.Interval\n>(2, (self, that) => {\n  const start = Math.max(self.startMillis, that.startMillis)\n  const end = Math.min(self.endMillis, that.endMillis)\n  return make(start, end)\n})\n\n/** @internal */\nexport const size = (self: Interval.Interval): Duration.Duration => {\n  return Duration.millis(self.endMillis - self.startMillis)\n}\n\n/** @internal */\nexport const union = dual<\n  (that: Interval.Interval) => (self: Interval.Interval) => Option.Option<Interval.Interval>,\n  (self: Interval.Interval, that: Interval.Interval) => Option.Option<Interval.Interval>\n>(2, (self, that) => {\n  const start = Math.max(self.startMillis, that.startMillis)\n  const end = Math.min(self.endMillis, that.endMillis)\n  return start < end ? Option.none() : Option.some(make(start, end))\n})\n\n/** @internal */\nexport const after = (startMilliseconds: number): Interval.Interval => {\n  return make(startMilliseconds, Number.POSITIVE_INFINITY)\n}\n\n/** @internal */\nexport const before = (endMilliseconds: number): Interval.Interval => {\n  return make(Number.NEGATIVE_INFINITY, endMilliseconds)\n}\n", "/**\n * @since 2.0.0\n */\nimport type * as Duration from \"./Duration.js\"\nimport * as internal from \"./internal/schedule/interval.js\"\nimport type * as Option from \"./Option.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const IntervalTypeId: unique symbol = internal.IntervalTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type IntervalTypeId = typeof IntervalTypeId\n\n/**\n * An `Interval` represents an interval of time. Intervals can encompass all\n * time, or no time at all.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Interval {\n  readonly [IntervalTypeId]: IntervalTypeId\n  readonly startMillis: number\n  readonly endMillis: number\n}\n\n/**\n * Constructs a new interval from the two specified endpoints. If the start\n * endpoint greater than the end endpoint, then a zero size interval will be\n * returned.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (startMillis: number, endMillis: number) => Interval = internal.make\n\n/**\n * An `Interval` of zero-width.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Interval = internal.empty\n\n/**\n * Returns `true` if this `Interval` is less than `that` interval, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThan: {\n  (that: Interval): (self: Interval) => boolean\n  (self: Interval, that: Interval): boolean\n} = internal.lessThan\n\n/**\n * Returns the minimum of two `Interval`s.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const min: {\n  (that: Interval): (self: Interval) => Interval\n  (self: Interval, that: Interval): Interval\n} = internal.min\n\n/**\n * Returns the maximum of two `Interval`s.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const max: {\n  (that: Interval): (self: Interval) => Interval\n  (self: Interval, that: Interval): Interval\n} = internal.max\n\n/**\n * Returns `true` if the specified `Interval` is empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const isEmpty: (self: Interval) => boolean = internal.isEmpty\n\n/**\n * Returns `true` if the specified `Interval` is non-empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const isNonEmpty: (self: Interval) => boolean = internal.isNonEmpty\n\n/**\n * Computes a new `Interval` which is the intersection of this `Interval` and\n * that `Interval`.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const intersect: {\n  (that: Interval): (self: Interval) => Interval\n  (self: Interval, that: Interval): Interval\n} = internal.intersect\n\n/**\n * Calculates the size of the `Interval` as the `Duration` from the start of the\n * interval to the end of the interval.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: (self: Interval) => Duration.Duration = internal.size\n\n/**\n * Computes a new `Interval` which is the union of this `Interval` and that\n * `Interval` as a `Some`, otherwise returns `None` if the two intervals cannot\n * form a union.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const union: {\n  (that: Interval): (self: Interval) => Option.Option<Interval>\n  (self: Interval, that: Interval): Option.Option<Interval>\n} = internal.union\n\n/**\n * Construct an `Interval` that includes all time equal to and after the\n * specified start time.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const after: (startMilliseconds: number) => Interval = internal.after\n\n/**\n * Construct an `Interval` that includes all time equal to and before the\n * specified end time.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const before: (endMilliseconds: number) => Interval = internal.before\n", "import * as Chunk from \"../../Chunk.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport * as Option from \"../../Option.js\"\nimport * as Interval from \"../../ScheduleInterval.js\"\nimport type * as Intervals from \"../../ScheduleIntervals.js\"\nimport { getBugErrorMessage } from \"../errors.js\"\n\n/** @internal */\nconst IntervalsSymbolKey = \"effect/ScheduleIntervals\"\n\n/** @internal */\nexport const IntervalsTypeId: Intervals.IntervalsTypeId = Symbol.for(\n  IntervalsSymbolKey\n) as Intervals.IntervalsTypeId\n\n/** @internal */\nexport const make = (intervals: Chunk.Chunk<Interval.Interval>): Intervals.Intervals => {\n  return {\n    [IntervalsTypeId]: IntervalsTypeId,\n    intervals\n  }\n}\n/** @internal */\nexport const empty: Intervals.Intervals = make(Chunk.empty())\n\n/** @internal */\nexport const fromIterable = (intervals: Iterable<Interval.Interval>): Intervals.Intervals =>\n  Array.from(intervals).reduce(\n    (intervals, interval) => pipe(intervals, union(make(Chunk.of(interval)))),\n    empty\n  )\n\n/** @internal */\nexport const union = dual<\n  (that: Intervals.Intervals) => (self: Intervals.Intervals) => Intervals.Intervals,\n  (self: Intervals.Intervals, that: Intervals.Intervals) => Intervals.Intervals\n>(2, (self, that) => {\n  if (!Chunk.isNonEmpty(that.intervals)) {\n    return self\n  }\n  if (!Chunk.isNonEmpty(self.intervals)) {\n    return that\n  }\n  if (Chunk.headNonEmpty(self.intervals).startMillis < Chunk.headNonEmpty(that.intervals).startMillis) {\n    return unionLoop(\n      Chunk.tailNonEmpty(self.intervals),\n      that.intervals,\n      Chunk.headNonEmpty(self.intervals),\n      Chunk.empty()\n    )\n  }\n  return unionLoop(\n    self.intervals,\n    Chunk.tailNonEmpty(that.intervals),\n    Chunk.headNonEmpty(that.intervals),\n    Chunk.empty()\n  )\n})\n\n/** @internal */\nconst unionLoop = (\n  _self: Chunk.Chunk<Interval.Interval>,\n  _that: Chunk.Chunk<Interval.Interval>,\n  _interval: Interval.Interval,\n  _acc: Chunk.Chunk<Interval.Interval>\n): Intervals.Intervals => {\n  let self = _self\n  let that = _that\n  let interval = _interval\n  let acc = _acc\n  while (Chunk.isNonEmpty(self) || Chunk.isNonEmpty(that)) {\n    if (!Chunk.isNonEmpty(self) && Chunk.isNonEmpty(that)) {\n      if (interval.endMillis < Chunk.headNonEmpty(that).startMillis) {\n        acc = pipe(acc, Chunk.prepend(interval))\n        interval = Chunk.headNonEmpty(that)\n        that = Chunk.tailNonEmpty(that)\n        self = Chunk.empty()\n      } else {\n        interval = Interval.make(interval.startMillis, Chunk.headNonEmpty(that).endMillis)\n        that = Chunk.tailNonEmpty(that)\n        self = Chunk.empty()\n      }\n    } else if (Chunk.isNonEmpty(self) && Chunk.isEmpty(that)) {\n      if (interval.endMillis < Chunk.headNonEmpty(self).startMillis) {\n        acc = pipe(acc, Chunk.prepend(interval))\n        interval = Chunk.headNonEmpty(self)\n        that = Chunk.empty()\n        self = Chunk.tailNonEmpty(self)\n      } else {\n        interval = Interval.make(interval.startMillis, Chunk.headNonEmpty(self).endMillis)\n        that = Chunk.empty()\n        self = Chunk.tailNonEmpty(self)\n      }\n    } else if (Chunk.isNonEmpty(self) && Chunk.isNonEmpty(that)) {\n      if (Chunk.headNonEmpty(self).startMillis < Chunk.headNonEmpty(that).startMillis) {\n        if (interval.endMillis < Chunk.headNonEmpty(self).startMillis) {\n          acc = pipe(acc, Chunk.prepend(interval))\n          interval = Chunk.headNonEmpty(self)\n          self = Chunk.tailNonEmpty(self)\n        } else {\n          interval = Interval.make(interval.startMillis, Chunk.headNonEmpty(self).endMillis)\n          self = Chunk.tailNonEmpty(self)\n        }\n      } else if (interval.endMillis < Chunk.headNonEmpty(that).startMillis) {\n        acc = pipe(acc, Chunk.prepend(interval))\n        interval = Chunk.headNonEmpty(that)\n        that = Chunk.tailNonEmpty(that)\n      } else {\n        interval = Interval.make(interval.startMillis, Chunk.headNonEmpty(that).endMillis)\n        that = Chunk.tailNonEmpty(that)\n      }\n    } else {\n      throw new Error(getBugErrorMessage(\"Intervals.unionLoop\"))\n    }\n  }\n  return make(pipe(acc, Chunk.prepend(interval), Chunk.reverse))\n}\n\n/** @internal */\nexport const intersect = dual<\n  (that: Intervals.Intervals) => (self: Intervals.Intervals) => Intervals.Intervals,\n  (self: Intervals.Intervals, that: Intervals.Intervals) => Intervals.Intervals\n>(2, (self, that) => intersectLoop(self.intervals, that.intervals, Chunk.empty()))\n\n/** @internal */\nconst intersectLoop = (\n  _left: Chunk.Chunk<Interval.Interval>,\n  _right: Chunk.Chunk<Interval.Interval>,\n  _acc: Chunk.Chunk<Interval.Interval>\n): Intervals.Intervals => {\n  let left = _left\n  let right = _right\n  let acc = _acc\n  while (Chunk.isNonEmpty(left) && Chunk.isNonEmpty(right)) {\n    const interval = pipe(Chunk.headNonEmpty(left), Interval.intersect(Chunk.headNonEmpty(right)))\n    const intervals = Interval.isEmpty(interval) ? acc : pipe(acc, Chunk.prepend(interval))\n    if (pipe(Chunk.headNonEmpty(left), Interval.lessThan(Chunk.headNonEmpty(right)))) {\n      left = Chunk.tailNonEmpty(left)\n    } else {\n      right = Chunk.tailNonEmpty(right)\n    }\n    acc = intervals\n  }\n  return make(Chunk.reverse(acc))\n}\n\n/** @internal */\nexport const start = (self: Intervals.Intervals): number => {\n  return pipe(\n    self.intervals,\n    Chunk.head,\n    Option.getOrElse(() => Interval.empty)\n  ).startMillis\n}\n\n/** @internal */\nexport const end = (self: Intervals.Intervals): number => {\n  return pipe(\n    self.intervals,\n    Chunk.head,\n    Option.getOrElse(() => Interval.empty)\n  ).endMillis\n}\n\n/** @internal */\nexport const lessThan = dual<\n  (that: Intervals.Intervals) => (self: Intervals.Intervals) => boolean,\n  (self: Intervals.Intervals, that: Intervals.Intervals) => boolean\n>(2, (self, that) => start(self) < start(that))\n\n/** @internal */\nexport const isNonEmpty = (self: Intervals.Intervals): boolean => {\n  return Chunk.isNonEmpty(self.intervals)\n}\n\n/** @internal */\nexport const max = dual<\n  (that: Intervals.Intervals) => (self: Intervals.Intervals) => Intervals.Intervals,\n  (self: Intervals.Intervals, that: Intervals.Intervals) => Intervals.Intervals\n>(2, (self, that) => lessThan(self, that) ? that : self)\n", "/**\n * @since 2.0.0\n */\nimport type * as Check from \"./Chunk.js\"\nimport * as internal from \"./internal/schedule/intervals.js\"\nimport type * as Interval from \"./ScheduleInterval.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const IntervalsTypeId: unique symbol = internal.IntervalsTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type IntervalsTypeId = typeof IntervalsTypeId\n\n/**\n * An `Intervals` represents a list of several `Interval`s.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Intervals {\n  readonly [IntervalsTypeId]: IntervalsTypeId\n  readonly intervals: Check.Chunk<Interval.Interval>\n}\n\n/**\n * Creates a new `Intervals` from a `List` of `Interval`s.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (intervals: Check.Chunk<Interval.Interval>) => Intervals = internal.make\n\n/**\n * Constructs an empty list of `Interval`s.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Intervals = internal.empty\n\n/**\n * Creates `Intervals` from the specified `Iterable<Interval>`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: (intervals: Iterable<Interval.Interval>) => Intervals = internal.fromIterable\n\n/**\n * Computes the union of this `Intervals` and  that `Intervals`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const union: {\n  (that: Intervals): (self: Intervals) => Intervals\n  (self: Intervals, that: Intervals): Intervals\n} = internal.union\n\n/**\n * Produces the intersection of this `Intervals` and that `Intervals`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const intersect: {\n  (that: Intervals): (self: Intervals) => Intervals\n  (self: Intervals, that: Intervals): Intervals\n} = internal.intersect\n\n/**\n * The start of the earliest interval in the specified `Intervals`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const start: (self: Intervals) => number = internal.start\n\n/**\n * The end of the latest interval in the specified `Intervals`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const end: (self: Intervals) => number = internal.end\n\n/**\n * Returns `true` if the start of this `Intervals` is before the start of that\n * `Intervals`, `false` otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThan: {\n  (that: Intervals): (self: Intervals) => boolean\n  (self: Intervals, that: Intervals): boolean\n} = internal.lessThan\n\n/**\n * Returns `true` if this `Intervals` is non-empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isNonEmpty: (self: Intervals) => boolean = internal.isNonEmpty\n\n/**\n * Returns the maximum of the two `Intervals` (i.e. which has the latest start).\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const max: {\n  (that: Intervals): (self: Intervals) => Intervals\n  (self: Intervals, that: Intervals): Intervals\n} = internal.max\n", "import * as Chunk from \"../../Chunk.js\"\nimport type * as ScheduleDecision from \"../../ScheduleDecision.js\"\nimport type * as Interval from \"../../ScheduleInterval.js\"\nimport * as Intervals from \"../../ScheduleIntervals.js\"\n\n/** @internal */\nexport const OP_CONTINUE = \"Continue\" as const\n\n/** @internal */\nexport type OP_CONTINUE = typeof OP_CONTINUE\n\n/** @internal */\nexport const OP_DONE = \"Done\" as const\n\n/** @internal */\nexport type OP_DONE = typeof OP_DONE\n\n/** @internal */\nexport const _continue = (intervals: Intervals.Intervals): ScheduleDecision.ScheduleDecision => {\n  return {\n    _tag: OP_CONTINUE,\n    intervals\n  }\n}\n\n/** @internal */\nexport const continueWith = (interval: Interval.Interval): ScheduleDecision.ScheduleDecision => {\n  return {\n    _tag: OP_CONTINUE,\n    intervals: Intervals.make(Chunk.of(interval))\n  }\n}\n\n/** @internal */\nexport const done: ScheduleDecision.ScheduleDecision = {\n  _tag: OP_DONE\n}\n\n/** @internal */\nexport const isContinue = (self: ScheduleDecision.ScheduleDecision): self is ScheduleDecision.Continue => {\n  return self._tag === OP_CONTINUE\n}\n\n/** @internal */\nexport const isDone = (self: ScheduleDecision.ScheduleDecision): self is ScheduleDecision.Done => {\n  return self._tag === OP_DONE\n}\n", "/**\n * @since 2.0.0\n */\nimport * as internal from \"./internal/schedule/decision.js\"\nimport type * as Interval from \"./ScheduleInterval.js\"\nimport type * as Intervals from \"./ScheduleIntervals.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type ScheduleDecision = Continue | Done\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Continue {\n  readonly _tag: \"Continue\"\n  readonly intervals: Intervals.Intervals\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Done {\n  readonly _tag: \"Done\"\n}\n\nconst _continue = internal._continue\nexport {\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  _continue as continue\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const continueWith: (interval: Interval.Interval) => ScheduleDecision = internal.continueWith\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const done: ScheduleDecision = internal.done\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isContinue: (self: ScheduleDecision) => self is Continue = internal.isContinue\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isDone: (self: ScheduleDecision) => self is Done = internal.isDone\n", "/**\n * @since 2.0.0\n */\n\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as ExecutionStrategy from \"./ExecutionStrategy.js\"\nimport type * as Exit from \"./Exit.js\"\nimport * as core from \"./internal/core.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ScopeTypeId: unique symbol = core.ScopeTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ScopeTypeId = typeof ScopeTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const CloseableScopeTypeId: unique symbol = core.CloseableScopeTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type CloseableScopeTypeId = typeof CloseableScopeTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Scope extends Pipeable {\n  readonly [ScopeTypeId]: ScopeTypeId\n  readonly strategy: ExecutionStrategy.ExecutionStrategy\n  /**\n   * @internal\n   */\n  fork(strategy: ExecutionStrategy.ExecutionStrategy): Effect.Effect<Scope.Closeable>\n  /**\n   * @internal\n   */\n  addFinalizer(finalizer: Scope.Finalizer): Effect.Effect<void>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface CloseableScope extends Scope, Pipeable {\n  readonly [CloseableScopeTypeId]: CloseableScopeTypeId\n\n  /**\n   * @internal\n   */\n  close(exit: Exit.Exit<unknown, unknown>): Effect.Effect<void>\n}\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const Scope: Context.Tag<Scope, Scope> = fiberRuntime.scopeTag\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Scope {\n  /**\n   * @since 2.0.0\n   * @category model\n   */\n  export type Finalizer = (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>\n  /**\n   * @since 2.0.0\n   * @category model\n   */\n  export type Closeable = CloseableScope\n}\n\n/**\n * Adds a finalizer to this scope. The finalizer is guaranteed to be run when\n * the scope is closed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const addFinalizer: (\n  self: Scope,\n  finalizer: Effect.Effect<unknown>\n) => Effect.Effect<void> = core.scopeAddFinalizer\n\n/**\n * A simplified version of `addFinalizerWith` when the `finalizer` does not\n * depend on the `Exit` value that the scope is closed with.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const addFinalizerExit: (self: Scope, finalizer: Scope.Finalizer) => Effect.Effect<void> =\n  core.scopeAddFinalizerExit\n\n/**\n * Closes a scope with the specified exit value, running all finalizers that\n * have been added to the scope.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const close: (self: CloseableScope, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void> = core.scopeClose\n\n/**\n * Extends the scope of an `Effect` workflow that needs a scope into this\n * scope by providing it to the workflow but not closing the scope when the\n * workflow completes execution. This allows extending a scoped value into a\n * larger scope.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const extend: {\n  (scope: Scope): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope>>\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope): Effect.Effect<A, E, Exclude<R, Scope>>\n} = fiberRuntime.scopeExtend\n\n/**\n * Forks a new scope that is a child of this scope. The child scope will\n * automatically be closed when this scope is closed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const fork: (\n  self: Scope,\n  strategy: ExecutionStrategy.ExecutionStrategy\n) => Effect.Effect<CloseableScope> = core.scopeFork\n\n/**\n * Uses the scope by providing it to an `Effect` workflow that needs a scope,\n * guaranteeing that the scope is closed with the result of that workflow as\n * soon as the workflow completes execution, whether by success, failure, or\n * interruption.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const use: {\n  (scope: CloseableScope): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope>>\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: CloseableScope): Effect.Effect<A, E, Exclude<R, Scope>>\n} = fiberRuntime.scopeUse\n\n/**\n * Creates a Scope where Finalizers will run according to the `ExecutionStrategy`.\n *\n * If an ExecutionStrategy is not provided `sequential` will be used.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (\n  executionStrategy?: ExecutionStrategy.ExecutionStrategy\n) => Effect.Effect<CloseableScope> = fiberRuntime.scopeMake\n", "import type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Cron from \"../Cron.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constVoid, dual, pipe } from \"../Function.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty, type Predicate } from \"../Predicate.js\"\nimport * as Random from \"../Random.js\"\nimport type * as Ref from \"../Ref.js\"\nimport type * as Schedule from \"../Schedule.js\"\nimport * as ScheduleDecision from \"../ScheduleDecision.js\"\nimport * as Interval from \"../ScheduleInterval.js\"\nimport * as Intervals from \"../ScheduleIntervals.js\"\nimport type * as Types from \"../Types.js\"\nimport * as internalCause from \"./cause.js\"\nimport * as effect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as ref from \"./ref.js\"\n\n/** @internal */\nconst ScheduleSymbolKey = \"effect/Schedule\"\n\n/** @internal */\nexport const ScheduleTypeId: Schedule.ScheduleTypeId = Symbol.for(\n  ScheduleSymbolKey\n) as Schedule.ScheduleTypeId\n\n/** @internal */\nexport const isSchedule = (u: unknown): u is Schedule.Schedule<any, any, any> => hasProperty(u, ScheduleTypeId)\n\n/** @internal */\nconst ScheduleDriverSymbolKey = \"effect/ScheduleDriver\"\n\n/** @internal */\nexport const ScheduleDriverTypeId: Schedule.ScheduleDriverTypeId = Symbol.for(\n  ScheduleDriverSymbolKey\n) as Schedule.ScheduleDriverTypeId\n\nconst scheduleVariance = {\n  /* c8 ignore next */\n  _Out: (_: never) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nconst scheduleDriverVariance = {\n  /* c8 ignore next */\n  _Out: (_: never) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\n/** @internal */\nclass ScheduleImpl<S, Out, In, R> implements Schedule.Schedule<Out, In, R> {\n  [ScheduleTypeId] = scheduleVariance\n  constructor(\n    readonly initial: S,\n    readonly step: (\n      now: number,\n      input: In,\n      state: S\n    ) => Effect.Effect<readonly [S, Out, ScheduleDecision.ScheduleDecision], never, R>\n  ) {\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nclass ScheduleDriverImpl<Out, In, R> implements Schedule.ScheduleDriver<Out, In, R> {\n  [ScheduleDriverTypeId] = scheduleDriverVariance\n\n  constructor(\n    readonly schedule: Schedule.Schedule<Out, In, R>,\n    readonly ref: Ref.Ref<readonly [Option.Option<Out>, any]>\n  ) {}\n\n  get state(): Effect.Effect<unknown> {\n    return core.map(ref.get(this.ref), (tuple) => tuple[1])\n  }\n\n  get last(): Effect.Effect<Out, Cause.NoSuchElementException> {\n    return core.flatMap(ref.get(this.ref), ([element, _]) => {\n      switch (element._tag) {\n        case \"None\": {\n          return core.failSync(() => new core.NoSuchElementException())\n        }\n        case \"Some\": {\n          return core.succeed(element.value)\n        }\n      }\n    })\n  }\n\n  get reset(): Effect.Effect<void> {\n    return ref.set(this.ref, [Option.none(), this.schedule.initial])\n  }\n\n  next(input: In): Effect.Effect<Out, Option.Option<never>, R> {\n    return pipe(\n      core.map(ref.get(this.ref), (tuple) => tuple[1]),\n      core.flatMap((state) =>\n        pipe(\n          Clock.currentTimeMillis,\n          core.flatMap((now) =>\n            pipe(\n              core.suspend(() => this.schedule.step(now, input, state)),\n              core.flatMap(([state, out, decision]) => {\n                const setState = ref.set(this.ref, [Option.some(out), state] as const)\n                if (ScheduleDecision.isDone(decision)) {\n                  return core.zipRight(setState, core.fail(Option.none()))\n                }\n                const millis = Intervals.start(decision.intervals) - now\n                if (millis <= 0) {\n                  return core.as(setState, out)\n                }\n                return pipe(\n                  setState,\n                  core.zipRight(effect.sleep(Duration.millis(millis))),\n                  core.as(out)\n                )\n              })\n            )\n          )\n        )\n      )\n    )\n  }\n}\n\n/** @internal */\nexport const makeWithState = <S, In, Out, R = never>(\n  initial: S,\n  step: (\n    now: number,\n    input: In,\n    state: S\n  ) => Effect.Effect<readonly [S, Out, ScheduleDecision.ScheduleDecision], never, R>\n): Schedule.Schedule<Out, In, R> => new ScheduleImpl(initial, step)\n\n/** @internal */\nexport const addDelay = dual<\n  <Out>(\n    f: (out: Out) => Duration.DurationInput\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Duration.DurationInput\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => addDelayEffect(self, (out) => core.sync(() => f(out))))\n\n/** @internal */\nexport const addDelayEffect = dual<\n  <Out, R2>(\n    f: (out: Out) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) =>\n  modifyDelayEffect(self, (out, duration) =>\n    core.map(\n      f(out),\n      (delay) => Duration.sum(duration, Duration.decode(delay))\n    )))\n\n/** @internal */\nexport const andThen = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<\n    Out | Out2,\n    In & In2,\n    R | R2\n  >,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<\n    Out | Out2,\n    In & In2,\n    R | R2\n  >\n>(2, (self, that) => map(andThenEither(self, that), Either.merge))\n\n/** @internal */\nexport const andThenEither = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<Either.Either<Out2, Out>, In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<Either.Either<Out2, Out>, In & In2, R | R2>\n>(2, <Out, In, R, Out2, In2, R2>(\n  self: Schedule.Schedule<Out, In, R>,\n  that: Schedule.Schedule<Out2, In2, R2>\n): Schedule.Schedule<Either.Either<Out2, Out>, In & In2, R | R2> =>\n  makeWithState(\n    [self.initial, that.initial, true as boolean] as const,\n    (now, input, state) =>\n      state[2] ?\n        core.flatMap(self.step(now, input, state[0]), ([lState, out, decision]) => {\n          if (ScheduleDecision.isDone(decision)) {\n            return core.map(that.step(now, input, state[1]), ([rState, out, decision]) =>\n              [\n                [lState, rState, false as boolean] as const,\n                Either.right(out) as Either.Either<Out2, Out>,\n                decision as ScheduleDecision.ScheduleDecision\n              ] as const)\n          }\n          return core.succeed(\n            [\n              [lState, state[1], true as boolean] as const,\n              Either.left(out),\n              decision\n            ] as const\n          )\n        }) :\n        core.map(that.step(now, input, state[1]), ([rState, out, decision]) =>\n          [\n            [state[0], rState, false as boolean] as const,\n            Either.right(out) as Either.Either<Out2, Out>,\n            decision\n          ] as const)\n  ))\n\n/** @internal */\nexport const as = dual<\n  <Out2>(out: Out2) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In, R>,\n  <Out, In, R, Out2>(self: Schedule.Schedule<Out, In, R>, out: Out2) => Schedule.Schedule<Out2, In, R>\n>(2, (self, out) => map(self, () => out))\n\n/** @internal */\nexport const asVoid = <Out, In, R>(\n  self: Schedule.Schedule<Out, In, R>\n): Schedule.Schedule<void, In, R> => map(self, constVoid)\n\n/** @internal */\nexport const bothInOut = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<[Out, Out2], readonly [In, In2], R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<[Out, Out2], readonly [In, In2], R | R2>\n>(2, (self, that) =>\n  makeWithState([self.initial, that.initial], (now, [in1, in2], state) =>\n    core.zipWith(\n      self.step(now, in1, state[0]),\n      that.step(now, in2, state[1]),\n      ([lState, out, lDecision], [rState, out2, rDecision]) => {\n        if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isContinue(rDecision)) {\n          const interval = pipe(lDecision.intervals, Intervals.union(rDecision.intervals))\n          return [\n            [lState, rState],\n            [out, out2],\n            ScheduleDecision.continue(interval)\n          ]\n        }\n        return [[lState, rState], [out, out2], ScheduleDecision.done]\n      }\n    )))\n\n/** @internal */\nexport const check = dual<\n  <In, Out>(\n    test: (input: In, output: Out) => boolean\n  ) => <R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    test: (input: In, output: Out) => boolean\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, test) => checkEffect(self, (input, out) => core.sync(() => test(input, out))))\n\n/** @internal */\nexport const checkEffect = dual<\n  <In, Out, R2>(\n    test: (input: In, output: Out) => Effect.Effect<boolean, never, R2>\n  ) => <R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    test: (input: In, output: Out) => Effect.Effect<boolean, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, test) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(self.step(now, input, state), ([state, out, decision]) => {\n        if (ScheduleDecision.isDone(decision)) {\n          return core.succeed([state, out, ScheduleDecision.done] as const)\n        }\n        return core.map(test(input, out), (cont) =>\n          cont ?\n            [state, out, decision] as const :\n            [state, out, ScheduleDecision.done] as const)\n      })\n  ))\n/** @internal */\nexport const collectAllInputs = <A>(): Schedule.Schedule<Chunk.Chunk<A>, A> => collectAllOutputs(identity<A>())\n\n/** @internal */\nexport const collectAllOutputs = <Out, In, R>(\n  self: Schedule.Schedule<Out, In, R>\n): Schedule.Schedule<Chunk.Chunk<Out>, In, R> =>\n  reduce(self, Chunk.empty<Out>(), (outs, out) => pipe(outs, Chunk.append(out)))\n\n/** @internal */\nexport const collectUntil = <A>(f: Predicate<A>): Schedule.Schedule<Chunk.Chunk<A>, A> =>\n  collectAllOutputs(recurUntil(f))\n\n/** @internal */\nexport const collectUntilEffect = <A, R>(\n  f: (a: A) => Effect.Effect<boolean, never, R>\n): Schedule.Schedule<Chunk.Chunk<A>, A, R> => collectAllOutputs(recurUntilEffect(f))\n\n/** @internal */\nexport const collectWhile = <A>(f: Predicate<A>): Schedule.Schedule<Chunk.Chunk<A>, A> =>\n  collectAllOutputs(recurWhile(f))\n\n/** @internal */\nexport const collectWhileEffect = <A, R>(\n  f: (a: A) => Effect.Effect<boolean, never, R>\n): Schedule.Schedule<Chunk.Chunk<A>, A, R> => collectAllOutputs(recurWhileEffect(f))\n\n/** @internal */\nexport const compose = dual<\n  <Out2, Out, R2>(\n    that: Schedule.Schedule<Out2, Out, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In, R | R2>,\n  <Out, In, R, Out2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, Out, R2>\n  ) => Schedule.Schedule<Out2, In, R | R2>\n>(2, (self, that) =>\n  makeWithState(\n    [self.initial, that.initial] as const,\n    (now, input, state) =>\n      core.flatMap(\n        self.step(now, input, state[0]),\n        ([lState, out, lDecision]) =>\n          core.map(that.step(now, out, state[1]), ([rState, out2, rDecision]) =>\n            ScheduleDecision.isDone(lDecision)\n              ? [[lState, rState] as const, out2, ScheduleDecision.done] as const\n              : ScheduleDecision.isDone(rDecision)\n              ? [[lState, rState] as const, out2, ScheduleDecision.done] as const\n              : [\n                [lState, rState] as const,\n                out2,\n                ScheduleDecision.continue(pipe(lDecision.intervals, Intervals.max(rDecision.intervals)))\n              ] as const)\n      )\n  ))\n\n/** @internal */\nexport const mapInput = dual<\n  <In, In2>(\n    f: (in2: In2) => In\n  ) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In2, R>,\n  <Out, In, R, In2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (in2: In2) => In\n  ) => Schedule.Schedule<Out, In2, R>\n>(2, (self, f) => mapInputEffect(self, (input2) => core.sync(() => f(input2))))\n\n/** @internal */\nexport const mapInputContext = dual<\n  <R0, R>(\n    f: (env0: Context.Context<R0>) => Context.Context<R>\n  ) => <Out, In>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R0>,\n  <Out, In, R, R0>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (env0: Context.Context<R0>) => Context.Context<R>\n  ) => Schedule.Schedule<Out, In, R0>\n>(2, (self, f) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) => core.mapInputContext(self.step(now, input, state), f)\n  ))\n\n/** @internal */\nexport const mapInputEffect = dual<\n  <In2, In, R2>(\n    f: (in2: In2) => Effect.Effect<In, never, R2>\n  ) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In2, R | R2>,\n  <Out, In, R, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (in2: In2) => Effect.Effect<In, never, R2>\n  ) => Schedule.Schedule<Out, In2, R | R2>\n>(2, (self, f) =>\n  makeWithState(self.initial, (now, input2, state) =>\n    core.flatMap(\n      f(input2),\n      (input) => self.step(now, input, state)\n    )))\n\n/** @internal */\nexport const cron = (expression: string | Cron.Cron): Schedule.Schedule<[number, number]> => {\n  const parsed = Cron.isCron(expression) ? Either.right(expression) : Cron.parse(expression)\n  return makeWithState<[boolean, [number, number, number]], unknown, [number, number]>(\n    [true, [Number.MIN_SAFE_INTEGER, 0, 0]],\n    (now, _, [initial, previous]) => {\n      if (now < previous[0]) {\n        return core.succeed([\n          [false, previous],\n          [previous[1], previous[2]],\n          ScheduleDecision.continueWith(Interval.make(previous[1], previous[2]))\n        ])\n      }\n\n      if (Either.isLeft(parsed)) {\n        return core.die(parsed.left)\n      }\n\n      const cron = parsed.right\n      const date = new Date(now)\n\n      let next: number\n      if (initial && Cron.match(cron, date)) {\n        next = now\n      } else {\n        const result = Cron.next(cron, date)\n        next = result.getTime()\n      }\n\n      const start = beginningOfMinute(next)\n      const end = endOfMinute(next)\n      const interval = Interval.make(start, end)\n      return core.succeed([\n        [false, [next, start, end]],\n        [start, end],\n        ScheduleDecision.continueWith(interval)\n      ])\n    }\n  )\n}\n\n/** @internal */\nexport const dayOfMonth = (day: number): Schedule.Schedule<number> => {\n  return makeWithState<[number, number], unknown, number>(\n    [Number.NEGATIVE_INFINITY, 0],\n    (now, _, state) => {\n      if (!Number.isInteger(day) || day < 1 || 31 < day) {\n        return core.dieSync(() =>\n          new core.IllegalArgumentException(\n            `Invalid argument in: dayOfMonth(${day}). Must be in range 1...31`\n          )\n        )\n      }\n      const n = state[1]\n      const initial = n === 0\n      const day0 = nextDayOfMonth(now, day, initial)\n      const start = beginningOfDay(day0)\n      const end = endOfDay(day0)\n      const interval = Interval.make(start, end)\n      return core.succeed(\n        [\n          [end, n + 1],\n          n,\n          ScheduleDecision.continueWith(interval)\n        ]\n      )\n    }\n  )\n}\n\n/** @internal */\nexport const dayOfWeek = (day: number): Schedule.Schedule<number> => {\n  return makeWithState<[number, number], unknown, number>(\n    [Number.MIN_SAFE_INTEGER, 0],\n    (now, _, state) => {\n      if (!Number.isInteger(day) || day < 1 || 7 < day) {\n        return core.dieSync(() =>\n          new core.IllegalArgumentException(\n            `Invalid argument in: dayOfWeek(${day}). Must be in range 1 (Monday)...7 (Sunday)`\n          )\n        )\n      }\n      const n = state[1]\n      const initial = n === 0\n      const day0 = nextDay(now, day, initial)\n      const start = beginningOfDay(day0)\n      const end = endOfDay(day0)\n      const interval = Interval.make(start, end)\n      return core.succeed(\n        [\n          [end, n + 1],\n          n,\n          ScheduleDecision.continueWith(interval)\n        ]\n      )\n    }\n  )\n}\n\n/** @internal */\nexport const delayed = dual<\n  (\n    f: (duration: Duration.Duration) => Duration.DurationInput\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (duration: Duration.Duration) => Duration.DurationInput\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => delayedEffect(self, (duration) => core.sync(() => f(duration))))\n\n/** @internal */\nexport const delayedEffect = dual<\n  <R2>(\n    f: (duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) => modifyDelayEffect(self, (_, delay) => f(delay)))\n\n/** @internal */\nexport const delayedSchedule = <In, R>(\n  schedule: Schedule.Schedule<Duration.Duration, In, R>\n): Schedule.Schedule<Duration.Duration, In, R> => addDelay(schedule, (x) => x)\n\n/** @internal */\nexport const delays = <Out, In, R>(\n  self: Schedule.Schedule<Out, In, R>\n): Schedule.Schedule<Duration.Duration, In, R> =>\n  makeWithState(self.initial, (now, input, state) =>\n    pipe(\n      self.step(now, input, state),\n      core.flatMap((\n        [state, _, decision]\n      ): Effect.Effect<[any, Duration.Duration, ScheduleDecision.ScheduleDecision]> => {\n        if (ScheduleDecision.isDone(decision)) {\n          return core.succeed([state, Duration.zero, decision])\n        }\n        return core.succeed(\n          [\n            state,\n            Duration.millis(Intervals.start(decision.intervals) - now),\n            decision\n          ]\n        )\n      })\n    ))\n\n/** @internal */\nexport const mapBoth = dual<\n  <In2, In, Out, Out2>(\n    options: {\n      readonly onInput: (in2: In2) => In\n      readonly onOutput: (out: Out) => Out2\n    }\n  ) => <R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In2, R>,\n  <Out, In, R, In2, Out2>(\n    self: Schedule.Schedule<Out, In, R>,\n    options: {\n      readonly onInput: (in2: In2) => In\n      readonly onOutput: (out: Out) => Out2\n    }\n  ) => Schedule.Schedule<Out2, In2, R>\n>(2, (self, { onInput, onOutput }) => map(mapInput(self, onInput), onOutput))\n\n/** @internal */\nexport const mapBothEffect = dual<\n  <In2, In, R2, Out, R3, Out2>(\n    options: {\n      readonly onInput: (input: In2) => Effect.Effect<In, never, R2>\n      readonly onOutput: (out: Out) => Effect.Effect<Out2, never, R3>\n    }\n  ) => <R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In2, R | R2 | R3>,\n  <Out, In, R, In2, R2, Out2, R3>(\n    self: Schedule.Schedule<Out, In, R>,\n    options: {\n      readonly onInput: (input: In2) => Effect.Effect<In, never, R2>\n      readonly onOutput: (out: Out) => Effect.Effect<Out2, never, R3>\n    }\n  ) => Schedule.Schedule<Out2, In2, R | R2 | R3>\n>(2, (self, { onInput, onOutput }) => mapEffect(mapInputEffect(self, onInput), onOutput))\n\n/** @internal */\nexport const driver = <Out, In, R>(\n  self: Schedule.Schedule<Out, In, R>\n): Effect.Effect<Schedule.ScheduleDriver<Out, In, R>> =>\n  pipe(\n    ref.make<readonly [Option.Option<Out>, any]>([Option.none(), self.initial]),\n    core.map((ref) => new ScheduleDriverImpl(self, ref))\n  )\n\n/** @internal */\nexport const duration = (\n  durationInput: Duration.DurationInput\n): Schedule.Schedule<Duration.Duration> => {\n  const duration = Duration.decode(durationInput)\n  const durationMillis = Duration.toMillis(duration)\n  return makeWithState(true as boolean, (now, _, state) =>\n    core.succeed(\n      state\n        ? [\n          false,\n          duration,\n          ScheduleDecision.continueWith(Interval.after(now + durationMillis))\n        ] as const\n        : [false, Duration.zero, ScheduleDecision.done] as const\n    ))\n}\n\n/** @internal */\nexport const either = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(2, (self, that) => union(self, that))\n\n/** @internal */\nexport const eitherWith = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(3, (self, that, f) => unionWith(self, that, f))\n\n/** @internal */\nexport const ensuring = dual<\n  <X>(\n    finalizer: Effect.Effect<X>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R, X>(\n    self: Schedule.Schedule<Out, In, R>,\n    finalizer: Effect.Effect<X>\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, finalizer) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(self.step(now, input, state), ([state, out, decision]) =>\n        ScheduleDecision.isDone(decision)\n          ? core.as(finalizer, [state, out, decision as ScheduleDecision.ScheduleDecision] as const)\n          : core.succeed([state, out, decision] as const))\n  ))\n\n/** @internal */\nexport const exponential = (\n  baseInput: Duration.DurationInput,\n  factor = 2.0\n): Schedule.Schedule<Duration.Duration> => {\n  const base = Duration.decode(baseInput)\n  return delayedSchedule(\n    map(forever, (i) => Duration.times(base, Math.pow(factor, i)))\n  )\n}\n\n/** @internal */\nexport const fibonacci = (oneInput: Duration.DurationInput): Schedule.Schedule<Duration.Duration> => {\n  const one = Duration.decode(oneInput)\n  return delayedSchedule(\n    pipe(\n      unfold(\n        [one, one] as const,\n        ([a, b]) => [b, Duration.sum(a, b)] as const\n      ),\n      map((out) => out[0])\n    )\n  )\n}\n\n/** @internal */\nexport const fixed = (intervalInput: Duration.DurationInput): Schedule.Schedule<number> => {\n  const interval = Duration.decode(intervalInput)\n  const intervalMillis = Duration.toMillis(interval)\n  return makeWithState<[Option.Option<[number, number]>, number], unknown, number>(\n    [Option.none(), 0],\n    (now, _, [option, n]) =>\n      core.sync(() => {\n        switch (option._tag) {\n          case \"None\": {\n            return [\n              [Option.some([now, now + intervalMillis]), n + 1],\n              n,\n              ScheduleDecision.continueWith(Interval.after(now + intervalMillis))\n            ]\n          }\n          case \"Some\": {\n            const [startMillis, lastRun] = option.value\n            const runningBehind = now > (lastRun + intervalMillis)\n            const boundary = Equal.equals(interval, Duration.zero)\n              ? interval\n              : Duration.millis(intervalMillis - ((now - startMillis) % intervalMillis))\n            const sleepTime = Equal.equals(boundary, Duration.zero) ? interval : boundary\n            const nextRun = runningBehind ? now : now + Duration.toMillis(sleepTime)\n            return [\n              [Option.some([startMillis, nextRun]), n + 1],\n              n,\n              ScheduleDecision.continueWith(Interval.after(nextRun))\n            ]\n          }\n        }\n      })\n  )\n}\n\n/** @internal */\nexport const fromDelay = (delay: Duration.DurationInput): Schedule.Schedule<Duration.Duration> => duration(delay)\n\n/** @internal */\nexport const fromDelays = (\n  delay: Duration.DurationInput,\n  ...delays: Array<Duration.DurationInput>\n): Schedule.Schedule<Duration.Duration> =>\n  makeWithState(\n    [[delay, ...delays].map((_) => Duration.decode(_)) as Array<Duration.Duration>, true as boolean] as const,\n    (now, _, [durations, cont]) =>\n      core.sync(() => {\n        if (cont) {\n          const x = durations[0]!\n          const interval = Interval.after(now + Duration.toMillis(x))\n          if (durations.length >= 2) {\n            return [\n              [durations.slice(1), true] as const,\n              x,\n              ScheduleDecision.continueWith(interval)\n            ] as const\n          }\n          const y = durations.slice(1)\n          return [\n            [[x, ...y] as Array<Duration.Duration>, false] as const,\n            x,\n            ScheduleDecision.continueWith(interval)\n          ] as const\n        }\n        return [[durations, false] as const, Duration.zero, ScheduleDecision.done] as const\n      })\n  )\n\n/** @internal */\nexport const fromFunction = <A, B>(f: (a: A) => B): Schedule.Schedule<B, A> => map(identity<A>(), f)\n\n/** @internal */\nexport const hourOfDay = (hour: number): Schedule.Schedule<number> =>\n  makeWithState<[number, number], unknown, number>(\n    [Number.NEGATIVE_INFINITY, 0],\n    (now, _, state) => {\n      if (!Number.isInteger(hour) || hour < 0 || 23 < hour) {\n        return core.dieSync(() =>\n          new core.IllegalArgumentException(\n            `Invalid argument in: hourOfDay(${hour}). Must be in range 0...23`\n          )\n        )\n      }\n      const n = state[1]\n      const initial = n === 0\n      const hour0 = nextHour(now, hour, initial)\n      const start = beginningOfHour(hour0)\n      const end = endOfHour(hour0)\n      const interval = Interval.make(start, end)\n      return core.succeed(\n        [\n          [end, n + 1],\n          n,\n          ScheduleDecision.continueWith(interval)\n        ]\n      )\n    }\n  )\n\n/** @internal */\nexport const identity = <A>(): Schedule.Schedule<A, A> =>\n  makeWithState(void 0, (now, input, state) =>\n    core.succeed(\n      [\n        state,\n        input,\n        ScheduleDecision.continueWith(Interval.after(now))\n      ] as const\n    ))\n\n/** @internal */\nexport const intersect = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(2, (self, that) => intersectWith(self, that, Intervals.intersect))\n\n/** @internal */\nexport const intersectWith = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(3, <Env, In, Out, Env2, In2, Out2>(\n  self: Schedule.Schedule<Out, In, Env>,\n  that: Schedule.Schedule<Out2, In2, Env2>,\n  f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n): Schedule.Schedule<[Out, Out2], In & In2, Env | Env2> =>\n  makeWithState<[any, any], In & In2, [Out, Out2], Env | Env2>(\n    [self.initial, that.initial],\n    (now, input: In & In2, state) =>\n      pipe(\n        core.zipWith(\n          self.step(now, input, state[0]),\n          that.step(now, input, state[1]),\n          (a, b) => [a, b] as const\n        ),\n        core.flatMap(([\n          [lState, out, lDecision],\n          [rState, out2, rDecision]\n        ]) => {\n          if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isContinue(rDecision)) {\n            return intersectWithLoop(\n              self,\n              that,\n              input,\n              lState,\n              out,\n              lDecision.intervals,\n              rState,\n              out2,\n              rDecision.intervals,\n              f\n            )\n          }\n          return core.succeed(\n            [\n              [lState, rState],\n              [out, out2],\n              ScheduleDecision.done\n            ]\n          )\n        })\n      )\n  ))\n\n/** @internal */\nconst intersectWithLoop = <State, State1, Env, In, Out, Env1, In1, Out2>(\n  self: Schedule.Schedule<Out, In, Env>,\n  that: Schedule.Schedule<Out2, In1, Env1>,\n  input: In & In1,\n  lState: State,\n  out: Out,\n  lInterval: Intervals.Intervals,\n  rState: State1,\n  out2: Out2,\n  rInterval: Intervals.Intervals,\n  f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n): Effect.Effect<\n  [[State, State1], [Out, Out2], ScheduleDecision.ScheduleDecision],\n  never,\n  Env | Env1\n> => {\n  const combined = f(lInterval, rInterval)\n  if (Intervals.isNonEmpty(combined)) {\n    return core.succeed([\n      [lState, rState],\n      [out, out2],\n      ScheduleDecision.continue(combined)\n    ])\n  }\n\n  if (pipe(lInterval, Intervals.lessThan(rInterval))) {\n    return core.flatMap(self.step(Intervals.end(lInterval), input, lState), ([lState, out, decision]) => {\n      if (ScheduleDecision.isDone(decision)) {\n        return core.succeed([\n          [lState, rState],\n          [out, out2],\n          ScheduleDecision.done\n        ])\n      }\n      return intersectWithLoop(\n        self,\n        that,\n        input,\n        lState,\n        out,\n        decision.intervals,\n        rState,\n        out2,\n        rInterval,\n        f\n      )\n    })\n  }\n  return core.flatMap(that.step(Intervals.end(rInterval), input, rState), ([rState, out2, decision]) => {\n    if (ScheduleDecision.isDone(decision)) {\n      return core.succeed([\n        [lState, rState],\n        [out, out2],\n        ScheduleDecision.done\n      ])\n    }\n    return intersectWithLoop(\n      self,\n      that,\n      input,\n      lState,\n      out,\n      lInterval,\n      rState,\n      out2,\n      decision.intervals,\n      f\n    )\n  })\n}\n\n/** @internal */\nexport const jittered = <Out, In, R>(self: Schedule.Schedule<Out, In, R>): Schedule.Schedule<Out, In, R> =>\n  jitteredWith(self, { min: 0.8, max: 1.2 })\n\n/** @internal */\nexport const jitteredWith = dual<\n  (options: { min?: number | undefined; max?: number | undefined }) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    options: { min?: number | undefined; max?: number | undefined }\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, options) => {\n  const { max, min } = Object.assign({ min: 0.8, max: 1.2 }, options)\n  return delayedEffect(self, (duration) =>\n    core.map(Random.next, (random) => {\n      const d = Duration.toMillis(duration)\n      const jittered = d * min * (1 - random) + d * max * random\n      return Duration.millis(jittered)\n    }))\n})\n\n/** @internal */\nexport const linear = (baseInput: Duration.DurationInput): Schedule.Schedule<Duration.Duration> => {\n  const base = Duration.decode(baseInput)\n  return delayedSchedule(map(forever, (i) => Duration.times(base, i + 1)))\n}\n\n/** @internal */\nexport const map = dual<\n  <Out, Out2>(\n    f: (out: Out) => Out2\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In, R>,\n  <Out, In, R, Out2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Out2\n  ) => Schedule.Schedule<Out2, In, R>\n>(2, (self, f) => mapEffect(self, (out) => core.sync(() => f(out))))\n\n/** @internal */\nexport const mapEffect = dual<\n  <Out, Out2, R2>(\n    f: (out: Out) => Effect.Effect<Out2, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In, R | R2>,\n  <Out, In, R, Out2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<Out2, never, R2>\n  ) => Schedule.Schedule<Out2, In, R | R2>\n>(2, (self, f) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(self.step(now, input, state), ([state, out, decision]) =>\n        core.map(\n          f(out),\n          (out2) => [state, out2, decision] as const\n        ))\n  ))\n\n/** @internal */\nexport const minuteOfHour = (minute: number): Schedule.Schedule<number> =>\n  makeWithState<[number, number], unknown, number>(\n    [Number.MIN_SAFE_INTEGER, 0],\n    (now, _, state) => {\n      if (!Number.isInteger(minute) || minute < 0 || 59 < minute) {\n        return core.dieSync(() =>\n          new core.IllegalArgumentException(\n            `Invalid argument in: minuteOfHour(${minute}). Must be in range 0...59`\n          )\n        )\n      }\n      const n = state[1]\n      const initial = n === 0\n      const minute0 = nextMinute(now, minute, initial)\n      const start = beginningOfMinute(minute0)\n      const end = endOfMinute(minute0)\n      const interval = Interval.make(start, end)\n      return core.succeed(\n        [\n          [end, n + 1],\n          n,\n          ScheduleDecision.continueWith(interval)\n        ]\n      )\n    }\n  )\n\n/** @internal */\nexport const modifyDelay = dual<\n  <Out>(\n    f: (out: Out, duration: Duration.Duration) => Duration.DurationInput\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out, duration: Duration.Duration) => Duration.DurationInput\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => modifyDelayEffect(self, (out, duration) => core.sync(() => f(out, duration))))\n\n/** @internal */\nexport const modifyDelayEffect = dual<\n  <Out, R2>(\n    f: (out: Out, duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out, duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(self.step(now, input, state), ([state, out, decision]) => {\n        if (ScheduleDecision.isDone(decision)) {\n          return core.succeed([state, out, decision] as const)\n        }\n        const intervals = decision.intervals\n        const delay = Interval.size(Interval.make(now, Intervals.start(intervals)))\n        return core.map(f(out, delay), (durationInput) => {\n          const duration = Duration.decode(durationInput)\n          const oldStart = Intervals.start(intervals)\n          const newStart = now + Duration.toMillis(duration)\n          const delta = newStart - oldStart\n          const newEnd = Math.max(0, Intervals.end(intervals) + delta)\n          const newInterval = Interval.make(newStart, newEnd)\n          return [state, out, ScheduleDecision.continueWith(newInterval)] as const\n        })\n      })\n  ))\n\n/** @internal */\nexport const onDecision = dual<\n  <Out, X, R2>(\n    f: (out: Out, decision: ScheduleDecision.ScheduleDecision) => Effect.Effect<X, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, X, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out, decision: ScheduleDecision.ScheduleDecision) => Effect.Effect<X, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(\n        self.step(now, input, state),\n        ([state, out, decision]) => core.as(f(out, decision), [state, out, decision] as const)\n      )\n  ))\n\n/** @internal */\nexport const passthrough = <Out, In, R>(\n  self: Schedule.Schedule<Out, In, R>\n): Schedule.Schedule<In, In, R> =>\n  makeWithState(self.initial, (now, input, state) =>\n    pipe(\n      self.step(now, input, state),\n      core.map(([state, _, decision]) => [state, input, decision] as const)\n    ))\n\n/** @internal */\nexport const provideContext = dual<\n  <R>(\n    context: Context.Context<R>\n  ) => <Out, In>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    context: Context.Context<R>\n  ) => Schedule.Schedule<Out, In>\n>(2, (self, context) =>\n  makeWithState(self.initial, (now, input, state) =>\n    core.provideContext(\n      self.step(now, input, state),\n      context\n    )))\n\n/** @internal */\nexport const provideService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    service: Context.Tag.Service<T>\n  ) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<Out, In, Exclude<R, Context.Tag.Identifier<T>>>,\n  <Out, In, R, T extends Context.Tag<any, any>>(\n    self: Schedule.Schedule<Out, In, R>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ) => Schedule.Schedule<Out, In, Exclude<R, Context.Tag.Identifier<T>>>\n>(3, <Out, In, R, T extends Context.Tag<any, any>>(\n  self: Schedule.Schedule<Out, In, R>,\n  tag: T,\n  service: Context.Tag.Service<T>\n): Schedule.Schedule<Out, In, Exclude<R, Context.Tag.Identifier<T>>> =>\n  makeWithState(self.initial, (now, input, state) =>\n    core.contextWithEffect((env) =>\n      core.provideContext(\n        // @ts-expect-error\n        self.step(now, input, state),\n        Context.add(env, tag, service)\n      )\n    )))\n\n/** @internal */\nexport const recurUntil = <A>(f: Predicate<A>): Schedule.Schedule<A, A> => untilInput(identity<A>(), f)\n\n/** @internal */\nexport const recurUntilEffect = <A, R>(\n  f: (a: A) => Effect.Effect<boolean, never, R>\n): Schedule.Schedule<A, A, R> => untilInputEffect(identity<A>(), f)\n\n/** @internal */\nexport const recurUntilOption = <A, B>(pf: (a: A) => Option.Option<B>): Schedule.Schedule<Option.Option<B>, A> =>\n  untilOutput(map(identity<A>(), pf), Option.isSome)\n\n/** @internal */\nexport const recurUpTo = (\n  durationInput: Duration.DurationInput\n): Schedule.Schedule<Duration.Duration> => {\n  const duration = Duration.decode(durationInput)\n  return whileOutput(elapsed, (elapsed) => Duration.lessThan(elapsed, duration))\n}\n\n/** @internal */\nexport const recurWhile = <A>(f: Predicate<A>): Schedule.Schedule<A, A> => whileInput(identity<A>(), f)\n\n/** @internal */\nexport const recurWhileEffect = <A, R>(\n  f: (a: A) => Effect.Effect<boolean, never, R>\n): Schedule.Schedule<A, A, R> => whileInputEffect(identity<A>(), f)\n\n/** @internal */\nexport const recurs = (n: number): Schedule.Schedule<number> => whileOutput(forever, (out) => out < n)\n\n/** @internal */\nexport const reduce = dual<\n  <Out, Z>(\n    zero: Z,\n    f: (z: Z, out: Out) => Z\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Z, In, R>,\n  <Out, In, R, Z>(\n    self: Schedule.Schedule<Out, In, R>,\n    zero: Z,\n    f: (z: Z, out: Out) => Z\n  ) => Schedule.Schedule<Z, In, R>\n>(3, (self, zero, f) => reduceEffect(self, zero, (z, out) => core.sync(() => f(z, out))))\n\n/** @internal */\nexport const reduceEffect = dual<\n  <Z, Out, R2>(\n    zero: Z,\n    f: (z: Z, out: Out) => Effect.Effect<Z, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Z, In, R | R2>,\n  <Out, In, R, Z, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    zero: Z,\n    f: (z: Z, out: Out) => Effect.Effect<Z, never, R2>\n  ) => Schedule.Schedule<Z, In, R | R2>\n>(3, (self, zero, f) =>\n  makeWithState(\n    [self.initial, zero] as const,\n    (now, input, [s, z]) =>\n      core.flatMap(self.step(now, input, s), ([s, out, decision]) =>\n        ScheduleDecision.isDone(decision)\n          ? core.succeed([[s, z], z, decision as ScheduleDecision.ScheduleDecision] as const)\n          : core.map(f(z, out), (z2) => [[s, z2], z, decision] as const))\n  ))\n\n/** @internal */\nexport const repeatForever = <Env, In, Out>(self: Schedule.Schedule<Out, In, Env>): Schedule.Schedule<Out, In, Env> =>\n  makeWithState(self.initial, (now, input, state) => {\n    const step = (\n      now: number,\n      input: In,\n      state: any\n    ): Effect.Effect<[any, Out, ScheduleDecision.ScheduleDecision], never, Env> =>\n      core.flatMap(\n        self.step(now, input, state),\n        ([state, out, decision]) =>\n          ScheduleDecision.isDone(decision)\n            ? step(now, input, self.initial)\n            : core.succeed([state, out, decision])\n      )\n    return step(now, input, state)\n  })\n\n/** @internal */\nexport const repetitions = <Out, In, R>(self: Schedule.Schedule<Out, In, R>): Schedule.Schedule<number, In, R> =>\n  reduce(self, 0, (n, _) => n + 1)\n\n/** @internal */\nexport const resetAfter = dual<\n  (\n    duration: Duration.DurationInput\n  ) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    duration: Duration.DurationInput\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, durationInput) => {\n  const duration = Duration.decode(durationInput)\n  return pipe(\n    self,\n    intersect(elapsed),\n    resetWhen(([, time]) => Duration.greaterThanOrEqualTo(time, duration)),\n    map((out) => out[0])\n  )\n})\n\n/** @internal */\nexport const resetWhen = dual<\n  <Out>(f: Predicate<Out>) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(self: Schedule.Schedule<Out, In, R>, f: Predicate<Out>) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(self.step(now, input, state), ([state, out, decision]) =>\n        f(out)\n          ? self.step(now, input, self.initial)\n          : core.succeed([state, out, decision] as const))\n  ))\n\n/** @internal */\nexport const run = dual<\n  <In>(\n    now: number,\n    input: Iterable<In>\n  ) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Effect.Effect<Chunk.Chunk<Out>, never, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    now: number,\n    input: Iterable<In>\n  ) => Effect.Effect<Chunk.Chunk<Out>, never, R>\n>(3, (self, now, input) =>\n  pipe(\n    runLoop(self, now, Chunk.fromIterable(input), self.initial, Chunk.empty()),\n    core.map((list) => Chunk.reverse(list))\n  ))\n\n/** @internal */\nconst runLoop = <Env, In, Out>(\n  self: Schedule.Schedule<Out, In, Env>,\n  now: number,\n  inputs: Chunk.Chunk<In>,\n  state: any,\n  acc: Chunk.Chunk<Out>\n): Effect.Effect<Chunk.Chunk<Out>, never, Env> => {\n  if (!Chunk.isNonEmpty(inputs)) {\n    return core.succeed(acc)\n  }\n  const input = Chunk.headNonEmpty(inputs)\n  const nextInputs = Chunk.tailNonEmpty(inputs)\n  return core.flatMap(self.step(now, input, state), ([state, out, decision]) => {\n    if (ScheduleDecision.isDone(decision)) {\n      return core.sync(() => pipe(acc, Chunk.prepend(out)))\n    }\n    return runLoop(\n      self,\n      Intervals.start(decision.intervals),\n      nextInputs,\n      state,\n      Chunk.prepend(acc, out)\n    )\n  })\n}\n\n/** @internal */\nexport const secondOfMinute = (second: number): Schedule.Schedule<number> =>\n  makeWithState<[number, number], unknown, number>(\n    [Number.NEGATIVE_INFINITY, 0],\n    (now, _, state) => {\n      if (!Number.isInteger(second) || second < 0 || 59 < second) {\n        return core.dieSync(() =>\n          new core.IllegalArgumentException(\n            `Invalid argument in: secondOfMinute(${second}). Must be in range 0...59`\n          )\n        )\n      }\n      const n = state[1]\n      const initial = n === 0\n      const second0 = nextSecond(now, second, initial)\n      const start = beginningOfSecond(second0)\n      const end = endOfSecond(second0)\n      const interval = Interval.make(start, end)\n      return core.succeed(\n        [\n          [end, n + 1],\n          n,\n          ScheduleDecision.continueWith(interval)\n        ]\n      )\n    }\n  )\n\n/** @internal */\nexport const spaced = (duration: Duration.DurationInput): Schedule.Schedule<number> => addDelay(forever, () => duration)\n\n/** @internal */\nexport const succeed = <A>(value: A): Schedule.Schedule<A> => map(forever, () => value)\n\n/** @internal */\nexport const sync = <A>(evaluate: LazyArg<A>): Schedule.Schedule<A> => map(forever, evaluate)\n\n/** @internal */\nexport const tapInput = dual<\n  <In2, X, R2>(\n    f: (input: In2) => Effect.Effect<X, never, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In & In2, R | R2>,\n  <Out, In, R, In2, X, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (input: In2) => Effect.Effect<X, never, R2>\n  ) => Schedule.Schedule<Out, In & In2, R | R2>\n>(2, (self, f) =>\n  makeWithState(self.initial, (now, input, state) =>\n    core.zipRight(\n      f(input),\n      self.step(now, input, state)\n    )))\n\n/** @internal */\nexport const tapOutput = dual<\n  <XO extends Out, X, R2, Out>(\n    f: (out: XO) => Effect.Effect<X, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, XO extends Out, X, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: XO) => Effect.Effect<X, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) =>\n  makeWithState(self.initial, (now, input, state) =>\n    core.tap(\n      self.step(now, input, state),\n      ([, out]) => f(out as any)\n    )))\n\n/** @internal */\nexport const unfold = <A>(initial: A, f: (a: A) => A): Schedule.Schedule<A> =>\n  makeWithState(initial, (now, _, state) =>\n    core.sync(() =>\n      [\n        f(state),\n        state,\n        ScheduleDecision.continueWith(Interval.after(now))\n      ] as const\n    ))\n\n/** @internal */\nexport const union = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(2, (self, that) => unionWith(self, that, Intervals.union))\n\n/** @internal */\nexport const unionWith = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(3, (self, that, f) =>\n  makeWithState([self.initial, that.initial], (now, input, state) =>\n    core.zipWith(\n      self.step(now, input, state[0]),\n      that.step(now, input, state[1]),\n      ([lState, l, lDecision], [rState, r, rDecision]) => {\n        if (ScheduleDecision.isDone(lDecision) && ScheduleDecision.isDone(rDecision)) {\n          return [[lState, rState], [l, r], ScheduleDecision.done]\n        }\n        if (ScheduleDecision.isDone(lDecision) && ScheduleDecision.isContinue(rDecision)) {\n          return [\n            [lState, rState],\n            [l, r],\n            ScheduleDecision.continue(rDecision.intervals)\n          ]\n        }\n        if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isDone(rDecision)) {\n          return [\n            [lState, rState],\n            [l, r],\n            ScheduleDecision.continue(lDecision.intervals)\n          ]\n        }\n        if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isContinue(rDecision)) {\n          const combined = f(lDecision.intervals, rDecision.intervals)\n          return [\n            [lState, rState],\n            [l, r],\n            ScheduleDecision.continue(combined)\n          ]\n        }\n        throw new Error(\n          \"BUG: Schedule.unionWith - please report an issue at https://github.com/Effect-TS/effect/issues\"\n        )\n      }\n    )))\n\n/** @internal */\nexport const untilInput = dual<\n  <In>(f: Predicate<In>) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(self: Schedule.Schedule<Out, In, R>, f: Predicate<In>) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => check(self, (input, _) => !f(input)))\n\n/** @internal */\nexport const untilInputEffect = dual<\n  <In, R2>(\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) => checkEffect(self, (input, _) => effect.negate(f(input))))\n\n/** @internal */\nexport const untilOutput = dual<\n  <Out>(f: Predicate<Out>) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(self: Schedule.Schedule<Out, In, R>, f: Predicate<Out>) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => check(self, (_, out) => !f(out)))\n\n/** @internal */\nexport const untilOutputEffect = dual<\n  <Out, R2>(\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) => checkEffect(self, (_, out) => effect.negate(f(out))))\n\n/** @internal */\nexport const upTo = dual<\n  (duration: Duration.DurationInput) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    duration: Duration.DurationInput\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, duration) => zipLeft(self, recurUpTo(duration)))\n\n/** @internal */\nexport const whileInput = dual<\n  <In>(f: Predicate<In>) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(self: Schedule.Schedule<Out, In, R>, f: Predicate<In>) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => check(self, (input, _) => f(input)))\n\n/** @internal */\nexport const whileInputEffect = dual<\n  <In, R2>(\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) => checkEffect(self, (input, _) => f(input)))\n\n/** @internal */\nexport const whileOutput = dual<\n  <Out>(f: Predicate<Out>) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(self: Schedule.Schedule<Out, In, R>, f: Predicate<Out>) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => check(self, (_, out) => f(out)))\n\n/** @internal */\nexport const whileOutputEffect = dual<\n  <Out, R2>(\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) => checkEffect(self, (_, out) => f(out)))\n\n/** @internal */\nexport const windowed = (intervalInput: Duration.DurationInput): Schedule.Schedule<number> => {\n  const interval = Duration.decode(intervalInput)\n  const millis = Duration.toMillis(interval)\n  return makeWithState<[Option.Option<number>, number], unknown, number>(\n    [Option.none(), 0],\n    (now, _, [option, n]) => {\n      switch (option._tag) {\n        case \"None\": {\n          return core.succeed(\n            [\n              [Option.some(now), n + 1],\n              n,\n              ScheduleDecision.continueWith(Interval.after(now + millis))\n            ]\n          )\n        }\n        case \"Some\": {\n          return core.succeed(\n            [\n              [Option.some(option.value), n + 1],\n              n,\n              ScheduleDecision.continueWith(\n                Interval.after(now + (millis - ((now - option.value) % millis)))\n              )\n            ]\n          )\n        }\n      }\n    }\n  )\n}\n\n/** @internal */\nexport const zipLeft = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<Out, In & In2, R | R2>\n>(2, (self, that) => map(intersect(self, that), (out) => out[0]))\n\n/** @internal */\nexport const zipRight = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<Out2, In & In2, R | R2>\n>(2, (self, that) => map(intersect(self, that), (out) => out[1]))\n\n/** @internal */\nexport const zipWith = dual<\n  <Out2, In2, R2, Out, Out3>(\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (out: Out, out2: Out2) => Out3\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out3, In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2, Out3>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (out: Out, out2: Out2) => Out3\n  ) => Schedule.Schedule<Out3, In & In2, R | R2>\n>(3, (self, that, f) => map(intersect(self, that), ([out, out2]) => f(out, out2)))\n\n// -----------------------------------------------------------------------------\n// Seconds\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const beginningOfSecond = (now: number): number => {\n  const date = new Date(now)\n  return new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    0\n  ).getTime()\n}\n\n/** @internal */\nexport const endOfSecond = (now: number): number => {\n  const date = new Date(beginningOfSecond(now))\n  return date.setSeconds(date.getSeconds() + 1)\n}\n\n/** @internal */\nexport const nextSecond = (now: number, second: number, initial: boolean): number => {\n  const date = new Date(now)\n  if (date.getSeconds() === second && initial) {\n    return now\n  }\n  if (date.getSeconds() < second) {\n    return date.setSeconds(second)\n  }\n  // Set seconds to the provided value and add one minute\n  const newDate = new Date(date.setSeconds(second))\n  return newDate.setTime(newDate.getTime() + 1000 * 60)\n}\n\n// -----------------------------------------------------------------------------\n// Minutes\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const beginningOfMinute = (now: number): number => {\n  const date = new Date(now)\n  return new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    date.getMinutes(),\n    0,\n    0\n  ).getTime()\n}\n\n/** @internal */\nexport const endOfMinute = (now: number): number => {\n  const date = new Date(beginningOfMinute(now))\n  return date.setMinutes(date.getMinutes() + 1)\n}\n\n/** @internal */\nexport const nextMinute = (now: number, minute: number, initial: boolean): number => {\n  const date = new Date(now)\n  if (date.getMinutes() === minute && initial) {\n    return now\n  }\n  if (date.getMinutes() < minute) {\n    return date.setMinutes(minute)\n  }\n  // Set minutes to the provided value and add one hour\n  const newDate = new Date(date.setMinutes(minute))\n  return newDate.setTime(newDate.getTime() + 1000 * 60 * 60)\n}\n\n// -----------------------------------------------------------------------------\n// Hours\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const beginningOfHour = (now: number): number => {\n  const date = new Date(now)\n  return new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    0,\n    0,\n    0\n  ).getTime()\n}\n\n/** @internal */\nexport const endOfHour = (now: number): number => {\n  const date = new Date(beginningOfHour(now))\n  return date.setHours(date.getHours() + 1)\n}\n\n/** @internal */\nexport const nextHour = (now: number, hour: number, initial: boolean): number => {\n  const date = new Date(now)\n  if (date.getHours() === hour && initial) {\n    return now\n  }\n  if (date.getHours() < hour) {\n    return date.setHours(hour)\n  }\n  // Set hours to the provided value and add one day\n  const newDate = new Date(date.setHours(hour))\n  return newDate.setTime(newDate.getTime() + 1000 * 60 * 60 * 24)\n}\n\n// -----------------------------------------------------------------------------\n// Days\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const beginningOfDay = (now: number): number => {\n  const date = new Date(now)\n  return new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    0,\n    0,\n    0,\n    0\n  ).getTime()\n}\n\n/** @internal */\nexport const endOfDay = (now: number): number => {\n  const date = new Date(beginningOfDay(now))\n  return date.setDate(date.getDate() + 1)\n}\n\n/** @internal */\nexport const nextDay = (now: number, dayOfWeek: number, initial: boolean): number => {\n  const date = new Date(now)\n  if (date.getDay() === dayOfWeek && initial) {\n    return now\n  }\n  const nextDayOfWeek = (7 + dayOfWeek - date.getDay()) % 7\n  return date.setDate(date.getDate() + (nextDayOfWeek === 0 ? 7 : nextDayOfWeek))\n}\n\n/** @internal */\nexport const nextDayOfMonth = (now: number, day: number, initial: boolean): number => {\n  const date = new Date(now)\n  if (date.getDate() === day && initial) {\n    return now\n  }\n  if (date.getDate() < day) {\n    return date.setDate(day)\n  }\n  return findNextMonth(now, day, 1)\n}\n\n/** @internal */\nexport const findNextMonth = (now: number, day: number, months: number): number => {\n  const d = new Date(now)\n  const tmp1 = new Date(d.setDate(day))\n  const tmp2 = new Date(tmp1.setMonth(tmp1.getMonth() + months))\n  if (tmp2.getDate() === day) {\n    const d2 = new Date(now)\n    const tmp3 = new Date(d2.setDate(day))\n    return tmp3.setMonth(tmp3.getMonth() + months)\n  }\n  return findNextMonth(now, day, months + 1)\n}\n\n// circular with Effect\n\nconst ScheduleDefectTypeId = Symbol.for(\"effect/Schedule/ScheduleDefect\")\nclass ScheduleDefect<E> {\n  readonly [ScheduleDefectTypeId]: typeof ScheduleDefectTypeId\n  constructor(readonly error: E) {\n    this[ScheduleDefectTypeId] = ScheduleDefectTypeId\n  }\n}\nconst isScheduleDefect = <E = unknown>(u: unknown): u is ScheduleDefect<E> => hasProperty(u, ScheduleDefectTypeId)\nconst scheduleDefectWrap = <A, E, R>(self: Effect.Effect<A, E, R>) =>\n  core.catchAll(self, (e) => core.die(new ScheduleDefect(e)))\nconst scheduleDefectRefail = <A, E, R>(self: Effect.Effect<A, E, R>) =>\n  core.catchAllCause(self, (cause) =>\n    Option.match(\n      internalCause.find(\n        cause,\n        (_) => internalCause.isDieType(_) && isScheduleDefect<E>(_.defect) ? Option.some(_.defect) : Option.none()\n      ),\n      {\n        onNone: () => core.failCause(cause),\n        onSome: (error) => core.fail(error.error)\n      }\n    ))\n\n/** @internal */\nexport const repeat_Effect = dual<\n  <R1, A, B>(\n    schedule: Schedule.Schedule<B, A, R1>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R | R1>,\n  <A, E, R, R1, B>(\n    self: Effect.Effect<A, E, R>,\n    schedule: Schedule.Schedule<B, A, R1>\n  ) => Effect.Effect<B, E, R | R1>\n>(2, (self, schedule) => repeatOrElse_Effect(self, schedule, (e, _) => core.fail(e)))\n\n/** @internal */\nexport const repeat_combined = dual<{\n  <O extends Effect.Repeat.Options<A>, A>(\n    options: O\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Repeat.Return<R, E, A, O>\n  <B, A, R1>(\n    schedule: Schedule.Schedule<B, A, R1>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R | R1>\n}, {\n  <A, E, R, O extends Effect.Repeat.Options<A>>(\n    self: Effect.Effect<A, E, R>,\n    options: O\n  ): Effect.Repeat.Return<R, E, A, O>\n  <A, E, R, B, R1>(\n    self: Effect.Effect<A, E, R>,\n    schedule: Schedule.Schedule<B, A, R1>\n  ): Effect.Effect<B, E, R | R1>\n}>(\n  2,\n  (self: Effect.Effect<any, any, any>, options: Effect.Repeat.Options<any> | Schedule.Schedule<any, any, any>) => {\n    if (isSchedule(options)) {\n      return repeat_Effect(self, options)\n    }\n\n    const base = options.schedule ?? passthrough(forever)\n    const withWhile = options.while ?\n      whileInputEffect(base, (a) => {\n        const applied = options.while!(a)\n        if (typeof applied === \"boolean\") {\n          return core.succeed(applied)\n        }\n        return scheduleDefectWrap(applied)\n      }) :\n      base\n    const withUntil = options.until ?\n      untilInputEffect(withWhile, (a) => {\n        const applied = options.until!(a)\n        if (typeof applied === \"boolean\") {\n          return core.succeed(applied)\n        }\n        return scheduleDefectWrap(applied)\n      }) :\n      withWhile\n    const withTimes = options.times ?\n      intersect(withUntil, recurs(options.times)).pipe(map((intersectionPair) => intersectionPair[0])) :\n      withUntil\n\n    return scheduleDefectRefail(repeat_Effect(self, withTimes))\n  }\n)\n\n/** @internal */\nexport const repeatOrElse_Effect = dual<\n  <R2, A, B, E, E2, R3>(\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect.Effect<B, E2, R3>\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E2, R | R2 | R3>,\n  <A, E, R, R2, B, E2, R3>(\n    self: Effect.Effect<A, E, R>,\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect.Effect<B, E2, R3>\n  ) => Effect.Effect<B, E2, R | R2 | R3>\n>(3, (self, schedule, orElse) =>\n  core.flatMap(driver(schedule), (driver) =>\n    core.matchEffect(self, {\n      onFailure: (error) => orElse(error, Option.none()),\n      onSuccess: (value) => repeatOrElseEffectLoop(self, driver, orElse, value)\n    })))\n\n/** @internal */\nconst repeatOrElseEffectLoop = <A, E, R, R1, B, C, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  driver: Schedule.ScheduleDriver<B, A, R1>,\n  orElse: (error: E, option: Option.Option<B>) => Effect.Effect<C, E2, R2>,\n  value: A\n): Effect.Effect<B | C, E2, R | R1 | R2> => {\n  return core.matchEffect(driver.next(value), {\n    onFailure: () => core.orDie(driver.last),\n    onSuccess: (b) =>\n      core.matchEffect(self, {\n        onFailure: (error) => orElse(error, Option.some(b)),\n        onSuccess: (value) => repeatOrElseEffectLoop(self, driver, orElse, value)\n      })\n  })\n}\n\n/** @internal */\nexport const retry_Effect = dual<\n  <B, E, R1>(\n    policy: Schedule.Schedule<B, E, R1>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R | R1>,\n  <A, E, R, B, R1>(\n    self: Effect.Effect<A, E, R>,\n    policy: Schedule.Schedule<B, E, R1>\n  ) => Effect.Effect<A, E, R | R1>\n>(2, (self, policy) => retryOrElse_Effect(self, policy, (e, _) => core.fail(e)))\n\n/** @internal */\nexport const retry_combined: {\n  <E, O extends Effect.Retry.Options<E>>(\n    options: O\n  ): <A, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Retry.Return<R, E, A, O>\n  <B, E, R1>(\n    policy: Schedule.Schedule<B, Types.NoInfer<E>, R1>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R1 | R>\n  <A, E, R, O extends Effect.Retry.Options<E>>(\n    self: Effect.Effect<A, E, R>,\n    options: O\n  ): Effect.Retry.Return<R, E, A, O>\n  <A, E, R, B, R1>(\n    self: Effect.Effect<A, E, R>,\n    policy: Schedule.Schedule<B, E, R1>\n  ): Effect.Effect<A, E, R1 | R>\n} = dual(\n  2,\n  (self: Effect.Effect<any, any, any>, options: Effect.Retry.Options<any> | Schedule.Schedule<any, any, any>) => {\n    if (isSchedule(options)) {\n      return retry_Effect(self, options)\n    }\n\n    const base = options.schedule ?? forever\n    const withWhile = options.while ?\n      whileInputEffect(base, (e) => {\n        const applied = options.while!(e)\n        if (typeof applied === \"boolean\") {\n          return core.succeed(applied)\n        }\n        return scheduleDefectWrap(applied)\n      }) :\n      base\n    const withUntil = options.until ?\n      untilInputEffect(withWhile, (e) => {\n        const applied = options.until!(e)\n        if (typeof applied === \"boolean\") {\n          return core.succeed(applied)\n        }\n        return scheduleDefectWrap(applied)\n      }) :\n      withWhile\n    const withTimes = options.times ?\n      intersect(withUntil, recurs(options.times)) :\n      withUntil\n    return scheduleDefectRefail(retry_Effect(self, withTimes))\n  }\n)\n\n/** @internal */\nexport const retryOrElse_Effect = dual<\n  <A1, E, R1, A2, E2, R2>(\n    policy: Schedule.Schedule<A1, Types.NoInfer<E>, R1>,\n    orElse: (e: Types.NoInfer<E>, out: A1) => Effect.Effect<A2, E2, R2>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A2, E2, R | R1 | R2>,\n  <A, E, R, A1, R1, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    policy: Schedule.Schedule<A1, Types.NoInfer<E>, R1>,\n    orElse: (e: Types.NoInfer<E>, out: A1) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A | A2, E2, R | R1 | R2>\n>(3, (self, policy, orElse) =>\n  core.flatMap(\n    driver(policy),\n    (driver) => retryOrElse_EffectLoop(self, driver, orElse)\n  ))\n\n/** @internal */\nconst retryOrElse_EffectLoop = <A, E, R, R1, A1, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  driver: Schedule.ScheduleDriver<A1, E, R1>,\n  orElse: (e: E, out: A1) => Effect.Effect<A2, E2, R2>\n): Effect.Effect<A | A2, E2, R | R1 | R2> => {\n  return core.catchAll(\n    self,\n    (e) =>\n      core.matchEffect(driver.next(e), {\n        onFailure: () =>\n          pipe(\n            driver.last,\n            core.orDie,\n            core.flatMap((out) => orElse(e, out))\n          ),\n        onSuccess: () => retryOrElse_EffectLoop(self, driver, orElse)\n      })\n  )\n}\n\n/** @internal */\nexport const schedule_Effect = dual<\n  <R2, Out>(\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Out, E, R | R2>,\n  <A, E, R, R2, Out>(\n    self: Effect.Effect<A, E, R>,\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ) => Effect.Effect<Out, E, R | R2>\n>(2, <A, E, R, R2, Out>(\n  self: Effect.Effect<A, E, R>,\n  schedule: Schedule.Schedule<Out, unknown, R2>\n) => scheduleFrom_Effect(self, void 0, schedule))\n\n/** @internal */\nexport const scheduleFrom_Effect = dual<\n  <R2, In, Out>(\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ) => <E, R>(self: Effect.Effect<In, E, R>) => Effect.Effect<Out, E, R | R2>,\n  <In, E, R, R2, Out>(\n    self: Effect.Effect<In, E, R>,\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ) => Effect.Effect<Out, E, R | R2>\n>(3, (self, initial, schedule) =>\n  core.flatMap(\n    driver(schedule),\n    (driver) => scheduleFrom_EffectLoop(self, initial, driver)\n  ))\n\n/** @internal */\nconst scheduleFrom_EffectLoop = <In, E, R, R2, Out>(\n  self: Effect.Effect<In, E, R>,\n  initial: In,\n  driver: Schedule.ScheduleDriver<Out, In, R2>\n): Effect.Effect<Out, E, R | R2> =>\n  core.matchEffect(driver.next(initial), {\n    onFailure: () => core.orDie(driver.last),\n    onSuccess: () => core.flatMap(self, (a) => scheduleFrom_EffectLoop(self, a, driver))\n  })\n\n/** @internal */\nexport const count: Schedule.Schedule<number> = unfold(0, (n) => n + 1)\n\n/** @internal */\nexport const elapsed: Schedule.Schedule<Duration.Duration> = makeWithState(\n  Option.none() as Option.Option<number>,\n  (now, _, state) => {\n    switch (state._tag) {\n      case \"None\": {\n        return core.succeed(\n          [\n            Option.some(now),\n            Duration.zero,\n            ScheduleDecision.continueWith(Interval.after(now))\n          ] as const\n        )\n      }\n      case \"Some\": {\n        return core.succeed(\n          [\n            Option.some(state.value),\n            Duration.millis(now - state.value),\n            ScheduleDecision.continueWith(Interval.after(now))\n          ] as const\n        )\n      }\n    }\n  }\n)\n\n/** @internal */\nexport const forever: Schedule.Schedule<number> = unfold(0, (n) => n + 1)\n\n/** @internal */\nexport const once: Schedule.Schedule<void> = asVoid(recurs(1))\n\n/** @internal */\nexport const stop: Schedule.Schedule<void> = asVoid(recurs(0))\n", "import type * as Cause from \"../../Cause.js\"\nimport type * as Deferred from \"../../Deferred.js\"\nimport * as Duration from \"../../Duration.js\"\nimport type * as Effect from \"../../Effect.js\"\nimport * as Equal from \"../../Equal.js\"\nimport type { Equivalence } from \"../../Equivalence.js\"\nimport * as Exit from \"../../Exit.js\"\nimport type * as Fiber from \"../../Fiber.js\"\nimport * as FiberId from \"../../FiberId.js\"\nimport type * as FiberRefsPatch from \"../../FiberRefsPatch.js\"\nimport type { LazyArg } from \"../../Function.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport * as MutableHashMap from \"../../MutableHashMap.js\"\nimport * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport * as Predicate from \"../../Predicate.js\"\nimport * as Readable from \"../../Readable.js\"\nimport type * as Ref from \"../../Ref.js\"\nimport type * as Schedule from \"../../Schedule.js\"\nimport { currentScheduler } from \"../../Scheduler.js\"\nimport type * as Scope from \"../../Scope.js\"\nimport type * as Supervisor from \"../../Supervisor.js\"\nimport type * as Synchronized from \"../../SynchronizedRef.js\"\nimport * as internalCause from \"../cause.js\"\nimport * as effect from \"../core-effect.js\"\nimport * as core from \"../core.js\"\nimport * as executionStrategy from \"../executionStrategy.js\"\nimport * as internalFiber from \"../fiber.js\"\nimport * as fiberRuntime from \"../fiberRuntime.js\"\nimport { globalScope } from \"../fiberScope.js\"\nimport * as internalRef from \"../ref.js\"\nimport * as _schedule from \"../schedule.js\"\nimport * as supervisor from \"../supervisor.js\"\n\n/** @internal */\nclass Semaphore {\n  public waiters = new Set<() => void>()\n  public taken = 0\n\n  constructor(readonly permits: number) {}\n\n  get free() {\n    return this.permits - this.taken\n  }\n\n  readonly take = (n: number): Effect.Effect<number> =>\n    core.async<number>((resume) => {\n      if (this.free < n) {\n        const observer = () => {\n          if (this.free < n) {\n            return\n          }\n          this.waiters.delete(observer)\n          this.taken += n\n          resume(core.succeed(n))\n        }\n        this.waiters.add(observer)\n        return core.sync(() => {\n          this.waiters.delete(observer)\n        })\n      }\n      this.taken += n\n      return resume(core.succeed(n))\n    })\n\n  readonly updateTaken = (f: (n: number) => number): Effect.Effect<number> =>\n    core.withFiberRuntime((fiber) => {\n      this.taken = f(this.taken)\n      if (this.waiters.size > 0) {\n        fiber.getFiberRef(currentScheduler).scheduleTask(() => {\n          const iter = this.waiters.values()\n          let item = iter.next()\n          while (item.done === false && this.free > 0) {\n            item.value()\n            item = iter.next()\n          }\n        }, fiber.getFiberRef(core.currentSchedulingPriority))\n      }\n      return core.succeed(this.free)\n    })\n\n  readonly release = (n: number): Effect.Effect<number> => this.updateTaken((taken) => taken - n)\n\n  readonly releaseAll: Effect.Effect<number> = this.updateTaken((_) => 0)\n\n  readonly withPermits = (n: number) => <A, E, R>(self: Effect.Effect<A, E, R>) =>\n    core.uninterruptibleMask((restore) =>\n      core.flatMap(\n        restore(this.take(n)),\n        (permits) => fiberRuntime.ensuring(restore(self), this.release(permits))\n      )\n    )\n}\n\n/** @internal */\nexport const unsafeMakeSemaphore = (permits: number): Semaphore => new Semaphore(permits)\n\n/** @internal */\nexport const makeSemaphore = (permits: number) => core.sync(() => unsafeMakeSemaphore(permits))\n\n/** @internal */\nexport const awaitAllChildren = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  ensuringChildren(self, fiberRuntime.fiberAwaitAll)\n\n/** @internal */\nexport const cached: {\n  (\n    timeToLive: Duration.DurationInput\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Effect.Effect<A, E>, never, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    timeToLive: Duration.DurationInput\n  ): Effect.Effect<Effect.Effect<A, E>, never, R>\n} = dual(\n  2,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    timeToLive: Duration.DurationInput\n  ): Effect.Effect<Effect.Effect<A, E>, never, R> =>\n    core.map(cachedInvalidateWithTTL(self, timeToLive), (tuple) => tuple[0])\n)\n\n/** @internal */\nexport const cachedInvalidateWithTTL: {\n  (timeToLive: Duration.DurationInput): <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[Effect.Effect<A, E>, Effect.Effect<void>], never, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    timeToLive: Duration.DurationInput\n  ): Effect.Effect<[Effect.Effect<A, E>, Effect.Effect<void>], never, R>\n} = dual(\n  2,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    timeToLive: Duration.DurationInput\n  ): Effect.Effect<[Effect.Effect<A, E>, Effect.Effect<void>], never, R> => {\n    const duration = Duration.decode(timeToLive)\n    return core.flatMap(\n      core.context<R>(),\n      (env) =>\n        core.map(\n          makeSynchronized<Option.Option<readonly [number, Deferred.Deferred<A, E>]>>(Option.none()),\n          (cache) =>\n            [\n              core.provideContext(getCachedValue(self, duration, cache), env),\n              invalidateCache(cache)\n            ] as [Effect.Effect<A, E>, Effect.Effect<void>]\n        )\n    )\n  }\n)\n\n/** @internal */\nconst computeCachedValue = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  timeToLive: Duration.DurationInput,\n  start: number\n): Effect.Effect<Option.Option<[number, Deferred.Deferred<A, E>]>, never, R> => {\n  const timeToLiveMillis = Duration.toMillis(Duration.decode(timeToLive))\n  return pipe(\n    core.deferredMake<A, E>(),\n    core.tap((deferred) => core.intoDeferred(self, deferred)),\n    core.map((deferred) => Option.some([start + timeToLiveMillis, deferred]))\n  )\n}\n\n/** @internal */\nconst getCachedValue = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  timeToLive: Duration.DurationInput,\n  cache: Synchronized.SynchronizedRef<Option.Option<readonly [number, Deferred.Deferred<A, E>]>>\n): Effect.Effect<A, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    pipe(\n      effect.clockWith((clock) => clock.currentTimeMillis),\n      core.flatMap((time) =>\n        updateSomeAndGetEffectSynchronized(cache, (option) => {\n          switch (option._tag) {\n            case \"None\": {\n              return Option.some(computeCachedValue(self, timeToLive, time))\n            }\n            case \"Some\": {\n              const [end] = option.value\n              return end - time <= 0\n                ? Option.some(computeCachedValue(self, timeToLive, time))\n                : Option.none()\n            }\n          }\n        })\n      ),\n      core.flatMap((option) =>\n        Option.isNone(option) ?\n          core.dieMessage(\n            \"BUG: Effect.cachedInvalidate - please report an issue at https://github.com/Effect-TS/effect/issues\"\n          ) :\n          restore(core.deferredAwait(option.value[1]))\n      )\n    )\n  )\n\n/** @internal */\nconst invalidateCache = <A, E>(\n  cache: Synchronized.SynchronizedRef<Option.Option<readonly [number, Deferred.Deferred<A, E>]>>\n): Effect.Effect<void> => internalRef.set(cache, Option.none())\n\n/** @internal */\nexport const ensuringChild = dual<\n  <X, R2>(\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect.Effect<X, never, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A, E, R | R2>,\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect.Effect<X, never, R2>\n  ) => Effect.Effect<A, E, R | R2>\n>(2, (self, f) => ensuringChildren(self, (children) => f(fiberRuntime.fiberAll(children))))\n\n/** @internal */\nexport const ensuringChildren = dual<\n  <X, R2>(\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect.Effect<X, never, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R | R2>,\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect.Effect<X, never, R2>\n  ) => Effect.Effect<A, E, R | R2>\n>(2, (self, children) =>\n  core.flatMap(supervisor.track, (supervisor) =>\n    pipe(\n      supervised(self, supervisor),\n      fiberRuntime.ensuring(core.flatMap(supervisor.value, children))\n    )))\n\n/** @internal */\nexport const forkAll: {\n  (\n    options?: {\n      readonly discard?: false | undefined\n    }\n  ): <Eff extends Effect.Effect<any, any, any>>(\n    effects: Iterable<Eff>\n  ) => Effect.Effect<\n    Fiber.Fiber<Array<Effect.Effect.Success<Eff>>, Effect.Effect.Error<Eff>>,\n    never,\n    Effect.Effect.Context<Eff>\n  >\n  (options: {\n    readonly discard: true\n  }): <Eff extends Effect.Effect<any, any, any>>(\n    effects: Iterable<Eff>\n  ) => Effect.Effect<void, never, Effect.Effect.Context<Eff>>\n  <Eff extends Effect.Effect<any, any, any>>(\n    effects: Iterable<Eff>,\n    options?: {\n      readonly discard?: false | undefined\n    }\n  ): Effect.Effect<\n    Fiber.Fiber<Array<Effect.Effect.Success<Eff>>, Effect.Effect.Error<Eff>>,\n    never,\n    Effect.Effect.Context<Eff>\n  >\n  <Eff extends Effect.Effect<any, any, any>>(effects: Iterable<Eff>, options: {\n    readonly discard: true\n  }): Effect.Effect<void, never, Effect.Effect.Context<Eff>>\n} = dual((args) => Predicate.isIterable(args[0]), <A, E, R>(effects: Iterable<Effect.Effect<A, E, R>>, options: {\n  readonly discard: true\n}): Effect.Effect<void, never, R> =>\n  options?.discard ?\n    core.forEachSequentialDiscard(effects, fiberRuntime.fork) :\n    core.map(core.forEachSequential(effects, fiberRuntime.fork), fiberRuntime.fiberAll))\n\n/** @internal */\nexport const forkIn = dual<\n  (scope: Scope.Scope) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, scope: Scope.Scope) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>\n>(\n  2,\n  (self, scope) =>\n    core.uninterruptibleMask((restore) =>\n      core.flatMap(scope.fork(executionStrategy.sequential), (child) =>\n        pipe(\n          restore(self),\n          core.onExit((exit) => child.close(exit)),\n          fiberRuntime.forkDaemon,\n          core.tap((fiber) =>\n            child.addFinalizer(() =>\n              core.fiberIdWith((fiberId) =>\n                Equal.equals(fiberId, fiber.id()) ?\n                  core.void :\n                  core.asVoid(core.interruptFiber(fiber))\n              )\n            )\n          )\n        ))\n    )\n)\n\n/** @internal */\nexport const forkScoped = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R | Scope.Scope> =>\n  fiberRuntime.scopeWith((scope) => forkIn(self, scope))\n\n/** @internal */\nexport const fromFiber = <A, E>(fiber: Fiber.Fiber<A, E>): Effect.Effect<A, E> => internalFiber.join(fiber)\n\n/** @internal */\nexport const fromFiberEffect = <A, E, R>(fiber: Effect.Effect<Fiber.Fiber<A, E>, E, R>): Effect.Effect<A, E, R> =>\n  core.suspend(() => core.flatMap(fiber, internalFiber.join))\n\nconst memoKeySymbol = Symbol.for(\"effect/Effect/memoizeFunction.key\")\n\nclass Key<in out A> implements Equal.Equal {\n  [memoKeySymbol] = memoKeySymbol\n  constructor(readonly a: A, readonly eq?: Equivalence<A>) {}\n  [Equal.symbol](that: Equal.Equal) {\n    if (Predicate.hasProperty(that, memoKeySymbol)) {\n      if (this.eq) {\n        return this.eq(this.a, (that as unknown as Key<A>).a)\n      } else {\n        return Equal.equals(this.a, (that as unknown as Key<A>).a)\n      }\n    }\n    return false\n  }\n  [Hash.symbol]() {\n    return this.eq ? 0 : Hash.cached(this, Hash.hash(this.a))\n  }\n}\n\n/** @internal */\nexport const cachedFunction = <A, B, E, R>(\n  f: (a: A) => Effect.Effect<B, E, R>,\n  eq?: Equivalence<A>\n): Effect.Effect<(a: A) => Effect.Effect<B, E, R>> => {\n  return pipe(\n    core.sync(() => MutableHashMap.empty<Key<A>, Deferred.Deferred<readonly [FiberRefsPatch.FiberRefsPatch, B], E>>()),\n    core.flatMap(makeSynchronized),\n    core.map((ref) => (a: A) =>\n      pipe(\n        ref.modifyEffect((map) => {\n          const result = pipe(map, MutableHashMap.get(new Key(a, eq)))\n          if (Option.isNone(result)) {\n            return pipe(\n              core.deferredMake<readonly [FiberRefsPatch.FiberRefsPatch, B], E>(),\n              core.tap((deferred) =>\n                pipe(\n                  effect.diffFiberRefs(f(a)),\n                  core.intoDeferred(deferred),\n                  fiberRuntime.fork\n                )\n              ),\n              core.map((deferred) => [deferred, pipe(map, MutableHashMap.set(new Key(a, eq), deferred))] as const)\n            )\n          }\n          return core.succeed([result.value, map] as const)\n        }),\n        core.flatMap(core.deferredAwait),\n        core.flatMap(([patch, b]) => pipe(effect.patchFiberRefs(patch), core.as(b)))\n      )\n    )\n  )\n}\n\n/** @internal */\nexport const raceFirst = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A2 | A, E2 | E, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A2 | A, E2 | E, R | R2>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n) =>\n  pipe(\n    core.exit(self),\n    fiberRuntime.race(core.exit(that)),\n    (effect: Effect.Effect<Exit.Exit<A | A2, E | E2>, never, R | R2>) => core.flatten(effect)\n  ))\n\n/** @internal */\nexport const scheduleForked = dual<\n  <Out, R2>(\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<Fiber.RuntimeFiber<Out, E>, never, R | R2 | Scope.Scope>,\n  <A, E, R, Out, R2>(\n    self: Effect.Effect<A, E, R>,\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ) => Effect.Effect<Fiber.RuntimeFiber<Out, E>, never, R | R2 | Scope.Scope>\n>(2, (self, schedule) => pipe(self, _schedule.schedule_Effect(schedule), forkScoped))\n\n/** @internal */\nexport const supervised = dual<\n  <X>(supervisor: Supervisor.Supervisor<X>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, X>(self: Effect.Effect<A, E, R>, supervisor: Supervisor.Supervisor<X>) => Effect.Effect<A, E, R>\n>(2, (self, supervisor) => {\n  const supervise = core.fiberRefLocallyWith(fiberRuntime.currentSupervisor, (s) => s.zip(supervisor))\n  return supervise(self)\n})\n\n/** @internal */\nexport const timeout = dual<\n  (\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | Cause.TimeoutException, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    duration: Duration.DurationInput\n  ) => Effect.Effect<A, E | Cause.TimeoutException, R>\n>(2, (self, duration) =>\n  timeoutFail(self, {\n    onTimeout: () => core.timeoutExceptionFromDuration(duration),\n    duration\n  }))\n\n/** @internal */\nexport const timeoutFail = dual<\n  <E1>(\n    options: {\n      readonly onTimeout: LazyArg<E1>\n      readonly duration: Duration.DurationInput\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E1, R>,\n  <A, E, R, E1>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onTimeout: LazyArg<E1>\n      readonly duration: Duration.DurationInput\n    }\n  ) => Effect.Effect<A, E | E1, R>\n>(2, (self, { duration, onTimeout }) =>\n  core.flatten(timeoutTo(self, {\n    onTimeout: () => core.failSync(onTimeout),\n    onSuccess: core.succeed,\n    duration\n  })))\n\n/** @internal */\nexport const timeoutFailCause = dual<\n  <E1>(\n    options: {\n      readonly onTimeout: LazyArg<Cause.Cause<E1>>\n      readonly duration: Duration.DurationInput\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E1, R>,\n  <A, E, R, E1>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onTimeout: LazyArg<Cause.Cause<E1>>\n      readonly duration: Duration.DurationInput\n    }\n  ) => Effect.Effect<A, E | E1, R>\n>(2, (self, { duration, onTimeout }) =>\n  core.flatten(timeoutTo(self, {\n    onTimeout: () => core.failCauseSync(onTimeout),\n    onSuccess: core.succeed,\n    duration\n  })))\n\n/** @internal */\nexport const timeoutOption = dual<\n  (\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Option.Option<A>, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    duration: Duration.DurationInput\n  ) => Effect.Effect<Option.Option<A>, E, R>\n>(2, (self, duration) =>\n  timeoutTo(self, {\n    duration,\n    onSuccess: Option.some,\n    onTimeout: Option.none\n  }))\n\n/** @internal */\nexport const timeoutTo = dual<\n  <A, B, B1>(\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B | B1, E, R>,\n  <A, E, R, B1, B>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ) => Effect.Effect<B | B1, E, R>\n>(2, (self, { duration, onSuccess, onTimeout }) =>\n  core.fiberIdWith((parentFiberId) =>\n    fiberRuntime.raceFibersWith(\n      self,\n      core.interruptible(effect.sleep(duration)),\n      {\n        onSelfWin: (winner, loser) =>\n          core.flatMap(\n            winner.await,\n            (exit) => {\n              if (exit._tag === \"Success\") {\n                return core.flatMap(\n                  winner.inheritAll,\n                  () =>\n                    core.as(\n                      core.interruptAsFiber(loser, parentFiberId),\n                      onSuccess(exit.value)\n                    )\n                )\n              } else {\n                return core.flatMap(\n                  core.interruptAsFiber(loser, parentFiberId),\n                  () => core.exitFailCause(exit.cause)\n                )\n              }\n            }\n          ),\n        onOtherWin: (winner, loser) =>\n          core.flatMap(\n            winner.await,\n            (exit) => {\n              if (exit._tag === \"Success\") {\n                return core.flatMap(\n                  winner.inheritAll,\n                  () =>\n                    core.as(\n                      core.interruptAsFiber(loser, parentFiberId),\n                      onTimeout()\n                    )\n                )\n              } else {\n                return core.flatMap(\n                  core.interruptAsFiber(loser, parentFiberId),\n                  () => core.exitFailCause(exit.cause)\n                )\n              }\n            }\n          ),\n        otherScope: globalScope\n      }\n    )\n  ))\n\n// circular with Synchronized\n\n/** @internal */\nconst SynchronizedSymbolKey = \"effect/Ref/SynchronizedRef\"\n\n/** @internal */\nexport const SynchronizedTypeId: Synchronized.SynchronizedRefTypeId = Symbol.for(\n  SynchronizedSymbolKey\n) as Synchronized.SynchronizedRefTypeId\n\n/** @internal */\nexport const synchronizedVariance = {\n  /* c8 ignore next */\n  _A: (_: any) => _\n}\n\n/** @internal */\nclass SynchronizedImpl<in out A> implements Synchronized.SynchronizedRef<A> {\n  readonly [SynchronizedTypeId] = synchronizedVariance\n  readonly [internalRef.RefTypeId] = internalRef.refVariance\n  readonly [Readable.TypeId]: Readable.TypeId\n  constructor(\n    readonly ref: Ref.Ref<A>,\n    readonly withLock: <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  ) {\n    this[Readable.TypeId] = Readable.TypeId\n    this.get = internalRef.get(this.ref)\n  }\n  readonly get: Effect.Effect<A>\n  modify<B>(f: (a: A) => readonly [B, A]): Effect.Effect<B> {\n    return this.modifyEffect((a) => core.succeed(f(a)))\n  }\n  modifyEffect<B, E, R>(f: (a: A) => Effect.Effect<readonly [B, A], E, R>): Effect.Effect<B, E, R> {\n    return this.withLock(\n      pipe(\n        core.flatMap(internalRef.get(this.ref), f),\n        core.flatMap(([b, a]) => core.as(internalRef.set(this.ref, a), b))\n      )\n    )\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const makeSynchronized = <A>(value: A): Effect.Effect<Synchronized.SynchronizedRef<A>> =>\n  core.sync(() => unsafeMakeSynchronized(value))\n\n/** @internal */\nexport const unsafeMakeSynchronized = <A>(value: A): Synchronized.SynchronizedRef<A> => {\n  const ref = internalRef.unsafeMake(value)\n  const sem = unsafeMakeSemaphore(1)\n  return new SynchronizedImpl(ref, sem.withPermits(1))\n}\n\n/** @internal */\nexport const updateSomeAndGetEffectSynchronized = dual<\n  <A, R, E>(\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<A, E, R>,\n  <A, R, E>(\n    self: Synchronized.SynchronizedRef<A>,\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, pf) =>\n  self.modifyEffect((value) => {\n    const result = pf(value)\n    switch (result._tag) {\n      case \"None\": {\n        return core.succeed([value, value] as const)\n      }\n      case \"Some\": {\n        return core.map(result.value, (a) => [a, a] as const)\n      }\n    }\n  }))\n\n// circular with Fiber\n\n/** @internal */\nexport const zipFiber = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<[A, A2], E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<[A, A2], E | E2>\n>(2, (self, that) => zipWithFiber(self, that, (a, b) => [a, b]))\n\n/** @internal */\nexport const zipLeftFiber = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<A, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<A, E | E2>\n>(2, (self, that) => zipWithFiber(self, that, (a, _) => a))\n\n/** @internal */\nexport const zipRightFiber = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<A2, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<A2, E | E2>\n>(2, (self, that) => zipWithFiber(self, that, (_, b) => b))\n\n/** @internal */\nexport const zipWithFiber = dual<\n  <B, E2, A, C>(\n    that: Fiber.Fiber<B, E2>,\n    f: (a: A, b: B) => C\n  ) => <E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<C, E | E2>,\n  <A, E, B, E2, C>(\n    self: Fiber.Fiber<A, E>,\n    that: Fiber.Fiber<B, E2>,\n    f: (a: A, b: B) => C\n  ) => Fiber.Fiber<C, E | E2>\n>(3, (self, that, f) => ({\n  [internalFiber.FiberTypeId]: internalFiber.fiberVariance,\n  id: () => pipe(self.id(), FiberId.getOrElse(that.id())),\n  await: pipe(\n    self.await,\n    core.flatten,\n    fiberRuntime.zipWithOptions(core.flatten(that.await), f, { concurrent: true }),\n    core.exit\n  ),\n  children: self.children,\n  inheritAll: core.zipRight(\n    that.inheritAll,\n    self.inheritAll\n  ),\n  poll: core.zipWith(\n    self.poll,\n    that.poll,\n    (optionA, optionB) =>\n      pipe(\n        optionA,\n        Option.flatMap((exitA) =>\n          pipe(\n            optionB,\n            Option.map((exitB) =>\n              Exit.zipWith(exitA, exitB, {\n                onSuccess: f,\n                onFailure: internalCause.parallel\n              })\n            )\n          )\n        )\n      )\n  ),\n  interruptAsFork: (id) =>\n    core.zipRight(\n      self.interruptAsFork(id),\n      that.interruptAsFork(id)\n    ),\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}))\n", "/** @internal */\nexport const OP_EXTEND_SCOPE = \"ExtendScope\" as const\n\n/** @internal */\nexport type OP_EXTEND_SCOPE = typeof OP_EXTEND_SCOPE\n\n/** @internal */\nexport const OP_FOLD = \"Fold\" as const\n\n/** @internal */\nexport type OP_FOLD = typeof OP_FOLD\n\n/** @internal */\nexport const OP_FRESH = \"Fresh\" as const\n\n/** @internal */\nexport type OP_FRESH = typeof OP_FRESH\n\n/** @internal */\nexport const OP_FROM_EFFECT = \"FromEffect\" as const\n\n/** @internal */\nexport type OP_FROM_EFFECT = typeof OP_FROM_EFFECT\n\n/** @internal */\nexport const OP_SCOPED = \"Scoped\" as const\n\n/** @internal */\nexport type OP_SCOPED = typeof OP_SCOPED\n\n/** @internal */\nexport const OP_SUSPEND = \"Suspend\" as const\n\n/** @internal */\nexport type OP_SUSPEND = typeof OP_SUSPEND\n\n/** @internal */\nexport const OP_PROVIDE = \"Provide\" as const\n\n/** @internal */\nexport type OP_PROVIDE = typeof OP_PROVIDE\n\n/** @internal */\nexport const OP_PROVIDE_MERGE = \"ProvideMerge\" as const\n\n/** @internal */\nexport type OP_PROVIDE_MERGE = typeof OP_PROVIDE_MERGE\n\n/** @internal */\nexport const OP_ZIP_WITH = \"ZipWith\" as const\n\n/** @internal */\nexport type OP_ZIP_WITH = typeof OP_ZIP_WITH\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type { FiberRef } from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport type * as FiberStatus from \"./FiberStatus.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as core from \"./internal/core.js\"\nimport * as circular from \"./internal/effect/circular.js\"\nimport * as internal from \"./internal/fiber.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberTypeId: unique symbol = internal.FiberTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberTypeId = typeof FiberTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RuntimeFiberTypeId: unique symbol = internal.RuntimeFiberTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RuntimeFiberTypeId = typeof RuntimeFiberTypeId\n\n/**\n * A fiber is a lightweight thread of execution that never consumes more than a\n * whole thread (but may consume much less, depending on contention and\n * asynchronicity). Fibers are spawned by forking effects, which run\n * concurrently with the parent effect.\n *\n * Fibers can be joined, yielding their result to other fibers, or interrupted,\n * which terminates the fiber, safely releasing all resources.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Fiber<out A, out E = never> extends Fiber.Variance<A, E>, Pipeable {\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.FiberId\n\n  /**\n   * Awaits the fiber, which suspends the awaiting fiber until the result of the\n   * fiber has been determined.\n   */\n  readonly await: Effect.Effect<Exit.Exit<A, E>>\n\n  /**\n   * Retrieves the immediate children of the fiber.\n   */\n  readonly children: Effect.Effect<Array<Fiber.Runtime<any, any>>>\n\n  /**\n   * Inherits values from all `FiberRef` instances into current fiber. This\n   * will resume immediately.\n   */\n  readonly inheritAll: Effect.Effect<void>\n\n  /**\n   * Tentatively observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  readonly poll: Effect.Effect<Option.Option<Exit.Exit<A, E>>>\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the\n   * specified fiber. If the fiber has already exited, the returned effect will\n   * resume immediately. Otherwise, the effect will resume when the fiber exits.\n   */\n  interruptAsFork(fiberId: FiberId.FiberId): Effect.Effect<void>\n}\n\n/**\n * A runtime fiber that is executing an effect. Runtime fibers have an\n * identity and a trace.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface RuntimeFiber<out A, out E = never> extends Fiber<A, E>, Fiber.RuntimeVariance<A, E> {\n  /**\n   * Reads the current number of ops that have occurred since the last yield\n   */\n  get currentOpCount(): number\n\n  /**\n   * Reads the current value of a fiber ref\n   */\n  getFiberRef<X>(fiberRef: FiberRef<X>): X\n\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.Runtime\n\n  /**\n   * The status of the fiber.\n   */\n  readonly status: Effect.Effect<FiberStatus.FiberStatus>\n\n  /**\n   * Returns the current `RuntimeFlags` the fiber is running with.\n   */\n  readonly runtimeFlags: Effect.Effect<RuntimeFlags.RuntimeFlags>\n\n  /**\n   * Adds an observer to the list of observers.\n   */\n  addObserver(observer: (exit: Exit.Exit<A, E>) => void): void\n\n  /**\n   * Removes the specified observer from the list of observers that will be\n   * notified when the fiber exits.\n   */\n  removeObserver(observer: (exit: Exit.Exit<A, E>) => void): void\n\n  /**\n   * Retrieves all fiber refs of the fiber.\n   */\n  getFiberRefs(): FiberRefs.FiberRefs\n\n  /**\n   * Unsafely observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  unsafePoll(): Exit.Exit<A, E> | null\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the\n   * specified fiber. If the fiber has already exited, the returned effect will\n   * resume immediately. Otherwise, the effect will resume when the fiber exits.\n   */\n  unsafeInterruptAsFork(fiberId: FiberId.FiberId): void\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Fiber {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type Runtime<A, E = never> = RuntimeFiber<A, E>\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, out E> {\n    readonly [FiberTypeId]: {\n      readonly _A: Types.Covariant<A>\n      readonly _E: Types.Covariant<E>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export interface RuntimeVariance<out A, out E> {\n    readonly [RuntimeFiberTypeId]: {\n      readonly _A: Types.Covariant<A>\n      readonly _E: Types.Covariant<E>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Dump {\n    /**\n     * The fiber's unique identifier.\n     */\n    readonly id: FiberId.Runtime\n    /**\n     * The status of the fiber.\n     */\n    readonly status: FiberStatus.FiberStatus\n  }\n\n  /**\n   * A record containing information about a `Fiber`.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Descriptor {\n    /**\n     * The fiber's unique identifier.\n     */\n    readonly id: FiberId.FiberId\n    /**\n     * The status of the fiber.\n     */\n    readonly status: FiberStatus.FiberStatus\n    /**\n     * The set of fibers attempting to interrupt the fiber or its ancestors.\n     */\n    readonly interruptors: HashSet.HashSet<FiberId.FiberId>\n  }\n}\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const Order: order.Order<RuntimeFiber<unknown, unknown>> = internal.Order\n\n/**\n * Returns `true` if the specified value is a `Fiber`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiber: (u: unknown) => u is Fiber<unknown, unknown> = internal.isFiber\n\n/**\n * Returns `true` if the specified `Fiber` is a `RuntimeFiber`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRuntimeFiber: <A, E>(self: Fiber<A, E>) => self is RuntimeFiber<A, E> = internal.isRuntimeFiber\n\n/**\n * The identity of the fiber.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const id: <A, E>(self: Fiber<A, E>) => FiberId.FiberId = internal.id\n\nconst _await: <A, E>(self: Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>> = internal._await\n\nexport {\n  /**\n   * Awaits the fiber, which suspends the awaiting fiber until the result of the\n   * fiber has been determined.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  _await as await\n}\n\n/**\n * Awaits on all fibers to be completed, successfully or not.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const awaitAll: (fibers: Iterable<Fiber<any, any>>) => Effect.Effect<void> = fiberRuntime.fiberAwaitAll\n\n/**\n * Retrieves the immediate children of the fiber.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const children: <A, E>(self: Fiber<A, E>) => Effect.Effect<Array<RuntimeFiber<any, any>>> = internal.children\n\n/**\n * Collects all fibers into a single fiber producing an in-order list of the\n * results.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const all: <A, E>(fibers: Iterable<Fiber<A, E>>) => Fiber<ReadonlyArray<A>, E> = fiberRuntime.fiberAll\n\n/**\n * A fiber that is done with the specified `Exit` value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const done: <A, E>(exit: Exit.Exit<A, E>) => Fiber<A, E> = internal.done\n\n/**\n * @since 2.0.0\n * @category destructors\n */\nexport const dump: <A, E>(self: RuntimeFiber<A, E>) => Effect.Effect<Fiber.Dump> = internal.dump\n\n/**\n * @since 2.0.0\n * @category destructors\n */\nexport const dumpAll: (\n  fibers: Iterable<RuntimeFiber<unknown, unknown>>\n) => Effect.Effect<Array<Fiber.Dump>> = internal.dumpAll\n\n/**\n * A fiber that has already failed with the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Fiber<never, E> = internal.fail\n\n/**\n * Creates a `Fiber` that has already failed with the specified cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Fiber<never, E> = internal.failCause\n\n/**\n * Lifts an `Effect` into a `Fiber`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromEffect: <A, E>(effect: Effect.Effect<A, E>) => Effect.Effect<Fiber<A, E>> = internal.fromEffect\n\n/**\n * Gets the current fiber if one is running.\n *\n * @since 2.0.0\n * @category utilities\n */\nexport const getCurrentFiber: () => Option.Option<RuntimeFiber<any, any>> = internal.getCurrentFiber\n\n/**\n * Inherits values from all `FiberRef` instances into current fiber. This\n * will resume immediately.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const inheritAll: <A, E>(self: Fiber<A, E>) => Effect.Effect<void> = internal.inheritAll\n\n/**\n * Interrupts the fiber from whichever fiber is calling this method. If the\n * fiber has already exited, the returned effect will resume immediately.\n * Otherwise, the effect will resume when the fiber exits.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interrupt: <A, E>(self: Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>> = core.interruptFiber\n\n/**\n * Constructrs a `Fiber` that is already interrupted.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const interrupted: (fiberId: FiberId.FiberId) => Fiber<never> = internal.interrupted\n\n/**\n * Interrupts the fiber as if interrupted from the specified fiber. If the\n * fiber has already exited, the returned effect will resume immediately.\n * Otherwise, the effect will resume when the fiber exits.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAs: {\n  (fiberId: FiberId.FiberId): <A, E>(self: Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>>\n  <A, E>(self: Fiber<A, E>, fiberId: FiberId.FiberId): Effect.Effect<Exit.Exit<A, E>>\n} = core.interruptAsFiber\n\n/**\n * Interrupts the fiber as if interrupted from the specified fiber. If the\n * fiber has already exited, the returned effect will resume immediately.\n * Otherwise, the effect will resume when the fiber exits.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAsFork: {\n  (fiberId: FiberId.FiberId): <A, E>(self: Fiber<A, E>) => Effect.Effect<void>\n  <A, E>(self: Fiber<A, E>, fiberId: FiberId.FiberId): Effect.Effect<void>\n} = internal.interruptAsFork\n\n/**\n * Interrupts all fibers, awaiting their interruption.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAll: (fibers: Iterable<Fiber<any, any>>) => Effect.Effect<void> = internal.interruptAll\n\n/**\n * Interrupts all fibers as by the specified fiber, awaiting their\n * interruption.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAllAs: {\n  (fiberId: FiberId.FiberId): (fibers: Iterable<Fiber<any, any>>) => Effect.Effect<void>\n  (fibers: Iterable<Fiber<any, any>>, fiberId: FiberId.FiberId): Effect.Effect<void>\n} = internal.interruptAllAs\n\n/**\n * Interrupts the fiber from whichever fiber is calling this method. The\n * interruption will happen in a separate daemon fiber, and the returned\n * effect will always resume immediately without waiting.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptFork: <A, E>(self: Fiber<A, E>) => Effect.Effect<void> = fiberRuntime.fiberInterruptFork\n\n/**\n * Joins the fiber, which suspends the joining fiber until the result of the\n * fiber has been determined. Attempting to join a fiber that has erred will\n * result in a catchable error. Joining an interrupted fiber will result in an\n * \"inner interruption\" of this fiber, unlike interruption triggered by\n * another fiber, \"inner interruption\" can be caught and recovered.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const join: <A, E>(self: Fiber<A, E>) => Effect.Effect<A, E> = internal.join\n\n/**\n * Joins all fibers, awaiting their _successful_ completion. Attempting to\n * join a fiber that has erred will result in a catchable error, _if_ that\n * error does not result from interruption.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const joinAll: <A, E>(fibers: Iterable<Fiber<A, E>>) => Effect.Effect<Array<A>, E> = fiberRuntime.fiberJoinAll\n\n/**\n * Maps over the value the Fiber computes.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E>(self: Fiber<A, E>) => Fiber<B, E>\n  <A, E, B>(self: Fiber<A, E>, f: (a: A) => B): Fiber<B, E>\n} = internal.map\n\n/**\n * Effectually maps over the value the fiber computes.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapEffect: {\n  <A, A2, E2>(f: (a: A) => Effect.Effect<A2, E2>): <E>(self: Fiber<A, E>) => Fiber<A2, E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, f: (a: A) => Effect.Effect<A2, E2>): Fiber<A2, E | E2>\n} = internal.mapEffect\n\n/**\n * Passes the success of this fiber to the specified callback, and continues\n * with the fiber that it returns.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapFiber: {\n  <E, E2, A, B>(f: (a: A) => Fiber<B, E2>): (self: Fiber<A, E>) => Effect.Effect<Fiber<B, E | E2>>\n  <A, E, E2, B>(self: Fiber<A, E>, f: (a: A) => Fiber<B, E2>): Effect.Effect<Fiber<B, E | E2>>\n} = internal.mapFiber\n\n/**\n * Folds over the `Fiber` or `RuntimeFiber`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  <A, E, Z>(\n    options: {\n      readonly onFiber: (fiber: Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: RuntimeFiber<A, E>) => Z\n    }\n  ): (self: Fiber<A, E>) => Z\n  <A, E, Z>(\n    self: Fiber<A, E>,\n    options: {\n      readonly onFiber: (fiber: Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: RuntimeFiber<A, E>) => Z\n    }\n  ): Z\n} = internal.match\n\n/**\n * A fiber that never fails or succeeds.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const never: Fiber<never> = internal.never\n\n/**\n * Returns a fiber that prefers `this` fiber, but falls back to the `that` one\n * when `this` one fails. Interrupting the returned fiber will interrupt both\n * fibers, sequentially, from left to right.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElse: {\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<A2 | A, E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<A | A2, E | E2>\n} = internal.orElse\n\n/**\n * Returns a fiber that prefers `this` fiber, but falls back to the `that` one\n * when `this` one fails. Interrupting the returned fiber will interrupt both\n * fibers, sequentially, from left to right.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElseEither: {\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<Either.Either<A2, A>, E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<Either.Either<A2, A>, E | E2>\n} = internal.orElseEither\n\n/**\n * Tentatively observes the fiber, but returns immediately if it is not\n * already done.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const poll: <A, E>(self: Fiber<A, E>) => Effect.Effect<Option.Option<Exit.Exit<A, E>>> = internal.poll\n\n/**\n * Pretty-prints a `RuntimeFiber`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const pretty: <A, E>(self: RuntimeFiber<A, E>) => Effect.Effect<string> = internal.pretty\n\n/**\n * Returns a chunk containing all root fibers.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const roots: Effect.Effect<Array<RuntimeFiber<any, any>>> = internal.roots\n\n/**\n * Returns a chunk containing all root fibers.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeRoots: (_: void) => Array<RuntimeFiber<any, any>> = internal.unsafeRoots\n\n/**\n * Converts this fiber into a scoped effect. The fiber is interrupted when the\n * scope is closed.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const scoped: <A, E>(self: Fiber<A, E>) => Effect.Effect<Fiber<A, E>, never, Scope.Scope> =\n  fiberRuntime.fiberScoped\n\n/**\n * Returns the `FiberStatus` of a `RuntimeFiber`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const status: <A, E>(self: RuntimeFiber<A, E>) => Effect.Effect<FiberStatus.FiberStatus> = internal.status\n\n/**\n * Returns a fiber that has already succeeded with the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Fiber<A> = internal.succeed\n\nconst void_: Fiber<void> = internal.void\nexport {\n  /**\n   * A fiber that has already succeeded with unit.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Zips this fiber and the specified fiber together, producing a tuple of\n * their output.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<[A, A2], E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<[A, A2], E | E2>\n} = circular.zipFiber\n\n/**\n * Same as `zip` but discards the output of that `Fiber`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<A, E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<A, E | E2>\n} = circular.zipLeftFiber\n\n/**\n * Same as `zip` but discards the output of this `Fiber`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<A2, E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<A2, E | E2>\n} = circular.zipRightFiber\n\n/**\n * Zips this fiber with the specified fiber, combining their results using the\n * specified combiner function. Both joins and interruptions are performed in\n * sequential order from left to right.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <B, E2, A, C>(that: Fiber<B, E2>, f: (a: A, b: B) => C): <E>(self: Fiber<A, E>) => Fiber<C, E2 | E>\n  <A, E, B, E2, C>(self: Fiber<A, E>, that: Fiber<B, E2>, f: (a: A, b: B) => C): Fiber<C, E | E2>\n} = circular.zipWithFiber\n", "import { equals } from \"effect/Equal\"\nimport type * as ReadonlyArray from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Exit from \"../Exit.js\"\nimport * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport type * as Runtime from \"../Runtime.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as _scheduler from \"../Scheduler.js\"\nimport * as _scope from \"../Scope.js\"\nimport * as InternalCause from \"./cause.js\"\nimport * as core from \"./core.js\"\nimport * as executionStrategy from \"./executionStrategy.js\"\nimport * as FiberRuntime from \"./fiberRuntime.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as runtimeFlags from \"./runtimeFlags.js\"\nimport * as _supervisor from \"./supervisor.js\"\n\n/** @internal */\nexport const unsafeFork = <R>(runtime: Runtime.Runtime<R>) =>\n<A, E>(\n  self: Effect.Effect<A, E, R>,\n  options?: Runtime.RunForkOptions\n): Fiber.RuntimeFiber<A, E> => {\n  const fiberId = FiberId.unsafeMake()\n  const fiberRefUpdates: ReadonlyArray.NonEmptyArray<\n    readonly [FiberRef.FiberRef<any>, ReadonlyArray.NonEmptyReadonlyArray<readonly [FiberId.Runtime, any]>]\n  > = [[core.currentContext, [[fiberId, runtime.context]]]]\n\n  if (options?.scheduler) {\n    fiberRefUpdates.push([_scheduler.currentScheduler, [[fiberId, options.scheduler]]])\n  }\n\n  let fiberRefs = FiberRefs.updateManyAs(runtime.fiberRefs, {\n    entries: fiberRefUpdates,\n    forkAs: fiberId\n  })\n\n  if (options?.updateRefs) {\n    fiberRefs = options.updateRefs(fiberRefs, fiberId)\n  }\n\n  const fiberRuntime: FiberRuntime.FiberRuntime<A, E> = new FiberRuntime.FiberRuntime<A, E>(\n    fiberId,\n    fiberRefs,\n    runtime.runtimeFlags\n  )\n\n  let effect: Effect.Effect<A, E, R> = self\n\n  if (options?.scope) {\n    effect = core.flatMap(\n      _scope.fork(options.scope, executionStrategy.sequential),\n      (closeableScope) =>\n        core.zipRight(\n          core.scopeAddFinalizer(\n            closeableScope,\n            core.fiberIdWith((id) =>\n              equals(id, fiberRuntime.id()) ? core.void : core.interruptAsFiber(fiberRuntime, id)\n            )\n          ),\n          core.onExit(self, (exit) => _scope.close(closeableScope, exit))\n        )\n    )\n  }\n\n  const supervisor = fiberRuntime._supervisor\n\n  // we can compare by reference here as _supervisor.none is wrapped with globalValue\n  if (supervisor !== _supervisor.none) {\n    supervisor.onStart(runtime.context, effect, Option.none(), fiberRuntime)\n\n    fiberRuntime.addObserver((exit) => supervisor.onEnd(exit, fiberRuntime))\n  }\n\n  fiberScope.globalScope.add(runtime.runtimeFlags, fiberRuntime)\n\n  // Only an explicit false will prevent immediate execution\n  if (options?.immediate === false) {\n    fiberRuntime.resume(effect)\n  } else {\n    fiberRuntime.start(effect)\n  }\n\n  return fiberRuntime\n}\n\n/** @internal */\nexport const unsafeRunCallback = <R>(runtime: Runtime.Runtime<R>) =>\n<A, E>(\n  effect: Effect.Effect<A, E, R>,\n  options: Runtime.RunCallbackOptions<A, E> = {}\n): (fiberId?: FiberId.FiberId, options?: Runtime.RunCallbackOptions<A, E> | undefined) => void => {\n  const fiberRuntime = unsafeFork(runtime)(effect, options)\n\n  if (options.onExit) {\n    fiberRuntime.addObserver((exit) => {\n      options.onExit!(exit)\n    })\n  }\n\n  return (id, cancelOptions) =>\n    unsafeRunCallback(runtime)(\n      pipe(fiberRuntime, Fiber.interruptAs(id ?? FiberId.none)),\n      {\n        ...cancelOptions,\n        onExit: cancelOptions?.onExit\n          ? (exit) => cancelOptions.onExit!(Exit.flatten(exit))\n          : undefined\n      }\n    )\n}\n\n/** @internal */\nexport const unsafeRunSync = <R>(runtime: Runtime.Runtime<R>) => <A, E>(effect: Effect.Effect<A, E, R>): A => {\n  const result = unsafeRunSyncExit(runtime)(effect)\n  if (result._tag === \"Failure\") {\n    throw fiberFailure(result.effect_instruction_i0)\n  } else {\n    return result.effect_instruction_i0\n  }\n}\n\nclass AsyncFiberExceptionImpl<A, E = never> extends Error implements Runtime.AsyncFiberException<A, E> {\n  readonly _tag = \"AsyncFiberException\"\n  constructor(readonly fiber: Fiber.RuntimeFiber<A, E>) {\n    super(\n      `Fiber #${fiber.id().id} cannot be resolved synchronously. This is caused by using runSync on an effect that performs async work`\n    )\n    this.name = this._tag\n    this.stack = this.message\n  }\n}\n\nconst asyncFiberException = <A, E>(fiber: Fiber.RuntimeFiber<A, E>): Runtime.AsyncFiberException<A, E> => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 0\n  const error = new AsyncFiberExceptionImpl(fiber)\n  Error.stackTraceLimit = limit\n  return error\n}\n\n/** @internal */\nexport const isAsyncFiberException = (u: unknown): u is Runtime.AsyncFiberException<unknown, unknown> =>\n  Predicate.isTagged(u, \"AsyncFiberException\") && \"fiber\" in u\n\n/** @internal */\nexport const FiberFailureId: Runtime.FiberFailureId = Symbol.for(\"effect/Runtime/FiberFailure\") as any\n/** @internal */\nexport const FiberFailureCauseId: Runtime.FiberFailureCauseId = Symbol.for(\n  \"effect/Runtime/FiberFailure/Cause\"\n) as any\n\nclass FiberFailureImpl extends Error implements Runtime.FiberFailure {\n  readonly [FiberFailureId]: Runtime.FiberFailureId\n  readonly [FiberFailureCauseId]: Cause.Cause<unknown>\n  constructor(cause: Cause.Cause<unknown>) {\n    super()\n\n    this[FiberFailureId] = FiberFailureId\n    this[FiberFailureCauseId] = cause\n\n    const prettyErrors = InternalCause.prettyErrors(cause)\n    if (prettyErrors.length > 0) {\n      const head = prettyErrors[0]\n      this.name = head.name\n      this.message = head.message\n      this.stack = head.stack!\n    }\n\n    this.name = `(FiberFailure) ${this.name}`\n\n    if (this.message === undefined || this.message.length === 0) {\n      this.message = \"An error has occurred\"\n    }\n  }\n\n  toJSON(): unknown {\n    return {\n      _id: \"FiberFailure\",\n      cause: this[FiberFailureCauseId].toJSON()\n    }\n  }\n\n  toString(): string {\n    return \"(FiberFailure) \" + (this.stack ?? this.message)\n  }\n  [Inspectable.NodeInspectSymbol](): unknown {\n    return this.toString()\n  }\n}\n\n/** @internal */\nexport const fiberFailure = <E>(cause: Cause.Cause<E>): Runtime.FiberFailure => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 0\n  const error = new FiberFailureImpl(cause)\n  Error.stackTraceLimit = limit\n  return error\n}\n\n/** @internal */\nexport const isFiberFailure = (u: unknown): u is Runtime.FiberFailure => Predicate.hasProperty(u, FiberFailureId)\n\nconst fastPath = <A, E, R>(effect: Effect.Effect<A, E, R>): Exit.Exit<A, E> | undefined => {\n  const op = effect as core.Primitive\n  switch (op._op) {\n    case \"Failure\":\n    case \"Success\": {\n      // @ts-expect-error\n      return op\n    }\n    case \"Left\": {\n      return core.exitFail(op.left)\n    }\n    case \"Right\": {\n      return core.exitSucceed(op.right)\n    }\n    case \"Some\": {\n      return core.exitSucceed(op.value)\n    }\n    case \"None\": {\n      // @ts-expect-error\n      return core.exitFail(core.NoSuchElementException())\n    }\n  }\n}\n\n/** @internal */\nexport const unsafeRunSyncExit =\n  <R>(runtime: Runtime.Runtime<R>) => <A, E>(effect: Effect.Effect<A, E, R>): Exit.Exit<A, E> => {\n    const op = fastPath(effect)\n    if (op) {\n      return op\n    }\n    const scheduler = new _scheduler.SyncScheduler()\n    const fiberRuntime = unsafeFork(runtime)(effect, { scheduler })\n    scheduler.flush()\n    const result = fiberRuntime.unsafePoll()\n    if (result) {\n      return result\n    }\n    throw asyncFiberException(fiberRuntime)\n  }\n\n/** @internal */\nexport const unsafeRunPromise = <R>(runtime: Runtime.Runtime<R>) =>\n<A, E>(\n  effect: Effect.Effect<A, E, R>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n  } | undefined\n): Promise<A> =>\n  unsafeRunPromiseExit(runtime)(effect, options).then((result) => {\n    switch (result._tag) {\n      case OpCodes.OP_SUCCESS: {\n        return result.effect_instruction_i0\n      }\n      case OpCodes.OP_FAILURE: {\n        throw fiberFailure(result.effect_instruction_i0)\n      }\n    }\n  })\n\n/** @internal */\nexport const unsafeRunPromiseExit = <R>(runtime: Runtime.Runtime<R>) =>\n<A, E>(\n  effect: Effect.Effect<A, E, R>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n  } | undefined\n): Promise<Exit.Exit<A, E>> =>\n  new Promise((resolve) => {\n    const op = fastPath(effect)\n    if (op) {\n      resolve(op)\n    }\n    const fiber = unsafeFork(runtime)(effect)\n    fiber.addObserver((exit) => {\n      resolve(exit)\n    })\n    if (options?.signal !== undefined) {\n      if (options.signal.aborted) {\n        fiber.unsafeInterruptAsFork(fiber.id())\n      } else {\n        options.signal.addEventListener(\"abort\", () => {\n          fiber.unsafeInterruptAsFork(fiber.id())\n        }, { once: true })\n      }\n    }\n  })\n\n/** @internal */\nexport class RuntimeImpl<in R> implements Runtime.Runtime<R> {\n  constructor(\n    readonly context: Context.Context<R>,\n    readonly runtimeFlags: RuntimeFlags.RuntimeFlags,\n    readonly fiberRefs: FiberRefs.FiberRefs\n  ) {}\n\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const make = <R>(\n  options: {\n    readonly context: Context.Context<R>\n    readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n    readonly fiberRefs: FiberRefs.FiberRefs\n  }\n): Runtime.Runtime<R> => new RuntimeImpl(options.context, options.runtimeFlags, options.fiberRefs)\n\n/** @internal */\nexport const runtime = <R>(): Effect.Effect<Runtime.Runtime<R>, never, R> =>\n  core.withFiberRuntime((state, status) =>\n    core.succeed(\n      new RuntimeImpl<R>(\n        state.getFiberRef(core.currentContext as unknown as FiberRef.FiberRef<Context.Context<R>>),\n        status.runtimeFlags,\n        state.getFiberRefs()\n      )\n    )\n  )\n\n/** @internal */\nexport const defaultRuntimeFlags: RuntimeFlags.RuntimeFlags = runtimeFlags.make(\n  runtimeFlags.Interruption,\n  runtimeFlags.CooperativeYielding,\n  runtimeFlags.RuntimeMetrics\n)\n\n/** @internal */\nexport const defaultRuntime = make({\n  context: Context.empty(),\n  runtimeFlags: defaultRuntimeFlags,\n  fiberRefs: FiberRefs.empty()\n})\n\n/** @internal */\nexport const updateRuntimeFlags: {\n  (\n    f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags\n  ): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags) =>\n    make({\n      context: self.context,\n      runtimeFlags: f(self.runtimeFlags),\n      fiberRefs: self.fiberRefs\n    })\n)\n\n/** @internal */\nexport const disableRuntimeFlag: {\n  (flag: RuntimeFlags.RuntimeFlag): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag) => updateRuntimeFlags(self, runtimeFlags.disable(flag))\n)\n\n/** @internal */\nexport const enableRuntimeFlag: {\n  (flag: RuntimeFlags.RuntimeFlag): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag) => updateRuntimeFlags(self, runtimeFlags.enable(flag))\n)\n\n/** @internal */\nexport const updateContext: {\n  <R, R2>(f: (context: Context.Context<R>) => Context.Context<R2>): (self: Runtime.Runtime<R>) => Runtime.Runtime<R2>\n  <R, R2>(self: Runtime.Runtime<R>, f: (context: Context.Context<R>) => Context.Context<R2>): Runtime.Runtime<R2>\n} = dual(\n  2,\n  <R, R2>(self: Runtime.Runtime<R>, f: (context: Context.Context<R>) => Context.Context<R2>) =>\n    make({\n      context: f(self.context),\n      runtimeFlags: self.runtimeFlags,\n      fiberRefs: self.fiberRefs\n    })\n)\n\n/** @internal */\nexport const provideService: {\n  <I, S>(tag: Context.Tag<I, S>, service: S): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R | I>\n  <R, I, S>(self: Runtime.Runtime<R>, tag: Context.Tag<I, S>, service: S): Runtime.Runtime<R | I>\n} = dual(\n  3,\n  <R, I, S>(self: Runtime.Runtime<R>, tag: Context.Tag<I, S>, service: S) =>\n    updateContext(self, Context.add(tag, service))\n)\n\n/** @internal */\nexport const updateFiberRefs: {\n  (f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs): Runtime.Runtime<R> =>\n    make({\n      context: self.context,\n      runtimeFlags: self.runtimeFlags,\n      fiberRefs: f(self.fiberRefs)\n    })\n)\n\n/** @internal */\nexport const setFiberRef: {\n  <A>(fiberRef: FiberRef.FiberRef<A>, value: A): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>, value: A): Runtime.Runtime<R>\n} = dual(\n  3,\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>, value: A): Runtime.Runtime<R> =>\n    updateFiberRefs(\n      self,\n      FiberRefs.updateAs({\n        fiberId: FiberId.none,\n        fiberRef,\n        value\n      })\n    )\n)\n\n/** @internal */\nexport const deleteFiberRef: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>): Runtime.Runtime<R> =>\n    updateFiberRefs(self, FiberRefs.delete(fiberRef))\n)\n\n/** @internal */\nexport const unsafeRunEffect = unsafeRunCallback(defaultRuntime)\n\n/** @internal */\nexport const unsafeForkEffect = unsafeFork(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunPromiseEffect = unsafeRunPromise(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunPromiseExitEffect = unsafeRunPromiseExit(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunSyncEffect = unsafeRunSync(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunSyncExitEffect = unsafeRunSyncExit(defaultRuntime)\n\n// circular with Effect\n\n/** @internal */\nexport const asyncEffect = <A, E, R, R3, E2, R2>(\n  register: (\n    callback: (_: Effect.Effect<A, E, R>) => void\n  ) => Effect.Effect<Effect.Effect<void, never, R3> | void, E2, R2>\n): Effect.Effect<A, E | E2, R | R2 | R3> =>\n  core.suspend(() => {\n    let cleanup: Effect.Effect<void, never, R3> | void = undefined\n    return core.flatMap(\n      core.deferredMake<A, E | E2>(),\n      (deferred) =>\n        core.flatMap(runtime<R | R2 | R3>(), (runtime) =>\n          core.uninterruptibleMask((restore) =>\n            core.zipRight(\n              FiberRuntime.fork(restore(\n                core.matchCauseEffect(\n                  register((cb) => unsafeRunCallback(runtime)(core.intoDeferred(cb, deferred))),\n                  {\n                    onFailure: (cause) => core.deferredFailCause(deferred, cause),\n                    onSuccess: (cleanup_) => {\n                      cleanup = cleanup_\n                      return core.void\n                    }\n                  }\n                )\n              )),\n              restore(core.onInterrupt(core.deferredAwait(deferred), () => cleanup ?? core.void))\n            )\n          ))\n    )\n  })\n", "import type * as Effect from \"../Effect.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as Option from \"../Option.js\"\nimport type * as Synchronized from \"../SynchronizedRef.js\"\nimport * as core from \"./core.js\"\nimport * as _ref from \"./ref.js\"\n\n/** @internal */\nexport const getAndUpdateEffect = dual<\n  <A, R, E>(f: (a: A) => Effect.Effect<A, E, R>) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<A, E, R>,\n  <A, R, E>(self: Synchronized.SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n>(2, (self, f) =>\n  self.modifyEffect(\n    (value) => core.map(f(value), (result) => [value, result] as const)\n  ))\n\n/** @internal */\nexport const getAndUpdateSomeEffect = dual<\n  <A, R, E>(\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<A, E, R>,\n  <A, R, E>(\n    self: Synchronized.SynchronizedRef<A>,\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, pf) =>\n  self.modifyEffect((value) => {\n    const result = pf(value)\n    switch (result._tag) {\n      case \"None\": {\n        return core.succeed([value, value] as const)\n      }\n      case \"Some\": {\n        return core.map(result.value, (newValue) => [value, newValue] as const)\n      }\n    }\n  }))\n\n/** @internal */\nexport const modify = dual<\n  <A, B>(f: (a: A) => readonly [B, A]) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<B>,\n  <A, B>(self: Synchronized.SynchronizedRef<A>, f: (a: A) => readonly [B, A]) => Effect.Effect<B>\n>(2, (self, f) => self.modify(f))\n\n/** @internal */\nexport const modifyEffect = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<readonly [B, A], E, R>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<B, E, R>,\n  <A, B, E, R>(\n    self: Synchronized.SynchronizedRef<A>,\n    f: (a: A) => Effect.Effect<readonly [B, A], E, R>\n  ) => Effect.Effect<B, E, R>\n>(2, (self, f) => self.modifyEffect(f))\n\n/** @internal */\nexport const modifySomeEffect = dual<\n  <A, B, R, E>(\n    fallback: B,\n    pf: (a: A) => Option.Option<Effect.Effect<readonly [B, A], E, R>>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<B, E, R>,\n  <A, B, R, E>(\n    self: Synchronized.SynchronizedRef<A>,\n    fallback: B,\n    pf: (a: A) => Option.Option<Effect.Effect<readonly [B, A], E, R>>\n  ) => Effect.Effect<B, E, R>\n>(3, (self, fallback, pf) =>\n  self.modifyEffect(\n    (value) => pipe(pf(value), Option.getOrElse(() => core.succeed([fallback, value] as const)))\n  ))\n\n/** @internal */\nexport const updateEffect = dual<\n  <A, R, E>(\n    f: (a: A) => Effect.Effect<A, E, R>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<void, E, R>,\n  <A, R, E>(self: Synchronized.SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>) => Effect.Effect<void, E, R>\n>(2, (self, f) =>\n  self.modifyEffect((value) =>\n    core.map(\n      f(value),\n      (result) => [undefined as void, result] as const\n    )\n  ))\n\n/** @internal */\nexport const updateAndGetEffect = dual<\n  <A, R, E>(f: (a: A) => Effect.Effect<A, E, R>) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<A, E, R>,\n  <A, R, E>(self: Synchronized.SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n>(2, (self, f) =>\n  self.modifyEffect(\n    (value) => core.map(f(value), (result) => [result, result] as const)\n  ))\n\n/** @internal */\nexport const updateSomeEffect = dual<\n  <A, R, E>(\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<void, E, R>,\n  <A, R, E>(\n    self: Synchronized.SynchronizedRef<A>,\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => Effect.Effect<void, E, R>\n>(2, (self, pf) =>\n  self.modifyEffect((value) => {\n    const result = pf(value)\n    switch (result._tag) {\n      case \"None\": {\n        return core.succeed([void 0, value] as const)\n      }\n      case \"Some\": {\n        return core.map(result.value, (a) => [void 0, a] as const)\n      }\n    }\n  }))\n", "import * as Cause from \"../Cause.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type { FiberRef } from \"../FiberRef.js\"\nimport * as FiberRefsPatch from \"../FiberRefsPatch.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport type * as Layer from \"../Layer.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as Runtime from \"../Runtime.js\"\nimport type * as Schedule from \"../Schedule.js\"\nimport * as ScheduleDecision from \"../ScheduleDecision.js\"\nimport * as Intervals from \"../ScheduleIntervals.js\"\nimport * as Scope from \"../Scope.js\"\nimport type * as Synchronized from \"../SynchronizedRef.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport * as effect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as circular from \"./effect/circular.js\"\nimport * as fiberRuntime from \"./fiberRuntime.js\"\nimport * as EffectOpCodes from \"./opCodes/effect.js\"\nimport * as OpCodes from \"./opCodes/layer.js\"\nimport * as ref from \"./ref.js\"\nimport * as runtime from \"./runtime.js\"\nimport * as runtimeFlags from \"./runtimeFlags.js\"\nimport * as synchronized from \"./synchronizedRef.js\"\nimport * as tracer from \"./tracer.js\"\n\n/** @internal */\nconst LayerSymbolKey = \"effect/Layer\"\n\n/** @internal */\nexport const LayerTypeId: Layer.LayerTypeId = Symbol.for(\n  LayerSymbolKey\n) as Layer.LayerTypeId\n\nconst layerVariance = {\n  /* c8 ignore next */\n  _RIn: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _ROut: (_: unknown) => _\n}\n\n/** @internal */\nconst proto = {\n  [LayerTypeId]: layerVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nconst MemoMapTypeIdKey = \"effect/Layer/MemoMap\"\n\n/** @internal */\nexport const MemoMapTypeId: Layer.MemoMapTypeId = Symbol.for(\n  MemoMapTypeIdKey\n) as Layer.MemoMapTypeId\n\n/** @internal */\nexport type Primitive =\n  | ExtendScope\n  | Fold\n  | Fresh\n  | FromEffect\n  | Scoped\n  | Suspend\n  | Locally\n  | ProvideTo\n  | ZipWith\n  | ZipWithPar\n\n/** @internal */\nexport type Op<Tag extends string, Body = {}> = Layer.Layer<unknown, unknown, unknown> & Body & {\n  readonly _tag: Tag\n}\n\n/** @internal */\nexport interface ExtendScope extends\n  Op<OpCodes.OP_EXTEND_SCOPE, {\n    readonly layer: Layer.Layer<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface Fold extends\n  Op<OpCodes.OP_FOLD, {\n    readonly layer: Layer.Layer<unknown>\n    failureK(cause: Cause.Cause<unknown>): Layer.Layer<unknown>\n    successK(context: Context.Context<unknown>): Layer.Layer<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface Fresh extends\n  Op<OpCodes.OP_FRESH, {\n    readonly layer: Layer.Layer<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface FromEffect extends\n  Op<OpCodes.OP_FROM_EFFECT, {\n    readonly effect: Effect.Effect<unknown, unknown, Context.Context<unknown>>\n  }>\n{}\n\n/** @internal */\nexport interface Scoped extends\n  Op<OpCodes.OP_SCOPED, {\n    readonly effect: Effect.Effect<unknown, unknown, Context.Context<unknown>>\n  }>\n{}\n\n/** @internal */\nexport interface Suspend extends\n  Op<OpCodes.OP_SUSPEND, {\n    evaluate(): Layer.Layer<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface Locally extends\n  Op<\"Locally\", {\n    readonly self: Layer.Layer<unknown>\n    f(_: Effect.Effect<any, any, any>): Effect.Effect<any, any, any>\n  }>\n{}\n\n/** @internal */\nexport interface ProvideTo extends\n  Op<OpCodes.OP_PROVIDE, {\n    readonly first: Layer.Layer<unknown>\n    readonly second: Layer.Layer<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface ZipWith extends\n  Op<OpCodes.OP_PROVIDE_MERGE, {\n    readonly first: Layer.Layer<unknown>\n    readonly second: Layer.Layer<unknown>\n    zipK(left: Context.Context<unknown>, right: Context.Context<unknown>): Context.Context<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface ZipWithPar extends\n  Op<OpCodes.OP_ZIP_WITH, {\n    readonly first: Layer.Layer<unknown>\n    readonly second: Layer.Layer<unknown>\n    zipK(left: Context.Context<unknown>, right: Context.Context<unknown>): Context.Context<unknown>\n  }>\n{}\n\n/** @internal */\nexport const isLayer = (u: unknown): u is Layer.Layer<unknown, unknown, unknown> => hasProperty(u, LayerTypeId)\n\n/** @internal */\nexport const isFresh = <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>): boolean => {\n  return (self as Primitive)._tag === OpCodes.OP_FRESH\n}\n\n// -----------------------------------------------------------------------------\n// MemoMap\n// -----------------------------------------------------------------------------\n\n/** @internal */\nclass MemoMapImpl implements Layer.MemoMap {\n  readonly [MemoMapTypeId]: Layer.MemoMapTypeId\n  constructor(\n    readonly ref: Synchronized.SynchronizedRef<\n      Map<\n        Layer.Layer<any, any, any>,\n        readonly [Effect.Effect<any, any>, Scope.Scope.Finalizer]\n      >\n    >\n  ) {\n    this[MemoMapTypeId] = MemoMapTypeId\n  }\n\n  /**\n   * Checks the memo map to see if a layer exists. If it is, immediately\n   * returns it. Otherwise, obtains the layer, stores it in the memo map,\n   * and adds a finalizer to the `Scope`.\n   */\n  getOrElseMemoize<RIn, E, ROut>(\n    layer: Layer.Layer<ROut, E, RIn>,\n    scope: Scope.Scope\n  ): Effect.Effect<Context.Context<ROut>, E, RIn> {\n    return pipe(\n      synchronized.modifyEffect(this.ref, (map) => {\n        const inMap = map.get(layer)\n        if (inMap !== undefined) {\n          const [acquire, release] = inMap\n          const cached: Effect.Effect<Context.Context<ROut>, E> = pipe(\n            acquire as Effect.Effect<readonly [FiberRefsPatch.FiberRefsPatch, Context.Context<ROut>], E>,\n            core.flatMap(([patch, b]) => pipe(effect.patchFiberRefs(patch), core.as(b))),\n            core.onExit(core.exitMatch({\n              onFailure: () => core.void,\n              onSuccess: () => core.scopeAddFinalizerExit(scope, release)\n            }))\n          )\n          return core.succeed([cached, map] as const)\n        }\n        return pipe(\n          ref.make(0),\n          core.flatMap((observers) =>\n            pipe(\n              core.deferredMake<readonly [FiberRefsPatch.FiberRefsPatch, Context.Context<ROut>], E>(),\n              core.flatMap((deferred) =>\n                pipe(\n                  ref.make<Scope.Scope.Finalizer>(() => core.void),\n                  core.map((finalizerRef) => {\n                    const resource = core.uninterruptibleMask((restore) =>\n                      pipe(\n                        fiberRuntime.scopeMake(),\n                        core.flatMap((innerScope) =>\n                          pipe(\n                            restore(core.flatMap(\n                              makeBuilder(layer, innerScope, true),\n                              (f) => effect.diffFiberRefs(f(this))\n                            )),\n                            core.exit,\n                            core.flatMap((exit) => {\n                              switch (exit._tag) {\n                                case EffectOpCodes.OP_FAILURE: {\n                                  return pipe(\n                                    core.deferredFailCause(deferred, exit.effect_instruction_i0),\n                                    core.zipRight(core.scopeClose(innerScope, exit)),\n                                    core.zipRight(core.failCause(exit.effect_instruction_i0))\n                                  )\n                                }\n                                case EffectOpCodes.OP_SUCCESS: {\n                                  return pipe(\n                                    ref.set(finalizerRef, (exit) =>\n                                      pipe(\n                                        core.scopeClose(innerScope, exit),\n                                        core.whenEffect(\n                                          ref.modify(observers, (n) => [n === 1, n - 1] as const)\n                                        ),\n                                        core.asVoid\n                                      )),\n                                    core.zipRight(ref.update(observers, (n) => n + 1)),\n                                    core.zipRight(\n                                      core.scopeAddFinalizerExit(scope, (exit) =>\n                                        pipe(\n                                          core.sync(() => map.delete(layer)),\n                                          core.zipRight(ref.get(finalizerRef)),\n                                          core.flatMap((finalizer) => finalizer(exit))\n                                        ))\n                                    ),\n                                    core.zipRight(core.deferredSucceed(deferred, exit.effect_instruction_i0)),\n                                    core.as(exit.effect_instruction_i0[1])\n                                  )\n                                }\n                              }\n                            })\n                          )\n                        )\n                      )\n                    )\n                    const memoized = [\n                      pipe(\n                        core.deferredAwait(deferred),\n                        core.onExit(core.exitMatchEffect({\n                          onFailure: () => core.void,\n                          onSuccess: () => ref.update(observers, (n) => n + 1)\n                        }))\n                      ),\n                      (exit: Exit.Exit<unknown, unknown>) =>\n                        pipe(\n                          ref.get(finalizerRef),\n                          core.flatMap((finalizer) => finalizer(exit))\n                        )\n                    ] as const\n                    return [\n                      resource,\n                      isFresh(layer) ? map : map.set(layer, memoized)\n                    ] as const\n                  })\n                )\n              )\n            )\n          )\n        )\n      }),\n      core.flatten\n    )\n  }\n}\n\n/** @internal */\nexport const makeMemoMap: Effect.Effect<Layer.MemoMap> = core.suspend(() =>\n  core.map(\n    circular.makeSynchronized<\n      Map<\n        Layer.Layer<any, any, any>,\n        readonly [\n          Effect.Effect<any, any>,\n          Scope.Scope.Finalizer\n        ]\n      >\n    >(new Map()),\n    (ref) => new MemoMapImpl(ref)\n  )\n)\n\n/** @internal */\nexport const unsafeMakeMemoMap = (): Layer.MemoMap => new MemoMapImpl(circular.unsafeMakeSynchronized(new Map()))\n\n/** @internal */\nexport const build = <RIn, E, ROut>(\n  self: Layer.Layer<ROut, E, RIn>\n): Effect.Effect<Context.Context<ROut>, E, RIn | Scope.Scope> =>\n  fiberRuntime.scopeWith((scope) => buildWithScope(self, scope))\n\n/** @internal */\nexport const buildWithScope = dual<\n  (\n    scope: Scope.Scope\n  ) => <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>) => Effect.Effect<Context.Context<ROut>, E, RIn>,\n  <RIn, E, ROut>(\n    self: Layer.Layer<ROut, E, RIn>,\n    scope: Scope.Scope\n  ) => Effect.Effect<Context.Context<ROut>, E, RIn>\n>(2, (self, scope) =>\n  core.flatMap(\n    makeMemoMap,\n    (memoMap) => core.flatMap(makeBuilder(self, scope), (run) => run(memoMap))\n  ))\n\n/** @internal */\nexport const buildWithMemoMap = dual<\n  (\n    memoMap: Layer.MemoMap,\n    scope: Scope.Scope\n  ) => <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>) => Effect.Effect<Context.Context<ROut>, E, RIn>,\n  <RIn, E, ROut>(\n    self: Layer.Layer<ROut, E, RIn>,\n    memoMap: Layer.MemoMap,\n    scope: Scope.Scope\n  ) => Effect.Effect<Context.Context<ROut>, E, RIn>\n>(3, (self, memoMap, scope) => core.flatMap(makeBuilder(self, scope), (run) => run(memoMap)))\n\nconst makeBuilder = <RIn, E, ROut>(\n  self: Layer.Layer<ROut, E, RIn>,\n  scope: Scope.Scope,\n  inMemoMap = false\n): Effect.Effect<(memoMap: Layer.MemoMap) => Effect.Effect<Context.Context<ROut>, E, RIn>> => {\n  const op = self as Primitive\n  switch (op._tag) {\n    case \"Locally\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) => op.f(memoMap.getOrElseMemoize(op.self, scope)))\n    }\n    case \"ExtendScope\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        fiberRuntime.scopeWith(\n          (scope) => memoMap.getOrElseMemoize(op.layer, scope)\n        ) as unknown as Effect.Effect<Context.Context<ROut>, E, RIn>\n      )\n    }\n    case \"Fold\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        pipe(\n          memoMap.getOrElseMemoize(op.layer, scope),\n          core.matchCauseEffect({\n            onFailure: (cause) => memoMap.getOrElseMemoize(op.failureK(cause), scope),\n            onSuccess: (value) => memoMap.getOrElseMemoize(op.successK(value), scope)\n          })\n        )\n      )\n    }\n    case \"Fresh\": {\n      return core.sync(() => (_: Layer.MemoMap) => pipe(op.layer, buildWithScope(scope)))\n    }\n    case \"FromEffect\": {\n      return inMemoMap\n        ? core.sync(() => (_: Layer.MemoMap) => op.effect as Effect.Effect<Context.Context<ROut>, E, RIn>)\n        : core.sync(() => (memoMap: Layer.MemoMap) => memoMap.getOrElseMemoize(self, scope))\n    }\n    case \"Provide\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        pipe(\n          memoMap.getOrElseMemoize(op.first, scope),\n          core.flatMap((env) =>\n            pipe(\n              memoMap.getOrElseMemoize(op.second, scope),\n              core.provideContext(env)\n            )\n          )\n        )\n      )\n    }\n    case \"Scoped\": {\n      return inMemoMap\n        ? core.sync(() => (_: Layer.MemoMap) =>\n          fiberRuntime.scopeExtend(\n            op.effect as Effect.Effect<Context.Context<ROut>, E, RIn>,\n            scope\n          )\n        )\n        : core.sync(() => (memoMap: Layer.MemoMap) => memoMap.getOrElseMemoize(self, scope))\n    }\n    case \"Suspend\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        memoMap.getOrElseMemoize(\n          op.evaluate(),\n          scope\n        )\n      )\n    }\n    case \"ProvideMerge\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        pipe(\n          memoMap.getOrElseMemoize(op.first, scope),\n          core.zipWith(\n            memoMap.getOrElseMemoize(op.second, scope),\n            op.zipK\n          )\n        )\n      )\n    }\n    case \"ZipWith\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        pipe(\n          memoMap.getOrElseMemoize(op.first, scope),\n          fiberRuntime.zipWithOptions(\n            memoMap.getOrElseMemoize(op.second, scope),\n            op.zipK,\n            { concurrent: true }\n          )\n        )\n      )\n    }\n  }\n}\n\n// -----------------------------------------------------------------------------\n// Layer\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const catchAll = dual<\n  <E, RIn2, E2, ROut2>(\n    onError: (error: E) => Layer.Layer<ROut2, E2, RIn2>\n  ) => <RIn, ROut>(self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut & ROut2, E2, RIn | RIn2>,\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    self: Layer.Layer<ROut, E, RIn>,\n    onError: (error: E) => Layer.Layer<ROut2, E2, RIn2>\n  ) => Layer.Layer<ROut & ROut2, E2, RIn | RIn2>\n>(2, (self, onFailure) => match(self, { onFailure, onSuccess: succeedContext }))\n\n/** @internal */\nexport const catchAllCause = dual<\n  <E, RIn2, E2, ROut2>(\n    onError: (cause: Cause.Cause<E>) => Layer.Layer<ROut2, E2, RIn2>\n  ) => <RIn, ROut>(self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut & ROut2, E2, RIn | RIn2>,\n  <RIn, E, ROut, RIn2, E2, ROut22>(\n    self: Layer.Layer<ROut, E, RIn>,\n    onError: (cause: Cause.Cause<E>) => Layer.Layer<ROut22, E2, RIn2>\n  ) => Layer.Layer<ROut & ROut22, E2, RIn | RIn2>\n>(2, (self, onFailure) => matchCause(self, { onFailure, onSuccess: succeedContext }))\n\n/** @internal */\nexport const die = (defect: unknown): Layer.Layer<unknown> => failCause(Cause.die(defect))\n\n/** @internal */\nexport const dieSync = (evaluate: LazyArg<unknown>): Layer.Layer<unknown> => failCauseSync(() => Cause.die(evaluate()))\n\n/** @internal */\nexport const discard = <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>): Layer.Layer<never, E, RIn> =>\n  map(self, () => Context.empty())\n\n/** @internal */\nexport const context = <R>(): Layer.Layer<R, never, R> => fromEffectContext(core.context<R>())\n\n/** @internal */\nexport const extendScope = <RIn, E, ROut>(\n  self: Layer.Layer<ROut, E, RIn>\n): Layer.Layer<ROut, E, RIn | Scope.Scope> => {\n  const extendScope = Object.create(proto)\n  extendScope._tag = OpCodes.OP_EXTEND_SCOPE\n  extendScope.layer = self\n  return extendScope\n}\n\n/** @internal */\nexport const fail = <E>(error: E): Layer.Layer<unknown, E> => failCause(Cause.fail(error))\n\n/** @internal */\nexport const failSync = <E>(evaluate: LazyArg<E>): Layer.Layer<unknown, E> =>\n  failCauseSync(() => Cause.fail(evaluate()))\n\n/** @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Layer.Layer<unknown, E> => fromEffectContext(core.failCause(cause))\n\n/** @internal */\nexport const failCauseSync = <E>(evaluate: LazyArg<Cause.Cause<E>>): Layer.Layer<unknown, E> =>\n  fromEffectContext(core.failCauseSync(evaluate))\n\n/** @internal */\nexport const flatMap = dual<\n  <A, A2, E2, R2>(\n    f: (context: Context.Context<A>) => Layer.Layer<A2, E2, R2>\n  ) => <E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Layer.Layer<A, E, R>,\n    f: (context: Context.Context<A>) => Layer.Layer<A2, E2, R2>\n  ) => Layer.Layer<A2, E | E2, R | R2>\n>(2, (self, f) => match(self, { onFailure: fail, onSuccess: f }))\n\n/** @internal */\nexport const flatten = dual<\n  <I, A, E2, R2>(\n    tag: Context.Tag<I, Layer.Layer<A, E2, R2>>\n  ) => <E, R>(\n    self: Layer.Layer<I, E, R>\n  ) => Layer.Layer<A, E | E2, R | R2>,\n  <I, E, R, A, E2, R2>(\n    self: Layer.Layer<I, E, R>,\n    tag: Context.Tag<I, Layer.Layer<A, E2, R2>>\n  ) => Layer.Layer<A, E | E2, R | R2>\n>(2, (self, tag) => flatMap(self, Context.get(tag as any) as any))\n\n/** @internal */\nexport const fresh = <A, E, R>(self: Layer.Layer<A, E, R>): Layer.Layer<A, E, R> => {\n  const fresh = Object.create(proto)\n  fresh._tag = OpCodes.OP_FRESH\n  fresh.layer = self\n  return fresh\n}\n\n/** @internal */\nexport const fromEffect = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ) => <E, R>(\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer.Layer<Context.Tag.Identifier<T>, E, R>,\n  <T extends Context.Tag<any, any>, E, R>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer.Layer<Context.Tag.Identifier<T>, E, R>\n>(2, (a, b) => {\n  const tagFirst = Context.isTag(a)\n  const tag = (tagFirst ? a : b) as Context.Tag<unknown, unknown>\n  const effect = tagFirst ? b : a\n  return fromEffectContext(core.map(effect, (service) => Context.make(tag, service)))\n})\n\n/** @internal */\nexport const fromEffectDiscard = <X, E, R>(effect: Effect.Effect<X, E, R>) =>\n  fromEffectContext(core.map(effect, () => Context.empty()))\n\n/** @internal */\nexport function fromEffectContext<A, E, R>(\n  effect: Effect.Effect<Context.Context<A>, E, R>\n): Layer.Layer<A, E, R> {\n  const fromEffect = Object.create(proto)\n  fromEffect._tag = OpCodes.OP_FROM_EFFECT\n  fromEffect.effect = effect\n  return fromEffect\n}\n\n/** @internal */\nexport const fiberRefLocally = dual<\n  <X>(ref: FiberRef<X>, value: X) => <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>,\n  <A, E, R, X>(self: Layer.Layer<A, E, R>, ref: FiberRef<X>, value: X) => Layer.Layer<A, E, R>\n>(3, (self, ref, value) => locallyEffect(self, core.fiberRefLocally(ref, value)))\n\n/** @internal */\nexport const locallyEffect = dual<\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    f: (_: Effect.Effect<RIn, E, Context.Context<ROut>>) => Effect.Effect<RIn2, E2, Context.Context<ROut2>>\n  ) => (self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut2, E2, RIn2>,\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    self: Layer.Layer<ROut, E, RIn>,\n    f: (_: Effect.Effect<RIn, E, Context.Context<ROut>>) => Effect.Effect<RIn2, E2, Context.Context<ROut2>>\n  ) => Layer.Layer<ROut2, E2, RIn2>\n>(2, (self, f) => {\n  const locally = Object.create(proto)\n  locally._tag = \"Locally\"\n  locally.self = self\n  locally.f = f\n  return locally\n})\n\n/** @internal */\nexport const fiberRefLocallyWith = dual<\n  <X>(ref: FiberRef<X>, value: (_: X) => X) => <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>,\n  <A, E, R, X>(self: Layer.Layer<A, E, R>, ref: FiberRef<X>, value: (_: X) => X) => Layer.Layer<A, E, R>\n>(3, (self, ref, value) => locallyEffect(self, core.fiberRefLocallyWith(ref, value)))\n\n/** @internal */\nexport const fiberRefLocallyScoped = <A>(self: FiberRef<A>, value: A): Layer.Layer<never> =>\n  scopedDiscard(fiberRuntime.fiberRefLocallyScoped(self, value))\n\n/** @internal */\nexport const fiberRefLocallyScopedWith = <A>(self: FiberRef<A>, value: (_: A) => A): Layer.Layer<never> =>\n  scopedDiscard(fiberRuntime.fiberRefLocallyScopedWith(self, value))\n\n/** @internal */\nexport const fromFunction = <A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n  tagA: A,\n  tagB: B,\n  f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n): Layer.Layer<Context.Tag.Identifier<B>, never, Context.Tag.Identifier<A>> =>\n  fromEffectContext(core.map(tagA, (a) => Context.make(tagB, f(a))))\n\n/** @internal */\nexport const launch = <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>): Effect.Effect<never, E, RIn> =>\n  fiberRuntime.scopedEffect(\n    core.zipRight(\n      fiberRuntime.scopeWith((scope) => pipe(self, buildWithScope(scope))),\n      core.never\n    )\n  )\n\n/** @internal */\nexport const map = dual<\n  <A, B>(\n    f: (context: Context.Context<A>) => Context.Context<B>\n  ) => <E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<B, E, R>,\n  <A, E, R, B>(\n    self: Layer.Layer<A, E, R>,\n    f: (context: Context.Context<A>) => Context.Context<B>\n  ) => Layer.Layer<B, E, R>\n>(2, (self, f) => flatMap(self, (context) => succeedContext(f(context))))\n\n/** @internal */\nexport const mapError = dual<\n  <E, E2>(f: (error: E) => E2) => <A, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E2, R>,\n  <A, E, R, E2>(self: Layer.Layer<A, E, R>, f: (error: E) => E2) => Layer.Layer<A, E2, R>\n>(2, (self, f) => catchAll(self, (error) => failSync(() => f(error))))\n\n/** @internal */\nexport const matchCause = dual<\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Layer.Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer.Layer<A3, E3, R3>\n    }\n  ) => <R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A2 & A3, E2 | E3, R | R2 | R3>,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Layer.Layer<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Layer.Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer.Layer<A3, E3, R3>\n    }\n  ) => Layer.Layer<A2 & A3, E2 | E3, R | R2 | R3>\n>(2, (self, { onFailure, onSuccess }) => {\n  const fold = Object.create(proto)\n  fold._tag = OpCodes.OP_FOLD\n  fold.layer = self\n  fold.failureK = onFailure\n  fold.successK = onSuccess\n  return fold\n})\n\n/** @internal */\nexport const match = dual<\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (error: E) => Layer.Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer.Layer<A3, E3, R3>\n    }\n  ) => <R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A2 & A3, E2 | E3, R | R2 | R3>,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Layer.Layer<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => Layer.Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer.Layer<A3, E3, R3>\n    }\n  ) => Layer.Layer<A2 & A3, E2 | E3, R | R2 | R3>\n>(2, (self, { onFailure, onSuccess }) =>\n  matchCause(self, {\n    onFailure: (cause) => {\n      const failureOrCause = Cause.failureOrCause(cause)\n      switch (failureOrCause._tag) {\n        case \"Left\": {\n          return onFailure(failureOrCause.left)\n        }\n        case \"Right\": {\n          return failCause(failureOrCause.right)\n        }\n      }\n    },\n    onSuccess\n  }))\n\n/** @internal */\nexport const memoize = <RIn, E, ROut>(\n  self: Layer.Layer<ROut, E, RIn>\n): Effect.Effect<Layer.Layer<ROut, E, RIn>, never, Scope.Scope> =>\n  fiberRuntime.scopeWith((scope) =>\n    core.map(\n      effect.memoize(buildWithScope(self, scope)),\n      fromEffectContext\n    )\n  )\n\n/** @internal */\nexport const merge = dual<\n  <RIn2, E2, ROut2>(\n    that: Layer.Layer<ROut2, E2, RIn2>\n  ) => <RIn, E1, ROut>(self: Layer.Layer<ROut, E1, RIn>) => Layer.Layer<\n    ROut | ROut2,\n    E1 | E2,\n    RIn | RIn2\n  >,\n  <RIn, E1, ROut, RIn2, E2, ROut2>(self: Layer.Layer<ROut, E1, RIn>, that: Layer.Layer<ROut2, E2, RIn2>) => Layer.Layer<\n    ROut | ROut2,\n    E1 | E2,\n    RIn | RIn2\n  >\n>(2, (self, that) => zipWith(self, that, (a, b) => Context.merge(a, b)))\n\n/** @internal */\nexport const mergeAll = <Layers extends [Layer.Layer<never, any, any>, ...Array<Layer.Layer<never, any, any>>]>(\n  ...layers: Layers\n): Layer.Layer<\n  { [k in keyof Layers]: Layer.Layer.Success<Layers[k]> }[number],\n  { [k in keyof Layers]: Layer.Layer.Error<Layers[k]> }[number],\n  { [k in keyof Layers]: Layer.Layer.Context<Layers[k]> }[number]\n> => {\n  let final = layers[0]\n  for (let i = 1; i < layers.length; i++) {\n    final = merge(final, layers[i])\n  }\n  return final as any\n}\n\n/** @internal */\nexport const orDie = <A, E, R>(self: Layer.Layer<A, E, R>): Layer.Layer<A, never, R> =>\n  catchAll(self, (defect) => die(defect))\n\n/** @internal */\nexport const orElse = dual<\n  <A2, E2, R2>(\n    that: LazyArg<Layer.Layer<A2, E2, R2>>\n  ) => <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A & A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Layer.Layer<A, E, R>,\n    that: LazyArg<Layer.Layer<A2, E2, R2>>\n  ) => Layer.Layer<A & A2, E | E2, R | R2>\n>(2, (self, that) => catchAll(self, that))\n\n/** @internal */\nexport const passthrough = <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>): Layer.Layer<RIn | ROut, E, RIn> =>\n  merge(context<RIn>(), self)\n\n/** @internal */\nexport const project = dual<\n  <A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n    tagA: A,\n    tagB: B,\n    f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n  ) => <RIn, E>(self: Layer.Layer<Context.Tag.Identifier<A>, E, RIn>) => Layer.Layer<Context.Tag.Identifier<B>, E, RIn>,\n  <RIn, E, A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n    self: Layer.Layer<Context.Tag.Identifier<A>, E, RIn>,\n    tagA: A,\n    tagB: B,\n    f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n  ) => Layer.Layer<Context.Tag.Identifier<B>, E, RIn>\n>(4, (self, tagA, tagB, f) => map(self, (context) => Context.make(tagB, f(Context.unsafeGet(context, tagA)))))\n\n/** @internal */\nexport const retry = dual<\n  <X, E, RIn2>(\n    schedule: Schedule.Schedule<X, E, RIn2>\n  ) => <ROut, RIn>(\n    self: Layer.Layer<ROut, E, RIn>\n  ) => Layer.Layer<ROut, E, RIn | RIn2>,\n  <ROut, E, RIn, X, RIn2>(\n    self: Layer.Layer<ROut, E, RIn>,\n    schedule: Schedule.Schedule<X, E, RIn2>\n  ) => Layer.Layer<ROut, E, RIn | RIn2>\n>(2, (self, schedule) =>\n  suspend(() => {\n    const stateTag = Context.GenericTag<{ state: unknown }>(\"effect/Layer/retry/{ state: unknown }\")\n    return pipe(\n      succeed(stateTag, { state: schedule.initial }),\n      flatMap((env: Context.Context<{ state: unknown }>) =>\n        retryLoop(self, schedule, stateTag, pipe(env, Context.get(stateTag)).state)\n      )\n    )\n  }))\n\nconst retryLoop = <ROut, E, RIn, X, RIn2>(\n  self: Layer.Layer<ROut, E, RIn>,\n  schedule: Schedule.Schedule<X, E, RIn2>,\n  stateTag: Context.Tag<{ state: unknown }, { state: unknown }>,\n  state: unknown\n): Layer.Layer<ROut, E, RIn | RIn2> => {\n  return pipe(\n    self,\n    catchAll((error) =>\n      pipe(\n        retryUpdate(schedule, stateTag, error, state),\n        flatMap((env) => fresh(retryLoop(self, schedule, stateTag, pipe(env, Context.get(stateTag)).state)))\n      )\n    )\n  )\n}\n\nconst retryUpdate = <X, E, RIn>(\n  schedule: Schedule.Schedule<X, E, RIn>,\n  stateTag: Context.Tag<{ state: unknown }, { state: unknown }>,\n  error: E,\n  state: unknown\n): Layer.Layer<{ state: unknown }, E, RIn> => {\n  return fromEffect(\n    stateTag,\n    pipe(\n      Clock.currentTimeMillis,\n      core.flatMap((now) =>\n        pipe(\n          schedule.step(now, error, state),\n          core.flatMap(([state, _, decision]) =>\n            ScheduleDecision.isDone(decision) ?\n              core.fail(error) :\n              pipe(\n                Clock.sleep(Duration.millis(Intervals.start(decision.intervals) - now)),\n                core.as({ state })\n              )\n          )\n        )\n      )\n    )\n  )\n}\n\n/** @internal */\nexport const scoped = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ) => <E, R>(\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer.Layer<Context.Tag.Identifier<T>, E, Exclude<R, Scope.Scope>>,\n  <T extends Context.Tag<any, any>, E, R>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer.Layer<Context.Tag.Identifier<T>, E, Exclude<R, Scope.Scope>>\n>(2, (a, b) => {\n  const tagFirst = Context.isTag(a)\n  const tag = (tagFirst ? a : b) as Context.Tag<unknown, unknown>\n  const effect = tagFirst ? b : a\n  return scopedContext(core.map(effect, (service) => Context.make(tag, service)))\n})\n\n/** @internal */\nexport const scopedDiscard = <X, E, R>(\n  effect: Effect.Effect<X, E, R>\n): Layer.Layer<never, E, Exclude<R, Scope.Scope>> => scopedContext(pipe(effect, core.as(Context.empty())))\n\n/** @internal */\nexport const scopedContext = <A, E, R>(\n  effect: Effect.Effect<Context.Context<A>, E, R>\n): Layer.Layer<A, E, Exclude<R, Scope.Scope>> => {\n  const scoped = Object.create(proto)\n  scoped._tag = OpCodes.OP_SCOPED\n  scoped.effect = effect\n  return scoped\n}\n\n/** @internal */\nexport const scope: Layer.Layer<Scope.Scope.Closeable> = scopedContext(\n  core.map(\n    fiberRuntime.acquireRelease(\n      fiberRuntime.scopeMake(),\n      (scope, exit) => scope.close(exit)\n    ),\n    (scope) => Context.make(Scope.Scope, scope)\n  )\n)\n\n/** @internal */\nexport const service = <T extends Context.Tag<any, any>>(\n  tag: T\n): Layer.Layer<Context.Tag.Identifier<T>, never, Context.Tag.Identifier<T>> => fromEffect(tag, tag)\n\n/** @internal */\nexport const succeed = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ) => (\n    resource: Context.Tag.Service<T>\n  ) => Layer.Layer<Context.Tag.Identifier<T>>,\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => Layer.Layer<Context.Tag.Identifier<T>>\n>(2, (a, b) => {\n  const tagFirst = Context.isTag(a)\n  const tag = (tagFirst ? a : b) as Context.Tag<unknown, unknown>\n  const resource = tagFirst ? b : a\n  return fromEffectContext(core.succeed(Context.make(tag, resource)))\n})\n\n/** @internal */\nexport const succeedContext = <A>(\n  context: Context.Context<A>\n): Layer.Layer<A> => {\n  return fromEffectContext(core.succeed(context))\n}\n\n/** @internal */\nexport const empty = succeedContext(Context.empty())\n\n/** @internal */\nexport const suspend = <RIn, E, ROut>(\n  evaluate: LazyArg<Layer.Layer<ROut, E, RIn>>\n): Layer.Layer<ROut, E, RIn> => {\n  const suspend = Object.create(proto)\n  suspend._tag = OpCodes.OP_SUSPEND\n  suspend.evaluate = evaluate\n  return suspend\n}\n\n/** @internal */\nexport const sync = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ) => (\n    evaluate: LazyArg<Context.Tag.Service<T>>\n  ) => Layer.Layer<Context.Tag.Identifier<T>>,\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    evaluate: LazyArg<Context.Tag.Service<T>>\n  ) => Layer.Layer<Context.Tag.Identifier<T>>\n>(2, (a, b) => {\n  const tagFirst = Context.isTag(a)\n  const tag = (tagFirst ? a : b) as Context.Tag<unknown, unknown>\n  const evaluate = tagFirst ? b : a\n  return fromEffectContext(core.sync(() => Context.make(tag, evaluate())))\n})\n\n/** @internal */\nexport const syncContext = <A>(evaluate: LazyArg<Context.Context<A>>): Layer.Layer<A> => {\n  return fromEffectContext(core.sync(evaluate))\n}\n\n/** @internal */\nexport const tap = dual<\n  <ROut, XR extends ROut, RIn2, E2, X>(\n    f: (context: Context.Context<XR>) => Effect.Effect<X, E2, RIn2>\n  ) => <RIn, E>(self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut, E | E2, RIn | RIn2>,\n  <RIn, E, ROut, XR extends ROut, RIn2, E2, X>(\n    self: Layer.Layer<ROut, E, RIn>,\n    f: (context: Context.Context<XR>) => Effect.Effect<X, E2, RIn2>\n  ) => Layer.Layer<ROut, E | E2, RIn | RIn2>\n>(2, (self, f) => flatMap(self, (context) => fromEffectContext(core.as(f(context), context))))\n\n/** @internal */\nexport const tapError = dual<\n  <E, XE extends E, RIn2, E2, X>(\n    f: (e: XE) => Effect.Effect<X, E2, RIn2>\n  ) => <RIn, ROut>(self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut, E | E2, RIn | RIn2>,\n  <RIn, E, XE extends E, ROut, RIn2, E2, X>(\n    self: Layer.Layer<ROut, E, RIn>,\n    f: (e: XE) => Effect.Effect<X, E2, RIn2>\n  ) => Layer.Layer<ROut, E | E2, RIn | RIn2>\n>(2, (self, f) =>\n  catchAll(\n    self,\n    (e) => fromEffectContext(core.flatMap(f(e as any), () => core.fail(e)))\n  ))\n\n/** @internal */\nexport const tapErrorCause = dual<\n  <E, XE extends E, RIn2, E2, X>(\n    f: (cause: Cause.Cause<XE>) => Effect.Effect<X, E2, RIn2>\n  ) => <RIn, ROut>(self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut, E | E2, RIn | RIn2>,\n  <RIn, E, XE extends E, ROut, RIn2, E2, X>(\n    self: Layer.Layer<ROut, E, RIn>,\n    f: (cause: Cause.Cause<XE>) => Effect.Effect<X, E2, RIn2>\n  ) => Layer.Layer<ROut, E | E2, RIn | RIn2>\n>(2, (self, f) =>\n  catchAllCause(\n    self,\n    (cause) => fromEffectContext(core.flatMap(f(cause as any), () => core.failCause(cause)))\n  ))\n\n/** @internal */\nexport const toRuntime = <RIn, E, ROut>(\n  self: Layer.Layer<ROut, E, RIn>\n): Effect.Effect<Runtime.Runtime<ROut>, E, RIn | Scope.Scope> =>\n  pipe(\n    fiberRuntime.scopeWith((scope) => buildWithScope(self, scope)),\n    core.flatMap((context) =>\n      pipe(\n        runtime.runtime<ROut>(),\n        core.provideContext(context)\n      )\n    )\n  )\n\n/** @internal */\nexport const toRuntimeWithMemoMap = dual<\n  (\n    memoMap: Layer.MemoMap\n  ) => <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>) => Effect.Effect<Runtime.Runtime<ROut>, E, RIn | Scope.Scope>,\n  <RIn, E, ROut>(\n    self: Layer.Layer<ROut, E, RIn>,\n    memoMap: Layer.MemoMap\n  ) => Effect.Effect<Runtime.Runtime<ROut>, E, RIn | Scope.Scope>\n>(2, (self, memoMap) =>\n  core.flatMap(\n    fiberRuntime.scopeWith((scope) => buildWithMemoMap(self, memoMap, scope)),\n    (context) =>\n      pipe(\n        runtime.runtime<any>(),\n        core.provideContext(context)\n      )\n  ))\n\n/** @internal */\nexport const provide = dual<\n  <RIn, E, ROut>(\n    self: Layer.Layer<ROut, E, RIn>\n  ) => <RIn2, E2, ROut2>(\n    that: Layer.Layer<ROut2, E2, RIn2>\n  ) => Layer.Layer<ROut2, E | E2, RIn | Exclude<RIn2, ROut>>,\n  <RIn2, E2, ROut2, RIn, E, ROut>(\n    that: Layer.Layer<ROut2, E2, RIn2>,\n    self: Layer.Layer<ROut, E, RIn>\n  ) => Layer.Layer<ROut2, E | E2, RIn | Exclude<RIn2, ROut>>\n>(2, <RIn2, E2, ROut2, RIn, E, ROut>(\n  that: Layer.Layer<ROut2, E2, RIn2>,\n  self: Layer.Layer<ROut, E, RIn>\n) =>\n  suspend(() => {\n    const provideTo = Object.create(proto)\n    provideTo._tag = OpCodes.OP_PROVIDE\n    provideTo.first = Object.create(proto, {\n      _tag: { value: OpCodes.OP_PROVIDE_MERGE, enumerable: true },\n      first: { value: context<Exclude<RIn2, ROut>>(), enumerable: true },\n      second: { value: self },\n      zipK: { value: (a: Context.Context<ROut>, b: Context.Context<ROut2>) => pipe(a, Context.merge(b)) }\n    })\n    provideTo.second = that\n    return provideTo\n  }))\n\n/** @internal */\nexport const provideMerge = dual<\n  <RIn, E, ROut>(\n    self: Layer.Layer<ROut, E, RIn>\n  ) => <RIn2, E2, ROut2>(\n    that: Layer.Layer<ROut2, E2, RIn2>\n  ) => Layer.Layer<ROut | ROut2, E2 | E, RIn | Exclude<RIn2, ROut>>,\n  <RIn2, E2, ROut2, RIn, E, ROut>(\n    that: Layer.Layer<ROut2, E2, RIn2>,\n    self: Layer.Layer<ROut, E, RIn>\n  ) => Layer.Layer<ROut | ROut2, E2 | E, RIn | Exclude<RIn2, ROut>>\n>(2, <RIn2, E2, ROut2, RIn, E, ROut>(that: Layer.Layer<ROut2, E2, RIn2>, self: Layer.Layer<ROut, E, RIn>) => {\n  const zipWith = Object.create(proto)\n  zipWith._tag = OpCodes.OP_PROVIDE_MERGE\n  zipWith.first = self\n  zipWith.second = provide(that, self)\n  zipWith.zipK = (a: Context.Context<ROut>, b: Context.Context<ROut2>): Context.Context<ROut | ROut2> => {\n    return pipe(a, Context.merge(b))\n  }\n  return zipWith\n})\n\n/** @internal */\nexport const zipWith = dual<\n  <B, E2, R2, A, C>(\n    that: Layer.Layer<B, E2, R2>,\n    f: (a: Context.Context<A>, b: Context.Context<B>) => Context.Context<C>\n  ) => <E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<C, E | E2, R | R2>,\n  <A, E, R, B, E2, R2, C>(\n    self: Layer.Layer<A, E, R>,\n    that: Layer.Layer<B, E2, R2>,\n    f: (a: Context.Context<A>, b: Context.Context<B>) => Context.Context<C>\n  ) => Layer.Layer<C, E | E2, R | R2>\n>(3, (self, that, f) =>\n  suspend(() => {\n    const zipWith = Object.create(proto)\n    zipWith._tag = OpCodes.OP_ZIP_WITH\n    zipWith.first = self\n    zipWith.second = that\n    zipWith.zipK = f\n    return zipWith\n  }))\n\n/** @internal */\nexport const unwrapEffect = <A, E1, R1, E, R>(\n  self: Effect.Effect<Layer.Layer<A, E1, R1>, E, R>\n): Layer.Layer<A, E | E1, R | R1> => {\n  const tag = Context.GenericTag<Layer.Layer<A, E1, R1>>(\"effect/Layer/unwrapEffect/Layer.Layer<R1, E1, A>\")\n  return flatMap(fromEffect(tag, self), (context) => Context.get(context, tag))\n}\n\n/** @internal */\nexport const unwrapScoped = <A, E1, R1, E, R>(\n  self: Effect.Effect<Layer.Layer<A, E1, R1>, E, R>\n): Layer.Layer<A, E | E1, R1 | Exclude<R, Scope.Scope>> => {\n  const tag = Context.GenericTag<Layer.Layer<A, E1, R1>>(\"effect/Layer/unwrapScoped/Layer.Layer<R1, E1, A>\")\n  return flatMap(scoped(tag, self), (context) => Context.get(context, tag))\n}\n\n// -----------------------------------------------------------------------------\n// logging\n// -----------------------------------------------------------------------------\n\nexport const annotateLogs = dual<\n  {\n    (key: string, value: unknown): <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>\n    (\n      values: Record<string, unknown>\n    ): <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>\n  },\n  {\n    <A, E, R>(self: Layer.Layer<A, E, R>, key: string, value: unknown): Layer.Layer<A, E, R>\n    <A, E, R>(self: Layer.Layer<A, E, R>, values: Record<string, unknown>): Layer.Layer<A, E, R>\n  }\n>(\n  (args) => isLayer(args[0]),\n  function<A, E, R>() {\n    const args = arguments\n    return fiberRefLocallyWith(\n      args[0] as Layer.Layer<A, E, R>,\n      core.currentLogAnnotations,\n      typeof args[1] === \"string\"\n        ? HashMap.set(args[1], args[2])\n        : (annotations) =>\n          Object.entries(args[1] as Record<string, unknown>).reduce(\n            (acc, [key, value]) => HashMap.set(acc, key, value),\n            annotations\n          )\n    )\n  }\n)\n\n// -----------------------------------------------------------------------------\n// tracing\n// -----------------------------------------------------------------------------\n\nexport const annotateSpans = dual<\n  {\n    (key: string, value: unknown): <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>\n    (\n      values: Record<string, unknown>\n    ): <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>\n  },\n  {\n    <A, E, R>(self: Layer.Layer<A, E, R>, key: string, value: unknown): Layer.Layer<A, E, R>\n    <A, E, R>(self: Layer.Layer<A, E, R>, values: Record<string, unknown>): Layer.Layer<A, E, R>\n  }\n>(\n  (args) => isLayer(args[0]),\n  function<A, E, R>() {\n    const args = arguments\n    return fiberRefLocallyWith(\n      args[0] as Layer.Layer<A, E, R>,\n      core.currentTracerSpanAnnotations,\n      typeof args[1] === \"string\"\n        ? HashMap.set(args[1], args[2])\n        : (annotations) =>\n          Object.entries(args[1] as Record<string, unknown>).reduce(\n            (acc, [key, value]) => HashMap.set(acc, key, value),\n            annotations\n          )\n    )\n  }\n)\n\n/** @internal */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions & {\n      readonly onEnd?:\n        | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n        | undefined\n    }\n  ): <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Layer.Layer<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions & {\n      readonly onEnd?:\n        | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n        | undefined\n    }\n  ): Layer.Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = tracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1]) as Tracer.SpanOptions & {\n    readonly onEnd?:\n      | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n      | undefined\n  }\n  if (dataFirst) {\n    const self = arguments[0]\n    return unwrapScoped(\n      core.map(\n        options?.onEnd\n          ? core.tap(\n            fiberRuntime.makeSpanScoped(name, options),\n            (span) => fiberRuntime.addFinalizer((exit) => options.onEnd!(span, exit))\n          )\n          : fiberRuntime.makeSpanScoped(name, options),\n        (span) => withParentSpan(self, span)\n      )\n    )\n  }\n  return (self: Layer.Layer<any, any, any>) =>\n    unwrapScoped(\n      core.map(\n        options?.onEnd\n          ? core.tap(\n            fiberRuntime.makeSpanScoped(name, options),\n            (span) => fiberRuntime.addFinalizer((exit) => options.onEnd!(span, exit))\n          )\n          : fiberRuntime.makeSpanScoped(name, options),\n        (span) => withParentSpan(self, span)\n      )\n    )\n} as any\n\n/** @internal */\nexport const withParentSpan = dual<\n  (\n    span: Tracer.AnySpan\n  ) => <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, Exclude<R, Tracer.ParentSpan>>,\n  <A, E, R>(self: Layer.Layer<A, E, R>, span: Tracer.AnySpan) => Layer.Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n>(2, (self, span) => provide(self, succeedContext(Context.make(tracer.spanTag, span))))\n\n// circular with Effect\n\nconst provideSomeLayer = dual<\n  <A2, E2, R2>(\n    layer: Layer.Layer<A2, E2, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R2 | Exclude<R, A2>>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    layer: Layer.Layer<A2, E2, R2>\n  ) => Effect.Effect<A, E | E2, R2 | Exclude<R, A2>>\n>(2, (self, layer) =>\n  core.acquireUseRelease(\n    fiberRuntime.scopeMake(),\n    (scope) =>\n      core.flatMap(\n        buildWithScope(layer, scope),\n        (context) => core.provideSomeContext(self, context)\n      ),\n    (scope, exit) => core.scopeClose(scope, exit)\n  ))\n\nconst provideSomeRuntime = dual<\n  <R>(context: Runtime.Runtime<R>) => <A, E, R1>(self: Effect.Effect<A, E, R1>) => Effect.Effect<A, E, Exclude<R1, R>>,\n  <A, E, R1, R>(self: Effect.Effect<A, E, R1>, context: Runtime.Runtime<R>) => Effect.Effect<A, E, Exclude<R1, R>>\n>(2, (self, rt) => {\n  const patchRefs = FiberRefsPatch.diff(runtime.defaultRuntime.fiberRefs, rt.fiberRefs)\n  const patchFlags = runtimeFlags.diff(runtime.defaultRuntime.runtimeFlags, rt.runtimeFlags)\n  return core.uninterruptibleMask((restore) =>\n    core.withFiberRuntime((fiber) => {\n      const oldContext = fiber.getFiberRef(core.currentContext)\n      const oldRefs = fiber.getFiberRefs()\n      const newRefs = FiberRefsPatch.patch(fiber.id(), oldRefs)(patchRefs)\n      const oldFlags = fiber._runtimeFlags\n      const newFlags = runtimeFlags.patch(patchFlags)(oldFlags)\n      const rollbackRefs = FiberRefsPatch.diff(newRefs, oldRefs)\n      const rollbackFlags = runtimeFlags.diff(newFlags, oldFlags)\n      fiber.setFiberRefs(newRefs)\n      fiber._runtimeFlags = newFlags\n      return fiberRuntime.ensuring(\n        core.provideSomeContext(restore(self), Context.merge(oldContext, rt.context)),\n        core.withFiberRuntime((fiber) => {\n          fiber.setFiberRefs(FiberRefsPatch.patch(fiber.id(), fiber.getFiberRefs())(rollbackRefs))\n          fiber._runtimeFlags = runtimeFlags.patch(rollbackFlags)(fiber._runtimeFlags)\n          return core.void\n        })\n      )\n    })\n  )\n})\n\n/** @internal */\nexport const effect_provide = dual<\n  {\n    <ROut, E2, RIn>(\n      layer: Layer.Layer<ROut, E2, RIn>\n    ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, RIn | Exclude<R, ROut>>\n    <R2>(\n      context: Context.Context<R2>\n    ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, R2>>\n    <R2>(\n      runtime: Runtime.Runtime<R2>\n    ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, R2>>\n  },\n  {\n    <A, E, R, ROut, E2, RIn>(\n      self: Effect.Effect<A, E, R>,\n      layer: Layer.Layer<ROut, E2, RIn>\n    ): Effect.Effect<A, E | E2, RIn | Exclude<R, ROut>>\n    <A, E, R, R2>(\n      self: Effect.Effect<A, E, R>,\n      context: Context.Context<R2>\n    ): Effect.Effect<A, E, Exclude<R, R2>>\n    <A, E, R, R2>(\n      self: Effect.Effect<A, E, R>,\n      runtime: Runtime.Runtime<R2>\n    ): Effect.Effect<A, E, Exclude<R, R2>>\n  }\n>(\n  2,\n  <A, E, R, ROut>(\n    self: Effect.Effect<A, E, R>,\n    source: Layer.Layer<ROut, any, any> | Context.Context<ROut> | Runtime.Runtime<ROut>\n  ): Effect.Effect<any, any, Exclude<R, ROut>> =>\n    isLayer(source)\n      ? provideSomeLayer(self, source as Layer.Layer<ROut, any, any>)\n      : Context.isContext(source)\n      ? core.provideSomeContext(self, source)\n      : provideSomeRuntime(self, source as Runtime.Runtime<ROut>)\n)\n", "import type * as Console from \"../Console.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { dual } from \"../Function.js\"\nimport type * as Layer from \"../Layer.js\"\nimport type * as Scope from \"../Scope.js\"\nimport * as core from \"./core.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport * as defaultConsole from \"./defaultServices/console.js\"\nimport * as fiberRuntime from \"./fiberRuntime.js\"\nimport * as layer from \"./layer.js\"\n\n/** @internal */\nexport const console: Effect.Effect<Console.Console> = core.map(\n  core.fiberRefGet(defaultServices.currentServices),\n  Context.get(defaultConsole.consoleTag)\n)\n\n/** @internal */\nexport const consoleWith = <A, E, R>(f: (console: Console.Console) => Effect.Effect<A, E, R>) =>\n  core.fiberRefGetWith(\n    defaultServices.currentServices,\n    (services) => f(Context.get(services, defaultConsole.consoleTag))\n  )\n\n/** @internal */\nexport const withConsole = dual<\n  <C extends Console.Console>(console: C) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, C extends Console.Console>(effect: Effect.Effect<A, E, R>, console: C) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    effect,\n    defaultServices.currentServices,\n    Context.add(defaultConsole.consoleTag, value)\n  ))\n\n/** @internal */\nexport const withConsoleScoped = <A extends Console.Console>(console: A): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRuntime.fiberRefLocallyScopedWith(\n    defaultServices.currentServices,\n    Context.add(defaultConsole.consoleTag, console)\n  )\n\n/** @internal */\nexport const setConsole = <A extends Console.Console>(console: A): Layer.Layer<never> =>\n  layer.scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(\n      defaultServices.currentServices,\n      Context.add(defaultConsole.consoleTag, console)\n    )\n  )\n\n/** @internal */\nexport const assert = (condition: boolean, ...args: ReadonlyArray<any>) =>\n  consoleWith((_) => _.assert(condition, ...args))\n\n/** @internal */\nexport const clear = consoleWith((_) => _.clear)\n\n/** @internal */\nexport const count = (label?: string) => consoleWith((_) => _.count(label))\n\n/** @internal */\nexport const countReset = (label?: string) => consoleWith((_) => _.countReset(label))\n\n/** @internal */\nexport const debug = (...args: ReadonlyArray<any>) => consoleWith((_) => _.debug(...args))\n\n/** @internal */\nexport const dir = (item: any, options?: any) => consoleWith((_) => _.dir(item, options))\n\n/** @internal */\nexport const dirxml = (...args: ReadonlyArray<any>) => consoleWith((_) => _.dirxml(...args))\n\n/** @internal */\nexport const error = (...args: ReadonlyArray<any>) => consoleWith((_) => _.error(...args))\n\n/** @internal */\nexport const group = (options?: {\n  label?: string | undefined\n  collapsed?: boolean | undefined\n}) =>\n  consoleWith((_) =>\n    fiberRuntime.acquireRelease(\n      _.group(options),\n      () => _.groupEnd\n    )\n  )\n\n/** @internal */\nexport const info = (...args: ReadonlyArray<any>) => consoleWith((_) => _.info(...args))\n\n/** @internal */\nexport const log = (...args: ReadonlyArray<any>) => consoleWith((_) => _.log(...args))\n\n/** @internal */\nexport const table = (tabularData: any, properties?: ReadonlyArray<string>) =>\n  consoleWith((_) => _.table(tabularData, properties))\n\n/** @internal */\nexport const time = (label?: string) =>\n  consoleWith((_) =>\n    fiberRuntime.acquireRelease(\n      _.time(label),\n      () => _.timeEnd(label)\n    )\n  )\n\n/** @internal */\nexport const timeLog = (label?: string, ...args: ReadonlyArray<any>) => consoleWith((_) => _.timeLog(label, ...args))\n\n/** @internal */\nexport const trace = (...args: ReadonlyArray<any>) => consoleWith((_) => _.trace(...args))\n\n/** @internal */\nexport const warn = (...args: ReadonlyArray<any>) => consoleWith((_) => _.warn(...args))\n\n/** @internal */\nexport const withGroup = dual<\n  (\n    options?: {\n      readonly label?: string | undefined\n      readonly collapsed?: boolean | undefined\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    options?: {\n      readonly label?: string | undefined\n      readonly collapsed?: boolean | undefined\n    }\n  ) => Effect.Effect<A, E, R>\n>((args) => core.isEffect(args[0]), (self, options) =>\n  consoleWith((_) =>\n    core.acquireUseRelease(\n      _.group(options),\n      () => self,\n      () => _.groupEnd\n    )\n  ))\n\n/** @internal */\nexport const withTime = dual<\n  (label?: string) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, label?: string) => Effect.Effect<A, E, R>\n>((args) => core.isEffect(args[0]), (self, label) =>\n  consoleWith((_) =>\n    core.acquireUseRelease(\n      _.time(label),\n      () => self,\n      () => _.timeEnd(label)\n    )\n  ))\n", "import type * as Cache from \"../Cache.js\"\nimport type { Deferred } from \"../Deferred.js\"\nimport { seconds } from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { dual } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as RequestResolver from \"../RequestResolver.js\"\nimport * as BlockedRequests from \"./blockedRequests.js\"\nimport { unsafeMakeWith } from \"./cache.js\"\nimport * as core from \"./core.js\"\nimport { ensuring } from \"./fiberRuntime.js\"\nimport { Listeners } from \"./request.js\"\n\ntype RequestCache = Cache.Cache<Request.Request<any, any>, {\n  listeners: Request.Listeners\n  handle: Deferred<any, any>\n}>\n\n/** @internal */\nexport const currentCache = globalValue(\n  Symbol.for(\"effect/FiberRef/currentCache\"),\n  () =>\n    core.fiberRefUnsafeMake<RequestCache>(unsafeMakeWith<Request.Request<any, any>, {\n      listeners: Request.Listeners\n      handle: Deferred<any, any>\n    }>(\n      65536,\n      () => core.map(core.deferredMake<any, any>(), (handle) => ({ listeners: new Listeners(), handle })),\n      () => seconds(60)\n    ))\n)\n\n/** @internal */\nexport const currentCacheEnabled = globalValue(\n  Symbol.for(\"effect/FiberRef/currentCacheEnabled\"),\n  () => core.fiberRefUnsafeMake(false)\n)\n\n/** @internal */\nexport const fromRequest = <\n  A extends Request.Request<any, any>,\n  Ds extends\n    | RequestResolver.RequestResolver<A>\n    | Effect.Effect<RequestResolver.RequestResolver<A>, any, any>\n>(\n  request: A,\n  dataSource: Ds\n): Effect.Effect<\n  Request.Request.Success<A>,\n  Request.Request.Error<A>,\n  [Ds] extends [Effect.Effect<any, any, any>] ? Effect.Effect.Context<Ds> : never\n> =>\n  core.flatMap(\n    (core.isEffect(dataSource) ? dataSource : core.succeed(dataSource)) as Effect.Effect<\n      RequestResolver.RequestResolver<A>\n    >,\n    (ds) =>\n      core.fiberIdWith((id) => {\n        const proxy = new Proxy(request, {})\n        return core.fiberRefGetWith(currentCacheEnabled, (cacheEnabled) => {\n          if (cacheEnabled) {\n            const cached: Effect.Effect<any, any> = core.fiberRefGetWith(currentCache, (cache) =>\n              core.flatMap(cache.getEither(proxy), (orNew) => {\n                switch (orNew._tag) {\n                  case \"Left\": {\n                    if (orNew.left.listeners.interrupted) {\n                      return core.flatMap(\n                        cache.invalidateWhen(proxy, (entry) => entry.handle === orNew.left.handle),\n                        () => cached\n                      )\n                    }\n                    orNew.left.listeners.increment()\n                    return core.uninterruptibleMask((restore) =>\n                      core.flatMap(\n                        core.exit(core.blocked(\n                          BlockedRequests.empty,\n                          restore(core.deferredAwait(orNew.left.handle))\n                        )),\n                        (exit) => {\n                          orNew.left.listeners.decrement()\n                          return exit\n                        }\n                      )\n                    )\n                  }\n                  case \"Right\": {\n                    orNew.right.listeners.increment()\n                    return core.uninterruptibleMask((restore) =>\n                      core.flatMap(\n                        core.exit(\n                          core.blocked(\n                            BlockedRequests.single(\n                              ds as RequestResolver.RequestResolver<A>,\n                              BlockedRequests.makeEntry({\n                                request: proxy,\n                                result: orNew.right.handle,\n                                listeners: orNew.right.listeners,\n                                ownerId: id,\n                                state: { completed: false }\n                              })\n                            ),\n                            restore(core.deferredAwait(orNew.right.handle))\n                          )\n                        ),\n                        () => {\n                          orNew.right.listeners.decrement()\n                          return core.deferredAwait(orNew.right.handle)\n                        }\n                      )\n                    )\n                  }\n                }\n              }))\n            return cached\n          }\n          const listeners = new Listeners()\n          listeners.increment()\n          return core.flatMap(\n            core.deferredMake<Request.Request.Success<A>, Request.Request.Error<A>>(),\n            (ref) =>\n              ensuring(\n                core.blocked(\n                  BlockedRequests.single(\n                    ds as RequestResolver.RequestResolver<A>,\n                    BlockedRequests.makeEntry({\n                      request: proxy,\n                      result: ref,\n                      listeners,\n                      ownerId: id,\n                      state: { completed: false }\n                    })\n                  ),\n                  core.deferredAwait(ref)\n                ),\n                core.sync(() =>\n                  listeners.decrement()\n                )\n              )\n          )\n        })\n      })\n  )\n\n/** @internal */\nexport const cacheRequest = <A extends Request.Request<any, any>>(\n  request: A,\n  result: Request.Request.Result<A>\n): Effect.Effect<void> => {\n  return core.fiberRefGetWith(currentCacheEnabled, (cacheEnabled) => {\n    if (cacheEnabled) {\n      return core.fiberRefGetWith(currentCache, (cache) =>\n        core.flatMap(cache.getEither(request), (orNew) => {\n          switch (orNew._tag) {\n            case \"Left\": {\n              return core.void\n            }\n            case \"Right\": {\n              return core.deferredComplete(orNew.right.handle, result)\n            }\n          }\n        }))\n    }\n    return core.void\n  })\n}\n\n/** @internal */\nexport const withRequestCaching: {\n  (strategy: boolean): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    strategy: boolean\n  ): Effect.Effect<A, E, R>\n} = dual<\n  (\n    strategy: boolean\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    strategy: boolean\n  ) => Effect.Effect<A, E, R>\n>(2, (self, strategy) => core.fiberRefLocally(self, currentCacheEnabled, strategy))\n\n/** @internal */\nexport const withRequestCache: {\n  (cache: Request.Cache): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    cache: Request.Cache\n  ): Effect.Effect<A, E, R>\n} = dual<\n  (\n    cache: Request.Cache\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    cache: Request.Cache\n  ) => Effect.Effect<A, E, R>\n>(\n  2,\n  // @ts-expect-error\n  (self, cache) => core.fiberRefLocally(self, currentCache, cache)\n)\n", "/**\n * @since 2.0.0\n */\nimport type * as _Cache from \"./Cache.js\"\nimport type { Cause } from \"./Cause.js\"\nimport type { Deferred } from \"./Deferred.js\"\nimport type { DurationInput } from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type { FiberId } from \"./FiberId.js\"\nimport * as _RequestBlock from \"./internal/blockedRequests.js\"\nimport * as cache from \"./internal/cache.js\"\nimport * as core from \"./internal/core.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as internal from \"./internal/request.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RequestTypeId: unique symbol = internal.RequestTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RequestTypeId = typeof RequestTypeId\n\n/**\n * A `Request<A, E>` is a request from a data source for a value of type `A`\n * that may fail with an `E`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Request<out A, out E = never> extends Request.Variance<A, E> {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Request {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, out E> {\n    readonly [RequestTypeId]: {\n      readonly _A: Types.Covariant<A>\n      readonly _E: Types.Covariant<E>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Constructor<R extends Request<any, any>, T extends keyof R = never> {\n    (args: Omit<R, T | keyof (Request.Variance<Request.Success<R>, Request.Error<R>>)>): R\n  }\n\n  /**\n   * A utility type to extract the error type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Error<T extends Request<any, any>> = [T] extends [Request<infer _A, infer _E>] ? _E : never\n\n  /**\n   * A utility type to extract the value type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Success<T extends Request<any, any>> = [T] extends [Request<infer _A, infer _E>] ? _A : never\n\n  /**\n   * A utility type to extract the result type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Result<T extends Request<any, any>> = T extends Request<infer A, infer E> ? Exit.Exit<A, E> : never\n\n  /**\n   * A utility type to extract the optional result type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type OptionalResult<T extends Request<any, any>> = T extends Request<infer A, infer E>\n    ? Exit.Exit<Option.Option<A>, E>\n    : never\n}\n\n/**\n * Returns `true` if the specified value is a `Request`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRequest: (u: unknown) => u is Request<unknown, unknown> = internal.isRequest\n\n/**\n * Constructs a new `Request`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const of: <R extends Request<any, any>>() => Request.Constructor<R> = internal.of\n\n/**\n * Constructs a new `Request`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const tagged: <R extends Request<any, any> & { _tag: string }>(\n  tag: R[\"_tag\"]\n) => Request.Constructor<R, \"_tag\"> = internal.tagged\n\n/**\n * Provides a constructor for a Request Class.\n *\n * @example\n * import { Request } from \"effect\"\n *\n * type Success = string\n * type Error = never\n *\n * class MyRequest extends Request.Class<Success, Error, {\n *   readonly id: string\n * }> {}\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const Class: new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends keyof Request<unknown, unknown> ? never : P]: A[P] }\n) => Request<Success, Error> & Readonly<A> = internal.Class as any\n\n/**\n * Provides a Tagged constructor for a Request Class.\n *\n * @example\n * import { Request } from \"effect\"\n *\n * type Success = string\n * type Error = never\n *\n * class MyRequest extends Request.TaggedClass(\"MyRequest\")<Success, Error, {\n *   readonly name: string\n * }> {}\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const TaggedClass: <Tag extends string>(\n  tag: Tag\n) => new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" | keyof Request<unknown, unknown> ? never : P]: A[P] }\n) => Request<Success, Error> & Readonly<A> & { readonly _tag: Tag } = internal.TaggedClass as any\n\n/**\n * Complete a `Request` with the specified result.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const complete: {\n  <A extends Request<any, any>>(result: Request.Result<A>): (self: A) => Effect.Effect<void>\n  <A extends Request<any, any>>(self: A, result: Request.Result<A>): Effect.Effect<void>\n} = internal.complete\n\n/**\n * Interrupts the child effect when requests are no longer needed\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const interruptWhenPossible: {\n  (all: Iterable<Request<any, any>>): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<void, E, R>\n  <A, E, R>(self: Effect.Effect<A, E, R>, all: Iterable<Request<any, any>>): Effect.Effect<void, E, R>\n} = fiberRuntime.interruptWhenPossible\n\n/**\n * Complete a `Request` with the specified effectful computation, failing the\n * request with the error from the effect workflow if it fails, and completing\n * the request with the value of the effect workflow if it succeeds.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const completeEffect: {\n  <A extends Request<any, any>, R>(\n    effect: Effect.Effect<Request.Success<A>, Request.Error<A>, R>\n  ): (self: A) => Effect.Effect<void, never, R>\n  <A extends Request<any, any>, R>(\n    self: A,\n    effect: Effect.Effect<Request.Success<A>, Request.Error<A>, R>\n  ): Effect.Effect<void, never, R>\n} = internal.completeEffect\n\n/**\n * Complete a `Request` with the specified error.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const fail: {\n  <A extends Request<any, any>>(error: Request.Error<A>): (self: A) => Effect.Effect<void>\n  <A extends Request<any, any>>(self: A, error: Request.Error<A>): Effect.Effect<void>\n} = internal.fail\n\n/**\n * Complete a `Request` with the specified cause.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const failCause: {\n  <A extends Request<any, any>>(cause: Cause<Request.Error<A>>): (self: A) => Effect.Effect<void>\n  <A extends Request<any, any>>(self: A, cause: Cause<Request.Error<A>>): Effect.Effect<void>\n} = internal.failCause\n\n/**\n * Complete a `Request` with the specified value.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const succeed: {\n  <A extends Request<any, any>>(value: Request.Success<A>): (self: A) => Effect.Effect<void>\n  <A extends Request<any, any>>(self: A, value: Request.Success<A>): Effect.Effect<void>\n} = internal.succeed\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Listeners {\n  readonly count: number\n  readonly observers: Set<(count: number) => void>\n  interrupted: boolean\n  addObserver(f: (count: number) => void): void\n  removeObserver(f: (count: number) => void): void\n  increment(): void\n  decrement(): void\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Cache extends\n  _Cache.ConsumerCache<Request<any, any>, {\n    listeners: Listeners\n    handle: Deferred<unknown, unknown>\n  }>\n{}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport const makeCache = (\n  options: {\n    readonly capacity: number\n    readonly timeToLive: DurationInput\n  }\n): Effect.Effect<Cache> =>\n  cache.make({\n    ...options,\n    lookup: () =>\n      core.map(core.deferredMake<unknown, unknown>(), (handle) => ({ listeners: new internal.Listeners(), handle }))\n  })\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const EntryTypeId: unique symbol = Symbol.for(\"effect/RequestBlock.Entry\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type EntryTypeId = typeof EntryTypeId\n\n/**\n * A `Entry<A>` keeps track of a request of type `A` along with a\n * `Ref` containing the result of the request, existentially hiding the result\n * type. This is used internally by the library to support data sources that\n * return different result types for different requests while guaranteeing that\n * results will be of the type requested.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Entry<out R> extends Entry.Variance<R> {\n  readonly request: R\n  readonly result: Deferred<\n    [R] extends [Request<infer _A, infer _E>] ? _A : never,\n    [R] extends [Request<infer _A, infer _E>] ? _E : never\n  >\n  readonly listeners: Listeners\n  readonly ownerId: FiberId\n  readonly state: {\n    completed: boolean\n  }\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport declare namespace Entry {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out R> {\n    readonly [EntryTypeId]: {\n      readonly _R: Types.Covariant<R>\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isEntry = _RequestBlock.isEntry\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeEntry = _RequestBlock.makeEntry\n", "/**\n * A `Layer<ROut, E, RIn>` describes how to build one or more services in your\n * application. Services can be injected into effects via\n * `Effect.provideService`. Effects can require services via `Effect.service`.\n *\n * Layer can be thought of as recipes for producing bundles of services, given\n * their dependencies (other services).\n *\n * Construction of services can be effectful and utilize resources that must be\n * acquired and safely released when the services are done being utilized.\n *\n * By default layers are shared, meaning that if the same layer is used twice\n * the layer will only be allocated a single time.\n *\n * Because of their excellent composition properties, layers are the idiomatic\n * way in Effect-TS to create services that depend on other services.\n *\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Clock from \"./Clock.js\"\nimport type { ConfigProvider } from \"./ConfigProvider.js\"\nimport * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type { FiberRef } from \"./FiberRef.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { clockTag } from \"./internal/clock.js\"\nimport * as core from \"./internal/core.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as internal from \"./internal/layer.js\"\nimport * as circularLayer from \"./internal/layer/circular.js\"\nimport * as query from \"./internal/query.js\"\nimport type { LogLevel } from \"./LogLevel.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Request from \"./Request.js\"\nimport type * as Runtime from \"./Runtime.js\"\nimport type * as Schedule from \"./Schedule.js\"\nimport * as Scheduler from \"./Scheduler.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Tracer from \"./Tracer.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const LayerTypeId: unique symbol = internal.LayerTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type LayerTypeId = typeof LayerTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Layer<in ROut, out E = never, out RIn = never> extends Layer.Variance<ROut, E, RIn>, Pipeable {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Layer {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<in ROut, out E, out RIn> {\n    readonly [LayerTypeId]: {\n      readonly _ROut: Types.Contravariant<ROut>\n      readonly _E: Types.Covariant<E>\n      readonly _RIn: Types.Covariant<RIn>\n    }\n  }\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Context<T extends Layer<never, any, any>> = [T] extends [Layer<infer _ROut, infer _E, infer _RIn>] ? _RIn\n    : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Error<T extends Layer<never, any, any>> = [T] extends [Layer<infer _ROut, infer _E, infer _RIn>] ? _E\n    : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Success<T extends Layer<never, any, any>> = [T] extends [Layer<infer _ROut, infer _E, infer _RIn>] ? _ROut\n    : never\n}\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const MemoMapTypeId: unique symbol = internal.MemoMapTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type MemoMapTypeId = typeof MemoMapTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MemoMap {\n  readonly [MemoMapTypeId]: MemoMapTypeId\n\n  /** @internal */\n  readonly getOrElseMemoize: <RIn, E, ROut>(\n    layer: Layer<ROut, E, RIn>,\n    scope: Scope.Scope\n  ) => Effect.Effect<Context.Context<ROut>, E, RIn>\n}\n\n/**\n * Returns `true` if the specified value is a `Layer`, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isLayer: (u: unknown) => u is Layer<unknown, unknown, unknown> = internal.isLayer\n\n/**\n * Returns `true` if the specified `Layer` is a fresh version that will not be\n * shared, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFresh: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => boolean = internal.isFresh\n\n/**\n * @since 3.3.0\n * @category tracing\n */\nexport const annotateLogs: {\n  (key: string, value: unknown): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  (values: Record<string, unknown>): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  <A, E, R>(self: Layer<A, E, R>, key: string, value: unknown): Layer<A, E, R>\n  <A, E, R>(self: Layer<A, E, R>, values: Record<string, unknown>): Layer<A, E, R>\n} = internal.annotateLogs\n\n/**\n * @since 3.3.0\n * @category tracing\n */\nexport const annotateSpans: {\n  (key: string, value: unknown): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  (values: Record<string, unknown>): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  <A, E, R>(self: Layer<A, E, R>, key: string, value: unknown): Layer<A, E, R>\n  <A, E, R>(self: Layer<A, E, R>, values: Record<string, unknown>): Layer<A, E, R>\n} = internal.annotateSpans\n\n/**\n * Builds a layer into a scoped value.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const build: <RIn, E, ROut>(\n  self: Layer<ROut, E, RIn>\n) => Effect.Effect<Context.Context<ROut>, E, Scope.Scope | RIn> = internal.build\n\n/**\n * Builds a layer into an `Effect` value. Any resources associated with this\n * layer will be released when the specified scope is closed unless their scope\n * has been extended. This allows building layers where the lifetime of some of\n * the services output by the layer exceed the lifetime of the effect the\n * layer is provided to.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const buildWithScope: {\n  (scope: Scope.Scope): <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<Context.Context<ROut>, E, RIn>\n  <RIn, E, ROut>(self: Layer<ROut, E, RIn>, scope: Scope.Scope): Effect.Effect<Context.Context<ROut>, E, RIn>\n} = internal.buildWithScope\n\n/**\n * Recovers from all errors.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAll: {\n  <E, RIn2, E2, ROut2>(\n    onError: (error: E) => Layer<ROut2, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut & ROut2, E2, RIn2 | RIn>\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    self: Layer<ROut, E, RIn>,\n    onError: (error: E) => Layer<ROut2, E2, RIn2>\n  ): Layer<ROut & ROut2, E2, RIn | RIn2>\n} = internal.catchAll\n\n/**\n * Recovers from all errors.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllCause: {\n  <E, RIn2, E2, ROut2>(\n    onError: (cause: Cause.Cause<E>) => Layer<ROut2, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut & ROut2, E2, RIn2 | RIn>\n  <RIn, E, ROut, RIn2, E2, ROut22>(\n    self: Layer<ROut, E, RIn>,\n    onError: (cause: Cause.Cause<E>) => Layer<ROut22, E2, RIn2>\n  ): Layer<ROut & ROut22, E2, RIn | RIn2>\n} = internal.catchAllCause\n\n/**\n * Constructs a `Layer` that passes along the specified context as an\n * output.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const context: <R>() => Layer<R, never, R> = internal.context\n\n/**\n * Constructs a layer that dies with the specified defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Layer<unknown> = internal.die\n\n/**\n * Constructs a layer that dies with the specified defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dieSync: (evaluate: LazyArg<unknown>) => Layer<unknown> = internal.dieSync\n\n/**\n * Replaces the layer's output with `void` and includes the layer only for its\n * side-effects.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const discard: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Layer<never, E, RIn> = internal.discard\n\n/**\n * Constructs a layer from the specified effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const effect: {\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ): <E, R>(effect: Effect.Effect<Context.Tag.Service<T>, E, R>) => Layer<Context.Tag.Identifier<T>, E, R>\n  <T extends Context.Tag<any, any>, E, R>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ): Layer<Context.Tag.Identifier<T>, E, R>\n} = internal.fromEffect\n\n/**\n * Constructs a layer from the specified effect discarding it's output.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const effectDiscard: <X, E, R>(effect: Effect.Effect<X, E, R>) => Layer<never, E, R> = internal.fromEffectDiscard\n\n/**\n * Constructs a layer from the specified effect, which must return one or more\n * services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const effectContext: <A, E, R>(effect: Effect.Effect<Context.Context<A>, E, R>) => Layer<A, E, R> =\n  internal.fromEffectContext\n\n/**\n * A Layer that constructs an empty Context.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Layer<never> = internal.empty\n\n/**\n * Extends the scope of this layer, returning a new layer that when provided\n * to an effect will not immediately release its associated resources when\n * that effect completes execution but instead when the scope the resulting\n * effect depends on is closed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const extendScope: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut, E, Scope.Scope | RIn> =\n  internal.extendScope\n\n/**\n * Constructs a layer that fails with the specified error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Layer<unknown, E> = internal.fail\n\n/**\n * Constructs a layer that fails with the specified error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failSync: <E>(evaluate: LazyArg<E>) => Layer<unknown, E> = internal.failSync\n\n/**\n * Constructs a layer that fails with the specified cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Layer<unknown, E> = internal.failCause\n\n/**\n * Constructs a layer that fails with the specified cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCauseSync: <E>(evaluate: LazyArg<Cause.Cause<E>>) => Layer<unknown, E> = internal.failCauseSync\n\n/**\n * Constructs a layer dynamically based on the output of this layer.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <A, A2, E2, R2>(\n    f: (context: Context.Context<A>) => Layer<A2, E2, R2>\n  ): <E, R>(self: Layer<A, E, R>) => Layer<A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Layer<A, E, R>,\n    f: (context: Context.Context<A>) => Layer<A2, E2, R2>\n  ): Layer<A2, E | E2, R | R2>\n} = internal.flatMap\n\n/**\n * Flattens layers nested in the context of an effect.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: {\n  <I, A, E2, R2>(tag: Context.Tag<I, Layer<A, E2, R2>>): <E, R>(self: Layer<I, E, R>) => Layer<A, E2 | E, R2 | R>\n  <I, E, R, A, E2, R2>(self: Layer<I, E, R>, tag: Context.Tag<I, Layer<A, E2, R2>>): Layer<A, E | E2, R | R2>\n} = internal.flatten\n\n/**\n * Creates a fresh version of this layer that will not be shared.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const fresh: <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R> = internal.fresh\n\nconst fromFunction: <A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n  tagA: A,\n  tagB: B,\n  f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n) => Layer<Context.Tag.Identifier<B>, never, Context.Tag.Identifier<A>> = internal.fromFunction\n\nexport {\n  /**\n   * Constructs a layer from the context using the specified function.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  fromFunction as function\n}\n\n/**\n * Builds this layer and uses it until it is interrupted. This is useful when\n * your entire application is a layer, such as an HTTP server.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const launch: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<never, E, RIn> = internal.launch\n\n/**\n * Returns a new layer whose output is mapped by the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (context: Context.Context<A>) => Context.Context<B>): <E, R>(self: Layer<A, E, R>) => Layer<B, E, R>\n  <A, E, R, B>(self: Layer<A, E, R>, f: (context: Context.Context<A>) => Context.Context<B>): Layer<B, E, R>\n} = internal.map\n\n/**\n * Returns a layer with its error channel mapped using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  <E, E2>(f: (error: E) => E2): <A, R>(self: Layer<A, E, R>) => Layer<A, E2, R>\n  <A, E, R, E2>(self: Layer<A, E, R>, f: (error: E) => E2): Layer<A, E2, R>\n} = internal.mapError\n\n/**\n * Feeds the error or output services of this layer into the input of either\n * the specified `failure` or `success` layers, resulting in a new layer with\n * the inputs of this layer, and the error or outputs of the specified layer.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (error: E) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): <R>(self: Layer<A, E, R>) => Layer<A2 & A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Layer<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): Layer<A2 & A3, E2 | E3, R | R2 | R3>\n} = internal.match\n\n/**\n * Feeds the error or output services of this layer into the input of either\n * the specified `failure` or `success` layers, resulting in a new layer with\n * the inputs of this layer, and the error or outputs of the specified layer.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const matchCause: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): <R>(self: Layer<A, E, R>) => Layer<A2 & A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Layer<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): Layer<A2 & A3, E2 | E3, R | R2 | R3>\n} = internal.matchCause\n\n/**\n * Returns a scoped effect that, if evaluated, will return the lazily computed\n * result of this layer.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const memoize: <RIn, E, ROut>(\n  self: Layer<ROut, E, RIn>\n) => Effect.Effect<Layer<ROut, E, RIn>, never, Scope.Scope> = internal.memoize\n\n/**\n * Merges this layer with the specified layer concurrently, producing a new layer with combined input and output types.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const merge: {\n  <RIn2, E2, ROut2>(\n    that: Layer<ROut2, E2, RIn2>\n  ): <RIn, E1, ROut>(self: Layer<ROut, E1, RIn>) => Layer<ROut2 | ROut, E2 | E1, RIn2 | RIn>\n  <RIn, E1, ROut, RIn2, E2, ROut2>(\n    self: Layer<ROut, E1, RIn>,\n    that: Layer<ROut2, E2, RIn2>\n  ): Layer<ROut | ROut2, E1 | E2, RIn | RIn2>\n} = internal.merge\n\n/**\n * Combines all the provided layers concurrently, creating a new layer with merged input, error, and output types.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const mergeAll: <Layers extends [Layer<never, any, any>, ...Array<Layer<never, any, any>>]>(\n  ...layers: Layers\n) => Layer<\n  { [k in keyof Layers]: Layer.Success<Layers[k]> }[number],\n  { [k in keyof Layers]: Layer.Error<Layers[k]> }[number],\n  { [k in keyof Layers]: Layer.Context<Layers[k]> }[number]\n> = internal.mergeAll\n\n/**\n * Translates effect failure into death of the fiber, making all failures\n * unchecked and not a part of the type of the layer.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orDie: <A, E, R>(self: Layer<A, E, R>) => Layer<A, never, R> = internal.orDie\n\n/**\n * Executes this layer and returns its output, if it succeeds, but otherwise\n * executes the specified layer.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElse: {\n  <A2, E2, R2>(that: LazyArg<Layer<A2, E2, R2>>): <A, E, R>(self: Layer<A, E, R>) => Layer<A & A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(self: Layer<A, E, R>, that: LazyArg<Layer<A2, E2, R2>>): Layer<A & A2, E | E2, R | R2>\n} = internal.orElse\n\n/**\n * Returns a new layer that produces the outputs of this layer but also\n * passes through the inputs.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const passthrough: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Layer<RIn | ROut, E, RIn> = internal.passthrough\n\n/**\n * Projects out part of one of the services output by this layer using the\n * specified function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const project: {\n  <A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n    tagA: A,\n    tagB: B,\n    f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n  ): <RIn, E>(self: Layer<Context.Tag.Identifier<A>, E, RIn>) => Layer<Context.Tag.Identifier<B>, E, RIn>\n  <RIn, E, A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n    self: Layer<Context.Tag.Identifier<A>, E, RIn>,\n    tagA: A,\n    tagB: B,\n    f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n  ): Layer<Context.Tag.Identifier<B>, E, RIn>\n} = internal.project\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locallyEffect: {\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    f: (_: Effect.Effect<RIn, E, Context.Context<ROut>>) => Effect.Effect<RIn2, E2, Context.Context<ROut2>>\n  ): (self: Layer<ROut, E, RIn>) => Layer<ROut2, E2, RIn2>\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    self: Layer<ROut, E, RIn>,\n    f: (_: Effect.Effect<RIn, E, Context.Context<ROut>>) => Effect.Effect<RIn2, E2, Context.Context<ROut2>>\n  ): Layer<ROut2, E2, RIn2>\n} = internal.locallyEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locally: {\n  <X>(\n    ref: FiberRef<X>,\n    value: X\n  ): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  <A, E, R, X>(\n    self: Layer<A, E, R>,\n    ref: FiberRef<X>,\n    value: X\n  ): Layer<A, E, R>\n} = internal.fiberRefLocally\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locallyWith: {\n  <X>(ref: FiberRef<X>, value: (_: X) => X): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  <A, E, R, X>(self: Layer<A, E, R>, ref: FiberRef<X>, value: (_: X) => X): Layer<A, E, R>\n} = internal.fiberRefLocallyWith\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locallyScoped: <A>(self: FiberRef<A>, value: A) => Layer<never> = internal.fiberRefLocallyScoped\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const fiberRefLocallyScopedWith: <A>(self: FiberRef<A>, value: (_: A) => A) => Layer<never> =\n  internal.fiberRefLocallyScopedWith\n\n/**\n * Retries constructing this layer according to the specified schedule.\n *\n * @since 2.0.0\n * @category retrying\n */\nexport const retry: {\n  <X, E, RIn2>(\n    schedule: Schedule.Schedule<X, E, RIn2>\n  ): <ROut, RIn>(self: Layer<ROut, E, RIn>) => Layer<ROut, E, RIn2 | RIn>\n  <ROut, E, RIn, X, RIn2>(\n    self: Layer<ROut, E, RIn>,\n    schedule: Schedule.Schedule<X, E, RIn2>\n  ): Layer<ROut, E, RIn | RIn2>\n} = internal.retry\n\n/**\n * A layer that constructs a scope and closes it when the workflow the layer\n * is provided to completes execution, whether by success, failure, or\n * interruption. This can be used to close a scope when providing a layer to a\n * workflow.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scope: Layer<Scope.CloseableScope> = internal.scope\n\n/**\n * Constructs a layer from the specified scoped effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scoped: {\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ): <E, R>(\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer<Context.Tag.Identifier<T>, E, Exclude<R, Scope.Scope>>\n  <T extends Context.Tag<any, any>, E, R>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ): Layer<Context.Tag.Identifier<T>, E, Exclude<R, Scope.Scope>>\n} = internal.scoped\n\n/**\n * Constructs a layer from the specified scoped effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scopedDiscard: <X, E, R>(effect: Effect.Effect<X, E, R>) => Layer<never, E, Exclude<R, Scope.Scope>> =\n  internal.scopedDiscard\n\n/**\n * Constructs a layer from the specified scoped effect, which must return one\n * or more services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scopedContext: <A, E, R>(\n  effect: Effect.Effect<Context.Context<A>, E, R>\n) => Layer<A, E, Exclude<R, Scope.Scope>> = internal.scopedContext\n\n/**\n * Constructs a layer that accesses and returns the specified service from the\n * context.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const service: <T extends Context.Tag<any, any>>(\n  tag: T\n) => Layer<Context.Tag.Identifier<T>, never, Context.Tag.Identifier<T>> = internal.service\n\n/**\n * Constructs a layer from the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: {\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ): (resource: Context.Tag.Service<T>) => Layer<Context.Tag.Identifier<T>>\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ): Layer<Context.Tag.Identifier<T>>\n} = internal.succeed\n\n/**\n * Constructs a layer from the specified value, which must return one or more\n * services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeedContext: <A>(context: Context.Context<A>) => Layer<A> = internal.succeedContext\n\n/**\n * Lazily constructs a layer. This is useful to avoid infinite recursion when\n * creating layers that refer to themselves.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <RIn, E, ROut>(evaluate: LazyArg<Layer<ROut, E, RIn>>) => Layer<ROut, E, RIn> = internal.suspend\n\n/**\n * Lazily constructs a layer from the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: {\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ): (evaluate: LazyArg<Context.Tag.Service<T>>) => Layer<Context.Tag.Identifier<T>>\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    evaluate: LazyArg<Context.Tag.Service<T>>\n  ): Layer<Context.Tag.Identifier<T>>\n} = internal.sync\n\n/**\n * Lazily constructs a layer from the specified value, which must return one or more\n * services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const syncContext: <A>(evaluate: LazyArg<Context.Context<A>>) => Layer<A> = internal.syncContext\n\n/**\n * Performs the specified effect if this layer succeeds.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tap: {\n  <ROut, XR extends ROut, RIn2, E2, X>(\n    f: (context: Context.Context<XR>) => Effect.Effect<X, E2, RIn2>\n  ): <RIn, E>(self: Layer<ROut, E, RIn>) => Layer<ROut, E2 | E, RIn2 | RIn>\n  <RIn, E, ROut, XR extends ROut, RIn2, E2, X>(\n    self: Layer<ROut, E, RIn>,\n    f: (context: Context.Context<XR>) => Effect.Effect<X, E2, RIn2>\n  ): Layer<ROut, E | E2, RIn | RIn2>\n} = internal.tap\n\n/**\n * Performs the specified effect if this layer fails.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapError: {\n  <E, XE extends E, RIn2, E2, X>(\n    f: (e: XE) => Effect.Effect<X, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut, E | E2, RIn2 | RIn>\n  <RIn, E, XE extends E, ROut, RIn2, E2, X>(\n    self: Layer<ROut, E, RIn>,\n    f: (e: XE) => Effect.Effect<X, E2, RIn2>\n  ): Layer<ROut, E | E2, RIn | RIn2>\n} = internal.tapError\n\n/**\n * Performs the specified effect if this layer fails.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapErrorCause: {\n  <E, XE extends E, RIn2, E2, X>(\n    f: (cause: Cause.Cause<XE>) => Effect.Effect<X, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut, E | E2, RIn2 | RIn>\n  <RIn, E, XE extends E, ROut, RIn2, E2, X>(\n    self: Layer<ROut, E, RIn>,\n    f: (cause: Cause.Cause<XE>) => Effect.Effect<X, E2, RIn2>\n  ): Layer<ROut, E | E2, RIn | RIn2>\n} = internal.tapErrorCause\n\n/**\n * Converts a layer that requires no services into a scoped runtime, which can\n * be used to execute effects.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const toRuntime: <RIn, E, ROut>(\n  self: Layer<ROut, E, RIn>\n) => Effect.Effect<Runtime.Runtime<ROut>, E, Scope.Scope | RIn> = internal.toRuntime\n\n/**\n * Converts a layer that requires no services into a scoped runtime, which can\n * be used to execute effects.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const toRuntimeWithMemoMap: {\n  (\n    memoMap: MemoMap\n  ): <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<Runtime.Runtime<ROut>, E, Scope.Scope | RIn>\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>,\n    memoMap: MemoMap\n  ): Effect.Effect<Runtime.Runtime<ROut>, E, Scope.Scope | RIn>\n} = internal.toRuntimeWithMemoMap\n\n/**\n * Feeds the output services of this builder into the input of the specified\n * builder, resulting in a new builder with the inputs of this builder as\n * well as any leftover inputs, and the outputs of the specified builder.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const provide: {\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>\n  ): <RIn2, E2, ROut2>(that: Layer<ROut2, E2, RIn2>) => Layer<ROut2, E | E2, RIn | Exclude<RIn2, ROut>>\n  <RIn2, E2, ROut2, RIn, E, ROut>(\n    that: Layer<ROut2, E2, RIn2>,\n    self: Layer<ROut, E, RIn>\n  ): Layer<ROut2, E2 | E, RIn | Exclude<RIn2, ROut>>\n} = internal.provide\n\n/**\n * Feeds the output services of this layer into the input of the specified\n * layer, resulting in a new layer with the inputs of this layer, and the\n * outputs of both layers.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const provideMerge: {\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>\n  ): <RIn2, E2, ROut2>(that: Layer<ROut2, E2, RIn2>) => Layer<ROut | ROut2, E | E2, RIn | Exclude<RIn2, ROut>>\n  <RIn2, E2, ROut2, RIn, E, ROut>(\n    that: Layer<ROut2, E2, RIn2>,\n    self: Layer<ROut, E, RIn>\n  ): Layer<ROut2 | ROut, E2 | E, RIn | Exclude<RIn2, ROut>>\n} = internal.provideMerge\n\n/**\n * Combines this layer with the specified layer concurrently, creating a new layer with merged input types and\n * combined output types using the provided function.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <B, E2, R2, A, C>(\n    that: Layer<B, E2, R2>,\n    f: (a: Context.Context<A>, b: Context.Context<B>) => Context.Context<C>\n  ): <E, R>(self: Layer<A, E, R>) => Layer<C, E2 | E, R2 | R>\n  <A, E, R, B, E2, R2, C>(\n    self: Layer<A, E, R>,\n    that: Layer<B, E2, R2>,\n    f: (a: Context.Context<A>, b: Context.Context<B>) => Context.Context<C>\n  ): Layer<C, E | E2, R | R2>\n} = internal.zipWith\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const unwrapEffect: <A, E1, R1, E, R>(self: Effect.Effect<Layer<A, E1, R1>, E, R>) => Layer<A, E | E1, R | R1> =\n  internal.unwrapEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const unwrapScoped: <A, E1, R1, E, R>(\n  self: Effect.Effect<Layer<A, E1, R1>, E, R>\n) => Layer<A, E | E1, R1 | Exclude<R, Scope.Scope>> = internal.unwrapScoped\n\n/**\n * @since 2.0.0\n * @category clock\n */\nexport const setClock: <A extends Clock.Clock>(clock: A) => Layer<never> = <A extends Clock.Clock>(\n  clock: A\n): Layer<never> =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(clockTag, clock))\n  )\n\n/**\n * Sets the current `ConfigProvider`.\n *\n * @since 2.0.0\n * @category config\n */\nexport const setConfigProvider: (configProvider: ConfigProvider) => Layer<never> = circularLayer.setConfigProvider\n\n/**\n * Adds the provided span to the span stack.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const parentSpan: (span: Tracer.AnySpan) => Layer<Tracer.ParentSpan> = circularLayer.parentSpan\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const setRequestBatching: (requestBatching: boolean) => Layer<never> = (\n  requestBatching: boolean\n) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentRequestBatching, requestBatching)\n  )\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const setRequestCaching: (requestCaching: boolean) => Layer<never> = (\n  requestCaching: boolean\n) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(query.currentCacheEnabled, requestCaching)\n  )\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const setRequestCache: {\n  <E, R>(\n    cache: Effect.Effect<Request.Cache, E, R>\n  ): Layer<never, E, Exclude<R, Scope.Scope>>\n  (\n    cache: Request.Cache\n  ): Layer<never>\n} = (<E, R>(cache: Request.Cache | Effect.Effect<Request.Cache, E, R>) =>\n  scopedDiscard(\n    core.isEffect(cache) ?\n      core.flatMap(cache, (x) => fiberRuntime.fiberRefLocallyScoped(query.currentCache as any, x)) :\n      fiberRuntime.fiberRefLocallyScoped(query.currentCache as any, cache)\n  )) as any\n\n/**\n * @since 2.0.0\n * @category scheduler\n */\nexport const setScheduler: (scheduler: Scheduler.Scheduler) => Layer<never> = (\n  scheduler: Scheduler.Scheduler\n): Layer<never> =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(Scheduler.currentScheduler, scheduler)\n  )\n\n/**\n * Create and add a span to the current span stack.\n *\n * The span is ended when the Layer is released.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const span: (\n  name: string,\n  options?: Tracer.SpanOptions & {\n    readonly onEnd?:\n      | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n      | undefined\n  }\n) => Layer<Tracer.ParentSpan> = circularLayer.span\n\n/**\n * Create a Layer that sets the current Tracer\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const setTracer: (tracer: Tracer.Tracer) => Layer<never> = circularLayer.setTracer\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const setTracerEnabled: (enabled: boolean) => Layer<never> = (enabled: boolean) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentTracerEnabled, enabled)\n  )\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const setTracerTiming: (enabled: boolean) => Layer<never> = (enabled: boolean) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentTracerTimingEnabled, enabled)\n  )\n\n/**\n * @since 2.0.0\n * @category logging\n */\nexport const setUnhandledErrorLogLevel: (level: Option.Option<LogLevel>) => Layer<never> = (\n  level: Option.Option<LogLevel>\n): Layer<never> =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentUnhandledErrorLogLevel, level)\n  )\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions & {\n      readonly onEnd?:\n        | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n        | undefined\n    }\n  ): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Layer<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions & {\n      readonly onEnd?:\n        | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n        | undefined\n    }\n  ): Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n} = internal.withSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withParentSpan: {\n  (span: Tracer.AnySpan): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(self: Layer<A, E, R>, span: Tracer.AnySpan): Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n} = internal.withParentSpan\n\n// -----------------------------------------------------------------------------\n// memo map\n// -----------------------------------------------------------------------------\n\n/**\n * Constructs a `MemoMap` that can be used to build additional layers.\n *\n * @since 2.0.0\n * @category memo map\n */\nexport const makeMemoMap: Effect.Effect<MemoMap> = internal.makeMemoMap\n\n/**\n * Builds a layer into an `Effect` value, using the specified `MemoMap` to memoize\n * the layer construction.\n *\n * @since 2.0.0\n * @category memo map\n */\nexport const buildWithMemoMap: {\n  (\n    memoMap: MemoMap,\n    scope: Scope.Scope\n  ): <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<Context.Context<ROut>, E, RIn>\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>,\n    memoMap: MemoMap,\n    scope: Scope.Scope\n  ): Effect.Effect<Context.Context<ROut>, E, RIn>\n} = internal.buildWithMemoMap\n", "import type * as ConfigProvider from \"../../ConfigProvider.js\"\nimport * as Context from \"../../Context.js\"\nimport type * as Effect from \"../../Effect.js\"\nimport type * as Exit from \"../../Exit.js\"\nimport { dual } from \"../../Function.js\"\nimport * as HashSet from \"../../HashSet.js\"\nimport type * as Layer from \"../../Layer.js\"\nimport type * as Logger from \"../../Logger.js\"\nimport type * as LogLevel from \"../../LogLevel.js\"\nimport type { Scope } from \"../../Scope.js\"\nimport type * as Supervisor from \"../../Supervisor.js\"\nimport type * as Tracer from \"../../Tracer.js\"\nimport * as core from \"../core.js\"\nimport * as fiberRuntime from \"../fiberRuntime.js\"\nimport * as layer from \"../layer.js\"\nimport * as runtimeFlags from \"../runtimeFlags.js\"\nimport * as runtimeFlagsPatch from \"../runtimeFlagsPatch.js\"\nimport * as _supervisor from \"../supervisor.js\"\nimport * as tracer from \"../tracer.js\"\n\n// circular with Logger\n\n/** @internal */\nexport const minimumLogLevel = (level: LogLevel.LogLevel): Layer.Layer<never> =>\n  layer.scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(\n      fiberRuntime.currentMinimumLogLevel,\n      level\n    )\n  )\n\n/** @internal */\nexport const withMinimumLogLevel = dual<\n  (level: LogLevel.LogLevel) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, level: LogLevel.LogLevel) => Effect.Effect<A, E, R>\n>(2, (self, level) =>\n  core.fiberRefLocally(\n    fiberRuntime.currentMinimumLogLevel,\n    level\n  )(self))\n\n/** @internal */\nexport const addLogger = <A>(logger: Logger.Logger<unknown, A>): Layer.Layer<never> =>\n  layer.scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(\n      fiberRuntime.currentLoggers,\n      HashSet.add(logger)\n    )\n  )\n\n/** @internal */\nexport const addLoggerEffect = <A, E, R>(\n  effect: Effect.Effect<Logger.Logger<unknown, A>, E, R>\n): Layer.Layer<never, E, R> =>\n  layer.unwrapEffect(\n    core.map(effect, addLogger)\n  )\n\n/** @internal */\nexport const addLoggerScoped = <A, E, R>(\n  effect: Effect.Effect<Logger.Logger<unknown, A>, E, R>\n): Layer.Layer<never, E, Exclude<R, Scope>> =>\n  layer.unwrapScoped(\n    core.map(effect, addLogger)\n  )\n\n/** @internal */\nexport const removeLogger = <A>(logger: Logger.Logger<unknown, A>): Layer.Layer<never> =>\n  layer.scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(\n      fiberRuntime.currentLoggers,\n      HashSet.remove(logger)\n    )\n  )\n\n/** @internal */\nexport const replaceLogger = dual<\n  <B>(that: Logger.Logger<unknown, B>) => <A>(self: Logger.Logger<unknown, A>) => Layer.Layer<never>,\n  <A, B>(self: Logger.Logger<unknown, A>, that: Logger.Logger<unknown, B>) => Layer.Layer<never>\n>(2, (self, that) => layer.flatMap(removeLogger(self), () => addLogger(that)))\n\n/** @internal */\nexport const replaceLoggerEffect = dual<\n  <B, E, R>(\n    that: Effect.Effect<Logger.Logger<unknown, B>, E, R>\n  ) => <A>(self: Logger.Logger<unknown, A>) => Layer.Layer<never, E, R>,\n  <A, B, E, R>(\n    self: Logger.Logger<unknown, A>,\n    that: Effect.Effect<Logger.Logger<unknown, B>, E, R>\n  ) => Layer.Layer<never, E, R>\n>(2, (self, that) => layer.flatMap(removeLogger(self), () => addLoggerEffect(that)))\n\n/** @internal */\nexport const replaceLoggerScoped = dual<\n  <B, E, R>(\n    that: Effect.Effect<Logger.Logger<unknown, B>, E, R>\n  ) => <A>(self: Logger.Logger<unknown, A>) => Layer.Layer<never, E, Exclude<R, Scope>>,\n  <A, B, E, R>(\n    self: Logger.Logger<unknown, A>,\n    that: Effect.Effect<Logger.Logger<unknown, B>, E, R>\n  ) => Layer.Layer<never, E, Exclude<R, Scope>>\n>(2, (self, that) => layer.flatMap(removeLogger(self), () => addLoggerScoped(that)))\n\n/** @internal */\nexport const addSupervisor = <A>(supervisor: Supervisor.Supervisor<A>): Layer.Layer<never> =>\n  layer.scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(\n      fiberRuntime.currentSupervisor,\n      (current) => new _supervisor.Zip(current, supervisor)\n    )\n  )\n\n/** @internal */\nexport const enableCooperativeYielding: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.enable(runtimeFlags.CooperativeYielding)\n  )\n)\n\n/** @internal */\nexport const enableInterruption: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.enable(runtimeFlags.Interruption)\n  )\n)\n\n/** @internal */\nexport const enableOpSupervision: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.enable(runtimeFlags.OpSupervision)\n  )\n)\n\n/** @internal */\nexport const enableRuntimeMetrics: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.enable(runtimeFlags.RuntimeMetrics)\n  )\n)\n\n/** @internal */\nexport const enableWindDown: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.enable(runtimeFlags.WindDown)\n  )\n)\n\n/** @internal */\nexport const disableCooperativeYielding: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.disable(runtimeFlags.CooperativeYielding)\n  )\n)\n\n/** @internal */\nexport const disableInterruption: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.disable(runtimeFlags.Interruption)\n  )\n)\n\n/** @internal */\nexport const disableOpSupervision: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.disable(runtimeFlags.OpSupervision)\n  )\n)\n\n/** @internal */\nexport const disableRuntimeMetrics: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.disable(runtimeFlags.RuntimeMetrics)\n  )\n)\n\n/** @internal */\nexport const disableWindDown: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.disable(runtimeFlags.WindDown)\n  )\n)\n\n/** @internal */\nexport const setConfigProvider = (configProvider: ConfigProvider.ConfigProvider): Layer.Layer<never> =>\n  layer.scopedDiscard(fiberRuntime.withConfigProviderScoped(configProvider))\n\n/** @internal */\nexport const parentSpan = (span: Tracer.AnySpan): Layer.Layer<Tracer.ParentSpan> =>\n  layer.succeedContext(Context.make(tracer.spanTag, span))\n\n/** @internal */\nexport const span = (\n  name: string,\n  options?: Tracer.SpanOptions & {\n    readonly onEnd?:\n      | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n      | undefined\n  }\n): Layer.Layer<Tracer.ParentSpan> => {\n  options = tracer.addSpanStackTrace(options) as any\n  return layer.scoped(\n    tracer.spanTag,\n    options?.onEnd\n      ? core.tap(\n        fiberRuntime.makeSpanScoped(name, options),\n        (span) => fiberRuntime.addFinalizer((exit) => options.onEnd!(span, exit))\n      )\n      : fiberRuntime.makeSpanScoped(name, options)\n  )\n}\n\n/** @internal */\nexport const setTracer = (tracer: Tracer.Tracer): Layer.Layer<never> =>\n  layer.scopedDiscard(fiberRuntime.withTracerScoped(tracer))\n", "/**\n * @since 2.0.0\n */\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as ConfigError from \"./ConfigError.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type * as HashMap from \"./HashMap.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/config.js\"\nimport type * as LogLevel from \"./LogLevel.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as Redacted from \"./Redacted.js\"\nimport type * as Secret from \"./Secret.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ConfigTypeId: unique symbol = internal.ConfigTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ConfigTypeId = typeof ConfigTypeId\n\n/**\n * A `Config` describes the structure of some configuration data.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Config<out A> extends Config.Variance<A>, Effect.Effect<A, ConfigError.ConfigError> {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Config {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A> {\n    readonly [ConfigTypeId]: {\n      readonly _A: Types.Covariant<A>\n    }\n  }\n\n  /**\n   * @since 2.5.0\n   * @category models\n   */\n  export type Success<T extends Config<any>> = [T] extends [Config<infer _A>] ? _A : never\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Primitive<out A> extends Config<A> {\n    readonly description: string\n    parse(text: string): Either.Either<A, ConfigError.ConfigError>\n  }\n\n  /**\n   * Wraps a nested structure, converting all primitives to a `Config`.\n   *\n   * `Config.Wrap<{ key: string }>` becomes `{ key: Config<string> }`\n   *\n   * To create the resulting config, use the `unwrap` constructor.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export type Wrap<A> = [NonNullable<A>] extends [infer T] ? [IsPlainObject<T>] extends [true] ?\n        | { readonly [K in keyof A]: Wrap<A[K]> }\n        | Config<A>\n    : Config<A>\n    : Config<A>\n\n  type IsPlainObject<A> = [A] extends [Record<string, any>]\n    ? [keyof A] extends [never] ? false : [keyof A] extends [string] ? true : false\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type LiteralValue = string | number | boolean | null | bigint\n\n/**\n * Constructs a config from a tuple / struct / arguments of configs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const all: <const Arg extends Iterable<Config<any>> | Record<string, Config<any>>>(\n  arg: Arg\n) => Config<\n  [Arg] extends [ReadonlyArray<Config<any>>] ? {\n      -readonly [K in keyof Arg]: [Arg[K]] extends [Config<infer A>] ? A : never\n    }\n    : [Arg] extends [Iterable<Config<infer A>>] ? Array<A>\n    : [Arg] extends [Record<string, Config<any>>] ? {\n        -readonly [K in keyof Arg]: [Arg[K]] extends [Config<infer A>] ? A : never\n      }\n    : never\n> = internal.all\n\n/**\n * Constructs a config for an array of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const array: <A>(config: Config<A>, name?: string) => Config<Array<A>> = internal.array\n\n/**\n * Constructs a config for a boolean value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const boolean: (name?: string) => Config<boolean> = internal.boolean\n\n/**\n * Constructs a config for a sequence of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const chunk: <A>(config: Config<A>, name?: string) => Config<Chunk.Chunk<A>> = internal.chunk\n\n/**\n * Constructs a config for a date value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const date: (name?: string) => Config<Date> = internal.date\n\n/**\n * Constructs a config that fails with the specified message.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: (message: string) => Config<never> = internal.fail\n\n/**\n * Constructs a config for a float value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const number: (name?: string) => Config<number> = internal.number\n\n/**\n * Constructs a config for a integer value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const integer: (name?: string) => Config<number> = internal.integer\n\n/**\n * Constructs a config for a literal value.\n *\n * @example\n * import { Config } from \"effect\"\n *\n * const config = Config.literal(\"http\", \"https\")(\"PROTOCOL\")\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const literal: <Literals extends ReadonlyArray<LiteralValue>>(...literals: Literals) => (\n  name?: string\n) => Config<Literals[number]> = internal.literal\n\n/**\n * Constructs a config for a `LogLevel` value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const logLevel: (name?: string) => Config<LogLevel.LogLevel> = internal.logLevel\n\n/**\n * Constructs a config for a duration value.\n *\n * @since 2.5.0\n * @category constructors\n */\nexport const duration: (name?: string) => Config<Duration.Duration> = internal.duration\n\n/**\n * This function returns `true` if the specified value is an `Config` value,\n * `false` otherwise.\n *\n * This function can be useful for checking the type of a value before\n * attempting to operate on it as an `Config` value. For example, you could\n * use `isConfig` to check the type of a value before using it as an\n * argument to a function that expects an `Config` value.\n *\n * @param u - The value to check for being a `Config` value.\n *\n * @returns `true` if the specified value is a `Config` value, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isConfig: (u: unknown) => u is Config<unknown> = internal.isConfig\n\n/**\n * Returns a  config whose structure is the same as this one, but which produces\n * a different value, constructed using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): (self: Config<A>) => Config<B>\n  <A, B>(self: Config<A>, f: (a: A) => B): Config<B>\n} = internal.map\n\n/**\n * Returns a config whose structure is the same as this one, but which may\n * produce a different value, constructed using the specified function, which\n * may throw exceptions that will be translated into validation errors.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapAttempt: {\n  <A, B>(f: (a: A) => B): (self: Config<A>) => Config<B>\n  <A, B>(self: Config<A>, f: (a: A) => B): Config<B>\n} = internal.mapAttempt\n\n/**\n * Returns a new config whose structure is the samea as this one, but which\n * may produce a different value, constructed using the specified fallible\n * function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapOrFail: {\n  <A, B>(f: (a: A) => Either.Either<B, ConfigError.ConfigError>): (self: Config<A>) => Config<B>\n  <A, B>(self: Config<A>, f: (a: A) => Either.Either<B, ConfigError.ConfigError>): Config<B>\n} = internal.mapOrFail\n\n/**\n * Returns a config that has this configuration nested as a property of the\n * specified name.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const nested: {\n  (name: string): <A>(self: Config<A>) => Config<A>\n  <A>(self: Config<A>, name: string): Config<A>\n} = internal.nested\n\n/**\n * Returns a config whose structure is preferentially described by this\n * config, but which falls back to the specified config if there is an issue\n * reading from this config.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const orElse: {\n  <A2>(that: LazyArg<Config<A2>>): <A>(self: Config<A>) => Config<A2 | A>\n  <A, A2>(self: Config<A>, that: LazyArg<Config<A2>>): Config<A | A2>\n} = internal.orElse\n\n/**\n * Returns configuration which reads from this configuration, but which falls\n * back to the specified configuration if reading from this configuration\n * fails with an error satisfying the specified predicate.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const orElseIf: {\n  <A2>(\n    options: {\n      readonly if: Predicate<ConfigError.ConfigError>\n      readonly orElse: LazyArg<Config<A2>>\n    }\n  ): <A>(self: Config<A>) => Config<A>\n  <A, A2>(\n    self: Config<A>,\n    options: {\n      readonly if: Predicate<ConfigError.ConfigError>\n      readonly orElse: LazyArg<Config<A2>>\n    }\n  ): Config<A>\n} = internal.orElseIf\n\n/**\n * Returns an optional version of this config, which will be `None` if the\n * data is missing from configuration, and `Some` otherwise.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const option: <A>(self: Config<A>) => Config<Option.Option<A>> = internal.option\n\n/**\n * Constructs a new primitive config.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const primitive: <A>(\n  description: string,\n  parse: (text: string) => Either.Either<A, ConfigError.ConfigError>\n) => Config<A> = internal.primitive\n\n/**\n * Returns a config that describes a sequence of values, each of which has the\n * structure of this config.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const repeat: <A>(self: Config<A>) => Config<Array<A>> = internal.repeat\n\n/**\n * Constructs a config for a secret value.\n *\n * @since 2.0.0\n * @category constructors\n * @deprecated\n */\nexport const secret: (name?: string) => Config<Secret.Secret> = internal.secret\n\n/**\n * Constructs a config for a redacted value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const redacted: (name?: string) => Config<Redacted.Redacted> = internal.redacted\n\n/**\n * Constructs a config for a sequence of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashSet: <A>(config: Config<A>, name?: string) => Config<HashSet.HashSet<A>> = internal.hashSet\n\n/**\n * Constructs a config for a string value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const string: (name?: string) => Config<string> = internal.string\n\n/**\n * Constructs a config which contains the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Config<A> = internal.succeed\n\n/**\n * Lazily constructs a config.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <A>(config: LazyArg<Config<A>>) => Config<A> = internal.suspend\n\n/**\n * Constructs a config which contains the specified lazy value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: <A>(value: LazyArg<A>) => Config<A> = internal.sync\n\n/**\n * Constructs a config for a sequence of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashMap: <A>(config: Config<A>, name?: string) => Config<HashMap.HashMap<string, A>> = internal.hashMap\n\n/**\n * Constructs a config from some configuration wrapped with the `Wrap<A>` utility type.\n *\n * For example:\n *\n * ```\n * import { Config, unwrap } from \"./Config\"\n *\n * interface Options { key: string }\n *\n * const makeConfig = (config: Config.Wrap<Options>): Config<Options> => unwrap(config)\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrap: <A>(wrapped: Config.Wrap<A>) => Config<A> = internal.unwrap\n\n/**\n * Returns a config that describes the same structure as this one, but which\n * performs validation during loading.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const validate: {\n  <A, B extends A>(\n    options: {\n      readonly message: string\n      readonly validation: Refinement<A, B>\n    }\n  ): (self: Config<A>) => Config<B>\n  <A>(options: {\n    readonly message: string\n    readonly validation: Predicate<A>\n  }): (self: Config<A>) => Config<A>\n  <A, B extends A>(\n    self: Config<A>,\n    options: {\n      readonly message: string\n      readonly validation: Refinement<A, B>\n    }\n  ): Config<B>\n  <A>(self: Config<A>, options: {\n    readonly message: string\n    readonly validation: Predicate<A>\n  }): Config<A>\n} = internal.validate\n\n/**\n * Returns a config that describes the same structure as this one, but has the\n * specified default value in case the information cannot be found.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withDefault: {\n  <const A2>(def: A2): <A>(self: Config<A>) => Config<A2 | A>\n  <A, const A2>(self: Config<A>, def: A2): Config<A | A2>\n} = internal.withDefault\n\n/**\n * Adds a description to this configuration, which is intended for humans.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withDescription: {\n  (description: string): <A>(self: Config<A>) => Config<A>\n  <A>(self: Config<A>, description: string): Config<A>\n} = internal.withDescription\n\n/**\n * Returns a config that is the composition of this config and the specified\n * config.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  <B>(that: Config<B>): <A>(self: Config<A>) => Config<[A, B]>\n  <A, B>(self: Config<A>, that: Config<B>): Config<[A, B]>\n} = internal.zip\n\n/**\n * Returns a config that is the composes this config and the specified config\n * using the provided function.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <B, A, C>(that: Config<B>, f: (a: A, b: B) => C): (self: Config<A>) => Config<C>\n  <A, B, C>(self: Config<A>, that: Config<B>, f: (a: A, b: B) => C): Config<C>\n} = internal.zipWith\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport * as internal from \"./internal/configError.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ConfigErrorTypeId: unique symbol = internal.ConfigErrorTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ConfigErrorTypeId = typeof ConfigErrorTypeId\n\n/**\n * The possible ways that loading configuration data may fail.\n *\n * @since 2.0.0\n * @category models\n */\nexport type ConfigError =\n  | And\n  | Or\n  | InvalidData\n  | MissingData\n  | SourceUnavailable\n  | Unsupported\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ConfigError {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Proto {\n    readonly _tag: \"ConfigError\"\n    readonly [ConfigErrorTypeId]: ConfigErrorTypeId\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type Reducer<C, Z> = ConfigErrorReducer<C, Z>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ConfigErrorReducer<in C, in out Z> {\n  andCase(context: C, left: Z, right: Z): Z\n  orCase(context: C, left: Z, right: Z): Z\n  invalidDataCase(context: C, path: Array<string>, message: string): Z\n  missingDataCase(context: C, path: Array<string>, message: string): Z\n  sourceUnavailableCase(\n    context: C,\n    path: Array<string>,\n    message: string,\n    cause: Cause.Cause<unknown>\n  ): Z\n  unsupportedCase(context: C, path: Array<string>, message: string): Z\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface And extends ConfigError.Proto {\n  readonly _op: \"And\"\n  readonly left: ConfigError\n  readonly right: ConfigError\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Or extends ConfigError.Proto {\n  readonly _op: \"Or\"\n  readonly left: ConfigError\n  readonly right: ConfigError\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface InvalidData extends ConfigError.Proto {\n  readonly _op: \"InvalidData\"\n  readonly path: Array<string>\n  readonly message: string\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MissingData extends ConfigError.Proto {\n  readonly _op: \"MissingData\"\n  readonly path: Array<string>\n  readonly message: string\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SourceUnavailable extends ConfigError.Proto {\n  readonly _op: \"SourceUnavailable\"\n  readonly path: Array<string>\n  readonly message: string\n  readonly cause: Cause.Cause<unknown>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Unsupported extends ConfigError.Proto {\n  readonly _op: \"Unsupported\"\n  readonly path: Array<string>\n  readonly message: string\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Options {\n  readonly pathDelim: string\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const And: (self: ConfigError, that: ConfigError) => ConfigError = internal.And\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Or: (self: ConfigError, that: ConfigError) => ConfigError = internal.Or\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const MissingData: (path: Array<string>, message: string, options?: Options) => ConfigError =\n  internal.MissingData\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const InvalidData: (path: Array<string>, message: string, options?: Options) => ConfigError =\n  internal.InvalidData\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const SourceUnavailable: (\n  path: Array<string>,\n  message: string,\n  cause: Cause.Cause<unknown>,\n  options?: Options\n) => ConfigError = internal.SourceUnavailable\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Unsupported: (path: Array<string>, message: string, options?: Options) => ConfigError =\n  internal.Unsupported\n\n/**\n * Returns `true` if the specified value is a `ConfigError`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isConfigError: (u: unknown) => u is ConfigError = internal.isConfigError\n\n/**\n * Returns `true` if the specified `ConfigError` is an `And`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isAnd: (self: ConfigError) => self is And = internal.isAnd\n\n/**\n * Returns `true` if the specified `ConfigError` is an `Or`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isOr: (self: ConfigError) => self is Or = internal.isOr\n\n/**\n * Returns `true` if the specified `ConfigError` is an `InvalidData`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isInvalidData: (self: ConfigError) => self is InvalidData = internal.isInvalidData\n\n/**\n * Returns `true` if the specified `ConfigError` is an `MissingData`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isMissingData: (self: ConfigError) => self is MissingData = internal.isMissingData\n\n/**\n * Returns `true` if the specified `ConfigError` contains only `MissingData` errors, `false` otherwise.\n *\n * @since 2.0.0\n * @categer getters\n */\nexport const isMissingDataOnly: (self: ConfigError) => boolean = internal.isMissingDataOnly\n\n/**\n * Returns `true` if the specified `ConfigError` is a `SourceUnavailable`,\n * `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSourceUnavailable: (self: ConfigError) => self is SourceUnavailable = internal.isSourceUnavailable\n\n/**\n * Returns `true` if the specified `ConfigError` is an `Unsupported`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isUnsupported: (self: ConfigError) => self is Unsupported = internal.isUnsupported\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const prefixed: {\n  (prefix: Array<string>): (self: ConfigError) => ConfigError\n  (self: ConfigError, prefix: Array<string>): ConfigError\n} = internal.prefixed\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const reduceWithContext: {\n  <C, Z>(context: C, reducer: ConfigErrorReducer<C, Z>): (self: ConfigError) => Z\n  <C, Z>(self: ConfigError, context: C, reducer: ConfigErrorReducer<C, Z>): Z\n} = internal.reduceWithContext\n", "import * as Equal from \"../Equal.js\"\nimport { pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as Redacted from \"../Redacted.js\"\n\n/** @internal */\nconst RedactedSymbolKey = \"effect/Redacted\"\n\n/** @internal */\nexport const redactedRegistry = globalValue(\n  \"effect/Redacted/redactedRegistry\",\n  () => new WeakMap<Redacted.Redacted<any>, any>()\n)\n\n/** @internal */\nexport const RedactedTypeId: Redacted.RedactedTypeId = Symbol.for(\n  RedactedSymbolKey\n) as Redacted.RedactedTypeId\n\n/** @internal */\nexport const proto = {\n  [RedactedTypeId]: {\n    _A: (_: never) => _\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  toString() {\n    return \"<redacted>\"\n  },\n  toJSON() {\n    return \"<redacted>\"\n  },\n  [Hash.symbol]<T>(this: Redacted.Redacted<T>): number {\n    return pipe(\n      Hash.hash(RedactedSymbolKey),\n      Hash.combine(Hash.hash(redactedRegistry.get(this))),\n      Hash.cached(this)\n    )\n  },\n  [Equal.symbol]<T>(this: Redacted.Redacted<T>, that: unknown): boolean {\n    return isRedacted(that) && Equal.equals(redactedRegistry.get(this), redactedRegistry.get(that))\n  }\n}\n\n/** @internal */\nexport const isRedacted = (u: unknown): u is Redacted.Redacted<unknown> => hasProperty(u, RedactedTypeId)\n\n/** @internal */\nexport const make = <T>(value: T): Redacted.Redacted<T> => {\n  const redacted = Object.create(proto)\n  redactedRegistry.set(redacted, value)\n  return redacted\n}\n\n/** @internal */\nexport const value = <T>(self: Redacted.Redacted<T>): T => {\n  if (redactedRegistry.has(self)) {\n    return redactedRegistry.get(self)\n  } else {\n    throw new Error(\"Unable to get redacted value\")\n  }\n}\n\n/** @internal */\nexport const unsafeWipe = <T>(self: Redacted.Redacted<T>): boolean => redactedRegistry.delete(self)\n", "import * as Arr from \"../Array.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as Secret from \"../Secret.js\"\nimport * as redacted_ from \"./redacted.js\"\n\n/**\n * @internal\n * @deprecated\n */\nconst SecretSymbolKey = \"effect/Secret\"\n\n/**\n * @internal\n * @deprecated\n */\nexport const SecretTypeId: Secret.SecretTypeId = Symbol.for(\n  SecretSymbolKey\n) as Secret.SecretTypeId\n\n/**\n * @internal\n * @deprecated\n */\nexport const isSecret = (u: unknown): u is Secret.Secret => hasProperty(u, SecretTypeId)\n\n/**\n * @internal\n * @deprecated\n */\nexport const make = (bytes: Array<number>): Secret.Secret => {\n  const secret = Object.create({\n    ...redacted_.proto,\n    [SecretTypeId]: SecretTypeId\n  })\n  Object.defineProperty(secret, \"toString\", {\n    enumerable: false,\n    value() {\n      return \"Secret(<redacted>)\"\n    }\n  })\n  Object.defineProperty(secret, \"toJSON\", {\n    enumerable: false,\n    value() {\n      return \"<redacted>\"\n    }\n  })\n  Object.defineProperty(secret, \"raw\", {\n    enumerable: false,\n    value: bytes\n  })\n  redacted_.redactedRegistry.set(secret, bytes.map((byte) => String.fromCharCode(byte)).join(\"\"))\n  return secret\n}\n\n/**\n * @internal\n * @deprecated\n */\nexport const fromIterable = (iterable: Iterable<string>): Secret.Secret =>\n  make(Arr.fromIterable(iterable).map((char) => char.charCodeAt(0)))\n\n/**\n * @internal\n * @deprecated\n */\nexport const fromString = (text: string): Secret.Secret => {\n  return make(text.split(\"\").map((char) => char.charCodeAt(0)))\n}\n\n/**\n * @internal\n * @deprecated\n */\nexport const value = (self: Secret.Secret): string => {\n  return self.raw.map((byte) => String.fromCharCode(byte)).join(\"\")\n}\n\n/**\n * @internal\n * @deprecated\n */\nexport const unsafeWipe = (self: Secret.Secret): void => {\n  for (let i = 0; i < self.raw.length; i++) {\n    self.raw[i] = 0\n  }\n  redacted_.redactedRegistry.delete(self)\n}\n", "import * as Chunk from \"../Chunk.js\"\nimport type * as Config from \"../Config.js\"\nimport * as ConfigError from \"../ConfigError.js\"\nimport * as Duration from \"../Duration.js\"\nimport * as Either from \"../Either.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constTrue, dual, pipe } from \"../Function.js\"\nimport type * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport type * as LogLevel from \"../LogLevel.js\"\nimport * as Option from \"../Option.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"../Predicate.js\"\nimport type * as Redacted from \"../Redacted.js\"\nimport type * as Secret from \"../Secret.js\"\nimport * as configError from \"./configError.js\"\nimport * as core from \"./core.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport * as effectable from \"./effectable.js\"\nimport * as OpCodes from \"./opCodes/config.js\"\nimport * as redacted_ from \"./redacted.js\"\nimport * as InternalSecret from \"./secret.js\"\n\nconst ConfigSymbolKey = \"effect/Config\"\n\n/** @internal */\nexport const ConfigTypeId: Config.ConfigTypeId = Symbol.for(\n  ConfigSymbolKey\n) as Config.ConfigTypeId\n\n/** @internal */\nexport type ConfigPrimitive =\n  | Constant\n  | Described\n  | Fallback\n  | Fail\n  | Lazy\n  | MapOrFail\n  | Nested\n  | Primitive\n  | Sequence\n  | Table\n  | Zipped\n\nconst configVariance = {\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\nconst proto = {\n  ...effectable.CommitPrototype,\n  [ConfigTypeId]: configVariance,\n  commit(this: Config.Config<unknown>) {\n    return defaultServices.config(this)\n  }\n}\n\n/** @internal */\nexport type Op<Tag extends string, Body = {}> = Config.Config<never> & Body & {\n  readonly _tag: Tag\n}\n\n/** @internal */\nexport interface Constant extends\n  Op<OpCodes.OP_CONSTANT, {\n    readonly value: unknown\n    parse(text: string): Either.Either<unknown, ConfigError.ConfigError>\n  }>\n{}\n\n/** @internal */\nexport interface Described extends\n  Op<OpCodes.OP_DESCRIBED, {\n    readonly config: Config.Config<unknown>\n    readonly description: string\n  }>\n{}\n\n/** @internal */\nexport interface Fallback extends\n  Op<OpCodes.OP_FALLBACK, {\n    readonly first: Config.Config<unknown>\n    readonly second: Config.Config<unknown>\n    readonly condition: Predicate<ConfigError.ConfigError>\n  }>\n{}\n\n/** @internal */\nexport interface Fail extends\n  Op<OpCodes.OP_FAIL, {\n    readonly message: string\n    parse(text: string): Either.Either<unknown, ConfigError.ConfigError>\n  }>\n{}\n\n/** @internal */\nexport interface Lazy extends\n  Op<OpCodes.OP_LAZY, {\n    config(): Config.Config<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface MapOrFail extends\n  Op<OpCodes.OP_MAP_OR_FAIL, {\n    readonly original: Config.Config<unknown>\n    mapOrFail(value: unknown): Either.Either<unknown, ConfigError.ConfigError>\n  }>\n{}\n\n/** @internal */\nexport interface Nested extends\n  Op<OpCodes.OP_NESTED, {\n    readonly name: string\n    readonly config: Config.Config<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface Primitive extends\n  Op<OpCodes.OP_PRIMITIVE, {\n    readonly description: string\n    parse(text: string): Either.Either<unknown, ConfigError.ConfigError>\n  }>\n{}\n\n/** @internal */\nexport interface Sequence extends\n  Op<OpCodes.OP_SEQUENCE, {\n    readonly config: Config.Config<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface Table extends\n  Op<OpCodes.OP_HASHMAP, {\n    readonly op: OpCodes.OP_HASHMAP\n    readonly valueConfig: Config.Config<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface Zipped extends\n  Op<OpCodes.OP_ZIP_WITH, {\n    readonly op: OpCodes.OP_ZIP_WITH\n    readonly left: Config.Config<unknown>\n    readonly right: Config.Config<unknown>\n    zip(a: unknown, b: unknown): unknown\n  }>\n{}\n\n/** @internal */\nexport const boolean = (name?: string): Config.Config<boolean> => {\n  const config = primitive(\n    \"a boolean property\",\n    (text) => {\n      switch (text) {\n        case \"true\":\n        case \"yes\":\n        case \"on\":\n        case \"1\": {\n          return Either.right(true)\n        }\n        case \"false\":\n        case \"no\":\n        case \"off\":\n        case \"0\": {\n          return Either.right(false)\n        }\n        default: {\n          const error = configError.InvalidData(\n            [],\n            `Expected a boolean value but received ${text}`\n          )\n          return Either.left(error)\n        }\n      }\n    }\n  )\n  return name === undefined ? config : nested(config, name)\n}\n\n/** @internal */\nexport const array = <A>(config: Config.Config<A>, name?: string): Config.Config<Array<A>> => {\n  return pipe(chunk(config, name), map(Chunk.toArray))\n}\n\n/** @internal */\nexport const chunk = <A>(config: Config.Config<A>, name?: string): Config.Config<Chunk.Chunk<A>> => {\n  return map(name === undefined ? repeat(config) : nested(repeat(config), name), Chunk.unsafeFromArray)\n}\n\n/** @internal */\nexport const date = (name?: string): Config.Config<Date> => {\n  const config = primitive(\n    \"a date property\",\n    (text) => {\n      const result = Date.parse(text)\n      if (Number.isNaN(result)) {\n        return Either.left(\n          configError.InvalidData(\n            [],\n            `Expected a Date value but received ${text}`\n          )\n        )\n      }\n      return Either.right(new Date(result))\n    }\n  )\n  return name === undefined ? config : nested(config, name)\n}\n\n/** @internal */\nexport const fail = (message: string): Config.Config<never> => {\n  const fail = Object.create(proto)\n  fail._tag = OpCodes.OP_FAIL\n  fail.message = message\n  fail.parse = () => Either.left(configError.Unsupported([], message))\n  return fail\n}\n\n/** @internal */\nexport const number = (name?: string): Config.Config<number> => {\n  const config = primitive(\n    \"a number property\",\n    (text) => {\n      const result = Number.parseFloat(text)\n      if (Number.isNaN(result)) {\n        return Either.left(\n          configError.InvalidData(\n            [],\n            `Expected a number value but received ${text}`\n          )\n        )\n      }\n      return Either.right(result)\n    }\n  )\n  return name === undefined ? config : nested(config, name)\n}\n\n/** @internal */\nexport const integer = (name?: string): Config.Config<number> => {\n  const config = primitive(\n    \"an integer property\",\n    (text) => {\n      const result = Number.parseInt(text, 10)\n      if (Number.isNaN(result)) {\n        return Either.left(\n          configError.InvalidData(\n            [],\n            `Expected an integer value but received ${text}`\n          )\n        )\n      }\n      return Either.right(result)\n    }\n  )\n  return name === undefined ? config : nested(config, name)\n}\n\n/** @internal */\nexport const literal = <Literals extends ReadonlyArray<Config.LiteralValue>>(...literals: Literals) =>\n(\n  name?: string\n): Config.Config<Literals[number]> => {\n  const valuesString = literals.map(String).join(\", \")\n  const config = primitive(`one of (${valuesString})`, (text) => {\n    const found = literals.find((value) => String(value) === text)\n    if (found === undefined) {\n      return Either.left(\n        configError.InvalidData(\n          [],\n          `Expected one of (${valuesString}) but received ${text}`\n        )\n      )\n    }\n    return Either.right(found)\n  })\n  return name === undefined ? config : nested(config, name)\n}\n\n/** @internal */\nexport const logLevel = (name?: string): Config.Config<LogLevel.LogLevel> => {\n  const config = mapOrFail(string(), (value) => {\n    const label = value.toUpperCase()\n    const level = core.allLogLevels.find((level) => level.label === label)\n    return level === undefined\n      ? Either.left(configError.InvalidData([], `Expected a log level but received ${value}`))\n      : Either.right(level)\n  })\n  return name === undefined ? config : nested(config, name)\n}\n\n/** @internal */\nexport const duration = (name?: string): Config.Config<Duration.Duration> => {\n  const config = mapOrFail(string(), (value) => {\n    const duration = Duration.decodeUnknown(value)\n    return Either.fromOption(duration, () => configError.InvalidData([], `Expected a duration but received ${value}`))\n  })\n  return name === undefined ? config : nested(config, name)\n}\n\n/** @internal */\nexport const map = dual<\n  <A, B>(f: (a: A) => B) => (self: Config.Config<A>) => Config.Config<B>,\n  <A, B>(self: Config.Config<A>, f: (a: A) => B) => Config.Config<B>\n>(2, (self, f) => mapOrFail(self, (a) => Either.right(f(a))))\n\n/** @internal */\nexport const mapAttempt = dual<\n  <A, B>(f: (a: A) => B) => (self: Config.Config<A>) => Config.Config<B>,\n  <A, B>(self: Config.Config<A>, f: (a: A) => B) => Config.Config<B>\n>(2, (self, f) =>\n  mapOrFail(self, (a) => {\n    try {\n      return Either.right(f(a))\n    } catch (error) {\n      return Either.left(\n        configError.InvalidData(\n          [],\n          error instanceof Error ? error.message : `${error}`\n        )\n      )\n    }\n  }))\n\n/** @internal */\nexport const mapOrFail = dual<\n  <A, B>(f: (a: A) => Either.Either<B, ConfigError.ConfigError>) => (self: Config.Config<A>) => Config.Config<B>,\n  <A, B>(self: Config.Config<A>, f: (a: A) => Either.Either<B, ConfigError.ConfigError>) => Config.Config<B>\n>(2, (self, f) => {\n  const mapOrFail = Object.create(proto)\n  mapOrFail._tag = OpCodes.OP_MAP_OR_FAIL\n  mapOrFail.original = self\n  mapOrFail.mapOrFail = f\n  return mapOrFail\n})\n\n/** @internal */\nexport const nested = dual<\n  (name: string) => <A>(self: Config.Config<A>) => Config.Config<A>,\n  <A>(self: Config.Config<A>, name: string) => Config.Config<A>\n>(2, (self, name) => {\n  const nested = Object.create(proto)\n  nested._tag = OpCodes.OP_NESTED\n  nested.name = name\n  nested.config = self\n  return nested\n})\n\n/** @internal */\nexport const orElse = dual<\n  <A2>(that: LazyArg<Config.Config<A2>>) => <A>(self: Config.Config<A>) => Config.Config<A | A2>,\n  <A, A2>(self: Config.Config<A>, that: LazyArg<Config.Config<A2>>) => Config.Config<A | A2>\n>(2, (self, that) => {\n  const fallback = Object.create(proto)\n  fallback._tag = OpCodes.OP_FALLBACK\n  fallback.first = self\n  fallback.second = suspend(that)\n  fallback.condition = constTrue\n  return fallback\n})\n\n/** @internal */\nexport const orElseIf = dual<\n  <A2>(\n    options: {\n      readonly if: Predicate<ConfigError.ConfigError>\n      readonly orElse: LazyArg<Config.Config<A2>>\n    }\n  ) => <A>(self: Config.Config<A>) => Config.Config<A>,\n  <A, A2>(\n    self: Config.Config<A>,\n    options: {\n      readonly if: Predicate<ConfigError.ConfigError>\n      readonly orElse: LazyArg<Config.Config<A2>>\n    }\n  ) => Config.Config<A>\n>(2, (self, options) => {\n  const fallback = Object.create(proto)\n  fallback._tag = OpCodes.OP_FALLBACK\n  fallback.first = self\n  fallback.second = suspend(options.orElse)\n  fallback.condition = options.if\n  return fallback\n})\n\n/** @internal */\nexport const option = <A>(self: Config.Config<A>): Config.Config<Option.Option<A>> => {\n  return pipe(\n    self,\n    map(Option.some),\n    orElseIf({ orElse: () => succeed(Option.none()), if: ConfigError.isMissingDataOnly })\n  )\n}\n\n/** @internal */\nexport const primitive = <A>(\n  description: string,\n  parse: (text: string) => Either.Either<A, ConfigError.ConfigError>\n): Config.Config<A> => {\n  const primitive = Object.create(proto)\n  primitive._tag = OpCodes.OP_PRIMITIVE\n  primitive.description = description\n  primitive.parse = parse\n  return primitive\n}\n\n/** @internal */\nexport const repeat = <A>(self: Config.Config<A>): Config.Config<Array<A>> => {\n  const repeat = Object.create(proto)\n  repeat._tag = OpCodes.OP_SEQUENCE\n  repeat.config = self\n  return repeat\n}\n\n/** @internal */\nexport const secret = (name?: string): Config.Config<Secret.Secret> => {\n  const config = primitive(\n    \"a secret property\",\n    (text) => Either.right(InternalSecret.fromString(text))\n  )\n  return name === undefined ? config : nested(config, name)\n}\n\n/** @internal */\nexport const redacted = (name?: string): Config.Config<Redacted.Redacted> => {\n  const config = primitive(\n    \"a redacted property\",\n    (text) => Either.right(redacted_.make(text))\n  )\n  return name === undefined ? config : nested(config, name)\n}\n\n/** @internal */\nexport const hashSet = <A>(config: Config.Config<A>, name?: string): Config.Config<HashSet.HashSet<A>> => {\n  const newConfig = map(chunk(config), HashSet.fromIterable)\n  return name === undefined ? newConfig : nested(newConfig, name)\n}\n\n/** @internal */\nexport const string = (name?: string): Config.Config<string> => {\n  const config = primitive(\n    \"a text property\",\n    Either.right\n  )\n  return name === undefined ? config : nested(config, name)\n}\n\n/** @internal */\nexport const all = <const Arg extends Iterable<Config.Config<any>> | Record<string, Config.Config<any>>>(\n  arg: Arg\n): Config.Config<\n  [Arg] extends [ReadonlyArray<Config.Config<any>>] ? {\n      -readonly [K in keyof Arg]: [Arg[K]] extends [Config.Config<infer A>] ? A : never\n    }\n    : [Arg] extends [Iterable<Config.Config<infer A>>] ? Array<A>\n    : [Arg] extends [Record<string, Config.Config<any>>] ? {\n        -readonly [K in keyof Arg]: [Arg[K]] extends [Config.Config<infer A>] ? A : never\n      }\n    : never\n> => {\n  if (Array.isArray(arg)) {\n    return tuple(arg) as any\n  } else if (Symbol.iterator in arg) {\n    return tuple([...(arg as Iterable<Config.Config<any>>)]) as any\n  }\n  return struct(arg) as any\n}\n\nconst struct = <NER extends Record<string, Config.Config<any>>>(r: NER): Config.Config<\n  {\n    [K in keyof NER]: [NER[K]] extends [{ [ConfigTypeId]: { _A: (_: never) => infer A } }] ? A : never\n  }\n> => {\n  const entries = Object.entries(r)\n  let result = pipe(entries[0][1], map((value) => ({ [entries[0][0]]: value })))\n  if (entries.length === 1) {\n    return result as any\n  }\n  const rest = entries.slice(1)\n  for (const [key, config] of rest) {\n    result = pipe(\n      result,\n      zipWith(config, (record, value) => ({ ...record, [key]: value }))\n    )\n  }\n  return result as any\n}\n\n/** @internal */\nexport const succeed = <A>(value: A): Config.Config<A> => {\n  const constant = Object.create(proto)\n  constant._tag = OpCodes.OP_CONSTANT\n  constant.value = value\n  constant.parse = () => Either.right(value)\n  return constant\n}\n\n/** @internal */\nexport const suspend = <A>(config: LazyArg<Config.Config<A>>): Config.Config<A> => {\n  const lazy = Object.create(proto)\n  lazy._tag = OpCodes.OP_LAZY\n  lazy.config = config\n  return lazy\n}\n\n/** @internal */\nexport const sync = <A>(value: LazyArg<A>): Config.Config<A> => {\n  return suspend(() => succeed(value()))\n}\n\n/** @internal */\nexport const hashMap = <A>(config: Config.Config<A>, name?: string): Config.Config<HashMap.HashMap<string, A>> => {\n  const table = Object.create(proto)\n  table._tag = OpCodes.OP_HASHMAP\n  table.valueConfig = config\n  return name === undefined ? table : nested(table, name)\n}\n\n/** @internal */\nexport const isConfig = (u: unknown): u is Config.Config<unknown> => hasProperty(u, ConfigTypeId)\n\n/** @internal */\nconst tuple = <T extends ArrayLike<Config.Config<any>>>(tuple: T): Config.Config<\n  {\n    [K in keyof T]: [T[K]] extends [Config.Config<infer A>] ? A : never\n  }\n> => {\n  if (tuple.length === 0) {\n    return succeed([]) as any\n  }\n  if (tuple.length === 1) {\n    return map(tuple[0], (x) => [x]) as any\n  }\n  let result = map(tuple[0], (x) => [x])\n  for (let i = 1; i < tuple.length; i++) {\n    const config = tuple[i]\n    result = pipe(\n      result,\n      zipWith(config, (tuple, value) => [...tuple, value])\n    ) as any\n  }\n  return result as any\n}\n\n/**\n * @internal\n */\nexport const unwrap = <A>(wrapped: Config.Config.Wrap<A>): Config.Config<A> => {\n  if (isConfig(wrapped)) {\n    return wrapped\n  }\n  return struct(\n    Object.fromEntries(\n      Object.entries(wrapped).map(([k, a]) => [k, unwrap(a as any)])\n    )\n  ) as any\n}\n\n/** @internal */\nexport const validate = dual<\n  {\n    <A, B extends A>(options: {\n      readonly message: string\n      readonly validation: Refinement<A, B>\n    }): (self: Config.Config<A>) => Config.Config<B>\n    <A>(options: {\n      readonly message: string\n      readonly validation: Predicate<A>\n    }): (self: Config.Config<A>) => Config.Config<A>\n  },\n  {\n    <A, B extends A>(self: Config.Config<A>, options: {\n      readonly message: string\n      readonly validation: Refinement<A, B>\n    }): Config.Config<B>\n    <A>(self: Config.Config<A>, options: {\n      readonly message: string\n      readonly validation: Predicate<A>\n    }): Config.Config<A>\n  }\n>(2, <A>(self: Config.Config<A>, { message, validation }: {\n  readonly message: string\n  readonly validation: Predicate<A>\n}) =>\n  mapOrFail(self, (a) => {\n    if (validation(a)) {\n      return Either.right(a)\n    }\n    return Either.left(configError.InvalidData([], message))\n  }))\n\n/** @internal */\nexport const withDefault = dual<\n  <const A2>(def: A2) => <A>(self: Config.Config<A>) => Config.Config<A | A2>,\n  <A, const A2>(self: Config.Config<A>, def: A2) => Config.Config<A | A2>\n>(2, (self, def) =>\n  orElseIf(self, {\n    orElse: () => succeed(def),\n    if: ConfigError.isMissingDataOnly\n  }))\n\n/** @internal */\nexport const withDescription = dual<\n  (description: string) => <A>(self: Config.Config<A>) => Config.Config<A>,\n  <A>(self: Config.Config<A>, description: string) => Config.Config<A>\n>(2, (self, description) => {\n  const described = Object.create(proto)\n  described._tag = OpCodes.OP_DESCRIBED\n  described.config = self\n  described.description = description\n  return described\n})\n\n/** @internal */\nexport const zip = dual<\n  <B>(that: Config.Config<B>) => <A>(self: Config.Config<A>) => Config.Config<[A, B]>,\n  <A, B>(self: Config.Config<A>, that: Config.Config<B>) => Config.Config<[A, B]>\n>(2, (self, that) => zipWith(self, that, (a, b) => [a, b]))\n\n/** @internal */\nexport const zipWith = dual<\n  <B, A, C>(that: Config.Config<B>, f: (a: A, b: B) => C) => (self: Config.Config<A>) => Config.Config<C>,\n  <A, B, C>(self: Config.Config<A>, that: Config.Config<B>, f: (a: A, b: B) => C) => Config.Config<C>\n>(3, (self, that, f) => {\n  const zipWith = Object.create(proto)\n  zipWith._tag = OpCodes.OP_ZIP_WITH\n  zipWith.left = self\n  zipWith.right = that\n  zipWith.zip = f\n  return zipWith\n})\n", "/**\n * @since 2.0.0\n */\nimport type * as Config from \"./Config.js\"\nimport type * as ConfigError from \"./ConfigError.js\"\nimport type * as PathPatch from \"./ConfigProviderPathPatch.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/configProvider.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ConfigProviderTypeId: unique symbol = internal.ConfigProviderTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ConfigProviderTypeId = typeof ConfigProviderTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FlatConfigProviderTypeId: unique symbol = internal.FlatConfigProviderTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FlatConfigProviderTypeId = typeof FlatConfigProviderTypeId\n\n/**\n * A ConfigProvider is a service that provides configuration given a description\n * of the structure of that configuration.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface ConfigProvider extends ConfigProvider.Proto, Pipeable {\n  /**\n   * Loads the specified configuration, or fails with a config error.\n   */\n  load<A>(config: Config.Config<A>): Effect.Effect<A, ConfigError.ConfigError>\n  /**\n   * Flattens this config provider into a simplified config provider that knows\n   * only how to deal with flat (key/value) properties.\n   */\n  readonly flattened: ConfigProvider.Flat\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ConfigProvider {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Proto {\n    readonly [ConfigProviderTypeId]: ConfigProviderTypeId\n  }\n\n  /**\n   * A simplified config provider that knows only how to deal with flat\n   * (key/value) properties. Because these providers are common, there is\n   * special support for implementing them.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Flat {\n    readonly [FlatConfigProviderTypeId]: FlatConfigProviderTypeId\n    readonly patch: PathPatch.PathPatch\n    load<A>(\n      path: ReadonlyArray<string>,\n      config: Config.Config.Primitive<A>,\n      split?: boolean\n    ): Effect.Effect<Array<A>, ConfigError.ConfigError>\n    enumerateChildren(\n      path: ReadonlyArray<string>\n    ): Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError>\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface FromMapConfig {\n    readonly pathDelim: string\n    readonly seqDelim: string\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface FromEnvConfig {\n    readonly pathDelim: string\n    readonly seqDelim: string\n  }\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type KeyComponent = KeyName | KeyIndex\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export interface KeyName {\n    readonly _tag: \"KeyName\"\n    readonly name: string\n  }\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export interface KeyIndex {\n    readonly _tag: \"KeyIndex\"\n    readonly index: number\n  }\n}\n\n/**\n * The service tag for `ConfigProvider`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const ConfigProvider: Context.Tag<ConfigProvider, ConfigProvider> = internal.configProviderTag\n\n/**\n * Creates a new config provider.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (\n  options: {\n    readonly load: <A>(config: Config.Config<A>) => Effect.Effect<A, ConfigError.ConfigError>\n    readonly flattened: ConfigProvider.Flat\n  }\n) => ConfigProvider = internal.make\n\n/**\n * Creates a new flat config provider.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const makeFlat: (options: {\n  readonly load: <A>(\n    path: ReadonlyArray<string>,\n    config: Config.Config.Primitive<A>,\n    split: boolean\n  ) => Effect.Effect<Array<A>, ConfigError.ConfigError>\n  readonly enumerateChildren: (\n    path: ReadonlyArray<string>\n  ) => Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError>\n  readonly patch: PathPatch.PathPatch\n}) => ConfigProvider.Flat = internal.makeFlat\n\n/**\n * A config provider that loads configuration from context variables,\n * using the default System service.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEnv: (config?: ConfigProvider.FromEnvConfig) => ConfigProvider = internal.fromEnv\n\n/**\n * Constructs a new `ConfigProvider` from a key/value (flat) provider, where\n * nesting is embedded into the string keys.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromFlat: (flat: ConfigProvider.Flat) => ConfigProvider = internal.fromFlat\n\n/**\n * Constructs a new `ConfigProvider` from a JSON object.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromJson: (json: unknown) => ConfigProvider = internal.fromJson\n\n/**\n * Constructs a ConfigProvider using a map and the specified delimiter string,\n * which determines how to split the keys in the map into path segments.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromMap: (map: Map<string, string>, config?: Partial<ConfigProvider.FromMapConfig>) => ConfigProvider =\n  internal.fromMap\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to constant case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const constantCase: (self: ConfigProvider) => ConfigProvider = internal.constantCase\n\n/**\n * Returns a new config provider that will automatically tranform all path\n * configuration names with the specified function. This can be utilized to\n * adapt the names of configuration properties from one naming convention to\n * another.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapInputPath: {\n  (f: (path: string) => string): (self: ConfigProvider) => ConfigProvider\n  (self: ConfigProvider, f: (path: string) => string): ConfigProvider\n} = internal.mapInputPath\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to kebab case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const kebabCase: (self: ConfigProvider) => ConfigProvider = internal.kebabCase\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to lower case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const lowerCase: (self: ConfigProvider) => ConfigProvider = internal.lowerCase\n\n/**\n * Returns a new config provider that will automatically nest all\n * configuration under the specified property name. This can be utilized to\n * aggregate separate configuration sources that are all required to load a\n * single configuration value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const nested: {\n  (name: string): (self: ConfigProvider) => ConfigProvider\n  (self: ConfigProvider, name: string): ConfigProvider\n} = internal.nested\n\n/**\n * Returns a new config provider that preferentially loads configuration data\n * from this one, but which will fall back to the specified alternate provider\n * if there are any issues loading the configuration from this provider.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const orElse: {\n  (that: LazyArg<ConfigProvider>): (self: ConfigProvider) => ConfigProvider\n  (self: ConfigProvider, that: LazyArg<ConfigProvider>): ConfigProvider\n} = internal.orElse\n\n/**\n * Returns a new config provider that will automatically un-nest all\n * configuration under the specified property name. This can be utilized to\n * de-aggregate separate configuration sources that are all required to load a\n * single configuration value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const unnested: {\n  (name: string): (self: ConfigProvider) => ConfigProvider\n  (self: ConfigProvider, name: string): ConfigProvider\n} = internal.unnested\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to upper case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const snakeCase: (self: ConfigProvider) => ConfigProvider = internal.snakeCase\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to upper case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const upperCase: (self: ConfigProvider) => ConfigProvider = internal.upperCase\n\n/**\n * Returns a new config provider that transforms the config provider with the\n * specified function within the specified path.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const within: {\n  (path: ReadonlyArray<string>, f: (self: ConfigProvider) => ConfigProvider): (self: ConfigProvider) => ConfigProvider\n  (self: ConfigProvider, path: ReadonlyArray<string>, f: (self: ConfigProvider) => ConfigProvider): ConfigProvider\n} = internal.within\n", "/**\n * @since 2.0.0\n */\nimport * as internal from \"./internal/configProvider/pathPatch.js\"\n\n/**\n * Represents a description of how to modify the path to a configuration\n * value.\n *\n * @since 2.0.0\n * @category models\n */\nexport type PathPatch = Empty | AndThen | MapName | Nested | Unnested\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Empty {\n  readonly _tag: \"Empty\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface AndThen {\n  readonly _tag: \"AndThen\"\n  readonly first: PathPatch\n  readonly second: PathPatch\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MapName {\n  readonly _tag: \"MapName\"\n  f(string: string): string\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Nested {\n  readonly _tag: \"Nested\"\n  readonly name: string\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Unnested {\n  readonly _tag: \"Unnested\"\n  readonly name: string\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: PathPatch = internal.empty\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const andThen: {\n  (that: PathPatch): (self: PathPatch) => PathPatch\n  (self: PathPatch, that: PathPatch): PathPatch\n} = internal.andThen\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const mapName: {\n  (f: (string: string) => string): (self: PathPatch) => PathPatch\n  (self: PathPatch, f: (string: string) => string): PathPatch\n} = internal.mapName\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const nested: {\n  (name: string): (self: PathPatch) => PathPatch\n  (self: PathPatch, name: string): PathPatch\n} = internal.nested\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unnested: {\n  (name: string): (self: PathPatch) => PathPatch\n  (self: PathPatch, name: string): PathPatch\n} = internal.unnested\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type { DurationInput } from \"./Duration.js\"\nimport type { Effect } from \"./Effect.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type * as HashMap from \"./HashMap.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as circular from \"./internal/layer/circular.js\"\nimport * as internalCircular from \"./internal/logger-circular.js\"\nimport * as internal from \"./internal/logger.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type * as List from \"./List.js\"\nimport type * as LogLevel from \"./LogLevel.js\"\nimport type * as LogSpan from \"./LogSpan.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Scope } from \"./Scope.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const LoggerTypeId: unique symbol = internal.LoggerTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type LoggerTypeId = typeof LoggerTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Logger<in Message, out Output> extends Logger.Variance<Message, Output>, Pipeable {\n  log(options: Logger.Options<Message>): Output\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Logger {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<in Message, out Output> {\n    readonly [LoggerTypeId]: {\n      readonly _Message: Types.Contravariant<Message>\n      readonly _Output: Types.Covariant<Output>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Options<out Message> {\n    readonly fiberId: FiberId.FiberId\n    readonly logLevel: LogLevel.LogLevel\n    readonly message: Message\n    readonly cause: Cause.Cause<unknown>\n    readonly context: FiberRefs.FiberRefs\n    readonly spans: List.List<LogSpan.LogSpan>\n    readonly annotations: HashMap.HashMap<string, unknown>\n    readonly date: Date\n  }\n}\n\n/**\n * Creates a custom logger that formats log messages according to the provided\n * function.\n *\n * @example\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const logger = Logger.make(({ logLevel, message }) => {\n *   globalThis.console.log(`[${logLevel.label}] ${message}`)\n * })\n *\n * const task1 = Effect.logDebug(\"task1 done\")\n * const task2 = Effect.logDebug(\"task2 done\")\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"start\")\n *   yield* task1\n *   yield* task2\n *   yield* Effect.log(\"done\")\n * }).pipe(\n *   Logger.withMinimumLogLevel(LogLevel.Debug),\n *   Effect.provide(Logger.replace(Logger.defaultLogger, logger))\n * )\n *\n * // Effect.runFork(program)\n * // [INFO] start\n * // [DEBUG] task1 done\n * // [DEBUG] task2 done\n * // [INFO] done\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make: <Message, Output>(log: (options: Logger.Options<Message>) => Output) => Logger<Message, Output> =\n  internal.makeLogger\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const add: <B>(logger: Logger<unknown, B>) => Layer.Layer<never> = circular.addLogger\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const addEffect: <A, E, R>(effect: Effect<Logger<unknown, A>, E, R>) => Layer.Layer<never, E, R> =\n  circular.addLoggerEffect\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const addScoped: <A, E, R>(\n  effect: Effect<Logger<unknown, A>, E, R>\n) => Layer.Layer<never, E, Exclude<R, Scope>> = circular.addLoggerScoped\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const mapInput: {\n  <Message, Message2>(\n    f: (message: Message2) => Message\n  ): <Output>(self: Logger<Message, Output>) => Logger<Message2, Output>\n  <Output, Message, Message2>(\n    self: Logger<Message, Output>,\n    f: (message: Message2) => Message\n  ): Logger<Message2, Output>\n} = internal.mapInput\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const mapInputOptions: {\n  <Message, Message2>(\n    f: (options: Logger.Options<Message2>) => Logger.Options<Message>\n  ): <Output>(self: Logger<Message, Output>) => Logger<Message2, Output>\n  <Output, Message, Message2>(\n    self: Logger<Message, Output>,\n    f: (options: Logger.Options<Message2>) => Logger.Options<Message>\n  ): Logger<Message2, Output>\n} = internal.mapInputOptions\n\n/**\n * Returns a version of this logger that only logs messages when the log level\n * satisfies the specified predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterLogLevel: {\n  (\n    f: (logLevel: LogLevel.LogLevel) => boolean\n  ): <Message, Output>(self: Logger<Message, Output>) => Logger<Message, Option.Option<Output>>\n  <Message, Output>(\n    self: Logger<Message, Output>,\n    f: (logLevel: LogLevel.LogLevel) => boolean\n  ): Logger<Message, Option.Option<Output>>\n} = internal.filterLogLevel\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <Output, Output2>(\n    f: (output: Output) => Output2\n  ): <Message>(self: Logger<Message, Output>) => Logger<Message, Output2>\n  <Message, Output, Output2>(\n    self: Logger<Message, Output>,\n    f: (output: Output) => Output2\n  ): Logger<Message, Output2>\n} = internal.map\n\n/**\n * Creates a batched logger that groups log messages together and processes them\n * in intervals.\n *\n * @param window - The time window in which to batch log messages.\n *\n * @example\n * import { Console, Effect, Logger } from \"effect\"\n *\n * const LoggerLive = Logger.replaceScoped(\n *   Logger.defaultLogger,\n *   Logger.logfmtLogger.pipe(\n *     Logger.batched(\"500 millis\", (messages) => Console.log(\"BATCH\", `[\\n${messages.join(\"\\n\")}\\n]`))\n *   )\n * )\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"one\")\n *   yield* Effect.log(\"two\")\n *   yield* Effect.log(\"three\")\n * }).pipe(Effect.provide(LoggerLive))\n *\n * // Effect.runFork(program)\n * // BATCH [\n * // timestamp=... level=INFO fiber=#0 message=one\n * // timestamp=... level=INFO fiber=#0 message=two\n * // timestamp=... level=INFO fiber=#0 message=three\n * // ]\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const batched: {\n  <Output, R>(\n    window: DurationInput,\n    f: (messages: Array<Types.NoInfer<Output>>) => Effect<void, never, R>\n  ): <Message>(self: Logger<Message, Output>) => Effect<Logger<Message, void>, never, R | Scope>\n  <Message, Output, R>(\n    self: Logger<Message, Output>,\n    window: DurationInput,\n    f: (messages: Array<Types.NoInfer<Output>>) => Effect<void, never, R>\n  ): Effect<Logger<Message, void>, never, Scope | R>\n} = fiberRuntime.batchedLogger\n\n/**\n * @since 2.0.0\n * @category console\n */\nexport const withConsoleLog: <M, O>(self: Logger<M, O>) => Logger<M, void> = fiberRuntime.loggerWithConsoleLog\n\n/**\n * @since 2.0.0\n * @category console\n */\nexport const withConsoleError: <M, O>(self: Logger<M, O>) => Logger<M, void> = fiberRuntime.loggerWithConsoleError\n\n/**\n * A logger that does nothing in response to logging events.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const none: Logger<unknown, void> = internal.none\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const remove: <A>(logger: Logger<unknown, A>) => Layer.Layer<never> = circular.removeLogger\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const replace: {\n  <B>(that: Logger<unknown, B>): <A>(self: Logger<unknown, A>) => Layer.Layer<never>\n  <A, B>(self: Logger<unknown, A>, that: Logger<unknown, B>): Layer.Layer<never>\n} = circular.replaceLogger\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const replaceEffect: {\n  <B, E, R>(that: Effect<Logger<unknown, B>, E, R>): <A>(self: Logger<unknown, A>) => Layer.Layer<never, E, R>\n  <A, B, E, R>(self: Logger<unknown, A>, that: Effect<Logger<unknown, B>, E, R>): Layer.Layer<never, E, R>\n} = circular.replaceLoggerEffect\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const replaceScoped: {\n  <B, E, R>(\n    that: Effect<Logger<unknown, B>, E, R>\n  ): <A>(self: Logger<unknown, A>) => Layer.Layer<never, E, Exclude<R, Scope>>\n  <A, B, E, R>(\n    self: Logger<unknown, A>,\n    that: Effect<Logger<unknown, B>, E, R>\n  ): Layer.Layer<never, E, Exclude<R, Scope>>\n} = circular.replaceLoggerScoped\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const simple: <A, B>(log: (a: A) => B) => Logger<A, B> = internal.simple\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Logger<unknown, A> = internal.succeed\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: <A>(evaluate: LazyArg<A>) => Logger<unknown, A> = internal.sync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const test: {\n  <Message>(input: Message): <Output>(self: Logger<Message, Output>) => Output\n  <Message, Output>(self: Logger<Message, Output>, input: Message): Output\n} = internalCircular.test\n\n/**\n * Sets the minimum log level for subsequent logging operations, allowing\n * control over which log messages are displayed based on their severity.\n *\n * @example\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const program = Effect.logDebug(\"message1\").pipe(Logger.withMinimumLogLevel(LogLevel.Debug))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=DEBUG fiber=#0 message=message1\n *\n * @since 2.0.0\n * @category context\n */\nexport const withMinimumLogLevel: {\n  (level: LogLevel.LogLevel): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, level: LogLevel.LogLevel): Effect<A, E, R>\n} = circular.withMinimumLogLevel\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpanAnnotations: <Message, Output>(self: Logger<Message, Output>) => Logger<Message, Output> =\n  fiberRuntime.loggerWithSpanAnnotations\n\n/**\n * Combines this logger with the specified logger to produce a new logger that\n * logs to both this logger and that logger.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  <Message2, Output2>(\n    that: Logger<Message2, Output2>\n  ): <Message, Output>(self: Logger<Message, Output>) => Logger<Message & Message2, [Output, Output2]>\n  <Message, Output, Message2, Output2>(\n    self: Logger<Message, Output>,\n    that: Logger<Message2, Output2>\n  ): Logger<Message & Message2, [Output, Output2]>\n} = internal.zip\n\n/**\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  <Message2, Output2>(\n    that: Logger<Message2, Output2>\n  ): <Message, Output>(self: Logger<Message, Output>) => Logger<Message & Message2, Output>\n  <Message, Output, Message2, Output2>(\n    self: Logger<Message, Output>,\n    that: Logger<Message2, Output2>\n  ): Logger<Message & Message2, Output>\n} = internal.zipLeft\n\n/**\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  <Message2, Output2>(\n    that: Logger<Message2, Output2>\n  ): <Message, Output>(self: Logger<Message, Output>) => Logger<Message & Message2, Output2>\n  <Message, Output, Message2, Output2>(\n    self: Logger<Message, Output>,\n    that: Logger<Message2, Output2>\n  ): Logger<Message & Message2, Output2>\n} = internal.zipRight\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const defaultLogger: Logger<unknown, void> = fiberRuntime.defaultLogger\n\n/**\n * The `jsonLogger` logger formats log entries as JSON objects, making them easy to\n * integrate with logging systems that consume JSON data.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.json)))\n * // {\"message\":[\"message1\",\"message2\"],\"logLevel\":\"INFO\",\"timestamp\":\"...\",\"annotations\":{\"key2\":\"value2\",\"key1\":\"value1\"},\"spans\":{\"myspan\":0},\"fiberId\":\"#0\"}\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const jsonLogger: Logger<unknown, string> = internal.jsonLogger\n\n/**\n * This logger outputs logs in a human-readable format that is easy to read\n * during development or in a production console.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.logFmt)))\n * // timestamp=... level=INFO fiber=#0 message=message1 message=message2 myspan=0ms key2=value2 key1=value1\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const logfmtLogger: Logger<unknown, string> = internal.logfmtLogger\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const stringLogger: Logger<unknown, string> = internal.stringLogger\n\n/**\n * The pretty logger utilizes the capabilities of the console API to generate\n * visually engaging and color-enhanced log outputs. This feature is\n * particularly useful for improving the readability of log messages during\n * development and debugging processes.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.pretty)))\n * //         green --v                      v-- bold and cyan\n * // [07:51:54.434] INFO (#0) myspan=1ms: message1\n * //   message2\n * //    v-- bold\n * //   key2: value2\n * //   key1: value1\n *\n * @since 3.5.0\n * @category constructors\n */\nexport const prettyLogger: (\n  options?: {\n    readonly colors?: \"auto\" | boolean | undefined\n    readonly stderr?: boolean | undefined\n    readonly formatDate?: ((date: Date) => string) | undefined\n    readonly mode?: \"browser\" | \"tty\" | \"auto\" | undefined\n  }\n) => Logger<unknown, void> = internal.prettyLogger\n\n/**\n * The structured logger provides detailed log outputs, structured in a way that\n * retains comprehensive traceability of the events, suitable for deeper\n * analysis and troubleshooting.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.structured)))\n * // {\n * //   message: [ 'message1', 'message2' ],\n * //   logLevel: 'INFO',\n * //   timestamp: '2024-07-09T14:05:41.623Z',\n * //   cause: undefined,\n * //   annotations: { key2: 'value2', key1: 'value1' },\n * //   spans: { myspan: 0 },\n * //   fiberId: '#0'\n * // }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const structuredLogger: Logger<\n  unknown,\n  {\n    readonly logLevel: string\n    readonly fiberId: string\n    readonly timestamp: string\n    readonly message: unknown\n    readonly cause: string | undefined\n    readonly annotations: Record<string, unknown>\n    readonly spans: Record<string, number>\n  }\n> = internal.structuredLogger\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const tracerLogger: Logger<unknown, void> = fiberRuntime.tracerLogger\n\n/**\n * The `json` logger formats log entries as JSON objects, making them easy to\n * integrate with logging systems that consume JSON data.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.json)))\n * // {\"message\":[\"message1\",\"message2\"],\"logLevel\":\"INFO\",\"timestamp\":\"...\",\"annotations\":{\"key2\":\"value2\",\"key1\":\"value1\"},\"spans\":{\"myspan\":0},\"fiberId\":\"#0\"}\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const json: Layer.Layer<never> = replace(fiberRuntime.defaultLogger, fiberRuntime.jsonLogger)\n\n/**\n * This logger outputs logs in a human-readable format that is easy to read\n * during development or in a production console.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.logFmt)))\n * // timestamp=... level=INFO fiber=#0 message=message1 message=message2 myspan=0ms key2=value2 key1=value1\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const logFmt: Layer.Layer<never> = replace(fiberRuntime.defaultLogger, fiberRuntime.logFmtLogger)\n\n/**\n * The pretty logger utilizes the capabilities of the console API to generate\n * visually engaging and color-enhanced log outputs. This feature is\n * particularly useful for improving the readability of log messages during\n * development and debugging processes.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.pretty)))\n * //         green --v                      v-- bold and cyan\n * // [07:51:54.434] INFO (#0) myspan=1ms: message1\n * //   message2\n * //    v-- bold\n * //   key2: value2\n * //   key1: value1\n *\n * @since 3.5.0\n * @category constructors\n */\nexport const pretty: Layer.Layer<never> = replace(fiberRuntime.defaultLogger, fiberRuntime.prettyLogger)\n\n/**\n * The structured logger provides detailed log outputs, structured in a way that\n * retains comprehensive traceability of the events, suitable for deeper\n * analysis and troubleshooting.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.structured)))\n * // {\n * //   message: [ 'message1', 'message2' ],\n * //   logLevel: 'INFO',\n * //   timestamp: '2024-07-09T14:05:41.623Z',\n * //   cause: undefined,\n * //   annotations: { key2: 'value2', key1: 'value1' },\n * //   spans: { myspan: 0 },\n * //   fiberId: '#0'\n * // }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const structured: Layer.Layer<never> = replace(fiberRuntime.defaultLogger, fiberRuntime.structuredLogger)\n\n/**\n * Sets the minimum log level for logging operations, allowing control over\n * which log messages are displayed based on their severity.\n *\n * @example\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"Executing task...\")\n *   yield* Effect.sleep(\"100 millis\")\n *   console.log(\"task done\")\n * })\n *\n * // Logging disabled using a layer\n * // Effect.runFork(program.pipe(Effect.provide(Logger.minimumLogLevel(LogLevel.None))))\n * // task done\n *\n * @since 2.0.0\n * @category context\n */\nexport const minimumLogLevel: (level: LogLevel.LogLevel) => Layer.Layer<never> = circular.minimumLogLevel\n\n/**\n * Returns `true` if the specified value is a `Logger`, otherwise returns `false`.\n *\n * @since 1.0.0\n * @category guards\n */\nexport const isLogger: (u: unknown) => u is Logger<unknown, unknown> = internal.isLogger\n", "import * as Cause from \"../Cause.js\"\nimport { dual } from \"../Function.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as List from \"../List.js\"\nimport type * as Logger from \"../Logger.js\"\nimport * as core from \"./core.js\"\nimport * as _fiberId from \"./fiberId.js\"\nimport * as fiberRefs from \"./fiberRefs.js\"\n\n/** @internal */\nexport const test = dual<\n  <Message>(input: Message) => <Output>(self: Logger.Logger<Message, Output>) => Output,\n  <Message, Output>(self: Logger.Logger<Message, Output>, input: Message) => Output\n>(2, (self, input) =>\n  self.log({\n    fiberId: _fiberId.none,\n    logLevel: core.logLevelInfo,\n    message: input,\n    cause: Cause.empty,\n    context: fiberRefs.empty(),\n    spans: List.empty(),\n    annotations: HashMap.empty(),\n    date: new Date()\n  }))\n", "/**\n * The Redacted module provides functionality for handling sensitive information\n * securely within your application. By using the `Redacted` data type, you can\n * ensure that sensitive values are not accidentally exposed in logs or error\n * messages.\n *\n * @since 3.3.0\n */\nimport type * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport * as redacted_ from \"./internal/redacted.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Covariant } from \"./Types.js\"\n\n/**\n * @since 3.3.0\n * @category symbols\n */\nexport const RedactedTypeId: unique symbol = redacted_.RedactedTypeId\n\n/**\n * @since 3.3.0\n * @category symbols\n */\nexport type RedactedTypeId = typeof RedactedTypeId\n\n/**\n * @since 3.3.0\n * @category models\n */\nexport interface Redacted<out A = string> extends Redacted.Variance<A>, Equal.Equal, Pipeable {\n}\n\n/**\n * @since 3.3.0\n */\nexport declare namespace Redacted {\n  /**\n   * @since 3.3.0\n   * @category models\n   */\n  export interface Variance<out A> {\n    readonly [RedactedTypeId]: {\n      readonly _A: Covariant<A>\n    }\n  }\n\n  /**\n   * @since 3.3.0\n   * @category type-level\n   */\n  export type Value<T extends Redacted<any>> = [T] extends [Redacted<infer _A>] ? _A : never\n}\n\n/**\n * @since 3.3.0\n * @category refinements\n */\nexport const isRedacted: (u: unknown) => u is Redacted<unknown> = redacted_.isRedacted\n\n/**\n * This function creates a `Redacted<A>` instance from a given value `A`,\n * securely hiding its content.\n *\n * @example\n * import { Redacted } from \"effect\"\n *\n * const API_KEY = Redacted.make(\"1234567890\")\n *\n * @since 3.3.0\n * @category constructors\n */\nexport const make: <A>(value: A) => Redacted<A> = redacted_.make\n\n/**\n * Retrieves the original value from a `Redacted` instance. Use this function\n * with caution, as it exposes the sensitive data.\n *\n * @example\n * import { Redacted } from \"effect\"\n *\n * const API_KEY = Redacted.make(\"1234567890\")\n *\n * assert.equal(Redacted.value(API_KEY), \"1234567890\")\n *\n * @since 3.3.0\n * @category getters\n */\nexport const value: <A>(self: Redacted<A>) => A = redacted_.value\n\n/**\n * Erases the underlying value of a `Redacted` instance, rendering it unusable.\n * This function is intended to ensure that sensitive data does not remain in\n * memory longer than necessary.\n *\n * @example\n * import { Redacted } from \"effect\"\n *\n * const API_KEY = Redacted.make(\"1234567890\")\n *\n * assert.equal(Redacted.value(API_KEY), \"1234567890\")\n *\n * Redacted.unsafeWipe(API_KEY)\n *\n * assert.throws(() => Redacted.value(API_KEY), new Error(\"Unable to get redacted value\"))\n *\n * @since 3.3.0\n * @category unsafe\n */\nexport const unsafeWipe: <A>(self: Redacted<A>) => boolean = redacted_.unsafeWipe\n\n/**\n * Generates an equivalence relation for `Redacted<A>` values based on an\n * equivalence relation for the underlying values `A`. This function is useful\n * for comparing `Redacted` instances without exposing their contents.\n *\n * @example\n * import { Redacted, Equivalence } from \"effect\"\n *\n * const API_KEY1 = Redacted.make(\"1234567890\")\n * const API_KEY2 = Redacted.make(\"1-34567890\")\n * const API_KEY3 = Redacted.make(\"1234567890\")\n *\n * const equivalence = Redacted.getEquivalence(Equivalence.string)\n *\n * assert.equal(equivalence(API_KEY1, API_KEY2), false)\n * assert.equal(equivalence(API_KEY1, API_KEY3), true)\n *\n * @category equivalence\n * @since 3.3.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Redacted<A>> =>\n  Equivalence.make((x, y) => isEquivalent(value(x), value(y)))\n", "interface ActionErrorParams {\n    title: string\n    messages?: readonly any[]\n    cause?: unknown\n}\n\nexport class ActionError extends Error {\n    readonly title: string\n    readonly messages: readonly any[]\n\n    constructor(params: ActionErrorParams) {\n        const fullMessage = [params.title, ...(params.messages ?? [])].join('\\n    ')\n\n        super(fullMessage, { cause: params.cause })\n\n        this.title = params.title\n        this.messages = params.messages ?? []\n    }\n}\n", "type Entries<T extends Record<any, any>> = {\n    [K in keyof T]: [K, T[K]]\n}[keyof T][]\n\n/**\n * Only use this function if you are certain that the object will only ever have the entries defined in TypeScript.\n * TypeScript doesn't guard for unknown keys in the object.\n */\nexport const objectEntriesUnsafe: <T extends Record<any, any>>(object: T) => Entries<T> =\n    Object.entries\n", "import { Config, ConfigError, Context, Effect, Layer, LogLevel } from 'effect'\nimport { isInvalidData, isMissingData } from 'effect/ConfigError'\nimport { ActionError } from '../error-handling'\nimport { objectEntriesUnsafe } from '../utils'\n\nexport class Inputs extends Context.Tag('Inputs')<Inputs, Effect.Effect.Success<typeof inputs>>() {}\n\nconst inputs = validateConfig({\n    githubToken: Config.redacted('github-token'),\n\n    deployedCommitSha: Config.string('deployed-commit-sha'),\n\n    workflowRepository: Config.string('workflow-repository').pipe(\n        Config.mapAttempt((ownerAndRepo) => {\n            const match = /^([^/]+)\\/([^/]+)$/.exec(ownerAndRepo)\n\n            if (!match) {\n                throw new Error(`Could not parse owner and repo, received \"${ownerAndRepo}\"`)\n            }\n\n            return {\n                owner: match[1]!,\n                repo: match[2]!,\n            }\n        }),\n    ),\n\n    workflowFileName: Config.string('workflow-file-name').pipe(\n        Config.mapAttempt((value) => {\n            const match = /^.*?([^/]+\\.ya?ml)(@.+)?$/.exec(value)\n\n            if (!match) {\n                throw new Error(`Could not parse file name, received \"${value}\"`)\n            }\n\n            return match[1]!\n        }),\n    ),\n\n    workflowJobName: Config.string('workflow-job-name'),\n\n    isDryRun: Config.boolean('dry-run'),\n\n    logLevel: getLogLevelConfig({ shouldNotLogError: true }),\n}).pipe(\n    Effect.tap((inputs) => Effect.logDebug('Inputs', inputs)),\n    Effect.mapError(\n        (configErrors) =>\n            new ActionError({\n                title:\n                    configErrors.length === 1\n                        ? 'There was an error with an input'\n                        : `There were ${configErrors.length} errors with inputs`,\n                messages: configErrors.map(getConfigErrorMessage),\n            }),\n    ),\n)\n\nexport const InputsLive = Layer.effect(Inputs, inputs)\n\nexport function getLogLevelConfig(\n    options?: Parameters<typeof recoverFromConfigErrorWithDefault>[1],\n) {\n    return Config.logLevel('log-level').pipe(\n        recoverFromConfigErrorWithDefault(LogLevel.Info, options),\n    )\n}\n\nfunction validateConfig<T extends Record<string, any>>(config: {\n    [K in keyof T]: Effect.Effect<T[K], ConfigError.ConfigError>\n}) {\n    const entries = objectEntriesUnsafe(config)\n\n    return Effect.validateAll(entries, (entry) => entry[1]).pipe(\n        Effect.map((values) =>\n            Object.fromEntries(entries.map((entry, index) => [entry[0], values[index]])),\n        ),\n    ) as Effect.Effect<T, ConfigError.ConfigError[]>\n}\n\nfunction getConfigErrorMessage(error: ConfigError.ConfigError) {\n    if (isMissingData(error)) {\n        return `Input \"${error.path.join('-')}\" is missing`\n    }\n\n    if (isInvalidData(error)) {\n        return `Input \"${error.path.join('-')}\" is invalid: ${error.message}`\n    }\n\n    throw new Error(`Unexpected error: ${error}`)\n}\n\nfunction recoverFromConfigErrorWithDefault<A extends string | boolean | number | LogLevel.LogLevel>(\n    defaultValue: NoInfer<A>,\n    options: { shouldNotLogError?: boolean } = {},\n): (self: Effect.Effect<A, ConfigError.ConfigError>) => Effect.Effect<A, never> {\n    return Effect.catchAll((configError) => {\n        if (!isMissingData(configError) && !isInvalidData(configError)) {\n            throw new Error(`Unexpected error: ${configError}`)\n        }\n\n        if (options.shouldNotLogError) {\n            return Effect.succeed(defaultValue)\n        }\n\n        const inputPath = configError.path.join('-')\n        const stringifiedDefaultValue =\n            typeof defaultValue === 'string' ||\n            typeof defaultValue === 'boolean' ||\n            typeof defaultValue === 'number'\n                ? JSON.stringify(defaultValue)\n                : JSON.stringify(defaultValue.label.toLowerCase())\n\n        return Effect.logError(\n            `There was a recoverable error with the ${inputPath} input`,\n            getConfigErrorMessage(configError),\n            `Using ${inputPath} ${stringifiedDefaultValue} instead`,\n        ).pipe(Effect.map(() => defaultValue))\n    })\n}\n", "import { Effect, Layer, Logger } from 'effect'\nimport { getLogLevelConfig } from './inputs'\n\nexport const LoggerLive = getLogLevelConfig().pipe(\n    Effect.andThen(Logger.minimumLogLevel),\n    Layer.unwrapEffect,\n    Layer.provide(Logger.pretty),\n)\n", "import { Effect, Layer } from 'effect'\nimport { ActionError } from './error-handling'\nimport { GithubClient } from './services/github-client'\nimport { Inputs, InputsLive } from './services/inputs'\nimport { LoggerLive } from './services/logger'\n\ninterface CreateProgramParams {\n    configProvider: Layer.Layer<never>\n    githubClient: Layer.Layer<GithubClient, never, Inputs>\n}\n\nexport function createProgram(params: CreateProgramParams): Effect.Effect<void, ActionError> {\n    return Effect.void.pipe(\n        Effect.provide(params.githubClient),\n        Effect.provide(InputsLive),\n        Effect.tapBoth({\n            onSuccess: () => Effect.logInfo('Action completed successfully'),\n            onFailure: (error: ActionError) =>\n                Effect.logError(error.title, ...error.messages).pipe(\n                    Effect.andThen(Effect.logInfo('Action aborted')),\n                ),\n        }),\n        Effect.tapDefect((defect) => Effect.logError('Action died unexpectedly', defect)),\n        Effect.provide(LoggerLive),\n        Effect.provide(params.configProvider),\n    )\n}\n", "/**\n * @since 1.0.0\n */\nimport * as NodeRuntime from \"@effect/platform-node-shared/NodeRuntime\"\nimport type { RunMain } from \"@effect/platform/Runtime\"\n\n/**\n * @since 1.0.0\n * @category runtime\n */\nexport const runMain: RunMain = NodeRuntime.runMain\n", "/**\n * @since 1.0.0\n */\nimport * as Cause from \"effect/Cause\"\nimport type * as Effect from \"effect/Effect\"\nimport * as Exit from \"effect/Exit\"\n\n/**\n * @category model\n * @since 1.0.0\n */\nexport interface Teardown {\n  <E, A>(exit: Exit.Exit<E, A>, onExit: (code: number) => void): void\n}\n\n/**\n * @category teardown\n * @since 1.0.0\n */\nexport const defaultTeardown: Teardown = <E, A>(\n  exit: Exit.Exit<E, A>,\n  onExit: (code: number) => void\n) => {\n  onExit(Exit.isFailure(exit) && !Cause.isInterruptedOnly(exit.cause) ? 1 : 0)\n}\n\n/**\n * @category model\n * @since 1.0.0\n */\nexport interface RunMain {\n  <E, A>(\n    effect: Effect.Effect<A, E>,\n    options?: {\n      readonly disableErrorReporting?: boolean\n      readonly teardown?: Teardown\n    }\n  ): void\n}\n", "import { defaultTeardown, type RunMain } from \"@effect/platform/Runtime\"\nimport * as Cause from \"effect/Cause\"\nimport * as Effect from \"effect/Effect\"\n\n/** @internal */\nexport const runMain: RunMain = (\n  effect,\n  options\n) => {\n  const teardown = options?.teardown ?? defaultTeardown\n  const keepAlive = setInterval(() => {}, 2 ** 31 - 1)\n\n  const fiber = Effect.runFork(\n    options?.disableErrorReporting === true ?\n      effect :\n      Effect.tapErrorCause(effect, (cause) => {\n        if (Cause.isInterruptedOnly(cause)) {\n          return Effect.void\n        }\n        return Effect.logError(cause)\n      })\n  )\n\n  fiber.addObserver((exit) => {\n    clearInterval(keepAlive)\n    teardown(exit, (code) => {\n      process.exit(code)\n    })\n  })\n\n  function onSigint() {\n    process.removeListener(\"SIGINT\", onSigint)\n    process.removeListener(\"SIGTERM\", onSigint)\n    fiber.unsafeInterruptAsFork(fiber.id())\n  }\n\n  process.once(\"SIGINT\", onSigint)\n  process.once(\"SIGTERM\", onSigint)\n}\n", "/**\n * @since 1.0.0\n */\nimport type { RunMain } from \"@effect/platform/Runtime\"\nimport * as internal from \"./internal/runtime.js\"\n\n/**\n * @since 1.0.0\n * @category runtime\n */\nexport const runMain: RunMain = internal.runMain\n", "import { NodeRuntime } from '@effect/platform-node'\nimport { Cause, Effect, Exit } from 'effect'\nimport { ActionError } from './error-handling'\n\nexport function runMainLive<A>(effect: Effect.Effect<A, ActionError>) {\n    return NodeRuntime.runMain(effect, { disableErrorReporting: true })\n}\n\nexport function runMainTest<A>(effect: Effect.Effect<A, ActionError>) {\n    return NodeRuntime.runMain(effect, {\n        disableErrorReporting: true,\n        teardown: (exit) => {\n            if (Exit.isSuccess(exit)) {\n                return\n            }\n\n            if (Cause.isFailType(exit.cause) && exit.cause.error) {\n                throw exit.cause.error\n            }\n\n            throw exit.cause\n        },\n    })\n}\n", "import core from '@actions/core'\nimport { ConfigError, ConfigProvider, ConfigProviderPathPatch, Effect, Layer, pipe } from 'effect'\n\nconst pathDelimiter = '-'\nconst sequenceDelimiterRegex = /\\s*,\\s*/\n\nconst githubActionConfigProvider = ConfigProvider.fromFlat(\n    ConfigProvider.makeFlat({\n        load(path, primitive, split) {\n            const pathString = path.join(pathDelimiter)\n            const inputValue = core.getInput(pathString)\n\n            if (!inputValue) {\n                return Effect.fail(\n                    ConfigError.MissingData(\n                        path as string[],\n                        'Expected input parameter is missing',\n                        { pathDelim: pathDelimiter },\n                    ),\n                )\n            }\n\n            if (split) {\n                return pipe(\n                    inputValue.split(sequenceDelimiterRegex),\n                    Effect.forEach(primitive.parse),\n                    Effect.mapError(ConfigError.prefixed(path as string[])),\n                )\n            }\n\n            return pipe(\n                primitive.parse(inputValue),\n                Effect.mapBoth({\n                    onSuccess: Array.of,\n                    onFailure: ConfigError.prefixed(path as string[]),\n                }),\n            )\n        },\n        enumerateChildren(path) {\n            return Effect.fail(\n                ConfigError.Unsupported(\n                    path as string[],\n                    'Enumerating input children is not supported in GitHub Actions',\n                    { pathDelim: pathDelimiter },\n                ),\n            )\n        },\n        patch: ConfigProviderPathPatch.empty,\n    }),\n)\n\nexport const ConfigProviderLive = Layer.setConfigProvider(githubActionConfigProvider)\n\nexport function getConfigProviderTest(json?: object) {\n    return Layer.setConfigProvider(\n        ConfigProvider.fromJson({\n            'github-token': 'test-token',\n            'deployed-commit-sha': 'ffac537e6cbbf934b08745a378932722df287a53',\n            'workflow-repository': 'octocat/hello-world',\n            'workflow-file-name':\n                'octocat/hello-world/.github/workflows/my-workflow.yml@refs/heads/my_branch',\n            'workflow-job-name': 'my-job',\n            'dry-run': false,\n            'log-level': 'info',\n            ...json,\n        }),\n    )\n}\n", "import github from '@actions/github'\nimport { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods'\nimport { Context, Effect, Layer, Redacted } from 'effect'\n\nimport { ActionError } from '../error-handling'\nimport { Inputs } from './inputs'\n\nexport class GithubClient extends Context.Tag('Inputs')<\n    GithubClient,\n    Effect.Effect.Success<typeof githubClient>\n>() {}\n\nconst githubClient = Inputs.pipe(\n    Effect.andThen((inputs) => {\n        const octokit = github.getOctokit(Redacted.value(inputs.githubToken))\n\n        return {\n            listWorkflowRuns: () =>\n                Effect.tryPromise({\n                    try: () =>\n                        octokit.rest.actions.listWorkflowRuns({\n                            ...inputs.workflowRepository,\n                            workflow_id: inputs.workflowFileName,\n                            per_page: 10,\n                        }),\n                    catch: transformToActionError('Could not list workflow runs'),\n                }),\n            listJobsForWorkflowRun: (runId: number) =>\n                Effect.tryPromise({\n                    try: () =>\n                        octokit.rest.actions.listJobsForWorkflowRun({\n                            ...inputs.workflowRepository,\n                            run_id: runId,\n                        }),\n                    catch: transformToActionError('Could not list jobs for workflow run'),\n                }),\n        } satisfies Record<string, (...args: any[]) => Effect.Effect<object, ActionError>>\n    }),\n)\n\nexport const GithubClientLive = Layer.effect(GithubClient, githubClient)\n\nexport function getGitHubClientTest(client?: Partial<Effect.Effect.Success<typeof githubClient>>) {\n    return Layer.succeed(\n        GithubClient,\n        GithubClient.of({\n            listWorkflowRuns: getTestResponse('listWorkflowRuns'),\n            listJobsForWorkflowRun: getTestResponse('listJobsForWorkflowRun'),\n            ...client,\n        }),\n    )\n}\n\nfunction transformToActionError(title: string) {\n    return (error: unknown) => {\n        if (error instanceof Error) {\n            return new ActionError({\n                title,\n                messages: [error.message],\n                cause: error,\n            })\n        }\n\n        return new ActionError({\n            title,\n            messages: [error],\n            cause: error,\n        })\n    }\n}\n\nfunction getTestResponse<Key extends keyof typeof defaultTestResponses>(\n    key: Key,\n): () => Effect.Effect<(typeof defaultTestResponses)[Key]> {\n    return () => Effect.promise(() => Promise.resolve(defaultTestResponses[key]))\n}\n\nconst defaultTestResponses = {\n    listWorkflowRuns: {\n        url: 'https://api.github.com/repos/octocat/hello-world/actions/workflows/my-workflow.yml/runs',\n        status: 200,\n        headers: {},\n        data: {\n            total_count: 1,\n            workflow_runs: [\n                {\n                    id: 30433642,\n                    name: 'Build',\n                    node_id: 'MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==',\n                    check_suite_id: 42,\n                    check_suite_node_id: 'MDEwOkNoZWNrU3VpdGU0Mg==',\n                    head_branch: 'master',\n                    head_sha: 'acb5820ced9479c074f688cc328bf03f341a511d',\n                    path: '.github/workflows/build.yml@main',\n                    run_number: 562,\n                    event: 'push',\n                    display_title: 'Update README.md',\n                    status: 'queued',\n                    conclusion: null,\n                    workflow_id: 159038,\n                    url: 'https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642',\n                    html_url: 'https://github.com/octo-org/octo-repo/actions/runs/30433642',\n                    pull_requests: [],\n                    created_at: '2020-01-22T19:33:08Z',\n                    updated_at: '2020-01-22T19:33:08Z',\n                    actor: {\n                        login: 'octocat',\n                        id: 1,\n                        node_id: 'MDQ6VXNlcjE=',\n                        avatar_url: 'https://github.com/images/error/octocat_happy.gif',\n                        gravatar_id: '',\n                        url: 'https://api.github.com/users/octocat',\n                        html_url: 'https://github.com/octocat',\n                        followers_url: 'https://api.github.com/users/octocat/followers',\n                        following_url:\n                            'https://api.github.com/users/octocat/following{/other_user}',\n                        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',\n                        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',\n                        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',\n                        organizations_url: 'https://api.github.com/users/octocat/orgs',\n                        repos_url: 'https://api.github.com/users/octocat/repos',\n                        events_url: 'https://api.github.com/users/octocat/events{/privacy}',\n                        received_events_url: 'https://api.github.com/users/octocat/received_events',\n                        type: 'User',\n                        site_admin: false,\n                    },\n                    run_attempt: 1,\n                    run_started_at: '2020-01-22T19:33:08Z',\n                    triggering_actor: {\n                        login: 'octocat',\n                        id: 1,\n                        node_id: 'MDQ6VXNlcjE=',\n                        avatar_url: 'https://github.com/images/error/octocat_happy.gif',\n                        gravatar_id: '',\n                        url: 'https://api.github.com/users/octocat',\n                        html_url: 'https://github.com/octocat',\n                        followers_url: 'https://api.github.com/users/octocat/followers',\n                        following_url:\n                            'https://api.github.com/users/octocat/following{/other_user}',\n                        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',\n                        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',\n                        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',\n                        organizations_url: 'https://api.github.com/users/octocat/orgs',\n                        repos_url: 'https://api.github.com/users/octocat/repos',\n                        events_url: 'https://api.github.com/users/octocat/events{/privacy}',\n                        received_events_url: 'https://api.github.com/users/octocat/received_events',\n                        type: 'User',\n                        site_admin: false,\n                    },\n                    jobs_url:\n                        'https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs',\n                    logs_url:\n                        'https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs',\n                    check_suite_url:\n                        'https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374',\n                    artifacts_url:\n                        'https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts',\n                    cancel_url:\n                        'https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel',\n                    rerun_url:\n                        'https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun',\n                    workflow_url:\n                        'https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038',\n                    head_commit: {\n                        id: 'acb5820ced9479c074f688cc328bf03f341a511d',\n                        tree_id: 'd23f6eedb1e1b9610bbc754ddb5197bfe7271223',\n                        message: 'Create linter.yaml',\n                        timestamp: '2020-01-22T19:33:05Z',\n                        author: {\n                            name: 'Octo Cat',\n                            email: 'octocat@github.com',\n                        },\n                        committer: {\n                            name: 'GitHub',\n                            email: 'noreply@github.com',\n                        },\n                    },\n                    repository: {\n                        id: 1296269,\n                        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',\n                        name: 'Hello-World',\n                        full_name: 'octocat/Hello-World',\n                        owner: {\n                            login: 'octocat',\n                            id: 1,\n                            node_id: 'MDQ6VXNlcjE=',\n                            avatar_url: 'https://github.com/images/error/octocat_happy.gif',\n                            gravatar_id: '',\n                            url: 'https://api.github.com/users/octocat',\n                            html_url: 'https://github.com/octocat',\n                            followers_url: 'https://api.github.com/users/octocat/followers',\n                            following_url:\n                                'https://api.github.com/users/octocat/following{/other_user}',\n                            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',\n                            starred_url:\n                                'https://api.github.com/users/octocat/starred{/owner}{/repo}',\n                            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',\n                            organizations_url: 'https://api.github.com/users/octocat/orgs',\n                            repos_url: 'https://api.github.com/users/octocat/repos',\n                            events_url: 'https://api.github.com/users/octocat/events{/privacy}',\n                            received_events_url:\n                                'https://api.github.com/users/octocat/received_events',\n                            type: 'User',\n                            site_admin: false,\n                        },\n                        private: false,\n                        html_url: 'https://github.com/octocat/Hello-World',\n                        description: 'This your first repo!',\n                        fork: false,\n                        url: 'https://api.github.com/repos/octocat/Hello-World',\n                        archive_url:\n                            'https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',\n                        assignees_url:\n                            'https://api.github.com/repos/octocat/Hello-World/assignees{/user}',\n                        blobs_url:\n                            'https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',\n                        branches_url:\n                            'https://api.github.com/repos/octocat/Hello-World/branches{/branch}',\n                        collaborators_url:\n                            'https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',\n                        comments_url:\n                            'https://api.github.com/repos/octocat/Hello-World/comments{/number}',\n                        commits_url:\n                            'https://api.github.com/repos/octocat/Hello-World/commits{/sha}',\n                        compare_url:\n                            'https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',\n                        contents_url:\n                            'https://api.github.com/repos/octocat/Hello-World/contents/{+path}',\n                        contributors_url:\n                            'https://api.github.com/repos/octocat/Hello-World/contributors',\n                        deployments_url:\n                            'https://api.github.com/repos/octocat/Hello-World/deployments',\n                        downloads_url: 'https://api.github.com/repos/octocat/Hello-World/downloads',\n                        events_url: 'https://api.github.com/repos/octocat/Hello-World/events',\n                        forks_url: 'https://api.github.com/repos/octocat/Hello-World/forks',\n                        git_commits_url:\n                            'https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',\n                        git_refs_url:\n                            'https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',\n                        git_tags_url:\n                            'https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',\n                        git_url: 'git:github.com/octocat/Hello-World.git',\n                        issue_comment_url:\n                            'https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',\n                        issue_events_url:\n                            'https://api.github.com/repos/octocat/Hello-World/issues/events{/number}',\n                        issues_url:\n                            'https://api.github.com/repos/octocat/Hello-World/issues{/number}',\n                        keys_url: 'https://api.github.com/repos/octocat/Hello-World/keys{/key_id}',\n                        labels_url:\n                            'https://api.github.com/repos/octocat/Hello-World/labels{/name}',\n                        languages_url: 'https://api.github.com/repos/octocat/Hello-World/languages',\n                        merges_url: 'https://api.github.com/repos/octocat/Hello-World/merges',\n                        milestones_url:\n                            'https://api.github.com/repos/octocat/Hello-World/milestones{/number}',\n                        notifications_url:\n                            'https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',\n                        pulls_url:\n                            'https://api.github.com/repos/octocat/Hello-World/pulls{/number}',\n                        releases_url:\n                            'https://api.github.com/repos/octocat/Hello-World/releases{/id}',\n                        ssh_url: 'git@github.com:octocat/Hello-World.git',\n                        stargazers_url:\n                            'https://api.github.com/repos/octocat/Hello-World/stargazers',\n                        statuses_url:\n                            'https://api.github.com/repos/octocat/Hello-World/statuses/{sha}',\n                        subscribers_url:\n                            'https://api.github.com/repos/octocat/Hello-World/subscribers',\n                        subscription_url:\n                            'https://api.github.com/repos/octocat/Hello-World/subscription',\n                        tags_url: 'https://api.github.com/repos/octocat/Hello-World/tags',\n                        teams_url: 'https://api.github.com/repos/octocat/Hello-World/teams',\n                        trees_url:\n                            'https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',\n                        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',\n                    },\n                    head_repository: {\n                        id: 217723378,\n                        node_id: 'MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=',\n                        name: 'octo-repo',\n                        full_name: 'octo-org/octo-repo',\n                        private: true,\n                        owner: {\n                            login: 'octocat',\n                            id: 1,\n                            node_id: 'MDQ6VXNlcjE=',\n                            avatar_url: 'https://github.com/images/error/octocat_happy.gif',\n                            gravatar_id: '',\n                            url: 'https://api.github.com/users/octocat',\n                            html_url: 'https://github.com/octocat',\n                            followers_url: 'https://api.github.com/users/octocat/followers',\n                            following_url:\n                                'https://api.github.com/users/octocat/following{/other_user}',\n                            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',\n                            starred_url:\n                                'https://api.github.com/users/octocat/starred{/owner}{/repo}',\n                            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',\n                            organizations_url: 'https://api.github.com/users/octocat/orgs',\n                            repos_url: 'https://api.github.com/users/octocat/repos',\n                            events_url: 'https://api.github.com/users/octocat/events{/privacy}',\n                            received_events_url:\n                                'https://api.github.com/users/octocat/received_events',\n                            type: 'User',\n                            site_admin: false,\n                        },\n                        html_url: 'https://github.com/octo-org/octo-repo',\n                        description: null,\n                        fork: false,\n                        url: 'https://api.github.com/repos/octo-org/octo-repo',\n                        forks_url: 'https://api.github.com/repos/octo-org/octo-repo/forks',\n                        keys_url: 'https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}',\n                        collaborators_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}',\n                        teams_url: 'https://api.github.com/repos/octo-org/octo-repo/teams',\n                        hooks_url: 'https://api.github.com/repos/octo-org/octo-repo/hooks',\n                        issue_events_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}',\n                        events_url: 'https://api.github.com/repos/octo-org/octo-repo/events',\n                        assignees_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/assignees{/user}',\n                        branches_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/branches{/branch}',\n                        tags_url: 'https://api.github.com/repos/octo-org/octo-repo/tags',\n                        blobs_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}',\n                        git_tags_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}',\n                        git_refs_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}',\n                        trees_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}',\n                        statuses_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}',\n                        languages_url: 'https://api.github.com/repos/octo-org/octo-repo/languages',\n                        stargazers_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/stargazers',\n                        contributors_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/contributors',\n                        subscribers_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/subscribers',\n                        subscription_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/subscription',\n                        commits_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/commits{/sha}',\n                        git_commits_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}',\n                        comments_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/comments{/number}',\n                        issue_comment_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}',\n                        contents_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/contents/{+path}',\n                        compare_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}',\n                        merges_url: 'https://api.github.com/repos/octo-org/octo-repo/merges',\n                        archive_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}',\n                        downloads_url: 'https://api.github.com/repos/octo-org/octo-repo/downloads',\n                        issues_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/issues{/number}',\n                        pulls_url: 'https://api.github.com/repos/octo-org/octo-repo/pulls{/number}',\n                        milestones_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/milestones{/number}',\n                        notifications_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}',\n                        labels_url: 'https://api.github.com/repos/octo-org/octo-repo/labels{/name}',\n                        releases_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/releases{/id}',\n                        deployments_url:\n                            'https://api.github.com/repos/octo-org/octo-repo/deployments',\n                    },\n                },\n            ],\n        },\n    } satisfies RestEndpointMethodTypes['actions']['listWorkflowRuns']['response'],\n    listJobsForWorkflowRun: {\n        url: 'https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449/jobs',\n        status: 200,\n        headers: {},\n        data: {\n            total_count: 1,\n            jobs: [\n                {\n                    id: 399444496,\n                    run_id: 29679449,\n                    run_url:\n                        'https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449',\n                    node_id: 'MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==',\n                    head_sha: 'f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0',\n                    url: 'https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496',\n                    html_url: 'https://github.com/octo-org/octo-repo/runs/29679449/jobs/399444496',\n                    status: 'completed',\n                    conclusion: 'success',\n                    created_at: '2020-01-20T17:40:09Z',\n                    started_at: '2020-01-20T17:42:40Z',\n                    completed_at: '2020-01-20T17:44:39Z',\n                    name: 'build',\n                    steps: [\n                        {\n                            name: 'Set up job',\n                            status: 'completed',\n                            conclusion: 'success',\n                            number: 1,\n                            started_at: '2020-01-20T09:42:40.000-08:00',\n                            completed_at: '2020-01-20T09:42:41.000-08:00',\n                        },\n                        {\n                            name: 'Run actions/checkout@v2',\n                            status: 'completed',\n                            conclusion: 'success',\n                            number: 2,\n                            started_at: '2020-01-20T09:42:41.000-08:00',\n                            completed_at: '2020-01-20T09:42:45.000-08:00',\n                        },\n                        {\n                            name: 'Set up Ruby',\n                            status: 'completed',\n                            conclusion: 'success',\n                            number: 3,\n                            started_at: '2020-01-20T09:42:45.000-08:00',\n                            completed_at: '2020-01-20T09:42:45.000-08:00',\n                        },\n                        {\n                            name: 'Run actions/cache@v3',\n                            status: 'completed',\n                            conclusion: 'success',\n                            number: 4,\n                            started_at: '2020-01-20T09:42:45.000-08:00',\n                            completed_at: '2020-01-20T09:42:48.000-08:00',\n                        },\n                        {\n                            name: 'Install Bundler',\n                            status: 'completed',\n                            conclusion: 'success',\n                            number: 5,\n                            started_at: '2020-01-20T09:42:48.000-08:00',\n                            completed_at: '2020-01-20T09:42:52.000-08:00',\n                        },\n                        {\n                            name: 'Install Gems',\n                            status: 'completed',\n                            conclusion: 'success',\n                            number: 6,\n                            started_at: '2020-01-20T09:42:52.000-08:00',\n                            completed_at: '2020-01-20T09:42:53.000-08:00',\n                        },\n                        {\n                            name: 'Run Tests',\n                            status: 'completed',\n                            conclusion: 'success',\n                            number: 7,\n                            started_at: '2020-01-20T09:42:53.000-08:00',\n                            completed_at: '2020-01-20T09:42:59.000-08:00',\n                        },\n                        {\n                            name: 'Deploy to Heroku',\n                            status: 'completed',\n                            conclusion: 'success',\n                            number: 8,\n                            started_at: '2020-01-20T09:42:59.000-08:00',\n                            completed_at: '2020-01-20T09:44:39.000-08:00',\n                        },\n                        {\n                            name: 'Post actions/cache@v3',\n                            status: 'completed',\n                            conclusion: 'success',\n                            number: 16,\n                            started_at: '2020-01-20T09:44:39.000-08:00',\n                            completed_at: '2020-01-20T09:44:39.000-08:00',\n                        },\n                        {\n                            name: 'Complete job',\n                            status: 'completed',\n                            conclusion: 'success',\n                            number: 17,\n                            started_at: '2020-01-20T09:44:39.000-08:00',\n                            completed_at: '2020-01-20T09:44:39.000-08:00',\n                        },\n                    ],\n                    check_run_url:\n                        'https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496',\n                    labels: ['self-hosted', 'foo', 'bar'],\n                    runner_id: 1,\n                    runner_name: 'my runner',\n                    runner_group_id: 2,\n                    runner_group_name: 'my runner group',\n                    workflow_name: 'CI',\n                    head_branch: 'main',\n                },\n            ],\n        },\n    } satisfies RestEndpointMethodTypes['actions']['listJobsForWorkflowRun']['response'],\n}\n", "import { createProgram } from './program'\nimport { runMainLive } from './run-main'\nimport { ConfigProviderLive } from './services/config-provider'\nimport { GithubClientLive } from './services/github-client'\n\ncreateProgram({\n    configProvider: ConfigProviderLive,\n    githubClient: GithubClientLive,\n}).pipe(runMainLive)\n"],
  "mappings": "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AAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MAAQ,OAAO;AAAA,MACnE,OA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CL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK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",
  "names": ["exports", "exports", "first", "crypto", "validate", "version", "value", "URL", "crypto", "import_crypto", "crypto", "import_crypto", "exports", "value", "exports", "exports", "self", "options", "pending", "onError", "head", "cause", "socket", "keys", "require_tunnel", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Blob", "stringify", "idx", "isIterable", "stream", "err", "value", "chunk", "done", "exports", "module", "delay", "timeout", "exports", "module", "chunk", "exports", "module", "exports", "module", "exports", "module", "self", "start", "end", "exports", "module", "self", "start", "end", "exports", "module", "exports", "module", "match", "exports", "module", "exports", "module", "self", "chunk", "exports", "module", "exports", "module", "exports", "module", "chunk", "require_constants", "exports", "module", "DOMException", "structuredClone", "value", "exports", "module", "require_util", "exports", "module", "performance", "crypto", "hash", "length", "request", "empty", "promise", "value", "kind", "values", "done", "chunk", "require_symbols", "exports", "module", "exports", "module", "context", "length", "min", "seq", "done", "value", "keys", "exports", "module", "atob", "start", "value", "exports", "module", "Blob", "value", "exports", "module", "Blob", "value", "makeEntry", "entry", "exports", "module", "DOMException", "Blob", "length", "escape", "value", "chunk", "done", "end", "entries", "promise", "exports", "module", "keys", "chunk", "resume", "value", "request", "exports", "module", "exports", "module", "err", "exports", "module", "timeout", "session", "onConnectTimeout", "value", "exports", "ERROR", "exports", "TYPE", "FLAGS", "LENIENT_FLAGS", "METHODS", "FINISH", "HEADER_STATE", "exports", "module", "resume", "chunk", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "connect", "value", "resume", "request", "onError", "start", "chunk", "head", "timeout", "socket", "sync", "headers", "pipe", "err", "exports", "module", "exports", "module", "exports", "module", "pending", "running", "size", "exports", "module", "dispatcher", "exports", "module", "pool", "dispatcher", "counter", "exports", "module", "value", "exports", "module", "WeakRef", "exports", "module", "Blob", "resume", "chunk", "self", "consume", "length", "require_util", "exports", "module", "chunk", "exports", "module", "self", "exports", "module", "context", "resume", "chunk", "request", "exports", "module", "context", "resume", "callback", "res", "opaque", "chunk", "exports", "module", "resume", "chunk", "context", "body", "exports", "module", "context", "exports", "module", "context", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "match", "value", "clone", "entries", "mockDispatch", "delay", "times", "resume", "exports", "module", "statusCode", "data", "responseOptions", "newMockDispatch", "exports", "module", "exports", "module", "exports", "module", "keys", "exports", "module", "chunk", "times", "exports", "module", "value", "scope", "pending", "exports", "module", "URL", "opts", "exports", "module", "diff", "chunk", "timeout", "counter", "resume", "start", "size", "end", "err", "require_global", "exports", "module", "exports", "module", "exports", "module", "keys", "value", "exists", "exports", "module", "DOMException", "value", "require_request", "exports", "module", "request", "window", "ac", "exports", "module", "DOMException", "request", "globalThis", "value", "length", "chunk", "isFailure", "done", "resume", "keys", "require_symbols", "exports", "module", "exports", "module", "exports", "module", "require_util", "exports", "module", "DOMException", "done", "value", "chunk", "type", "decode", "size", "exports", "module", "require_symbols", "exports", "module", "require_util", "exports", "module", "values", "value", "exports", "module", "request", "promise", "exports", "module", "request", "cache", "keys", "require_constants", "exports", "module", "require_util", "exports", "module", "value", "date", "days", "stringify", "symbol", "exports", "module", "value", "exports", "module", "stringify", "value", "require_constants", "exports", "module", "require_symbols", "exports", "module", "exports", "module", "require_util", "exports", "module", "exports", "module", "crypto", "request", "chunk", "exports", "module", "crypto", "exports", "module", "chunk", "body", "length", "exports", "module", "DOMException", "value", "exports", "module", "HttpCodes", "exports", "Headers", "MediaTypes", "chunk", "value", "exports", "exports", "exports", "value", "exports", "ExitCode", "exports", "secret", "inputs", "value", "enabled", "exports", "exports", "getUserAgent", "navigator", "userAgent", "process", "version", "undefined", "substr", "platform", "arch", "exports", "module", "name", "method", "exports", "module", "exports", "module", "exports", "module", "bind", "require_dist_node", "exports", "module", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__hasOwnProp", "__export", "all", "__copyProps", "__toCommonJS", "value", "proto", "merge", "omit", "context", "value2", "expand", "literal", "values", "parse", "option", "format", "require_dist_node", "exports", "exports", "module", "cb", "exports", "module", "once", "require_dist_node", "exports", "module", "__create", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__getProtoOf", "__hasOwnProp", "__export", "all", "__copyProps", "__toESM", "__toCommonJS", "require_dist_node", "exports", "module", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__hasOwnProp", "__export", "all", "__copyProps", "__toCommonJS", "request", "value", "proto", "log", "request2", "require_dist_node", "exports", "module", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__hasOwnProp", "__export", "all", "__copyProps", "__toCommonJS", "import_request2", "import_request", "require_dist_node", "exports", "module", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__hasOwnProp", "__export", "all", "__copyProps", "__toCommonJS", "request", "require_dist_node", "exports", "module", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__hasOwnProp", "__export", "all", "__copyProps", "__toCommonJS", "import_request", "require_dist_node", "exports", "module", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__hasOwnProp", "__export", "all", "__copyProps", "__toCommonJS", "scope", "descriptor", "value", "require_dist_node", "exports", "module", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__hasOwnProp", "__export", "all", "__copyProps", "__toCommonJS", "done", "exports", "exports", "isFunction", "input", "dual", "arity", "body", "arguments", "apply", "self", "RangeError", "a", "b", "length", "c", "d", "e", "args", "identity", "a", "constant", "value", "constTrue", "constFalse", "constUndefined", "constant", "undefined", "constVoid", "pipe", "a", "ab", "bc", "cd", "de", "ef", "fg", "gh", "hi", "arguments", "length", "ret", "i", "make", "isEquivalent", "self", "that", "mapInput", "dual", "self", "f", "make", "x", "y", "array", "item", "make", "self", "that", "length", "i", "isEq", "let_", "map", "dual", "self", "name", "f", "a", "Object", "assign", "bindTo", "bind", "flatMap", "b", "moduleVersion", "getCurrentVersion", "globalStoreId", "Symbol", "for", "version", "getCurrentVersion", "globalThis", "Map", "globalStore", "globalValue", "id", "compute", "has", "set", "get", "isString", "input", "isNumber", "isBigInt", "input", "isFunction", "isFunction_", "isRecordOrArray", "input", "isObject", "isFunction", "hasProperty", "dual", "self", "property", "isTagged", "tag", "isNullable", "undefined", "isIterable", "input", "hasProperty", "Symbol", "iterator", "isPromiseLike", "input", "hasProperty", "isFunction", "then", "getBugErrorMessage", "message", "GenKindTypeId", "Symbol", "for", "GenKindImpl", "value", "constructor", "_F", "identity", "_R", "_", "_O", "_E", "GenKindTypeId", "Symbol", "iterator", "SingleShotGen", "self", "called", "next", "a", "done", "return", "throw", "e", "defaultIncHi", "defaultIncLo", "MUL_HI", "MUL_LO", "BIT_53", "BIT_27", "PCGRandom", "_state", "constructor", "seedHi", "seedLo", "incHi", "incLo", "isNullable", "Math", "random", "Int32Array", "_next", "add64", "getState", "setState", "state", "integer", "max", "num", "skew", "number", "hi", "lo", "oldHi", "oldLo", "mul64", "xsHi", "xsLo", "xorshifted", "rot", "rot2", "out", "aHi", "aLo", "bHi", "bLo", "c1", "c0", "imul", "YieldWrapTypeId", "Symbol", "for", "YieldWrap", "value", "yieldWrapGet", "self", "Error", "getBugErrorMessage", "structuralRegionState", "globalValue", "enabled", "tester", "undefined", "tracingFunction", "name", "wrap", "body", "fn", "internalCall", "randomHashCache", "globalValue", "Symbol", "for", "WeakMap", "symbol", "hash", "self", "structuralRegionState", "enabled", "number", "string", "toString", "String", "Date", "toISOString", "isHash", "random", "Error", "has", "set", "Math", "floor", "Number", "MAX_SAFE_INTEGER", "get", "combine", "b", "optimize", "n", "u", "hasProperty", "Infinity", "h", "str", "i", "length", "charCodeAt", "structureKeys", "o", "keys", "pipe", "structure", "Object", "array", "arr", "cached", "arguments", "defineProperty", "value", "enumerable", "symbol", "Symbol", "for", "equals", "arguments", "length", "self", "compareBoth", "that", "selfType", "isEqual", "hash", "structuralRegionState", "enabled", "tester", "Date", "toISOString", "Array", "isArray", "every", "v", "i", "Object", "getPrototypeOf", "prototype", "keysSelf", "keys", "keysThat", "key", "u", "hasProperty", "equivalence", "NodeInspectSymbol", "Symbol", "for", "toJSON", "x", "hasProperty", "isFunction", "length", "Array", "isArray", "map", "format", "JSON", "stringify", "BaseProto", "toString", "Class", "toStringUnknown", "u", "whitespace", "stringifyCircular", "String", "_", "obj", "cache", "retVal", "_key", "value", "includes", "undefined", "push", "pipeArguments", "self", "args", "length", "ret", "i", "len", "OP_ASYNC", "OP_COMMIT", "OP_FAILURE", "OP_ON_FAILURE", "OP_ON_SUCCESS", "OP_ON_SUCCESS_AND_FAILURE", "OP_SUCCESS", "OP_SYNC", "OP_TAG", "OP_UPDATE_RUNTIME_FLAGS", "OP_WHILE", "OP_WITH_RUNTIME", "OP_YIELD", "OP_REVERT_FLAGS", "EffectTypeId", "Symbol", "for", "StreamTypeId", "SinkTypeId", "ChannelTypeId", "effectVariance", "_R", "_", "_E", "_A", "_V", "version", "getCurrentVersion", "sinkVariance", "_In", "_L", "channelVariance", "_Env", "_InErr", "_InElem", "_InDone", "_OutErr", "_OutElem", "_OutDone", "EffectPrototype", "symbol", "that", "cached", "random", "iterator", "SingleShotGen", "YieldWrap", "pipe", "pipeArguments", "arguments", "StructuralPrototype", "structure", "selfKeys", "Object", "keys", "thatKeys", "length", "key", "equals", "CommitPrototype", "_op", "OP_COMMIT", "StructuralCommitPrototype", "TypeId", "Symbol", "for", "CommonProto", "EffectPrototype", "_A", "_", "NodeInspectSymbol", "toJSON", "toString", "format", "SomeProto", "Object", "assign", "create", "_tag", "_op", "symbol", "that", "isOption", "isSome", "equals", "value", "cached", "combine", "hash", "_id", "NoneHash", "Hash", "NoneProto", "isNone", "input", "hasProperty", "fa", "none", "some", "a", "TypeId", "Symbol", "for", "CommonProto", "EffectPrototype", "_R", "_", "NodeInspectSymbol", "toJSON", "toString", "format", "RightProto", "Object", "assign", "create", "_tag", "_op", "symbol", "that", "isEither", "isRight", "equals", "right", "combine", "hash", "_id", "LeftProto", "isLeft", "left", "input", "hasProperty", "ma", "a", "fromOption", "dual", "self", "onNone", "isNone", "left", "right", "value", "right", "left", "fromOption", "isLeft", "isRight", "match", "dual", "self", "onLeft", "onRight", "isLeft", "left", "right", "merge", "match", "onLeft", "identity", "onRight", "all", "input", "Symbol", "iterator", "out", "e", "isLeft", "push", "right", "key", "Object", "keys", "isNonEmptyArray", "self", "length", "make", "compare", "self", "that", "number", "make", "self", "that", "mapInput", "dual", "self", "f", "make", "b1", "b2", "lessThan", "O", "dual", "self", "that", "greaterThan", "lessThanOrEqualTo", "greaterThanOrEqualTo", "none", "some", "isNone", "isSome", "match", "dual", "self", "onNone", "onSome", "value", "getOrElse", "dual", "self", "onNone", "isNone", "value", "orElseSome", "dual", "self", "onNone", "isNone", "some", "fromNullable", "nullableValue", "none", "some", "getOrUndefined", "getOrElse", "constUndefined", "liftThrowable", "f", "a", "some", "e", "none", "getOrThrowWith", "dual", "self", "onNone", "isSome", "value", "getOrThrow", "Error", "map", "isNone", "flatMap", "dual", "self", "f", "isNone", "none", "value", "all", "input", "Symbol", "iterator", "out", "o", "isNone", "none", "push", "value", "some", "key", "Object", "keys", "containsWith", "isEquivalent", "dual", "self", "a", "isNone", "value", "_equivalence", "Equal", "equivalence", "contains", "make", "elements", "make", "elements", "allocate", "n", "Array", "makeBy", "f", "max", "Math", "floor", "out", "i", "fromIterable", "collection", "Array", "isArray", "from", "ensure", "self", "match", "dual", "self", "onEmpty", "onNonEmpty", "isNonEmptyReadonlyArray", "prepend", "dual", "self", "head", "append", "dual", "self", "last", "appendAll", "that", "fromIterable", "concat", "isArray", "Array", "isEmptyArray", "self", "length", "isEmptyReadonlyArray", "isNonEmptyArray", "isNonEmptyReadonlyArray", "isOutOfBound", "i", "as", "length", "clamp", "Math", "floor", "min", "max", "get", "dual", "self", "index", "none", "some", "unsafeGet", "Error", "head", "get", "headNonEmpty", "unsafeGet", "last", "self", "isNonEmptyReadonlyArray", "some", "lastNonEmpty", "none", "length", "tailNonEmpty", "self", "slice", "spanIndex", "self", "predicate", "i", "a", "span", "dual", "splitAt", "drop", "n", "input", "fromIterable", "slice", "clamp", "length", "reverse", "self", "Array", "from", "sort", "dual", "O", "out", "zip", "dual", "self", "that", "zipWith", "make", "f", "as", "fromIterable", "bs", "isNonEmptyReadonlyArray", "out", "headNonEmpty", "len", "Math", "min", "length", "i", "_equivalence", "Equal", "equivalence", "splitAt", "dual", "self", "n", "input", "Array", "from", "_n", "Math", "floor", "isNonEmptyReadonlyArray", "splitNonEmptyAt", "max", "length", "copy", "prepend", "slice", "headNonEmpty", "copy", "self", "slice", "unionWith", "dual", "self", "that", "isEquivalent", "a", "fromIterable", "b", "isNonEmptyReadonlyArray", "dedupe", "dedupeWith", "appendAll", "union", "_equivalence", "empty", "of", "a", "map", "dual", "self", "f", "flatMap", "isEmptyReadonlyArray", "out", "i", "length", "inner", "j", "push", "flatten", "identity", "filterMap", "as", "fromIterable", "o", "isSome", "value", "getSomes", "filterMap", "identity", "reduce", "dual", "self", "b", "f", "fromIterable", "a", "i", "reduceRight", "unfold", "b", "f", "out", "next", "o", "isSome", "a", "value", "push", "getEquivalence", "array", "dedupeWith", "dual", "self", "isEquivalent", "input", "fromIterable", "isNonEmptyReadonlyArray", "out", "headNonEmpty", "rest", "tailNonEmpty", "r", "every", "a", "push", "dedupe", "equivalence", "join", "dual", "self", "sep", "fromIterable", "not", "self", "Tag", "add", "empty", "get", "getOption", "isContext", "isTag", "make", "merge", "omit", "pick", "unsafeGet", "TagTypeId", "Symbol", "for", "STMSymbolKey", "STMTypeId", "TagProto", "EffectPrototype", "_tag", "_op", "effectVariance", "_Service", "_", "_Identifier", "toString", "format", "toJSON", "_id", "key", "stack", "NodeInspectSymbol", "of", "self", "context", "make", "makeGenericTag", "limit", "Error", "stackTraceLimit", "creationError", "tag", "Object", "create", "defineProperty", "get", "Tag", "id", "TagClass", "setPrototypeOf", "TypeId", "ContextProto", "_Services", "symbol", "that", "isContext", "unsafeMap", "size", "k", "keys", "has", "equals", "cached", "number", "pipe", "pipeArguments", "arguments", "services", "Array", "from", "map", "makeContext", "serviceNotFoundError", "error", "String", "lines", "split", "length", "afterAt", "match", "message", "splice", "join", "u", "hasProperty", "isTag", "_empty", "Map", "empty", "service", "add", "dual", "set", "unsafeGet", "getOption", "none", "some", "merge", "s", "pick", "tags", "tagSet", "Set", "newEnv", "entries", "omit", "delete", "GenericTag", "makeGenericTag", "unsafeMake", "makeContext", "isContext", "isTag", "empty", "make", "add", "get", "unsafeGet", "getOption", "merge", "pick", "omit", "Tag", "TypeId", "Symbol", "for", "copy", "src", "srcPos", "dest", "destPos", "len", "i", "Math", "min", "length", "emptyArray", "getEquivalence", "isEquivalent", "make", "self", "that", "toReadonlyArray", "every", "value", "unsafeGet", "_equivalence", "equals", "ChunkProto", "_A", "_", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "symbol", "isChunk", "cached", "array", "iterator", "backing", "_tag", "pipe", "pipeArguments", "arguments", "makeChunk", "chunk", "Object", "create", "depth", "left", "right", "max", "_empty", "u", "hasProperty", "empty", "as", "of", "unsafeFromNonEmptyArray", "a", "fromIterable", "copyToArray", "initial", "j", "toArray_", "slice", "toArray", "toReadonlyArray_", "arr", "Array", "reverseChunk", "reverse", "unsafeFromArray", "get", "dual", "index", "none", "some", "Error", "offset", "append", "appendAll", "prepend", "elem", "drop", "dual", "self", "n", "length", "_empty", "backing", "_tag", "makeChunk", "chunk", "offset", "left", "right", "appendAll", "dual", "self", "that", "backing", "_tag", "diff", "depth", "Math", "abs", "makeChunk", "left", "right", "nr", "nrr", "nl", "nll", "isEmpty", "self", "length", "isNonEmpty", "head", "get", "unsafeHead", "unsafeGet", "headNonEmpty", "tailNonEmpty", "self", "drop", "TypeId", "Symbol", "for", "bigint0", "BigInt", "bigint24", "bigint60", "bigint1e3", "bigint1e6", "bigint1e9", "DURATION_REGEX", "decode", "input", "isDuration", "isNumber", "millis", "isBigInt", "nanos", "Array", "isArray", "length", "isString", "lastIndex", "match", "exec", "_", "valueStr", "unit", "value", "Number", "micros", "seconds", "minutes", "hours", "days", "weeks", "Error", "decodeUnknown", "Option", "liftThrowable", "zeroValue", "_tag", "infinityValue", "DurationProto", "symbol", "cached", "structure", "that", "equals", "toString", "format", "toJSON", "_id", "hrtime", "toHrTime", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "make", "duration", "Object", "create", "isNaN", "isFinite", "isInteger", "Math", "round", "u", "hasProperty", "zero", "make", "nanos", "make", "micros", "bigint1e3", "millis", "seconds", "minutes", "hours", "days", "weeks", "toMillis", "self", "_self", "decode", "value", "_tag", "Infinity", "Number", "unsafeToNanos", "self", "_self", "decode", "value", "_tag", "Error", "nanos", "BigInt", "Math", "round", "millis", "toHrTime", "Infinity", "Number", "bigint1e9", "floor", "matchWith", "dual", "self", "that", "options", "_self", "decode", "_that", "value", "_tag", "onMillis", "toMillis", "selfNanos", "nanos", "BigInt", "Math", "round", "millis", "thatNanos", "onNanos", "Equivalence", "self", "that", "matchWith", "onMillis", "onNanos", "greaterThanOrEqualTo", "dual", "self", "that", "matchWith", "onMillis", "onNanos", "equals", "Equivalence", "decode", "format", "duration", "parts", "value", "_tag", "nanos", "unsafeToNanos", "bigint1e6", "push", "ms", "bigint1e3", "bigint0", "sec", "bigint60", "min", "hr", "bigint24", "days", "reverse", "join", "SIZE", "BUCKET_SIZE", "Math", "pow", "MASK", "MAX_INDEX_NODE", "MIN_ARRAY_NODE", "popcount", "x", "hashFragment", "shift", "h", "MASK", "toBitmap", "fromBitmap", "bitmap", "bit", "make", "value", "previous", "arrayUpdate", "mutate", "at", "v", "arr", "out", "len", "length", "Array", "i", "arraySpliceOut", "newLen", "g", "arraySpliceIn", "EmptyNode", "_tag", "modify", "edit", "_shift", "f", "hash", "key", "size", "v", "none", "isNone", "value", "LeafNode", "isEmptyNode", "a", "isTagged", "isLeafNode", "node", "canEditNode", "constructor", "shift", "equals", "mergeLeaves", "CollisionNode", "children", "canEdit", "list", "updateCollisionList", "length", "mutate", "len", "i", "child", "newValue", "arraySpliceOut", "arrayUpdate", "IndexedNode", "mask", "frag", "hashFragment", "bit", "toBitmap", "indx", "fromBitmap", "exists", "_newChild", "SIZE", "MAX_INDEX_NODE", "expand", "arraySpliceIn", "current", "bitmap", "newChildren", "ArrayNode", "count", "newChild", "MIN_ARRAY_NODE", "pack", "removed", "elements", "Array", "g", "elem", "subNodes", "arr", "mergeLeavesInner", "h1", "n1", "h2", "n2", "subH1", "subH2", "stack", "undefined", "currentShift", "res", "make", "final", "previous", "HashMapSymbolKey", "HashMapTypeId", "Symbol", "for", "HashMapProto", "iterator", "HashMapIterator", "k", "v", "symbol", "hash", "item", "pipe", "combine", "cached", "that", "isHashMap", "_size", "elem", "getHash", "isNone", "equals", "value", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipeArguments", "arguments", "makeImpl", "editable", "edit", "root", "size", "Object", "create", "_editable", "_edit", "_root", "f", "constructor", "visitLazy", "undefined", "next", "done", "v0", "applyCont", "cont", "visitLazyChildren", "none", "node", "_tag", "isSome", "some", "key", "children", "length", "len", "i", "child", "isEmptyNode", "_empty", "EmptyNode", "empty", "fromIterable", "entries", "map", "beginMutation", "empty", "entry", "set", "endMutation", "isHashMap", "u", "hasProperty", "HashMapTypeId", "isEmpty", "self", "isEmptyNode", "_root", "get", "Dual", "dual", "key", "getHash", "hash", "node", "shift", "_tag", "equals", "value", "none", "children", "i", "len", "length", "child", "frag", "hashFragment", "bit", "toBitmap", "mask", "fromBitmap", "SIZE", "has", "Dual", "dual", "self", "key", "isSome", "getHash", "hash", "set", "Dual", "dual", "self", "key", "value", "modifyAt", "some", "setTree", "newRoot", "newSize", "_editable", "_root", "_size", "makeImpl", "_edit", "keys", "HashMapIterator", "size", "self", "_size", "beginMutation", "makeImpl", "_edit", "_root", "endMutation", "_editable", "mutate", "Dual", "dual", "f", "transient", "modifyAt", "key", "modifyHash", "hash", "value", "newRoot", "modify", "NaN", "pipe", "setTree", "remove", "Dual", "dual", "self", "key", "modifyAt", "none", "map", "Dual", "dual", "self", "f", "reduce", "empty", "value", "key", "set", "forEach", "Dual", "dual", "self", "f", "reduce", "_", "value", "key", "zero", "root", "_root", "_tag", "isSome", "toVisit", "children", "pop", "i", "len", "length", "child", "isEmptyNode", "push", "HashSetSymbolKey", "HashSetTypeId", "Symbol", "for", "HashSetProto", "iterator", "keys", "_keyMap", "symbol", "cached", "combine", "hash", "that", "isHashSet", "size", "equals", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "makeImpl", "keyMap", "set", "Object", "create", "u", "hasProperty", "_empty", "HM", "empty", "fromIterable", "elements", "beginMutation", "value", "add", "endMutation", "make", "has", "dual", "self", "size", "self", "_keyMap", "beginMutation", "makeImpl", "endMutation", "_editable", "mutate", "dual", "f", "transient", "add", "value", "set", "remove", "difference", "that", "union", "dual", "self", "that", "mutate", "empty", "set", "forEach", "value", "add", "forEach", "dual", "self", "f", "_keyMap", "_", "k", "reduce", "zero", "z", "a", "empty", "fromIterable", "make", "has", "size", "add", "remove", "difference", "union", "reduce", "TypeId", "Symbol", "for", "MutableRefProto", "toString", "format", "toJSON", "_id", "current", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "make", "value", "ref", "Object", "create", "compareAndSet", "Dual", "dual", "self", "oldValue", "newValue", "equals", "get", "self", "current", "set", "Dual", "dual", "self", "value", "current", "FiberIdSymbolKey", "FiberIdTypeId", "Symbol", "for", "OP_NONE", "OP_RUNTIME", "OP_COMPOSITE", "emptyHash", "Hash", "string", "None", "_tag", "id", "startTimeMillis", "symbol", "that", "isFiberId", "toString", "format", "toJSON", "_id", "NodeInspectSymbol", "Runtime", "constructor", "cached", "Composite", "left", "right", "_hash", "pipe", "combine", "hash", "equals", "none", "isFiberId", "self", "hasProperty", "FiberIdTypeId", "combine", "dual", "self", "that", "_tag", "OP_NONE", "Composite", "ids", "self", "_tag", "OP_NONE", "empty", "OP_RUNTIME", "make", "id", "OP_COMPOSITE", "pipe", "left", "union", "right", "_fiberCounter", "globalValue", "Symbol", "for", "threadName", "self", "identifiers", "Array", "from", "ids", "map", "n", "join", "unsafeMake", "id", "get", "_fiberCounter", "pipe", "set", "Runtime", "Date", "now", "none", "combine", "threadName", "unsafeMake", "empty", "fromIterable", "isEmpty", "get", "set", "keys", "size", "mutate", "modifyAt", "map", "forEach", "reduce", "TypeId", "Symbol", "for", "toArray", "self", "fromIterable", "getEquivalence", "isEquivalent", "mapInput", "_equivalence", "equals", "ConsProto", "_tag", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "symbol", "that", "isList", "cached", "array", "iterator", "done", "next", "return", "value", "head", "tail", "pipe", "pipeArguments", "arguments", "makeCons", "cons", "Object", "create", "NilHash", "Hash", "string", "NilProto", "undefined", "_Nil", "u", "hasProperty", "isNil", "isCons", "nil", "_Nil", "cons", "head", "tail", "makeCons", "empty", "of", "value", "appendAll", "dual", "self", "that", "prependAll", "prepend", "element", "cons", "prefix", "isNil", "result", "makeCons", "head", "curr", "tail", "temp", "reduce", "dual", "self", "zero", "f", "acc", "these", "isNil", "head", "tail", "reverse", "self", "result", "empty", "these", "isNil", "prepend", "head", "tail", "ArrayProto", "Object", "assign", "create", "Array", "prototype", "symbol", "cached", "array", "that", "isArray", "length", "every", "v", "i", "equals", "Structural", "args", "StructuralPrototype", "struct", "as", "ContextPatchTypeId", "Symbol", "for", "variance", "a", "PatchProto", "Structural", "prototype", "_Value", "_Patch", "EmptyProto", "Object", "assign", "create", "_tag", "_empty", "empty", "AndThenProto", "makeAndThen", "first", "second", "o", "AddServiceProto", "makeAddService", "key", "service", "RemoveServiceProto", "makeRemoveService", "UpdateServiceProto", "makeUpdateService", "update", "diff", "oldValue", "newValue", "missingServices", "Map", "unsafeMap", "patch", "tag", "newService", "entries", "has", "old", "get", "delete", "equals", "combine", "Dual", "dual", "self", "that", "context", "wasServiceUpdated", "patches", "of", "updatedContext", "isNonEmpty", "head", "headNonEmpty", "tail", "tailNonEmpty", "set", "prepend", "makeContext", "map", "s", "HashSetPatchTypeId", "Symbol", "for", "variance", "a", "PatchProto", "Structural", "prototype", "_Value", "_Key", "_Patch", "EmptyProto", "Object", "assign", "create", "_tag", "_empty", "empty", "AndThenProto", "makeAndThen", "first", "second", "o", "AddProto", "makeAdd", "value", "RemoveProto", "makeRemove", "diff", "oldValue", "newValue", "removed", "patch", "reduce", "set", "has", "remove", "combine", "Dual", "dual", "self", "that", "patches", "of", "isNonEmpty", "head", "headNonEmpty", "tail", "tailNonEmpty", "prepend", "add", "ReadonlyArrayPatchTypeId", "Symbol", "for", "variance", "a", "PatchProto", "Structural", "prototype", "_Value", "_Patch", "EmptyProto", "Object", "assign", "create", "_tag", "_empty", "empty", "AndThenProto", "makeAndThen", "first", "second", "o", "AppendProto", "makeAppend", "values", "SliceProto", "makeSlice", "from", "until", "UpdateProto", "makeUpdate", "index", "patch", "diff", "options", "i", "oldValue", "length", "newValue", "oldElement", "newElement", "valuePatch", "differ", "equals", "combine", "drop", "Dual", "dual", "self", "that", "readonlyArray", "slice", "patches", "of", "isNonEmptyArray", "head", "headNonEmpty", "tail", "tailNonEmpty", "unshift", "value", "push", "DifferTypeId", "Symbol", "for", "DifferProto", "_P", "identity", "_V", "make", "params", "differ", "Object", "create", "empty", "diff", "combine", "patch", "environment", "first", "second", "oldValue", "newValue", "hashSet", "make", "empty", "combine", "first", "second", "diff", "oldValue", "newValue", "patch", "readonlyArray", "differ", "make", "empty", "combine", "first", "second", "diff", "oldValue", "newValue", "patch", "update", "updateWith", "_", "a", "f", "make", "empty", "identity", "combine", "first", "second", "diff", "oldValue", "newValue", "equals", "constant", "patch", "BIT_MASK", "BIT_SHIFT", "active", "patch", "enabled", "make", "empty", "enable", "flag", "disable", "exclude", "dual", "self", "flag", "make", "active", "enabled", "andThen", "dual", "self", "that", "invert", "n", "BIT_MASK", "None", "Interruption", "OpSupervision", "RuntimeMetrics", "WindDown", "CooperativeYielding", "cooperativeYielding", "self", "isEnabled", "CooperativeYielding", "enable", "dual", "self", "flag", "interruptible", "self", "interruption", "windDown", "isEnabled", "Interruption", "isEnabled", "dual", "self", "flag", "make", "flags", "reduce", "a", "b", "none", "None", "runtimeMetrics", "self", "isEnabled", "RuntimeMetrics", "windDown", "self", "isEnabled", "WindDown", "diff", "dual", "self", "that", "make", "patch", "invert", "active", "enabled", "differ", "internalDiffer", "make", "empty", "diff", "oldValue", "newValue", "combine", "first", "second", "andThen", "patch", "_patch", "empty", "enable", "disable", "exclude", "empty", "_tag", "par", "self", "that", "left", "right", "seq", "single", "dataSource", "blockedRequest", "flatten", "self", "current", "of", "updated", "empty", "parallel", "sequential", "reduce", "parallelCollectionEmpty", "blockedRequest", "par", "seq", "step", "parallelCollectionCombine", "appendAll", "merge", "isNil", "reverse", "Error", "requests", "stack", "_tag", "head", "tail", "cons", "right", "left", "l", "r", "parallelCollectionAdd", "parallelCollectionToSequentialCollection", "parallelCollectionIsEmpty", "seqHeadKeys", "sequentialCollectionKeys", "parKeys", "parallelCollectionKeys", "length", "equals", "sequentialCollectionCombine", "EntryTypeId", "Symbol", "for", "EntryImpl", "request", "result", "listeners", "ownerId", "state", "blockedRequestVariance", "constructor", "_R", "_", "makeEntry", "options", "EntryImpl", "request", "result", "listeners", "ownerId", "state", "RequestBlockParallelTypeId", "Symbol", "for", "parallelVariance", "_R", "_", "ParallelImpl", "map", "constructor", "parallelCollectionEmpty", "empty", "parallelCollectionAdd", "self", "blockedRequest", "ParallelImpl", "modifyAt", "map", "dataSource", "_", "orElseSome", "append", "of", "parallelCollectionCombine", "that", "reduce", "value", "key", "set", "match", "get", "onNone", "onSome", "other", "appendAll", "parallelCollectionIsEmpty", "isEmpty", "parallelCollectionKeys", "Array", "from", "keys", "parallelCollectionToSequentialCollection", "sequentialCollectionMake", "x", "SequentialCollectionTypeId", "Symbol", "for", "sequentialVariance", "_R", "SequentialImpl", "constructor", "sequentialCollectionCombine", "empty", "a", "sequentialCollectionKeys", "self", "Array", "from", "keys", "map", "sequentialCollectionToChunk", "OP_DIE", "OP_EMPTY", "OP_FAIL", "OP_INTERRUPT", "OP_PARALLEL", "OP_SEQUENTIAL", "CauseSymbolKey", "CauseTypeId", "Symbol", "for", "variance", "_E", "_", "proto", "symbol", "pipe", "hash", "combine", "flattenCause", "cached", "that", "isCause", "causeEquals", "pipeArguments", "arguments", "toJSON", "_tag", "_id", "defect", "fiberId", "failure", "error", "left", "right", "toString", "pretty", "NodeInspectSymbol", "empty", "o", "Object", "create", "OP_EMPTY", "fail", "OP_FAIL", "die", "OP_DIE", "interrupt", "OP_INTERRUPT", "parallel", "OP_PARALLEL", "sequential", "OP_SEQUENTIAL", "u", "hasProperty", "isDieType", "self", "_tag", "OP_DIE", "isEmpty", "self", "_tag", "OP_EMPTY", "reduce", "acc", "cause", "some", "OP_DIE", "OP_FAIL", "OP_INTERRUPT", "none", "isInterrupted", "self", "isSome", "interruptOption", "isInterruptedOnly", "reduceWithContext", "undefined", "IsInterruptedOnlyCauseReducer", "failures", "reverse", "reduce", "empty", "list", "cause", "_tag", "OP_FAIL", "some", "pipe", "prepend", "error", "none", "defects", "OP_DIE", "defect", "interruptors", "set", "OP_INTERRUPT", "add", "fiberId", "failureOption", "find", "failureOrCause", "option", "right", "left", "value", "interruptOption", "self", "find", "cause", "_tag", "OP_INTERRUPT", "some", "fiberId", "none", "keepDefects", "match", "onEmpty", "onFail", "onDie", "defect", "die", "onInterrupt", "onSequential", "left", "right", "isSome", "sequential", "value", "isNone", "onParallel", "parallel", "keepDefectsAndElectFailures", "failure", "stripFailures", "self", "match", "onEmpty", "empty", "onFail", "onDie", "defect", "die", "onInterrupt", "fiberId", "interrupt", "onSequential", "sequential", "onParallel", "parallel", "electFailures", "failure", "left", "right", "flatMap", "dual", "self", "f", "match", "onEmpty", "empty", "onFail", "error", "onDie", "defect", "die", "onInterrupt", "fiberId", "interrupt", "onSequential", "left", "right", "sequential", "onParallel", "parallel", "flatten", "identity", "causeEquals", "left", "right", "leftStack", "of", "rightStack", "isNonEmpty", "leftParallel", "leftSequential", "pipe", "headNonEmpty", "reduce", "empty", "parallel", "sequential", "cause", "par", "seq", "evaluateCause", "some", "union", "appendAll", "rightParallel", "rightSequential", "equals", "flattenCause", "flattenCauseLoop", "causes", "flattened", "updated", "size", "prepend", "isEmpty", "reverse", "Error", "getBugErrorMessage", "find", "dual", "self", "pf", "stack", "length", "item", "pop", "option", "_tag", "OP_SEQUENTIAL", "OP_PARALLEL", "push", "none", "evaluateCause", "self", "cause", "stack", "_parallel", "empty", "_sequential", "undefined", "_tag", "OP_EMPTY", "length", "pop", "OP_FAIL", "add", "make", "error", "OP_DIE", "defect", "OP_INTERRUPT", "fiberId", "OP_SEQUENTIAL", "left", "right", "sequential", "OP_PARALLEL", "parallel", "prepend", "push", "Error", "getBugErrorMessage", "IsInterruptedOnlyCauseReducer", "emptyCase", "constTrue", "failCase", "constFalse", "dieCase", "interruptCase", "sequentialCase", "_", "left", "right", "parallelCase", "OP_SEQUENTIAL_CASE", "OP_PARALLEL_CASE", "match", "dual", "self", "onDie", "onEmpty", "onFail", "onInterrupt", "onParallel", "onSequential", "reduceWithContext", "emptyCase", "failCase", "_", "error", "dieCase", "defect", "interruptCase", "fiberId", "sequentialCase", "left", "right", "parallelCase", "reduce", "zero", "pf", "accumulator", "cause", "causes", "undefined", "option", "isSome", "value", "_tag", "OP_SEQUENTIAL", "push", "OP_PARALLEL", "length", "pop", "context", "reducer", "input", "output", "OP_EMPTY", "OP_FAIL", "OP_DIE", "OP_INTERRUPT", "either", "Error", "pretty", "options", "isInterruptedOnly", "prettyErrors", "map", "e", "renderErrorCause", "stack", "join", "prefix", "lines", "split", "i", "len", "PrettyError", "globalThis", "span", "constructor", "originalError", "originalErrorIsObject", "prevLimit", "stackTraceLimit", "prettyErrorMessage", "message", "name", "spanSymbol", "Object", "keys", "forEach", "key", "prettyErrorStack", "u", "hasProperty", "isFunction", "prototype", "toString", "Array", "JSON", "stringify", "locationRegex", "spanToTrace", "globalValue", "WeakMap", "out", "startsWith", "slice", "includes", "replace", "current", "stackFn", "get", "locationMatch", "location", "getOrUndefined", "parent", "Symbol", "for", "unknownError", "l", "r", "OP_STATE_PENDING", "OP_STATE_DONE", "DeferredSymbolKey", "DeferredTypeId", "Symbol", "for", "deferredVariance", "_E", "_", "_A", "pending", "joiners", "_tag", "OP_STATE_PENDING", "done", "effect", "OP_STATE_DONE", "SingleShotGen", "self", "called", "constructor", "next", "a", "value", "done", "return", "throw", "e", "Symbol", "iterator", "TracerTypeId", "Symbol", "for", "make", "options", "tracerTag", "Context", "GenericTag", "spanTag", "randomHexString", "characters", "charactersLength", "length", "result", "i", "charAt", "Math", "floor", "random", "NativeSpan", "name", "parent", "context", "links", "startTime", "kind", "_tag", "spanId", "traceId", "sampled", "status", "attributes", "events", "constructor", "Map", "value", "end", "endTime", "exit", "attribute", "key", "set", "event", "push", "nativeTracer", "span", "f", "addSpanStackTrace", "options", "captureStackTrace", "undefined", "limit", "Error", "stackTraceLimit", "traceError", "cache", "stack", "split", "trim", "EffectErrorSymbolKey", "EffectErrorTypeId", "Symbol", "for", "isEffectError", "u", "hasProperty", "makeEffectError", "cause", "_tag", "blocked", "blockedRequests", "_continue", "effect", "EffectPrimitive", "effect_instruction_i0", "effect_instruction_i1", "runRequestBlock", "EffectTypeId", "RevertFlags", "patch", "op", "_op", "OP_REVERT_FLAGS", "constructor", "undefined", "effect_instruction_i2", "trace", "effectVariance", "symbol", "that", "cached", "random", "pipe", "pipeArguments", "arguments", "toJSON", "_id", "toString", "format", "NodeInspectSymbol", "iterator", "SingleShotGen", "YieldWrap", "EffectPrimitiveFailure", "exitIsExit", "equals", "string", "combine", "hash", "EffectPrimitiveSuccess", "value", "isEffect", "withFiberRuntime", "withRuntime", "OP_WITH_RUNTIME", "acquireUseRelease", "dual", "acquire", "use", "release", "uninterruptibleMask", "restore", "flatMap", "a", "exit", "suspend", "matchCauseEffect", "onFailure", "OP_FAILURE", "failCause", "parallel", "OP_SUCCESS", "onSuccess", "as", "self", "succeed", "asVoid", "custom", "wrapper", "OP_COMMIT", "length", "commit", "Error", "getBugErrorMessage", "unsafeAsync", "register", "blockingOn", "none", "OP_ASYNC", "cancelerRef", "resume", "onInterrupt", "_", "async", "backingResume", "pendingEffect", "proxyResume", "controllerRef", "AbortController", "internalCall", "signal", "abort", "void_", "catchAllCause", "f", "OP_ON_FAILURE", "catchAll", "matchEffect", "catchIf", "predicate", "either", "failureOrCause", "left", "right", "catchSome", "pf", "getOrElse", "checkInterruptible", "status", "interruption", "runtimeFlags", "spanSymbol", "originalSymbol", "capture", "obj", "span", "isSome", "Proxy", "has", "target", "p", "spanSymbol", "originalSymbol", "get", "value", "die", "defect", "isObject", "withFiberRuntime", "fiber", "failCause", "currentSpanFromFiber", "dieMessage", "message", "failCauseSync", "RuntimeException", "dieSync", "evaluate", "flatMap", "sync", "either", "self", "matchEffect", "onFailure", "e", "succeed", "left", "onSuccess", "a", "right", "exit", "matchCause", "exitFailCause", "exitSucceed", "fail", "error", "failSync", "cause", "effect", "EffectPrimitiveFailure", "OP_FAILURE", "effect_instruction_i0", "fiberId", "state", "id", "fiberIdWith", "f", "dual", "EffectPrimitive", "OP_ON_SUCCESS", "effect_instruction_i1", "andThen", "b", "isEffect", "isPromiseLike", "async", "resume", "then", "UnknownException", "step", "flatten", "identity", "flip", "options", "matchCauseEffect", "OP_ON_SUCCESS_AND_FAILURE", "effect_instruction_i2", "defects", "length", "electFailures", "failures", "unsafeHead", "forEachSequential", "suspend", "arr", "fromIterable", "ret", "allocate", "i", "as", "whileLoop", "while", "body", "forEachSequentialDiscard", "if_", "args", "onTrue", "onFalse", "interrupt", "interruptWith", "interruptible", "OP_UPDATE_RUNTIME_FLAGS", "enable", "Interruption", "interruptibleMask", "custom", "oldFlags", "interruption", "internalCall", "uninterruptible", "intoDeferred", "deferred", "uninterruptibleMask", "restore", "deferredDone", "map", "mapBoth", "mapError", "failureOrCause", "_tag", "onError", "cleanup", "onExit", "exitIsSuccess", "void_", "cause1", "result", "cause2", "sequential", "success", "zipRight", "onInterrupt", "exitMatch", "isInterruptedOnly", "asVoid", "interruptors", "orElse", "that", "attemptOrElse", "orDie", "orDieWith", "partitionMap", "elements", "reduceRight", "lefts", "rights", "current", "empty", "runtimeFlags", "_", "status", "EffectPrimitiveSuccess", "OP_SUCCESS", "OP_SYNC", "tap", "transplant", "scopeOverride", "getFiberRef", "currentForkScopeOverride", "scope", "pipe", "getOrElse", "fiberRefLocally", "some", "getOrThrow", "keepDefectsAndElectFailures", "disable", "updateRuntimeFlags", "patch", "effect", "EffectPrimitive", "OP_UPDATE_RUNTIME_FLAGS", "effect_instruction_i0", "effect_instruction_i1", "whenEffect", "dual", "self", "condition", "flatMap", "b", "pipe", "map", "some", "succeed", "none", "whileLoop", "options", "OP_WHILE", "while", "body", "effect_instruction_i2", "step", "withConcurrency", "concurrency", "fiberRefLocally", "currentConcurrency", "withRequestBatching", "requestBatching", "currentRequestBatching", "withRuntimeFlags", "update", "withTracerEnabled", "enabled", "currentTracerEnabled", "withTracerTiming", "currentTracerTimingEnabled", "yieldNow", "OP_YIELD", "priority", "withSchedulingPriority", "zip", "that", "a", "zipLeft", "dual", "self", "that", "flatMap", "a", "as", "zipRight", "zipWith", "f", "map", "b", "never", "async", "interval", "setInterval", "sync", "clearInterval", "interruptFiber", "fiberId", "pipe", "interruptAsFiber", "interruptAsFork", "await", "logLevelAll", "_tag", "syslog", "label", "ordinal", "Number", "MIN_SAFE_INTEGER", "pipeArguments", "arguments", "logLevelFatal", "logLevelError", "logLevelWarning", "logLevelInfo", "logLevelDebug", "logLevelTrace", "logLevelNone", "MAX_SAFE_INTEGER", "allLogLevels", "FiberRefSymbolKey", "FiberRefTypeId", "Symbol", "for", "fiberRefVariance", "_A", "_", "fiberRefGet", "fiberRefModify", "fiberRefGetWith", "dual", "self", "f", "flatMap", "fiberRefGet", "fiberRefSet", "value", "fiberRefModify", "fiberRefModify", "dual", "self", "f", "withFiberRuntime", "state", "b", "a", "getFiberRef", "setFiberRef", "succeed", "RequestResolverSymbolKey", "RequestResolverTypeId", "Symbol", "for", "requestResolverVariance", "_A", "_", "_R", "RequestResolverImpl", "runAll", "target", "constructor", "symbol", "cached", "hash", "random", "that", "isRequestResolver", "equals", "identified", "ids", "fromIterable", "pipe", "pipeArguments", "arguments", "u", "hasProperty", "fiberRefLocally", "dual", "use", "self", "value", "acquireUseRelease", "zipLeft", "fiberRefGet", "fiberRefSet", "oldValue", "fiberRefLocallyWith", "f", "fiberRefGetWith", "a", "fiberRefUnsafeMake", "initial", "options", "fiberRefUnsafeMakePatch", "differ", "update", "fork", "identity", "join", "fiberRefUnsafeMakeHashSet", "hashSet", "empty", "fiberRefUnsafeMakeReadonlyArray", "readonlyArray", "fiberRefUnsafeMakeContext", "environment", "FiberRefTypeId", "fiberRefVariance", "diff", "newValue", "combine", "first", "second", "patch", "_", "n", "pipe", "pipeArguments", "arguments", "fiberRefUnsafeMakeRuntimeFlags", "currentContext", "globalValue", "Symbol", "for", "currentSchedulingPriority", "currentMaxOpsBeforeYield", "currentLogAnnotations", "currentLogLevel", "logLevelInfo", "currentLogSpan", "withSchedulingPriority", "scheduler", "withMaxOpsBeforeYield", "currentConcurrency", "currentRequestBatching", "currentUnhandledErrorLogLevel", "some", "logLevelDebug", "withUnhandledErrorLogLevel", "level", "currentMetricLabels", "metricLabels", "currentForkScopeOverride", "none", "parent", "currentInterruptedCause", "currentTracerEnabled", "currentTracerTimingEnabled", "currentTracerSpanAnnotations", "currentTracerSpanLinks", "ScopeTypeId", "CloseableScopeTypeId", "scopeAddFinalizer", "finalizer", "addFinalizer", "asVoid", "scopeAddFinalizerExit", "scopeClose", "exit", "close", "scopeFork", "strategy", "YieldableError", "globalThis", "Error", "commit", "fail", "toJSON", "NodeInspectSymbol", "toString", "prototype", "stack", "split", "slice", "join", "pretty", "renderErrorCause", "Object", "assign", "StructuralCommitPrototype", "makeException", "proto", "tag", "Base", "_tag", "name", "RuntimeExceptionTypeId", "Symbol", "for", "RuntimeException", "InterruptedExceptionTypeId", "Symbol", "for", "InterruptedException", "makeException", "isInterruptedException", "u", "hasProperty", "IllegalArgumentExceptionTypeId", "IllegalArgumentException", "NoSuchElementExceptionTypeId", "Symbol", "for", "NoSuchElementException", "makeException", "isNoSuchElementException", "u", "hasProperty", "InvalidPubSubCapacityExceptionTypeId", "InvalidPubSubCapacityException", "ExceededCapacityExceptionTypeId", "ExceededCapacityException", "TimeoutExceptionTypeId", "Symbol", "for", "TimeoutException", "makeException", "timeoutExceptionFromDuration", "duration", "format", "UnknownExceptionTypeId", "Symbol", "for", "UnknownException", "YieldableError", "cause", "_tag", "error", "constructor", "message", "Object", "assign", "prototype", "name", "exitIsExit", "u", "isEffect", "_tag", "exitIsFailure", "self", "exitIsSuccess", "exitAs", "dual", "self", "value", "_tag", "OP_FAILURE", "exitFailCause", "effect_instruction_i0", "OP_SUCCESS", "exitSucceed", "exitAsVoid", "exitCollectAll", "exits", "options", "exitCollectAllInternal", "parallel", "sequential", "exitDie", "defect", "exitFailCause", "die", "exitFail", "error", "exitFailCause", "fail", "cause", "effect", "EffectPrimitiveFailure", "OP_FAILURE", "effect_instruction_i0", "exitFlatMap", "dual", "self", "f", "_tag", "OP_SUCCESS", "exitFlatten", "self", "pipe", "exitFlatMap", "identity", "exitInterrupt", "fiberId", "exitFailCause", "interrupt", "exitMap", "dual", "self", "f", "_tag", "OP_FAILURE", "effect_instruction_i0", "OP_SUCCESS", "exitSucceed", "exitMatch", "dual", "self", "onFailure", "onSuccess", "_tag", "OP_FAILURE", "effect_instruction_i0", "OP_SUCCESS", "exitMatchEffect", "exitSucceed", "value", "effect", "EffectPrimitiveSuccess", "exitVoid", "exitZipWith", "dual", "self", "that", "onFailure", "onSuccess", "_tag", "OP_FAILURE", "OP_SUCCESS", "exitFailCause", "effect_instruction_i0", "exitSucceed", "exitCollectAllInternal", "exits", "combineCauses", "list", "fromIterable", "isNonEmpty", "none", "pipe", "tailNonEmpty", "reduce", "headNonEmpty", "exitMap", "of", "accumulator", "current", "value", "prepend", "reverse", "chunk", "toReadonlyArray", "some", "deferredUnsafeMake", "fiberId", "DeferredTypeId", "deferredVariance", "state", "make", "pending", "blockingOn", "pipeArguments", "arguments", "deferredMake", "flatMap", "id", "deferredMakeAs", "sync", "deferredAwait", "async", "resume", "get", "OP_STATE_DONE", "effect", "OP_STATE_PENDING", "joiners", "push", "deferredInterruptJoiner", "deferredComplete", "intoDeferred", "deferredCompleteWith", "MutableRef", "set", "done", "i", "len", "length", "deferredDone", "exit", "deferredFailCause", "dual", "self", "cause", "deferredCompleteWith", "failCause", "deferredInterrupt", "self", "flatMap", "fiberId", "deferredCompleteWith", "interruptWith", "deferredSucceed", "dual", "self", "value", "deferredCompleteWith", "succeed", "deferredUnsafeDone", "self", "effect", "state", "get", "_tag", "OP_STATE_PENDING", "MutableRef", "set", "done", "i", "len", "joiners", "length", "deferredInterruptJoiner", "joiner", "sync", "index", "indexOf", "splice", "constContext", "fiberRefGet", "currentContext", "context", "contextWithEffect", "f", "flatMap", "context", "provideContext", "dual", "self", "fiberRefLocally", "currentContext", "provideSomeContext", "fiberRefLocallyWith", "parent", "merge", "mapInputContext", "currentSpanFromFiber", "fiber", "span", "getFiberRef", "unsafeMap", "get", "spanTag", "key", "undefined", "_tag", "some", "none", "NoopSpanProto", "spanId", "traceId", "name", "sampled", "Option", "Context", "empty", "status", "startTime", "BigInt", "endTime", "exit", "exitVoid", "attributes", "Map", "links", "kind", "attribute", "event", "end", "noopSpan", "Object", "create", "_await", "deferredAwait", "done", "deferredDone", "interrupt", "deferredInterrupt", "unsafeMake", "deferredUnsafeMake", "isFailure", "exitIsFailure", "flatten", "exitFlatten", "succeed", "exitSucceed", "TypeId", "Symbol", "for", "MutableHashMapProto", "iterator", "MutableHashMapIterator", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "self", "referentialIterator", "bucketIterator", "constructor", "referential", "next", "undefined", "result", "done", "BucketIterator", "buckets", "backing", "currentBucket", "value", "empty", "Object", "create", "Map", "bucketsSize", "get", "dual", "self", "key", "isEqual", "referential", "has", "some", "none", "hash", "symbol", "bucket", "buckets", "undefined", "getFromBucket", "remove", "i", "len", "length", "value", "splice", "bucketsSize", "isSome", "set", "removeFromBucket", "push", "remove", "dual", "self", "key", "isEqual", "referential", "delete", "hash", "symbol", "bucket", "buckets", "get", "undefined", "removeFromBucket", "length", "size", "self", "referential", "bucketsSize", "TypeId", "Symbol", "for", "MutableListProto", "iterator", "done", "head", "next", "return", "value", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "makeNode", "removed", "prev", "undefined", "empty", "list", "Object", "create", "tail", "_length", "isEmpty", "self", "length", "_length", "append", "Dual", "dual", "self", "value", "node", "makeNode", "head", "undefined", "tail", "next", "prev", "_length", "shift", "remove", "remove", "self", "node", "removed", "prev", "undefined", "next", "tail", "head", "_length", "TypeId", "Symbol", "for", "EmptyMutableQueue", "MutableQueueProto", "iterator", "Array", "from", "queue", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "make", "capacity", "Object", "create", "empty", "unbounded", "make", "undefined", "offer", "Dual", "dual", "self", "value", "queueLength", "length", "queue", "capacity", "undefined", "MutableList", "append", "poll", "Dual", "dual", "self", "def", "isEmpty", "queue", "shift", "ClockSymbolKey", "ClockTypeId", "Symbol", "for", "clockTag", "Context", "GenericTag", "MAX_TIMER_MILLIS", "globalClockScheduler", "unsafeSchedule", "task", "duration", "millis", "toMillis", "constFalse", "completed", "handle", "setTimeout", "clearTimeout", "performanceNowNanos", "bigint1e6", "BigInt", "performance", "Date", "now", "timeOrigin", "Math", "round", "origin", "processOrPerformanceNow", "processHrtime", "process", "hrtime", "bigint", "undefined", "ClockImpl", "unsafeCurrentTimeMillis", "unsafeCurrentTimeNanos", "currentTimeMillis", "core", "sync", "currentTimeNanos", "scheduler", "succeed", "sleep", "async", "resume", "canceler", "void", "asVoid", "make", "Order", "number", "escape", "string", "replace", "OP_AND", "OP_OR", "OP_INVALID_DATA", "OP_MISSING_DATA", "OP_SOURCE_UNAVAILABLE", "OP_UNSUPPORTED", "ConfigErrorSymbolKey", "ConfigErrorTypeId", "Symbol", "for", "proto", "_tag", "And", "self", "that", "error", "Object", "create", "_op", "OP_AND", "left", "right", "defineProperty", "enumerable", "value", "Or", "OP_OR", "InvalidData", "path", "message", "options", "pathDelim", "OP_INVALID_DATA", "pipe", "join", "MissingData", "OP_MISSING_DATA", "SourceUnavailable", "cause", "OP_SOURCE_UNAVAILABLE", "Unsupported", "OP_UNSUPPORTED", "isConfigError", "u", "hasProperty", "isAnd", "isOr", "isInvalidData", "isMissingData", "isSourceUnavailable", "isUnsupported", "prefixed", "dual", "prefix", "IsMissingDataOnlyReducer", "andCase", "_", "orCase", "invalidDataCase", "constFalse", "missingDataCase", "constTrue", "sourceUnavailableCase", "unsupportedCase", "reduceWithContext", "context", "reducer", "input", "output", "length", "pop", "push", "accumulator", "either", "Error", "isMissingDataOnly", "empty", "_tag", "andThen", "dual", "self", "that", "first", "second", "mapName", "f", "nested", "name", "unnested", "patch", "path", "input", "of", "output", "isCons", "head", "tail", "cons", "map", "prepend", "containsName", "pipe", "contains", "tailNonEmpty", "left", "MissingData", "right", "OP_CONSTANT", "OP_FAIL", "OP_FALLBACK", "OP_DESCRIBED", "OP_LAZY", "OP_MAP_OR_FAIL", "OP_NESTED", "OP_PRIMITIVE", "OP_SEQUENCE", "OP_HASHMAP", "OP_ZIP_WITH", "lowerCase", "str", "toLowerCase", "upperCase", "toUpperCase", "replace", "input", "re", "value", "RegExp", "reduce", "DEFAULT_SPLIT_REGEXP", "DEFAULT_STRIP_REGEXP", "noCase", "options", "delimiter", "splitRegexp", "stripRegexp", "transform", "result", "start", "end", "length", "charAt", "slice", "split", "map", "join", "constantCase", "input", "options", "noCase", "delimiter", "transform", "upperCase", "kebabCase", "snakeCase", "concat", "l", "r", "ConfigProviderSymbolKey", "ConfigProviderTypeId", "Symbol", "for", "configProviderTag", "Context", "GenericTag", "FlatConfigProviderSymbolKey", "FlatConfigProviderTypeId", "make", "options", "pipe", "pipeArguments", "arguments", "makeFlat", "patch", "load", "path", "config", "split", "enumerateChildren", "fromFlat", "flat", "flatMap", "fromFlatLoop", "empty", "chunk", "match", "head", "onNone", "fail", "MissingData", "onSome", "succeed", "flattened", "fromEnv", "pathDelim", "seqDelim", "Object", "assign", "makePathString", "join", "unmakePathString", "pathString", "getEnv", "process", "env", "primitive", "current", "valueOpt", "some", "none", "mapError", "value", "parsePrimitive", "sync", "keys", "keyPaths", "map", "toUpperCase", "filteredKeyPaths", "filter", "keyPath", "i", "length", "pathComponent", "unsafeGet", "currentElement", "undefined", "slice", "fromIterable", "fromMap", "mapWithIndexSplit", "splitIndexInKeys", "str", "has", "get", "extend", "leftDef", "rightDef", "left", "right", "leftPad", "unfold", "index", "rightPad", "leftExtension", "rightExtension", "appendConfigPath", "op", "_tag", "out", "push", "name", "prefix", "OP_CONSTANT", "of", "OP_DESCRIBED", "suspend", "OP_FAIL", "message", "OP_FALLBACK", "first", "catchAll", "error1", "condition", "second", "error2", "Or", "OP_LAZY", "OP_MAP_OR_FAIL", "original", "forEachSequential", "a", "mapOrFail", "prefixed", "OP_NESTED", "OP_PRIMITIVE", "values", "last", "getOrElse", "description", "OP_SEQUENCE", "patchedPrefix", "indicesFrom", "indices", "append", "chunkChunk", "flatten", "OP_HASHMAP", "key", "valueConfig", "matrix", "transpose", "zip", "OP_ZIP_WITH", "either", "isLeft", "And", "isRight", "fromFlatLoopFail", "lefts", "rights", "Error", "mapInputPath", "dual", "self", "f", "mapInputPathFlat", "mapName", "nested", "unnested", "orElse", "that", "orElseFlat", "union", "constantCase", "kebabCase", "lowerCase", "snakeCase", "upperCase", "within", "unnest", "reduce", "provider", "nest", "reduceRight", "splitPathString", "text", "delim", "RegExp", "escape", "delimiter", "parse", "mapBoth", "onFailure", "onSuccess", "char", "trim", "array", "column", "row", "quotedIndices", "parseQuotedIndex", "sort", "Order", "merge", "STR_INDEX_REGEX", "QUOTED_INDEX_REGEX", "matchedIndex", "parseInteger", "newMap", "Map", "keyWithIndex", "splitIndexFrom", "set", "matchedString", "optionalString", "optionalIndex", "all", "parsedIndex", "Number", "parseInt", "isNaN", "keyName", "keyIndex", "fromJson", "json", "hiddenDelimiter", "indexedEntries", "getIndexedEntries", "configPathToString", "output", "component", "nextComponent", "loopAny", "String", "isArray", "loopArray", "loopObject", "onEmpty", "onNonEmpty", "entries", "newPath", "result", "isEmptyReadonlyArray", "TypeId", "Symbol", "for", "consoleTag", "Context", "GenericTag", "defaultConsole", "assert", "condition", "args", "sync", "console", "clear", "core", "count", "label", "countReset", "debug", "dir", "item", "options", "dirxml", "error", "group", "collapsed", "groupCollapsed", "groupEnd", "info", "log", "table", "tabularData", "properties", "time", "timeEnd", "timeLog", "trace", "warn", "unsafe", "RandomSymbolKey", "RandomTypeId", "Symbol", "for", "randomTag", "Context", "GenericTag", "RandomImpl", "seed", "PRNG", "constructor", "PCGRandom", "next", "sync", "number", "nextBoolean", "map", "n", "nextInt", "integer", "Number", "MAX_SAFE_INTEGER", "nextRange", "min", "max", "nextIntBetween", "shuffle", "elements", "shuffleWith", "nextIntBounded", "suspend", "pipe", "Array", "from", "flatMap", "buffer", "numbers", "i", "length", "push", "forEachSequentialDiscard", "k", "swap", "as", "fromIterable", "index1", "index2", "tmp", "make", "hash", "liveServices", "pipe", "Context", "empty", "add", "clockTag", "clock", "make", "consoleTag", "defaultConsole", "randomTag", "random", "Math", "configProviderTag", "configProvider", "fromEnv", "tracerTag", "nativeTracer", "currentServices", "globalValue", "Symbol", "for", "fiberRefUnsafeMakeContext", "sleep", "duration", "decodedDuration", "decode", "clockWith", "f", "fiberRefGetWith", "services", "get", "currentTimeMillis", "currentTimeNanos", "withClock", "dual", "effect", "value", "fiberRefLocallyWith", "withConfigProvider", "configProviderWith", "config", "_", "load", "randomWith", "f", "fiberRefGetWith", "currentServices", "services", "get", "randomTag", "withRandom", "dual", "effect", "value", "fiberRefLocallyWith", "add", "tracerWith", "f", "fiberRefGetWith", "currentServices", "services", "get", "tracerTag", "withTracer", "dual", "effect", "value", "fiberRefLocallyWith", "add", "sleep", "currentTimeMillis", "currentTimeNanos", "clockWith", "Clock", "clockTag", "unsafeMake", "fiberRefLocals", "FiberRefsImpl", "empty", "Map", "FiberRefsSym", "Symbol", "for", "locals", "constructor", "pipe", "pipeArguments", "arguments", "findAncestor", "_ref", "_parentStack", "_childStack", "_childModified", "ref", "parentStack", "childStack", "childModified", "ret", "undefined", "isNonEmptyReadonlyArray", "parentFiberId", "headNonEmpty", "parentAncestors", "tailNonEmpty", "childFiberId", "childRefValue", "childAncestors", "startTimeMillis", "id", "initial", "joinAs", "dual", "self", "fiberId", "that", "parentFiberRefs", "forEach", "fiberRef", "childValue", "symbol", "has", "equals", "set", "join", "get", "ancestor", "wasModified", "patch", "diff", "oldValue", "newValue", "newStack", "slice", "forkAs", "childId", "map", "unsafeForkAs", "stack", "fork", "fiberRefs", "fromIterable", "keys", "setAll", "forEachSequentialDiscard", "fiberRefSet", "getOrDefault", "delete_", "delete", "none", "some", "getOrElse", "updateAs", "value", "size", "unsafeUpdateAs", "oldStack", "currentId", "currentValue", "updateManyAs", "entries", "values", "length", "get", "getOrDefault", "joinAs", "setAll", "updateManyAs", "empty", "Error", "None", "Order", "greaterThan", "lessThan", "All", "logLevelAll", "Fatal", "logLevelFatal", "Error", "logLevelError", "Warning", "logLevelWarning", "Info", "logLevelInfo", "Debug", "logLevelDebug", "Trace", "logLevelTrace", "None", "logLevelNone", "allLevels", "allLogLevels", "locally", "dual", "use", "self", "fiberRefLocally", "currentLogLevel", "Order", "pipe", "order", "mapInput", "level", "ordinal", "lessThan", "lessThanEqual", "lessThanOrEqualTo", "greaterThan", "greaterThanEqual", "greaterThanOrEqualTo", "fromLiteral", "literal", "make", "label", "startTime", "render", "now", "self", "replace", "make", "render", "TypeId", "Symbol", "for", "Proto", "TypeId", "pipe", "pipeArguments", "arguments", "RefTypeId", "Symbol", "for", "refVariance", "_A", "_", "RefImpl", "ref", "TypeId", "constructor", "get", "sync", "modify", "f", "current", "b", "a", "MutableRef", "set", "pipe", "pipeArguments", "arguments", "unsafeMake", "value", "make", "self", "dual", "getAndSet", "modify", "dual", "self", "f", "update", "dual", "self", "f", "modify", "a", "make", "get", "getAndSet", "modify", "update", "tracerWith", "OP_EMPTY", "OP_ADD", "OP_REMOVE", "OP_UPDATE", "OP_AND_THEN", "empty", "_tag", "diff", "oldValue", "newValue", "missingLocals", "Map", "locals", "patch", "fiberRef", "pairs", "entries", "headNonEmpty", "old", "get", "undefined", "equals", "combine", "value", "delete", "dual", "self", "that", "first", "second", "fiberId", "fiberRefs", "patches", "of", "isNonEmptyReadonlyArray", "head", "tail", "tailNonEmpty", "updateAs", "delete_", "getOrDefault", "prepend", "MetricLabelSymbolKey", "MetricLabelTypeId", "Symbol", "for", "MetricLabelImpl", "key", "value", "_hash", "constructor", "string", "symbol", "that", "isMetricLabel", "pipe", "pipeArguments", "arguments", "make", "u", "hasProperty", "annotateLogs", "dual", "args", "isEffect", "arguments", "fiberRefLocallyWith", "currentLogAnnotations", "set", "annotations", "Object", "entries", "reduce", "acc", "key", "value", "asSome", "self", "map", "some", "asSomeError", "mapError", "try_", "arg", "evaluate", "onFailure", "undefined", "try", "catch", "sync", "error", "makeEffectError", "fail", "UnknownException", "_catch", "tag", "options", "catchAll", "e", "hasProperty", "failure", "catchAllDefect", "f", "catchAllCause", "cause", "option", "find", "_", "isDieType", "none", "_tag", "failCause", "defect", "catchSomeCause", "matchCauseEffect", "onSuccess", "succeed", "catchSomeDefect", "pf", "optionEffect", "catchTag", "k", "catchIf", "isTagged", "catchTags", "cases", "keys", "isString", "includes", "matchCause", "identity", "empty", "clockWith", "clock", "delay", "duration", "zipRight", "sleep", "descriptorWith", "withFiberRuntime", "state", "status", "id", "interruptors", "getFiberRef", "currentInterruptedCause", "allowInterrupt", "descriptor", "size", "interrupt", "void", "diffFiberRefs", "summarized", "fiberRefs", "diff", "diffFiberRefsAndRuntimeFlags", "zip", "runtimeFlags", "refs", "flags", "refsNew", "flagsNew", "Do", "core", "bind", "doNotation", "flatMap", "bindTo", "let_", "dropUntil", "elements", "predicate", "suspend", "iterator", "Symbol", "builder", "next", "dropping", "i", "done", "a", "index", "bool", "push", "dropWhile", "d", "b", "contextWith", "context", "eventually", "orElse", "yieldNow", "filterMap", "forEachSequential", "filterOrDie", "orDieWith", "filterOrElse", "dieSync", "filterOrDieMessage", "message", "dieMessage", "liftPredicate", "orFailWith", "filterOrFail", "NoSuchElementException", "failSync", "findFirst", "findLoop", "result", "firstSuccessOf", "effects", "list", "fromIterable", "isNonEmpty", "IllegalArgumentException", "pipe", "tailNonEmpty", "headNonEmpty", "left", "right", "flipWith", "flip", "match", "matchEffect", "every", "forAllLoop", "forever", "loop", "gen", "length", "internalCall", "run", "yieldWrapGet", "val", "getFiberRefs", "head", "as", "ignore", "constVoid", "ignoreLogged", "logDebug", "inheritFiberRefs", "childFiberRefs", "updateFiberRefs", "parentFiberId", "parentFiberRefs", "joinAs", "isFailure", "constTrue", "constFalse", "isSuccess", "iterate", "initial", "while", "body", "z2", "logWithLevel", "level", "levelOption", "fromNullable", "len", "msg", "isCause", "sequential", "slice", "fiberState", "log", "logTrace", "Trace", "Debug", "logInfo", "Info", "logWarning", "Warning", "logError", "Error", "logFatal", "Fatal", "withLogSpan", "effect", "label", "currentTimeMillis", "now", "currentLogSpan", "prepend", "make", "logAnnotations", "fiberRefGet", "discard", "loopDiscard", "step", "loopInternal", "cont", "inc", "mapAccum", "zero", "z", "mapErrorCause", "c", "failCauseSync", "memoize", "deferredMake", "deferred", "intoDeferred", "once", "complete", "deferredAwait", "patch", "patchFiberRefs", "updateRuntimeFlags", "merge", "negate", "ref", "asVoid", "whenEffect", "getAndSet", "orElseFail", "orElseSucceed", "parallelErrors", "errors", "failures", "fiberId", "promise", "async", "resolve", "signal", "then", "exitSucceed", "exitDie", "provideService", "service", "contextWithEffect", "env", "provideContext", "add", "provideServiceEffect", "random", "defaultServices", "randomWith", "el", "reduceRight", "reduceWhile", "reduceWhileLoop", "nextState", "repeatN", "n", "repeatNLoop", "sandbox", "setFiberRefs", "setAll", "succeedNone", "Option", "succeedSome", "summary", "start", "end", "tagMetrics", "labelMetrics", "v", "labels", "currentMetricLabels", "old", "union", "takeUntil", "takeWhile", "taking", "tapBoth", "either", "failureOrCause", "tapDefect", "keepDefects", "onNone", "onSome", "tapError", "tapErrorTag", "tapErrorCause", "timed", "timedWith", "currentTimeNanos", "nanos", "tracerWith", "tracer", "tryPromise", "catcher", "tryMap", "tryMapPromise", "unless", "condition", "unlessEffect", "unsandbox", "flatten", "updateService", "mapInputContext", "unsafeGet", "when", "whenFiberRef", "fiberRef", "s", "whenRef", "get", "withMetric", "metric", "serviceFunctionEffect", "getService", "serviceFunction", "serviceFunctions", "Proxy", "_target", "prop", "_receiver", "serviceConstants", "serviceMembers", "functions", "constants", "serviceOption", "getOption", "serviceOptional", "annotateCurrentSpan", "currentSpan", "span", "attribute", "annotateSpans", "currentTracerSpanAnnotations", "currentParentSpan", "spanTag", "unsafeMap", "linkSpans", "attributes", "currentTracerSpanLinks", "append", "bigint0", "BigInt", "unsafeMakeSpan", "fiber", "name", "enabled", "currentTracerEnabled", "noopSpan", "currentContext", "services", "currentServices", "tracerTag", "Clock", "timingEnabled", "currentTracerTimingEnabled", "annotationsFromEnv", "linksFromEnv", "parent", "root", "links", "toReadonlyArray", "unsafeCurrentTimeNanos", "kind", "captureStackTrace", "internalCause", "spanToTrace", "HashMap", "forEach", "makeSpan", "addSpanStackTrace", "spanAnnotations", "spanLinks", "endSpan", "exit", "exitIsFailure", "has", "useSpan", "clockTag", "onExit", "withParentSpan", "withSpan", "dataFirst", "functionWithSpan", "limit", "stackTraceLimit", "cache", "stack", "trim", "split", "join", "opts", "apply", "optionFromOptional", "isNoSuchElementException", "EffectTypeId", "EffectPrototype", "OP_SEQUENTIAL", "OP_PARALLEL", "OP_PARALLEL_N", "sequential", "_tag", "parallel", "parallelN", "parallelism", "isSequential", "self", "isParallel", "sequential", "parallel", "parallelN", "diff", "patch", "FiberStatusSymbolKey", "FiberStatusTypeId", "Symbol", "for", "OP_DONE", "OP_RUNNING", "OP_SUSPENDED", "DoneHash", "Hash", "string", "Done", "_tag", "symbol", "that", "isFiberStatus", "Running", "runtimeFlags", "constructor", "pipe", "hash", "combine", "cached", "Suspended", "blockingOn", "equals", "done", "running", "suspended", "u", "hasProperty", "isDone", "self", "done", "running", "suspended", "isDone", "TypeId", "Symbol", "for", "runSymbol", "isMicro", "u", "MicroCauseTypeId", "microCauseVariance", "_E", "identity", "MicroCauseImpl", "globalThis", "Error", "_tag", "traces", "constructor", "originalError", "causeName", "name", "message", "stack", "messageLines", "split", "length", "slice", "join", "toStringUnknown", "pipe", "pipeArguments", "arguments", "toString", "NodeInspectSymbol", "DieImpl", "MicroCauseImpl", "defect", "constructor", "traces", "causeDie", "InterruptImpl", "causeInterrupt", "exitInterrupt", "Either", "left", "causeInterrupt", "exitSucceed", "right", "exitDie", "defect", "left", "causeDie", "EnvTypeId", "Symbol", "for", "EnvRefTypeId", "EnvProto", "_R", "identity", "pipe", "pipeArguments", "arguments", "envMake", "refs", "self", "Object", "create", "envUnsafeMakeEmpty", "controller", "AbortController", "currentAbortController", "key", "currentAbortSignal", "signal", "currentScheduler", "MicroSchedulerDefault", "envGet", "dual", "ref", "initial", "envSet", "value", "assign", "envMutate", "f", "setImmediate", "globalThis", "f", "setTimeout", "MicroSchedulerDefault", "tasks", "running", "scheduleTask", "task", "_priority", "push", "afterScheduled", "runTasks", "i", "len", "length", "shouldYield", "_env", "flush", "EnvRefProto", "EnvRefTypeId", "envRefMake", "key", "initial", "globalValue", "self", "Object", "create", "currentAbortController", "undefined", "currentAbortSignal", "currentContext", "empty", "currentConcurrency", "currentMaxDepthBeforeYield", "currentInterruptible", "currentScheduler", "MicroProto", "EffectPrototype", "_op", "TypeId", "_A", "identity", "_E", "_R", "Symbol", "iterator", "SingleShotGen", "YieldWrap", "microDepthState", "globalValue", "depth", "maxDepthBeforeYield", "currentMaxDepthBeforeYield", "initial", "unsafeMake", "run", "self", "Object", "create", "runSymbol", "unsafeMakeOptions", "checkAbort", "execute", "env", "onExit", "refs", "currentInterruptible", "key", "currentAbortSignal", "aborted", "exitInterrupt", "envGet", "scheduler", "currentScheduler", "shouldYield", "scheduleTask", "err", "exitDie", "make", "fromExit", "_env", "succeed", "a", "fromExit", "exitSucceed", "sync", "evaluate", "make", "_env", "onExit", "exitSucceed", "suspend", "evaluate", "make", "env", "onExit", "runSymbol", "void_", "succeed", "async", "register", "make", "env", "onExit", "resumed", "controller", "length", "AbortController", "undefined", "signal", "envGet", "currentAbortSignal", "cleanup", "onAbort", "resume", "uninterruptible", "andThen", "fromExit", "exitInterrupt", "abort", "effect", "removeEventListener", "runSymbol", "addEventListener", "map", "dual", "self", "f", "make", "env", "onExit", "runSymbol", "exit", "_tag", "exitSucceed", "right", "flatMap", "dual", "self", "f", "make", "env", "onExit", "runSymbol", "exit", "_tag", "right", "andThen", "dual", "self", "f", "make", "env", "onExit", "runSymbol", "exit", "_tag", "envGet", "currentAbortSignal", "aborted", "exitInterrupt", "value", "isMicro", "right", "exitSucceed", "asVoid", "self", "map", "_", "exit", "make", "env", "onExit", "runSymbol", "exitSucceed", "forkSignal", "env", "controller", "AbortController", "parentSignal", "envGet", "currentAbortSignal", "onAbort", "abort", "removeEventListener", "addEventListener", "envWithSignal", "envMutate", "refs", "currentAbortController", "key", "signal", "MicroScopeTypeId", "Symbol", "for", "MicroScopeImpl", "MicroScopeTypeId", "state", "_tag", "finalizers", "Set", "constructor", "unsafeAddFinalizer", "finalizer", "add", "addFinalizer", "suspend", "void_", "exit", "unsafeRemoveFinalizer", "delete", "close", "microExit", "Array", "from", "reverse", "flatMap", "forEach", "exits", "asVoid", "fromExit", "all", "fork", "sync", "newScope", "fin", "_", "uninterruptible", "self", "unsafeMakeOptions", "env", "onExit", "nextEnv", "envMutate", "currentInterruptible", "key", "currentAbortSignal", "AbortController", "signal", "runSymbol", "forEach", "iterable", "f", "options", "make", "env", "onExit", "concurrencyOption", "concurrency", "envGet", "currentConcurrency", "Number", "POSITIVE_INFINITY", "Math", "max", "envWithSignal", "onAbort", "forkSignal", "result", "undefined", "items", "Array", "from", "length", "out", "discard", "index", "inProgress", "doneCount", "pumping", "pump", "currentIndex", "item", "runSymbol", "exit", "_tag", "right", "err", "exitDie", "HandleTypeId", "Symbol", "for", "HandleImpl", "parentSignal", "HandleTypeId", "observers", "Set", "_exit", "undefined", "_controller", "isRoot", "constructor", "controller", "AbortController", "addEventListener", "unsafeInterrupt", "unsafePoll", "abort", "emit", "exit", "removeEventListener", "forEach", "observer", "clear", "addObserver", "add", "removeObserver", "delete", "await", "suspend", "succeed", "async", "resume", "sync", "join", "flatMap", "fromExit", "interrupt", "PriorityBuckets", "buckets", "scheduleTask", "task", "priority", "length", "bucket", "undefined", "index", "push", "splice", "MixedScheduler", "maxNextTickBeforeTimer", "running", "tasks", "constructor", "starveInternal", "depth", "_", "toRun", "i", "starve", "setTimeout", "Promise", "resolve", "then", "shouldYield", "fiber", "currentOpCount", "getFiberRef", "currentMaxOpsBeforeYield", "currentSchedulingPriority", "defaultScheduler", "globalValue", "Symbol", "for", "SyncScheduler", "deferred", "flush", "currentScheduler", "globalValue", "Symbol", "for", "fiberRefUnsafeMake", "defaultScheduler", "withScheduler", "dual", "self", "scheduler", "fiberRefLocally", "currentRequestMap", "globalValue", "Symbol", "for", "fiberRefUnsafeMake", "Map", "match", "concurrency", "sequential", "unbounded", "bounded", "undefined", "fiberRefGetWith", "currentConcurrency", "matchSimple", "concurrent", "OP_INTERRUPT_SIGNAL", "OP_STATEFUL", "OP_RESUME", "OP_YIELD_NOW", "interruptSignal", "cause", "_tag", "stateful", "onFiber", "resume", "effect", "yieldNow", "FiberScopeSymbolKey", "FiberScopeTypeId", "Symbol", "for", "Global", "fiberId", "none", "roots", "Set", "add", "_runtimeFlags", "child", "addObserver", "delete", "Local", "parent", "constructor", "tell", "stateful", "parentFiber", "addChild", "removeChild", "unsafeMake", "fiber", "id", "globalScope", "globalValue", "FiberSymbolKey", "FiberTypeId", "Symbol", "for", "fiberVariance", "_E", "_", "_A", "fiberProto", "pipe", "pipeArguments", "arguments", "RuntimeFiberSymbolKey", "RuntimeFiberTypeId", "_await", "self", "await", "inheritAll", "self", "interruptAsFork", "dual", "self", "fiberId", "join", "zipLeft", "flatten", "await", "inheritAll", "never", "fiberProto", "id", "none", "await", "children", "core", "succeed", "inheritAll", "poll", "Option", "interruptAsFork", "currentFiberURI", "LoggerSymbolKey", "LoggerTypeId", "Symbol", "for", "loggerVariance", "_Message", "_", "_Output", "makeLogger", "log", "pipe", "pipeArguments", "arguments", "mapInput", "dual", "self", "f", "options", "message", "mapInputOptions", "filterLogLevel", "logLevel", "some", "none", "map", "constVoid", "simple", "succeed", "value", "sync", "evaluate", "zip", "that", "zipLeft", "tuple", "zipRight", "stringLogger", "annotations", "cause", "date", "fiberId", "spans", "nowMillis", "getTime", "outputArray", "toISOString", "label", "threadName", "output", "join", "messageArr", "ensure", "i", "length", "stringMessage", "toStringUnknown", "appendQuoted", "_tag", "pretty", "renderErrorCause", "isCons", "first", "span", "render", "size", "key", "filterKeyName", "escapeDoubleQuotes", "str", "replace", "textOnly", "match", "logfmtLogger", "appendQuotedLogfmt", "renderLogSpanLogfmt", "structuredLogger", "now", "annotationsObj", "spansObj", "k", "v", "structuredMessage", "startTime", "timestamp", "isEmpty", "undefined", "u", "String", "jsonLogger", "stringifyCircular", "escapeDoubleQuotesLogfmt", "JSON", "stringify", "isLogger", "withColor", "text", "colors", "out", "withColorNoop", "_colors", "bold", "red", "green", "yellow", "blue", "cyan", "white", "gray", "black", "bgBrightRed", "logLevelColors", "None", "All", "Trace", "Debug", "Info", "Warning", "Error", "Fatal", "logLevelStyle", "defaultDateFormat", "getHours", "toString", "padStart", "getMinutes", "getSeconds", "getMilliseconds", "processStdoutIsTTY", "process", "stdout", "isTTY", "hasWindow", "window", "isWorker", "constructor", "name", "includes", "prettyLogger", "mode_", "mode", "isBrowser", "showColors", "formatDate", "prettyLoggerBrowser", "prettyLoggerTty", "stderr", "processIsBun", "isBun", "color", "context", "message_", "services", "getOrDefault", "currentServices", "console", "get", "consoleTag", "unsafe", "error", "firstLine", "messageIndex", "firstMaybeString", "group", "groupEnd", "firstParams", "push", "groupCollapsed", "MetricBoundariesSymbolKey", "MetricBoundariesTypeId", "Symbol", "for", "MetricBoundariesImpl", "values", "constructor", "_hash", "pipe", "string", "combine", "array", "symbol", "u", "isMetricBoundaries", "equals", "pipeArguments", "arguments", "hasProperty", "fromIterable", "iterable", "appendAll", "of", "Number", "POSITIVE_INFINITY", "dedupe", "exponential", "options", "pipe", "makeBy", "count", "i", "start", "Math", "pow", "factor", "unsafeFromArray", "fromIterable", "MetricKeyTypeSymbolKey", "MetricKeyTypeTypeId", "Symbol", "for", "CounterKeyTypeSymbolKey", "CounterKeyTypeTypeId", "FrequencyKeyTypeSymbolKey", "FrequencyKeyTypeTypeId", "GaugeKeyTypeSymbolKey", "GaugeKeyTypeTypeId", "HistogramKeyTypeSymbolKey", "HistogramKeyTypeTypeId", "SummaryKeyTypeSymbolKey", "SummaryKeyTypeTypeId", "metricKeyTypeVariance", "_In", "_", "_Out", "CounterKeyType", "incremental", "bigint", "constructor", "_hash", "string", "symbol", "that", "isCounterKey", "pipe", "pipeArguments", "arguments", "FrequencyKeyTypeHash", "Hash", "FrequencyKeyType", "preregisteredWords", "isFrequencyKey", "GaugeKeyTypeHash", "GaugeKeyType", "isGaugeKey", "HistogramKeyType", "boundaries", "combine", "hash", "isHistogramKey", "equals", "SummaryKeyType", "maxAge", "maxSize", "error", "quantiles", "array", "isSummaryKey", "counter", "options", "histogram", "boundaries", "HistogramKeyType", "isCounterKey", "u", "hasProperty", "CounterKeyTypeTypeId", "isFrequencyKey", "FrequencyKeyTypeTypeId", "isGaugeKey", "GaugeKeyTypeTypeId", "isHistogramKey", "HistogramKeyTypeTypeId", "isSummaryKey", "SummaryKeyTypeTypeId", "MetricKeySymbolKey", "MetricKeyTypeId", "Symbol", "for", "metricKeyVariance", "_Type", "_", "arrayEquivilence", "Arr", "getEquivalence", "equals", "MetricKeyImpl", "name", "keyType", "description", "tags", "constructor", "_hash", "pipe", "string", "combine", "hash", "array", "symbol", "u", "isMetricKey", "pipeArguments", "arguments", "hasProperty", "counter", "options", "fromNullable", "histogram", "name", "boundaries", "description", "MetricKeyImpl", "fromNullable", "taggedWithLabels", "dual", "self", "extraTags", "length", "MetricKeyImpl", "name", "keyType", "description", "union", "tags", "MetricStateSymbolKey", "MetricStateTypeId", "Symbol", "for", "CounterStateSymbolKey", "CounterStateTypeId", "FrequencyStateSymbolKey", "FrequencyStateTypeId", "GaugeStateSymbolKey", "GaugeStateTypeId", "HistogramStateSymbolKey", "HistogramStateTypeId", "SummaryStateSymbolKey", "SummaryStateTypeId", "metricStateVariance", "_A", "_", "CounterState", "count", "constructor", "symbol", "pipe", "hash", "combine", "cached", "that", "isCounterState", "pipeArguments", "arguments", "arrayEquals", "Arr", "getEquivalence", "equals", "FrequencyState", "occurrences", "_hash", "string", "array", "fromIterable", "entries", "isFrequencyState", "GaugeState", "value", "u", "isGaugeState", "HistogramState", "buckets", "min", "max", "sum", "isHistogramState", "SummaryState", "error", "quantiles", "isSummaryState", "counter", "frequency", "gauge", "histogram", "options", "summary", "isCounterState", "u", "hasProperty", "CounterStateTypeId", "isFrequencyState", "FrequencyStateTypeId", "isGaugeState", "GaugeStateTypeId", "isHistogramState", "HistogramStateTypeId", "isSummaryState", "SummaryStateTypeId", "MetricHookSymbolKey", "MetricHookTypeId", "Symbol", "for", "metricHookVariance", "_In", "_", "_Out", "make", "options", "pipe", "pipeArguments", "arguments", "bigint0", "BigInt", "counter", "key", "sum", "keyType", "bigint", "canUpdate", "incremental", "value", "_value", "update", "make", "get", "modify", "frequency", "values", "Map", "word", "preregisteredWords", "set", "slotCount", "gauge", "_key", "startAt", "v", "histogram", "bounds", "boundaries", "size", "length", "Uint32Array", "Float32Array", "count", "min", "Number", "MAX_VALUE", "max", "MIN_VALUE", "pipe", "sort", "Order", "map", "n", "i", "from", "to", "mid", "Math", "floor", "boundary", "getBuckets", "builder", "allocate", "cumulated", "buckets", "summary", "error", "maxAge", "maxSize", "quantiles", "sortedQuantiles", "head", "snapshot", "now", "item", "t", "age", "millis", "greaterThanOrEqualTo", "zero", "push", "calculateQuantiles", "observe", "timestamp", "target", "Date", "sortedSamples", "sampleCount", "isNonEmptyReadonlyArray", "empty", "tail", "slice", "resolvedHead", "resolveQuantile", "none", "resolved", "of", "forEach", "quantile", "consumed", "rest", "rq", "current", "error_1", "sampleCount_1", "current_1", "consumed_1", "quantile_1", "rest_1", "error_2", "sampleCount_2", "current_2", "consumed_2", "quantile_2", "rest_2", "some", "lastNonEmpty", "sameHead", "span", "desired", "allowedError", "candConsumed", "candError", "abs", "_tag", "prevError", "Error", "MetricPairSymbolKey", "MetricPairTypeId", "Symbol", "for", "metricPairVariance", "_Type", "_", "unsafeMake", "metricKey", "metricState", "MetricPairTypeId", "metricPairVariance", "pipe", "pipeArguments", "arguments", "MetricRegistrySymbolKey", "MetricRegistryTypeId", "Symbol", "for", "MetricRegistryImpl", "map", "MutableHashMap", "empty", "snapshot", "result", "key", "hook", "push", "unsafeMake", "get", "pipe", "getOrUndefined", "isCounterKey", "keyType", "getCounter", "isGaugeKey", "getGauge", "isFrequencyKey", "getFrequency", "isHistogramKey", "getHistogram", "isSummaryKey", "getSummary", "Error", "value", "counter", "has", "set", "frequency", "gauge", "bigint", "BigInt", "histogram", "summary", "make", "MetricSymbolKey", "MetricTypeId", "Symbol", "for", "metricVariance", "_Type", "_", "_In", "_Out", "globalMetricRegistry", "globalValue", "make", "keyType", "unsafeUpdate", "unsafeValue", "unsafeModify", "metric", "Object", "assign", "effect", "tap", "a", "update", "register", "pipe", "pipeArguments", "arguments", "counter", "name", "options", "fromMetricKey", "fromMetricKey", "key", "untaggedHook", "hookCache", "WeakMap", "hook", "extraTags", "length", "undefined", "globalMetricRegistry", "get", "taggedWithLabels", "set", "make", "keyType", "input", "update", "modify", "histogram", "name", "boundaries", "description", "fromMetricKey", "tagged", "dual", "self", "key", "value", "taggedWithLabels", "make", "taggedWithLabels", "dual", "self", "extraTags", "make", "keyType", "input", "extraTags1", "unsafeUpdate", "union", "unsafeValue", "unsafeModify", "update", "dual", "self", "input", "fiberRefGetWith", "currentMetricLabels", "tags", "sync", "unsafeUpdate", "RequestSymbolKey", "RequestTypeId", "Symbol", "for", "requestVariance", "_E", "_", "_A", "RequestPrototype", "StructuralPrototype", "isRequest", "u", "hasProperty", "complete", "dual", "self", "result", "fiberRefGetWith", "currentRequestMap", "map", "sync", "has", "entry", "get", "state", "completed", "core", "deferredUnsafeDone", "Listeners", "count", "observers", "Set", "interrupted", "addObserver", "f", "add", "removeObserver", "delete", "increment", "forEach", "decrement", "Direction", "Forward", "Backward", "RedBlackTreeIterator", "self", "stack", "direction", "count", "constructor", "clone", "slice", "reversed", "next", "entry", "moveNext", "movePrev", "_tag", "done", "value", "key", "length", "some", "none", "map", "last", "node", "index", "idx", "r", "_root", "left", "s", "right", "n", "push", "pop", "hasNext", "hasPrev", "Color", "Red", "Black", "clone", "color", "count", "key", "left", "right", "value", "swap", "n", "v", "repaint", "recount", "node", "RedBlackTreeSymbolKey", "RedBlackTreeTypeId", "Symbol", "for", "redBlackTreeVariance", "_Key", "_", "_Value", "RedBlackTreeProto", "symbol", "hash", "item", "pipe", "combine", "cached", "that", "isRedBlackTree", "_root", "count", "entries", "Array", "from", "every", "itemSelf", "i", "itemThat", "equals", "iterator", "stack", "n", "push", "left", "RedBlackTreeIterator", "Direction", "Forward", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "pipeArguments", "arguments", "makeImpl", "ord", "root", "tree", "Object", "create", "_ord", "u", "hasProperty", "findFirst", "dual", "self", "key", "cmp", "_ord", "node", "_root", "undefined", "d", "equals", "some", "value", "left", "right", "none", "has", "dual", "self", "key", "isSome", "findFirst", "insert", "value", "cmp", "_ord", "n", "_root", "n_stack", "d_stack", "d", "push", "left", "right", "color", "Color", "Red", "undefined", "count", "s", "length", "n2", "p", "n3", "Black", "pp", "y", "repaint", "Node", "recount", "ppp", "makeImpl", "keysForward", "keys", "Direction", "Forward", "keys", "self", "direction", "begin", "Symbol", "iterator", "count", "next", "entry", "key", "Direction", "Forward", "moveNext", "movePrev", "_tag", "done", "value", "removeFirst", "dual", "self", "key", "has", "ord", "_ord", "cmp", "node", "_root", "stack", "undefined", "d", "push", "equals", "left", "right", "length", "cstack", "Array", "n", "color", "value", "count", "i", "split", "v", "Color", "Red", "p", "pop", "makeImpl", "Node", "swap", "Black", "parent", "fixDoubleBlack", "fixDoubleBlack", "stack", "n", "p", "s", "z", "i", "length", "color", "Color", "Black", "left", "right", "undefined", "Red", "clone", "Node", "recount", "pp", "repaint", "push", "has", "insert", "keys", "keysForward", "removeFirst", "TypeId", "Symbol", "for", "SortedSetProto", "_A", "_", "symbol", "pipe", "hash", "keyTree", "combine", "cached", "that", "isSortedSet", "equals", "iterator", "keys", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipeArguments", "arguments", "fromTree", "a", "Object", "create", "u", "hasProperty", "add", "Dual", "dual", "self", "value", "has", "keyTree", "fromTree", "insert", "remove", "Dual", "dual", "self", "value", "fromTree", "removeFirst", "keyTree", "SupervisorSymbolKey", "SupervisorTypeId", "Symbol", "for", "supervisorVariance", "_T", "_", "ProxySupervisor", "underlying", "value0", "constructor", "value", "onStart", "context", "effect", "parent", "fiber", "onEnd", "onEffect", "onSuspend", "onResume", "map", "f", "pipe", "zip", "right", "Zip", "left", "_tag", "isZip", "self", "hasProperty", "isTagged", "Track", "fibers", "Set", "sync", "Array", "from", "_context", "_effect", "_parent", "add", "_value", "delete", "_fiber", "onRun", "execution", "Const", "FibersIn", "ref", "get", "set", "remove", "unsafeTrack", "track", "core", "fromEffect", "none", "globalValue", "void", "make", "OP_EMPTY", "OP_ADD_SUPERVISOR", "OP_REMOVE_SUPERVISOR", "OP_AND_THEN", "empty", "_tag", "combine", "self", "that", "first", "second", "patch", "supervisor", "patchLoop", "of", "_supervisor", "_patches", "patches", "isNonEmpty", "head", "headNonEmpty", "tailNonEmpty", "zip", "removeSupervisor", "prepend", "equals", "none", "isZip", "left", "right", "toSet", "pipe", "union", "make", "diff", "oldValue", "newValue", "oldSupervisors", "newSupervisors", "added", "difference", "reduce", "removed", "differ", "Differ", "fiberStarted", "metric", "counter", "incremental", "fiberActive", "fiberSuccesses", "fiberFailures", "fiberLifetimes", "tagged", "histogram", "metricBoundaries", "exponential", "start", "factor", "count", "EvaluationSignalContinue", "EvaluationSignalDone", "EvaluationSignalYieldNow", "runtimeFiberVariance", "_E", "_", "_A", "absurd", "Error", "toStringUnknown", "YieldedOp", "Symbol", "for", "yieldedOpChannel", "globalValue", "currentOp", "contOpSuccess", "OP_ON_SUCCESS", "cont", "value", "internalCall", "effect_instruction_i1", "OnStep", "_cont", "exitSucceed", "OP_ON_SUCCESS_AND_FAILURE", "effect_instruction_i2", "OP_REVERT_FLAGS", "self", "patchRuntimeFlags", "_runtimeFlags", "patch", "interruptible", "isInterrupted", "exitFailCause", "getInterruptedCause", "OP_WHILE", "effect_instruction_i0", "pushStack", "void", "drainQueueWhileRunningTable", "OP_INTERRUPT_SIGNAL", "runtimeFlags", "cur", "message", "processNewInterruptSignal", "cause", "OP_RESUME", "_self", "_cur", "_message", "OP_STATEFUL", "onFiber", "running", "OP_YIELD_NOW", "flatMap", "yieldNow", "runBlockedRequests", "forEachSequentialDiscard", "flatten", "requestsByRequestResolver", "forEachConcurrentDiscard", "sequentialCollectionToChunk", "dataSource", "sequential", "map", "Map", "arr", "block", "push", "toReadonlyArray", "entry", "set", "request", "flat", "fiberRefLocally", "invokeWithInterrupt", "runAll", "forEach", "listeners", "interrupted", "currentRequestMap", "FiberRuntime", "FiberTypeId", "fiberVariance", "RuntimeFiberTypeId", "pipe", "pipeArguments", "arguments", "_fiberRefs", "_fiberId", "_queue", "Array", "_children", "_observers", "_running", "_stack", "_asyncInterruptor", "_asyncBlockingOn", "_exitValue", "_steps", "_supervisor", "_scheduler", "_tracer", "currentOpCount", "isYielding", "constructor", "fiberId", "fiberRefs0", "runtimeFlags0", "getFiberRef", "currentSupervisor", "currentScheduler", "runtimeMetrics", "tags", "currentMetricLabels", "unsafeUpdate", "get", "currentServices", "tracerTag", "id", "resume", "effect", "tell", "status", "ask", "state", "isDone", "scope", "unsafeMake", "children", "fiber", "from", "getChildren", "Set", "currentInterruptedCause", "fiberRefs", "getFiberRefs", "f", "suspend", "deferred", "deferredUnsafeMake", "stateful", "core", "deferredUnsafeDone", "sync", "deferredAwait", "drainQueueLaterOnExecutor", "await", "async", "cb", "exit", "succeed", "addObserver", "removeObserver", "inheritAll", "withFiberRuntime", "parentFiber", "parentStatus", "parentFiberId", "parentFiberRefs", "parentRuntimeFlags", "childFiberRefs", "updatedFiberRefs", "joinAs", "setFiberRefs", "updatedRuntimeFlags", "currentRuntimeFlags", "diff", "exclude", "Interruption", "WindDown", "updateRuntimeFlags", "poll", "fromNullable", "unsafePoll", "interruptAsFork", "interruptSignal", "interrupt", "unsafeInterruptAsFork", "observer", "filter", "o", "setFiberRef", "unsafeDeleteFiberRef", "fiberRef", "delete_", "locals", "has", "initial", "updateAs", "refreshRefCache", "addChild", "child", "add", "removeChild", "delete", "drainQueueOnCurrentThread", "recurse", "evaluationSignal", "prev", "globalThis", "currentFiberURI", "length", "evaluateMessageWhileSuspended", "splice", "scheduleTask", "run", "currentSchedulingPriority", "drainQueueWhileRunning", "cur0", "_tag", "isEmpty", "addInterruptedCause", "oldSC", "sendInterruptSignalToAllChildren", "size", "told", "interruptAllChildren", "it", "values", "body", "next", "done", "asVoid", "whileLoop", "while", "step", "reportExitValue", "startTimeMillis", "endTimeMillis", "Date", "now", "OP_SUCCESS", "OP_FAILURE", "level", "currentUnhandledErrorLogLevel", "isInterruptedOnly", "log", "setExitValue", "i", "getLoggers", "currentLoggers", "overrideLogLevel", "logLevel", "isSome", "currentLogLevel", "minimumLogLevel", "currentMinimumLogLevel", "greaterThan", "spans", "currentLogSpan", "annotations", "currentLogAnnotations", "loggers", "contextMap", "clockService", "clockTag", "date", "unsafeCurrentTimeMillis", "logger", "context", "evaluateEffect", "suspended", "effect0", "onResume", "eff", "runLoop", "op", "_op", "OP_YIELD", "cooperativeYielding", "exitVoid", "OP_ASYNC", "enable", "interruption", "onSuspend", "startFork", "oldRuntimeFlags", "newRuntimeFlags", "initiateAsync", "asyncRegister", "alreadyCalled", "callback", "e", "failCause", "die", "refs", "flags", "popStack", "item", "pop", "getNextSuccessCont", "frame", "OP_ON_FAILURE", "getNextFailCont", "OP_TAG", "fiberRefGet", "currentContext", "unsafeGet", "fail", "left", "NoSuchElementException", "right", "unsafeAsync", "microResume", "env", "envUnsafeMakeEmpty", "envSet", "runSymbol", "result", "none", "error", "defect", "abortResume", "Micro", "envGet", "currentAbortController", "abort", "OP_SYNC", "undefined", "oldCur", "stripFailures", "OP_WITH_RUNTIME", "frames", "snap", "patchRefs", "patchFlags", "blocked", "newFiber", "uninterruptibleMask", "restore", "forkDaemon", "runRequestBlock", "OP_UPDATE_RUNTIME_FLAGS", "updateFlags", "revertFlags", "RevertFlags", "check", "OP_COMMIT", "commit", "OpSupervision", "onEffect", "shouldYield", "priority", "getCurrentVersion", "EffectTypeId", "_V", "dieMessage", "isEffectError", "isInterruptedException", "fiberRefUnsafeMake", "fromLiteral", "loggerWithConsoleLog", "makeLogger", "opts", "services", "getOrDefault", "Context", "consoleTag", "unsafe", "loggerWithConsoleError", "defaultLogger", "stringLogger", "jsonLogger", "logFmtLogger", "logfmtLogger", "prettyLogger", "structuredLogger", "tracerLogger", "span", "getOption", "spanTag", "attributes", "Object", "fromEntries", "threadName", "label", "pretty", "event", "String", "unsafeCurrentTimeNanos", "loggerWithSpanAnnotations", "mapInputOptions", "options", "traceId", "spanId", "name", "identity", "fiberRefUnsafeMakeHashSet", "make", "batchedLogger", "dual", "window", "buffer", "flush", "sleep", "zipRight", "forever", "scopeAddFinalizer", "interruptFiber", "addFinalizer", "as", "annotateLogsScoped", "fiberRefLocallyScopedWith", "entries", "mutate", "key", "HashMap", "acquireRelease", "args", "isEffect", "acquire", "release", "uninterruptible", "tap", "a", "acquireReleaseInterruptible", "ensuring", "finalizer", "runtime", "acquireRefs", "acquireFlags", "scopeAddFinalizerExit", "runtimeFinalizer", "preRefs", "preFlags", "inverseRefs", "withRuntimeFlags", "daemonChildren", "forkScope", "currentForkScopeOverride", "some", "globalScope", "_existsParFound", "exists", "isIterable", "elements", "matchSimple", "concurrency", "existsLoop", "iterator", "matchEffect", "if_", "onTrue", "onFalse", "onFailure", "onSuccess", "index", "b", "predicate", "negate", "not", "fromIterable", "reduceRight", "zipWith", "list", "getSomes", "allResolveInput", "input", "isArray", "keys", "k", "res", "allValidate", "effects", "reconcile", "eitherEffects", "either", "batching", "eithers", "errors", "successes", "errored", "discard", "allEither", "all", "arg", "mode", "allWith", "allSuccesses", "filterMap", "exitIsSuccess", "replicate", "n", "replicateEffect", "r", "isRequestBatchingEnabled", "currentRequestBatching", "match", "finalizersMask", "parallel", "parallelN", "forEachParN", "forEachSequential", "forEachParUnbounded", "array", "fn", "processAll", "transplant", "graft", "parent", "todos", "reverse", "target", "fibersCount", "Math", "min", "fibers", "results", "interruptAll", "startOrder", "joinOrder", "residual", "collectExits", "exits", "sort", "runFiber", "interruptImmediately", "runnable", "unsafeForkUnstarted", "onInterruptSignal", "stepOrExit", "processingFiber", "pushResult", "returnNextElement", "onRes", "todo", "wrapped", "getOrElse", "exitCollectAll", "requests", "reduce", "par", "onExit", "join", "exitMatch", "toPop", "hitNext", "getOrThrow", "fork", "unsafeFork", "forkWithScopeOverride", "forkWithErrorHandler", "handler", "onError", "failureOrCause", "overrideScope", "childFiber", "unsafeMakeChildFiber", "childId", "forkAs", "childContext", "supervisor", "onStart", "onEnd", "parentScope", "scopeOverride", "mergeAll", "isFunction", "zero", "acc", "update", "partition", "chunk", "partitionMap", "validateAll", "es", "bs", "raceAll", "isNonEmpty", "dieSync", "IllegalArgumentException", "headNonEmpty", "tailNonEmpty", "deferredMake", "fails", "head", "unsafeFromArray", "tail", "prepend", "_await", "raceAllArbiter", "onInterrupt", "zipLeft", "winner", "exitMatchEffect", "modify", "deferredFailCause", "deferredSucceed", "reduceEffect", "elem", "option", "parallelFinalizers", "contextWithEffect", "scopeTag", "onNone", "onSome", "strategy", "scopeFork", "inner", "scopeExtend", "parallelNFinalizers", "parallelism", "sequentialFinalizers", "scopeWith", "scopedEffect", "scopeMake", "scopeUse", "tagMetricsScoped", "labelMetricsScoped", "labels", "old", "union", "using", "use", "acquireUseRelease", "scopeClose", "validate", "that", "validateWith", "zipWithOptions", "ea", "eb", "exitZipWith", "ca", "concurrent", "validateFirst", "dual", "args", "isIterable", "elements", "f", "options", "flip", "forEach", "a", "i", "withClockScoped", "value", "fiberRefLocallyScopedWith", "currentServices", "add", "clockTag", "withRandomScoped", "randomTag", "withConfigProviderScoped", "configProviderTag", "withEarlyRelease", "self", "scopeWith", "parent", "flatMap", "scopeFork", "sequential", "child", "pipe", "scopeExtend", "map", "fiberIdWith", "fiberId", "scopeClose", "exitInterrupt", "zipOptions", "isEffect", "that", "zipWithOptions", "b", "zipLeftOptions", "concurrent", "batching", "undefined", "zipLeft", "_", "zipRightOptions", "zipRight", "all", "concurrency", "a2", "withRuntimeFlagsScoped", "update", "empty", "void", "runtimeFlags", "updatedRuntimeFlags", "patch", "revertRuntimeFlags", "diff", "updateRuntimeFlags", "addFinalizer", "asVoid", "uninterruptible", "scopeTag", "Context", "GenericTag", "scope", "scopeUnsafeAddFinalizer", "fin", "state", "_tag", "finalizers", "ScopeImplProto", "ScopeTypeId", "CloseableScopeTypeId", "pipeArguments", "arguments", "fork", "strategy", "sync", "newScope", "scopeUnsafeMake", "exit", "close", "delete", "suspend", "Array", "from", "values", "reverse", "length", "isSequential", "forEachSequential", "results", "exitCollectAll", "exitAsVoid", "getOrElse", "exitVoid", "isParallel", "forEachParUnbounded", "parallel", "forEachParN", "parallelism", "Object", "create", "Set", "scopeMake", "effect", "mapInputContext", "merge", "make", "scopeUse", "onExit", "fiberRefUnsafeMakeSupervisor", "initial", "fiberRefUnsafeMakePatch", "differ", "fiberRefLocallyScoped", "acquireRelease", "fiberRefGet", "oldValue", "as", "fiberRefSet", "fiberRefGetWith", "currentRuntimeFlags", "core", "fiberRefUnsafeMakeRuntimeFlags", "none", "currentSupervisor", "fiberRefUnsafeMakeSupervisor", "fiberAwaitAll", "fibers", "asVoid", "_await", "fiberAll", "FiberTypeId", "fiberVariance", "id", "fromIterable", "reduce", "fiber", "combine", "await", "exit", "forEachParUnbounded", "flatten", "children", "map", "inheritAll", "forEachSequentialDiscard", "poll", "forEachSequential", "reduceRight", "some", "exitSucceed", "Array", "optionB", "optionA", "_tag", "exitZipWith", "value", "onSuccess", "a", "chunk", "onFailure", "parallel", "interruptAsFork", "fiberId", "pipe", "pipeArguments", "arguments", "raceWith", "dual", "self", "other", "options", "raceFibersWith", "onSelfWin", "winner", "loser", "flatMap", "await", "exit", "_tag", "OP_SUCCESS", "inheritAll", "onSelfDone", "OP_FAILURE", "onOtherWin", "onOtherDone", "disconnect", "uninterruptibleMask", "restore", "fiberIdWith", "fiberId", "forkDaemon", "fiber", "pipe", "join", "onInterrupt", "interruptAsFork", "race", "that", "parentFiberId", "right", "exitMatchEffect", "onFailure", "cause", "mapErrorCause", "cause2", "parallel", "onSuccess", "value", "interruptAsFiber", "as", "left", "withFiberRuntime", "parentFiber", "parentStatus", "parentRuntimeFlags", "runtimeFlags", "raceIndicator", "make", "leftFiber", "unsafeMakeChildFiber", "selfScope", "rightFiber", "otherScope", "async", "cb", "addObserver", "completeRace", "startFork", "combine", "id", "cont", "ab", "compareAndSet", "ensuring", "finalizer", "matchCauseEffect", "cause1", "failCause", "sequential", "a", "invokeWithInterrupt", "entries", "interruptible", "processing", "counts", "map", "_", "listeners", "count", "checkDone", "every", "result", "state", "current", "exitIsExit", "effect", "isInterrupted", "cleanup", "forEach", "f", "interruptFiber", "r", "i", "observer", "removeObserver", "sync", "suspend", "residual", "entry", "completed", "forEachSequentialDiscard", "complete", "request", "exitInterrupt", "makeSpanScoped", "name", "options", "addSpanStackTrace", "uninterruptible", "withFiberRuntime", "fiber", "scope", "unsafeGet", "getFiberRef", "currentContext", "scopeTag", "span", "unsafeMakeSpan", "timingEnabled", "currentTracerTimingEnabled", "clock_", "get", "currentServices", "clockTag", "as", "scopeAddFinalizerExit", "exit", "endSpan", "withTracerScoped", "value", "fiberRefLocallyScopedWith", "add", "tracerTag", "withSpanScoped", "dataFirst", "arguments", "self", "flatMap", "provideService", "spanTag", "complete", "key", "exit", "entryStats", "timeToLiveMillis", "struct", "_tag", "pending", "deferred", "refreshing", "MapKeyTypeId", "Symbol", "for", "MapKeyImpl", "current", "previous", "undefined", "next", "constructor", "symbol", "pipe", "hash", "combine", "cached", "that", "isMapKey", "equals", "makeMapKey", "u", "hasProperty", "KeySetImpl", "head", "tail", "add", "remove", "makeKeySet", "makeCacheState", "map", "keys", "accesses", "updating", "hits", "misses", "initialCacheState", "empty", "unbounded", "make", "CacheSymbolKey", "CacheTypeId", "cacheVariance", "_Key", "_", "_Error", "_Value", "ConsumerCacheSymbolKey", "ConsumerCacheTypeId", "consumerCacheVariance", "makeCacheStats", "options", "makeEntryStats", "loadedMillis", "CacheImpl", "capacity", "context", "fiberId", "lookup", "timeToLive", "cacheState", "get", "getEither", "merge", "cacheStats", "sync", "size", "getOption", "suspend", "match", "onNone", "mapKey", "trackAccess", "trackMiss", "succeed", "none", "onSome", "value", "resolveMapValue", "getOptionComplete", "contains", "has", "option", "isSome", "loaded", "some", "k", "getOrUndefined", "unsafeMake", "MutableHashMap", "set", "lookupValueOf", "right", "flatMap", "left", "invalidate", "invalidateWhen", "when", "invalidateAll", "refresh", "clockWith", "clock", "asVoid", "hasExpired", "found", "mapValue", "await", "now", "unsafeCurrentTimeMillis", "lookupResult", "toMillis", "decode", "values", "entry", "push", "entries", "ignorePending", "trackHit", "MutableQueue", "offer", "compareAndSet", "loop", "poll", "EmptyMutableQueue", "MutableRef", "input", "provideContext", "stats", "zipRight", "done", "onInterrupt", "interrupt", "unsafeMakeWith", "capacity", "lookup", "timeToLive", "CacheImpl", "empty", "none", "exit", "decode", "empty", "fail", "die", "isInterruptedOnly", "failureOrCause", "Do", "EffectTypeId", "Tag", "acquireRelease", "acquireReleaseInterruptible", "acquireUseRelease", "addFinalizer", "all", "allSuccesses", "allWith", "allowInterrupt", "andThen", "annotateCurrentSpan", "annotateLogs", "annotateLogsScoped", "annotateSpans", "as", "asSome", "asSomeError", "asVoid", "async", "asyncEffect", "awaitAllChildren", "bind", "bindTo", "blocked", "cached", "cachedFunction", "cachedInvalidateWithTTL", "_catch", "catchAll", "catchAllCause", "catchAllDefect", "catchIf", "catchSome", "catchSomeCause", "catchSomeDefect", "catchTag", "catchTags", "cause", "checkInterruptible", "clock", "clockWith", "configProviderWith", "console", "consoleWith", "context", "contextWith", "contextWithEffect", "currentParentSpan", "currentSpan", "custom", "daemonChildren", "delay", "descriptor", "descriptorWith", "die", "dieMessage", "dieSync", "diffFiberRefs", "disconnect", "dropUntil", "dropWhile", "either", "ensuring", "ensuringChild", "ensuringChildren", "eventually", "every", "exists", "exit", "fail", "failCause", "failCauseSync", "failSync", "fiberId", "fiberIdWith", "filter", "filterMap", "filterOrDie", "filterOrDieMessage", "filterOrElse", "filterOrFail", "finalizersMask", "findFirst", "firstSuccessOf", "flatMap", "flatten", "flip", "flipWith", "forEach", "forever", "fork", "forkAll", "forkDaemon", "forkIn", "forkScoped", "forkWithErrorHandler", "fromFiber", "fromFiberEffect", "fromNullable", "functionWithSpan", "gen", "head", "if_", "ignore", "ignoreLogged", "inheritFiberRefs", "interrupt", "interruptWith", "interruptible", "interruptibleMask", "intoDeferred", "isEffect", "isFailure", "isSuccess", "iterate", "labelMetrics", "labelMetricsScoped", "let_", "liftPredicate", "linkSpans", "locally", "log", "logAnnotations", "logDebug", "logError", "logFatal", "logInfo", "logTrace", "logWarning", "logWithLevel", "loop", "makeSemaphore", "makeSpan", "makeSpanScoped", "map", "mapAccum", "mapBoth", "mapError", "mapErrorCause", "mapInputContext", "match", "matchCause", "matchCauseEffect", "matchEffect", "merge", "mergeAll", "metricLabels", "negate", "never", "none", "onError", "onExit", "onInterrupt", "once", "option", "optionFromOptional", "orDie", "orDieWith", "orElse", "orElseFail", "orElseSucceed", "parallelErrors", "parallelFinalizers", "partition", "patchFiberRefs", "promise", "provide", "provideService", "provideServiceEffect", "race", "raceAll", "raceFirst", "raceWith", "random", "randomWith", "reduce", "reduceEffect", "reduceRight", "reduceWhile", "repeatN", "replicate", "replicateEffect", "retry", "runRequestBlock", "runtime", "sandbox", "scheduleForked", "scope", "scopeWith", "scoped", "sequentialFinalizers", "serviceConstants", "serviceFunction", "serviceFunctionEffect", "serviceFunctions", "serviceMembers", "serviceOption", "serviceOptional", "setFiberRefs", "sleep", "spanAnnotations", "spanLinks", "step", "succeed", "succeedNone", "succeedSome", "summarized", "supervised", "suspend", "sync", "tagMetrics", "tagMetricsScoped", "takeUntil", "takeWhile", "tap", "tapBoth", "tapDefect", "tapError", "tapErrorCause", "tapErrorTag", "timed", "timedWith", "timeout", "timeoutFail", "timeoutFailCause", "timeoutOption", "timeoutTo", "tracer", "tracerWith", "transplant", "try_", "tryMap", "tryMapPromise", "tryPromise", "uninterruptible", "uninterruptibleMask", "unless", "unlessEffect", "unsafeMakeSemaphore", "unsandbox", "updateFiberRefs", "updateService", "useSpan", "using", "validate", "validateAll", "validateFirst", "validateWith", "when", "whenEffect", "whenFiberRef", "whenRef", "whileLoop", "withClock", "withClockScoped", "withConcurrency", "withConfigProvider", "withConfigProviderScoped", "withConsole", "withConsoleScoped", "withEarlyRelease", "withFiberRuntime", "withLogSpan", "withMaxOpsBeforeYield", "withMetric", "withParentSpan", "withRandom", "withRandomScoped", "withRequestBatching", "withRequestCache", "withRequestCaching", "withScheduler", "withSchedulingPriority", "withSpan", "withSpanScoped", "withTracer", "withTracerEnabled", "withTracerScoped", "withTracerTiming", "withUnhandledErrorLogLevel", "yieldNow", "zip", "zipLeft", "zipRight", "zipWith", "IntervalSymbolKey", "IntervalTypeId", "Symbol", "for", "empty", "startMillis", "endMillis", "make", "lessThan", "dual", "self", "that", "min", "isEmpty", "self", "startMillis", "endMillis", "intersect", "dual", "self", "that", "start", "Math", "max", "startMillis", "end", "min", "endMillis", "make", "after", "startMilliseconds", "make", "Number", "POSITIVE_INFINITY", "empty", "lessThan", "isEmpty", "intersect", "after", "IntervalsSymbolKey", "IntervalsTypeId", "Symbol", "for", "make", "intervals", "intersect", "dual", "self", "that", "intersectLoop", "intervals", "empty", "_left", "_right", "_acc", "left", "right", "acc", "isNonEmpty", "interval", "pipe", "headNonEmpty", "isEmpty", "prepend", "lessThan", "tailNonEmpty", "make", "reverse", "start", "head", "getOrElse", "startMillis", "end", "endMillis", "make", "intersect", "start", "end", "lessThan", "isNonEmpty", "OP_CONTINUE", "OP_DONE", "_continue", "intervals", "_tag", "continueWith", "interval", "make", "of", "done", "isContinue", "self", "isDone", "_continue", "continueWith", "done", "isContinue", "isDone", "Scope", "scopeTag", "close", "scopeClose", "fork", "scopeFork", "ScheduleSymbolKey", "ScheduleTypeId", "Symbol", "for", "isSchedule", "u", "hasProperty", "ScheduleDriverSymbolKey", "ScheduleDriverTypeId", "scheduleVariance", "_Out", "_", "_In", "_R", "scheduleDriverVariance", "ScheduleImpl", "initial", "step", "constructor", "pipe", "pipeArguments", "arguments", "ScheduleDriverImpl", "schedule", "ref", "state", "map", "get", "tuple", "last", "flatMap", "element", "_tag", "failSync", "NoSuchElementException", "succeed", "value", "reset", "set", "none", "next", "input", "currentTimeMillis", "now", "suspend", "out", "decision", "setState", "some", "isDone", "zipRight", "fail", "millis", "start", "intervals", "as", "sleep", "makeWithState", "check", "dual", "self", "test", "checkEffect", "input", "out", "sync", "makeWithState", "initial", "now", "state", "flatMap", "step", "decision", "isDone", "succeed", "done", "map", "cont", "driver", "self", "pipe", "make", "none", "initial", "map", "ref", "ScheduleDriverImpl", "intersect", "dual", "self", "that", "intersectWith", "f", "makeWithState", "initial", "now", "input", "state", "pipe", "zipWith", "step", "a", "b", "flatMap", "lState", "out", "lDecision", "rState", "out2", "rDecision", "isContinue", "intersectWithLoop", "intervals", "succeed", "done", "lInterval", "rInterval", "combined", "isNonEmpty", "continue", "lessThan", "end", "decision", "isDone", "map", "dual", "self", "f", "mapEffect", "out", "sync", "makeWithState", "initial", "now", "input", "state", "flatMap", "step", "decision", "out2", "passthrough", "self", "makeWithState", "initial", "now", "input", "state", "pipe", "step", "map", "_", "decision", "recurs", "n", "whileOutput", "forever", "out", "unfold", "initial", "f", "makeWithState", "now", "_", "state", "sync", "continueWith", "after", "untilInputEffect", "dual", "self", "f", "checkEffect", "input", "_", "negate", "whileInputEffect", "dual", "self", "f", "checkEffect", "input", "_", "whileOutput", "check", "out", "ScheduleDefectTypeId", "Symbol", "for", "ScheduleDefect", "error", "constructor", "isScheduleDefect", "u", "hasProperty", "scheduleDefectWrap", "self", "catchAll", "e", "die", "scheduleDefectRefail", "catchAllCause", "cause", "match", "find", "_", "isDieType", "defect", "some", "none", "onNone", "failCause", "onSome", "fail", "repeat_Effect", "dual", "schedule", "repeatOrElse_Effect", "repeat_combined", "options", "isSchedule", "base", "passthrough", "forever", "withWhile", "while", "whileInputEffect", "a", "applied", "succeed", "withUntil", "until", "untilInputEffect", "withTimes", "times", "intersect", "recurs", "pipe", "map", "intersectionPair", "orElse", "flatMap", "driver", "matchEffect", "onFailure", "onSuccess", "value", "repeatOrElseEffectLoop", "next", "orDie", "last", "b", "retry_Effect", "policy", "retryOrElse_Effect", "retry_combined", "retryOrElse_EffectLoop", "out", "schedule_Effect", "scheduleFrom_Effect", "initial", "scheduleFrom_EffectLoop", "forever", "unfold", "n", "Semaphore", "permits", "waiters", "Set", "taken", "constructor", "free", "take", "n", "async", "resume", "observer", "delete", "succeed", "add", "sync", "updateTaken", "f", "withFiberRuntime", "fiber", "size", "getFiberRef", "currentScheduler", "scheduleTask", "iter", "values", "item", "next", "done", "value", "currentSchedulingPriority", "release", "releaseAll", "_", "withPermits", "self", "uninterruptibleMask", "restore", "flatMap", "ensuring", "unsafeMakeSemaphore", "makeSemaphore", "awaitAllChildren", "ensuringChildren", "fiberAwaitAll", "cached", "dual", "timeToLive", "map", "cachedInvalidateWithTTL", "tuple", "duration", "decode", "context", "env", "makeSynchronized", "none", "cache", "provideContext", "getCachedValue", "invalidateCache", "computeCachedValue", "start", "timeToLiveMillis", "toMillis", "pipe", "deferredMake", "tap", "deferred", "intoDeferred", "some", "clockWith", "clock", "currentTimeMillis", "time", "updateSomeAndGetEffectSynchronized", "option", "_tag", "end", "isNone", "dieMessage", "deferredAwait", "set", "ensuringChild", "children", "fiberAll", "track", "supervisor", "supervised", "forkAll", "args", "isIterable", "effects", "options", "discard", "forEachSequentialDiscard", "fork", "forEachSequential", "forkIn", "scope", "sequential", "child", "onExit", "exit", "close", "forkDaemon", "addFinalizer", "fiberIdWith", "fiberId", "equals", "id", "void", "asVoid", "interruptFiber", "forkScoped", "scopeWith", "fromFiber", "join", "fromFiberEffect", "suspend", "memoKeySymbol", "Symbol", "for", "Key", "a", "eq", "symbol", "that", "hasProperty", "hash", "cachedFunction", "empty", "ref", "modifyEffect", "result", "get", "diffFiberRefs", "patch", "b", "patchFiberRefs", "as", "raceFirst", "race", "effect", "flatten", "scheduleForked", "schedule", "schedule_Effect", "supervise", "fiberRefLocallyWith", "currentSupervisor", "s", "zip", "timeout", "timeoutFail", "onTimeout", "timeoutExceptionFromDuration", "timeoutTo", "failSync", "onSuccess", "timeoutFailCause", "failCauseSync", "timeoutOption", "parentFiberId", "raceFibersWith", "interruptible", "sleep", "onSelfWin", "winner", "loser", "await", "inheritAll", "interruptAsFiber", "exitFailCause", "cause", "onOtherWin", "otherScope", "globalScope", "SynchronizedSymbolKey", "SynchronizedTypeId", "synchronizedVariance", "_A", "SynchronizedImpl", "withLock", "RefTypeId", "refVariance", "TypeId", "modify", "pipeArguments", "arguments", "unsafeMakeSynchronized", "unsafeMake", "sem", "pf", "OP_EXTEND_SCOPE", "OP_FOLD", "OP_FRESH", "OP_FROM_EFFECT", "OP_SCOPED", "OP_SUSPEND", "OP_PROVIDE", "OP_PROVIDE_MERGE", "OP_ZIP_WITH", "interruptAs", "interruptAsFiber", "unsafeFork", "runtime", "self", "options", "fiberId", "unsafeMake", "fiberRefUpdates", "currentContext", "context", "scheduler", "push", "currentScheduler", "fiberRefs", "updateManyAs", "entries", "forkAs", "updateRefs", "fiberRuntime", "FiberRuntime", "runtimeFlags", "effect", "scope", "flatMap", "fork", "sequential", "closeableScope", "zipRight", "scopeAddFinalizer", "fiberIdWith", "id", "equals", "void", "interruptAsFiber", "onExit", "exit", "close", "supervisor", "_supervisor", "none", "onStart", "addObserver", "onEnd", "fiberScope", "globalScope", "add", "immediate", "resume", "start", "unsafeRunCallback", "cancelOptions", "pipe", "interruptAs", "flatten", "undefined", "unsafeRunSync", "result", "unsafeRunSyncExit", "_tag", "fiberFailure", "effect_instruction_i0", "AsyncFiberExceptionImpl", "Error", "fiber", "constructor", "name", "stack", "message", "asyncFiberException", "limit", "stackTraceLimit", "error", "FiberFailureId", "Symbol", "for", "FiberFailureCauseId", "FiberFailureImpl", "Error", "constructor", "cause", "prettyErrors", "length", "head", "name", "message", "stack", "undefined", "toJSON", "_id", "toString", "NodeInspectSymbol", "fiberFailure", "limit", "stackTraceLimit", "error", "fastPath", "effect", "op", "_op", "exitFail", "left", "exitSucceed", "right", "value", "NoSuchElementException", "unsafeRunSyncExit", "runtime", "scheduler", "SyncScheduler", "fiberRuntime", "unsafeFork", "flush", "result", "unsafePoll", "asyncFiberException", "unsafeRunPromise", "options", "unsafeRunPromiseExit", "then", "_tag", "OP_SUCCESS", "effect_instruction_i0", "OP_FAILURE", "fiberFailure", "Promise", "resolve", "fiber", "addObserver", "exit", "signal", "undefined", "aborted", "unsafeInterruptAsFork", "id", "addEventListener", "once", "RuntimeImpl", "context", "runtimeFlags", "fiberRefs", "constructor", "pipe", "pipeArguments", "arguments", "make", "withFiberRuntime", "state", "status", "succeed", "getFiberRef", "currentContext", "getFiberRefs", "defaultRuntimeFlags", "Interruption", "CooperativeYielding", "RuntimeMetrics", "defaultRuntime", "Context", "empty", "FiberRefs", "unsafeRunEffect", "unsafeRunCallback", "defaultRuntime", "unsafeForkEffect", "unsafeFork", "unsafeRunPromiseEffect", "unsafeRunPromise", "unsafeRunPromiseExitEffect", "unsafeRunPromiseExit", "unsafeRunSyncEffect", "unsafeRunSync", "unsafeRunSyncExitEffect", "unsafeRunSyncExit", "asyncEffect", "register", "suspend", "cleanup", "undefined", "flatMap", "deferredMake", "deferred", "runtime", "uninterruptibleMask", "restore", "zipRight", "fork", "matchCauseEffect", "cb", "intoDeferred", "onFailure", "cause", "deferredFailCause", "onSuccess", "cleanup_", "void", "onInterrupt", "deferredAwait", "modifyEffect", "dual", "self", "f", "LayerSymbolKey", "LayerTypeId", "Symbol", "for", "layerVariance", "_RIn", "_", "_E", "_ROut", "proto", "pipe", "pipeArguments", "arguments", "MemoMapTypeIdKey", "MemoMapTypeId", "isLayer", "u", "hasProperty", "isFresh", "self", "_tag", "OP_FRESH", "MemoMapImpl", "ref", "constructor", "getOrElseMemoize", "layer", "scope", "modifyEffect", "map", "inMap", "get", "undefined", "acquire", "release", "cached", "flatMap", "patch", "b", "patchFiberRefs", "as", "onExit", "exitMatch", "onFailure", "void", "onSuccess", "scopeAddFinalizerExit", "succeed", "make", "observers", "deferredMake", "deferred", "finalizerRef", "resource", "uninterruptibleMask", "restore", "scopeMake", "innerScope", "makeBuilder", "f", "diffFiberRefs", "exit", "OP_FAILURE", "deferredFailCause", "effect_instruction_i0", "zipRight", "scopeClose", "failCause", "OP_SUCCESS", "set", "whenEffect", "modify", "n", "asVoid", "update", "sync", "delete", "finalizer", "deferredSucceed", "memoized", "deferredAwait", "exitMatchEffect", "flatten", "makeMemoMap", "core", "suspend", "makeSynchronized", "Map", "build", "self", "scopeWith", "scope", "buildWithScope", "dual", "flatMap", "makeMemoMap", "memoMap", "makeBuilder", "run", "buildWithMemoMap", "inMemoMap", "op", "_tag", "sync", "f", "getOrElseMemoize", "layer", "pipe", "matchCauseEffect", "onFailure", "cause", "failureK", "onSuccess", "value", "successK", "_", "effect", "first", "env", "second", "provideContext", "scopeExtend", "evaluate", "zipWith", "zipK", "zipWithOptions", "concurrent", "catchAll", "match", "succeedContext", "catchAllCause", "matchCause", "die", "defect", "failCause", "dieSync", "failCauseSync", "discard", "map", "empty", "context", "fromEffectContext", "extendScope", "Object", "create", "proto", "OP_EXTEND_SCOPE", "fail", "error", "failSync", "flatten", "tag", "get", "fresh", "OP_FRESH", "fromEffect", "a", "b", "tagFirst", "isTag", "service", "make", "fromEffectDiscard", "OP_FROM_EFFECT", "fiberRefLocally", "ref", "locallyEffect", "locally", "fiberRefLocallyWith", "fiberRefLocallyScoped", "scopedDiscard", "fiberRefLocallyScopedWith", "fromFunction", "tagA", "tagB", "launch", "scopedEffect", "zipRight", "never", "mapError", "fold", "OP_FOLD", "failureOrCause", "left", "right", "memoize", "merge", "that", "mergeAll", "layers", "final", "i", "length", "orDie", "orElse", "passthrough", "project", "unsafeGet", "retry", "schedule", "suspend", "stateTag", "GenericTag", "succeed", "state", "initial", "retryLoop", "retryUpdate", "currentTimeMillis", "now", "step", "decision", "isDone", "sleep", "millis", "start", "intervals", "as", "scoped", "scopedContext", "OP_SCOPED", "core", "fiberRuntime", "acquireRelease", "scopeMake", "exit", "close", "Scope", "resource", "Context", "OP_SUSPEND", "syncContext", "tap", "tapError", "e", "tapErrorCause", "toRuntime", "runtime", "toRuntimeWithMemoMap", "provide", "provideTo", "OP_PROVIDE", "OP_PROVIDE_MERGE", "enumerable", "provideMerge", "OP_ZIP_WITH", "unwrapEffect", "unwrapScoped", "annotateLogs", "args", "isLayer", "arguments", "currentLogAnnotations", "set", "annotations", "entries", "reduce", "acc", "key", "annotateSpans", "currentTracerSpanAnnotations", "withSpan", "dataFirst", "name", "options", "addSpanStackTrace", "onEnd", "makeSpanScoped", "span", "addFinalizer", "withParentSpan", "spanTag", "provideSomeLayer", "acquireUseRelease", "provideSomeContext", "scopeClose", "provideSomeRuntime", "rt", "patchRefs", "diff", "defaultRuntime", "fiberRefs", "patchFlags", "runtimeFlags", "uninterruptibleMask", "restore", "withFiberRuntime", "fiber", "oldContext", "getFiberRef", "currentContext", "oldRefs", "getFiberRefs", "newRefs", "patch", "id", "oldFlags", "_runtimeFlags", "newFlags", "rollbackRefs", "rollbackFlags", "setFiberRefs", "ensuring", "void", "effect_provide", "source", "isContext", "console", "core", "map", "fiberRefGet", "currentServices", "Context", "get", "consoleTag", "consoleWith", "f", "fiberRefGetWith", "services", "withConsole", "dual", "effect", "value", "fiberRefLocallyWith", "add", "withConsoleScoped", "fiberRefLocallyScopedWith", "currentCache", "globalValue", "Symbol", "for", "fiberRefUnsafeMake", "unsafeMakeWith", "map", "deferredMake", "handle", "listeners", "Listeners", "seconds", "currentCacheEnabled", "fromRequest", "request", "dataSource", "flatMap", "isEffect", "succeed", "ds", "fiberIdWith", "id", "proxy", "Proxy", "fiberRefGetWith", "cacheEnabled", "cached", "cache", "getEither", "orNew", "_tag", "left", "interrupted", "invalidateWhen", "entry", "increment", "uninterruptibleMask", "restore", "exit", "blocked", "empty", "deferredAwait", "decrement", "right", "single", "makeEntry", "result", "ownerId", "state", "completed", "ref", "ensuring", "sync", "cacheRequest", "void", "deferredComplete", "withRequestCaching", "dual", "self", "strategy", "fiberRefLocally", "withRequestCache", "isRequest", "EffectTypeId", "isEffect", "cachedWithTTL", "cached", "cachedInvalidateWithTTL", "memoize", "cachedFunction", "once", "all", "allWith", "allSuccesses", "dropUntil", "dropWhile", "every", "exists", "filter", "filterMap", "findFirst", "firstSuccessOf", "forEach", "head", "mergeAll", "partition", "reduce", "reduceEffect", "reduceRight", "reduceWhile", "replicate", "replicateEffect", "takeUntil", "takeWhile", "validateAll", "validateFirst", "async", "asyncEffect", "custom", "withFiberRuntime", "fail", "failSync", "failCause", "failCauseSync", "die", "dieMessage", "dieSync", "gen", "never", "none", "promise", "succeed", "succeedNone", "succeedSome", "suspend", "sync", "_void", "void", "yieldNow", "_catch", "catchAll", "catchAllCause", "catchAllDefect", "catchIf", "catchSome", "catchSomeCause", "catchSomeDefect", "catchTag", "catchTags", "cause", "eventually", "ignore", "ignoreLogged", "parallelErrors", "sandbox", "retry", "retry_combined", "retryOrElse", "retryOrElse_Effect", "try_", "tryMap", "tryMapPromise", "tryPromise", "unsandbox", "allowInterrupt", "checkInterruptible", "disconnect", "interrupt", "interruptWith", "interruptible", "interruptibleMask", "onInterrupt", "uninterruptible", "uninterruptibleMask", "liftPredicate", "as", "asSome", "asSomeError", "asVoid", "flip", "flipWith", "map", "mapAccum", "mapBoth", "mapError", "mapErrorCause", "merge", "negate", "acquireRelease", "acquireReleaseInterruptible", "acquireUseRelease", "addFinalizer", "ensuring", "onError", "onExit", "parallelFinalizers", "finalizersMask", "sequentialFinalizers", "scope", "scopeWith", "scoped", "scopedEffect", "using", "withEarlyRelease", "awaitAllChildren", "daemonChildren", "descriptor", "descriptorWith", "diffFiberRefs", "ensuringChild", "ensuringChildren", "fiberId", "fiberIdWith", "fork", "forkDaemon", "forkAll", "forkIn", "forkScoped", "forkWithErrorHandler", "fromFiber", "fromFiberEffect", "supervised", "transplant", "withConcurrency", "withScheduler", "withSchedulingPriority", "withMaxOpsBeforeYield", "clock", "clockWith", "withClockScoped", "withClock", "console", "consoleWith", "withConsoleScoped", "withConsole", "delay", "sleep", "timed", "timedWith", "timeout", "timeoutOption", "timeoutFail", "timeoutFailCause", "timeoutTo", "configProviderWith", "withConfigProvider", "withConfigProviderScoped", "context", "contextWith", "contextWithEffect", "mapInputContext", "provide", "effect_provide", "provideService", "provideServiceEffect", "serviceFunction", "serviceFunctionEffect", "serviceFunctions", "serviceConstants", "serviceMembers", "serviceOption", "serviceOptional", "updateService", "Do", "bind", "bindTo", "let_", "either", "exit", "intoDeferred", "option", "if_", "filterOrDie", "filterOrDieMessage", "filterOrElse", "filterOrFail", "unless", "unlessEffect", "when", "whenEffect", "whenFiberRef", "whenRef", "flatMap", "andThen", "flatten", "raceAll", "race", "raceFirst", "raceWith", "summarized", "tap", "tapBoth", "tapDefect", "tapError", "tapErrorTag", "tapErrorCause", "forever", "iterate", "loop", "repeat", "repeat_combined", "repeatN", "repeatOrElse", "repeatOrElse_Effect", "schedule", "schedule_Effect", "scheduleForked", "scheduleFrom", "scheduleFrom_Effect", "whileLoop", "getFiberRefs", "fiberRefs", "inheritFiberRefs", "locally", "fiberRefLocally", "locallyWith", "fiberRefLocallyWith", "locallyScoped", "fiberRefLocallyScoped", "locallyScopedWith", "fiberRefLocallyScopedWith", "patchFiberRefs", "setFiberRefs", "updateFiberRefs", "isFailure", "isSuccess", "match", "matchCause", "matchCauseEffect", "matchEffect", "log", "logWithLevel", "level", "message", "logTrace", "logDebug", "logInfo", "logWarning", "logError", "logFatal", "withLogSpan", "annotateLogs", "annotateLogsScoped", "logAnnotations", "withUnhandledErrorLogLevel", "orDie", "orDieWith", "orElse", "orElseFail", "orElseSucceed", "random", "randomWith", "withRandom", "withRandomScoped", "runtime", "getRuntimeFlags", "runtimeFlags", "patchRuntimeFlags", "updateRuntimeFlags", "withRuntimeFlagsPatch", "withRuntimeFlags", "withRuntimeFlagsPatchScoped", "withRuntimeFlagsScoped", "tagMetrics", "labelMetrics", "tagMetricsScoped", "labelMetricsScoped", "metricLabels", "withMetric", "unsafeMakeSemaphore", "makeSemaphore", "runFork", "unsafeForkEffect", "runCallback", "unsafeRunEffect", "runPromise", "unsafeRunPromiseEffect", "runPromiseExit", "unsafeRunPromiseExitEffect", "runSync", "unsafeRunSyncEffect", "runSyncExit", "unsafeRunSyncExitEffect", "validate", "validateWith", "zip", "zipOptions", "zipLeft", "zipLeftOptions", "zipRight", "zipRightOptions", "zipWith", "zipWithOptions", "ap", "dual", "self", "that", "f", "a", "blocked", "runRequestBlock", "step", "request", "args", "isRequest", "fromRequest", "cacheRequestResult", "cacheRequest", "withRequestBatching", "withRequestCaching", "withRequestCache", "tracer", "tracerWith", "withTracer", "withTracerScoped", "withTracerEnabled", "withTracerTiming", "annotateSpans", "annotateCurrentSpan", "currentSpan", "currentParentSpan", "spanAnnotations", "spanLinks", "linkSpans", "makeSpan", "makeSpanScoped", "useSpan", "withSpan", "functionWithSpan", "withSpanScoped", "withParentSpan", "fromNullable", "optionFromOptional", "Tag", "id", "limit", "Error", "stackTraceLimit", "creationError", "TagClass", "Object", "setPrototypeOf", "TagProto", "key", "defineProperty", "get", "stack", "cache", "Map", "done", "Proxy", "_target", "prop", "_receiver", "body", "has", "fn", "s", "set", "cn", "assign", "getPrototypeOf", "LayerTypeId", "MemoMapTypeId", "annotateLogs", "annotateSpans", "build", "buildWithMemoMap", "buildWithScope", "catchAll", "catchAllCause", "context", "die", "dieSync", "discard", "empty", "extendScope", "fail", "failCause", "failCauseSync", "failSync", "fiberRefLocallyScopedWith", "flatMap", "flatten", "fresh", "fromFunction", "isFresh", "isLayer", "launch", "locally", "locallyEffect", "locallyScoped", "locallyWith", "makeMemoMap", "map", "mapError", "match", "matchCause", "memoize", "merge", "mergeAll", "orDie", "orElse", "parentSpan", "passthrough", "project", "provide", "provideMerge", "retry", "scope", "scoped", "scopedContext", "scopedDiscard", "service", "setConfigProvider", "setTracer", "span", "succeed", "succeedContext", "suspend", "sync", "syncContext", "tap", "tapError", "tapErrorCause", "toRuntime", "toRuntimeWithMemoMap", "unwrapEffect", "unwrapScoped", "withParentSpan", "withSpan", "zipWith", "minimumLogLevel", "level", "scopedDiscard", "fiberRefLocallyScoped", "currentMinimumLogLevel", "withMinimumLogLevel", "dual", "self", "fiberRefLocally", "addLogger", "logger", "fiberRefLocallyScopedWith", "currentLoggers", "add", "addLoggerEffect", "effect", "unwrapEffect", "map", "addLoggerScoped", "unwrapScoped", "removeLogger", "remove", "replaceLogger", "that", "flatMap", "replaceLoggerEffect", "replaceLoggerScoped", "setConfigProvider", "configProvider", "scopedDiscard", "withConfigProviderScoped", "parentSpan", "span", "succeedContext", "make", "spanTag", "name", "options", "addSpanStackTrace", "scoped", "onEnd", "tap", "makeSpanScoped", "addFinalizer", "exit", "setTracer", "tracer", "withTracerScoped", "LayerTypeId", "MemoMapTypeId", "isLayer", "isFresh", "annotateLogs", "annotateSpans", "build", "buildWithScope", "catchAll", "catchAllCause", "context", "die", "dieSync", "discard", "effect", "fromEffect", "effectDiscard", "fromEffectDiscard", "effectContext", "fromEffectContext", "empty", "extendScope", "fail", "failSync", "failCause", "failCauseSync", "flatMap", "flatten", "fresh", "fromFunction", "launch", "map", "mapError", "match", "matchCause", "memoize", "merge", "mergeAll", "orDie", "orElse", "passthrough", "project", "locallyEffect", "locally", "fiberRefLocally", "locallyWith", "fiberRefLocallyWith", "locallyScoped", "fiberRefLocallyScoped", "fiberRefLocallyScopedWith", "retry", "scope", "scoped", "scopedDiscard", "scopedContext", "service", "succeed", "succeedContext", "suspend", "sync", "syncContext", "tap", "tapError", "tapErrorCause", "toRuntime", "toRuntimeWithMemoMap", "provide", "provideMerge", "zipWith", "unwrapEffect", "unwrapScoped", "setClock", "clock", "currentServices", "add", "clockTag", "setConfigProvider", "parentSpan", "setRequestBatching", "requestBatching", "currentRequestBatching", "setRequestCaching", "requestCaching", "currentCacheEnabled", "setRequestCache", "cache", "isEffect", "flatMap", "x", "currentCache", "setScheduler", "scheduler", "currentScheduler", "span", "setTracer", "setTracerEnabled", "enabled", "currentTracerEnabled", "setTracerTiming", "currentTracerTimingEnabled", "setUnhandledErrorLogLevel", "level", "currentUnhandledErrorLogLevel", "withSpan", "withParentSpan", "makeMemoMap", "buildWithMemoMap", "ConfigTypeId", "all", "array", "boolean", "chunk", "date", "duration", "fail", "hashMap", "hashSet", "integer", "isConfig", "literal", "logLevel", "map", "mapAttempt", "mapOrFail", "nested", "number", "option", "orElse", "orElseIf", "primitive", "redacted", "repeat", "secret", "string", "succeed", "suspend", "sync", "unwrap", "validate", "withDefault", "withDescription", "zip", "zipWith", "And", "ConfigErrorTypeId", "InvalidData", "MissingData", "Or", "SourceUnavailable", "Unsupported", "isAnd", "isConfigError", "isInvalidData", "isMissingData", "isMissingDataOnly", "isOr", "isSourceUnavailable", "isUnsupported", "prefixed", "reduceWithContext", "ConfigErrorTypeId", "And", "Or", "MissingData", "InvalidData", "SourceUnavailable", "Unsupported", "isConfigError", "isAnd", "isOr", "isInvalidData", "isMissingData", "isMissingDataOnly", "isSourceUnavailable", "isUnsupported", "prefixed", "reduceWithContext", "RedactedSymbolKey", "redactedRegistry", "globalValue", "WeakMap", "RedactedTypeId", "Symbol", "for", "proto", "_A", "_", "pipe", "pipeArguments", "arguments", "toString", "toJSON", "symbol", "hash", "combine", "get", "cached", "that", "isRedacted", "equals", "u", "hasProperty", "make", "value", "redacted", "Object", "create", "set", "self", "has", "Error", "unsafeWipe", "delete", "SecretSymbolKey", "SecretTypeId", "Symbol", "for", "make", "bytes", "secret", "Object", "create", "proto", "SecretTypeId", "defineProperty", "enumerable", "value", "redacted_", "redactedRegistry", "set", "map", "byte", "String", "fromCharCode", "join", "fromString", "text", "make", "split", "map", "char", "charCodeAt", "ConfigSymbolKey", "ConfigTypeId", "Symbol", "for", "configVariance", "_A", "_", "proto", "CommitPrototype", "commit", "config", "boolean", "name", "primitive", "text", "right", "error", "InvalidData", "left", "undefined", "nested", "array", "pipe", "chunk", "map", "toArray", "repeat", "unsafeFromArray", "date", "result", "Date", "parse", "Number", "isNaN", "fail", "message", "Object", "create", "_tag", "OP_FAIL", "Unsupported", "number", "parseFloat", "integer", "parseInt", "literal", "literals", "valuesString", "String", "join", "found", "find", "value", "logLevel", "mapOrFail", "string", "label", "toUpperCase", "level", "allLogLevels", "duration", "decodeUnknown", "fromOption", "dual", "self", "f", "a", "mapAttempt", "Error", "OP_MAP_OR_FAIL", "original", "OP_NESTED", "orElse", "that", "fallback", "OP_FALLBACK", "first", "second", "suspend", "condition", "constTrue", "orElseIf", "options", "if", "option", "some", "succeed", "none", "isMissingDataOnly", "description", "OP_PRIMITIVE", "OP_SEQUENCE", "secret", "fromString", "redacted", "make", "hashSet", "newConfig", "fromIterable", "all", "arg", "Array", "isArray", "tuple", "iterator", "struct", "r", "entries", "length", "rest", "slice", "key", "zipWith", "record", "constant", "OP_CONSTANT", "lazy", "OP_LAZY", "sync", "hashMap", "table", "OP_HASHMAP", "valueConfig", "isConfig", "u", "hasProperty", "x", "i", "unwrap", "wrapped", "fromEntries", "k", "validate", "validation", "withDefault", "def", "withDescription", "described", "OP_DESCRIBED", "zip", "b", "OP_ZIP_WITH", "ConfigTypeId", "all", "array", "boolean", "chunk", "date", "fail", "number", "integer", "literal", "logLevel", "duration", "isConfig", "map", "mapAttempt", "mapOrFail", "nested", "orElse", "orElseIf", "option", "primitive", "repeat", "secret", "redacted", "hashSet", "string", "succeed", "suspend", "sync", "hashMap", "unwrap", "validate", "withDefault", "withDescription", "zip", "zipWith", "ConfigProviderTypeId", "FlatConfigProviderTypeId", "constantCase", "fromEnv", "fromFlat", "fromJson", "fromMap", "kebabCase", "lowerCase", "make", "makeFlat", "mapInputPath", "nested", "orElse", "snakeCase", "unnested", "upperCase", "within", "ConfigProviderTypeId", "FlatConfigProviderTypeId", "ConfigProvider", "configProviderTag", "make", "makeFlat", "fromEnv", "fromFlat", "fromJson", "fromMap", "constantCase", "mapInputPath", "kebabCase", "lowerCase", "nested", "orElse", "unnested", "snakeCase", "upperCase", "within", "andThen", "empty", "mapName", "nested", "unnested", "empty", "andThen", "mapName", "nested", "unnested", "LoggerTypeId", "add", "defaultLogger", "filterLogLevel", "isLogger", "jsonLogger", "logfmtLogger", "make", "map", "mapInput", "mapInputOptions", "minimumLogLevel", "none", "pretty", "prettyLogger", "remove", "replace", "simple", "stringLogger", "structuredLogger", "succeed", "sync", "test", "tracerLogger", "withMinimumLogLevel", "zip", "zipLeft", "zipRight", "test", "dual", "self", "input", "log", "fiberId", "none", "logLevel", "logLevelInfo", "message", "cause", "empty", "context", "spans", "annotations", "date", "Date", "LoggerTypeId", "make", "makeLogger", "add", "addLogger", "addEffect", "addLoggerEffect", "addScoped", "addLoggerScoped", "mapInput", "mapInputOptions", "filterLogLevel", "map", "batched", "batchedLogger", "withConsoleLog", "loggerWithConsoleLog", "withConsoleError", "loggerWithConsoleError", "none", "remove", "removeLogger", "replace", "replaceLogger", "replaceEffect", "replaceLoggerEffect", "replaceScoped", "replaceLoggerScoped", "simple", "succeed", "sync", "test", "withMinimumLogLevel", "withSpanAnnotations", "loggerWithSpanAnnotations", "zip", "zipLeft", "zipRight", "defaultLogger", "jsonLogger", "logfmtLogger", "stringLogger", "prettyLogger", "structuredLogger", "tracerLogger", "json", "logFmt", "logFmtLogger", "pretty", "structured", "minimumLogLevel", "isLogger", "RedactedTypeId", "getEquivalence", "isRedacted", "make", "unsafeWipe", "value", "RedactedTypeId", "isRedacted", "make", "value", "unsafeWipe", "getEquivalence", "isEquivalent", "x", "y", "match", "value", "inputs", "config", "entries", "values", "isMissingData", "isInvalidData", "runMain", "defaultTeardown", "exit", "onExit", "isFailure", "isInterruptedOnly", "cause", "runMain", "effect", "options", "teardown", "defaultTeardown", "keepAlive", "setInterval", "fiber", "runFork", "disableErrorReporting", "tapErrorCause", "cause", "isInterruptedOnly", "void", "logError", "addObserver", "exit", "clearInterval", "code", "process", "onSigint", "removeListener", "unsafeInterruptAsFork", "id", "once", "runMain", "runMain", "effect", "import_core", "primitive", "core", "inputs", "github"]
}
