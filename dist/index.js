"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all7) => {
  for (var name in all7)
    __defProp(target, name, { get: all7[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@actions/github/lib/context.js
var require_context = __commonJS({
  "node_modules/@actions/github/lib/context.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Context = void 0;
    var fs_1 = require("fs");
    var os_1 = require("os");
    var Context = class {
      /**
       * Hydrate the context from the environment
       */
      constructor() {
        var _a, _b, _c;
        this.payload = {};
        if (process.env.GITHUB_EVENT_PATH) {
          if ((0, fs_1.existsSync)(process.env.GITHUB_EVENT_PATH)) {
            this.payload = JSON.parse((0, fs_1.readFileSync)(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
          } else {
            const path = process.env.GITHUB_EVENT_PATH;
            process.stdout.write(`GITHUB_EVENT_PATH ${path} does not exist${os_1.EOL}`);
          }
        }
        this.eventName = process.env.GITHUB_EVENT_NAME;
        this.sha = process.env.GITHUB_SHA;
        this.ref = process.env.GITHUB_REF;
        this.workflow = process.env.GITHUB_WORKFLOW;
        this.action = process.env.GITHUB_ACTION;
        this.actor = process.env.GITHUB_ACTOR;
        this.job = process.env.GITHUB_JOB;
        this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
        this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
        this.apiUrl = (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0 ? _a : `https://api.github.com`;
        this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
        this.graphqlUrl = (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
      }
      get issue() {
        const payload = this.payload;
        return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
      }
      get repo() {
        if (process.env.GITHUB_REPOSITORY) {
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
          return { owner, repo };
        }
        if (this.payload.repository) {
          return {
            owner: this.payload.repository.owner.login,
            repo: this.payload.repository.name
          };
        }
        throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
      }
    };
    exports2.Context = Context;
  }
});

// node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({
  "node_modules/@actions/http-client/lib/proxy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkBypass = exports2.getProxyUrl = void 0;
    function getProxyUrl(reqUrl) {
      const usingSsl = reqUrl.protocol === "https:";
      if (checkBypass(reqUrl)) {
        return void 0;
      }
      const proxyVar = (() => {
        if (usingSsl) {
          return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
        } else {
          return process.env["http_proxy"] || process.env["HTTP_PROXY"];
        }
      })();
      if (proxyVar) {
        try {
          return new DecodedURL(proxyVar);
        } catch (_a) {
          if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://"))
            return new DecodedURL(`http://${proxyVar}`);
        }
      } else {
        return void 0;
      }
    }
    exports2.getProxyUrl = getProxyUrl;
    function checkBypass(reqUrl) {
      if (!reqUrl.hostname) {
        return false;
      }
      const reqHost = reqUrl.hostname;
      if (isLoopbackAddress(reqHost)) {
        return true;
      }
      const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
      if (!noProxy) {
        return false;
      }
      let reqPort;
      if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
      } else if (reqUrl.protocol === "http:") {
        reqPort = 80;
      } else if (reqUrl.protocol === "https:") {
        reqPort = 443;
      }
      const upperReqHosts = [reqUrl.hostname.toUpperCase()];
      if (typeof reqPort === "number") {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
      }
      for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) {
        if (upperNoProxyItem === "*" || upperReqHosts.some((x) => x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) {
          return true;
        }
      }
      return false;
    }
    exports2.checkBypass = checkBypass;
    function isLoopbackAddress(host) {
      const hostLower = host.toLowerCase();
      return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
    }
    var DecodedURL = class extends URL {
      constructor(url, base) {
        super(url, base);
        this._decodedUsername = decodeURIComponent(super.username);
        this._decodedPassword = decodeURIComponent(super.password);
      }
      get username() {
        return this._decodedUsername;
      }
      get password() {
        return this._decodedPassword;
      }
    };
  }
});

// node_modules/tunnel/lib/tunnel.js
var require_tunnel = __commonJS({
  "node_modules/tunnel/lib/tunnel.js"(exports2) {
    "use strict";
    var net = require("net");
    var tls = require("tls");
    var http = require("http");
    var https = require("https");
    var events = require("events");
    var assert = require("assert");
    var util = require("util");
    exports2.httpOverHttp = httpOverHttp;
    exports2.httpsOverHttp = httpsOverHttp;
    exports2.httpOverHttps = httpOverHttps;
    exports2.httpsOverHttps = httpsOverHttps;
    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      return agent;
    }
    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      return agent;
    }
    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function TunnelingAgent(options) {
      var self2 = this;
      self2.options = options || {};
      self2.proxyOptions = self2.options.proxy || {};
      self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
      self2.requests = [];
      self2.sockets = [];
      self2.on("free", function onFree(socket, host, port, localAddress) {
        var options2 = toOptions(host, port, localAddress);
        for (var i = 0, len = self2.requests.length; i < len; ++i) {
          var pending3 = self2.requests[i];
          if (pending3.host === options2.host && pending3.port === options2.port) {
            self2.requests.splice(i, 1);
            pending3.request.onSocket(socket);
            return;
          }
        }
        socket.destroy();
        self2.removeSocket(socket);
      });
    }
    util.inherits(TunnelingAgent, events.EventEmitter);
    TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
      var self2 = this;
      var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
      if (self2.sockets.length >= this.maxSockets) {
        self2.requests.push(options);
        return;
      }
      self2.createSocket(options, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
          self2.emit("free", socket, options);
        }
        function onCloseOrRemove(err) {
          self2.removeSocket(socket);
          socket.removeListener("free", onFree);
          socket.removeListener("close", onCloseOrRemove);
          socket.removeListener("agentRemove", onCloseOrRemove);
        }
      });
    };
    TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
      var self2 = this;
      var placeholder = {};
      self2.sockets.push(placeholder);
      var connectOptions = mergeOptions({}, self2.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false,
        headers: {
          host: options.host + ":" + options.port
        }
      });
      if (options.localAddress) {
        connectOptions.localAddress = options.localAddress;
      }
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
      }
      debug("making CONNECT request");
      var connectReq = self2.request(connectOptions);
      connectReq.useChunkedEncodingByDefault = false;
      connectReq.once("response", onResponse);
      connectReq.once("upgrade", onUpgrade);
      connectReq.once("connect", onConnect);
      connectReq.once("error", onError3);
      connectReq.end();
      function onResponse(res) {
        res.upgrade = true;
      }
      function onUpgrade(res, socket, head5) {
        process.nextTick(function() {
          onConnect(res, socket, head5);
        });
      }
      function onConnect(res, socket, head5) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
          debug(
            "tunneling socket could not be established, statusCode=%d",
            res.statusCode
          );
          socket.destroy();
          var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
          return;
        }
        if (head5.length > 0) {
          debug("got illegal response body from proxy");
          socket.destroy();
          var error = new Error("got illegal response body from proxy");
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
          return;
        }
        debug("tunneling connection has established");
        self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
      }
      function onError3(cause3) {
        connectReq.removeAllListeners();
        debug(
          "tunneling socket could not be established, cause=%s\n",
          cause3.message,
          cause3.stack
        );
        var error = new Error("tunneling socket could not be established, cause=" + cause3.message);
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self2.removeSocket(placeholder);
      }
    };
    TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket);
      if (pos === -1) {
        return;
      }
      this.sockets.splice(pos, 1);
      var pending3 = this.requests.shift();
      if (pending3) {
        this.createSocket(pending3, function(socket2) {
          pending3.request.onSocket(socket2);
        });
      }
    };
    function createSecureSocket(options, cb) {
      var self2 = this;
      TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
        var hostHeader = options.request.getHeader("host");
        var tlsOptions = mergeOptions({}, self2.options, {
          socket,
          servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
        });
        var secureSocket = tls.connect(0, tlsOptions);
        self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
      });
    }
    function toOptions(host, port, localAddress) {
      if (typeof host === "string") {
        return {
          host,
          port,
          localAddress
        };
      }
      return host;
    }
    function mergeOptions(target) {
      for (var i = 1, len = arguments.length; i < len; ++i) {
        var overrides = arguments[i];
        if (typeof overrides === "object") {
          var keys5 = Object.keys(overrides);
          for (var j = 0, keyLen = keys5.length; j < keyLen; ++j) {
            var k = keys5[j];
            if (overrides[k] !== void 0) {
              target[k] = overrides[k];
            }
          }
        }
      }
      return target;
    }
    var debug;
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === "string") {
          args[0] = "TUNNEL: " + args[0];
        } else {
          args.unshift("TUNNEL:");
        }
        console.error.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports2.debug = debug;
  }
});

// node_modules/tunnel/index.js
var require_tunnel2 = __commonJS({
  "node_modules/tunnel/index.js"(exports2, module2) {
    module2.exports = require_tunnel();
  }
});

// node_modules/undici/lib/core/symbols.js
var require_symbols = __commonJS({
  "node_modules/undici/lib/core/symbols.js"(exports2, module2) {
    module2.exports = {
      kClose: Symbol("close"),
      kDestroy: Symbol("destroy"),
      kDispatch: Symbol("dispatch"),
      kUrl: Symbol("url"),
      kWriting: Symbol("writing"),
      kResuming: Symbol("resuming"),
      kQueue: Symbol("queue"),
      kConnect: Symbol("connect"),
      kConnecting: Symbol("connecting"),
      kHeadersList: Symbol("headers list"),
      kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
      kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
      kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
      kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
      kKeepAlive: Symbol("keep alive"),
      kHeadersTimeout: Symbol("headers timeout"),
      kBodyTimeout: Symbol("body timeout"),
      kServerName: Symbol("server name"),
      kLocalAddress: Symbol("local address"),
      kHost: Symbol("host"),
      kNoRef: Symbol("no ref"),
      kBodyUsed: Symbol("used"),
      kRunning: Symbol("running"),
      kBlocking: Symbol("blocking"),
      kPending: Symbol("pending"),
      kSize: Symbol("size"),
      kBusy: Symbol("busy"),
      kQueued: Symbol("queued"),
      kFree: Symbol("free"),
      kConnected: Symbol("connected"),
      kClosed: Symbol("closed"),
      kNeedDrain: Symbol("need drain"),
      kReset: Symbol("reset"),
      kDestroyed: Symbol.for("nodejs.stream.destroyed"),
      kMaxHeadersSize: Symbol("max headers size"),
      kRunningIdx: Symbol("running index"),
      kPendingIdx: Symbol("pending index"),
      kError: Symbol("error"),
      kClients: Symbol("clients"),
      kClient: Symbol("client"),
      kParser: Symbol("parser"),
      kOnDestroyed: Symbol("destroy callbacks"),
      kPipelining: Symbol("pipelining"),
      kSocket: Symbol("socket"),
      kHostHeader: Symbol("host header"),
      kConnector: Symbol("connector"),
      kStrictContentLength: Symbol("strict content length"),
      kMaxRedirections: Symbol("maxRedirections"),
      kMaxRequests: Symbol("maxRequestsPerClient"),
      kProxy: Symbol("proxy agent options"),
      kCounter: Symbol("socket request counter"),
      kInterceptors: Symbol("dispatch interceptors"),
      kMaxResponseSize: Symbol("max response size"),
      kHTTP2Session: Symbol("http2Session"),
      kHTTP2SessionState: Symbol("http2Session state"),
      kHTTP2BuildRequest: Symbol("http2 build request"),
      kHTTP1BuildRequest: Symbol("http1 build request"),
      kHTTP2CopyHeaders: Symbol("http2 copy headers"),
      kHTTPConnVersion: Symbol("http connection version"),
      kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
      kConstruct: Symbol("constructable")
    };
  }
});

// node_modules/undici/lib/core/errors.js
var require_errors = __commonJS({
  "node_modules/undici/lib/core/errors.js"(exports2, module2) {
    "use strict";
    var UndiciError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "UndiciError";
        this.code = "UND_ERR";
      }
    };
    var ConnectTimeoutError = class _ConnectTimeoutError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ConnectTimeoutError);
        this.name = "ConnectTimeoutError";
        this.message = message || "Connect Timeout Error";
        this.code = "UND_ERR_CONNECT_TIMEOUT";
      }
    };
    var HeadersTimeoutError = class _HeadersTimeoutError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _HeadersTimeoutError);
        this.name = "HeadersTimeoutError";
        this.message = message || "Headers Timeout Error";
        this.code = "UND_ERR_HEADERS_TIMEOUT";
      }
    };
    var HeadersOverflowError = class _HeadersOverflowError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _HeadersOverflowError);
        this.name = "HeadersOverflowError";
        this.message = message || "Headers Overflow Error";
        this.code = "UND_ERR_HEADERS_OVERFLOW";
      }
    };
    var BodyTimeoutError = class _BodyTimeoutError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _BodyTimeoutError);
        this.name = "BodyTimeoutError";
        this.message = message || "Body Timeout Error";
        this.code = "UND_ERR_BODY_TIMEOUT";
      }
    };
    var ResponseStatusCodeError = class _ResponseStatusCodeError extends UndiciError {
      constructor(message, statusCode, headers, body) {
        super(message);
        Error.captureStackTrace(this, _ResponseStatusCodeError);
        this.name = "ResponseStatusCodeError";
        this.message = message || "Response Status Code Error";
        this.code = "UND_ERR_RESPONSE_STATUS_CODE";
        this.body = body;
        this.status = statusCode;
        this.statusCode = statusCode;
        this.headers = headers;
      }
    };
    var InvalidArgumentError = class _InvalidArgumentError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InvalidArgumentError);
        this.name = "InvalidArgumentError";
        this.message = message || "Invalid Argument Error";
        this.code = "UND_ERR_INVALID_ARG";
      }
    };
    var InvalidReturnValueError = class _InvalidReturnValueError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InvalidReturnValueError);
        this.name = "InvalidReturnValueError";
        this.message = message || "Invalid Return Value Error";
        this.code = "UND_ERR_INVALID_RETURN_VALUE";
      }
    };
    var RequestAbortedError = class _RequestAbortedError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _RequestAbortedError);
        this.name = "AbortError";
        this.message = message || "Request aborted";
        this.code = "UND_ERR_ABORTED";
      }
    };
    var InformationalError = class _InformationalError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InformationalError);
        this.name = "InformationalError";
        this.message = message || "Request information";
        this.code = "UND_ERR_INFO";
      }
    };
    var RequestContentLengthMismatchError = class _RequestContentLengthMismatchError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _RequestContentLengthMismatchError);
        this.name = "RequestContentLengthMismatchError";
        this.message = message || "Request body length does not match content-length header";
        this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
      }
    };
    var ResponseContentLengthMismatchError = class _ResponseContentLengthMismatchError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ResponseContentLengthMismatchError);
        this.name = "ResponseContentLengthMismatchError";
        this.message = message || "Response body length does not match content-length header";
        this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
      }
    };
    var ClientDestroyedError = class _ClientDestroyedError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ClientDestroyedError);
        this.name = "ClientDestroyedError";
        this.message = message || "The client is destroyed";
        this.code = "UND_ERR_DESTROYED";
      }
    };
    var ClientClosedError = class _ClientClosedError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ClientClosedError);
        this.name = "ClientClosedError";
        this.message = message || "The client is closed";
        this.code = "UND_ERR_CLOSED";
      }
    };
    var SocketError = class _SocketError extends UndiciError {
      constructor(message, socket) {
        super(message);
        Error.captureStackTrace(this, _SocketError);
        this.name = "SocketError";
        this.message = message || "Socket error";
        this.code = "UND_ERR_SOCKET";
        this.socket = socket;
      }
    };
    var NotSupportedError = class _NotSupportedError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _NotSupportedError);
        this.name = "NotSupportedError";
        this.message = message || "Not supported error";
        this.code = "UND_ERR_NOT_SUPPORTED";
      }
    };
    var BalancedPoolMissingUpstreamError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, NotSupportedError);
        this.name = "MissingUpstreamError";
        this.message = message || "No upstream has been added to the BalancedPool";
        this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
      }
    };
    var HTTPParserError = class _HTTPParserError extends Error {
      constructor(message, code, data) {
        super(message);
        Error.captureStackTrace(this, _HTTPParserError);
        this.name = "HTTPParserError";
        this.code = code ? `HPE_${code}` : void 0;
        this.data = data ? data.toString() : void 0;
      }
    };
    var ResponseExceededMaxSizeError = class _ResponseExceededMaxSizeError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ResponseExceededMaxSizeError);
        this.name = "ResponseExceededMaxSizeError";
        this.message = message || "Response content exceeded max size";
        this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
      }
    };
    var RequestRetryError = class _RequestRetryError extends UndiciError {
      constructor(message, code, { headers, data }) {
        super(message);
        Error.captureStackTrace(this, _RequestRetryError);
        this.name = "RequestRetryError";
        this.message = message || "Request retry error";
        this.code = "UND_ERR_REQ_RETRY";
        this.statusCode = code;
        this.data = data;
        this.headers = headers;
      }
    };
    module2.exports = {
      HTTPParserError,
      UndiciError,
      HeadersTimeoutError,
      HeadersOverflowError,
      BodyTimeoutError,
      RequestContentLengthMismatchError,
      ConnectTimeoutError,
      ResponseStatusCodeError,
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError,
      ClientDestroyedError,
      ClientClosedError,
      InformationalError,
      SocketError,
      NotSupportedError,
      ResponseContentLengthMismatchError,
      BalancedPoolMissingUpstreamError,
      ResponseExceededMaxSizeError,
      RequestRetryError
    };
  }
});

// node_modules/undici/lib/core/constants.js
var require_constants = __commonJS({
  "node_modules/undici/lib/core/constants.js"(exports2, module2) {
    "use strict";
    var headerNameLowerCasedRecord = {};
    var wellknownHeaderNames = [
      "Accept",
      "Accept-Encoding",
      "Accept-Language",
      "Accept-Ranges",
      "Access-Control-Allow-Credentials",
      "Access-Control-Allow-Headers",
      "Access-Control-Allow-Methods",
      "Access-Control-Allow-Origin",
      "Access-Control-Expose-Headers",
      "Access-Control-Max-Age",
      "Access-Control-Request-Headers",
      "Access-Control-Request-Method",
      "Age",
      "Allow",
      "Alt-Svc",
      "Alt-Used",
      "Authorization",
      "Cache-Control",
      "Clear-Site-Data",
      "Connection",
      "Content-Disposition",
      "Content-Encoding",
      "Content-Language",
      "Content-Length",
      "Content-Location",
      "Content-Range",
      "Content-Security-Policy",
      "Content-Security-Policy-Report-Only",
      "Content-Type",
      "Cookie",
      "Cross-Origin-Embedder-Policy",
      "Cross-Origin-Opener-Policy",
      "Cross-Origin-Resource-Policy",
      "Date",
      "Device-Memory",
      "Downlink",
      "ECT",
      "ETag",
      "Expect",
      "Expect-CT",
      "Expires",
      "Forwarded",
      "From",
      "Host",
      "If-Match",
      "If-Modified-Since",
      "If-None-Match",
      "If-Range",
      "If-Unmodified-Since",
      "Keep-Alive",
      "Last-Modified",
      "Link",
      "Location",
      "Max-Forwards",
      "Origin",
      "Permissions-Policy",
      "Pragma",
      "Proxy-Authenticate",
      "Proxy-Authorization",
      "RTT",
      "Range",
      "Referer",
      "Referrer-Policy",
      "Refresh",
      "Retry-After",
      "Sec-WebSocket-Accept",
      "Sec-WebSocket-Extensions",
      "Sec-WebSocket-Key",
      "Sec-WebSocket-Protocol",
      "Sec-WebSocket-Version",
      "Server",
      "Server-Timing",
      "Service-Worker-Allowed",
      "Service-Worker-Navigation-Preload",
      "Set-Cookie",
      "SourceMap",
      "Strict-Transport-Security",
      "Supports-Loading-Mode",
      "TE",
      "Timing-Allow-Origin",
      "Trailer",
      "Transfer-Encoding",
      "Upgrade",
      "Upgrade-Insecure-Requests",
      "User-Agent",
      "Vary",
      "Via",
      "WWW-Authenticate",
      "X-Content-Type-Options",
      "X-DNS-Prefetch-Control",
      "X-Frame-Options",
      "X-Permitted-Cross-Domain-Policies",
      "X-Powered-By",
      "X-Requested-With",
      "X-XSS-Protection"
    ];
    for (let i = 0; i < wellknownHeaderNames.length; ++i) {
      const key = wellknownHeaderNames[i];
      const lowerCasedKey = key.toLowerCase();
      headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;
    }
    Object.setPrototypeOf(headerNameLowerCasedRecord, null);
    module2.exports = {
      wellknownHeaderNames,
      headerNameLowerCasedRecord
    };
  }
});

// node_modules/undici/lib/core/util.js
var require_util = __commonJS({
  "node_modules/undici/lib/core/util.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var { kDestroyed, kBodyUsed } = require_symbols();
    var { IncomingMessage } = require("http");
    var stream = require("stream");
    var net = require("net");
    var { InvalidArgumentError } = require_errors();
    var { Blob: Blob2 } = require("buffer");
    var nodeUtil = require("util");
    var { stringify: stringify2 } = require("querystring");
    var { headerNameLowerCasedRecord } = require_constants();
    var [nodeMajor, nodeMinor] = process.versions.node.split(".").map((v) => Number(v));
    function nop() {
    }
    function isStream(obj) {
      return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
    }
    function isBlobLike(object) {
      return Blob2 && object instanceof Blob2 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
    }
    function buildURL(url, queryParams) {
      if (url.includes("?") || url.includes("#")) {
        throw new Error('Query params cannot be passed when url already contains "?" or "#".');
      }
      const stringified = stringify2(queryParams);
      if (stringified) {
        url += "?" + stringified;
      }
      return url;
    }
    function parseURL(url) {
      if (typeof url === "string") {
        url = new URL(url);
        if (!/^https?:/.test(url.origin || url.protocol)) {
          throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
        }
        return url;
      }
      if (!url || typeof url !== "object") {
        throw new InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
      }
      if (!/^https?:/.test(url.origin || url.protocol)) {
        throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
      }
      if (!(url instanceof URL)) {
        if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) {
          throw new InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
        }
        if (url.path != null && typeof url.path !== "string") {
          throw new InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
        }
        if (url.pathname != null && typeof url.pathname !== "string") {
          throw new InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
        }
        if (url.hostname != null && typeof url.hostname !== "string") {
          throw new InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
        }
        if (url.origin != null && typeof url.origin !== "string") {
          throw new InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
        }
        const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
        let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
        let path = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
        if (origin.endsWith("/")) {
          origin = origin.substring(0, origin.length - 1);
        }
        if (path && !path.startsWith("/")) {
          path = `/${path}`;
        }
        url = new URL(origin + path);
      }
      return url;
    }
    function parseOrigin(url) {
      url = parseURL(url);
      if (url.pathname !== "/" || url.search || url.hash) {
        throw new InvalidArgumentError("invalid url");
      }
      return url;
    }
    function getHostname(host) {
      if (host[0] === "[") {
        const idx2 = host.indexOf("]");
        assert(idx2 !== -1);
        return host.substring(1, idx2);
      }
      const idx = host.indexOf(":");
      if (idx === -1) return host;
      return host.substring(0, idx);
    }
    function getServerName(host) {
      if (!host) {
        return null;
      }
      assert.strictEqual(typeof host, "string");
      const servername = getHostname(host);
      if (net.isIP(servername)) {
        return "";
      }
      return servername;
    }
    function deepClone(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    function isAsyncIterable(obj) {
      return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
    }
    function isIterable2(obj) {
      return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
    }
    function bodyLength(body) {
      if (body == null) {
        return 0;
      } else if (isStream(body)) {
        const state = body._readableState;
        return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
      } else if (isBlobLike(body)) {
        return body.size != null ? body.size : null;
      } else if (isBuffer(body)) {
        return body.byteLength;
      }
      return null;
    }
    function isDestroyed(stream2) {
      return !stream2 || !!(stream2.destroyed || stream2[kDestroyed]);
    }
    function isReadableAborted(stream2) {
      const state = stream2 && stream2._readableState;
      return isDestroyed(stream2) && state && !state.endEmitted;
    }
    function destroy(stream2, err) {
      if (stream2 == null || !isStream(stream2) || isDestroyed(stream2)) {
        return;
      }
      if (typeof stream2.destroy === "function") {
        if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {
          stream2.socket = null;
        }
        stream2.destroy(err);
      } else if (err) {
        process.nextTick((stream3, err2) => {
          stream3.emit("error", err2);
        }, stream2, err);
      }
      if (stream2.destroyed !== true) {
        stream2[kDestroyed] = true;
      }
    }
    var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
    function parseKeepAliveTimeout(val) {
      const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
      return m ? parseInt(m[1], 10) * 1e3 : null;
    }
    function headerNameToString(value3) {
      return headerNameLowerCasedRecord[value3] || value3.toLowerCase();
    }
    function parseHeaders(headers, obj = {}) {
      if (!Array.isArray(headers)) return headers;
      for (let i = 0; i < headers.length; i += 2) {
        const key = headers[i].toString().toLowerCase();
        let val = obj[key];
        if (!val) {
          if (Array.isArray(headers[i + 1])) {
            obj[key] = headers[i + 1].map((x) => x.toString("utf8"));
          } else {
            obj[key] = headers[i + 1].toString("utf8");
          }
        } else {
          if (!Array.isArray(val)) {
            val = [val];
            obj[key] = val;
          }
          val.push(headers[i + 1].toString("utf8"));
        }
      }
      if ("content-length" in obj && "content-disposition" in obj) {
        obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
      }
      return obj;
    }
    function parseRawHeaders(headers) {
      const ret = [];
      let hasContentLength = false;
      let contentDispositionIdx = -1;
      for (let n = 0; n < headers.length; n += 2) {
        const key = headers[n + 0].toString();
        const val = headers[n + 1].toString("utf8");
        if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
          ret.push(key, val);
          hasContentLength = true;
        } else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) {
          contentDispositionIdx = ret.push(key, val) - 1;
        } else {
          ret.push(key, val);
        }
      }
      if (hasContentLength && contentDispositionIdx !== -1) {
        ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
      }
      return ret;
    }
    function isBuffer(buffer) {
      return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
    }
    function validateHandler(handler, method, upgrade) {
      if (!handler || typeof handler !== "object") {
        throw new InvalidArgumentError("handler must be an object");
      }
      if (typeof handler.onConnect !== "function") {
        throw new InvalidArgumentError("invalid onConnect method");
      }
      if (typeof handler.onError !== "function") {
        throw new InvalidArgumentError("invalid onError method");
      }
      if (typeof handler.onBodySent !== "function" && handler.onBodySent !== void 0) {
        throw new InvalidArgumentError("invalid onBodySent method");
      }
      if (upgrade || method === "CONNECT") {
        if (typeof handler.onUpgrade !== "function") {
          throw new InvalidArgumentError("invalid onUpgrade method");
        }
      } else {
        if (typeof handler.onHeaders !== "function") {
          throw new InvalidArgumentError("invalid onHeaders method");
        }
        if (typeof handler.onData !== "function") {
          throw new InvalidArgumentError("invalid onData method");
        }
        if (typeof handler.onComplete !== "function") {
          throw new InvalidArgumentError("invalid onComplete method");
        }
      }
    }
    function isDisturbed(body) {
      return !!(body && (stream.isDisturbed ? stream.isDisturbed(body) || body[kBodyUsed] : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
    }
    function isErrored(body) {
      return !!(body && (stream.isErrored ? stream.isErrored(body) : /state: 'errored'/.test(
        nodeUtil.inspect(body)
      )));
    }
    function isReadable(body) {
      return !!(body && (stream.isReadable ? stream.isReadable(body) : /state: 'readable'/.test(
        nodeUtil.inspect(body)
      )));
    }
    function getSocketInfo(socket) {
      return {
        localAddress: socket.localAddress,
        localPort: socket.localPort,
        remoteAddress: socket.remoteAddress,
        remotePort: socket.remotePort,
        remoteFamily: socket.remoteFamily,
        timeout: socket.timeout,
        bytesWritten: socket.bytesWritten,
        bytesRead: socket.bytesRead
      };
    }
    async function* convertIterableToBuffer(iterable) {
      for await (const chunk4 of iterable) {
        yield Buffer.isBuffer(chunk4) ? chunk4 : Buffer.from(chunk4);
      }
    }
    var ReadableStream;
    function ReadableStreamFrom(iterable) {
      if (!ReadableStream) {
        ReadableStream = require("stream/web").ReadableStream;
      }
      if (ReadableStream.from) {
        return ReadableStream.from(convertIterableToBuffer(iterable));
      }
      let iterator;
      return new ReadableStream(
        {
          async start() {
            iterator = iterable[Symbol.asyncIterator]();
          },
          async pull(controller) {
            const { done: done7, value: value3 } = await iterator.next();
            if (done7) {
              queueMicrotask(() => {
                controller.close();
              });
            } else {
              const buf = Buffer.isBuffer(value3) ? value3 : Buffer.from(value3);
              controller.enqueue(new Uint8Array(buf));
            }
            return controller.desiredSize > 0;
          },
          async cancel(reason) {
            await iterator.return();
          }
        },
        0
      );
    }
    function isFormDataLike(object) {
      return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
    }
    function throwIfAborted(signal) {
      if (!signal) {
        return;
      }
      if (typeof signal.throwIfAborted === "function") {
        signal.throwIfAborted();
      } else {
        if (signal.aborted) {
          const err = new Error("The operation was aborted");
          err.name = "AbortError";
          throw err;
        }
      }
    }
    function addAbortListener(signal, listener) {
      if ("addEventListener" in signal) {
        signal.addEventListener("abort", listener, { once: true });
        return () => signal.removeEventListener("abort", listener);
      }
      signal.addListener("abort", listener);
      return () => signal.removeListener("abort", listener);
    }
    var hasToWellFormed = !!String.prototype.toWellFormed;
    function toUSVString(val) {
      if (hasToWellFormed) {
        return `${val}`.toWellFormed();
      } else if (nodeUtil.toUSVString) {
        return nodeUtil.toUSVString(val);
      }
      return `${val}`;
    }
    function parseRangeHeader(range) {
      if (range == null || range === "") return { start: 0, end: null, size: null };
      const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
      return m ? {
        start: parseInt(m[1]),
        end: m[2] ? parseInt(m[2]) : null,
        size: m[3] ? parseInt(m[3]) : null
      } : null;
    }
    var kEnumerableProperty = /* @__PURE__ */ Object.create(null);
    kEnumerableProperty.enumerable = true;
    module2.exports = {
      kEnumerableProperty,
      nop,
      isDisturbed,
      isErrored,
      isReadable,
      toUSVString,
      isReadableAborted,
      isBlobLike,
      parseOrigin,
      parseURL,
      getServerName,
      isStream,
      isIterable: isIterable2,
      isAsyncIterable,
      isDestroyed,
      headerNameToString,
      parseRawHeaders,
      parseHeaders,
      parseKeepAliveTimeout,
      destroy,
      bodyLength,
      deepClone,
      ReadableStreamFrom,
      isBuffer,
      validateHandler,
      getSocketInfo,
      isFormDataLike,
      buildURL,
      throwIfAborted,
      addAbortListener,
      parseRangeHeader,
      nodeMajor,
      nodeMinor,
      nodeHasAutoSelectFamily: nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 13,
      safeHTTPMethods: ["GET", "HEAD", "OPTIONS", "TRACE"]
    };
  }
});

// node_modules/undici/lib/timers.js
var require_timers = __commonJS({
  "node_modules/undici/lib/timers.js"(exports2, module2) {
    "use strict";
    var fastNow = Date.now();
    var fastNowTimeout;
    var fastTimers = [];
    function onTimeout() {
      fastNow = Date.now();
      let len = fastTimers.length;
      let idx = 0;
      while (idx < len) {
        const timer = fastTimers[idx];
        if (timer.state === 0) {
          timer.state = fastNow + timer.delay;
        } else if (timer.state > 0 && fastNow >= timer.state) {
          timer.state = -1;
          timer.callback(timer.opaque);
        }
        if (timer.state === -1) {
          timer.state = -2;
          if (idx !== len - 1) {
            fastTimers[idx] = fastTimers.pop();
          } else {
            fastTimers.pop();
          }
          len -= 1;
        } else {
          idx += 1;
        }
      }
      if (fastTimers.length > 0) {
        refreshTimeout();
      }
    }
    function refreshTimeout() {
      if (fastNowTimeout && fastNowTimeout.refresh) {
        fastNowTimeout.refresh();
      } else {
        clearTimeout(fastNowTimeout);
        fastNowTimeout = setTimeout(onTimeout, 1e3);
        if (fastNowTimeout.unref) {
          fastNowTimeout.unref();
        }
      }
    }
    var Timeout = class {
      constructor(callback, delay3, opaque) {
        this.callback = callback;
        this.delay = delay3;
        this.opaque = opaque;
        this.state = -2;
        this.refresh();
      }
      refresh() {
        if (this.state === -2) {
          fastTimers.push(this);
          if (!fastNowTimeout || fastTimers.length === 1) {
            refreshTimeout();
          }
        }
        this.state = 0;
      }
      clear() {
        this.state = -1;
      }
    };
    module2.exports = {
      setTimeout(callback, delay3, opaque) {
        return delay3 < 1e3 ? setTimeout(callback, delay3, opaque) : new Timeout(callback, delay3, opaque);
      },
      clearTimeout(timeout3) {
        if (timeout3 instanceof Timeout) {
          timeout3.clear();
        } else {
          clearTimeout(timeout3);
        }
      }
    };
  }
});

// node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
var require_sbmh = __commonJS({
  "node_modules/@fastify/busboy/deps/streamsearch/sbmh.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("node:events").EventEmitter;
    var inherits = require("node:util").inherits;
    function SBMH(needle) {
      if (typeof needle === "string") {
        needle = Buffer.from(needle);
      }
      if (!Buffer.isBuffer(needle)) {
        throw new TypeError("The needle has to be a String or a Buffer.");
      }
      const needleLength = needle.length;
      if (needleLength === 0) {
        throw new Error("The needle cannot be an empty String/Buffer.");
      }
      if (needleLength > 256) {
        throw new Error("The needle cannot have a length bigger than 256.");
      }
      this.maxMatches = Infinity;
      this.matches = 0;
      this._occ = new Array(256).fill(needleLength);
      this._lookbehind_size = 0;
      this._needle = needle;
      this._bufpos = 0;
      this._lookbehind = Buffer.alloc(needleLength);
      for (var i = 0; i < needleLength - 1; ++i) {
        this._occ[needle[i]] = needleLength - 1 - i;
      }
    }
    inherits(SBMH, EventEmitter);
    SBMH.prototype.reset = function() {
      this._lookbehind_size = 0;
      this.matches = 0;
      this._bufpos = 0;
    };
    SBMH.prototype.push = function(chunk4, pos) {
      if (!Buffer.isBuffer(chunk4)) {
        chunk4 = Buffer.from(chunk4, "binary");
      }
      const chlen = chunk4.length;
      this._bufpos = pos || 0;
      let r;
      while (r !== chlen && this.matches < this.maxMatches) {
        r = this._sbmh_feed(chunk4);
      }
      return r;
    };
    SBMH.prototype._sbmh_feed = function(data) {
      const len = data.length;
      const needle = this._needle;
      const needleLength = needle.length;
      const lastNeedleChar = needle[needleLength - 1];
      let pos = -this._lookbehind_size;
      let ch;
      if (pos < 0) {
        while (pos < 0 && pos <= len - needleLength) {
          ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
          if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
            this._lookbehind_size = 0;
            ++this.matches;
            this.emit("info", true);
            return this._bufpos = pos + needleLength;
          }
          pos += this._occ[ch];
        }
        if (pos < 0) {
          while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) {
            ++pos;
          }
        }
        if (pos >= 0) {
          this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
          this._lookbehind_size = 0;
        } else {
          const bytesToCutOff = this._lookbehind_size + pos;
          if (bytesToCutOff > 0) {
            this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
          }
          this._lookbehind.copy(
            this._lookbehind,
            0,
            bytesToCutOff,
            this._lookbehind_size - bytesToCutOff
          );
          this._lookbehind_size -= bytesToCutOff;
          data.copy(this._lookbehind, this._lookbehind_size);
          this._lookbehind_size += len;
          this._bufpos = len;
          return len;
        }
      }
      pos += (pos >= 0) * this._bufpos;
      if (data.indexOf(needle, pos) !== -1) {
        pos = data.indexOf(needle, pos);
        ++this.matches;
        if (pos > 0) {
          this.emit("info", true, data, this._bufpos, pos);
        } else {
          this.emit("info", true);
        }
        return this._bufpos = pos + needleLength;
      } else {
        pos = len - needleLength;
      }
      while (pos < len && (data[pos] !== needle[0] || Buffer.compare(
        data.subarray(pos, pos + len - pos),
        needle.subarray(0, len - pos)
      ) !== 0)) {
        ++pos;
      }
      if (pos < len) {
        data.copy(this._lookbehind, 0, pos, pos + (len - pos));
        this._lookbehind_size = len - pos;
      }
      if (pos > 0) {
        this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
      }
      this._bufpos = len;
      return len;
    };
    SBMH.prototype._sbmh_lookup_char = function(data, pos) {
      return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
    };
    SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
      for (var i = 0; i < len; ++i) {
        if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) {
          return false;
        }
      }
      return true;
    };
    module2.exports = SBMH;
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
var require_PartStream = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js"(exports2, module2) {
    "use strict";
    var inherits = require("node:util").inherits;
    var ReadableStream = require("node:stream").Readable;
    function PartStream(opts) {
      ReadableStream.call(this, opts);
    }
    inherits(PartStream, ReadableStream);
    PartStream.prototype._read = function(n) {
    };
    module2.exports = PartStream;
  }
});

// node_modules/@fastify/busboy/lib/utils/getLimit.js
var require_getLimit = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/getLimit.js"(exports2, module2) {
    "use strict";
    module2.exports = function getLimit(limits, name, defaultLimit) {
      if (!limits || limits[name] === void 0 || limits[name] === null) {
        return defaultLimit;
      }
      if (typeof limits[name] !== "number" || isNaN(limits[name])) {
        throw new TypeError("Limit " + name + " is not a valid number");
      }
      return limits[name];
    };
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
var require_HeaderParser = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("node:events").EventEmitter;
    var inherits = require("node:util").inherits;
    var getLimit = require_getLimit();
    var StreamSearch = require_sbmh();
    var B_DCRLF = Buffer.from("\r\n\r\n");
    var RE_CRLF = /\r\n/g;
    var RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
    function HeaderParser(cfg) {
      EventEmitter.call(this);
      cfg = cfg || {};
      const self2 = this;
      this.nread = 0;
      this.maxed = false;
      this.npairs = 0;
      this.maxHeaderPairs = getLimit(cfg, "maxHeaderPairs", 2e3);
      this.maxHeaderSize = getLimit(cfg, "maxHeaderSize", 80 * 1024);
      this.buffer = "";
      this.header = {};
      this.finished = false;
      this.ss = new StreamSearch(B_DCRLF);
      this.ss.on("info", function(isMatch, data, start3, end3) {
        if (data && !self2.maxed) {
          if (self2.nread + end3 - start3 >= self2.maxHeaderSize) {
            end3 = self2.maxHeaderSize - self2.nread + start3;
            self2.nread = self2.maxHeaderSize;
            self2.maxed = true;
          } else {
            self2.nread += end3 - start3;
          }
          self2.buffer += data.toString("binary", start3, end3);
        }
        if (isMatch) {
          self2._finish();
        }
      });
    }
    inherits(HeaderParser, EventEmitter);
    HeaderParser.prototype.push = function(data) {
      const r = this.ss.push(data);
      if (this.finished) {
        return r;
      }
    };
    HeaderParser.prototype.reset = function() {
      this.finished = false;
      this.buffer = "";
      this.header = {};
      this.ss.reset();
    };
    HeaderParser.prototype._finish = function() {
      if (this.buffer) {
        this._parseHeader();
      }
      this.ss.matches = this.ss.maxMatches;
      const header = this.header;
      this.header = {};
      this.buffer = "";
      this.finished = true;
      this.nread = this.npairs = 0;
      this.maxed = false;
      this.emit("header", header);
    };
    HeaderParser.prototype._parseHeader = function() {
      if (this.npairs === this.maxHeaderPairs) {
        return;
      }
      const lines = this.buffer.split(RE_CRLF);
      const len = lines.length;
      let m, h;
      for (var i = 0; i < len; ++i) {
        if (lines[i].length === 0) {
          continue;
        }
        if (lines[i][0] === "	" || lines[i][0] === " ") {
          if (h) {
            this.header[h][this.header[h].length - 1] += lines[i];
            continue;
          }
        }
        const posColon = lines[i].indexOf(":");
        if (posColon === -1 || posColon === 0) {
          return;
        }
        m = RE_HDR.exec(lines[i]);
        h = m[1].toLowerCase();
        this.header[h] = this.header[h] || [];
        this.header[h].push(m[2] || "");
        if (++this.npairs === this.maxHeaderPairs) {
          break;
        }
      }
    };
    module2.exports = HeaderParser;
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
var require_Dicer = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js"(exports2, module2) {
    "use strict";
    var WritableStream = require("node:stream").Writable;
    var inherits = require("node:util").inherits;
    var StreamSearch = require_sbmh();
    var PartStream = require_PartStream();
    var HeaderParser = require_HeaderParser();
    var DASH = 45;
    var B_ONEDASH = Buffer.from("-");
    var B_CRLF = Buffer.from("\r\n");
    var EMPTY_FN = function() {
    };
    function Dicer(cfg) {
      if (!(this instanceof Dicer)) {
        return new Dicer(cfg);
      }
      WritableStream.call(this, cfg);
      if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") {
        throw new TypeError("Boundary required");
      }
      if (typeof cfg.boundary === "string") {
        this.setBoundary(cfg.boundary);
      } else {
        this._bparser = void 0;
      }
      this._headerFirst = cfg.headerFirst;
      this._dashes = 0;
      this._parts = 0;
      this._finished = false;
      this._realFinish = false;
      this._isPreamble = true;
      this._justMatched = false;
      this._firstWrite = true;
      this._inHeader = true;
      this._part = void 0;
      this._cb = void 0;
      this._ignoreData = false;
      this._partOpts = { highWaterMark: cfg.partHwm };
      this._pause = false;
      const self2 = this;
      this._hparser = new HeaderParser(cfg);
      this._hparser.on("header", function(header) {
        self2._inHeader = false;
        self2._part.emit("header", header);
      });
    }
    inherits(Dicer, WritableStream);
    Dicer.prototype.emit = function(ev) {
      if (ev === "finish" && !this._realFinish) {
        if (!this._finished) {
          const self2 = this;
          process.nextTick(function() {
            self2.emit("error", new Error("Unexpected end of multipart data"));
            if (self2._part && !self2._ignoreData) {
              const type = self2._isPreamble ? "Preamble" : "Part";
              self2._part.emit("error", new Error(type + " terminated early due to unexpected end of multipart data"));
              self2._part.push(null);
              process.nextTick(function() {
                self2._realFinish = true;
                self2.emit("finish");
                self2._realFinish = false;
              });
              return;
            }
            self2._realFinish = true;
            self2.emit("finish");
            self2._realFinish = false;
          });
        }
      } else {
        WritableStream.prototype.emit.apply(this, arguments);
      }
    };
    Dicer.prototype._write = function(data, encoding, cb) {
      if (!this._hparser && !this._bparser) {
        return cb();
      }
      if (this._headerFirst && this._isPreamble) {
        if (!this._part) {
          this._part = new PartStream(this._partOpts);
          if (this.listenerCount("preamble") !== 0) {
            this.emit("preamble", this._part);
          } else {
            this._ignore();
          }
        }
        const r = this._hparser.push(data);
        if (!this._inHeader && r !== void 0 && r < data.length) {
          data = data.slice(r);
        } else {
          return cb();
        }
      }
      if (this._firstWrite) {
        this._bparser.push(B_CRLF);
        this._firstWrite = false;
      }
      this._bparser.push(data);
      if (this._pause) {
        this._cb = cb;
      } else {
        cb();
      }
    };
    Dicer.prototype.reset = function() {
      this._part = void 0;
      this._bparser = void 0;
      this._hparser = void 0;
    };
    Dicer.prototype.setBoundary = function(boundary) {
      const self2 = this;
      this._bparser = new StreamSearch("\r\n--" + boundary);
      this._bparser.on("info", function(isMatch, data, start3, end3) {
        self2._oninfo(isMatch, data, start3, end3);
      });
    };
    Dicer.prototype._ignore = function() {
      if (this._part && !this._ignoreData) {
        this._ignoreData = true;
        this._part.on("error", EMPTY_FN);
        this._part.resume();
      }
    };
    Dicer.prototype._oninfo = function(isMatch, data, start3, end3) {
      let buf;
      const self2 = this;
      let i = 0;
      let r;
      let shouldWriteMore = true;
      if (!this._part && this._justMatched && data) {
        while (this._dashes < 2 && start3 + i < end3) {
          if (data[start3 + i] === DASH) {
            ++i;
            ++this._dashes;
          } else {
            if (this._dashes) {
              buf = B_ONEDASH;
            }
            this._dashes = 0;
            break;
          }
        }
        if (this._dashes === 2) {
          if (start3 + i < end3 && this.listenerCount("trailer") !== 0) {
            this.emit("trailer", data.slice(start3 + i, end3));
          }
          this.reset();
          this._finished = true;
          if (self2._parts === 0) {
            self2._realFinish = true;
            self2.emit("finish");
            self2._realFinish = false;
          }
        }
        if (this._dashes) {
          return;
        }
      }
      if (this._justMatched) {
        this._justMatched = false;
      }
      if (!this._part) {
        this._part = new PartStream(this._partOpts);
        this._part._read = function(n) {
          self2._unpause();
        };
        if (this._isPreamble && this.listenerCount("preamble") !== 0) {
          this.emit("preamble", this._part);
        } else if (this._isPreamble !== true && this.listenerCount("part") !== 0) {
          this.emit("part", this._part);
        } else {
          this._ignore();
        }
        if (!this._isPreamble) {
          this._inHeader = true;
        }
      }
      if (data && start3 < end3 && !this._ignoreData) {
        if (this._isPreamble || !this._inHeader) {
          if (buf) {
            shouldWriteMore = this._part.push(buf);
          }
          shouldWriteMore = this._part.push(data.slice(start3, end3));
          if (!shouldWriteMore) {
            this._pause = true;
          }
        } else if (!this._isPreamble && this._inHeader) {
          if (buf) {
            this._hparser.push(buf);
          }
          r = this._hparser.push(data.slice(start3, end3));
          if (!this._inHeader && r !== void 0 && r < end3) {
            this._oninfo(false, data, start3 + r, end3);
          }
        }
      }
      if (isMatch) {
        this._hparser.reset();
        if (this._isPreamble) {
          this._isPreamble = false;
        } else {
          if (start3 !== end3) {
            ++this._parts;
            this._part.on("end", function() {
              if (--self2._parts === 0) {
                if (self2._finished) {
                  self2._realFinish = true;
                  self2.emit("finish");
                  self2._realFinish = false;
                } else {
                  self2._unpause();
                }
              }
            });
          }
        }
        this._part.push(null);
        this._part = void 0;
        this._ignoreData = false;
        this._justMatched = true;
        this._dashes = 0;
      }
    };
    Dicer.prototype._unpause = function() {
      if (!this._pause) {
        return;
      }
      this._pause = false;
      if (this._cb) {
        const cb = this._cb;
        this._cb = void 0;
        cb();
      }
    };
    module2.exports = Dicer;
  }
});

// node_modules/@fastify/busboy/lib/utils/decodeText.js
var require_decodeText = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/decodeText.js"(exports2, module2) {
    "use strict";
    var utf8Decoder = new TextDecoder("utf-8");
    var textDecoders = /* @__PURE__ */ new Map([
      ["utf-8", utf8Decoder],
      ["utf8", utf8Decoder]
    ]);
    function getDecoder(charset) {
      let lc;
      while (true) {
        switch (charset) {
          case "utf-8":
          case "utf8":
            return decoders.utf8;
          case "latin1":
          case "ascii":
          // TODO: Make these a separate, strict decoder?
          case "us-ascii":
          case "iso-8859-1":
          case "iso8859-1":
          case "iso88591":
          case "iso_8859-1":
          case "windows-1252":
          case "iso_8859-1:1987":
          case "cp1252":
          case "x-cp1252":
            return decoders.latin1;
          case "utf16le":
          case "utf-16le":
          case "ucs2":
          case "ucs-2":
            return decoders.utf16le;
          case "base64":
            return decoders.base64;
          default:
            if (lc === void 0) {
              lc = true;
              charset = charset.toLowerCase();
              continue;
            }
            return decoders.other.bind(charset);
        }
      }
    }
    var decoders = {
      utf8: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.utf8Slice(0, data.length);
      },
      latin1: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          return data;
        }
        return data.latin1Slice(0, data.length);
      },
      utf16le: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.ucs2Slice(0, data.length);
      },
      base64: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.base64Slice(0, data.length);
      },
      other: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        if (textDecoders.has(exports2.toString())) {
          try {
            return textDecoders.get(exports2).decode(data);
          } catch {
          }
        }
        return typeof data === "string" ? data : data.toString();
      }
    };
    function decodeText(text, sourceEncoding, destEncoding) {
      if (text) {
        return getDecoder(destEncoding)(text, sourceEncoding);
      }
      return text;
    }
    module2.exports = decodeText;
  }
});

// node_modules/@fastify/busboy/lib/utils/parseParams.js
var require_parseParams = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/parseParams.js"(exports2, module2) {
    "use strict";
    var decodeText = require_decodeText();
    var RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
    var EncodedLookup = {
      "%00": "\0",
      "%01": "",
      "%02": "",
      "%03": "",
      "%04": "",
      "%05": "",
      "%06": "",
      "%07": "\x07",
      "%08": "\b",
      "%09": "	",
      "%0a": "\n",
      "%0A": "\n",
      "%0b": "\v",
      "%0B": "\v",
      "%0c": "\f",
      "%0C": "\f",
      "%0d": "\r",
      "%0D": "\r",
      "%0e": "",
      "%0E": "",
      "%0f": "",
      "%0F": "",
      "%10": "",
      "%11": "",
      "%12": "",
      "%13": "",
      "%14": "",
      "%15": "",
      "%16": "",
      "%17": "",
      "%18": "",
      "%19": "",
      "%1a": "",
      "%1A": "",
      "%1b": "\x1B",
      "%1B": "\x1B",
      "%1c": "",
      "%1C": "",
      "%1d": "",
      "%1D": "",
      "%1e": "",
      "%1E": "",
      "%1f": "",
      "%1F": "",
      "%20": " ",
      "%21": "!",
      "%22": '"',
      "%23": "#",
      "%24": "$",
      "%25": "%",
      "%26": "&",
      "%27": "'",
      "%28": "(",
      "%29": ")",
      "%2a": "*",
      "%2A": "*",
      "%2b": "+",
      "%2B": "+",
      "%2c": ",",
      "%2C": ",",
      "%2d": "-",
      "%2D": "-",
      "%2e": ".",
      "%2E": ".",
      "%2f": "/",
      "%2F": "/",
      "%30": "0",
      "%31": "1",
      "%32": "2",
      "%33": "3",
      "%34": "4",
      "%35": "5",
      "%36": "6",
      "%37": "7",
      "%38": "8",
      "%39": "9",
      "%3a": ":",
      "%3A": ":",
      "%3b": ";",
      "%3B": ";",
      "%3c": "<",
      "%3C": "<",
      "%3d": "=",
      "%3D": "=",
      "%3e": ">",
      "%3E": ">",
      "%3f": "?",
      "%3F": "?",
      "%40": "@",
      "%41": "A",
      "%42": "B",
      "%43": "C",
      "%44": "D",
      "%45": "E",
      "%46": "F",
      "%47": "G",
      "%48": "H",
      "%49": "I",
      "%4a": "J",
      "%4A": "J",
      "%4b": "K",
      "%4B": "K",
      "%4c": "L",
      "%4C": "L",
      "%4d": "M",
      "%4D": "M",
      "%4e": "N",
      "%4E": "N",
      "%4f": "O",
      "%4F": "O",
      "%50": "P",
      "%51": "Q",
      "%52": "R",
      "%53": "S",
      "%54": "T",
      "%55": "U",
      "%56": "V",
      "%57": "W",
      "%58": "X",
      "%59": "Y",
      "%5a": "Z",
      "%5A": "Z",
      "%5b": "[",
      "%5B": "[",
      "%5c": "\\",
      "%5C": "\\",
      "%5d": "]",
      "%5D": "]",
      "%5e": "^",
      "%5E": "^",
      "%5f": "_",
      "%5F": "_",
      "%60": "`",
      "%61": "a",
      "%62": "b",
      "%63": "c",
      "%64": "d",
      "%65": "e",
      "%66": "f",
      "%67": "g",
      "%68": "h",
      "%69": "i",
      "%6a": "j",
      "%6A": "j",
      "%6b": "k",
      "%6B": "k",
      "%6c": "l",
      "%6C": "l",
      "%6d": "m",
      "%6D": "m",
      "%6e": "n",
      "%6E": "n",
      "%6f": "o",
      "%6F": "o",
      "%70": "p",
      "%71": "q",
      "%72": "r",
      "%73": "s",
      "%74": "t",
      "%75": "u",
      "%76": "v",
      "%77": "w",
      "%78": "x",
      "%79": "y",
      "%7a": "z",
      "%7A": "z",
      "%7b": "{",
      "%7B": "{",
      "%7c": "|",
      "%7C": "|",
      "%7d": "}",
      "%7D": "}",
      "%7e": "~",
      "%7E": "~",
      "%7f": "\x7F",
      "%7F": "\x7F",
      "%80": "\x80",
      "%81": "\x81",
      "%82": "\x82",
      "%83": "\x83",
      "%84": "\x84",
      "%85": "\x85",
      "%86": "\x86",
      "%87": "\x87",
      "%88": "\x88",
      "%89": "\x89",
      "%8a": "\x8A",
      "%8A": "\x8A",
      "%8b": "\x8B",
      "%8B": "\x8B",
      "%8c": "\x8C",
      "%8C": "\x8C",
      "%8d": "\x8D",
      "%8D": "\x8D",
      "%8e": "\x8E",
      "%8E": "\x8E",
      "%8f": "\x8F",
      "%8F": "\x8F",
      "%90": "\x90",
      "%91": "\x91",
      "%92": "\x92",
      "%93": "\x93",
      "%94": "\x94",
      "%95": "\x95",
      "%96": "\x96",
      "%97": "\x97",
      "%98": "\x98",
      "%99": "\x99",
      "%9a": "\x9A",
      "%9A": "\x9A",
      "%9b": "\x9B",
      "%9B": "\x9B",
      "%9c": "\x9C",
      "%9C": "\x9C",
      "%9d": "\x9D",
      "%9D": "\x9D",
      "%9e": "\x9E",
      "%9E": "\x9E",
      "%9f": "\x9F",
      "%9F": "\x9F",
      "%a0": "\xA0",
      "%A0": "\xA0",
      "%a1": "\xA1",
      "%A1": "\xA1",
      "%a2": "\xA2",
      "%A2": "\xA2",
      "%a3": "\xA3",
      "%A3": "\xA3",
      "%a4": "\xA4",
      "%A4": "\xA4",
      "%a5": "\xA5",
      "%A5": "\xA5",
      "%a6": "\xA6",
      "%A6": "\xA6",
      "%a7": "\xA7",
      "%A7": "\xA7",
      "%a8": "\xA8",
      "%A8": "\xA8",
      "%a9": "\xA9",
      "%A9": "\xA9",
      "%aa": "\xAA",
      "%Aa": "\xAA",
      "%aA": "\xAA",
      "%AA": "\xAA",
      "%ab": "\xAB",
      "%Ab": "\xAB",
      "%aB": "\xAB",
      "%AB": "\xAB",
      "%ac": "\xAC",
      "%Ac": "\xAC",
      "%aC": "\xAC",
      "%AC": "\xAC",
      "%ad": "\xAD",
      "%Ad": "\xAD",
      "%aD": "\xAD",
      "%AD": "\xAD",
      "%ae": "\xAE",
      "%Ae": "\xAE",
      "%aE": "\xAE",
      "%AE": "\xAE",
      "%af": "\xAF",
      "%Af": "\xAF",
      "%aF": "\xAF",
      "%AF": "\xAF",
      "%b0": "\xB0",
      "%B0": "\xB0",
      "%b1": "\xB1",
      "%B1": "\xB1",
      "%b2": "\xB2",
      "%B2": "\xB2",
      "%b3": "\xB3",
      "%B3": "\xB3",
      "%b4": "\xB4",
      "%B4": "\xB4",
      "%b5": "\xB5",
      "%B5": "\xB5",
      "%b6": "\xB6",
      "%B6": "\xB6",
      "%b7": "\xB7",
      "%B7": "\xB7",
      "%b8": "\xB8",
      "%B8": "\xB8",
      "%b9": "\xB9",
      "%B9": "\xB9",
      "%ba": "\xBA",
      "%Ba": "\xBA",
      "%bA": "\xBA",
      "%BA": "\xBA",
      "%bb": "\xBB",
      "%Bb": "\xBB",
      "%bB": "\xBB",
      "%BB": "\xBB",
      "%bc": "\xBC",
      "%Bc": "\xBC",
      "%bC": "\xBC",
      "%BC": "\xBC",
      "%bd": "\xBD",
      "%Bd": "\xBD",
      "%bD": "\xBD",
      "%BD": "\xBD",
      "%be": "\xBE",
      "%Be": "\xBE",
      "%bE": "\xBE",
      "%BE": "\xBE",
      "%bf": "\xBF",
      "%Bf": "\xBF",
      "%bF": "\xBF",
      "%BF": "\xBF",
      "%c0": "\xC0",
      "%C0": "\xC0",
      "%c1": "\xC1",
      "%C1": "\xC1",
      "%c2": "\xC2",
      "%C2": "\xC2",
      "%c3": "\xC3",
      "%C3": "\xC3",
      "%c4": "\xC4",
      "%C4": "\xC4",
      "%c5": "\xC5",
      "%C5": "\xC5",
      "%c6": "\xC6",
      "%C6": "\xC6",
      "%c7": "\xC7",
      "%C7": "\xC7",
      "%c8": "\xC8",
      "%C8": "\xC8",
      "%c9": "\xC9",
      "%C9": "\xC9",
      "%ca": "\xCA",
      "%Ca": "\xCA",
      "%cA": "\xCA",
      "%CA": "\xCA",
      "%cb": "\xCB",
      "%Cb": "\xCB",
      "%cB": "\xCB",
      "%CB": "\xCB",
      "%cc": "\xCC",
      "%Cc": "\xCC",
      "%cC": "\xCC",
      "%CC": "\xCC",
      "%cd": "\xCD",
      "%Cd": "\xCD",
      "%cD": "\xCD",
      "%CD": "\xCD",
      "%ce": "\xCE",
      "%Ce": "\xCE",
      "%cE": "\xCE",
      "%CE": "\xCE",
      "%cf": "\xCF",
      "%Cf": "\xCF",
      "%cF": "\xCF",
      "%CF": "\xCF",
      "%d0": "\xD0",
      "%D0": "\xD0",
      "%d1": "\xD1",
      "%D1": "\xD1",
      "%d2": "\xD2",
      "%D2": "\xD2",
      "%d3": "\xD3",
      "%D3": "\xD3",
      "%d4": "\xD4",
      "%D4": "\xD4",
      "%d5": "\xD5",
      "%D5": "\xD5",
      "%d6": "\xD6",
      "%D6": "\xD6",
      "%d7": "\xD7",
      "%D7": "\xD7",
      "%d8": "\xD8",
      "%D8": "\xD8",
      "%d9": "\xD9",
      "%D9": "\xD9",
      "%da": "\xDA",
      "%Da": "\xDA",
      "%dA": "\xDA",
      "%DA": "\xDA",
      "%db": "\xDB",
      "%Db": "\xDB",
      "%dB": "\xDB",
      "%DB": "\xDB",
      "%dc": "\xDC",
      "%Dc": "\xDC",
      "%dC": "\xDC",
      "%DC": "\xDC",
      "%dd": "\xDD",
      "%Dd": "\xDD",
      "%dD": "\xDD",
      "%DD": "\xDD",
      "%de": "\xDE",
      "%De": "\xDE",
      "%dE": "\xDE",
      "%DE": "\xDE",
      "%df": "\xDF",
      "%Df": "\xDF",
      "%dF": "\xDF",
      "%DF": "\xDF",
      "%e0": "\xE0",
      "%E0": "\xE0",
      "%e1": "\xE1",
      "%E1": "\xE1",
      "%e2": "\xE2",
      "%E2": "\xE2",
      "%e3": "\xE3",
      "%E3": "\xE3",
      "%e4": "\xE4",
      "%E4": "\xE4",
      "%e5": "\xE5",
      "%E5": "\xE5",
      "%e6": "\xE6",
      "%E6": "\xE6",
      "%e7": "\xE7",
      "%E7": "\xE7",
      "%e8": "\xE8",
      "%E8": "\xE8",
      "%e9": "\xE9",
      "%E9": "\xE9",
      "%ea": "\xEA",
      "%Ea": "\xEA",
      "%eA": "\xEA",
      "%EA": "\xEA",
      "%eb": "\xEB",
      "%Eb": "\xEB",
      "%eB": "\xEB",
      "%EB": "\xEB",
      "%ec": "\xEC",
      "%Ec": "\xEC",
      "%eC": "\xEC",
      "%EC": "\xEC",
      "%ed": "\xED",
      "%Ed": "\xED",
      "%eD": "\xED",
      "%ED": "\xED",
      "%ee": "\xEE",
      "%Ee": "\xEE",
      "%eE": "\xEE",
      "%EE": "\xEE",
      "%ef": "\xEF",
      "%Ef": "\xEF",
      "%eF": "\xEF",
      "%EF": "\xEF",
      "%f0": "\xF0",
      "%F0": "\xF0",
      "%f1": "\xF1",
      "%F1": "\xF1",
      "%f2": "\xF2",
      "%F2": "\xF2",
      "%f3": "\xF3",
      "%F3": "\xF3",
      "%f4": "\xF4",
      "%F4": "\xF4",
      "%f5": "\xF5",
      "%F5": "\xF5",
      "%f6": "\xF6",
      "%F6": "\xF6",
      "%f7": "\xF7",
      "%F7": "\xF7",
      "%f8": "\xF8",
      "%F8": "\xF8",
      "%f9": "\xF9",
      "%F9": "\xF9",
      "%fa": "\xFA",
      "%Fa": "\xFA",
      "%fA": "\xFA",
      "%FA": "\xFA",
      "%fb": "\xFB",
      "%Fb": "\xFB",
      "%fB": "\xFB",
      "%FB": "\xFB",
      "%fc": "\xFC",
      "%Fc": "\xFC",
      "%fC": "\xFC",
      "%FC": "\xFC",
      "%fd": "\xFD",
      "%Fd": "\xFD",
      "%fD": "\xFD",
      "%FD": "\xFD",
      "%fe": "\xFE",
      "%Fe": "\xFE",
      "%fE": "\xFE",
      "%FE": "\xFE",
      "%ff": "\xFF",
      "%Ff": "\xFF",
      "%fF": "\xFF",
      "%FF": "\xFF"
    };
    function encodedReplacer(match11) {
      return EncodedLookup[match11];
    }
    var STATE_KEY = 0;
    var STATE_VALUE = 1;
    var STATE_CHARSET = 2;
    var STATE_LANG = 3;
    function parseParams(str) {
      const res = [];
      let state = STATE_KEY;
      let charset = "";
      let inquote = false;
      let escaping = false;
      let p = 0;
      let tmp = "";
      const len = str.length;
      for (var i = 0; i < len; ++i) {
        const char = str[i];
        if (char === "\\" && inquote) {
          if (escaping) {
            escaping = false;
          } else {
            escaping = true;
            continue;
          }
        } else if (char === '"') {
          if (!escaping) {
            if (inquote) {
              inquote = false;
              state = STATE_KEY;
            } else {
              inquote = true;
            }
            continue;
          } else {
            escaping = false;
          }
        } else {
          if (escaping && inquote) {
            tmp += "\\";
          }
          escaping = false;
          if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
            if (state === STATE_CHARSET) {
              state = STATE_LANG;
              charset = tmp.substring(1);
            } else {
              state = STATE_VALUE;
            }
            tmp = "";
            continue;
          } else if (state === STATE_KEY && (char === "*" || char === "=") && res.length) {
            state = char === "*" ? STATE_CHARSET : STATE_VALUE;
            res[p] = [tmp, void 0];
            tmp = "";
            continue;
          } else if (!inquote && char === ";") {
            state = STATE_KEY;
            if (charset) {
              if (tmp.length) {
                tmp = decodeText(
                  tmp.replace(RE_ENCODED, encodedReplacer),
                  "binary",
                  charset
                );
              }
              charset = "";
            } else if (tmp.length) {
              tmp = decodeText(tmp, "binary", "utf8");
            }
            if (res[p] === void 0) {
              res[p] = tmp;
            } else {
              res[p][1] = tmp;
            }
            tmp = "";
            ++p;
            continue;
          } else if (!inquote && (char === " " || char === "	")) {
            continue;
          }
        }
        tmp += char;
      }
      if (charset && tmp.length) {
        tmp = decodeText(
          tmp.replace(RE_ENCODED, encodedReplacer),
          "binary",
          charset
        );
      } else if (tmp) {
        tmp = decodeText(tmp, "binary", "utf8");
      }
      if (res[p] === void 0) {
        if (tmp) {
          res[p] = tmp;
        }
      } else {
        res[p][1] = tmp;
      }
      return res;
    }
    module2.exports = parseParams;
  }
});

// node_modules/@fastify/busboy/lib/utils/basename.js
var require_basename = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/basename.js"(exports2, module2) {
    "use strict";
    module2.exports = function basename(path) {
      if (typeof path !== "string") {
        return "";
      }
      for (var i = path.length - 1; i >= 0; --i) {
        switch (path.charCodeAt(i)) {
          case 47:
          // '/'
          case 92:
            path = path.slice(i + 1);
            return path === ".." || path === "." ? "" : path;
        }
      }
      return path === ".." || path === "." ? "" : path;
    };
  }
});

// node_modules/@fastify/busboy/lib/types/multipart.js
var require_multipart = __commonJS({
  "node_modules/@fastify/busboy/lib/types/multipart.js"(exports2, module2) {
    "use strict";
    var { Readable } = require("node:stream");
    var { inherits } = require("node:util");
    var Dicer = require_Dicer();
    var parseParams = require_parseParams();
    var decodeText = require_decodeText();
    var basename = require_basename();
    var getLimit = require_getLimit();
    var RE_BOUNDARY = /^boundary$/i;
    var RE_FIELD = /^form-data$/i;
    var RE_CHARSET = /^charset$/i;
    var RE_FILENAME = /^filename$/i;
    var RE_NAME = /^name$/i;
    Multipart.detect = /^multipart\/form-data/i;
    function Multipart(boy, cfg) {
      let i;
      let len;
      const self2 = this;
      let boundary;
      const limits = cfg.limits;
      const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => contentType === "application/octet-stream" || fileName !== void 0);
      const parsedConType = cfg.parsedConType || [];
      const defCharset = cfg.defCharset || "utf8";
      const preservePath = cfg.preservePath;
      const fileOpts = { highWaterMark: cfg.fileHwm };
      for (i = 0, len = parsedConType.length; i < len; ++i) {
        if (Array.isArray(parsedConType[i]) && RE_BOUNDARY.test(parsedConType[i][0])) {
          boundary = parsedConType[i][1];
          break;
        }
      }
      function checkFinished() {
        if (nends === 0 && finished && !boy._done) {
          finished = false;
          self2.end();
        }
      }
      if (typeof boundary !== "string") {
        throw new Error("Multipart: Boundary not found");
      }
      const fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
      const fileSizeLimit = getLimit(limits, "fileSize", Infinity);
      const filesLimit = getLimit(limits, "files", Infinity);
      const fieldsLimit = getLimit(limits, "fields", Infinity);
      const partsLimit = getLimit(limits, "parts", Infinity);
      const headerPairsLimit = getLimit(limits, "headerPairs", 2e3);
      const headerSizeLimit = getLimit(limits, "headerSize", 80 * 1024);
      let nfiles = 0;
      let nfields = 0;
      let nends = 0;
      let curFile;
      let curField;
      let finished = false;
      this._needDrain = false;
      this._pause = false;
      this._cb = void 0;
      this._nparts = 0;
      this._boy = boy;
      const parserCfg = {
        boundary,
        maxHeaderPairs: headerPairsLimit,
        maxHeaderSize: headerSizeLimit,
        partHwm: fileOpts.highWaterMark,
        highWaterMark: cfg.highWaterMark
      };
      this.parser = new Dicer(parserCfg);
      this.parser.on("drain", function() {
        self2._needDrain = false;
        if (self2._cb && !self2._pause) {
          const cb = self2._cb;
          self2._cb = void 0;
          cb();
        }
      }).on("part", function onPart(part) {
        if (++self2._nparts > partsLimit) {
          self2.parser.removeListener("part", onPart);
          self2.parser.on("part", skipPart);
          boy.hitPartsLimit = true;
          boy.emit("partsLimit");
          return skipPart(part);
        }
        if (curField) {
          const field = curField;
          field.emit("end");
          field.removeAllListeners("end");
        }
        part.on("header", function(header) {
          let contype;
          let fieldname;
          let parsed;
          let charset;
          let encoding;
          let filename;
          let nsize = 0;
          if (header["content-type"]) {
            parsed = parseParams(header["content-type"][0]);
            if (parsed[0]) {
              contype = parsed[0].toLowerCase();
              for (i = 0, len = parsed.length; i < len; ++i) {
                if (RE_CHARSET.test(parsed[i][0])) {
                  charset = parsed[i][1].toLowerCase();
                  break;
                }
              }
            }
          }
          if (contype === void 0) {
            contype = "text/plain";
          }
          if (charset === void 0) {
            charset = defCharset;
          }
          if (header["content-disposition"]) {
            parsed = parseParams(header["content-disposition"][0]);
            if (!RE_FIELD.test(parsed[0])) {
              return skipPart(part);
            }
            for (i = 0, len = parsed.length; i < len; ++i) {
              if (RE_NAME.test(parsed[i][0])) {
                fieldname = parsed[i][1];
              } else if (RE_FILENAME.test(parsed[i][0])) {
                filename = parsed[i][1];
                if (!preservePath) {
                  filename = basename(filename);
                }
              }
            }
          } else {
            return skipPart(part);
          }
          if (header["content-transfer-encoding"]) {
            encoding = header["content-transfer-encoding"][0].toLowerCase();
          } else {
            encoding = "7bit";
          }
          let onData, onEnd;
          if (isPartAFile(fieldname, contype, filename)) {
            if (nfiles === filesLimit) {
              if (!boy.hitFilesLimit) {
                boy.hitFilesLimit = true;
                boy.emit("filesLimit");
              }
              return skipPart(part);
            }
            ++nfiles;
            if (boy.listenerCount("file") === 0) {
              self2.parser._ignore();
              return;
            }
            ++nends;
            const file = new FileStream(fileOpts);
            curFile = file;
            file.on("end", function() {
              --nends;
              self2._pause = false;
              checkFinished();
              if (self2._cb && !self2._needDrain) {
                const cb = self2._cb;
                self2._cb = void 0;
                cb();
              }
            });
            file._read = function(n) {
              if (!self2._pause) {
                return;
              }
              self2._pause = false;
              if (self2._cb && !self2._needDrain) {
                const cb = self2._cb;
                self2._cb = void 0;
                cb();
              }
            };
            boy.emit("file", fieldname, file, filename, encoding, contype);
            onData = function(data) {
              if ((nsize += data.length) > fileSizeLimit) {
                const extralen = fileSizeLimit - nsize + data.length;
                if (extralen > 0) {
                  file.push(data.slice(0, extralen));
                }
                file.truncated = true;
                file.bytesRead = fileSizeLimit;
                part.removeAllListeners("data");
                file.emit("limit");
                return;
              } else if (!file.push(data)) {
                self2._pause = true;
              }
              file.bytesRead = nsize;
            };
            onEnd = function() {
              curFile = void 0;
              file.push(null);
            };
          } else {
            if (nfields === fieldsLimit) {
              if (!boy.hitFieldsLimit) {
                boy.hitFieldsLimit = true;
                boy.emit("fieldsLimit");
              }
              return skipPart(part);
            }
            ++nfields;
            ++nends;
            let buffer = "";
            let truncated = false;
            curField = part;
            onData = function(data) {
              if ((nsize += data.length) > fieldSizeLimit) {
                const extralen = fieldSizeLimit - (nsize - data.length);
                buffer += data.toString("binary", 0, extralen);
                truncated = true;
                part.removeAllListeners("data");
              } else {
                buffer += data.toString("binary");
              }
            };
            onEnd = function() {
              curField = void 0;
              if (buffer.length) {
                buffer = decodeText(buffer, "binary", charset);
              }
              boy.emit("field", fieldname, buffer, false, truncated, encoding, contype);
              --nends;
              checkFinished();
            };
          }
          part._readableState.sync = false;
          part.on("data", onData);
          part.on("end", onEnd);
        }).on("error", function(err) {
          if (curFile) {
            curFile.emit("error", err);
          }
        });
      }).on("error", function(err) {
        boy.emit("error", err);
      }).on("finish", function() {
        finished = true;
        checkFinished();
      });
    }
    Multipart.prototype.write = function(chunk4, cb) {
      const r = this.parser.write(chunk4);
      if (r && !this._pause) {
        cb();
      } else {
        this._needDrain = !r;
        this._cb = cb;
      }
    };
    Multipart.prototype.end = function() {
      const self2 = this;
      if (self2.parser.writable) {
        self2.parser.end();
      } else if (!self2._boy._done) {
        process.nextTick(function() {
          self2._boy._done = true;
          self2._boy.emit("finish");
        });
      }
    };
    function skipPart(part) {
      part.resume();
    }
    function FileStream(opts) {
      Readable.call(this, opts);
      this.bytesRead = 0;
      this.truncated = false;
    }
    inherits(FileStream, Readable);
    FileStream.prototype._read = function(n) {
    };
    module2.exports = Multipart;
  }
});

// node_modules/@fastify/busboy/lib/utils/Decoder.js
var require_Decoder = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/Decoder.js"(exports2, module2) {
    "use strict";
    var RE_PLUS = /\+/g;
    var HEX = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ];
    function Decoder() {
      this.buffer = void 0;
    }
    Decoder.prototype.write = function(str) {
      str = str.replace(RE_PLUS, " ");
      let res = "";
      let i = 0;
      let p = 0;
      const len = str.length;
      for (; i < len; ++i) {
        if (this.buffer !== void 0) {
          if (!HEX[str.charCodeAt(i)]) {
            res += "%" + this.buffer;
            this.buffer = void 0;
            --i;
          } else {
            this.buffer += str[i];
            ++p;
            if (this.buffer.length === 2) {
              res += String.fromCharCode(parseInt(this.buffer, 16));
              this.buffer = void 0;
            }
          }
        } else if (str[i] === "%") {
          if (i > p) {
            res += str.substring(p, i);
            p = i;
          }
          this.buffer = "";
          ++p;
        }
      }
      if (p < len && this.buffer === void 0) {
        res += str.substring(p);
      }
      return res;
    };
    Decoder.prototype.reset = function() {
      this.buffer = void 0;
    };
    module2.exports = Decoder;
  }
});

// node_modules/@fastify/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS({
  "node_modules/@fastify/busboy/lib/types/urlencoded.js"(exports2, module2) {
    "use strict";
    var Decoder = require_Decoder();
    var decodeText = require_decodeText();
    var getLimit = require_getLimit();
    var RE_CHARSET = /^charset$/i;
    UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
    function UrlEncoded(boy, cfg) {
      const limits = cfg.limits;
      const parsedConType = cfg.parsedConType;
      this.boy = boy;
      this.fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
      this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
      this.fieldsLimit = getLimit(limits, "fields", Infinity);
      let charset;
      for (var i = 0, len = parsedConType.length; i < len; ++i) {
        if (Array.isArray(parsedConType[i]) && RE_CHARSET.test(parsedConType[i][0])) {
          charset = parsedConType[i][1].toLowerCase();
          break;
        }
      }
      if (charset === void 0) {
        charset = cfg.defCharset || "utf8";
      }
      this.decoder = new Decoder();
      this.charset = charset;
      this._fields = 0;
      this._state = "key";
      this._checkingBytes = true;
      this._bytesKey = 0;
      this._bytesVal = 0;
      this._key = "";
      this._val = "";
      this._keyTrunc = false;
      this._valTrunc = false;
      this._hitLimit = false;
    }
    UrlEncoded.prototype.write = function(data, cb) {
      if (this._fields === this.fieldsLimit) {
        if (!this.boy.hitFieldsLimit) {
          this.boy.hitFieldsLimit = true;
          this.boy.emit("fieldsLimit");
        }
        return cb();
      }
      let idxeq;
      let idxamp;
      let i;
      let p = 0;
      const len = data.length;
      while (p < len) {
        if (this._state === "key") {
          idxeq = idxamp = void 0;
          for (i = p; i < len; ++i) {
            if (!this._checkingBytes) {
              ++p;
            }
            if (data[i] === 61) {
              idxeq = i;
              break;
            } else if (data[i] === 38) {
              idxamp = i;
              break;
            }
            if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
              this._hitLimit = true;
              break;
            } else if (this._checkingBytes) {
              ++this._bytesKey;
            }
          }
          if (idxeq !== void 0) {
            if (idxeq > p) {
              this._key += this.decoder.write(data.toString("binary", p, idxeq));
            }
            this._state = "val";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._val = "";
            this._bytesVal = 0;
            this._valTrunc = false;
            this.decoder.reset();
            p = idxeq + 1;
          } else if (idxamp !== void 0) {
            ++this._fields;
            let key;
            const keyTrunc = this._keyTrunc;
            if (idxamp > p) {
              key = this._key += this.decoder.write(data.toString("binary", p, idxamp));
            } else {
              key = this._key;
            }
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            if (key.length) {
              this.boy.emit(
                "field",
                decodeText(key, "binary", this.charset),
                "",
                keyTrunc,
                false
              );
            }
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) {
              return cb();
            }
          } else if (this._hitLimit) {
            if (i > p) {
              this._key += this.decoder.write(data.toString("binary", p, i));
            }
            p = i;
            if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
              this._checkingBytes = false;
              this._keyTrunc = true;
            }
          } else {
            if (p < len) {
              this._key += this.decoder.write(data.toString("binary", p));
            }
            p = len;
          }
        } else {
          idxamp = void 0;
          for (i = p; i < len; ++i) {
            if (!this._checkingBytes) {
              ++p;
            }
            if (data[i] === 38) {
              idxamp = i;
              break;
            }
            if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
              this._hitLimit = true;
              break;
            } else if (this._checkingBytes) {
              ++this._bytesVal;
            }
          }
          if (idxamp !== void 0) {
            ++this._fields;
            if (idxamp > p) {
              this._val += this.decoder.write(data.toString("binary", p, idxamp));
            }
            this.boy.emit(
              "field",
              decodeText(this._key, "binary", this.charset),
              decodeText(this._val, "binary", this.charset),
              this._keyTrunc,
              this._valTrunc
            );
            this._state = "key";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) {
              return cb();
            }
          } else if (this._hitLimit) {
            if (i > p) {
              this._val += this.decoder.write(data.toString("binary", p, i));
            }
            p = i;
            if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
              this._checkingBytes = false;
              this._valTrunc = true;
            }
          } else {
            if (p < len) {
              this._val += this.decoder.write(data.toString("binary", p));
            }
            p = len;
          }
        }
      }
      cb();
    };
    UrlEncoded.prototype.end = function() {
      if (this.boy._done) {
        return;
      }
      if (this._state === "key" && this._key.length > 0) {
        this.boy.emit(
          "field",
          decodeText(this._key, "binary", this.charset),
          "",
          this._keyTrunc,
          false
        );
      } else if (this._state === "val") {
        this.boy.emit(
          "field",
          decodeText(this._key, "binary", this.charset),
          decodeText(this._val, "binary", this.charset),
          this._keyTrunc,
          this._valTrunc
        );
      }
      this.boy._done = true;
      this.boy.emit("finish");
    };
    module2.exports = UrlEncoded;
  }
});

// node_modules/@fastify/busboy/lib/main.js
var require_main = __commonJS({
  "node_modules/@fastify/busboy/lib/main.js"(exports2, module2) {
    "use strict";
    var WritableStream = require("node:stream").Writable;
    var { inherits } = require("node:util");
    var Dicer = require_Dicer();
    var MultipartParser = require_multipart();
    var UrlencodedParser = require_urlencoded();
    var parseParams = require_parseParams();
    function Busboy(opts) {
      if (!(this instanceof Busboy)) {
        return new Busboy(opts);
      }
      if (typeof opts !== "object") {
        throw new TypeError("Busboy expected an options-Object.");
      }
      if (typeof opts.headers !== "object") {
        throw new TypeError("Busboy expected an options-Object with headers-attribute.");
      }
      if (typeof opts.headers["content-type"] !== "string") {
        throw new TypeError("Missing Content-Type-header.");
      }
      const {
        headers,
        ...streamOptions
      } = opts;
      this.opts = {
        autoDestroy: false,
        ...streamOptions
      };
      WritableStream.call(this, this.opts);
      this._done = false;
      this._parser = this.getParserByHeaders(headers);
      this._finished = false;
    }
    inherits(Busboy, WritableStream);
    Busboy.prototype.emit = function(ev) {
      if (ev === "finish") {
        if (!this._done) {
          this._parser?.end();
          return;
        } else if (this._finished) {
          return;
        }
        this._finished = true;
      }
      WritableStream.prototype.emit.apply(this, arguments);
    };
    Busboy.prototype.getParserByHeaders = function(headers) {
      const parsed = parseParams(headers["content-type"]);
      const cfg = {
        defCharset: this.opts.defCharset,
        fileHwm: this.opts.fileHwm,
        headers,
        highWaterMark: this.opts.highWaterMark,
        isPartAFile: this.opts.isPartAFile,
        limits: this.opts.limits,
        parsedConType: parsed,
        preservePath: this.opts.preservePath
      };
      if (MultipartParser.detect.test(parsed[0])) {
        return new MultipartParser(this, cfg);
      }
      if (UrlencodedParser.detect.test(parsed[0])) {
        return new UrlencodedParser(this, cfg);
      }
      throw new Error("Unsupported Content-Type.");
    };
    Busboy.prototype._write = function(chunk4, encoding, cb) {
      this._parser.write(chunk4, cb);
    };
    module2.exports = Busboy;
    module2.exports.default = Busboy;
    module2.exports.Busboy = Busboy;
    module2.exports.Dicer = Dicer;
  }
});

// node_modules/undici/lib/fetch/constants.js
var require_constants2 = __commonJS({
  "node_modules/undici/lib/fetch/constants.js"(exports2, module2) {
    "use strict";
    var { MessageChannel, receiveMessageOnPort } = require("worker_threads");
    var corsSafeListedMethods = ["GET", "HEAD", "POST"];
    var corsSafeListedMethodsSet = new Set(corsSafeListedMethods);
    var nullBodyStatus = [101, 204, 205, 304];
    var redirectStatus = [301, 302, 303, 307, 308];
    var redirectStatusSet = new Set(redirectStatus);
    var badPorts = [
      "1",
      "7",
      "9",
      "11",
      "13",
      "15",
      "17",
      "19",
      "20",
      "21",
      "22",
      "23",
      "25",
      "37",
      "42",
      "43",
      "53",
      "69",
      "77",
      "79",
      "87",
      "95",
      "101",
      "102",
      "103",
      "104",
      "109",
      "110",
      "111",
      "113",
      "115",
      "117",
      "119",
      "123",
      "135",
      "137",
      "139",
      "143",
      "161",
      "179",
      "389",
      "427",
      "465",
      "512",
      "513",
      "514",
      "515",
      "526",
      "530",
      "531",
      "532",
      "540",
      "548",
      "554",
      "556",
      "563",
      "587",
      "601",
      "636",
      "989",
      "990",
      "993",
      "995",
      "1719",
      "1720",
      "1723",
      "2049",
      "3659",
      "4045",
      "5060",
      "5061",
      "6000",
      "6566",
      "6665",
      "6666",
      "6667",
      "6668",
      "6669",
      "6697",
      "10080"
    ];
    var badPortsSet = new Set(badPorts);
    var referrerPolicy = [
      "",
      "no-referrer",
      "no-referrer-when-downgrade",
      "same-origin",
      "origin",
      "strict-origin",
      "origin-when-cross-origin",
      "strict-origin-when-cross-origin",
      "unsafe-url"
    ];
    var referrerPolicySet = new Set(referrerPolicy);
    var requestRedirect = ["follow", "manual", "error"];
    var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];
    var safeMethodsSet = new Set(safeMethods);
    var requestMode = ["navigate", "same-origin", "no-cors", "cors"];
    var requestCredentials = ["omit", "same-origin", "include"];
    var requestCache = [
      "default",
      "no-store",
      "reload",
      "no-cache",
      "force-cache",
      "only-if-cached"
    ];
    var requestBodyHeader = [
      "content-encoding",
      "content-language",
      "content-location",
      "content-type",
      // See https://github.com/nodejs/undici/issues/2021
      // 'Content-Length' is a forbidden header name, which is typically
      // removed in the Headers implementation. However, undici doesn't
      // filter out headers, so we add it here.
      "content-length"
    ];
    var requestDuplex = [
      "half"
    ];
    var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];
    var forbiddenMethodsSet = new Set(forbiddenMethods);
    var subresource = [
      "audio",
      "audioworklet",
      "font",
      "image",
      "manifest",
      "paintworklet",
      "script",
      "style",
      "track",
      "video",
      "xslt",
      ""
    ];
    var subresourceSet = new Set(subresource);
    var DOMException2 = globalThis.DOMException ?? (() => {
      try {
        atob("~");
      } catch (err) {
        return Object.getPrototypeOf(err).constructor;
      }
    })();
    var channel;
    var structuredClone = globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
    // structuredClone was added in v17.0.0, but fetch supports v16.8
    function structuredClone2(value3, options = void 0) {
      if (arguments.length === 0) {
        throw new TypeError("missing argument");
      }
      if (!channel) {
        channel = new MessageChannel();
      }
      channel.port1.unref();
      channel.port2.unref();
      channel.port1.postMessage(value3, options?.transfer);
      return receiveMessageOnPort(channel.port2).message;
    };
    module2.exports = {
      DOMException: DOMException2,
      structuredClone,
      subresource,
      forbiddenMethods,
      requestBodyHeader,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      redirectStatus,
      corsSafeListedMethods,
      nullBodyStatus,
      safeMethods,
      badPorts,
      requestDuplex,
      subresourceSet,
      badPortsSet,
      redirectStatusSet,
      corsSafeListedMethodsSet,
      safeMethodsSet,
      forbiddenMethodsSet,
      referrerPolicySet
    };
  }
});

// node_modules/undici/lib/fetch/global.js
var require_global = __commonJS({
  "node_modules/undici/lib/fetch/global.js"(exports2, module2) {
    "use strict";
    var globalOrigin = Symbol.for("undici.globalOrigin.1");
    function getGlobalOrigin() {
      return globalThis[globalOrigin];
    }
    function setGlobalOrigin(newOrigin) {
      if (newOrigin === void 0) {
        Object.defineProperty(globalThis, globalOrigin, {
          value: void 0,
          writable: true,
          enumerable: false,
          configurable: false
        });
        return;
      }
      const parsedURL = new URL(newOrigin);
      if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") {
        throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
      }
      Object.defineProperty(globalThis, globalOrigin, {
        value: parsedURL,
        writable: true,
        enumerable: false,
        configurable: false
      });
    }
    module2.exports = {
      getGlobalOrigin,
      setGlobalOrigin
    };
  }
});

// node_modules/undici/lib/fetch/util.js
var require_util2 = __commonJS({
  "node_modules/undici/lib/fetch/util.js"(exports2, module2) {
    "use strict";
    var { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require_constants2();
    var { getGlobalOrigin } = require_global();
    var { performance: performance2 } = require("perf_hooks");
    var { isBlobLike, toUSVString, ReadableStreamFrom } = require_util();
    var assert = require("assert");
    var { isUint8Array } = require("util/types");
    var supportedHashes = [];
    var crypto4;
    try {
      crypto4 = require("crypto");
      const possibleRelevantHashes = ["sha256", "sha384", "sha512"];
      supportedHashes = crypto4.getHashes().filter((hash2) => possibleRelevantHashes.includes(hash2));
    } catch {
    }
    function responseURL(response) {
      const urlList = response.urlList;
      const length2 = urlList.length;
      return length2 === 0 ? null : urlList[length2 - 1].toString();
    }
    function responseLocationURL(response, requestFragment) {
      if (!redirectStatusSet.has(response.status)) {
        return null;
      }
      let location = response.headersList.get("location");
      if (location !== null && isValidHeaderValue(location)) {
        location = new URL(location, responseURL(response));
      }
      if (location && !location.hash) {
        location.hash = requestFragment;
      }
      return location;
    }
    function requestCurrentURL(request2) {
      return request2.urlList[request2.urlList.length - 1];
    }
    function requestBadPort(request2) {
      const url = requestCurrentURL(request2);
      if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
        return "blocked";
      }
      return "allowed";
    }
    function isErrorLike(object) {
      return object instanceof Error || (object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException");
    }
    function isValidReasonPhrase(statusText) {
      for (let i = 0; i < statusText.length; ++i) {
        const c = statusText.charCodeAt(i);
        if (!(c === 9 || // HTAB
        c >= 32 && c <= 126 || // SP / VCHAR
        c >= 128 && c <= 255)) {
          return false;
        }
      }
      return true;
    }
    function isTokenCharCode(c) {
      switch (c) {
        case 34:
        case 40:
        case 41:
        case 44:
        case 47:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 91:
        case 92:
        case 93:
        case 123:
        case 125:
          return false;
        default:
          return c >= 33 && c <= 126;
      }
    }
    function isValidHTTPToken(characters) {
      if (characters.length === 0) {
        return false;
      }
      for (let i = 0; i < characters.length; ++i) {
        if (!isTokenCharCode(characters.charCodeAt(i))) {
          return false;
        }
      }
      return true;
    }
    function isValidHeaderName(potentialValue) {
      return isValidHTTPToken(potentialValue);
    }
    function isValidHeaderValue(potentialValue) {
      if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) {
        return false;
      }
      if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) {
        return false;
      }
      return true;
    }
    function setRequestReferrerPolicyOnRedirect(request2, actualResponse) {
      const { headersList } = actualResponse;
      const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
      let policy = "";
      if (policyHeader.length > 0) {
        for (let i = policyHeader.length; i !== 0; i--) {
          const token = policyHeader[i - 1].trim();
          if (referrerPolicyTokens.has(token)) {
            policy = token;
            break;
          }
        }
      }
      if (policy !== "") {
        request2.referrerPolicy = policy;
      }
    }
    function crossOriginResourcePolicyCheck() {
      return "allowed";
    }
    function corsCheck() {
      return "success";
    }
    function TAOCheck() {
      return "success";
    }
    function appendFetchMetadata(httpRequest) {
      let header = null;
      header = httpRequest.mode;
      httpRequest.headersList.set("sec-fetch-mode", header);
    }
    function appendRequestOriginHeader(request2) {
      let serializedOrigin = request2.origin;
      if (request2.responseTainting === "cors" || request2.mode === "websocket") {
        if (serializedOrigin) {
          request2.headersList.append("origin", serializedOrigin);
        }
      } else if (request2.method !== "GET" && request2.method !== "HEAD") {
        switch (request2.referrerPolicy) {
          case "no-referrer":
            serializedOrigin = null;
            break;
          case "no-referrer-when-downgrade":
          case "strict-origin":
          case "strict-origin-when-cross-origin":
            if (request2.origin && urlHasHttpsScheme(request2.origin) && !urlHasHttpsScheme(requestCurrentURL(request2))) {
              serializedOrigin = null;
            }
            break;
          case "same-origin":
            if (!sameOrigin(request2, requestCurrentURL(request2))) {
              serializedOrigin = null;
            }
            break;
          default:
        }
        if (serializedOrigin) {
          request2.headersList.append("origin", serializedOrigin);
        }
      }
    }
    function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
      return performance2.now();
    }
    function createOpaqueTimingInfo(timingInfo) {
      return {
        startTime: timingInfo.startTime ?? 0,
        redirectStartTime: 0,
        redirectEndTime: 0,
        postRedirectStartTime: timingInfo.startTime ?? 0,
        finalServiceWorkerStartTime: 0,
        finalNetworkResponseStartTime: 0,
        finalNetworkRequestStartTime: 0,
        endTime: 0,
        encodedBodySize: 0,
        decodedBodySize: 0,
        finalConnectionTimingInfo: null
      };
    }
    function makePolicyContainer() {
      return {
        referrerPolicy: "strict-origin-when-cross-origin"
      };
    }
    function clonePolicyContainer(policyContainer) {
      return {
        referrerPolicy: policyContainer.referrerPolicy
      };
    }
    function determineRequestsReferrer(request2) {
      const policy = request2.referrerPolicy;
      assert(policy);
      let referrerSource = null;
      if (request2.referrer === "client") {
        const globalOrigin = getGlobalOrigin();
        if (!globalOrigin || globalOrigin.origin === "null") {
          return "no-referrer";
        }
        referrerSource = new URL(globalOrigin);
      } else if (request2.referrer instanceof URL) {
        referrerSource = request2.referrer;
      }
      let referrerURL = stripURLForReferrer(referrerSource);
      const referrerOrigin = stripURLForReferrer(referrerSource, true);
      if (referrerURL.toString().length > 4096) {
        referrerURL = referrerOrigin;
      }
      const areSameOrigin = sameOrigin(request2, referrerURL);
      const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request2.url);
      switch (policy) {
        case "origin":
          return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
        case "unsafe-url":
          return referrerURL;
        case "same-origin":
          return areSameOrigin ? referrerOrigin : "no-referrer";
        case "origin-when-cross-origin":
          return areSameOrigin ? referrerURL : referrerOrigin;
        case "strict-origin-when-cross-origin": {
          const currentURL = requestCurrentURL(request2);
          if (sameOrigin(referrerURL, currentURL)) {
            return referrerURL;
          }
          if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
            return "no-referrer";
          }
          return referrerOrigin;
        }
        case "strict-origin":
        // eslint-disable-line
        /**
           * 1. If referrerURL is a potentially trustworthy URL and
           * request’s current URL is not a potentially trustworthy URL,
           * then return no referrer.
           * 2. Return referrerOrigin
          */
        case "no-referrer-when-downgrade":
        // eslint-disable-line
        /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
        */
        default:
          return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
      }
    }
    function stripURLForReferrer(url, originOnly) {
      assert(url instanceof URL);
      if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") {
        return "no-referrer";
      }
      url.username = "";
      url.password = "";
      url.hash = "";
      if (originOnly) {
        url.pathname = "";
        url.search = "";
      }
      return url;
    }
    function isURLPotentiallyTrustworthy(url) {
      if (!(url instanceof URL)) {
        return false;
      }
      if (url.href === "about:blank" || url.href === "about:srcdoc") {
        return true;
      }
      if (url.protocol === "data:") return true;
      if (url.protocol === "file:") return true;
      return isOriginPotentiallyTrustworthy(url.origin);
      function isOriginPotentiallyTrustworthy(origin) {
        if (origin == null || origin === "null") return false;
        const originAsURL = new URL(origin);
        if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") {
          return true;
        }
        if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || (originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.")) || originAsURL.hostname.endsWith(".localhost")) {
          return true;
        }
        return false;
      }
    }
    function bytesMatch(bytes, metadataList) {
      if (crypto4 === void 0) {
        return true;
      }
      const parsedMetadata = parseMetadata(metadataList);
      if (parsedMetadata === "no metadata") {
        return true;
      }
      if (parsedMetadata.length === 0) {
        return true;
      }
      const strongest = getStrongestMetadata(parsedMetadata);
      const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);
      for (const item of metadata) {
        const algorithm = item.algo;
        const expectedValue = item.hash;
        let actualValue = crypto4.createHash(algorithm).update(bytes).digest("base64");
        if (actualValue[actualValue.length - 1] === "=") {
          if (actualValue[actualValue.length - 2] === "=") {
            actualValue = actualValue.slice(0, -2);
          } else {
            actualValue = actualValue.slice(0, -1);
          }
        }
        if (compareBase64Mixed(actualValue, expectedValue)) {
          return true;
        }
      }
      return false;
    }
    var parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
    function parseMetadata(metadata) {
      const result = [];
      let empty33 = true;
      for (const token of metadata.split(" ")) {
        empty33 = false;
        const parsedToken = parseHashWithOptions.exec(token);
        if (parsedToken === null || parsedToken.groups === void 0 || parsedToken.groups.algo === void 0) {
          continue;
        }
        const algorithm = parsedToken.groups.algo.toLowerCase();
        if (supportedHashes.includes(algorithm)) {
          result.push(parsedToken.groups);
        }
      }
      if (empty33 === true) {
        return "no metadata";
      }
      return result;
    }
    function getStrongestMetadata(metadataList) {
      let algorithm = metadataList[0].algo;
      if (algorithm[3] === "5") {
        return algorithm;
      }
      for (let i = 1; i < metadataList.length; ++i) {
        const metadata = metadataList[i];
        if (metadata.algo[3] === "5") {
          algorithm = "sha512";
          break;
        } else if (algorithm[3] === "3") {
          continue;
        } else if (metadata.algo[3] === "3") {
          algorithm = "sha384";
        }
      }
      return algorithm;
    }
    function filterMetadataListByAlgorithm(metadataList, algorithm) {
      if (metadataList.length === 1) {
        return metadataList;
      }
      let pos = 0;
      for (let i = 0; i < metadataList.length; ++i) {
        if (metadataList[i].algo === algorithm) {
          metadataList[pos++] = metadataList[i];
        }
      }
      metadataList.length = pos;
      return metadataList;
    }
    function compareBase64Mixed(actualValue, expectedValue) {
      if (actualValue.length !== expectedValue.length) {
        return false;
      }
      for (let i = 0; i < actualValue.length; ++i) {
        if (actualValue[i] !== expectedValue[i]) {
          if (actualValue[i] === "+" && expectedValue[i] === "-" || actualValue[i] === "/" && expectedValue[i] === "_") {
            continue;
          }
          return false;
        }
      }
      return true;
    }
    function tryUpgradeRequestToAPotentiallyTrustworthyURL(request2) {
    }
    function sameOrigin(A, B) {
      if (A.origin === B.origin && A.origin === "null") {
        return true;
      }
      if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
        return true;
      }
      return false;
    }
    function createDeferredPromise() {
      let res;
      let rej;
      const promise3 = new Promise((resolve, reject) => {
        res = resolve;
        rej = reject;
      });
      return { promise: promise3, resolve: res, reject: rej };
    }
    function isAborted(fetchParams) {
      return fetchParams.controller.state === "aborted";
    }
    function isCancelled(fetchParams) {
      return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
    }
    var normalizeMethodRecord = {
      delete: "DELETE",
      DELETE: "DELETE",
      get: "GET",
      GET: "GET",
      head: "HEAD",
      HEAD: "HEAD",
      options: "OPTIONS",
      OPTIONS: "OPTIONS",
      post: "POST",
      POST: "POST",
      put: "PUT",
      PUT: "PUT"
    };
    Object.setPrototypeOf(normalizeMethodRecord, null);
    function normalizeMethod(method) {
      return normalizeMethodRecord[method.toLowerCase()] ?? method;
    }
    function serializeJavascriptValueToJSONString(value3) {
      const result = JSON.stringify(value3);
      if (result === void 0) {
        throw new TypeError("Value is not JSON serializable");
      }
      assert(typeof result === "string");
      return result;
    }
    var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
    function makeIterator(iterator, name, kind) {
      const object = {
        index: 0,
        kind,
        target: iterator
      };
      const i = {
        next() {
          if (Object.getPrototypeOf(this) !== i) {
            throw new TypeError(
              `'next' called on an object that does not implement interface ${name} Iterator.`
            );
          }
          const { index, kind: kind2, target } = object;
          const values3 = target();
          const len = values3.length;
          if (index >= len) {
            return { value: void 0, done: true };
          }
          const pair = values3[index];
          object.index = index + 1;
          return iteratorResult(pair, kind2);
        },
        // The class string of an iterator prototype object for a given interface is the
        // result of concatenating the identifier of the interface and the string " Iterator".
        [Symbol.toStringTag]: `${name} Iterator`
      };
      Object.setPrototypeOf(i, esIteratorPrototype);
      return Object.setPrototypeOf({}, i);
    }
    function iteratorResult(pair, kind) {
      let result;
      switch (kind) {
        case "key": {
          result = pair[0];
          break;
        }
        case "value": {
          result = pair[1];
          break;
        }
        case "key+value": {
          result = pair;
          break;
        }
      }
      return { value: result, done: false };
    }
    async function fullyReadBody(body, processBody, processBodyError) {
      const successSteps = processBody;
      const errorSteps = processBodyError;
      let reader;
      try {
        reader = body.stream.getReader();
      } catch (e) {
        errorSteps(e);
        return;
      }
      try {
        const result = await readAllBytes(reader);
        successSteps(result);
      } catch (e) {
        errorSteps(e);
      }
    }
    var ReadableStream = globalThis.ReadableStream;
    function isReadableStreamLike(stream) {
      if (!ReadableStream) {
        ReadableStream = require("stream/web").ReadableStream;
      }
      return stream instanceof ReadableStream || stream[Symbol.toStringTag] === "ReadableStream" && typeof stream.tee === "function";
    }
    var MAXIMUM_ARGUMENT_LENGTH = 65535;
    function isomorphicDecode(input) {
      if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
        return String.fromCharCode(...input);
      }
      return input.reduce((previous, current) => previous + String.fromCharCode(current), "");
    }
    function readableStreamClose(controller) {
      try {
        controller.close();
      } catch (err) {
        if (!err.message.includes("Controller is already closed")) {
          throw err;
        }
      }
    }
    function isomorphicEncode(input) {
      for (let i = 0; i < input.length; i++) {
        assert(input.charCodeAt(i) <= 255);
      }
      return input;
    }
    async function readAllBytes(reader) {
      const bytes = [];
      let byteLength = 0;
      while (true) {
        const { done: done7, value: chunk4 } = await reader.read();
        if (done7) {
          return Buffer.concat(bytes, byteLength);
        }
        if (!isUint8Array(chunk4)) {
          throw new TypeError("Received non-Uint8Array chunk");
        }
        bytes.push(chunk4);
        byteLength += chunk4.length;
      }
    }
    function urlIsLocal(url) {
      assert("protocol" in url);
      const protocol = url.protocol;
      return protocol === "about:" || protocol === "blob:" || protocol === "data:";
    }
    function urlHasHttpsScheme(url) {
      if (typeof url === "string") {
        return url.startsWith("https:");
      }
      return url.protocol === "https:";
    }
    function urlIsHttpHttpsScheme(url) {
      assert("protocol" in url);
      const protocol = url.protocol;
      return protocol === "http:" || protocol === "https:";
    }
    var hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
    module2.exports = {
      isAborted,
      isCancelled,
      createDeferredPromise,
      ReadableStreamFrom,
      toUSVString,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      coarsenedSharedCurrentTime,
      determineRequestsReferrer,
      makePolicyContainer,
      clonePolicyContainer,
      appendFetchMetadata,
      appendRequestOriginHeader,
      TAOCheck,
      corsCheck,
      crossOriginResourcePolicyCheck,
      createOpaqueTimingInfo,
      setRequestReferrerPolicyOnRedirect,
      isValidHTTPToken,
      requestBadPort,
      requestCurrentURL,
      responseURL,
      responseLocationURL,
      isBlobLike,
      isURLPotentiallyTrustworthy,
      isValidReasonPhrase,
      sameOrigin,
      normalizeMethod,
      serializeJavascriptValueToJSONString,
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue,
      hasOwn,
      isErrorLike,
      fullyReadBody,
      bytesMatch,
      isReadableStreamLike,
      readableStreamClose,
      isomorphicEncode,
      isomorphicDecode,
      urlIsLocal,
      urlHasHttpsScheme,
      urlIsHttpHttpsScheme,
      readAllBytes,
      normalizeMethodRecord,
      parseMetadata
    };
  }
});

// node_modules/undici/lib/fetch/symbols.js
var require_symbols2 = __commonJS({
  "node_modules/undici/lib/fetch/symbols.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      kUrl: Symbol("url"),
      kHeaders: Symbol("headers"),
      kSignal: Symbol("signal"),
      kState: Symbol("state"),
      kGuard: Symbol("guard"),
      kRealm: Symbol("realm")
    };
  }
});

// node_modules/undici/lib/fetch/webidl.js
var require_webidl = __commonJS({
  "node_modules/undici/lib/fetch/webidl.js"(exports2, module2) {
    "use strict";
    var { types } = require("util");
    var { hasOwn, toUSVString } = require_util2();
    var webidl = {};
    webidl.converters = {};
    webidl.util = {};
    webidl.errors = {};
    webidl.errors.exception = function(message) {
      return new TypeError(`${message.header}: ${message.message}`);
    };
    webidl.errors.conversionFailed = function(context5) {
      const plural = context5.types.length === 1 ? "" : " one of";
      const message = `${context5.argument} could not be converted to${plural}: ${context5.types.join(", ")}.`;
      return webidl.errors.exception({
        header: context5.prefix,
        message
      });
    };
    webidl.errors.invalidArgument = function(context5) {
      return webidl.errors.exception({
        header: context5.prefix,
        message: `"${context5.value}" is an invalid ${context5.type}.`
      });
    };
    webidl.brandCheck = function(V, I, opts = void 0) {
      if (opts?.strict !== false && !(V instanceof I)) {
        throw new TypeError("Illegal invocation");
      } else {
        return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
      }
    };
    webidl.argumentLengthCheck = function({ length: length2 }, min3, ctx) {
      if (length2 < min3) {
        throw webidl.errors.exception({
          message: `${min3} argument${min3 !== 1 ? "s" : ""} required, but${length2 ? " only" : ""} ${length2} found.`,
          ...ctx
        });
      }
    };
    webidl.illegalConstructor = function() {
      throw webidl.errors.exception({
        header: "TypeError",
        message: "Illegal constructor"
      });
    };
    webidl.util.Type = function(V) {
      switch (typeof V) {
        case "undefined":
          return "Undefined";
        case "boolean":
          return "Boolean";
        case "string":
          return "String";
        case "symbol":
          return "Symbol";
        case "number":
          return "Number";
        case "bigint":
          return "BigInt";
        case "function":
        case "object": {
          if (V === null) {
            return "Null";
          }
          return "Object";
        }
      }
    };
    webidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
      let upperBound;
      let lowerBound;
      if (bitLength === 64) {
        upperBound = Math.pow(2, 53) - 1;
        if (signedness === "unsigned") {
          lowerBound = 0;
        } else {
          lowerBound = Math.pow(-2, 53) + 1;
        }
      } else if (signedness === "unsigned") {
        lowerBound = 0;
        upperBound = Math.pow(2, bitLength) - 1;
      } else {
        lowerBound = Math.pow(-2, bitLength) - 1;
        upperBound = Math.pow(2, bitLength - 1) - 1;
      }
      let x = Number(V);
      if (x === 0) {
        x = 0;
      }
      if (opts.enforceRange === true) {
        if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
          throw webidl.errors.exception({
            header: "Integer conversion",
            message: `Could not convert ${V} to an integer.`
          });
        }
        x = webidl.util.IntegerPart(x);
        if (x < lowerBound || x > upperBound) {
          throw webidl.errors.exception({
            header: "Integer conversion",
            message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
          });
        }
        return x;
      }
      if (!Number.isNaN(x) && opts.clamp === true) {
        x = Math.min(Math.max(x, lowerBound), upperBound);
        if (Math.floor(x) % 2 === 0) {
          x = Math.floor(x);
        } else {
          x = Math.ceil(x);
        }
        return x;
      }
      if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
        return 0;
      }
      x = webidl.util.IntegerPart(x);
      x = x % Math.pow(2, bitLength);
      if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) {
        return x - Math.pow(2, bitLength);
      }
      return x;
    };
    webidl.util.IntegerPart = function(n) {
      const r = Math.floor(Math.abs(n));
      if (n < 0) {
        return -1 * r;
      }
      return r;
    };
    webidl.sequenceConverter = function(converter) {
      return (V) => {
        if (webidl.util.Type(V) !== "Object") {
          throw webidl.errors.exception({
            header: "Sequence",
            message: `Value of type ${webidl.util.Type(V)} is not an Object.`
          });
        }
        const method = V?.[Symbol.iterator]?.();
        const seq2 = [];
        if (method === void 0 || typeof method.next !== "function") {
          throw webidl.errors.exception({
            header: "Sequence",
            message: "Object is not an iterator."
          });
        }
        while (true) {
          const { done: done7, value: value3 } = method.next();
          if (done7) {
            break;
          }
          seq2.push(converter(value3));
        }
        return seq2;
      };
    };
    webidl.recordConverter = function(keyConverter, valueConverter) {
      return (O) => {
        if (webidl.util.Type(O) !== "Object") {
          throw webidl.errors.exception({
            header: "Record",
            message: `Value of type ${webidl.util.Type(O)} is not an Object.`
          });
        }
        const result = {};
        if (!types.isProxy(O)) {
          const keys6 = Object.keys(O);
          for (const key of keys6) {
            const typedKey = keyConverter(key);
            const typedValue = valueConverter(O[key]);
            result[typedKey] = typedValue;
          }
          return result;
        }
        const keys5 = Reflect.ownKeys(O);
        for (const key of keys5) {
          const desc = Reflect.getOwnPropertyDescriptor(O, key);
          if (desc?.enumerable) {
            const typedKey = keyConverter(key);
            const typedValue = valueConverter(O[key]);
            result[typedKey] = typedValue;
          }
        }
        return result;
      };
    };
    webidl.interfaceConverter = function(i) {
      return (V, opts = {}) => {
        if (opts.strict !== false && !(V instanceof i)) {
          throw webidl.errors.exception({
            header: i.name,
            message: `Expected ${V} to be an instance of ${i.name}.`
          });
        }
        return V;
      };
    };
    webidl.dictionaryConverter = function(converters) {
      return (dictionary) => {
        const type = webidl.util.Type(dictionary);
        const dict = {};
        if (type === "Null" || type === "Undefined") {
          return dict;
        } else if (type !== "Object") {
          throw webidl.errors.exception({
            header: "Dictionary",
            message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
          });
        }
        for (const options of converters) {
          const { key, defaultValue, required, converter } = options;
          if (required === true) {
            if (!hasOwn(dictionary, key)) {
              throw webidl.errors.exception({
                header: "Dictionary",
                message: `Missing required key "${key}".`
              });
            }
          }
          let value3 = dictionary[key];
          const hasDefault = hasOwn(options, "defaultValue");
          if (hasDefault && value3 !== null) {
            value3 = value3 ?? defaultValue;
          }
          if (required || hasDefault || value3 !== void 0) {
            value3 = converter(value3);
            if (options.allowedValues && !options.allowedValues.includes(value3)) {
              throw webidl.errors.exception({
                header: "Dictionary",
                message: `${value3} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
              });
            }
            dict[key] = value3;
          }
        }
        return dict;
      };
    };
    webidl.nullableConverter = function(converter) {
      return (V) => {
        if (V === null) {
          return V;
        }
        return converter(V);
      };
    };
    webidl.converters.DOMString = function(V, opts = {}) {
      if (V === null && opts.legacyNullToEmptyString) {
        return "";
      }
      if (typeof V === "symbol") {
        throw new TypeError("Could not convert argument of type symbol to string.");
      }
      return String(V);
    };
    webidl.converters.ByteString = function(V) {
      const x = webidl.converters.DOMString(V);
      for (let index = 0; index < x.length; index++) {
        if (x.charCodeAt(index) > 255) {
          throw new TypeError(
            `Cannot convert argument to a ByteString because the character at index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`
          );
        }
      }
      return x;
    };
    webidl.converters.USVString = toUSVString;
    webidl.converters.boolean = function(V) {
      const x = Boolean(V);
      return x;
    };
    webidl.converters.any = function(V) {
      return V;
    };
    webidl.converters["long long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 64, "signed");
      return x;
    };
    webidl.converters["unsigned long long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 64, "unsigned");
      return x;
    };
    webidl.converters["unsigned long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 32, "unsigned");
      return x;
    };
    webidl.converters["unsigned short"] = function(V, opts) {
      const x = webidl.util.ConvertToInt(V, 16, "unsigned", opts);
      return x;
    };
    webidl.converters.ArrayBuffer = function(V, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isAnyArrayBuffer(V)) {
        throw webidl.errors.conversionFailed({
          prefix: `${V}`,
          argument: `${V}`,
          types: ["ArrayBuffer"]
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.TypedArray = function(V, T, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isTypedArray(V) || V.constructor.name !== T.name) {
        throw webidl.errors.conversionFailed({
          prefix: `${T.name}`,
          argument: `${V}`,
          types: [T.name]
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.DataView = function(V, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isDataView(V)) {
        throw webidl.errors.exception({
          header: "DataView",
          message: "Object is not a DataView."
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.BufferSource = function(V, opts = {}) {
      if (types.isAnyArrayBuffer(V)) {
        return webidl.converters.ArrayBuffer(V, opts);
      }
      if (types.isTypedArray(V)) {
        return webidl.converters.TypedArray(V, V.constructor);
      }
      if (types.isDataView(V)) {
        return webidl.converters.DataView(V, opts);
      }
      throw new TypeError(`Could not convert ${V} to a BufferSource.`);
    };
    webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(
      webidl.converters.ByteString
    );
    webidl.converters["sequence<sequence<ByteString>>"] = webidl.sequenceConverter(
      webidl.converters["sequence<ByteString>"]
    );
    webidl.converters["record<ByteString, ByteString>"] = webidl.recordConverter(
      webidl.converters.ByteString,
      webidl.converters.ByteString
    );
    module2.exports = {
      webidl
    };
  }
});

// node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS({
  "node_modules/undici/lib/fetch/dataURL.js"(exports2, module2) {
    var assert = require("assert");
    var { atob: atob2 } = require("buffer");
    var { isomorphicDecode } = require_util2();
    var encoder = new TextEncoder();
    var HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
    var HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
    var HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
    function dataURLProcessor(dataURL) {
      assert(dataURL.protocol === "data:");
      let input = URLSerializer(dataURL, true);
      input = input.slice(5);
      const position = { position: 0 };
      let mimeType = collectASequenceOfCodePointsFast(
        ",",
        input,
        position
      );
      const mimeTypeLength = mimeType.length;
      mimeType = removeASCIIWhitespace(mimeType, true, true);
      if (position.position >= input.length) {
        return "failure";
      }
      position.position++;
      const encodedBody = input.slice(mimeTypeLength + 1);
      let body = stringPercentDecode(encodedBody);
      if (/;(\u0020){0,}base64$/i.test(mimeType)) {
        const stringBody = isomorphicDecode(body);
        body = forgivingBase64(stringBody);
        if (body === "failure") {
          return "failure";
        }
        mimeType = mimeType.slice(0, -6);
        mimeType = mimeType.replace(/(\u0020)+$/, "");
        mimeType = mimeType.slice(0, -1);
      }
      if (mimeType.startsWith(";")) {
        mimeType = "text/plain" + mimeType;
      }
      let mimeTypeRecord = parseMIMEType(mimeType);
      if (mimeTypeRecord === "failure") {
        mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII");
      }
      return { mimeType: mimeTypeRecord, body };
    }
    function URLSerializer(url, excludeFragment = false) {
      if (!excludeFragment) {
        return url.href;
      }
      const href = url.href;
      const hashLength = url.hash.length;
      return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
    }
    function collectASequenceOfCodePoints(condition, input, position) {
      let result = "";
      while (position.position < input.length && condition(input[position.position])) {
        result += input[position.position];
        position.position++;
      }
      return result;
    }
    function collectASequenceOfCodePointsFast(char, input, position) {
      const idx = input.indexOf(char, position.position);
      const start3 = position.position;
      if (idx === -1) {
        position.position = input.length;
        return input.slice(start3);
      }
      position.position = idx;
      return input.slice(start3, position.position);
    }
    function stringPercentDecode(input) {
      const bytes = encoder.encode(input);
      return percentDecode(bytes);
    }
    function percentDecode(input) {
      const output = [];
      for (let i = 0; i < input.length; i++) {
        const byte = input[i];
        if (byte !== 37) {
          output.push(byte);
        } else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) {
          output.push(37);
        } else {
          const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
          const bytePoint = Number.parseInt(nextTwoBytes, 16);
          output.push(bytePoint);
          i += 2;
        }
      }
      return Uint8Array.from(output);
    }
    function parseMIMEType(input) {
      input = removeHTTPWhitespace(input, true, true);
      const position = { position: 0 };
      const type = collectASequenceOfCodePointsFast(
        "/",
        input,
        position
      );
      if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
        return "failure";
      }
      if (position.position > input.length) {
        return "failure";
      }
      position.position++;
      let subtype = collectASequenceOfCodePointsFast(
        ";",
        input,
        position
      );
      subtype = removeHTTPWhitespace(subtype, false, true);
      if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
        return "failure";
      }
      const typeLowercase = type.toLowerCase();
      const subtypeLowercase = subtype.toLowerCase();
      const mimeType = {
        type: typeLowercase,
        subtype: subtypeLowercase,
        /** @type {Map<string, string>} */
        parameters: /* @__PURE__ */ new Map(),
        // https://mimesniff.spec.whatwg.org/#mime-type-essence
        essence: `${typeLowercase}/${subtypeLowercase}`
      };
      while (position.position < input.length) {
        position.position++;
        collectASequenceOfCodePoints(
          // https://fetch.spec.whatwg.org/#http-whitespace
          (char) => HTTP_WHITESPACE_REGEX.test(char),
          input,
          position
        );
        let parameterName = collectASequenceOfCodePoints(
          (char) => char !== ";" && char !== "=",
          input,
          position
        );
        parameterName = parameterName.toLowerCase();
        if (position.position < input.length) {
          if (input[position.position] === ";") {
            continue;
          }
          position.position++;
        }
        if (position.position > input.length) {
          break;
        }
        let parameterValue = null;
        if (input[position.position] === '"') {
          parameterValue = collectAnHTTPQuotedString(input, position, true);
          collectASequenceOfCodePointsFast(
            ";",
            input,
            position
          );
        } else {
          parameterValue = collectASequenceOfCodePointsFast(
            ";",
            input,
            position
          );
          parameterValue = removeHTTPWhitespace(parameterValue, false, true);
          if (parameterValue.length === 0) {
            continue;
          }
        }
        if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {
          mimeType.parameters.set(parameterName, parameterValue);
        }
      }
      return mimeType;
    }
    function forgivingBase64(data) {
      data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
      if (data.length % 4 === 0) {
        data = data.replace(/=?=$/, "");
      }
      if (data.length % 4 === 1) {
        return "failure";
      }
      if (/[^+/0-9A-Za-z]/.test(data)) {
        return "failure";
      }
      const binary = atob2(data);
      const bytes = new Uint8Array(binary.length);
      for (let byte = 0; byte < binary.length; byte++) {
        bytes[byte] = binary.charCodeAt(byte);
      }
      return bytes;
    }
    function collectAnHTTPQuotedString(input, position, extractValue) {
      const positionStart = position.position;
      let value3 = "";
      assert(input[position.position] === '"');
      position.position++;
      while (true) {
        value3 += collectASequenceOfCodePoints(
          (char) => char !== '"' && char !== "\\",
          input,
          position
        );
        if (position.position >= input.length) {
          break;
        }
        const quoteOrBackslash = input[position.position];
        position.position++;
        if (quoteOrBackslash === "\\") {
          if (position.position >= input.length) {
            value3 += "\\";
            break;
          }
          value3 += input[position.position];
          position.position++;
        } else {
          assert(quoteOrBackslash === '"');
          break;
        }
      }
      if (extractValue) {
        return value3;
      }
      return input.slice(positionStart, position.position);
    }
    function serializeAMimeType(mimeType) {
      assert(mimeType !== "failure");
      const { parameters, essence } = mimeType;
      let serialization = essence;
      for (let [name, value3] of parameters.entries()) {
        serialization += ";";
        serialization += name;
        serialization += "=";
        if (!HTTP_TOKEN_CODEPOINTS.test(value3)) {
          value3 = value3.replace(/(\\|")/g, "\\$1");
          value3 = '"' + value3;
          value3 += '"';
        }
        serialization += value3;
      }
      return serialization;
    }
    function isHTTPWhiteSpace(char) {
      return char === "\r" || char === "\n" || char === "	" || char === " ";
    }
    function removeHTTPWhitespace(str, leading = true, trailing = true) {
      let lead = 0;
      let trail = str.length - 1;
      if (leading) {
        for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++) ;
      }
      if (trailing) {
        for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--) ;
      }
      return str.slice(lead, trail + 1);
    }
    function isASCIIWhitespace(char) {
      return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
    }
    function removeASCIIWhitespace(str, leading = true, trailing = true) {
      let lead = 0;
      let trail = str.length - 1;
      if (leading) {
        for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++) ;
      }
      if (trailing) {
        for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--) ;
      }
      return str.slice(lead, trail + 1);
    }
    module2.exports = {
      dataURLProcessor,
      URLSerializer,
      collectASequenceOfCodePoints,
      collectASequenceOfCodePointsFast,
      stringPercentDecode,
      parseMIMEType,
      collectAnHTTPQuotedString,
      serializeAMimeType
    };
  }
});

// node_modules/undici/lib/fetch/file.js
var require_file = __commonJS({
  "node_modules/undici/lib/fetch/file.js"(exports2, module2) {
    "use strict";
    var { Blob: Blob2, File: NativeFile } = require("buffer");
    var { types } = require("util");
    var { kState } = require_symbols2();
    var { isBlobLike } = require_util2();
    var { webidl } = require_webidl();
    var { parseMIMEType, serializeAMimeType } = require_dataURL();
    var { kEnumerableProperty } = require_util();
    var encoder = new TextEncoder();
    var File = class _File extends Blob2 {
      constructor(fileBits, fileName, options = {}) {
        webidl.argumentLengthCheck(arguments, 2, { header: "File constructor" });
        fileBits = webidl.converters["sequence<BlobPart>"](fileBits);
        fileName = webidl.converters.USVString(fileName);
        options = webidl.converters.FilePropertyBag(options);
        const n = fileName;
        let t = options.type;
        let d;
        substep: {
          if (t) {
            t = parseMIMEType(t);
            if (t === "failure") {
              t = "";
              break substep;
            }
            t = serializeAMimeType(t).toLowerCase();
          }
          d = options.lastModified;
        }
        super(processBlobParts(fileBits, options), { type: t });
        this[kState] = {
          name: n,
          lastModified: d,
          type: t
        };
      }
      get name() {
        webidl.brandCheck(this, _File);
        return this[kState].name;
      }
      get lastModified() {
        webidl.brandCheck(this, _File);
        return this[kState].lastModified;
      }
      get type() {
        webidl.brandCheck(this, _File);
        return this[kState].type;
      }
    };
    var FileLike = class _FileLike {
      constructor(blobLike, fileName, options = {}) {
        const n = fileName;
        const t = options.type;
        const d = options.lastModified ?? Date.now();
        this[kState] = {
          blobLike,
          name: n,
          type: t,
          lastModified: d
        };
      }
      stream(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.stream(...args);
      }
      arrayBuffer(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.arrayBuffer(...args);
      }
      slice(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.slice(...args);
      }
      text(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.text(...args);
      }
      get size() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.size;
      }
      get type() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.type;
      }
      get name() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].name;
      }
      get lastModified() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].lastModified;
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
    };
    Object.defineProperties(File.prototype, {
      [Symbol.toStringTag]: {
        value: "File",
        configurable: true
      },
      name: kEnumerableProperty,
      lastModified: kEnumerableProperty
    });
    webidl.converters.Blob = webidl.interfaceConverter(Blob2);
    webidl.converters.BlobPart = function(V, opts) {
      if (webidl.util.Type(V) === "Object") {
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false });
        }
        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
          return webidl.converters.BufferSource(V, opts);
        }
      }
      return webidl.converters.USVString(V, opts);
    };
    webidl.converters["sequence<BlobPart>"] = webidl.sequenceConverter(
      webidl.converters.BlobPart
    );
    webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
      {
        key: "lastModified",
        converter: webidl.converters["long long"],
        get defaultValue() {
          return Date.now();
        }
      },
      {
        key: "type",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "endings",
        converter: (value3) => {
          value3 = webidl.converters.DOMString(value3);
          value3 = value3.toLowerCase();
          if (value3 !== "native") {
            value3 = "transparent";
          }
          return value3;
        },
        defaultValue: "transparent"
      }
    ]);
    function processBlobParts(parts, options) {
      const bytes = [];
      for (const element of parts) {
        if (typeof element === "string") {
          let s = element;
          if (options.endings === "native") {
            s = convertLineEndingsNative(s);
          }
          bytes.push(encoder.encode(s));
        } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {
          if (!element.buffer) {
            bytes.push(new Uint8Array(element));
          } else {
            bytes.push(
              new Uint8Array(element.buffer, element.byteOffset, element.byteLength)
            );
          }
        } else if (isBlobLike(element)) {
          bytes.push(element);
        }
      }
      return bytes;
    }
    function convertLineEndingsNative(s) {
      let nativeLineEnding = "\n";
      if (process.platform === "win32") {
        nativeLineEnding = "\r\n";
      }
      return s.replace(/\r?\n/g, nativeLineEnding);
    }
    function isFileLike(object) {
      return NativeFile && object instanceof NativeFile || object instanceof File || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
    }
    module2.exports = { File, FileLike, isFileLike };
  }
});

// node_modules/undici/lib/fetch/formdata.js
var require_formdata = __commonJS({
  "node_modules/undici/lib/fetch/formdata.js"(exports2, module2) {
    "use strict";
    var { isBlobLike, toUSVString, makeIterator } = require_util2();
    var { kState } = require_symbols2();
    var { File: UndiciFile, FileLike, isFileLike } = require_file();
    var { webidl } = require_webidl();
    var { Blob: Blob2, File: NativeFile } = require("buffer");
    var File = NativeFile ?? UndiciFile;
    var FormData = class _FormData {
      constructor(form) {
        if (form !== void 0) {
          throw webidl.errors.conversionFailed({
            prefix: "FormData constructor",
            argument: "Argument 1",
            types: ["undefined"]
          });
        }
        this[kState] = [];
      }
      append(name, value3, filename = void 0) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
        if (arguments.length === 3 && !isBlobLike(value3)) {
          throw new TypeError(
            "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
          );
        }
        name = webidl.converters.USVString(name);
        value3 = isBlobLike(value3) ? webidl.converters.Blob(value3, { strict: false }) : webidl.converters.USVString(value3);
        filename = arguments.length === 3 ? webidl.converters.USVString(filename) : void 0;
        const entry = makeEntry2(name, value3, filename);
        this[kState].push(entry);
      }
      delete(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
        name = webidl.converters.USVString(name);
        this[kState] = this[kState].filter((entry) => entry.name !== name);
      }
      get(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
        name = webidl.converters.USVString(name);
        const idx = this[kState].findIndex((entry) => entry.name === name);
        if (idx === -1) {
          return null;
        }
        return this[kState][idx].value;
      }
      getAll(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
        name = webidl.converters.USVString(name);
        return this[kState].filter((entry) => entry.name === name).map((entry) => entry.value);
      }
      has(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
        name = webidl.converters.USVString(name);
        return this[kState].findIndex((entry) => entry.name === name) !== -1;
      }
      set(name, value3, filename = void 0) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
        if (arguments.length === 3 && !isBlobLike(value3)) {
          throw new TypeError(
            "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
          );
        }
        name = webidl.converters.USVString(name);
        value3 = isBlobLike(value3) ? webidl.converters.Blob(value3, { strict: false }) : webidl.converters.USVString(value3);
        filename = arguments.length === 3 ? toUSVString(filename) : void 0;
        const entry = makeEntry2(name, value3, filename);
        const idx = this[kState].findIndex((entry2) => entry2.name === name);
        if (idx !== -1) {
          this[kState] = [
            ...this[kState].slice(0, idx),
            entry,
            ...this[kState].slice(idx + 1).filter((entry2) => entry2.name !== name)
          ];
        } else {
          this[kState].push(entry);
        }
      }
      entries() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "key+value"
        );
      }
      keys() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "key"
        );
      }
      values() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "value"
        );
      }
      /**
       * @param {(value: string, key: string, self: FormData) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
        if (typeof callbackFn !== "function") {
          throw new TypeError(
            "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
          );
        }
        for (const [key, value3] of this) {
          callbackFn.apply(thisArg, [value3, key, this]);
        }
      }
    };
    FormData.prototype[Symbol.iterator] = FormData.prototype.entries;
    Object.defineProperties(FormData.prototype, {
      [Symbol.toStringTag]: {
        value: "FormData",
        configurable: true
      }
    });
    function makeEntry2(name, value3, filename) {
      name = Buffer.from(name).toString("utf8");
      if (typeof value3 === "string") {
        value3 = Buffer.from(value3).toString("utf8");
      } else {
        if (!isFileLike(value3)) {
          value3 = value3 instanceof Blob2 ? new File([value3], "blob", { type: value3.type }) : new FileLike(value3, "blob", { type: value3.type });
        }
        if (filename !== void 0) {
          const options = {
            type: value3.type,
            lastModified: value3.lastModified
          };
          value3 = NativeFile && value3 instanceof NativeFile || value3 instanceof UndiciFile ? new File([value3], filename, options) : new FileLike(value3, filename, options);
        }
      }
      return { name, value: value3 };
    }
    module2.exports = { FormData };
  }
});

// node_modules/undici/lib/fetch/body.js
var require_body = __commonJS({
  "node_modules/undici/lib/fetch/body.js"(exports2, module2) {
    "use strict";
    var Busboy = require_main();
    var util = require_util();
    var {
      ReadableStreamFrom,
      isBlobLike,
      isReadableStreamLike,
      readableStreamClose,
      createDeferredPromise,
      fullyReadBody
    } = require_util2();
    var { FormData } = require_formdata();
    var { kState } = require_symbols2();
    var { webidl } = require_webidl();
    var { DOMException: DOMException2, structuredClone } = require_constants2();
    var { Blob: Blob2, File: NativeFile } = require("buffer");
    var { kBodyUsed } = require_symbols();
    var assert = require("assert");
    var { isErrored } = require_util();
    var { isUint8Array, isArrayBuffer } = require("util/types");
    var { File: UndiciFile } = require_file();
    var { parseMIMEType, serializeAMimeType } = require_dataURL();
    var ReadableStream = globalThis.ReadableStream;
    var File = NativeFile ?? UndiciFile;
    var textEncoder = new TextEncoder();
    var textDecoder = new TextDecoder();
    function extractBody(object, keepalive = false) {
      if (!ReadableStream) {
        ReadableStream = require("stream/web").ReadableStream;
      }
      let stream = null;
      if (object instanceof ReadableStream) {
        stream = object;
      } else if (isBlobLike(object)) {
        stream = object.stream();
      } else {
        stream = new ReadableStream({
          async pull(controller) {
            controller.enqueue(
              typeof source === "string" ? textEncoder.encode(source) : source
            );
            queueMicrotask(() => readableStreamClose(controller));
          },
          start() {
          },
          type: void 0
        });
      }
      assert(isReadableStreamLike(stream));
      let action = null;
      let source = null;
      let length2 = null;
      let type = null;
      if (typeof object === "string") {
        source = object;
        type = "text/plain;charset=UTF-8";
      } else if (object instanceof URLSearchParams) {
        source = object.toString();
        type = "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isArrayBuffer(object)) {
        source = new Uint8Array(object.slice());
      } else if (ArrayBuffer.isView(object)) {
        source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
      } else if (util.isFormDataLike(object)) {
        const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, "0")}`;
        const prefix = `--${boundary}\r
Content-Disposition: form-data`;
        const escape2 = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
        const normalizeLinefeeds = (value3) => value3.replace(/\r?\n|\r/g, "\r\n");
        const blobParts = [];
        const rn = new Uint8Array([13, 10]);
        length2 = 0;
        let hasUnknownSizeValue = false;
        for (const [name, value3] of object) {
          if (typeof value3 === "string") {
            const chunk5 = textEncoder.encode(prefix + `; name="${escape2(normalizeLinefeeds(name))}"\r
\r
${normalizeLinefeeds(value3)}\r
`);
            blobParts.push(chunk5);
            length2 += chunk5.byteLength;
          } else {
            const chunk5 = textEncoder.encode(`${prefix}; name="${escape2(normalizeLinefeeds(name))}"` + (value3.name ? `; filename="${escape2(value3.name)}"` : "") + `\r
Content-Type: ${value3.type || "application/octet-stream"}\r
\r
`);
            blobParts.push(chunk5, value3, rn);
            if (typeof value3.size === "number") {
              length2 += chunk5.byteLength + value3.size + rn.byteLength;
            } else {
              hasUnknownSizeValue = true;
            }
          }
        }
        const chunk4 = textEncoder.encode(`--${boundary}--`);
        blobParts.push(chunk4);
        length2 += chunk4.byteLength;
        if (hasUnknownSizeValue) {
          length2 = null;
        }
        source = object;
        action = async function* () {
          for (const part of blobParts) {
            if (part.stream) {
              yield* part.stream();
            } else {
              yield part;
            }
          }
        };
        type = "multipart/form-data; boundary=" + boundary;
      } else if (isBlobLike(object)) {
        source = object;
        length2 = object.size;
        if (object.type) {
          type = object.type;
        }
      } else if (typeof object[Symbol.asyncIterator] === "function") {
        if (keepalive) {
          throw new TypeError("keepalive");
        }
        if (util.isDisturbed(object) || object.locked) {
          throw new TypeError(
            "Response body object should not be disturbed or locked"
          );
        }
        stream = object instanceof ReadableStream ? object : ReadableStreamFrom(object);
      }
      if (typeof source === "string" || util.isBuffer(source)) {
        length2 = Buffer.byteLength(source);
      }
      if (action != null) {
        let iterator;
        stream = new ReadableStream({
          async start() {
            iterator = action(object)[Symbol.asyncIterator]();
          },
          async pull(controller) {
            const { value: value3, done: done7 } = await iterator.next();
            if (done7) {
              queueMicrotask(() => {
                controller.close();
              });
            } else {
              if (!isErrored(stream)) {
                controller.enqueue(new Uint8Array(value3));
              }
            }
            return controller.desiredSize > 0;
          },
          async cancel(reason) {
            await iterator.return();
          },
          type: void 0
        });
      }
      const body = { stream, source, length: length2 };
      return [body, type];
    }
    function safelyExtractBody(object, keepalive = false) {
      if (!ReadableStream) {
        ReadableStream = require("stream/web").ReadableStream;
      }
      if (object instanceof ReadableStream) {
        assert(!util.isDisturbed(object), "The body has already been consumed.");
        assert(!object.locked, "The stream is locked.");
      }
      return extractBody(object, keepalive);
    }
    function cloneBody(body) {
      const [out1, out2] = body.stream.tee();
      const out2Clone = structuredClone(out2, { transfer: [out2] });
      const [, finalClone] = out2Clone.tee();
      body.stream = out1;
      return {
        stream: finalClone,
        length: body.length,
        source: body.source
      };
    }
    async function* consumeBody(body) {
      if (body) {
        if (isUint8Array(body)) {
          yield body;
        } else {
          const stream = body.stream;
          if (util.isDisturbed(stream)) {
            throw new TypeError("The body has already been consumed.");
          }
          if (stream.locked) {
            throw new TypeError("The stream is locked.");
          }
          stream[kBodyUsed] = true;
          yield* stream;
        }
      }
    }
    function throwIfAborted(state) {
      if (state.aborted) {
        throw new DOMException2("The operation was aborted.", "AbortError");
      }
    }
    function bodyMixinMethods(instance) {
      const methods = {
        blob() {
          return specConsumeBody(this, (bytes) => {
            let mimeType = bodyMimeType(this);
            if (mimeType === "failure") {
              mimeType = "";
            } else if (mimeType) {
              mimeType = serializeAMimeType(mimeType);
            }
            return new Blob2([bytes], { type: mimeType });
          }, instance);
        },
        arrayBuffer() {
          return specConsumeBody(this, (bytes) => {
            return new Uint8Array(bytes).buffer;
          }, instance);
        },
        text() {
          return specConsumeBody(this, utf8DecodeBytes, instance);
        },
        json() {
          return specConsumeBody(this, parseJSONFromBytes, instance);
        },
        async formData() {
          webidl.brandCheck(this, instance);
          throwIfAborted(this[kState]);
          const contentType = this.headers.get("Content-Type");
          if (/multipart\/form-data/.test(contentType)) {
            const headers = {};
            for (const [key, value3] of this.headers) headers[key.toLowerCase()] = value3;
            const responseFormData = new FormData();
            let busboy;
            try {
              busboy = new Busboy({
                headers,
                preservePath: true
              });
            } catch (err) {
              throw new DOMException2(`${err}`, "AbortError");
            }
            busboy.on("field", (name, value3) => {
              responseFormData.append(name, value3);
            });
            busboy.on("file", (name, value3, filename, encoding, mimeType) => {
              const chunks = [];
              if (encoding === "base64" || encoding.toLowerCase() === "base64") {
                let base64chunk = "";
                value3.on("data", (chunk4) => {
                  base64chunk += chunk4.toString().replace(/[\r\n]/gm, "");
                  const end3 = base64chunk.length - base64chunk.length % 4;
                  chunks.push(Buffer.from(base64chunk.slice(0, end3), "base64"));
                  base64chunk = base64chunk.slice(end3);
                });
                value3.on("end", () => {
                  chunks.push(Buffer.from(base64chunk, "base64"));
                  responseFormData.append(name, new File(chunks, filename, { type: mimeType }));
                });
              } else {
                value3.on("data", (chunk4) => {
                  chunks.push(chunk4);
                });
                value3.on("end", () => {
                  responseFormData.append(name, new File(chunks, filename, { type: mimeType }));
                });
              }
            });
            const busboyResolve = new Promise((resolve, reject) => {
              busboy.on("finish", resolve);
              busboy.on("error", (err) => reject(new TypeError(err)));
            });
            if (this.body !== null) for await (const chunk4 of consumeBody(this[kState].body)) busboy.write(chunk4);
            busboy.end();
            await busboyResolve;
            return responseFormData;
          } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
            let entries2;
            try {
              let text = "";
              const streamingDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
              for await (const chunk4 of consumeBody(this[kState].body)) {
                if (!isUint8Array(chunk4)) {
                  throw new TypeError("Expected Uint8Array chunk");
                }
                text += streamingDecoder.decode(chunk4, { stream: true });
              }
              text += streamingDecoder.decode();
              entries2 = new URLSearchParams(text);
            } catch (err) {
              throw Object.assign(new TypeError(), { cause: err });
            }
            const formData = new FormData();
            for (const [name, value3] of entries2) {
              formData.append(name, value3);
            }
            return formData;
          } else {
            await Promise.resolve();
            throwIfAborted(this[kState]);
            throw webidl.errors.exception({
              header: `${instance.name}.formData`,
              message: "Could not parse content as FormData."
            });
          }
        }
      };
      return methods;
    }
    function mixinBody(prototype) {
      Object.assign(prototype.prototype, bodyMixinMethods(prototype));
    }
    async function specConsumeBody(object, convertBytesToJSValue, instance) {
      webidl.brandCheck(object, instance);
      throwIfAborted(object[kState]);
      if (bodyUnusable(object[kState].body)) {
        throw new TypeError("Body is unusable");
      }
      const promise3 = createDeferredPromise();
      const errorSteps = (error) => promise3.reject(error);
      const successSteps = (data) => {
        try {
          promise3.resolve(convertBytesToJSValue(data));
        } catch (e) {
          errorSteps(e);
        }
      };
      if (object[kState].body == null) {
        successSteps(new Uint8Array());
        return promise3.promise;
      }
      await fullyReadBody(object[kState].body, successSteps, errorSteps);
      return promise3.promise;
    }
    function bodyUnusable(body) {
      return body != null && (body.stream.locked || util.isDisturbed(body.stream));
    }
    function utf8DecodeBytes(buffer) {
      if (buffer.length === 0) {
        return "";
      }
      if (buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191) {
        buffer = buffer.subarray(3);
      }
      const output = textDecoder.decode(buffer);
      return output;
    }
    function parseJSONFromBytes(bytes) {
      return JSON.parse(utf8DecodeBytes(bytes));
    }
    function bodyMimeType(object) {
      const { headersList } = object[kState];
      const contentType = headersList.get("content-type");
      if (contentType === null) {
        return "failure";
      }
      return parseMIMEType(contentType);
    }
    module2.exports = {
      extractBody,
      safelyExtractBody,
      cloneBody,
      mixinBody
    };
  }
});

// node_modules/undici/lib/core/request.js
var require_request = __commonJS({
  "node_modules/undici/lib/core/request.js"(exports2, module2) {
    "use strict";
    var {
      InvalidArgumentError,
      NotSupportedError
    } = require_errors();
    var assert = require("assert");
    var { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols();
    var util = require_util();
    var tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
    var headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    var invalidPathRegex = /[^\u0021-\u00ff]/;
    var kHandler = Symbol("handler");
    var channels = {};
    var extractBody;
    try {
      const diagnosticsChannel = require("diagnostics_channel");
      channels.create = diagnosticsChannel.channel("undici:request:create");
      channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent");
      channels.headers = diagnosticsChannel.channel("undici:request:headers");
      channels.trailers = diagnosticsChannel.channel("undici:request:trailers");
      channels.error = diagnosticsChannel.channel("undici:request:error");
    } catch {
      channels.create = { hasSubscribers: false };
      channels.bodySent = { hasSubscribers: false };
      channels.headers = { hasSubscribers: false };
      channels.trailers = { hasSubscribers: false };
      channels.error = { hasSubscribers: false };
    }
    var Request = class _Request {
      constructor(origin, {
        path,
        method,
        body,
        headers,
        query,
        idempotent,
        blocking,
        upgrade,
        headersTimeout,
        bodyTimeout,
        reset,
        throwOnError,
        expectContinue
      }, handler) {
        if (typeof path !== "string") {
          throw new InvalidArgumentError("path must be a string");
        } else if (path[0] !== "/" && !(path.startsWith("http://") || path.startsWith("https://")) && method !== "CONNECT") {
          throw new InvalidArgumentError("path must be an absolute URL or start with a slash");
        } else if (invalidPathRegex.exec(path) !== null) {
          throw new InvalidArgumentError("invalid request path");
        }
        if (typeof method !== "string") {
          throw new InvalidArgumentError("method must be a string");
        } else if (tokenRegExp.exec(method) === null) {
          throw new InvalidArgumentError("invalid request method");
        }
        if (upgrade && typeof upgrade !== "string") {
          throw new InvalidArgumentError("upgrade must be a string");
        }
        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
          throw new InvalidArgumentError("invalid headersTimeout");
        }
        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
          throw new InvalidArgumentError("invalid bodyTimeout");
        }
        if (reset != null && typeof reset !== "boolean") {
          throw new InvalidArgumentError("invalid reset");
        }
        if (expectContinue != null && typeof expectContinue !== "boolean") {
          throw new InvalidArgumentError("invalid expectContinue");
        }
        this.headersTimeout = headersTimeout;
        this.bodyTimeout = bodyTimeout;
        this.throwOnError = throwOnError === true;
        this.method = method;
        this.abort = null;
        if (body == null) {
          this.body = null;
        } else if (util.isStream(body)) {
          this.body = body;
          const rState = this.body._readableState;
          if (!rState || !rState.autoDestroy) {
            this.endHandler = function autoDestroy() {
              util.destroy(this);
            };
            this.body.on("end", this.endHandler);
          }
          this.errorHandler = (err) => {
            if (this.abort) {
              this.abort(err);
            } else {
              this.error = err;
            }
          };
          this.body.on("error", this.errorHandler);
        } else if (util.isBuffer(body)) {
          this.body = body.byteLength ? body : null;
        } else if (ArrayBuffer.isView(body)) {
          this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
        } else if (body instanceof ArrayBuffer) {
          this.body = body.byteLength ? Buffer.from(body) : null;
        } else if (typeof body === "string") {
          this.body = body.length ? Buffer.from(body) : null;
        } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
          this.body = body;
        } else {
          throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
        }
        this.completed = false;
        this.aborted = false;
        this.upgrade = upgrade || null;
        this.path = query ? util.buildURL(path, query) : path;
        this.origin = origin;
        this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
        this.blocking = blocking == null ? false : blocking;
        this.reset = reset == null ? null : reset;
        this.host = null;
        this.contentLength = null;
        this.contentType = null;
        this.headers = "";
        this.expectContinue = expectContinue != null ? expectContinue : false;
        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError("headers array must be even");
          }
          for (let i = 0; i < headers.length; i += 2) {
            processHeader(this, headers[i], headers[i + 1]);
          }
        } else if (headers && typeof headers === "object") {
          const keys5 = Object.keys(headers);
          for (let i = 0; i < keys5.length; i++) {
            const key = keys5[i];
            processHeader(this, key, headers[key]);
          }
        } else if (headers != null) {
          throw new InvalidArgumentError("headers must be an object or an array");
        }
        if (util.isFormDataLike(this.body)) {
          if (util.nodeMajor < 16 || util.nodeMajor === 16 && util.nodeMinor < 8) {
            throw new InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
          }
          if (!extractBody) {
            extractBody = require_body().extractBody;
          }
          const [bodyStream, contentType] = extractBody(body);
          if (this.contentType == null) {
            this.contentType = contentType;
            this.headers += `content-type: ${contentType}\r
`;
          }
          this.body = bodyStream.stream;
          this.contentLength = bodyStream.length;
        } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
          this.contentType = body.type;
          this.headers += `content-type: ${body.type}\r
`;
        }
        util.validateHandler(handler, method, upgrade);
        this.servername = util.getServerName(this.host);
        this[kHandler] = handler;
        if (channels.create.hasSubscribers) {
          channels.create.publish({ request: this });
        }
      }
      onBodySent(chunk4) {
        if (this[kHandler].onBodySent) {
          try {
            return this[kHandler].onBodySent(chunk4);
          } catch (err) {
            this.abort(err);
          }
        }
      }
      onRequestSent() {
        if (channels.bodySent.hasSubscribers) {
          channels.bodySent.publish({ request: this });
        }
        if (this[kHandler].onRequestSent) {
          try {
            return this[kHandler].onRequestSent();
          } catch (err) {
            this.abort(err);
          }
        }
      }
      onConnect(abort) {
        assert(!this.aborted);
        assert(!this.completed);
        if (this.error) {
          abort(this.error);
        } else {
          this.abort = abort;
          return this[kHandler].onConnect(abort);
        }
      }
      onHeaders(statusCode, headers, resume2, statusText) {
        assert(!this.aborted);
        assert(!this.completed);
        if (channels.headers.hasSubscribers) {
          channels.headers.publish({ request: this, response: { statusCode, headers, statusText } });
        }
        try {
          return this[kHandler].onHeaders(statusCode, headers, resume2, statusText);
        } catch (err) {
          this.abort(err);
        }
      }
      onData(chunk4) {
        assert(!this.aborted);
        assert(!this.completed);
        try {
          return this[kHandler].onData(chunk4);
        } catch (err) {
          this.abort(err);
          return false;
        }
      }
      onUpgrade(statusCode, headers, socket) {
        assert(!this.aborted);
        assert(!this.completed);
        return this[kHandler].onUpgrade(statusCode, headers, socket);
      }
      onComplete(trailers) {
        this.onFinally();
        assert(!this.aborted);
        this.completed = true;
        if (channels.trailers.hasSubscribers) {
          channels.trailers.publish({ request: this, trailers });
        }
        try {
          return this[kHandler].onComplete(trailers);
        } catch (err) {
          this.onError(err);
        }
      }
      onError(error) {
        this.onFinally();
        if (channels.error.hasSubscribers) {
          channels.error.publish({ request: this, error });
        }
        if (this.aborted) {
          return;
        }
        this.aborted = true;
        return this[kHandler].onError(error);
      }
      onFinally() {
        if (this.errorHandler) {
          this.body.off("error", this.errorHandler);
          this.errorHandler = null;
        }
        if (this.endHandler) {
          this.body.off("end", this.endHandler);
          this.endHandler = null;
        }
      }
      // TODO: adjust to support H2
      addHeader(key, value3) {
        processHeader(this, key, value3);
        return this;
      }
      static [kHTTP1BuildRequest](origin, opts, handler) {
        return new _Request(origin, opts, handler);
      }
      static [kHTTP2BuildRequest](origin, opts, handler) {
        const headers = opts.headers;
        opts = { ...opts, headers: null };
        const request2 = new _Request(origin, opts, handler);
        request2.headers = {};
        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError("headers array must be even");
          }
          for (let i = 0; i < headers.length; i += 2) {
            processHeader(request2, headers[i], headers[i + 1], true);
          }
        } else if (headers && typeof headers === "object") {
          const keys5 = Object.keys(headers);
          for (let i = 0; i < keys5.length; i++) {
            const key = keys5[i];
            processHeader(request2, key, headers[key], true);
          }
        } else if (headers != null) {
          throw new InvalidArgumentError("headers must be an object or an array");
        }
        return request2;
      }
      static [kHTTP2CopyHeaders](raw) {
        const rawHeaders = raw.split("\r\n");
        const headers = {};
        for (const header of rawHeaders) {
          const [key, value3] = header.split(": ");
          if (value3 == null || value3.length === 0) continue;
          if (headers[key]) headers[key] += `,${value3}`;
          else headers[key] = value3;
        }
        return headers;
      }
    };
    function processHeaderValue(key, val, skipAppend) {
      if (val && typeof val === "object") {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
      val = val != null ? `${val}` : "";
      if (headerCharRegex.exec(val) !== null) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
      return skipAppend ? val : `${key}: ${val}\r
`;
    }
    function processHeader(request2, key, val, skipAppend = false) {
      if (val && (typeof val === "object" && !Array.isArray(val))) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      } else if (val === void 0) {
        return;
      }
      if (request2.host === null && key.length === 4 && key.toLowerCase() === "host") {
        if (headerCharRegex.exec(val) !== null) {
          throw new InvalidArgumentError(`invalid ${key} header`);
        }
        request2.host = val;
      } else if (request2.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
        request2.contentLength = parseInt(val, 10);
        if (!Number.isFinite(request2.contentLength)) {
          throw new InvalidArgumentError("invalid content-length header");
        }
      } else if (request2.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
        request2.contentType = val;
        if (skipAppend) request2.headers[key] = processHeaderValue(key, val, skipAppend);
        else request2.headers += processHeaderValue(key, val);
      } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") {
        throw new InvalidArgumentError("invalid transfer-encoding header");
      } else if (key.length === 10 && key.toLowerCase() === "connection") {
        const value3 = typeof val === "string" ? val.toLowerCase() : null;
        if (value3 !== "close" && value3 !== "keep-alive") {
          throw new InvalidArgumentError("invalid connection header");
        } else if (value3 === "close") {
          request2.reset = true;
        }
      } else if (key.length === 10 && key.toLowerCase() === "keep-alive") {
        throw new InvalidArgumentError("invalid keep-alive header");
      } else if (key.length === 7 && key.toLowerCase() === "upgrade") {
        throw new InvalidArgumentError("invalid upgrade header");
      } else if (key.length === 6 && key.toLowerCase() === "expect") {
        throw new NotSupportedError("expect header not supported");
      } else if (tokenRegExp.exec(key) === null) {
        throw new InvalidArgumentError("invalid header key");
      } else {
        if (Array.isArray(val)) {
          for (let i = 0; i < val.length; i++) {
            if (skipAppend) {
              if (request2.headers[key]) request2.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`;
              else request2.headers[key] = processHeaderValue(key, val[i], skipAppend);
            } else {
              request2.headers += processHeaderValue(key, val[i]);
            }
          }
        } else {
          if (skipAppend) request2.headers[key] = processHeaderValue(key, val, skipAppend);
          else request2.headers += processHeaderValue(key, val);
        }
      }
    }
    module2.exports = Request;
  }
});

// node_modules/undici/lib/dispatcher.js
var require_dispatcher = __commonJS({
  "node_modules/undici/lib/dispatcher.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("events");
    var Dispatcher = class extends EventEmitter {
      dispatch() {
        throw new Error("not implemented");
      }
      close() {
        throw new Error("not implemented");
      }
      destroy() {
        throw new Error("not implemented");
      }
    };
    module2.exports = Dispatcher;
  }
});

// node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base = __commonJS({
  "node_modules/undici/lib/dispatcher-base.js"(exports2, module2) {
    "use strict";
    var Dispatcher = require_dispatcher();
    var {
      ClientDestroyedError,
      ClientClosedError,
      InvalidArgumentError
    } = require_errors();
    var { kDestroy, kClose, kDispatch, kInterceptors } = require_symbols();
    var kDestroyed = Symbol("destroyed");
    var kClosed = Symbol("closed");
    var kOnDestroyed = Symbol("onDestroyed");
    var kOnClosed = Symbol("onClosed");
    var kInterceptedDispatch = Symbol("Intercepted Dispatch");
    var DispatcherBase = class extends Dispatcher {
      constructor() {
        super();
        this[kDestroyed] = false;
        this[kOnDestroyed] = null;
        this[kClosed] = false;
        this[kOnClosed] = [];
      }
      get destroyed() {
        return this[kDestroyed];
      }
      get closed() {
        return this[kClosed];
      }
      get interceptors() {
        return this[kInterceptors];
      }
      set interceptors(newInterceptors) {
        if (newInterceptors) {
          for (let i = newInterceptors.length - 1; i >= 0; i--) {
            const interceptor = this[kInterceptors][i];
            if (typeof interceptor !== "function") {
              throw new InvalidArgumentError("interceptor must be an function");
            }
          }
        }
        this[kInterceptors] = newInterceptors;
      }
      close(callback) {
        if (callback === void 0) {
          return new Promise((resolve, reject) => {
            this.close((err, data) => {
              return err ? reject(err) : resolve(data);
            });
          });
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (this[kDestroyed]) {
          queueMicrotask(() => callback(new ClientDestroyedError(), null));
          return;
        }
        if (this[kClosed]) {
          if (this[kOnClosed]) {
            this[kOnClosed].push(callback);
          } else {
            queueMicrotask(() => callback(null, null));
          }
          return;
        }
        this[kClosed] = true;
        this[kOnClosed].push(callback);
        const onClosed = () => {
          const callbacks = this[kOnClosed];
          this[kOnClosed] = null;
          for (let i = 0; i < callbacks.length; i++) {
            callbacks[i](null, null);
          }
        };
        this[kClose]().then(() => this.destroy()).then(() => {
          queueMicrotask(onClosed);
        });
      }
      destroy(err, callback) {
        if (typeof err === "function") {
          callback = err;
          err = null;
        }
        if (callback === void 0) {
          return new Promise((resolve, reject) => {
            this.destroy(err, (err2, data) => {
              return err2 ? (
                /* istanbul ignore next: should never error */
                reject(err2)
              ) : resolve(data);
            });
          });
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (this[kDestroyed]) {
          if (this[kOnDestroyed]) {
            this[kOnDestroyed].push(callback);
          } else {
            queueMicrotask(() => callback(null, null));
          }
          return;
        }
        if (!err) {
          err = new ClientDestroyedError();
        }
        this[kDestroyed] = true;
        this[kOnDestroyed] = this[kOnDestroyed] || [];
        this[kOnDestroyed].push(callback);
        const onDestroyed = () => {
          const callbacks = this[kOnDestroyed];
          this[kOnDestroyed] = null;
          for (let i = 0; i < callbacks.length; i++) {
            callbacks[i](null, null);
          }
        };
        this[kDestroy](err).then(() => {
          queueMicrotask(onDestroyed);
        });
      }
      [kInterceptedDispatch](opts, handler) {
        if (!this[kInterceptors] || this[kInterceptors].length === 0) {
          this[kInterceptedDispatch] = this[kDispatch];
          return this[kDispatch](opts, handler);
        }
        let dispatch = this[kDispatch].bind(this);
        for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
          dispatch = this[kInterceptors][i](dispatch);
        }
        this[kInterceptedDispatch] = dispatch;
        return dispatch(opts, handler);
      }
      dispatch(opts, handler) {
        if (!handler || typeof handler !== "object") {
          throw new InvalidArgumentError("handler must be an object");
        }
        try {
          if (!opts || typeof opts !== "object") {
            throw new InvalidArgumentError("opts must be an object.");
          }
          if (this[kDestroyed] || this[kOnDestroyed]) {
            throw new ClientDestroyedError();
          }
          if (this[kClosed]) {
            throw new ClientClosedError();
          }
          return this[kInterceptedDispatch](opts, handler);
        } catch (err) {
          if (typeof handler.onError !== "function") {
            throw new InvalidArgumentError("invalid onError method");
          }
          handler.onError(err);
          return false;
        }
      }
    };
    module2.exports = DispatcherBase;
  }
});

// node_modules/undici/lib/core/connect.js
var require_connect = __commonJS({
  "node_modules/undici/lib/core/connect.js"(exports2, module2) {
    "use strict";
    var net = require("net");
    var assert = require("assert");
    var util = require_util();
    var { InvalidArgumentError, ConnectTimeoutError } = require_errors();
    var tls;
    var SessionCache;
    if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
      SessionCache = class WeakSessionCache {
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions;
          this._sessionCache = /* @__PURE__ */ new Map();
          this._sessionRegistry = new global.FinalizationRegistry((key) => {
            if (this._sessionCache.size < this._maxCachedSessions) {
              return;
            }
            const ref = this._sessionCache.get(key);
            if (ref !== void 0 && ref.deref() === void 0) {
              this._sessionCache.delete(key);
            }
          });
        }
        get(sessionKey) {
          const ref = this._sessionCache.get(sessionKey);
          return ref ? ref.deref() : null;
        }
        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return;
          }
          this._sessionCache.set(sessionKey, new WeakRef(session));
          this._sessionRegistry.register(session, sessionKey);
        }
      };
    } else {
      SessionCache = class SimpleSessionCache {
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions;
          this._sessionCache = /* @__PURE__ */ new Map();
        }
        get(sessionKey) {
          return this._sessionCache.get(sessionKey);
        }
        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return;
          }
          if (this._sessionCache.size >= this._maxCachedSessions) {
            const { value: oldestKey } = this._sessionCache.keys().next();
            this._sessionCache.delete(oldestKey);
          }
          this._sessionCache.set(sessionKey, session);
        }
      };
    }
    function buildConnector({ allowH2, maxCachedSessions, socketPath, timeout: timeout3, ...opts }) {
      if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
        throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
      }
      const options = { path: socketPath, ...opts };
      const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
      timeout3 = timeout3 == null ? 1e4 : timeout3;
      allowH2 = allowH2 != null ? allowH2 : false;
      return function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
        let socket;
        if (protocol === "https:") {
          if (!tls) {
            tls = require("tls");
          }
          servername = servername || options.servername || util.getServerName(host) || null;
          const sessionKey = servername || hostname;
          const session = sessionCache.get(sessionKey) || null;
          assert(sessionKey);
          socket = tls.connect({
            highWaterMark: 16384,
            // TLS in node can't have bigger HWM anyway...
            ...options,
            servername,
            session,
            localAddress,
            // TODO(HTTP/2): Add support for h2c
            ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
            socket: httpSocket,
            // upgrade socket connection
            port: port || 443,
            host: hostname
          });
          socket.on("session", function(session2) {
            sessionCache.set(sessionKey, session2);
          });
        } else {
          assert(!httpSocket, "httpSocket can only be sent on TLS update");
          socket = net.connect({
            highWaterMark: 64 * 1024,
            // Same as nodejs fs streams.
            ...options,
            localAddress,
            port: port || 80,
            host: hostname
          });
        }
        if (options.keepAlive == null || options.keepAlive) {
          const keepAliveInitialDelay = options.keepAliveInitialDelay === void 0 ? 6e4 : options.keepAliveInitialDelay;
          socket.setKeepAlive(true, keepAliveInitialDelay);
        }
        const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout3);
        socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
          cancelTimeout();
          if (callback) {
            const cb = callback;
            callback = null;
            cb(null, this);
          }
        }).on("error", function(err) {
          cancelTimeout();
          if (callback) {
            const cb = callback;
            callback = null;
            cb(err);
          }
        });
        return socket;
      };
    }
    function setupTimeout(onConnectTimeout2, timeout3) {
      if (!timeout3) {
        return () => {
        };
      }
      let s1 = null;
      let s2 = null;
      const timeoutId = setTimeout(() => {
        s1 = setImmediate(() => {
          if (process.platform === "win32") {
            s2 = setImmediate(() => onConnectTimeout2());
          } else {
            onConnectTimeout2();
          }
        });
      }, timeout3);
      return () => {
        clearTimeout(timeoutId);
        clearImmediate(s1);
        clearImmediate(s2);
      };
    }
    function onConnectTimeout(socket) {
      util.destroy(socket, new ConnectTimeoutError());
    }
    module2.exports = buildConnector;
  }
});

// node_modules/undici/lib/llhttp/utils.js
var require_utils = __commonJS({
  "node_modules/undici/lib/llhttp/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.enumToMap = void 0;
    function enumToMap(obj) {
      const res = {};
      Object.keys(obj).forEach((key) => {
        const value3 = obj[key];
        if (typeof value3 === "number") {
          res[key] = value3;
        }
      });
      return res;
    }
    exports2.enumToMap = enumToMap;
  }
});

// node_modules/undici/lib/llhttp/constants.js
var require_constants3 = __commonJS({
  "node_modules/undici/lib/llhttp/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SPECIAL_HEADERS = exports2.HEADER_STATE = exports2.MINOR = exports2.MAJOR = exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS = exports2.TOKEN = exports2.STRICT_TOKEN = exports2.HEX = exports2.URL_CHAR = exports2.STRICT_URL_CHAR = exports2.USERINFO_CHARS = exports2.MARK = exports2.ALPHANUM = exports2.NUM = exports2.HEX_MAP = exports2.NUM_MAP = exports2.ALPHA = exports2.FINISH = exports2.H_METHOD_MAP = exports2.METHOD_MAP = exports2.METHODS_RTSP = exports2.METHODS_ICE = exports2.METHODS_HTTP = exports2.METHODS = exports2.LENIENT_FLAGS = exports2.FLAGS = exports2.TYPE = exports2.ERROR = void 0;
    var utils_1 = require_utils();
    var ERROR;
    (function(ERROR2) {
      ERROR2[ERROR2["OK"] = 0] = "OK";
      ERROR2[ERROR2["INTERNAL"] = 1] = "INTERNAL";
      ERROR2[ERROR2["STRICT"] = 2] = "STRICT";
      ERROR2[ERROR2["LF_EXPECTED"] = 3] = "LF_EXPECTED";
      ERROR2[ERROR2["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
      ERROR2[ERROR2["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
      ERROR2[ERROR2["INVALID_METHOD"] = 6] = "INVALID_METHOD";
      ERROR2[ERROR2["INVALID_URL"] = 7] = "INVALID_URL";
      ERROR2[ERROR2["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
      ERROR2[ERROR2["INVALID_VERSION"] = 9] = "INVALID_VERSION";
      ERROR2[ERROR2["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
      ERROR2[ERROR2["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
      ERROR2[ERROR2["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
      ERROR2[ERROR2["INVALID_STATUS"] = 13] = "INVALID_STATUS";
      ERROR2[ERROR2["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
      ERROR2[ERROR2["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
      ERROR2[ERROR2["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
      ERROR2[ERROR2["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
      ERROR2[ERROR2["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
      ERROR2[ERROR2["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
      ERROR2[ERROR2["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
      ERROR2[ERROR2["PAUSED"] = 21] = "PAUSED";
      ERROR2[ERROR2["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
      ERROR2[ERROR2["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
      ERROR2[ERROR2["USER"] = 24] = "USER";
    })(ERROR = exports2.ERROR || (exports2.ERROR = {}));
    var TYPE;
    (function(TYPE2) {
      TYPE2[TYPE2["BOTH"] = 0] = "BOTH";
      TYPE2[TYPE2["REQUEST"] = 1] = "REQUEST";
      TYPE2[TYPE2["RESPONSE"] = 2] = "RESPONSE";
    })(TYPE = exports2.TYPE || (exports2.TYPE = {}));
    var FLAGS;
    (function(FLAGS2) {
      FLAGS2[FLAGS2["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
      FLAGS2[FLAGS2["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
      FLAGS2[FLAGS2["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
      FLAGS2[FLAGS2["CHUNKED"] = 8] = "CHUNKED";
      FLAGS2[FLAGS2["UPGRADE"] = 16] = "UPGRADE";
      FLAGS2[FLAGS2["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
      FLAGS2[FLAGS2["SKIPBODY"] = 64] = "SKIPBODY";
      FLAGS2[FLAGS2["TRAILING"] = 128] = "TRAILING";
      FLAGS2[FLAGS2["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
    })(FLAGS = exports2.FLAGS || (exports2.FLAGS = {}));
    var LENIENT_FLAGS;
    (function(LENIENT_FLAGS2) {
      LENIENT_FLAGS2[LENIENT_FLAGS2["HEADERS"] = 1] = "HEADERS";
      LENIENT_FLAGS2[LENIENT_FLAGS2["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
      LENIENT_FLAGS2[LENIENT_FLAGS2["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
    })(LENIENT_FLAGS = exports2.LENIENT_FLAGS || (exports2.LENIENT_FLAGS = {}));
    var METHODS;
    (function(METHODS2) {
      METHODS2[METHODS2["DELETE"] = 0] = "DELETE";
      METHODS2[METHODS2["GET"] = 1] = "GET";
      METHODS2[METHODS2["HEAD"] = 2] = "HEAD";
      METHODS2[METHODS2["POST"] = 3] = "POST";
      METHODS2[METHODS2["PUT"] = 4] = "PUT";
      METHODS2[METHODS2["CONNECT"] = 5] = "CONNECT";
      METHODS2[METHODS2["OPTIONS"] = 6] = "OPTIONS";
      METHODS2[METHODS2["TRACE"] = 7] = "TRACE";
      METHODS2[METHODS2["COPY"] = 8] = "COPY";
      METHODS2[METHODS2["LOCK"] = 9] = "LOCK";
      METHODS2[METHODS2["MKCOL"] = 10] = "MKCOL";
      METHODS2[METHODS2["MOVE"] = 11] = "MOVE";
      METHODS2[METHODS2["PROPFIND"] = 12] = "PROPFIND";
      METHODS2[METHODS2["PROPPATCH"] = 13] = "PROPPATCH";
      METHODS2[METHODS2["SEARCH"] = 14] = "SEARCH";
      METHODS2[METHODS2["UNLOCK"] = 15] = "UNLOCK";
      METHODS2[METHODS2["BIND"] = 16] = "BIND";
      METHODS2[METHODS2["REBIND"] = 17] = "REBIND";
      METHODS2[METHODS2["UNBIND"] = 18] = "UNBIND";
      METHODS2[METHODS2["ACL"] = 19] = "ACL";
      METHODS2[METHODS2["REPORT"] = 20] = "REPORT";
      METHODS2[METHODS2["MKACTIVITY"] = 21] = "MKACTIVITY";
      METHODS2[METHODS2["CHECKOUT"] = 22] = "CHECKOUT";
      METHODS2[METHODS2["MERGE"] = 23] = "MERGE";
      METHODS2[METHODS2["M-SEARCH"] = 24] = "M-SEARCH";
      METHODS2[METHODS2["NOTIFY"] = 25] = "NOTIFY";
      METHODS2[METHODS2["SUBSCRIBE"] = 26] = "SUBSCRIBE";
      METHODS2[METHODS2["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
      METHODS2[METHODS2["PATCH"] = 28] = "PATCH";
      METHODS2[METHODS2["PURGE"] = 29] = "PURGE";
      METHODS2[METHODS2["MKCALENDAR"] = 30] = "MKCALENDAR";
      METHODS2[METHODS2["LINK"] = 31] = "LINK";
      METHODS2[METHODS2["UNLINK"] = 32] = "UNLINK";
      METHODS2[METHODS2["SOURCE"] = 33] = "SOURCE";
      METHODS2[METHODS2["PRI"] = 34] = "PRI";
      METHODS2[METHODS2["DESCRIBE"] = 35] = "DESCRIBE";
      METHODS2[METHODS2["ANNOUNCE"] = 36] = "ANNOUNCE";
      METHODS2[METHODS2["SETUP"] = 37] = "SETUP";
      METHODS2[METHODS2["PLAY"] = 38] = "PLAY";
      METHODS2[METHODS2["PAUSE"] = 39] = "PAUSE";
      METHODS2[METHODS2["TEARDOWN"] = 40] = "TEARDOWN";
      METHODS2[METHODS2["GET_PARAMETER"] = 41] = "GET_PARAMETER";
      METHODS2[METHODS2["SET_PARAMETER"] = 42] = "SET_PARAMETER";
      METHODS2[METHODS2["REDIRECT"] = 43] = "REDIRECT";
      METHODS2[METHODS2["RECORD"] = 44] = "RECORD";
      METHODS2[METHODS2["FLUSH"] = 45] = "FLUSH";
    })(METHODS = exports2.METHODS || (exports2.METHODS = {}));
    exports2.METHODS_HTTP = [
      METHODS.DELETE,
      METHODS.GET,
      METHODS.HEAD,
      METHODS.POST,
      METHODS.PUT,
      METHODS.CONNECT,
      METHODS.OPTIONS,
      METHODS.TRACE,
      METHODS.COPY,
      METHODS.LOCK,
      METHODS.MKCOL,
      METHODS.MOVE,
      METHODS.PROPFIND,
      METHODS.PROPPATCH,
      METHODS.SEARCH,
      METHODS.UNLOCK,
      METHODS.BIND,
      METHODS.REBIND,
      METHODS.UNBIND,
      METHODS.ACL,
      METHODS.REPORT,
      METHODS.MKACTIVITY,
      METHODS.CHECKOUT,
      METHODS.MERGE,
      METHODS["M-SEARCH"],
      METHODS.NOTIFY,
      METHODS.SUBSCRIBE,
      METHODS.UNSUBSCRIBE,
      METHODS.PATCH,
      METHODS.PURGE,
      METHODS.MKCALENDAR,
      METHODS.LINK,
      METHODS.UNLINK,
      METHODS.PRI,
      // TODO(indutny): should we allow it with HTTP?
      METHODS.SOURCE
    ];
    exports2.METHODS_ICE = [
      METHODS.SOURCE
    ];
    exports2.METHODS_RTSP = [
      METHODS.OPTIONS,
      METHODS.DESCRIBE,
      METHODS.ANNOUNCE,
      METHODS.SETUP,
      METHODS.PLAY,
      METHODS.PAUSE,
      METHODS.TEARDOWN,
      METHODS.GET_PARAMETER,
      METHODS.SET_PARAMETER,
      METHODS.REDIRECT,
      METHODS.RECORD,
      METHODS.FLUSH,
      // For AirPlay
      METHODS.GET,
      METHODS.POST
    ];
    exports2.METHOD_MAP = utils_1.enumToMap(METHODS);
    exports2.H_METHOD_MAP = {};
    Object.keys(exports2.METHOD_MAP).forEach((key) => {
      if (/^H/.test(key)) {
        exports2.H_METHOD_MAP[key] = exports2.METHOD_MAP[key];
      }
    });
    var FINISH;
    (function(FINISH2) {
      FINISH2[FINISH2["SAFE"] = 0] = "SAFE";
      FINISH2[FINISH2["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
      FINISH2[FINISH2["UNSAFE"] = 2] = "UNSAFE";
    })(FINISH = exports2.FINISH || (exports2.FINISH = {}));
    exports2.ALPHA = [];
    for (let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) {
      exports2.ALPHA.push(String.fromCharCode(i));
      exports2.ALPHA.push(String.fromCharCode(i + 32));
    }
    exports2.NUM_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9
    };
    exports2.HEX_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      A: 10,
      B: 11,
      C: 12,
      D: 13,
      E: 14,
      F: 15,
      a: 10,
      b: 11,
      c: 12,
      d: 13,
      e: 14,
      f: 15
    };
    exports2.NUM = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9"
    ];
    exports2.ALPHANUM = exports2.ALPHA.concat(exports2.NUM);
    exports2.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"];
    exports2.USERINFO_CHARS = exports2.ALPHANUM.concat(exports2.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]);
    exports2.STRICT_URL_CHAR = [
      "!",
      '"',
      "$",
      "%",
      "&",
      "'",
      "(",
      ")",
      "*",
      "+",
      ",",
      "-",
      ".",
      "/",
      ":",
      ";",
      "<",
      "=",
      ">",
      "@",
      "[",
      "\\",
      "]",
      "^",
      "_",
      "`",
      "{",
      "|",
      "}",
      "~"
    ].concat(exports2.ALPHANUM);
    exports2.URL_CHAR = exports2.STRICT_URL_CHAR.concat(["	", "\f"]);
    for (let i = 128; i <= 255; i++) {
      exports2.URL_CHAR.push(i);
    }
    exports2.HEX = exports2.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]);
    exports2.STRICT_TOKEN = [
      "!",
      "#",
      "$",
      "%",
      "&",
      "'",
      "*",
      "+",
      "-",
      ".",
      "^",
      "_",
      "`",
      "|",
      "~"
    ].concat(exports2.ALPHANUM);
    exports2.TOKEN = exports2.STRICT_TOKEN.concat([" "]);
    exports2.HEADER_CHARS = ["	"];
    for (let i = 32; i <= 255; i++) {
      if (i !== 127) {
        exports2.HEADER_CHARS.push(i);
      }
    }
    exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS.filter((c) => c !== 44);
    exports2.MAJOR = exports2.NUM_MAP;
    exports2.MINOR = exports2.MAJOR;
    var HEADER_STATE;
    (function(HEADER_STATE2) {
      HEADER_STATE2[HEADER_STATE2["GENERAL"] = 0] = "GENERAL";
      HEADER_STATE2[HEADER_STATE2["CONNECTION"] = 1] = "CONNECTION";
      HEADER_STATE2[HEADER_STATE2["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
      HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
      HEADER_STATE2[HEADER_STATE2["UPGRADE"] = 4] = "UPGRADE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
      HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
    })(HEADER_STATE = exports2.HEADER_STATE || (exports2.HEADER_STATE = {}));
    exports2.SPECIAL_HEADERS = {
      "connection": HEADER_STATE.CONNECTION,
      "content-length": HEADER_STATE.CONTENT_LENGTH,
      "proxy-connection": HEADER_STATE.CONNECTION,
      "transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
      "upgrade": HEADER_STATE.UPGRADE
    };
  }
});

// node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS({
  "node_modules/undici/lib/handler/RedirectHandler.js"(exports2, module2) {
    "use strict";
    var util = require_util();
    var { kBodyUsed } = require_symbols();
    var assert = require("assert");
    var { InvalidArgumentError } = require_errors();
    var EE = require("events");
    var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
    var kBody = Symbol("body");
    var BodyAsyncIterable = class {
      constructor(body) {
        this[kBody] = body;
        this[kBodyUsed] = false;
      }
      async *[Symbol.asyncIterator]() {
        assert(!this[kBodyUsed], "disturbed");
        this[kBodyUsed] = true;
        yield* this[kBody];
      }
    };
    var RedirectHandler = class {
      constructor(dispatch, maxRedirections, opts, handler) {
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        util.validateHandler(handler, opts.method, opts.upgrade);
        this.dispatch = dispatch;
        this.location = null;
        this.abort = null;
        this.opts = { ...opts, maxRedirections: 0 };
        this.maxRedirections = maxRedirections;
        this.handler = handler;
        this.history = [];
        if (util.isStream(this.opts.body)) {
          if (util.bodyLength(this.opts.body) === 0) {
            this.opts.body.on("data", function() {
              assert(false);
            });
          }
          if (typeof this.opts.body.readableDidRead !== "boolean") {
            this.opts.body[kBodyUsed] = false;
            EE.prototype.on.call(this.opts.body, "data", function() {
              this[kBodyUsed] = true;
            });
          }
        } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") {
          this.opts.body = new BodyAsyncIterable(this.opts.body);
        } else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {
          this.opts.body = new BodyAsyncIterable(this.opts.body);
        }
      }
      onConnect(abort) {
        this.abort = abort;
        this.handler.onConnect(abort, { history: this.history });
      }
      onUpgrade(statusCode, headers, socket) {
        this.handler.onUpgrade(statusCode, headers, socket);
      }
      onError(error) {
        this.handler.onError(error);
      }
      onHeaders(statusCode, headers, resume2, statusText) {
        this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
        if (this.opts.origin) {
          this.history.push(new URL(this.opts.path, this.opts.origin));
        }
        if (!this.location) {
          return this.handler.onHeaders(statusCode, headers, resume2, statusText);
        }
        const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
        const path = search ? `${pathname}${search}` : pathname;
        this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
        this.opts.path = path;
        this.opts.origin = origin;
        this.opts.maxRedirections = 0;
        this.opts.query = null;
        if (statusCode === 303 && this.opts.method !== "HEAD") {
          this.opts.method = "GET";
          this.opts.body = null;
        }
      }
      onData(chunk4) {
        if (this.location) {
        } else {
          return this.handler.onData(chunk4);
        }
      }
      onComplete(trailers) {
        if (this.location) {
          this.location = null;
          this.abort = null;
          this.dispatch(this.opts, this);
        } else {
          this.handler.onComplete(trailers);
        }
      }
      onBodySent(chunk4) {
        if (this.handler.onBodySent) {
          this.handler.onBodySent(chunk4);
        }
      }
    };
    function parseLocation(statusCode, headers) {
      if (redirectableStatusCodes.indexOf(statusCode) === -1) {
        return null;
      }
      for (let i = 0; i < headers.length; i += 2) {
        if (headers[i].toString().toLowerCase() === "location") {
          return headers[i + 1];
        }
      }
    }
    function shouldRemoveHeader(header, removeContent, unknownOrigin) {
      if (header.length === 4) {
        return util.headerNameToString(header) === "host";
      }
      if (removeContent && util.headerNameToString(header).startsWith("content-")) {
        return true;
      }
      if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
        const name = util.headerNameToString(header);
        return name === "authorization" || name === "cookie" || name === "proxy-authorization";
      }
      return false;
    }
    function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
      const ret = [];
      if (Array.isArray(headers)) {
        for (let i = 0; i < headers.length; i += 2) {
          if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
            ret.push(headers[i], headers[i + 1]);
          }
        }
      } else if (headers && typeof headers === "object") {
        for (const key of Object.keys(headers)) {
          if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
            ret.push(key, headers[key]);
          }
        }
      } else {
        assert(headers == null, "headers must be an object or an array");
      }
      return ret;
    }
    module2.exports = RedirectHandler;
  }
});

// node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS({
  "node_modules/undici/lib/interceptor/redirectInterceptor.js"(exports2, module2) {
    "use strict";
    var RedirectHandler = require_RedirectHandler();
    function createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {
      return (dispatch) => {
        return function Intercept(opts, handler) {
          const { maxRedirections = defaultMaxRedirections } = opts;
          if (!maxRedirections) {
            return dispatch(opts, handler);
          }
          const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);
          opts = { ...opts, maxRedirections: 0 };
          return dispatch(opts, redirectHandler);
        };
      };
    }
    module2.exports = createRedirectInterceptor;
  }
});

// node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS({
  "node_modules/undici/lib/llhttp/llhttp-wasm.js"(exports2, module2) {
    module2.exports = "";
  }
});

// node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS({
  "node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(exports2, module2) {
    module2.exports = "";
  }
});

// node_modules/undici/lib/client.js
var require_client = __commonJS({
  "node_modules/undici/lib/client.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var net = require("net");
    var http = require("http");
    var { pipeline } = require("stream");
    var util = require_util();
    var timers = require_timers();
    var Request = require_request();
    var DispatcherBase = require_dispatcher_base();
    var {
      RequestContentLengthMismatchError,
      ResponseContentLengthMismatchError,
      InvalidArgumentError,
      RequestAbortedError,
      HeadersTimeoutError,
      HeadersOverflowError,
      SocketError,
      InformationalError,
      BodyTimeoutError,
      HTTPParserError,
      ResponseExceededMaxSizeError,
      ClientDestroyedError
    } = require_errors();
    var buildConnector = require_connect();
    var {
      kUrl,
      kReset,
      kServerName,
      kClient,
      kBusy,
      kParser,
      kConnect,
      kBlocking,
      kResuming,
      kRunning,
      kPending,
      kSize,
      kWriting,
      kQueue,
      kConnected,
      kConnecting,
      kNeedDrain,
      kNoRef,
      kKeepAliveDefaultTimeout,
      kHostHeader,
      kPendingIdx,
      kRunningIdx,
      kError,
      kPipelining,
      kSocket,
      kKeepAliveTimeoutValue,
      kMaxHeadersSize,
      kKeepAliveMaxTimeout,
      kKeepAliveTimeoutThreshold,
      kHeadersTimeout,
      kBodyTimeout,
      kStrictContentLength,
      kConnector,
      kMaxRedirections,
      kMaxRequests,
      kCounter,
      kClose,
      kDestroy,
      kDispatch,
      kInterceptors,
      kLocalAddress,
      kMaxResponseSize,
      kHTTPConnVersion,
      // HTTP2
      kHost,
      kHTTP2Session,
      kHTTP2SessionState,
      kHTTP2BuildRequest,
      kHTTP2CopyHeaders,
      kHTTP1BuildRequest
    } = require_symbols();
    var http2;
    try {
      http2 = require("http2");
    } catch {
      http2 = { constants: {} };
    }
    var {
      constants: {
        HTTP2_HEADER_AUTHORITY,
        HTTP2_HEADER_METHOD,
        HTTP2_HEADER_PATH,
        HTTP2_HEADER_SCHEME,
        HTTP2_HEADER_CONTENT_LENGTH,
        HTTP2_HEADER_EXPECT,
        HTTP2_HEADER_STATUS
      }
    } = http2;
    var h2ExperimentalWarned = false;
    var FastBuffer = Buffer[Symbol.species];
    var kClosedResolve = Symbol("kClosedResolve");
    var channels = {};
    try {
      const diagnosticsChannel = require("diagnostics_channel");
      channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders");
      channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect");
      channels.connectError = diagnosticsChannel.channel("undici:client:connectError");
      channels.connected = diagnosticsChannel.channel("undici:client:connected");
    } catch {
      channels.sendHeaders = { hasSubscribers: false };
      channels.beforeConnect = { hasSubscribers: false };
      channels.connectError = { hasSubscribers: false };
      channels.connected = { hasSubscribers: false };
    }
    var Client = class extends DispatcherBase {
      /**
       *
       * @param {string|URL} url
       * @param {import('../types/client').Client.Options} options
       */
      constructor(url, {
        interceptors,
        maxHeaderSize,
        headersTimeout,
        socketTimeout,
        requestTimeout,
        connectTimeout,
        bodyTimeout,
        idleTimeout,
        keepAlive,
        keepAliveTimeout,
        maxKeepAliveTimeout,
        keepAliveMaxTimeout,
        keepAliveTimeoutThreshold,
        socketPath,
        pipelining,
        tls,
        strictContentLength,
        maxCachedSessions,
        maxRedirections,
        connect: connect2,
        maxRequestsPerClient,
        localAddress,
        maxResponseSize,
        autoSelectFamily,
        autoSelectFamilyAttemptTimeout,
        // h2
        allowH2,
        maxConcurrentStreams
      } = {}) {
        super();
        if (keepAlive !== void 0) {
          throw new InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
        }
        if (socketTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
        }
        if (requestTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
        }
        if (idleTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
        }
        if (maxKeepAliveTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
        }
        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
          throw new InvalidArgumentError("invalid maxHeaderSize");
        }
        if (socketPath != null && typeof socketPath !== "string") {
          throw new InvalidArgumentError("invalid socketPath");
        }
        if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
          throw new InvalidArgumentError("invalid connectTimeout");
        }
        if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
          throw new InvalidArgumentError("invalid keepAliveTimeout");
        }
        if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
          throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
        }
        if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
          throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
        }
        if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
          throw new InvalidArgumentError("headersTimeout must be a positive integer or zero");
        }
        if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
          throw new InvalidArgumentError("bodyTimeout must be a positive integer or zero");
        }
        if (connect2 != null && typeof connect2 !== "function" && typeof connect2 !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
          throw new InvalidArgumentError("maxRequestsPerClient must be a positive number");
        }
        if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) {
          throw new InvalidArgumentError("localAddress must be valid string IP address");
        }
        if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
          throw new InvalidArgumentError("maxResponseSize must be a positive number");
        }
        if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {
          throw new InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
        }
        if (allowH2 != null && typeof allowH2 !== "boolean") {
          throw new InvalidArgumentError("allowH2 must be a valid boolean value");
        }
        if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) {
          throw new InvalidArgumentError("maxConcurrentStreams must be a possitive integer, greater than 0");
        }
        if (typeof connect2 !== "function") {
          connect2 = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,
            ...connect2
          });
        }
        this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor({ maxRedirections })];
        this[kUrl] = util.parseOrigin(url);
        this[kConnector] = connect2;
        this[kSocket] = null;
        this[kPipelining] = pipelining != null ? pipelining : 1;
        this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;
        this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
        this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
        this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
        this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
        this[kServerName] = null;
        this[kLocalAddress] = localAddress != null ? localAddress : null;
        this[kResuming] = 0;
        this[kNeedDrain] = 0;
        this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r
`;
        this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;
        this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;
        this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
        this[kMaxRedirections] = maxRedirections;
        this[kMaxRequests] = maxRequestsPerClient;
        this[kClosedResolve] = null;
        this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
        this[kHTTPConnVersion] = "h1";
        this[kHTTP2Session] = null;
        this[kHTTP2SessionState] = !allowH2 ? null : {
          // streams: null, // Fixed queue of streams - For future support of `push`
          openStreams: 0,
          // Keep track of them to decide wether or not unref the session
          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
          // Max peerConcurrentStreams for a Node h2 server
        };
        this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}`;
        this[kQueue] = [];
        this[kRunningIdx] = 0;
        this[kPendingIdx] = 0;
      }
      get pipelining() {
        return this[kPipelining];
      }
      set pipelining(value3) {
        this[kPipelining] = value3;
        resume2(this, true);
      }
      get [kPending]() {
        return this[kQueue].length - this[kPendingIdx];
      }
      get [kRunning]() {
        return this[kPendingIdx] - this[kRunningIdx];
      }
      get [kSize]() {
        return this[kQueue].length - this[kRunningIdx];
      }
      get [kConnected]() {
        return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
      }
      get [kBusy]() {
        const socket = this[kSocket];
        return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;
      }
      /* istanbul ignore: only used for test */
      [kConnect](cb) {
        connect(this);
        this.once("connect", cb);
      }
      [kDispatch](opts, handler) {
        const origin = opts.origin || this[kUrl].origin;
        const request2 = this[kHTTPConnVersion] === "h2" ? Request[kHTTP2BuildRequest](origin, opts, handler) : Request[kHTTP1BuildRequest](origin, opts, handler);
        this[kQueue].push(request2);
        if (this[kResuming]) {
        } else if (util.bodyLength(request2.body) == null && util.isIterable(request2.body)) {
          this[kResuming] = 1;
          process.nextTick(resume2, this);
        } else {
          resume2(this, true);
        }
        if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
          this[kNeedDrain] = 2;
        }
        return this[kNeedDrain] < 2;
      }
      async [kClose]() {
        return new Promise((resolve) => {
          if (!this[kSize]) {
            resolve(null);
          } else {
            this[kClosedResolve] = resolve;
          }
        });
      }
      async [kDestroy](err) {
        return new Promise((resolve) => {
          const requests = this[kQueue].splice(this[kPendingIdx]);
          for (let i = 0; i < requests.length; i++) {
            const request2 = requests[i];
            errorRequest(this, request2, err);
          }
          const callback = () => {
            if (this[kClosedResolve]) {
              this[kClosedResolve]();
              this[kClosedResolve] = null;
            }
            resolve();
          };
          if (this[kHTTP2Session] != null) {
            util.destroy(this[kHTTP2Session], err);
            this[kHTTP2Session] = null;
            this[kHTTP2SessionState] = null;
          }
          if (!this[kSocket]) {
            queueMicrotask(callback);
          } else {
            util.destroy(this[kSocket].on("close", callback), err);
          }
          resume2(this);
        });
      }
    };
    function onHttp2SessionError(err) {
      assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
      this[kSocket][kError] = err;
      onError3(this[kClient], err);
    }
    function onHttp2FrameError(type, code, id) {
      const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
      if (id === 0) {
        this[kSocket][kError] = err;
        onError3(this[kClient], err);
      }
    }
    function onHttp2SessionEnd() {
      util.destroy(this, new SocketError("other side closed"));
      util.destroy(this[kSocket], new SocketError("other side closed"));
    }
    function onHTTP2GoAway(code) {
      const client = this[kClient];
      const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
      client[kSocket] = null;
      client[kHTTP2Session] = null;
      if (client.destroyed) {
        assert(this[kPending] === 0);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request2 = requests[i];
          errorRequest(this, request2, err);
        }
      } else if (client[kRunning] > 0) {
        const request2 = client[kQueue][client[kRunningIdx]];
        client[kQueue][client[kRunningIdx]++] = null;
        errorRequest(client, request2, err);
      }
      client[kPendingIdx] = client[kRunningIdx];
      assert(client[kRunning] === 0);
      client.emit(
        "disconnect",
        client[kUrl],
        [client],
        err
      );
      resume2(client);
    }
    var constants = require_constants3();
    var createRedirectInterceptor = require_redirectInterceptor();
    var EMPTY_BUF = Buffer.alloc(0);
    async function lazyllhttp() {
      const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : void 0;
      let mod;
      try {
        mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
      } catch (e) {
        mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
      }
      return await WebAssembly.instantiate(mod, {
        env: {
          /* eslint-disable camelcase */
          wasm_on_url: (p, at, len) => {
            return 0;
          },
          wasm_on_status: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start3 = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start3, len)) || 0;
          },
          wasm_on_message_begin: (p) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onMessageBegin() || 0;
          },
          wasm_on_header_field: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start3 = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start3, len)) || 0;
          },
          wasm_on_header_value: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start3 = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start3, len)) || 0;
          },
          wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
          },
          wasm_on_body: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start3 = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start3, len)) || 0;
          },
          wasm_on_message_complete: (p) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onMessageComplete() || 0;
          }
          /* eslint-enable camelcase */
        }
      });
    }
    var llhttpInstance = null;
    var llhttpPromise = lazyllhttp();
    llhttpPromise.catch();
    var currentParser = null;
    var currentBufferRef = null;
    var currentBufferSize = 0;
    var currentBufferPtr = null;
    var TIMEOUT_HEADERS = 1;
    var TIMEOUT_BODY = 2;
    var TIMEOUT_IDLE = 3;
    var Parser = class {
      constructor(client, socket, { exports: exports3 }) {
        assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
        this.llhttp = exports3;
        this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
        this.client = client;
        this.socket = socket;
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.statusCode = null;
        this.statusText = "";
        this.upgrade = false;
        this.headers = [];
        this.headersSize = 0;
        this.headersMaxSize = client[kMaxHeadersSize];
        this.shouldKeepAlive = false;
        this.paused = false;
        this.resume = this.resume.bind(this);
        this.bytesRead = 0;
        this.keepAlive = "";
        this.contentLength = "";
        this.connection = "";
        this.maxResponseSize = client[kMaxResponseSize];
      }
      setTimeout(value3, type) {
        this.timeoutType = type;
        if (value3 !== this.timeoutValue) {
          timers.clearTimeout(this.timeout);
          if (value3) {
            this.timeout = timers.setTimeout(onParserTimeout, value3, this);
            if (this.timeout.unref) {
              this.timeout.unref();
            }
          } else {
            this.timeout = null;
          }
          this.timeoutValue = value3;
        } else if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
      }
      resume() {
        if (this.socket.destroyed || !this.paused) {
          return;
        }
        assert(this.ptr != null);
        assert(currentParser == null);
        this.llhttp.llhttp_resume(this.ptr);
        assert(this.timeoutType === TIMEOUT_BODY);
        if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        this.paused = false;
        this.execute(this.socket.read() || EMPTY_BUF);
        this.readMore();
      }
      readMore() {
        while (!this.paused && this.ptr) {
          const chunk4 = this.socket.read();
          if (chunk4 === null) {
            break;
          }
          this.execute(chunk4);
        }
      }
      execute(data) {
        assert(this.ptr != null);
        assert(currentParser == null);
        assert(!this.paused);
        const { socket, llhttp } = this;
        if (data.length > currentBufferSize) {
          if (currentBufferPtr) {
            llhttp.free(currentBufferPtr);
          }
          currentBufferSize = Math.ceil(data.length / 4096) * 4096;
          currentBufferPtr = llhttp.malloc(currentBufferSize);
        }
        new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
        try {
          let ret;
          try {
            currentBufferRef = data;
            currentParser = this;
            ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
          } catch (err) {
            throw err;
          } finally {
            currentParser = null;
            currentBufferRef = null;
          }
          const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
          if (ret === constants.ERROR.PAUSED_UPGRADE) {
            this.onUpgrade(data.slice(offset));
          } else if (ret === constants.ERROR.PAUSED) {
            this.paused = true;
            socket.unshift(data.slice(offset));
          } else if (ret !== constants.ERROR.OK) {
            const ptr = llhttp.llhttp_get_error_reason(this.ptr);
            let message = "";
            if (ptr) {
              const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
              message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
            }
            throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));
          }
        } catch (err) {
          util.destroy(socket, err);
        }
      }
      destroy() {
        assert(this.ptr != null);
        assert(currentParser == null);
        this.llhttp.llhttp_free(this.ptr);
        this.ptr = null;
        timers.clearTimeout(this.timeout);
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.paused = false;
      }
      onStatus(buf) {
        this.statusText = buf.toString();
      }
      onMessageBegin() {
        const { socket, client } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request2 = client[kQueue][client[kRunningIdx]];
        if (!request2) {
          return -1;
        }
      }
      onHeaderField(buf) {
        const len = this.headers.length;
        if ((len & 1) === 0) {
          this.headers.push(buf);
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
        }
        this.trackHeader(buf.length);
      }
      onHeaderValue(buf) {
        let len = this.headers.length;
        if ((len & 1) === 1) {
          this.headers.push(buf);
          len += 1;
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
        }
        const key = this.headers[len - 2];
        if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") {
          this.keepAlive += buf.toString();
        } else if (key.length === 10 && key.toString().toLowerCase() === "connection") {
          this.connection += buf.toString();
        } else if (key.length === 14 && key.toString().toLowerCase() === "content-length") {
          this.contentLength += buf.toString();
        }
        this.trackHeader(buf.length);
      }
      trackHeader(len) {
        this.headersSize += len;
        if (this.headersSize >= this.headersMaxSize) {
          util.destroy(this.socket, new HeadersOverflowError());
        }
      }
      onUpgrade(head5) {
        const { upgrade, client, socket, headers, statusCode } = this;
        assert(upgrade);
        const request2 = client[kQueue][client[kRunningIdx]];
        assert(request2);
        assert(!socket.destroyed);
        assert(socket === client[kSocket]);
        assert(!this.paused);
        assert(request2.upgrade || request2.method === "CONNECT");
        this.statusCode = null;
        this.statusText = "";
        this.shouldKeepAlive = null;
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        socket.unshift(head5);
        socket[kParser].destroy();
        socket[kParser] = null;
        socket[kClient] = null;
        socket[kError] = null;
        socket.removeListener("error", onSocketError).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose);
        client[kSocket] = null;
        client[kQueue][client[kRunningIdx]++] = null;
        client.emit("disconnect", client[kUrl], [client], new InformationalError("upgrade"));
        try {
          request2.onUpgrade(statusCode, headers, socket);
        } catch (err) {
          util.destroy(socket, err);
        }
        resume2(client);
      }
      onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
        const { client, socket, headers, statusText } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request2 = client[kQueue][client[kRunningIdx]];
        if (!request2) {
          return -1;
        }
        assert(!this.upgrade);
        assert(this.statusCode < 200);
        if (statusCode === 100) {
          util.destroy(socket, new SocketError("bad response", util.getSocketInfo(socket)));
          return -1;
        }
        if (upgrade && !request2.upgrade) {
          util.destroy(socket, new SocketError("bad upgrade", util.getSocketInfo(socket)));
          return -1;
        }
        assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
        this.statusCode = statusCode;
        this.shouldKeepAlive = shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.
        request2.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
        if (this.statusCode >= 200) {
          const bodyTimeout = request2.bodyTimeout != null ? request2.bodyTimeout : client[kBodyTimeout];
          this.setTimeout(bodyTimeout, TIMEOUT_BODY);
        } else if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        if (request2.method === "CONNECT") {
          assert(client[kRunning] === 1);
          this.upgrade = true;
          return 2;
        }
        if (upgrade) {
          assert(client[kRunning] === 1);
          this.upgrade = true;
          return 2;
        }
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (this.shouldKeepAlive && client[kPipelining]) {
          const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;
          if (keepAliveTimeout != null) {
            const timeout3 = Math.min(
              keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
              client[kKeepAliveMaxTimeout]
            );
            if (timeout3 <= 0) {
              socket[kReset] = true;
            } else {
              client[kKeepAliveTimeoutValue] = timeout3;
            }
          } else {
            client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
          }
        } else {
          socket[kReset] = true;
        }
        const pause = request2.onHeaders(statusCode, headers, this.resume, statusText) === false;
        if (request2.aborted) {
          return -1;
        }
        if (request2.method === "HEAD") {
          return 1;
        }
        if (statusCode < 200) {
          return 1;
        }
        if (socket[kBlocking]) {
          socket[kBlocking] = false;
          resume2(client);
        }
        return pause ? constants.ERROR.PAUSED : 0;
      }
      onBody(buf) {
        const { client, socket, statusCode, maxResponseSize } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request2 = client[kQueue][client[kRunningIdx]];
        assert(request2);
        assert.strictEqual(this.timeoutType, TIMEOUT_BODY);
        if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        assert(statusCode >= 200);
        if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
          util.destroy(socket, new ResponseExceededMaxSizeError());
          return -1;
        }
        this.bytesRead += buf.length;
        if (request2.onData(buf) === false) {
          return constants.ERROR.PAUSED;
        }
      }
      onMessageComplete() {
        const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;
        if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
          return -1;
        }
        if (upgrade) {
          return;
        }
        const request2 = client[kQueue][client[kRunningIdx]];
        assert(request2);
        assert(statusCode >= 100);
        this.statusCode = null;
        this.statusText = "";
        this.bytesRead = 0;
        this.contentLength = "";
        this.keepAlive = "";
        this.connection = "";
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (statusCode < 200) {
          return;
        }
        if (request2.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
          util.destroy(socket, new ResponseContentLengthMismatchError());
          return -1;
        }
        request2.onComplete(headers);
        client[kQueue][client[kRunningIdx]++] = null;
        if (socket[kWriting]) {
          assert.strictEqual(client[kRunning], 0);
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (!shouldKeepAlive) {
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (socket[kReset] && client[kRunning] === 0) {
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (client[kPipelining] === 1) {
          setImmediate(resume2, client);
        } else {
          resume2(client);
        }
      }
    };
    function onParserTimeout(parser) {
      const { socket, timeoutType, client } = parser;
      if (timeoutType === TIMEOUT_HEADERS) {
        if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
          assert(!parser.paused, "cannot be paused while waiting for headers");
          util.destroy(socket, new HeadersTimeoutError());
        }
      } else if (timeoutType === TIMEOUT_BODY) {
        if (!parser.paused) {
          util.destroy(socket, new BodyTimeoutError());
        }
      } else if (timeoutType === TIMEOUT_IDLE) {
        assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
        util.destroy(socket, new InformationalError("socket idle timeout"));
      }
    }
    function onSocketReadable() {
      const { [kParser]: parser } = this;
      if (parser) {
        parser.readMore();
      }
    }
    function onSocketError(err) {
      const { [kClient]: client, [kParser]: parser } = this;
      assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
      if (client[kHTTPConnVersion] !== "h2") {
        if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
          return;
        }
      }
      this[kError] = err;
      onError3(this[kClient], err);
    }
    function onError3(client, err) {
      if (client[kRunning] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
        assert(client[kPendingIdx] === client[kRunningIdx]);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request2 = requests[i];
          errorRequest(client, request2, err);
        }
        assert(client[kSize] === 0);
      }
    }
    function onSocketEnd() {
      const { [kParser]: parser, [kClient]: client } = this;
      if (client[kHTTPConnVersion] !== "h2") {
        if (parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
          return;
        }
      }
      util.destroy(this, new SocketError("other side closed", util.getSocketInfo(this)));
    }
    function onSocketClose() {
      const { [kClient]: client, [kParser]: parser } = this;
      if (client[kHTTPConnVersion] === "h1" && parser) {
        if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
        }
        this[kParser].destroy();
        this[kParser] = null;
      }
      const err = this[kError] || new SocketError("closed", util.getSocketInfo(this));
      client[kSocket] = null;
      if (client.destroyed) {
        assert(client[kPending] === 0);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request2 = requests[i];
          errorRequest(client, request2, err);
        }
      } else if (client[kRunning] > 0 && err.code !== "UND_ERR_INFO") {
        const request2 = client[kQueue][client[kRunningIdx]];
        client[kQueue][client[kRunningIdx]++] = null;
        errorRequest(client, request2, err);
      }
      client[kPendingIdx] = client[kRunningIdx];
      assert(client[kRunning] === 0);
      client.emit("disconnect", client[kUrl], [client], err);
      resume2(client);
    }
    async function connect(client) {
      assert(!client[kConnecting]);
      assert(!client[kSocket]);
      let { host, hostname, protocol, port } = client[kUrl];
      if (hostname[0] === "[") {
        const idx = hostname.indexOf("]");
        assert(idx !== -1);
        const ip = hostname.substring(1, idx);
        assert(net.isIP(ip));
        hostname = ip;
      }
      client[kConnecting] = true;
      if (channels.beforeConnect.hasSubscribers) {
        channels.beforeConnect.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector]
        });
      }
      try {
        const socket = await new Promise((resolve, reject) => {
          client[kConnector]({
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          }, (err, socket2) => {
            if (err) {
              reject(err);
            } else {
              resolve(socket2);
            }
          });
        });
        if (client.destroyed) {
          util.destroy(socket.on("error", () => {
          }), new ClientDestroyedError());
          return;
        }
        client[kConnecting] = false;
        assert(socket);
        const isH2 = socket.alpnProtocol === "h2";
        if (isH2) {
          if (!h2ExperimentalWarned) {
            h2ExperimentalWarned = true;
            process.emitWarning("H2 support is experimental, expect them to change at any time.", {
              code: "UNDICI-H2"
            });
          }
          const session = http2.connect(client[kUrl], {
            createConnection: () => socket,
            peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
          });
          client[kHTTPConnVersion] = "h2";
          session[kClient] = client;
          session[kSocket] = socket;
          session.on("error", onHttp2SessionError);
          session.on("frameError", onHttp2FrameError);
          session.on("end", onHttp2SessionEnd);
          session.on("goaway", onHTTP2GoAway);
          session.on("close", onSocketClose);
          session.unref();
          client[kHTTP2Session] = session;
          socket[kHTTP2Session] = session;
        } else {
          if (!llhttpInstance) {
            llhttpInstance = await llhttpPromise;
            llhttpPromise = null;
          }
          socket[kNoRef] = false;
          socket[kWriting] = false;
          socket[kReset] = false;
          socket[kBlocking] = false;
          socket[kParser] = new Parser(client, socket, llhttpInstance);
        }
        socket[kCounter] = 0;
        socket[kMaxRequests] = client[kMaxRequests];
        socket[kClient] = client;
        socket[kError] = null;
        socket.on("error", onSocketError).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose);
        client[kSocket] = socket;
        if (channels.connected.hasSubscribers) {
          channels.connected.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            connector: client[kConnector],
            socket
          });
        }
        client.emit("connect", client[kUrl], [client]);
      } catch (err) {
        if (client.destroyed) {
          return;
        }
        client[kConnecting] = false;
        if (channels.connectError.hasSubscribers) {
          channels.connectError.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            connector: client[kConnector],
            error: err
          });
        }
        if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
          assert(client[kRunning] === 0);
          while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
            const request2 = client[kQueue][client[kPendingIdx]++];
            errorRequest(client, request2, err);
          }
        } else {
          onError3(client, err);
        }
        client.emit("connectionError", client[kUrl], [client], err);
      }
      resume2(client);
    }
    function emitDrain(client) {
      client[kNeedDrain] = 0;
      client.emit("drain", client[kUrl], [client]);
    }
    function resume2(client, sync10) {
      if (client[kResuming] === 2) {
        return;
      }
      client[kResuming] = 2;
      _resume(client, sync10);
      client[kResuming] = 0;
      if (client[kRunningIdx] > 256) {
        client[kQueue].splice(0, client[kRunningIdx]);
        client[kPendingIdx] -= client[kRunningIdx];
        client[kRunningIdx] = 0;
      }
    }
    function _resume(client, sync10) {
      while (true) {
        if (client.destroyed) {
          assert(client[kPending] === 0);
          return;
        }
        if (client[kClosedResolve] && !client[kSize]) {
          client[kClosedResolve]();
          client[kClosedResolve] = null;
          return;
        }
        const socket = client[kSocket];
        if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
          if (client[kSize] === 0) {
            if (!socket[kNoRef] && socket.unref) {
              socket.unref();
              socket[kNoRef] = true;
            }
          } else if (socket[kNoRef] && socket.ref) {
            socket.ref();
            socket[kNoRef] = false;
          }
          if (client[kSize] === 0) {
            if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
              socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
            }
          } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
            if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
              const request3 = client[kQueue][client[kRunningIdx]];
              const headersTimeout = request3.headersTimeout != null ? request3.headersTimeout : client[kHeadersTimeout];
              socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
            }
          }
        }
        if (client[kBusy]) {
          client[kNeedDrain] = 2;
        } else if (client[kNeedDrain] === 2) {
          if (sync10) {
            client[kNeedDrain] = 1;
            process.nextTick(emitDrain, client);
          } else {
            emitDrain(client);
          }
          continue;
        }
        if (client[kPending] === 0) {
          return;
        }
        if (client[kRunning] >= (client[kPipelining] || 1)) {
          return;
        }
        const request2 = client[kQueue][client[kPendingIdx]];
        if (client[kUrl].protocol === "https:" && client[kServerName] !== request2.servername) {
          if (client[kRunning] > 0) {
            return;
          }
          client[kServerName] = request2.servername;
          if (socket && socket.servername !== request2.servername) {
            util.destroy(socket, new InformationalError("servername changed"));
            return;
          }
        }
        if (client[kConnecting]) {
          return;
        }
        if (!socket && !client[kHTTP2Session]) {
          connect(client);
          return;
        }
        if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
          return;
        }
        if (client[kRunning] > 0 && !request2.idempotent) {
          return;
        }
        if (client[kRunning] > 0 && (request2.upgrade || request2.method === "CONNECT")) {
          return;
        }
        if (client[kRunning] > 0 && util.bodyLength(request2.body) !== 0 && (util.isStream(request2.body) || util.isAsyncIterable(request2.body))) {
          return;
        }
        if (!request2.aborted && write(client, request2)) {
          client[kPendingIdx]++;
        } else {
          client[kQueue].splice(client[kPendingIdx], 1);
        }
      }
    }
    function shouldSendContentLength(method) {
      return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
    }
    function write(client, request2) {
      if (client[kHTTPConnVersion] === "h2") {
        writeH2(client, client[kHTTP2Session], request2);
        return;
      }
      const { body, method, path, host, upgrade, headers, blocking, reset } = request2;
      const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
      if (body && typeof body.read === "function") {
        body.read(0);
      }
      const bodyLength = util.bodyLength(body);
      let contentLength = bodyLength;
      if (contentLength === null) {
        contentLength = request2.contentLength;
      }
      if (contentLength === 0 && !expectsPayload) {
        contentLength = null;
      }
      if (shouldSendContentLength(method) && contentLength > 0 && request2.contentLength !== null && request2.contentLength !== contentLength) {
        if (client[kStrictContentLength]) {
          errorRequest(client, request2, new RequestContentLengthMismatchError());
          return false;
        }
        process.emitWarning(new RequestContentLengthMismatchError());
      }
      const socket = client[kSocket];
      try {
        request2.onConnect((err) => {
          if (request2.aborted || request2.completed) {
            return;
          }
          errorRequest(client, request2, err || new RequestAbortedError());
          util.destroy(socket, new InformationalError("aborted"));
        });
      } catch (err) {
        errorRequest(client, request2, err);
      }
      if (request2.aborted) {
        return false;
      }
      if (method === "HEAD") {
        socket[kReset] = true;
      }
      if (upgrade || method === "CONNECT") {
        socket[kReset] = true;
      }
      if (reset != null) {
        socket[kReset] = reset;
      }
      if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
        socket[kReset] = true;
      }
      if (blocking) {
        socket[kBlocking] = true;
      }
      let header = `${method} ${path} HTTP/1.1\r
`;
      if (typeof host === "string") {
        header += `host: ${host}\r
`;
      } else {
        header += client[kHostHeader];
      }
      if (upgrade) {
        header += `connection: upgrade\r
upgrade: ${upgrade}\r
`;
      } else if (client[kPipelining] && !socket[kReset]) {
        header += "connection: keep-alive\r\n";
      } else {
        header += "connection: close\r\n";
      }
      if (headers) {
        header += headers;
      }
      if (channels.sendHeaders.hasSubscribers) {
        channels.sendHeaders.publish({ request: request2, headers: header, socket });
      }
      if (!body || bodyLength === 0) {
        if (contentLength === 0) {
          socket.write(`${header}content-length: 0\r
\r
`, "latin1");
        } else {
          assert(contentLength === null, "no body must not have content length");
          socket.write(`${header}\r
`, "latin1");
        }
        request2.onRequestSent();
      } else if (util.isBuffer(body)) {
        assert(contentLength === body.byteLength, "buffer body must have content length");
        socket.cork();
        socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
        socket.write(body);
        socket.uncork();
        request2.onBodySent(body);
        request2.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
      } else if (util.isBlobLike(body)) {
        if (typeof body.stream === "function") {
          writeIterable({ body: body.stream(), client, request: request2, socket, contentLength, header, expectsPayload });
        } else {
          writeBlob({ body, client, request: request2, socket, contentLength, header, expectsPayload });
        }
      } else if (util.isStream(body)) {
        writeStream({ body, client, request: request2, socket, contentLength, header, expectsPayload });
      } else if (util.isIterable(body)) {
        writeIterable({ body, client, request: request2, socket, contentLength, header, expectsPayload });
      } else {
        assert(false);
      }
      return true;
    }
    function writeH2(client, session, request2) {
      const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request2;
      let headers;
      if (typeof reqHeaders === "string") headers = Request[kHTTP2CopyHeaders](reqHeaders.trim());
      else headers = reqHeaders;
      if (upgrade) {
        errorRequest(client, request2, new Error("Upgrade not supported for H2"));
        return false;
      }
      try {
        request2.onConnect((err) => {
          if (request2.aborted || request2.completed) {
            return;
          }
          errorRequest(client, request2, err || new RequestAbortedError());
        });
      } catch (err) {
        errorRequest(client, request2, err);
      }
      if (request2.aborted) {
        return false;
      }
      let stream;
      const h2State = client[kHTTP2SessionState];
      headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
      headers[HTTP2_HEADER_METHOD] = method;
      if (method === "CONNECT") {
        session.ref();
        stream = session.request(headers, { endStream: false, signal });
        if (stream.id && !stream.pending) {
          request2.onUpgrade(null, null, stream);
          ++h2State.openStreams;
        } else {
          stream.once("ready", () => {
            request2.onUpgrade(null, null, stream);
            ++h2State.openStreams;
          });
        }
        stream.once("close", () => {
          h2State.openStreams -= 1;
          if (h2State.openStreams === 0) session.unref();
        });
        return true;
      }
      headers[HTTP2_HEADER_PATH] = path;
      headers[HTTP2_HEADER_SCHEME] = "https";
      const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
      if (body && typeof body.read === "function") {
        body.read(0);
      }
      let contentLength = util.bodyLength(body);
      if (contentLength == null) {
        contentLength = request2.contentLength;
      }
      if (contentLength === 0 || !expectsPayload) {
        contentLength = null;
      }
      if (shouldSendContentLength(method) && contentLength > 0 && request2.contentLength != null && request2.contentLength !== contentLength) {
        if (client[kStrictContentLength]) {
          errorRequest(client, request2, new RequestContentLengthMismatchError());
          return false;
        }
        process.emitWarning(new RequestContentLengthMismatchError());
      }
      if (contentLength != null) {
        assert(body, "no body must not have content length");
        headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
      }
      session.ref();
      const shouldEndStream = method === "GET" || method === "HEAD";
      if (expectContinue) {
        headers[HTTP2_HEADER_EXPECT] = "100-continue";
        stream = session.request(headers, { endStream: shouldEndStream, signal });
        stream.once("continue", writeBodyH2);
      } else {
        stream = session.request(headers, {
          endStream: shouldEndStream,
          signal
        });
        writeBodyH2();
      }
      ++h2State.openStreams;
      stream.once("response", (headers2) => {
        const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers2;
        if (request2.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), "") === false) {
          stream.pause();
        }
      });
      stream.once("end", () => {
        request2.onComplete([]);
      });
      stream.on("data", (chunk4) => {
        if (request2.onData(chunk4) === false) {
          stream.pause();
        }
      });
      stream.once("close", () => {
        h2State.openStreams -= 1;
        if (h2State.openStreams === 0) {
          session.unref();
        }
      });
      stream.once("error", function(err) {
        if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
          h2State.streams -= 1;
          util.destroy(stream, err);
        }
      });
      stream.once("frameError", (type, code) => {
        const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
        errorRequest(client, request2, err);
        if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
          h2State.streams -= 1;
          util.destroy(stream, err);
        }
      });
      return true;
      function writeBodyH2() {
        if (!body) {
          request2.onRequestSent();
        } else if (util.isBuffer(body)) {
          assert(contentLength === body.byteLength, "buffer body must have content length");
          stream.cork();
          stream.write(body);
          stream.uncork();
          stream.end();
          request2.onBodySent(body);
          request2.onRequestSent();
        } else if (util.isBlobLike(body)) {
          if (typeof body.stream === "function") {
            writeIterable({
              client,
              request: request2,
              contentLength,
              h2stream: stream,
              expectsPayload,
              body: body.stream(),
              socket: client[kSocket],
              header: ""
            });
          } else {
            writeBlob({
              body,
              client,
              request: request2,
              contentLength,
              expectsPayload,
              h2stream: stream,
              header: "",
              socket: client[kSocket]
            });
          }
        } else if (util.isStream(body)) {
          writeStream({
            body,
            client,
            request: request2,
            contentLength,
            expectsPayload,
            socket: client[kSocket],
            h2stream: stream,
            header: ""
          });
        } else if (util.isIterable(body)) {
          writeIterable({
            body,
            client,
            request: request2,
            contentLength,
            expectsPayload,
            header: "",
            h2stream: stream,
            socket: client[kSocket]
          });
        } else {
          assert(false);
        }
      }
    }
    function writeStream({ h2stream, body, client, request: request2, socket, contentLength, header, expectsPayload }) {
      assert(contentLength !== 0 || client[kRunning] === 0, "stream body cannot be pipelined");
      if (client[kHTTPConnVersion] === "h2") {
        let onPipeData = function(chunk4) {
          request2.onBodySent(chunk4);
        };
        const pipe2 = pipeline(
          body,
          h2stream,
          (err) => {
            if (err) {
              util.destroy(body, err);
              util.destroy(h2stream, err);
            } else {
              request2.onRequestSent();
            }
          }
        );
        pipe2.on("data", onPipeData);
        pipe2.once("end", () => {
          pipe2.removeListener("data", onPipeData);
          util.destroy(pipe2);
        });
        return;
      }
      let finished = false;
      const writer = new AsyncWriter({ socket, request: request2, contentLength, client, expectsPayload, header });
      const onData = function(chunk4) {
        if (finished) {
          return;
        }
        try {
          if (!writer.write(chunk4) && this.pause) {
            this.pause();
          }
        } catch (err) {
          util.destroy(this, err);
        }
      };
      const onDrain = function() {
        if (finished) {
          return;
        }
        if (body.resume) {
          body.resume();
        }
      };
      const onAbort = function() {
        if (finished) {
          return;
        }
        const err = new RequestAbortedError();
        queueMicrotask(() => onFinished(err));
      };
      const onFinished = function(err) {
        if (finished) {
          return;
        }
        finished = true;
        assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);
        socket.off("drain", onDrain).off("error", onFinished);
        body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
        if (!err) {
          try {
            writer.end();
          } catch (er) {
            err = er;
          }
        }
        writer.destroy(err);
        if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) {
          util.destroy(body, err);
        } else {
          util.destroy(body);
        }
      };
      body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
      if (body.resume) {
        body.resume();
      }
      socket.on("drain", onDrain).on("error", onFinished);
    }
    async function writeBlob({ h2stream, body, client, request: request2, socket, contentLength, header, expectsPayload }) {
      assert(contentLength === body.size, "blob body must have content length");
      const isH2 = client[kHTTPConnVersion] === "h2";
      try {
        if (contentLength != null && contentLength !== body.size) {
          throw new RequestContentLengthMismatchError();
        }
        const buffer = Buffer.from(await body.arrayBuffer());
        if (isH2) {
          h2stream.cork();
          h2stream.write(buffer);
          h2stream.uncork();
        } else {
          socket.cork();
          socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
          socket.write(buffer);
          socket.uncork();
        }
        request2.onBodySent(buffer);
        request2.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
        resume2(client);
      } catch (err) {
        util.destroy(isH2 ? h2stream : socket, err);
      }
    }
    async function writeIterable({ h2stream, body, client, request: request2, socket, contentLength, header, expectsPayload }) {
      assert(contentLength !== 0 || client[kRunning] === 0, "iterator body cannot be pipelined");
      let callback = null;
      function onDrain() {
        if (callback) {
          const cb = callback;
          callback = null;
          cb();
        }
      }
      const waitForDrain = () => new Promise((resolve, reject) => {
        assert(callback === null);
        if (socket[kError]) {
          reject(socket[kError]);
        } else {
          callback = resolve;
        }
      });
      if (client[kHTTPConnVersion] === "h2") {
        h2stream.on("close", onDrain).on("drain", onDrain);
        try {
          for await (const chunk4 of body) {
            if (socket[kError]) {
              throw socket[kError];
            }
            const res = h2stream.write(chunk4);
            request2.onBodySent(chunk4);
            if (!res) {
              await waitForDrain();
            }
          }
        } catch (err) {
          h2stream.destroy(err);
        } finally {
          request2.onRequestSent();
          h2stream.end();
          h2stream.off("close", onDrain).off("drain", onDrain);
        }
        return;
      }
      socket.on("close", onDrain).on("drain", onDrain);
      const writer = new AsyncWriter({ socket, request: request2, contentLength, client, expectsPayload, header });
      try {
        for await (const chunk4 of body) {
          if (socket[kError]) {
            throw socket[kError];
          }
          if (!writer.write(chunk4)) {
            await waitForDrain();
          }
        }
        writer.end();
      } catch (err) {
        writer.destroy(err);
      } finally {
        socket.off("close", onDrain).off("drain", onDrain);
      }
    }
    var AsyncWriter = class {
      constructor({ socket, request: request2, contentLength, client, expectsPayload, header }) {
        this.socket = socket;
        this.request = request2;
        this.contentLength = contentLength;
        this.client = client;
        this.bytesWritten = 0;
        this.expectsPayload = expectsPayload;
        this.header = header;
        socket[kWriting] = true;
      }
      write(chunk4) {
        const { socket, request: request2, contentLength, client, bytesWritten, expectsPayload, header } = this;
        if (socket[kError]) {
          throw socket[kError];
        }
        if (socket.destroyed) {
          return false;
        }
        const len = Buffer.byteLength(chunk4);
        if (!len) {
          return true;
        }
        if (contentLength !== null && bytesWritten + len > contentLength) {
          if (client[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError();
          }
          process.emitWarning(new RequestContentLengthMismatchError());
        }
        socket.cork();
        if (bytesWritten === 0) {
          if (!expectsPayload) {
            socket[kReset] = true;
          }
          if (contentLength === null) {
            socket.write(`${header}transfer-encoding: chunked\r
`, "latin1");
          } else {
            socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
          }
        }
        if (contentLength === null) {
          socket.write(`\r
${len.toString(16)}\r
`, "latin1");
        }
        this.bytesWritten += len;
        const ret = socket.write(chunk4);
        socket.uncork();
        request2.onBodySent(chunk4);
        if (!ret) {
          if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
            if (socket[kParser].timeout.refresh) {
              socket[kParser].timeout.refresh();
            }
          }
        }
        return ret;
      }
      end() {
        const { socket, contentLength, client, bytesWritten, expectsPayload, header, request: request2 } = this;
        request2.onRequestSent();
        socket[kWriting] = false;
        if (socket[kError]) {
          throw socket[kError];
        }
        if (socket.destroyed) {
          return;
        }
        if (bytesWritten === 0) {
          if (expectsPayload) {
            socket.write(`${header}content-length: 0\r
\r
`, "latin1");
          } else {
            socket.write(`${header}\r
`, "latin1");
          }
        } else if (contentLength === null) {
          socket.write("\r\n0\r\n\r\n", "latin1");
        }
        if (contentLength !== null && bytesWritten !== contentLength) {
          if (client[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError();
          } else {
            process.emitWarning(new RequestContentLengthMismatchError());
          }
        }
        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
          if (socket[kParser].timeout.refresh) {
            socket[kParser].timeout.refresh();
          }
        }
        resume2(client);
      }
      destroy(err) {
        const { socket, client } = this;
        socket[kWriting] = false;
        if (err) {
          assert(client[kRunning] <= 1, "pipeline should only contain this request");
          util.destroy(socket, err);
        }
      }
    };
    function errorRequest(client, request2, err) {
      try {
        request2.onError(err);
        assert(request2.aborted);
      } catch (err2) {
        client.emit("error", err2);
      }
    }
    module2.exports = Client;
  }
});

// node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS({
  "node_modules/undici/lib/node/fixed-queue.js"(exports2, module2) {
    "use strict";
    var kSize = 2048;
    var kMask = kSize - 1;
    var FixedCircularBuffer = class {
      constructor() {
        this.bottom = 0;
        this.top = 0;
        this.list = new Array(kSize);
        this.next = null;
      }
      isEmpty() {
        return this.top === this.bottom;
      }
      isFull() {
        return (this.top + 1 & kMask) === this.bottom;
      }
      push(data) {
        this.list[this.top] = data;
        this.top = this.top + 1 & kMask;
      }
      shift() {
        const nextItem = this.list[this.bottom];
        if (nextItem === void 0)
          return null;
        this.list[this.bottom] = void 0;
        this.bottom = this.bottom + 1 & kMask;
        return nextItem;
      }
    };
    module2.exports = class FixedQueue {
      constructor() {
        this.head = this.tail = new FixedCircularBuffer();
      }
      isEmpty() {
        return this.head.isEmpty();
      }
      push(data) {
        if (this.head.isFull()) {
          this.head = this.head.next = new FixedCircularBuffer();
        }
        this.head.push(data);
      }
      shift() {
        const tail = this.tail;
        const next = tail.shift();
        if (tail.isEmpty() && tail.next !== null) {
          this.tail = tail.next;
        }
        return next;
      }
    };
  }
});

// node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS({
  "node_modules/undici/lib/pool-stats.js"(exports2, module2) {
    var { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require_symbols();
    var kPool = Symbol("pool");
    var PoolStats = class {
      constructor(pool) {
        this[kPool] = pool;
      }
      get connected() {
        return this[kPool][kConnected];
      }
      get free() {
        return this[kPool][kFree];
      }
      get pending() {
        return this[kPool][kPending];
      }
      get queued() {
        return this[kPool][kQueued];
      }
      get running() {
        return this[kPool][kRunning];
      }
      get size() {
        return this[kPool][kSize];
      }
    };
    module2.exports = PoolStats;
  }
});

// node_modules/undici/lib/pool-base.js
var require_pool_base = __commonJS({
  "node_modules/undici/lib/pool-base.js"(exports2, module2) {
    "use strict";
    var DispatcherBase = require_dispatcher_base();
    var FixedQueue = require_fixed_queue();
    var { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require_symbols();
    var PoolStats = require_pool_stats();
    var kClients = Symbol("clients");
    var kNeedDrain = Symbol("needDrain");
    var kQueue = Symbol("queue");
    var kClosedResolve = Symbol("closed resolve");
    var kOnDrain = Symbol("onDrain");
    var kOnConnect = Symbol("onConnect");
    var kOnDisconnect = Symbol("onDisconnect");
    var kOnConnectionError = Symbol("onConnectionError");
    var kGetDispatcher = Symbol("get dispatcher");
    var kAddClient = Symbol("add client");
    var kRemoveClient = Symbol("remove client");
    var kStats = Symbol("stats");
    var PoolBase = class extends DispatcherBase {
      constructor() {
        super();
        this[kQueue] = new FixedQueue();
        this[kClients] = [];
        this[kQueued] = 0;
        const pool = this;
        this[kOnDrain] = function onDrain(origin, targets) {
          const queue = pool[kQueue];
          let needDrain = false;
          while (!needDrain) {
            const item = queue.shift();
            if (!item) {
              break;
            }
            pool[kQueued]--;
            needDrain = !this.dispatch(item.opts, item.handler);
          }
          this[kNeedDrain] = needDrain;
          if (!this[kNeedDrain] && pool[kNeedDrain]) {
            pool[kNeedDrain] = false;
            pool.emit("drain", origin, [pool, ...targets]);
          }
          if (pool[kClosedResolve] && queue.isEmpty()) {
            Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);
          }
        };
        this[kOnConnect] = (origin, targets) => {
          pool.emit("connect", origin, [pool, ...targets]);
        };
        this[kOnDisconnect] = (origin, targets, err) => {
          pool.emit("disconnect", origin, [pool, ...targets], err);
        };
        this[kOnConnectionError] = (origin, targets, err) => {
          pool.emit("connectionError", origin, [pool, ...targets], err);
        };
        this[kStats] = new PoolStats(this);
      }
      get [kBusy]() {
        return this[kNeedDrain];
      }
      get [kConnected]() {
        return this[kClients].filter((client) => client[kConnected]).length;
      }
      get [kFree]() {
        return this[kClients].filter((client) => client[kConnected] && !client[kNeedDrain]).length;
      }
      get [kPending]() {
        let ret = this[kQueued];
        for (const { [kPending]: pending3 } of this[kClients]) {
          ret += pending3;
        }
        return ret;
      }
      get [kRunning]() {
        let ret = 0;
        for (const { [kRunning]: running3 } of this[kClients]) {
          ret += running3;
        }
        return ret;
      }
      get [kSize]() {
        let ret = this[kQueued];
        for (const { [kSize]: size11 } of this[kClients]) {
          ret += size11;
        }
        return ret;
      }
      get stats() {
        return this[kStats];
      }
      async [kClose]() {
        if (this[kQueue].isEmpty()) {
          return Promise.all(this[kClients].map((c) => c.close()));
        } else {
          return new Promise((resolve) => {
            this[kClosedResolve] = resolve;
          });
        }
      }
      async [kDestroy](err) {
        while (true) {
          const item = this[kQueue].shift();
          if (!item) {
            break;
          }
          item.handler.onError(err);
        }
        return Promise.all(this[kClients].map((c) => c.destroy(err)));
      }
      [kDispatch](opts, handler) {
        const dispatcher = this[kGetDispatcher]();
        if (!dispatcher) {
          this[kNeedDrain] = true;
          this[kQueue].push({ opts, handler });
          this[kQueued]++;
        } else if (!dispatcher.dispatch(opts, handler)) {
          dispatcher[kNeedDrain] = true;
          this[kNeedDrain] = !this[kGetDispatcher]();
        }
        return !this[kNeedDrain];
      }
      [kAddClient](client) {
        client.on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
        this[kClients].push(client);
        if (this[kNeedDrain]) {
          process.nextTick(() => {
            if (this[kNeedDrain]) {
              this[kOnDrain](client[kUrl], [this, client]);
            }
          });
        }
        return this;
      }
      [kRemoveClient](client) {
        client.close(() => {
          const idx = this[kClients].indexOf(client);
          if (idx !== -1) {
            this[kClients].splice(idx, 1);
          }
        });
        this[kNeedDrain] = this[kClients].some((dispatcher) => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
      }
    };
    module2.exports = {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    };
  }
});

// node_modules/undici/lib/pool.js
var require_pool = __commonJS({
  "node_modules/undici/lib/pool.js"(exports2, module2) {
    "use strict";
    var {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kGetDispatcher
    } = require_pool_base();
    var Client = require_client();
    var {
      InvalidArgumentError
    } = require_errors();
    var util = require_util();
    var { kUrl, kInterceptors } = require_symbols();
    var buildConnector = require_connect();
    var kOptions = Symbol("options");
    var kConnections = Symbol("connections");
    var kFactory = Symbol("factory");
    function defaultFactory(origin, opts) {
      return new Client(origin, opts);
    }
    var Pool = class extends PoolBase {
      constructor(origin, {
        connections,
        factory = defaultFactory,
        connect,
        connectTimeout,
        tls,
        maxCachedSessions,
        socketPath,
        autoSelectFamily,
        autoSelectFamilyAttemptTimeout,
        allowH2,
        ...options
      } = {}) {
        super();
        if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
          throw new InvalidArgumentError("invalid connections");
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (typeof connect !== "function") {
          connect = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,
            ...connect
          });
        }
        this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
        this[kConnections] = connections || null;
        this[kUrl] = util.parseOrigin(origin);
        this[kOptions] = { ...util.deepClone(options), connect, allowH2 };
        this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
        this[kFactory] = factory;
      }
      [kGetDispatcher]() {
        let dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain]);
        if (dispatcher) {
          return dispatcher;
        }
        if (!this[kConnections] || this[kClients].length < this[kConnections]) {
          dispatcher = this[kFactory](this[kUrl], this[kOptions]);
          this[kAddClient](dispatcher);
        }
        return dispatcher;
      }
    };
    module2.exports = Pool;
  }
});

// node_modules/undici/lib/balanced-pool.js
var require_balanced_pool = __commonJS({
  "node_modules/undici/lib/balanced-pool.js"(exports2, module2) {
    "use strict";
    var {
      BalancedPoolMissingUpstreamError,
      InvalidArgumentError
    } = require_errors();
    var {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    } = require_pool_base();
    var Pool = require_pool();
    var { kUrl, kInterceptors } = require_symbols();
    var { parseOrigin } = require_util();
    var kFactory = Symbol("factory");
    var kOptions = Symbol("options");
    var kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
    var kCurrentWeight = Symbol("kCurrentWeight");
    var kIndex = Symbol("kIndex");
    var kWeight = Symbol("kWeight");
    var kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
    var kErrorPenalty = Symbol("kErrorPenalty");
    function getGreatestCommonDivisor(a, b) {
      if (b === 0) return a;
      return getGreatestCommonDivisor(b, a % b);
    }
    function defaultFactory(origin, opts) {
      return new Pool(origin, opts);
    }
    var BalancedPool = class extends PoolBase {
      constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {
        super();
        this[kOptions] = opts;
        this[kIndex] = -1;
        this[kCurrentWeight] = 0;
        this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
        this[kErrorPenalty] = this[kOptions].errorPenalty || 15;
        if (!Array.isArray(upstreams)) {
          upstreams = [upstreams];
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
        this[kFactory] = factory;
        for (const upstream of upstreams) {
          this.addUpstream(upstream);
        }
        this._updateBalancedPoolStats();
      }
      addUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin;
        if (this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true)) {
          return this;
        }
        const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));
        this[kAddClient](pool);
        pool.on("connect", () => {
          pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
        });
        pool.on("connectionError", () => {
          pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
          this._updateBalancedPoolStats();
        });
        pool.on("disconnect", (...args) => {
          const err = args[2];
          if (err && err.code === "UND_ERR_SOCKET") {
            pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
            this._updateBalancedPoolStats();
          }
        });
        for (const client of this[kClients]) {
          client[kWeight] = this[kMaxWeightPerServer];
        }
        this._updateBalancedPoolStats();
        return this;
      }
      _updateBalancedPoolStats() {
        this[kGreatestCommonDivisor] = this[kClients].map((p) => p[kWeight]).reduce(getGreatestCommonDivisor, 0);
      }
      removeUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin;
        const pool = this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true);
        if (pool) {
          this[kRemoveClient](pool);
        }
        return this;
      }
      get upstreams() {
        return this[kClients].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);
      }
      [kGetDispatcher]() {
        if (this[kClients].length === 0) {
          throw new BalancedPoolMissingUpstreamError();
        }
        const dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain] && dispatcher2.closed !== true && dispatcher2.destroyed !== true);
        if (!dispatcher) {
          return;
        }
        const allClientsBusy = this[kClients].map((pool) => pool[kNeedDrain]).reduce((a, b) => a && b, true);
        if (allClientsBusy) {
          return;
        }
        let counter6 = 0;
        let maxWeightIndex = this[kClients].findIndex((pool) => !pool[kNeedDrain]);
        while (counter6++ < this[kClients].length) {
          this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
          const pool = this[kClients][this[kIndex]];
          if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
            maxWeightIndex = this[kIndex];
          }
          if (this[kIndex] === 0) {
            this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
            if (this[kCurrentWeight] <= 0) {
              this[kCurrentWeight] = this[kMaxWeightPerServer];
            }
          }
          if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
            return pool;
          }
        }
        this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
        this[kIndex] = maxWeightIndex;
        return this[kClients][maxWeightIndex];
      }
    };
    module2.exports = BalancedPool;
  }
});

// node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS({
  "node_modules/undici/lib/compat/dispatcher-weakref.js"(exports2, module2) {
    "use strict";
    var { kConnected, kSize } = require_symbols();
    var CompatWeakRef = class {
      constructor(value3) {
        this.value = value3;
      }
      deref() {
        return this.value[kConnected] === 0 && this.value[kSize] === 0 ? void 0 : this.value;
      }
    };
    var CompatFinalizer = class {
      constructor(finalizer) {
        this.finalizer = finalizer;
      }
      register(dispatcher, key) {
        if (dispatcher.on) {
          dispatcher.on("disconnect", () => {
            if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
              this.finalizer(key);
            }
          });
        }
      }
    };
    module2.exports = function() {
      if (process.env.NODE_V8_COVERAGE) {
        return {
          WeakRef: CompatWeakRef,
          FinalizationRegistry: CompatFinalizer
        };
      }
      return {
        WeakRef: global.WeakRef || CompatWeakRef,
        FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
      };
    };
  }
});

// node_modules/undici/lib/agent.js
var require_agent = __commonJS({
  "node_modules/undici/lib/agent.js"(exports2, module2) {
    "use strict";
    var { InvalidArgumentError } = require_errors();
    var { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require_symbols();
    var DispatcherBase = require_dispatcher_base();
    var Pool = require_pool();
    var Client = require_client();
    var util = require_util();
    var createRedirectInterceptor = require_redirectInterceptor();
    var { WeakRef: WeakRef2, FinalizationRegistry } = require_dispatcher_weakref()();
    var kOnConnect = Symbol("onConnect");
    var kOnDisconnect = Symbol("onDisconnect");
    var kOnConnectionError = Symbol("onConnectionError");
    var kMaxRedirections = Symbol("maxRedirections");
    var kOnDrain = Symbol("onDrain");
    var kFactory = Symbol("factory");
    var kFinalizer = Symbol("finalizer");
    var kOptions = Symbol("options");
    function defaultFactory(origin, opts) {
      return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);
    }
    var Agent = class extends DispatcherBase {
      constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
        super();
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        if (connect && typeof connect !== "function") {
          connect = { ...connect };
        }
        this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor({ maxRedirections })];
        this[kOptions] = { ...util.deepClone(options), connect };
        this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
        this[kMaxRedirections] = maxRedirections;
        this[kFactory] = factory;
        this[kClients] = /* @__PURE__ */ new Map();
        this[kFinalizer] = new FinalizationRegistry(
          /* istanbul ignore next: gc is undeterministic */
          (key) => {
            const ref = this[kClients].get(key);
            if (ref !== void 0 && ref.deref() === void 0) {
              this[kClients].delete(key);
            }
          }
        );
        const agent = this;
        this[kOnDrain] = (origin, targets) => {
          agent.emit("drain", origin, [agent, ...targets]);
        };
        this[kOnConnect] = (origin, targets) => {
          agent.emit("connect", origin, [agent, ...targets]);
        };
        this[kOnDisconnect] = (origin, targets, err) => {
          agent.emit("disconnect", origin, [agent, ...targets], err);
        };
        this[kOnConnectionError] = (origin, targets, err) => {
          agent.emit("connectionError", origin, [agent, ...targets], err);
        };
      }
      get [kRunning]() {
        let ret = 0;
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            ret += client[kRunning];
          }
        }
        return ret;
      }
      [kDispatch](opts, handler) {
        let key;
        if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) {
          key = String(opts.origin);
        } else {
          throw new InvalidArgumentError("opts.origin must be a non-empty string or URL.");
        }
        const ref = this[kClients].get(key);
        let dispatcher = ref ? ref.deref() : null;
        if (!dispatcher) {
          dispatcher = this[kFactory](opts.origin, this[kOptions]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
          this[kClients].set(key, new WeakRef2(dispatcher));
          this[kFinalizer].register(dispatcher, key);
        }
        return dispatcher.dispatch(opts, handler);
      }
      async [kClose]() {
        const closePromises = [];
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            closePromises.push(client.close());
          }
        }
        await Promise.all(closePromises);
      }
      async [kDestroy](err) {
        const destroyPromises = [];
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            destroyPromises.push(client.destroy(err));
          }
        }
        await Promise.all(destroyPromises);
      }
    };
    module2.exports = Agent;
  }
});

// node_modules/undici/lib/api/readable.js
var require_readable = __commonJS({
  "node_modules/undici/lib/api/readable.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var { Readable } = require("stream");
    var { RequestAbortedError, NotSupportedError, InvalidArgumentError } = require_errors();
    var util = require_util();
    var { ReadableStreamFrom, toUSVString } = require_util();
    var Blob2;
    var kConsume = Symbol("kConsume");
    var kReading = Symbol("kReading");
    var kBody = Symbol("kBody");
    var kAbort = Symbol("abort");
    var kContentType = Symbol("kContentType");
    var noop = () => {
    };
    module2.exports = class BodyReadable extends Readable {
      constructor({
        resume: resume2,
        abort,
        contentType = "",
        highWaterMark = 64 * 1024
        // Same as nodejs fs streams.
      }) {
        super({
          autoDestroy: true,
          read: resume2,
          highWaterMark
        });
        this._readableState.dataEmitted = false;
        this[kAbort] = abort;
        this[kConsume] = null;
        this[kBody] = null;
        this[kContentType] = contentType;
        this[kReading] = false;
      }
      destroy(err) {
        if (this.destroyed) {
          return this;
        }
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError();
        }
        if (err) {
          this[kAbort]();
        }
        return super.destroy(err);
      }
      emit(ev, ...args) {
        if (ev === "data") {
          this._readableState.dataEmitted = true;
        } else if (ev === "error") {
          this._readableState.errorEmitted = true;
        }
        return super.emit(ev, ...args);
      }
      on(ev, ...args) {
        if (ev === "data" || ev === "readable") {
          this[kReading] = true;
        }
        return super.on(ev, ...args);
      }
      addListener(ev, ...args) {
        return this.on(ev, ...args);
      }
      off(ev, ...args) {
        const ret = super.off(ev, ...args);
        if (ev === "data" || ev === "readable") {
          this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
        }
        return ret;
      }
      removeListener(ev, ...args) {
        return this.off(ev, ...args);
      }
      push(chunk4) {
        if (this[kConsume] && chunk4 !== null && this.readableLength === 0) {
          consumePush(this[kConsume], chunk4);
          return this[kReading] ? super.push(chunk4) : true;
        }
        return super.push(chunk4);
      }
      // https://fetch.spec.whatwg.org/#dom-body-text
      async text() {
        return consume(this, "text");
      }
      // https://fetch.spec.whatwg.org/#dom-body-json
      async json() {
        return consume(this, "json");
      }
      // https://fetch.spec.whatwg.org/#dom-body-blob
      async blob() {
        return consume(this, "blob");
      }
      // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
      async arrayBuffer() {
        return consume(this, "arrayBuffer");
      }
      // https://fetch.spec.whatwg.org/#dom-body-formdata
      async formData() {
        throw new NotSupportedError();
      }
      // https://fetch.spec.whatwg.org/#dom-body-bodyused
      get bodyUsed() {
        return util.isDisturbed(this);
      }
      // https://fetch.spec.whatwg.org/#dom-body-body
      get body() {
        if (!this[kBody]) {
          this[kBody] = ReadableStreamFrom(this);
          if (this[kConsume]) {
            this[kBody].getReader();
            assert(this[kBody].locked);
          }
        }
        return this[kBody];
      }
      dump(opts) {
        let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
        const signal = opts && opts.signal;
        if (signal) {
          try {
            if (typeof signal !== "object" || !("aborted" in signal)) {
              throw new InvalidArgumentError("signal must be an AbortSignal");
            }
            util.throwIfAborted(signal);
          } catch (err) {
            return Promise.reject(err);
          }
        }
        if (this.closed) {
          return Promise.resolve(null);
        }
        return new Promise((resolve, reject) => {
          const signalListenerCleanup = signal ? util.addAbortListener(signal, () => {
            this.destroy();
          }) : noop;
          this.on("close", function() {
            signalListenerCleanup();
            if (signal && signal.aborted) {
              reject(signal.reason || Object.assign(new Error("The operation was aborted"), { name: "AbortError" }));
            } else {
              resolve(null);
            }
          }).on("error", noop).on("data", function(chunk4) {
            limit -= chunk4.length;
            if (limit <= 0) {
              this.destroy();
            }
          }).resume();
        });
      }
    };
    function isLocked(self2) {
      return self2[kBody] && self2[kBody].locked === true || self2[kConsume];
    }
    function isUnusable(self2) {
      return util.isDisturbed(self2) || isLocked(self2);
    }
    async function consume(stream, type) {
      if (isUnusable(stream)) {
        throw new TypeError("unusable");
      }
      assert(!stream[kConsume]);
      return new Promise((resolve, reject) => {
        stream[kConsume] = {
          type,
          stream,
          resolve,
          reject,
          length: 0,
          body: []
        };
        stream.on("error", function(err) {
          consumeFinish(this[kConsume], err);
        }).on("close", function() {
          if (this[kConsume].body !== null) {
            consumeFinish(this[kConsume], new RequestAbortedError());
          }
        });
        process.nextTick(consumeStart, stream[kConsume]);
      });
    }
    function consumeStart(consume2) {
      if (consume2.body === null) {
        return;
      }
      const { _readableState: state } = consume2.stream;
      for (const chunk4 of state.buffer) {
        consumePush(consume2, chunk4);
      }
      if (state.endEmitted) {
        consumeEnd(this[kConsume]);
      } else {
        consume2.stream.on("end", function() {
          consumeEnd(this[kConsume]);
        });
      }
      consume2.stream.resume();
      while (consume2.stream.read() != null) {
      }
    }
    function consumeEnd(consume2) {
      const { type, body, resolve, stream, length: length2 } = consume2;
      try {
        if (type === "text") {
          resolve(toUSVString(Buffer.concat(body)));
        } else if (type === "json") {
          resolve(JSON.parse(Buffer.concat(body)));
        } else if (type === "arrayBuffer") {
          const dst = new Uint8Array(length2);
          let pos = 0;
          for (const buf of body) {
            dst.set(buf, pos);
            pos += buf.byteLength;
          }
          resolve(dst.buffer);
        } else if (type === "blob") {
          if (!Blob2) {
            Blob2 = require("buffer").Blob;
          }
          resolve(new Blob2(body, { type: stream[kContentType] }));
        }
        consumeFinish(consume2);
      } catch (err) {
        stream.destroy(err);
      }
    }
    function consumePush(consume2, chunk4) {
      consume2.length += chunk4.length;
      consume2.body.push(chunk4);
    }
    function consumeFinish(consume2, err) {
      if (consume2.body === null) {
        return;
      }
      if (err) {
        consume2.reject(err);
      } else {
        consume2.resolve();
      }
      consume2.type = null;
      consume2.stream = null;
      consume2.resolve = null;
      consume2.reject = null;
      consume2.length = 0;
      consume2.body = null;
    }
  }
});

// node_modules/undici/lib/api/util.js
var require_util3 = __commonJS({
  "node_modules/undici/lib/api/util.js"(exports2, module2) {
    var assert = require("assert");
    var {
      ResponseStatusCodeError
    } = require_errors();
    var { toUSVString } = require_util();
    async function getResolveErrorBodyCallback({ callback, body, contentType, statusCode, statusMessage, headers }) {
      assert(body);
      let chunks = [];
      let limit = 0;
      for await (const chunk4 of body) {
        chunks.push(chunk4);
        limit += chunk4.length;
        if (limit > 128 * 1024) {
          chunks = null;
          break;
        }
      }
      if (statusCode === 204 || !contentType || !chunks) {
        process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
        return;
      }
      try {
        if (contentType.startsWith("application/json")) {
          const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
          return;
        }
        if (contentType.startsWith("text/")) {
          const payload = toUSVString(Buffer.concat(chunks));
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
          return;
        }
      } catch (err) {
      }
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
    }
    module2.exports = { getResolveErrorBodyCallback };
  }
});

// node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS({
  "node_modules/undici/lib/api/abort-signal.js"(exports2, module2) {
    var { addAbortListener } = require_util();
    var { RequestAbortedError } = require_errors();
    var kListener = Symbol("kListener");
    var kSignal = Symbol("kSignal");
    function abort(self2) {
      if (self2.abort) {
        self2.abort();
      } else {
        self2.onError(new RequestAbortedError());
      }
    }
    function addSignal(self2, signal) {
      self2[kSignal] = null;
      self2[kListener] = null;
      if (!signal) {
        return;
      }
      if (signal.aborted) {
        abort(self2);
        return;
      }
      self2[kSignal] = signal;
      self2[kListener] = () => {
        abort(self2);
      };
      addAbortListener(self2[kSignal], self2[kListener]);
    }
    function removeSignal(self2) {
      if (!self2[kSignal]) {
        return;
      }
      if ("removeEventListener" in self2[kSignal]) {
        self2[kSignal].removeEventListener("abort", self2[kListener]);
      } else {
        self2[kSignal].removeListener("abort", self2[kListener]);
      }
      self2[kSignal] = null;
      self2[kListener] = null;
    }
    module2.exports = {
      addSignal,
      removeSignal
    };
  }
});

// node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS({
  "node_modules/undici/lib/api/api-request.js"(exports2, module2) {
    "use strict";
    var Readable = require_readable();
    var {
      InvalidArgumentError,
      RequestAbortedError
    } = require_errors();
    var util = require_util();
    var { getResolveErrorBodyCallback } = require_util3();
    var { AsyncResource } = require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var RequestHandler = class extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
        try {
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) {
            throw new InvalidArgumentError("invalid highWaterMark");
          }
          if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
            throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_REQUEST");
        } catch (err) {
          if (util.isStream(body)) {
            util.destroy(body.on("error", util.nop), err);
          }
          throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.body = body;
        this.trailers = {};
        this.context = null;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError;
        this.highWaterMark = highWaterMark;
        if (util.isStream(body)) {
          body.on("error", (err) => {
            this.onError(err);
          });
        }
        addSignal(this, signal);
      }
      onConnect(abort, context5) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context5;
      }
      onHeaders(statusCode, rawHeaders, resume2, statusMessage) {
        const { callback, opaque, abort, context: context5, responseHeaders, highWaterMark } = this;
        const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
        const contentType = parsedHeaders["content-type"];
        const body = new Readable({ resume: resume2, abort, contentType, highWaterMark });
        this.callback = null;
        this.res = body;
        if (callback !== null) {
          if (this.throwOnError && statusCode >= 400) {
            this.runInAsyncScope(
              getResolveErrorBodyCallback,
              null,
              { callback, body, contentType, statusCode, statusMessage, headers }
            );
          } else {
            this.runInAsyncScope(callback, null, null, {
              statusCode,
              headers,
              trailers: this.trailers,
              opaque,
              body,
              context: context5
            });
          }
        }
      }
      onData(chunk4) {
        const { res } = this;
        return res.push(chunk4);
      }
      onComplete(trailers) {
        const { res } = this;
        removeSignal(this);
        util.parseHeaders(trailers, this.trailers);
        res.push(null);
      }
      onError(err) {
        const { res, callback, body, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
        if (res) {
          this.res = null;
          queueMicrotask(() => {
            util.destroy(res, err);
          });
        }
        if (body) {
          this.body = null;
          util.destroy(body, err);
        }
      }
    };
    function request2(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          request2.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        this.dispatch(opts, new RequestHandler(opts, callback));
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = request2;
    module2.exports.RequestHandler = RequestHandler;
  }
});

// node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS({
  "node_modules/undici/lib/api/api-stream.js"(exports2, module2) {
    "use strict";
    var { finished, PassThrough } = require("stream");
    var {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = require_errors();
    var util = require_util();
    var { getResolveErrorBodyCallback } = require_util3();
    var { AsyncResource } = require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var StreamHandler = class extends AsyncResource {
      constructor(opts, factory, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
        try {
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (typeof factory !== "function") {
            throw new InvalidArgumentError("invalid factory");
          }
          if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
            throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_STREAM");
        } catch (err) {
          if (util.isStream(body)) {
            util.destroy(body.on("error", util.nop), err);
          }
          throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.factory = factory;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.context = null;
        this.trailers = null;
        this.body = body;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError || false;
        if (util.isStream(body)) {
          body.on("error", (err) => {
            this.onError(err);
          });
        }
        addSignal(this, signal);
      }
      onConnect(abort, context5) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context5;
      }
      onHeaders(statusCode, rawHeaders, resume2, statusMessage) {
        const { factory, opaque, context: context5, callback, responseHeaders } = this;
        const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        this.factory = null;
        let res;
        if (this.throwOnError && statusCode >= 400) {
          const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
          const contentType = parsedHeaders["content-type"];
          res = new PassThrough();
          this.callback = null;
          this.runInAsyncScope(
            getResolveErrorBodyCallback,
            null,
            { callback, body: res, contentType, statusCode, statusMessage, headers }
          );
        } else {
          if (factory === null) {
            return;
          }
          res = this.runInAsyncScope(factory, null, {
            statusCode,
            headers,
            opaque,
            context: context5
          });
          if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
            throw new InvalidReturnValueError("expected Writable");
          }
          finished(res, { readable: false }, (err) => {
            const { callback: callback2, res: res2, opaque: opaque2, trailers, abort } = this;
            this.res = null;
            if (err || !res2.readable) {
              util.destroy(res2, err);
            }
            this.callback = null;
            this.runInAsyncScope(callback2, null, err || null, { opaque: opaque2, trailers });
            if (err) {
              abort();
            }
          });
        }
        res.on("drain", resume2);
        this.res = res;
        const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
        return needDrain !== true;
      }
      onData(chunk4) {
        const { res } = this;
        return res ? res.write(chunk4) : true;
      }
      onComplete(trailers) {
        const { res } = this;
        removeSignal(this);
        if (!res) {
          return;
        }
        this.trailers = util.parseHeaders(trailers);
        res.end();
      }
      onError(err) {
        const { res, callback, opaque, body } = this;
        removeSignal(this);
        this.factory = null;
        if (res) {
          this.res = null;
          util.destroy(res, err);
        } else if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
        if (body) {
          this.body = null;
          util.destroy(body, err);
        }
      }
    };
    function stream(opts, factory, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          stream.call(this, opts, factory, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        this.dispatch(opts, new StreamHandler(opts, factory, callback));
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = stream;
  }
});

// node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS({
  "node_modules/undici/lib/api/api-pipeline.js"(exports2, module2) {
    "use strict";
    var {
      Readable,
      Duplex,
      PassThrough
    } = require("stream");
    var {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = require_errors();
    var util = require_util();
    var { AsyncResource } = require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var assert = require("assert");
    var kResume = Symbol("resume");
    var PipelineRequest = class extends Readable {
      constructor() {
        super({ autoDestroy: true });
        this[kResume] = null;
      }
      _read() {
        const { [kResume]: resume2 } = this;
        if (resume2) {
          this[kResume] = null;
          resume2();
        }
      }
      _destroy(err, callback) {
        this._read();
        callback(err);
      }
    };
    var PipelineResponse = class extends Readable {
      constructor(resume2) {
        super({ autoDestroy: true });
        this[kResume] = resume2;
      }
      _read() {
        this[kResume]();
      }
      _destroy(err, callback) {
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError();
        }
        callback(err);
      }
    };
    var PipelineHandler = class extends AsyncResource {
      constructor(opts, handler) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof handler !== "function") {
          throw new InvalidArgumentError("invalid handler");
        }
        const { signal, method, opaque, onInfo, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_PIPELINE");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.handler = handler;
        this.abort = null;
        this.context = null;
        this.onInfo = onInfo || null;
        this.req = new PipelineRequest().on("error", util.nop);
        this.ret = new Duplex({
          readableObjectMode: opts.objectMode,
          autoDestroy: true,
          read: () => {
            const { body } = this;
            if (body && body.resume) {
              body.resume();
            }
          },
          write: (chunk4, encoding, callback) => {
            const { req } = this;
            if (req.push(chunk4, encoding) || req._readableState.destroyed) {
              callback();
            } else {
              req[kResume] = callback;
            }
          },
          destroy: (err, callback) => {
            const { body, req, res, ret, abort } = this;
            if (!err && !ret._readableState.endEmitted) {
              err = new RequestAbortedError();
            }
            if (abort && err) {
              abort();
            }
            util.destroy(body, err);
            util.destroy(req, err);
            util.destroy(res, err);
            removeSignal(this);
            callback(err);
          }
        }).on("prefinish", () => {
          const { req } = this;
          req.push(null);
        });
        this.res = null;
        addSignal(this, signal);
      }
      onConnect(abort, context5) {
        const { ret, res } = this;
        assert(!res, "pipeline cannot be retried");
        if (ret.destroyed) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context5;
      }
      onHeaders(statusCode, rawHeaders, resume2) {
        const { opaque, handler, context: context5 } = this;
        if (statusCode < 200) {
          if (this.onInfo) {
            const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        this.res = new PipelineResponse(resume2);
        let body;
        try {
          this.handler = null;
          const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
          body = this.runInAsyncScope(handler, null, {
            statusCode,
            headers,
            opaque,
            body: this.res,
            context: context5
          });
        } catch (err) {
          this.res.on("error", util.nop);
          throw err;
        }
        if (!body || typeof body.on !== "function") {
          throw new InvalidReturnValueError("expected Readable");
        }
        body.on("data", (chunk4) => {
          const { ret, body: body2 } = this;
          if (!ret.push(chunk4) && body2.pause) {
            body2.pause();
          }
        }).on("error", (err) => {
          const { ret } = this;
          util.destroy(ret, err);
        }).on("end", () => {
          const { ret } = this;
          ret.push(null);
        }).on("close", () => {
          const { ret } = this;
          if (!ret._readableState.ended) {
            util.destroy(ret, new RequestAbortedError());
          }
        });
        this.body = body;
      }
      onData(chunk4) {
        const { res } = this;
        return res.push(chunk4);
      }
      onComplete(trailers) {
        const { res } = this;
        res.push(null);
      }
      onError(err) {
        const { ret } = this;
        this.handler = null;
        util.destroy(ret, err);
      }
    };
    function pipeline(opts, handler) {
      try {
        const pipelineHandler = new PipelineHandler(opts, handler);
        this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);
        return pipelineHandler.ret;
      } catch (err) {
        return new PassThrough().destroy(err);
      }
    }
    module2.exports = pipeline;
  }
});

// node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS({
  "node_modules/undici/lib/api/api-upgrade.js"(exports2, module2) {
    "use strict";
    var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
    var { AsyncResource } = require("async_hooks");
    var util = require_util();
    var { addSignal, removeSignal } = require_abort_signal();
    var assert = require("assert");
    var UpgradeHandler = class extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        const { signal, opaque, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        super("UNDICI_UPGRADE");
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.abort = null;
        this.context = null;
        addSignal(this, signal);
      }
      onConnect(abort, context5) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = null;
      }
      onHeaders() {
        throw new SocketError("bad upgrade", null);
      }
      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context: context5 } = this;
        assert.strictEqual(statusCode, 101);
        removeSignal(this);
        this.callback = null;
        const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        this.runInAsyncScope(callback, null, null, {
          headers,
          socket,
          opaque,
          context: context5
        });
      }
      onError(err) {
        const { callback, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
      }
    };
    function upgrade(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          upgrade.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        const upgradeHandler = new UpgradeHandler(opts, callback);
        this.dispatch({
          ...opts,
          method: opts.method || "GET",
          upgrade: opts.protocol || "Websocket"
        }, upgradeHandler);
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = upgrade;
  }
});

// node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS({
  "node_modules/undici/lib/api/api-connect.js"(exports2, module2) {
    "use strict";
    var { AsyncResource } = require("async_hooks");
    var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
    var util = require_util();
    var { addSignal, removeSignal } = require_abort_signal();
    var ConnectHandler = class extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        const { signal, opaque, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        super("UNDICI_CONNECT");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.callback = callback;
        this.abort = null;
        addSignal(this, signal);
      }
      onConnect(abort, context5) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context5;
      }
      onHeaders() {
        throw new SocketError("bad connect", null);
      }
      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context: context5 } = this;
        removeSignal(this);
        this.callback = null;
        let headers = rawHeaders;
        if (headers != null) {
          headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        }
        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          socket,
          opaque,
          context: context5
        });
      }
      onError(err) {
        const { callback, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
      }
    };
    function connect(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          connect.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        const connectHandler = new ConnectHandler(opts, callback);
        this.dispatch({ ...opts, method: "CONNECT" }, connectHandler);
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = connect;
  }
});

// node_modules/undici/lib/api/index.js
var require_api = __commonJS({
  "node_modules/undici/lib/api/index.js"(exports2, module2) {
    "use strict";
    module2.exports.request = require_api_request();
    module2.exports.stream = require_api_stream();
    module2.exports.pipeline = require_api_pipeline();
    module2.exports.upgrade = require_api_upgrade();
    module2.exports.connect = require_api_connect();
  }
});

// node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS({
  "node_modules/undici/lib/mock/mock-errors.js"(exports2, module2) {
    "use strict";
    var { UndiciError } = require_errors();
    var MockNotMatchedError = class _MockNotMatchedError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _MockNotMatchedError);
        this.name = "MockNotMatchedError";
        this.message = message || "The request does not match any registered mock dispatches";
        this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
      }
    };
    module2.exports = {
      MockNotMatchedError
    };
  }
});

// node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS({
  "node_modules/undici/lib/mock/mock-symbols.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      kAgent: Symbol("agent"),
      kOptions: Symbol("options"),
      kFactory: Symbol("factory"),
      kDispatches: Symbol("dispatches"),
      kDispatchKey: Symbol("dispatch key"),
      kDefaultHeaders: Symbol("default headers"),
      kDefaultTrailers: Symbol("default trailers"),
      kContentLength: Symbol("content length"),
      kMockAgent: Symbol("mock agent"),
      kMockAgentSet: Symbol("mock agent set"),
      kMockAgentGet: Symbol("mock agent get"),
      kMockDispatch: Symbol("mock dispatch"),
      kClose: Symbol("close"),
      kOriginalClose: Symbol("original agent close"),
      kOrigin: Symbol("origin"),
      kIsMockActive: Symbol("is mock active"),
      kNetConnect: Symbol("net connect"),
      kGetNetConnect: Symbol("get net connect"),
      kConnected: Symbol("connected")
    };
  }
});

// node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS({
  "node_modules/undici/lib/mock/mock-utils.js"(exports2, module2) {
    "use strict";
    var { MockNotMatchedError } = require_mock_errors();
    var {
      kDispatches,
      kMockAgent,
      kOriginalDispatch,
      kOrigin,
      kGetNetConnect
    } = require_mock_symbols();
    var { buildURL, nop } = require_util();
    var { STATUS_CODES } = require("http");
    var {
      types: {
        isPromise
      }
    } = require("util");
    function matchValue(match11, value3) {
      if (typeof match11 === "string") {
        return match11 === value3;
      }
      if (match11 instanceof RegExp) {
        return match11.test(value3);
      }
      if (typeof match11 === "function") {
        return match11(value3) === true;
      }
      return false;
    }
    function lowerCaseEntries(headers) {
      return Object.fromEntries(
        Object.entries(headers).map(([headerName, headerValue]) => {
          return [headerName.toLocaleLowerCase(), headerValue];
        })
      );
    }
    function getHeaderByName(headers, key) {
      if (Array.isArray(headers)) {
        for (let i = 0; i < headers.length; i += 2) {
          if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
            return headers[i + 1];
          }
        }
        return void 0;
      } else if (typeof headers.get === "function") {
        return headers.get(key);
      } else {
        return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
      }
    }
    function buildHeadersFromArray(headers) {
      const clone2 = headers.slice();
      const entries2 = [];
      for (let index = 0; index < clone2.length; index += 2) {
        entries2.push([clone2[index], clone2[index + 1]]);
      }
      return Object.fromEntries(entries2);
    }
    function matchHeaders(mockDispatch2, headers) {
      if (typeof mockDispatch2.headers === "function") {
        if (Array.isArray(headers)) {
          headers = buildHeadersFromArray(headers);
        }
        return mockDispatch2.headers(headers ? lowerCaseEntries(headers) : {});
      }
      if (typeof mockDispatch2.headers === "undefined") {
        return true;
      }
      if (typeof headers !== "object" || typeof mockDispatch2.headers !== "object") {
        return false;
      }
      for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch2.headers)) {
        const headerValue = getHeaderByName(headers, matchHeaderName);
        if (!matchValue(matchHeaderValue, headerValue)) {
          return false;
        }
      }
      return true;
    }
    function safeUrl(path) {
      if (typeof path !== "string") {
        return path;
      }
      const pathSegments = path.split("?");
      if (pathSegments.length !== 2) {
        return path;
      }
      const qp = new URLSearchParams(pathSegments.pop());
      qp.sort();
      return [...pathSegments, qp.toString()].join("?");
    }
    function matchKey(mockDispatch2, { path, method, body, headers }) {
      const pathMatch = matchValue(mockDispatch2.path, path);
      const methodMatch = matchValue(mockDispatch2.method, method);
      const bodyMatch = typeof mockDispatch2.body !== "undefined" ? matchValue(mockDispatch2.body, body) : true;
      const headersMatch = matchHeaders(mockDispatch2, headers);
      return pathMatch && methodMatch && bodyMatch && headersMatch;
    }
    function getResponseData(data) {
      if (Buffer.isBuffer(data)) {
        return data;
      } else if (typeof data === "object") {
        return JSON.stringify(data);
      } else {
        return data.toString();
      }
    }
    function getMockDispatch(mockDispatches, key) {
      const basePath = key.query ? buildURL(key.path, key.query) : key.path;
      const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
      let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue(body, key.body) : true);
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) => matchHeaders(mockDispatch2, key.headers));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
      }
      return matchedMockDispatches[0];
    }
    function addMockDispatch(mockDispatches, key, data) {
      const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false };
      const replyData = typeof data === "function" ? { callback: data } : { ...data };
      const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } };
      mockDispatches.push(newMockDispatch);
      return newMockDispatch;
    }
    function deleteMockDispatch(mockDispatches, key) {
      const index = mockDispatches.findIndex((dispatch) => {
        if (!dispatch.consumed) {
          return false;
        }
        return matchKey(dispatch, key);
      });
      if (index !== -1) {
        mockDispatches.splice(index, 1);
      }
    }
    function buildKey(opts) {
      const { path, method, body, headers, query } = opts;
      return {
        path,
        method,
        body,
        headers,
        query
      };
    }
    function generateKeyValues(data) {
      return Object.entries(data).reduce((keyValuePairs, [key, value3]) => [
        ...keyValuePairs,
        Buffer.from(`${key}`),
        Array.isArray(value3) ? value3.map((x) => Buffer.from(`${x}`)) : Buffer.from(`${value3}`)
      ], []);
    }
    function getStatusText(statusCode) {
      return STATUS_CODES[statusCode] || "unknown";
    }
    async function getResponse(body) {
      const buffers = [];
      for await (const data of body) {
        buffers.push(data);
      }
      return Buffer.concat(buffers).toString("utf8");
    }
    function mockDispatch(opts, handler) {
      const key = buildKey(opts);
      const mockDispatch2 = getMockDispatch(this[kDispatches], key);
      mockDispatch2.timesInvoked++;
      if (mockDispatch2.data.callback) {
        mockDispatch2.data = { ...mockDispatch2.data, ...mockDispatch2.data.callback(opts) };
      }
      const { data: { statusCode, data, headers, trailers, error }, delay: delay3, persist } = mockDispatch2;
      const { timesInvoked, times: times2 } = mockDispatch2;
      mockDispatch2.consumed = !persist && timesInvoked >= times2;
      mockDispatch2.pending = timesInvoked < times2;
      if (error !== null) {
        deleteMockDispatch(this[kDispatches], key);
        handler.onError(error);
        return true;
      }
      if (typeof delay3 === "number" && delay3 > 0) {
        setTimeout(() => {
          handleReply(this[kDispatches]);
        }, delay3);
      } else {
        handleReply(this[kDispatches]);
      }
      function handleReply(mockDispatches, _data = data) {
        const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
        const body = typeof _data === "function" ? _data({ ...opts, headers: optsHeaders }) : _data;
        if (isPromise(body)) {
          body.then((newData) => handleReply(mockDispatches, newData));
          return;
        }
        const responseData = getResponseData(body);
        const responseHeaders = generateKeyValues(headers);
        const responseTrailers = generateKeyValues(trailers);
        handler.abort = nop;
        handler.onHeaders(statusCode, responseHeaders, resume2, getStatusText(statusCode));
        handler.onData(Buffer.from(responseData));
        handler.onComplete(responseTrailers);
        deleteMockDispatch(mockDispatches, key);
      }
      function resume2() {
      }
      return true;
    }
    function buildMockDispatch() {
      const agent = this[kMockAgent];
      const origin = this[kOrigin];
      const originalDispatch = this[kOriginalDispatch];
      return function dispatch(opts, handler) {
        if (agent.isMockActive) {
          try {
            mockDispatch.call(this, opts, handler);
          } catch (error) {
            if (error instanceof MockNotMatchedError) {
              const netConnect = agent[kGetNetConnect]();
              if (netConnect === false) {
                throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
              }
              if (checkNetConnect(netConnect, origin)) {
                originalDispatch.call(this, opts, handler);
              } else {
                throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
              }
            } else {
              throw error;
            }
          }
        } else {
          originalDispatch.call(this, opts, handler);
        }
      };
    }
    function checkNetConnect(netConnect, origin) {
      const url = new URL(origin);
      if (netConnect === true) {
        return true;
      } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
        return true;
      }
      return false;
    }
    function buildMockOptions(opts) {
      if (opts) {
        const { agent, ...mockOptions } = opts;
        return mockOptions;
      }
    }
    module2.exports = {
      getResponseData,
      getMockDispatch,
      addMockDispatch,
      deleteMockDispatch,
      buildKey,
      generateKeyValues,
      matchValue,
      getResponse,
      getStatusText,
      mockDispatch,
      buildMockDispatch,
      checkNetConnect,
      buildMockOptions,
      getHeaderByName
    };
  }
});

// node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS({
  "node_modules/undici/lib/mock/mock-interceptor.js"(exports2, module2) {
    "use strict";
    var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kDispatchKey,
      kDefaultHeaders,
      kDefaultTrailers,
      kContentLength,
      kMockDispatch
    } = require_mock_symbols();
    var { InvalidArgumentError } = require_errors();
    var { buildURL } = require_util();
    var MockScope = class {
      constructor(mockDispatch) {
        this[kMockDispatch] = mockDispatch;
      }
      /**
       * Delay a reply by a set amount in ms.
       */
      delay(waitInMs) {
        if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) {
          throw new InvalidArgumentError("waitInMs must be a valid integer > 0");
        }
        this[kMockDispatch].delay = waitInMs;
        return this;
      }
      /**
       * For a defined reply, never mark as consumed.
       */
      persist() {
        this[kMockDispatch].persist = true;
        return this;
      }
      /**
       * Allow one to define a reply for a set amount of matching requests.
       */
      times(repeatTimes) {
        if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
          throw new InvalidArgumentError("repeatTimes must be a valid integer > 0");
        }
        this[kMockDispatch].times = repeatTimes;
        return this;
      }
    };
    var MockInterceptor = class {
      constructor(opts, mockDispatches) {
        if (typeof opts !== "object") {
          throw new InvalidArgumentError("opts must be an object");
        }
        if (typeof opts.path === "undefined") {
          throw new InvalidArgumentError("opts.path must be defined");
        }
        if (typeof opts.method === "undefined") {
          opts.method = "GET";
        }
        if (typeof opts.path === "string") {
          if (opts.query) {
            opts.path = buildURL(opts.path, opts.query);
          } else {
            const parsedURL = new URL(opts.path, "data://");
            opts.path = parsedURL.pathname + parsedURL.search;
          }
        }
        if (typeof opts.method === "string") {
          opts.method = opts.method.toUpperCase();
        }
        this[kDispatchKey] = buildKey(opts);
        this[kDispatches] = mockDispatches;
        this[kDefaultHeaders] = {};
        this[kDefaultTrailers] = {};
        this[kContentLength] = false;
      }
      createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
        const responseData = getResponseData(data);
        const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
        const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers };
        const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };
        return { statusCode, data, headers, trailers };
      }
      validateReplyParameters(statusCode, data, responseOptions) {
        if (typeof statusCode === "undefined") {
          throw new InvalidArgumentError("statusCode must be defined");
        }
        if (typeof data === "undefined") {
          throw new InvalidArgumentError("data must be defined");
        }
        if (typeof responseOptions !== "object") {
          throw new InvalidArgumentError("responseOptions must be an object");
        }
      }
      /**
       * Mock an undici request with a defined reply.
       */
      reply(replyData) {
        if (typeof replyData === "function") {
          const wrappedDefaultsCallback = (opts) => {
            const resolvedData = replyData(opts);
            if (typeof resolvedData !== "object") {
              throw new InvalidArgumentError("reply options callback must return an object");
            }
            const { statusCode: statusCode2, data: data2 = "", responseOptions: responseOptions2 = {} } = resolvedData;
            this.validateReplyParameters(statusCode2, data2, responseOptions2);
            return {
              ...this.createMockScopeDispatchData(statusCode2, data2, responseOptions2)
            };
          };
          const newMockDispatch2 = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
          return new MockScope(newMockDispatch2);
        }
        const [statusCode, data = "", responseOptions = {}] = [...arguments];
        this.validateReplyParameters(statusCode, data, responseOptions);
        const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
        return new MockScope(newMockDispatch);
      }
      /**
       * Mock an undici request with a defined error.
       */
      replyWithError(error) {
        if (typeof error === "undefined") {
          throw new InvalidArgumentError("error must be defined");
        }
        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error });
        return new MockScope(newMockDispatch);
      }
      /**
       * Set default reply headers on the interceptor for subsequent replies
       */
      defaultReplyHeaders(headers) {
        if (typeof headers === "undefined") {
          throw new InvalidArgumentError("headers must be defined");
        }
        this[kDefaultHeaders] = headers;
        return this;
      }
      /**
       * Set default reply trailers on the interceptor for subsequent replies
       */
      defaultReplyTrailers(trailers) {
        if (typeof trailers === "undefined") {
          throw new InvalidArgumentError("trailers must be defined");
        }
        this[kDefaultTrailers] = trailers;
        return this;
      }
      /**
       * Set reply content length header for replies on the interceptor
       */
      replyContentLength() {
        this[kContentLength] = true;
        return this;
      }
    };
    module2.exports.MockInterceptor = MockInterceptor;
    module2.exports.MockScope = MockScope;
  }
});

// node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS({
  "node_modules/undici/lib/mock/mock-client.js"(exports2, module2) {
    "use strict";
    var { promisify } = require("util");
    var Client = require_client();
    var { buildMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = require_mock_symbols();
    var { MockInterceptor } = require_mock_interceptor();
    var Symbols = require_symbols();
    var { InvalidArgumentError } = require_errors();
    var MockClient = class extends Client {
      constructor(origin, opts) {
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        this[kMockAgent] = opts.agent;
        this[kOrigin] = origin;
        this[kDispatches] = [];
        this[kConnected] = 1;
        this[kOriginalDispatch] = this.dispatch;
        this[kOriginalClose] = this.close.bind(this);
        this.dispatch = buildMockDispatch.call(this);
        this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify(this[kOriginalClose])();
        this[kConnected] = 0;
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
    module2.exports = MockClient;
  }
});

// node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS({
  "node_modules/undici/lib/mock/mock-pool.js"(exports2, module2) {
    "use strict";
    var { promisify } = require("util");
    var Pool = require_pool();
    var { buildMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = require_mock_symbols();
    var { MockInterceptor } = require_mock_interceptor();
    var Symbols = require_symbols();
    var { InvalidArgumentError } = require_errors();
    var MockPool = class extends Pool {
      constructor(origin, opts) {
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        this[kMockAgent] = opts.agent;
        this[kOrigin] = origin;
        this[kDispatches] = [];
        this[kConnected] = 1;
        this[kOriginalDispatch] = this.dispatch;
        this[kOriginalClose] = this.close.bind(this);
        this.dispatch = buildMockDispatch.call(this);
        this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify(this[kOriginalClose])();
        this[kConnected] = 0;
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
    module2.exports = MockPool;
  }
});

// node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS({
  "node_modules/undici/lib/mock/pluralizer.js"(exports2, module2) {
    "use strict";
    var singulars = {
      pronoun: "it",
      is: "is",
      was: "was",
      this: "this"
    };
    var plurals = {
      pronoun: "they",
      is: "are",
      was: "were",
      this: "these"
    };
    module2.exports = class Pluralizer {
      constructor(singular, plural) {
        this.singular = singular;
        this.plural = plural;
      }
      pluralize(count) {
        const one = count === 1;
        const keys5 = one ? singulars : plurals;
        const noun = one ? this.singular : this.plural;
        return { ...keys5, count, noun };
      }
    };
  }
});

// node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS({
  "node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports2, module2) {
    "use strict";
    var { Transform } = require("stream");
    var { Console } = require("console");
    module2.exports = class PendingInterceptorsFormatter {
      constructor({ disableColors } = {}) {
        this.transform = new Transform({
          transform(chunk4, _enc, cb) {
            cb(null, chunk4);
          }
        });
        this.logger = new Console({
          stdout: this.transform,
          inspectOptions: {
            colors: !disableColors && !process.env.CI
          }
        });
      }
      format(pendingInterceptors) {
        const withPrettyHeaders = pendingInterceptors.map(
          ({ method, path, data: { statusCode }, persist, times: times2, timesInvoked, origin }) => ({
            Method: method,
            Origin: origin,
            Path: path,
            "Status code": statusCode,
            Persistent: persist ? "\u2705" : "\u274C",
            Invocations: timesInvoked,
            Remaining: persist ? Infinity : times2 - timesInvoked
          })
        );
        this.logger.table(withPrettyHeaders);
        return this.transform.read().toString();
      }
    };
  }
});

// node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS({
  "node_modules/undici/lib/mock/mock-agent.js"(exports2, module2) {
    "use strict";
    var { kClients } = require_symbols();
    var Agent = require_agent();
    var {
      kAgent,
      kMockAgentSet,
      kMockAgentGet,
      kDispatches,
      kIsMockActive,
      kNetConnect,
      kGetNetConnect,
      kOptions,
      kFactory
    } = require_mock_symbols();
    var MockClient = require_mock_client();
    var MockPool = require_mock_pool();
    var { matchValue, buildMockOptions } = require_mock_utils();
    var { InvalidArgumentError, UndiciError } = require_errors();
    var Dispatcher = require_dispatcher();
    var Pluralizer = require_pluralizer();
    var PendingInterceptorsFormatter = require_pending_interceptors_formatter();
    var FakeWeakRef = class {
      constructor(value3) {
        this.value = value3;
      }
      deref() {
        return this.value;
      }
    };
    var MockAgent = class extends Dispatcher {
      constructor(opts) {
        super(opts);
        this[kNetConnect] = true;
        this[kIsMockActive] = true;
        if (opts && opts.agent && typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        const agent = opts && opts.agent ? opts.agent : new Agent(opts);
        this[kAgent] = agent;
        this[kClients] = agent[kClients];
        this[kOptions] = buildMockOptions(opts);
      }
      get(origin) {
        let dispatcher = this[kMockAgentGet](origin);
        if (!dispatcher) {
          dispatcher = this[kFactory](origin);
          this[kMockAgentSet](origin, dispatcher);
        }
        return dispatcher;
      }
      dispatch(opts, handler) {
        this.get(opts.origin);
        return this[kAgent].dispatch(opts, handler);
      }
      async close() {
        await this[kAgent].close();
        this[kClients].clear();
      }
      deactivate() {
        this[kIsMockActive] = false;
      }
      activate() {
        this[kIsMockActive] = true;
      }
      enableNetConnect(matcher) {
        if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
          if (Array.isArray(this[kNetConnect])) {
            this[kNetConnect].push(matcher);
          } else {
            this[kNetConnect] = [matcher];
          }
        } else if (typeof matcher === "undefined") {
          this[kNetConnect] = true;
        } else {
          throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
        }
      }
      disableNetConnect() {
        this[kNetConnect] = false;
      }
      // This is required to bypass issues caused by using global symbols - see:
      // https://github.com/nodejs/undici/issues/1447
      get isMockActive() {
        return this[kIsMockActive];
      }
      [kMockAgentSet](origin, dispatcher) {
        this[kClients].set(origin, new FakeWeakRef(dispatcher));
      }
      [kFactory](origin) {
        const mockOptions = Object.assign({ agent: this }, this[kOptions]);
        return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
      }
      [kMockAgentGet](origin) {
        const ref = this[kClients].get(origin);
        if (ref) {
          return ref.deref();
        }
        if (typeof origin !== "string") {
          const dispatcher = this[kFactory]("http://localhost:9999");
          this[kMockAgentSet](origin, dispatcher);
          return dispatcher;
        }
        for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
          const nonExplicitDispatcher = nonExplicitRef.deref();
          if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
            const dispatcher = this[kFactory](origin);
            this[kMockAgentSet](origin, dispatcher);
            dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
            return dispatcher;
          }
        }
      }
      [kGetNetConnect]() {
        return this[kNetConnect];
      }
      pendingInterceptors() {
        const mockAgentClients = this[kClients];
        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope5]) => scope5.deref()[kDispatches].map((dispatch) => ({ ...dispatch, origin }))).filter(({ pending: pending3 }) => pending3);
      }
      assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
        const pending3 = this.pendingInterceptors();
        if (pending3.length === 0) {
          return;
        }
        const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending3.length);
        throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending3)}
`.trim());
      }
    };
    module2.exports = MockAgent;
  }
});

// node_modules/undici/lib/proxy-agent.js
var require_proxy_agent = __commonJS({
  "node_modules/undici/lib/proxy-agent.js"(exports2, module2) {
    "use strict";
    var { kProxy, kClose, kDestroy, kInterceptors } = require_symbols();
    var { URL: URL3 } = require("url");
    var Agent = require_agent();
    var Pool = require_pool();
    var DispatcherBase = require_dispatcher_base();
    var { InvalidArgumentError, RequestAbortedError } = require_errors();
    var buildConnector = require_connect();
    var kAgent = Symbol("proxy agent");
    var kClient = Symbol("proxy client");
    var kProxyHeaders = Symbol("proxy headers");
    var kRequestTls = Symbol("request tls settings");
    var kProxyTls = Symbol("proxy tls settings");
    var kConnectEndpoint = Symbol("connect endpoint function");
    function defaultProtocolPort(protocol) {
      return protocol === "https:" ? 443 : 80;
    }
    function buildProxyOptions(opts) {
      if (typeof opts === "string") {
        opts = { uri: opts };
      }
      if (!opts || !opts.uri) {
        throw new InvalidArgumentError("Proxy opts.uri is mandatory");
      }
      return {
        uri: opts.uri,
        protocol: opts.protocol || "https"
      };
    }
    function defaultFactory(origin, opts) {
      return new Pool(origin, opts);
    }
    var ProxyAgent = class extends DispatcherBase {
      constructor(opts) {
        super(opts);
        this[kProxy] = buildProxyOptions(opts);
        this[kAgent] = new Agent(opts);
        this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
        if (typeof opts === "string") {
          opts = { uri: opts };
        }
        if (!opts || !opts.uri) {
          throw new InvalidArgumentError("Proxy opts.uri is mandatory");
        }
        const { clientFactory = defaultFactory } = opts;
        if (typeof clientFactory !== "function") {
          throw new InvalidArgumentError("Proxy opts.clientFactory must be a function.");
        }
        this[kRequestTls] = opts.requestTls;
        this[kProxyTls] = opts.proxyTls;
        this[kProxyHeaders] = opts.headers || {};
        const resolvedUrl = new URL3(opts.uri);
        const { origin, port, host, username, password } = resolvedUrl;
        if (opts.auth && opts.token) {
          throw new InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
        } else if (opts.auth) {
          this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
        } else if (opts.token) {
          this[kProxyHeaders]["proxy-authorization"] = opts.token;
        } else if (username && password) {
          this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
        }
        const connect = buildConnector({ ...opts.proxyTls });
        this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
        this[kClient] = clientFactory(resolvedUrl, { connect });
        this[kAgent] = new Agent({
          ...opts,
          connect: async (opts2, callback) => {
            let requestedHost = opts2.host;
            if (!opts2.port) {
              requestedHost += `:${defaultProtocolPort(opts2.protocol)}`;
            }
            try {
              const { socket, statusCode } = await this[kClient].connect({
                origin,
                port,
                path: requestedHost,
                signal: opts2.signal,
                headers: {
                  ...this[kProxyHeaders],
                  host
                }
              });
              if (statusCode !== 200) {
                socket.on("error", () => {
                }).destroy();
                callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
              }
              if (opts2.protocol !== "https:") {
                callback(null, socket);
                return;
              }
              let servername;
              if (this[kRequestTls]) {
                servername = this[kRequestTls].servername;
              } else {
                servername = opts2.servername;
              }
              this[kConnectEndpoint]({ ...opts2, servername, httpSocket: socket }, callback);
            } catch (err) {
              callback(err);
            }
          }
        });
      }
      dispatch(opts, handler) {
        const { host } = new URL3(opts.origin);
        const headers = buildHeaders(opts.headers);
        throwIfProxyAuthIsSent(headers);
        return this[kAgent].dispatch(
          {
            ...opts,
            headers: {
              ...headers,
              host
            }
          },
          handler
        );
      }
      async [kClose]() {
        await this[kAgent].close();
        await this[kClient].close();
      }
      async [kDestroy]() {
        await this[kAgent].destroy();
        await this[kClient].destroy();
      }
    };
    function buildHeaders(headers) {
      if (Array.isArray(headers)) {
        const headersPair = {};
        for (let i = 0; i < headers.length; i += 2) {
          headersPair[headers[i]] = headers[i + 1];
        }
        return headersPair;
      }
      return headers;
    }
    function throwIfProxyAuthIsSent(headers) {
      const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
      if (existProxyAuth) {
        throw new InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
      }
    }
    module2.exports = ProxyAgent;
  }
});

// node_modules/undici/lib/handler/RetryHandler.js
var require_RetryHandler = __commonJS({
  "node_modules/undici/lib/handler/RetryHandler.js"(exports2, module2) {
    var assert = require("assert");
    var { kRetryHandlerDefaultRetry } = require_symbols();
    var { RequestRetryError } = require_errors();
    var { isDisturbed, parseHeaders, parseRangeHeader } = require_util();
    function calculateRetryAfterHeader(retryAfter) {
      const current = Date.now();
      const diff8 = new Date(retryAfter).getTime() - current;
      return diff8;
    }
    var RetryHandler = class _RetryHandler {
      constructor(opts, handlers) {
        const { retryOptions, ...dispatchOpts } = opts;
        const {
          // Retry scoped
          retry: retryFn,
          maxRetries,
          maxTimeout,
          minTimeout,
          timeoutFactor,
          // Response scoped
          methods,
          errorCodes,
          retryAfter,
          statusCodes
        } = retryOptions ?? {};
        this.dispatch = handlers.dispatch;
        this.handler = handlers.handler;
        this.opts = dispatchOpts;
        this.abort = null;
        this.aborted = false;
        this.retryOpts = {
          retry: retryFn ?? _RetryHandler[kRetryHandlerDefaultRetry],
          retryAfter: retryAfter ?? true,
          maxTimeout: maxTimeout ?? 30 * 1e3,
          // 30s,
          timeout: minTimeout ?? 500,
          // .5s
          timeoutFactor: timeoutFactor ?? 2,
          maxRetries: maxRetries ?? 5,
          // What errors we should retry
          methods: methods ?? ["GET", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE"],
          // Indicates which errors to retry
          statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
          // List of errors to retry
          errorCodes: errorCodes ?? [
            "ECONNRESET",
            "ECONNREFUSED",
            "ENOTFOUND",
            "ENETDOWN",
            "ENETUNREACH",
            "EHOSTDOWN",
            "EHOSTUNREACH",
            "EPIPE"
          ]
        };
        this.retryCount = 0;
        this.start = 0;
        this.end = null;
        this.etag = null;
        this.resume = null;
        this.handler.onConnect((reason) => {
          this.aborted = true;
          if (this.abort) {
            this.abort(reason);
          } else {
            this.reason = reason;
          }
        });
      }
      onRequestSent() {
        if (this.handler.onRequestSent) {
          this.handler.onRequestSent();
        }
      }
      onUpgrade(statusCode, headers, socket) {
        if (this.handler.onUpgrade) {
          this.handler.onUpgrade(statusCode, headers, socket);
        }
      }
      onConnect(abort) {
        if (this.aborted) {
          abort(this.reason);
        } else {
          this.abort = abort;
        }
      }
      onBodySent(chunk4) {
        if (this.handler.onBodySent) return this.handler.onBodySent(chunk4);
      }
      static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {
        const { statusCode, code, headers } = err;
        const { method, retryOptions } = opts;
        const {
          maxRetries,
          timeout: timeout3,
          maxTimeout,
          timeoutFactor,
          statusCodes,
          errorCodes,
          methods
        } = retryOptions;
        let { counter: counter6, currentTimeout } = state;
        currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout3;
        if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
          cb(err);
          return;
        }
        if (Array.isArray(methods) && !methods.includes(method)) {
          cb(err);
          return;
        }
        if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
          cb(err);
          return;
        }
        if (counter6 > maxRetries) {
          cb(err);
          return;
        }
        let retryAfterHeader = headers != null && headers["retry-after"];
        if (retryAfterHeader) {
          retryAfterHeader = Number(retryAfterHeader);
          retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3;
        }
        const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter6, maxTimeout);
        state.currentTimeout = retryTimeout;
        setTimeout(() => cb(null), retryTimeout);
      }
      onHeaders(statusCode, rawHeaders, resume2, statusMessage) {
        const headers = parseHeaders(rawHeaders);
        this.retryCount += 1;
        if (statusCode >= 300) {
          this.abort(
            new RequestRetryError("Request failed", statusCode, {
              headers,
              count: this.retryCount
            })
          );
          return false;
        }
        if (this.resume != null) {
          this.resume = null;
          if (statusCode !== 206) {
            return true;
          }
          const contentRange = parseRangeHeader(headers["content-range"]);
          if (!contentRange) {
            this.abort(
              new RequestRetryError("Content-Range mismatch", statusCode, {
                headers,
                count: this.retryCount
              })
            );
            return false;
          }
          if (this.etag != null && this.etag !== headers.etag) {
            this.abort(
              new RequestRetryError("ETag mismatch", statusCode, {
                headers,
                count: this.retryCount
              })
            );
            return false;
          }
          const { start: start3, size: size11, end: end3 = size11 } = contentRange;
          assert(this.start === start3, "content-range mismatch");
          assert(this.end == null || this.end === end3, "content-range mismatch");
          this.resume = resume2;
          return true;
        }
        if (this.end == null) {
          if (statusCode === 206) {
            const range = parseRangeHeader(headers["content-range"]);
            if (range == null) {
              return this.handler.onHeaders(
                statusCode,
                rawHeaders,
                resume2,
                statusMessage
              );
            }
            const { start: start3, size: size11, end: end3 = size11 } = range;
            assert(
              start3 != null && Number.isFinite(start3) && this.start !== start3,
              "content-range mismatch"
            );
            assert(Number.isFinite(start3));
            assert(
              end3 != null && Number.isFinite(end3) && this.end !== end3,
              "invalid content-length"
            );
            this.start = start3;
            this.end = end3;
          }
          if (this.end == null) {
            const contentLength = headers["content-length"];
            this.end = contentLength != null ? Number(contentLength) : null;
          }
          assert(Number.isFinite(this.start));
          assert(
            this.end == null || Number.isFinite(this.end),
            "invalid content-length"
          );
          this.resume = resume2;
          this.etag = headers.etag != null ? headers.etag : null;
          return this.handler.onHeaders(
            statusCode,
            rawHeaders,
            resume2,
            statusMessage
          );
        }
        const err = new RequestRetryError("Request failed", statusCode, {
          headers,
          count: this.retryCount
        });
        this.abort(err);
        return false;
      }
      onData(chunk4) {
        this.start += chunk4.length;
        return this.handler.onData(chunk4);
      }
      onComplete(rawTrailers) {
        this.retryCount = 0;
        return this.handler.onComplete(rawTrailers);
      }
      onError(err) {
        if (this.aborted || isDisturbed(this.opts.body)) {
          return this.handler.onError(err);
        }
        this.retryOpts.retry(
          err,
          {
            state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
            opts: { retryOptions: this.retryOpts, ...this.opts }
          },
          onRetry.bind(this)
        );
        function onRetry(err2) {
          if (err2 != null || this.aborted || isDisturbed(this.opts.body)) {
            return this.handler.onError(err2);
          }
          if (this.start !== 0) {
            this.opts = {
              ...this.opts,
              headers: {
                ...this.opts.headers,
                range: `bytes=${this.start}-${this.end ?? ""}`
              }
            };
          }
          try {
            this.dispatch(this.opts, this);
          } catch (err3) {
            this.handler.onError(err3);
          }
        }
      }
    };
    module2.exports = RetryHandler;
  }
});

// node_modules/undici/lib/global.js
var require_global2 = __commonJS({
  "node_modules/undici/lib/global.js"(exports2, module2) {
    "use strict";
    var globalDispatcher = Symbol.for("undici.globalDispatcher.1");
    var { InvalidArgumentError } = require_errors();
    var Agent = require_agent();
    if (getGlobalDispatcher() === void 0) {
      setGlobalDispatcher(new Agent());
    }
    function setGlobalDispatcher(agent) {
      if (!agent || typeof agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument agent must implement Agent");
      }
      Object.defineProperty(globalThis, globalDispatcher, {
        value: agent,
        writable: true,
        enumerable: false,
        configurable: false
      });
    }
    function getGlobalDispatcher() {
      return globalThis[globalDispatcher];
    }
    module2.exports = {
      setGlobalDispatcher,
      getGlobalDispatcher
    };
  }
});

// node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS({
  "node_modules/undici/lib/handler/DecoratorHandler.js"(exports2, module2) {
    "use strict";
    module2.exports = class DecoratorHandler {
      constructor(handler) {
        this.handler = handler;
      }
      onConnect(...args) {
        return this.handler.onConnect(...args);
      }
      onError(...args) {
        return this.handler.onError(...args);
      }
      onUpgrade(...args) {
        return this.handler.onUpgrade(...args);
      }
      onHeaders(...args) {
        return this.handler.onHeaders(...args);
      }
      onData(...args) {
        return this.handler.onData(...args);
      }
      onComplete(...args) {
        return this.handler.onComplete(...args);
      }
      onBodySent(...args) {
        return this.handler.onBodySent(...args);
      }
    };
  }
});

// node_modules/undici/lib/fetch/headers.js
var require_headers = __commonJS({
  "node_modules/undici/lib/fetch/headers.js"(exports2, module2) {
    "use strict";
    var { kHeadersList, kConstruct } = require_symbols();
    var { kGuard } = require_symbols2();
    var { kEnumerableProperty } = require_util();
    var {
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue
    } = require_util2();
    var { webidl } = require_webidl();
    var assert = require("assert");
    var kHeadersMap = Symbol("headers map");
    var kHeadersSortedMap = Symbol("headers map sorted");
    function isHTTPWhiteSpaceCharCode(code) {
      return code === 10 || code === 13 || code === 9 || code === 32;
    }
    function headerValueNormalize(potentialValue) {
      let i = 0;
      let j = potentialValue.length;
      while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;
      while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i;
      return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
    }
    function fill(headers, object) {
      if (Array.isArray(object)) {
        for (let i = 0; i < object.length; ++i) {
          const header = object[i];
          if (header.length !== 2) {
            throw webidl.errors.exception({
              header: "Headers constructor",
              message: `expected name/value pair to be length 2, found ${header.length}.`
            });
          }
          appendHeader(headers, header[0], header[1]);
        }
      } else if (typeof object === "object" && object !== null) {
        const keys5 = Object.keys(object);
        for (let i = 0; i < keys5.length; ++i) {
          appendHeader(headers, keys5[i], object[keys5[i]]);
        }
      } else {
        throw webidl.errors.conversionFailed({
          prefix: "Headers constructor",
          argument: "Argument 1",
          types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
        });
      }
    }
    function appendHeader(headers, name, value3) {
      value3 = headerValueNormalize(value3);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value: name,
          type: "header name"
        });
      } else if (!isValidHeaderValue(value3)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value: value3,
          type: "header value"
        });
      }
      if (headers[kGuard] === "immutable") {
        throw new TypeError("immutable");
      } else if (headers[kGuard] === "request-no-cors") {
      }
      return headers[kHeadersList].append(name, value3);
    }
    var HeadersList = class _HeadersList {
      /** @type {[string, string][]|null} */
      cookies = null;
      constructor(init) {
        if (init instanceof _HeadersList) {
          this[kHeadersMap] = new Map(init[kHeadersMap]);
          this[kHeadersSortedMap] = init[kHeadersSortedMap];
          this.cookies = init.cookies === null ? null : [...init.cookies];
        } else {
          this[kHeadersMap] = new Map(init);
          this[kHeadersSortedMap] = null;
        }
      }
      // https://fetch.spec.whatwg.org/#header-list-contains
      contains(name) {
        name = name.toLowerCase();
        return this[kHeadersMap].has(name);
      }
      clear() {
        this[kHeadersMap].clear();
        this[kHeadersSortedMap] = null;
        this.cookies = null;
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-append
      append(name, value3) {
        this[kHeadersSortedMap] = null;
        const lowercaseName = name.toLowerCase();
        const exists3 = this[kHeadersMap].get(lowercaseName);
        if (exists3) {
          const delimiter = lowercaseName === "cookie" ? "; " : ", ";
          this[kHeadersMap].set(lowercaseName, {
            name: exists3.name,
            value: `${exists3.value}${delimiter}${value3}`
          });
        } else {
          this[kHeadersMap].set(lowercaseName, { name, value: value3 });
        }
        if (lowercaseName === "set-cookie") {
          this.cookies ??= [];
          this.cookies.push(value3);
        }
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-set
      set(name, value3) {
        this[kHeadersSortedMap] = null;
        const lowercaseName = name.toLowerCase();
        if (lowercaseName === "set-cookie") {
          this.cookies = [value3];
        }
        this[kHeadersMap].set(lowercaseName, { name, value: value3 });
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-delete
      delete(name) {
        this[kHeadersSortedMap] = null;
        name = name.toLowerCase();
        if (name === "set-cookie") {
          this.cookies = null;
        }
        this[kHeadersMap].delete(name);
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-get
      get(name) {
        const value3 = this[kHeadersMap].get(name.toLowerCase());
        return value3 === void 0 ? null : value3.value;
      }
      *[Symbol.iterator]() {
        for (const [name, { value: value3 }] of this[kHeadersMap]) {
          yield [name, value3];
        }
      }
      get entries() {
        const headers = {};
        if (this[kHeadersMap].size) {
          for (const { name, value: value3 } of this[kHeadersMap].values()) {
            headers[name] = value3;
          }
        }
        return headers;
      }
    };
    var Headers2 = class _Headers {
      constructor(init = void 0) {
        if (init === kConstruct) {
          return;
        }
        this[kHeadersList] = new HeadersList();
        this[kGuard] = "none";
        if (init !== void 0) {
          init = webidl.converters.HeadersInit(init);
          fill(this, init);
        }
      }
      // https://fetch.spec.whatwg.org/#dom-headers-append
      append(name, value3) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
        name = webidl.converters.ByteString(name);
        value3 = webidl.converters.ByteString(value3);
        return appendHeader(this, name, value3);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-delete
      delete(name) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.delete",
            value: name,
            type: "header name"
          });
        }
        if (this[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (this[kGuard] === "request-no-cors") {
        }
        if (!this[kHeadersList].contains(name)) {
          return;
        }
        this[kHeadersList].delete(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-get
      get(name) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.get",
            value: name,
            type: "header name"
          });
        }
        return this[kHeadersList].get(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-has
      has(name) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.has",
            value: name,
            type: "header name"
          });
        }
        return this[kHeadersList].contains(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-set
      set(name, value3) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
        name = webidl.converters.ByteString(name);
        value3 = webidl.converters.ByteString(value3);
        value3 = headerValueNormalize(value3);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value: name,
            type: "header name"
          });
        } else if (!isValidHeaderValue(value3)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value: value3,
            type: "header value"
          });
        }
        if (this[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (this[kGuard] === "request-no-cors") {
        }
        this[kHeadersList].set(name, value3);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
      getSetCookie() {
        webidl.brandCheck(this, _Headers);
        const list = this[kHeadersList].cookies;
        if (list) {
          return [...list];
        }
        return [];
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
      get [kHeadersSortedMap]() {
        if (this[kHeadersList][kHeadersSortedMap]) {
          return this[kHeadersList][kHeadersSortedMap];
        }
        const headers = [];
        const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1);
        const cookies = this[kHeadersList].cookies;
        for (let i = 0; i < names.length; ++i) {
          const [name, value3] = names[i];
          if (name === "set-cookie") {
            for (let j = 0; j < cookies.length; ++j) {
              headers.push([name, cookies[j]]);
            }
          } else {
            assert(value3 !== null);
            headers.push([name, value3]);
          }
        }
        this[kHeadersList][kHeadersSortedMap] = headers;
        return headers;
      }
      keys() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value3 = this[kHeadersSortedMap];
          return makeIterator(
            () => value3,
            "Headers",
            "key"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "key"
        );
      }
      values() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value3 = this[kHeadersSortedMap];
          return makeIterator(
            () => value3,
            "Headers",
            "value"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "value"
        );
      }
      entries() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value3 = this[kHeadersSortedMap];
          return makeIterator(
            () => value3,
            "Headers",
            "key+value"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "key+value"
        );
      }
      /**
       * @param {(value: string, key: string, self: Headers) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
        if (typeof callbackFn !== "function") {
          throw new TypeError(
            "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
          );
        }
        for (const [key, value3] of this) {
          callbackFn.apply(thisArg, [value3, key, this]);
        }
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        webidl.brandCheck(this, _Headers);
        return this[kHeadersList];
      }
    };
    Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
    Object.defineProperties(Headers2.prototype, {
      append: kEnumerableProperty,
      delete: kEnumerableProperty,
      get: kEnumerableProperty,
      has: kEnumerableProperty,
      set: kEnumerableProperty,
      getSetCookie: kEnumerableProperty,
      keys: kEnumerableProperty,
      values: kEnumerableProperty,
      entries: kEnumerableProperty,
      forEach: kEnumerableProperty,
      [Symbol.iterator]: { enumerable: false },
      [Symbol.toStringTag]: {
        value: "Headers",
        configurable: true
      }
    });
    webidl.converters.HeadersInit = function(V) {
      if (webidl.util.Type(V) === "Object") {
        if (V[Symbol.iterator]) {
          return webidl.converters["sequence<sequence<ByteString>>"](V);
        }
        return webidl.converters["record<ByteString, ByteString>"](V);
      }
      throw webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
      });
    };
    module2.exports = {
      fill,
      Headers: Headers2,
      HeadersList
    };
  }
});

// node_modules/undici/lib/fetch/response.js
var require_response = __commonJS({
  "node_modules/undici/lib/fetch/response.js"(exports2, module2) {
    "use strict";
    var { Headers: Headers2, HeadersList, fill } = require_headers();
    var { extractBody, cloneBody, mixinBody } = require_body();
    var util = require_util();
    var { kEnumerableProperty } = util;
    var {
      isValidReasonPhrase,
      isCancelled,
      isAborted,
      isBlobLike,
      serializeJavascriptValueToJSONString,
      isErrorLike,
      isomorphicEncode
    } = require_util2();
    var {
      redirectStatusSet,
      nullBodyStatus,
      DOMException: DOMException2
    } = require_constants2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var { webidl } = require_webidl();
    var { FormData } = require_formdata();
    var { getGlobalOrigin } = require_global();
    var { URLSerializer } = require_dataURL();
    var { kHeadersList, kConstruct } = require_symbols();
    var assert = require("assert");
    var { types } = require("util");
    var ReadableStream = globalThis.ReadableStream || require("stream/web").ReadableStream;
    var textEncoder = new TextEncoder("utf-8");
    var Response = class _Response {
      // Creates network error Response.
      static error() {
        const relevantRealm = { settingsObject: {} };
        const responseObject = new _Response();
        responseObject[kState] = makeNetworkError();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        return responseObject;
      }
      // https://fetch.spec.whatwg.org/#dom-response-json
      static json(data, init = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "Response.json" });
        if (init !== null) {
          init = webidl.converters.ResponseInit(init);
        }
        const bytes = textEncoder.encode(
          serializeJavascriptValueToJSONString(data)
        );
        const body = extractBody(bytes);
        const relevantRealm = { settingsObject: {} };
        const responseObject = new _Response();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kGuard] = "response";
        responseObject[kHeaders][kRealm] = relevantRealm;
        initializeResponse(responseObject, init, { body: body[0], type: "application/json" });
        return responseObject;
      }
      // Creates a redirect Response that redirects to url with status status.
      static redirect(url, status = 302) {
        const relevantRealm = { settingsObject: {} };
        webidl.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
        url = webidl.converters.USVString(url);
        status = webidl.converters["unsigned short"](status);
        let parsedURL;
        try {
          parsedURL = new URL(url, getGlobalOrigin());
        } catch (err) {
          throw Object.assign(new TypeError("Failed to parse URL from " + url), {
            cause: err
          });
        }
        if (!redirectStatusSet.has(status)) {
          throw new RangeError("Invalid status code " + status);
        }
        const responseObject = new _Response();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        responseObject[kState].status = status;
        const value3 = isomorphicEncode(URLSerializer(parsedURL));
        responseObject[kState].headersList.append("location", value3);
        return responseObject;
      }
      // https://fetch.spec.whatwg.org/#dom-response
      constructor(body = null, init = {}) {
        if (body !== null) {
          body = webidl.converters.BodyInit(body);
        }
        init = webidl.converters.ResponseInit(init);
        this[kRealm] = { settingsObject: {} };
        this[kState] = makeResponse({});
        this[kHeaders] = new Headers2(kConstruct);
        this[kHeaders][kGuard] = "response";
        this[kHeaders][kHeadersList] = this[kState].headersList;
        this[kHeaders][kRealm] = this[kRealm];
        let bodyWithType = null;
        if (body != null) {
          const [extractedBody, type] = extractBody(body);
          bodyWithType = { body: extractedBody, type };
        }
        initializeResponse(this, init, bodyWithType);
      }
      // Returns response’s type, e.g., "cors".
      get type() {
        webidl.brandCheck(this, _Response);
        return this[kState].type;
      }
      // Returns response’s URL, if it has one; otherwise the empty string.
      get url() {
        webidl.brandCheck(this, _Response);
        const urlList = this[kState].urlList;
        const url = urlList[urlList.length - 1] ?? null;
        if (url === null) {
          return "";
        }
        return URLSerializer(url, true);
      }
      // Returns whether response was obtained through a redirect.
      get redirected() {
        webidl.brandCheck(this, _Response);
        return this[kState].urlList.length > 1;
      }
      // Returns response’s status.
      get status() {
        webidl.brandCheck(this, _Response);
        return this[kState].status;
      }
      // Returns whether response’s status is an ok status.
      get ok() {
        webidl.brandCheck(this, _Response);
        return this[kState].status >= 200 && this[kState].status <= 299;
      }
      // Returns response’s status message.
      get statusText() {
        webidl.brandCheck(this, _Response);
        return this[kState].statusText;
      }
      // Returns response’s headers as Headers.
      get headers() {
        webidl.brandCheck(this, _Response);
        return this[kHeaders];
      }
      get body() {
        webidl.brandCheck(this, _Response);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, _Response);
        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
      }
      // Returns a clone of response.
      clone() {
        webidl.brandCheck(this, _Response);
        if (this.bodyUsed || this.body && this.body.locked) {
          throw webidl.errors.exception({
            header: "Response.clone",
            message: "Body has already been consumed."
          });
        }
        const clonedResponse = cloneResponse(this[kState]);
        const clonedResponseObject = new _Response();
        clonedResponseObject[kState] = clonedResponse;
        clonedResponseObject[kRealm] = this[kRealm];
        clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList;
        clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        return clonedResponseObject;
      }
    };
    mixinBody(Response);
    Object.defineProperties(Response.prototype, {
      type: kEnumerableProperty,
      url: kEnumerableProperty,
      status: kEnumerableProperty,
      ok: kEnumerableProperty,
      redirected: kEnumerableProperty,
      statusText: kEnumerableProperty,
      headers: kEnumerableProperty,
      clone: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "Response",
        configurable: true
      }
    });
    Object.defineProperties(Response, {
      json: kEnumerableProperty,
      redirect: kEnumerableProperty,
      error: kEnumerableProperty
    });
    function cloneResponse(response) {
      if (response.internalResponse) {
        return filterResponse(
          cloneResponse(response.internalResponse),
          response.type
        );
      }
      const newResponse = makeResponse({ ...response, body: null });
      if (response.body != null) {
        newResponse.body = cloneBody(response.body);
      }
      return newResponse;
    }
    function makeResponse(init) {
      return {
        aborted: false,
        rangeRequested: false,
        timingAllowPassed: false,
        requestIncludesCredentials: false,
        type: "default",
        status: 200,
        timingInfo: null,
        cacheState: "",
        statusText: "",
        ...init,
        headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList(),
        urlList: init.urlList ? [...init.urlList] : []
      };
    }
    function makeNetworkError(reason) {
      const isError = isErrorLike(reason);
      return makeResponse({
        type: "error",
        status: 0,
        error: isError ? reason : new Error(reason ? String(reason) : reason),
        aborted: reason && reason.name === "AbortError"
      });
    }
    function makeFilteredResponse(response, state) {
      state = {
        internalResponse: response,
        ...state
      };
      return new Proxy(response, {
        get(target, p) {
          return p in state ? state[p] : target[p];
        },
        set(target, p, value3) {
          assert(!(p in state));
          target[p] = value3;
          return true;
        }
      });
    }
    function filterResponse(response, type) {
      if (type === "basic") {
        return makeFilteredResponse(response, {
          type: "basic",
          headersList: response.headersList
        });
      } else if (type === "cors") {
        return makeFilteredResponse(response, {
          type: "cors",
          headersList: response.headersList
        });
      } else if (type === "opaque") {
        return makeFilteredResponse(response, {
          type: "opaque",
          urlList: Object.freeze([]),
          status: 0,
          statusText: "",
          body: null
        });
      } else if (type === "opaqueredirect") {
        return makeFilteredResponse(response, {
          type: "opaqueredirect",
          status: 0,
          statusText: "",
          headersList: [],
          body: null
        });
      } else {
        assert(false);
      }
    }
    function makeAppropriateNetworkError(fetchParams, err = null) {
      assert(isCancelled(fetchParams));
      return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException2("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError(Object.assign(new DOMException2("Request was cancelled."), { cause: err }));
    }
    function initializeResponse(response, init, body) {
      if (init.status !== null && (init.status < 200 || init.status > 599)) {
        throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
      }
      if ("statusText" in init && init.statusText != null) {
        if (!isValidReasonPhrase(String(init.statusText))) {
          throw new TypeError("Invalid statusText");
        }
      }
      if ("status" in init && init.status != null) {
        response[kState].status = init.status;
      }
      if ("statusText" in init && init.statusText != null) {
        response[kState].statusText = init.statusText;
      }
      if ("headers" in init && init.headers != null) {
        fill(response[kHeaders], init.headers);
      }
      if (body) {
        if (nullBodyStatus.includes(response.status)) {
          throw webidl.errors.exception({
            header: "Response constructor",
            message: "Invalid response status code " + response.status
          });
        }
        response[kState].body = body.body;
        if (body.type != null && !response[kState].headersList.contains("Content-Type")) {
          response[kState].headersList.append("content-type", body.type);
        }
      }
    }
    webidl.converters.ReadableStream = webidl.interfaceConverter(
      ReadableStream
    );
    webidl.converters.FormData = webidl.interfaceConverter(
      FormData
    );
    webidl.converters.URLSearchParams = webidl.interfaceConverter(
      URLSearchParams
    );
    webidl.converters.XMLHttpRequestBodyInit = function(V) {
      if (typeof V === "string") {
        return webidl.converters.USVString(V);
      }
      if (isBlobLike(V)) {
        return webidl.converters.Blob(V, { strict: false });
      }
      if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
        return webidl.converters.BufferSource(V);
      }
      if (util.isFormDataLike(V)) {
        return webidl.converters.FormData(V, { strict: false });
      }
      if (V instanceof URLSearchParams) {
        return webidl.converters.URLSearchParams(V);
      }
      return webidl.converters.DOMString(V);
    };
    webidl.converters.BodyInit = function(V) {
      if (V instanceof ReadableStream) {
        return webidl.converters.ReadableStream(V);
      }
      if (V?.[Symbol.asyncIterator]) {
        return V;
      }
      return webidl.converters.XMLHttpRequestBodyInit(V);
    };
    webidl.converters.ResponseInit = webidl.dictionaryConverter([
      {
        key: "status",
        converter: webidl.converters["unsigned short"],
        defaultValue: 200
      },
      {
        key: "statusText",
        converter: webidl.converters.ByteString,
        defaultValue: ""
      },
      {
        key: "headers",
        converter: webidl.converters.HeadersInit
      }
    ]);
    module2.exports = {
      makeNetworkError,
      makeResponse,
      makeAppropriateNetworkError,
      filterResponse,
      Response,
      cloneResponse
    };
  }
});

// node_modules/undici/lib/fetch/request.js
var require_request2 = __commonJS({
  "node_modules/undici/lib/fetch/request.js"(exports2, module2) {
    "use strict";
    var { extractBody, mixinBody, cloneBody } = require_body();
    var { Headers: Headers2, fill: fillHeaders, HeadersList } = require_headers();
    var { FinalizationRegistry } = require_dispatcher_weakref()();
    var util = require_util();
    var {
      isValidHTTPToken,
      sameOrigin,
      normalizeMethod,
      makePolicyContainer,
      normalizeMethodRecord
    } = require_util2();
    var {
      forbiddenMethodsSet,
      corsSafeListedMethodsSet,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      requestDuplex
    } = require_constants2();
    var { kEnumerableProperty } = util;
    var { kHeaders, kSignal, kState, kGuard, kRealm } = require_symbols2();
    var { webidl } = require_webidl();
    var { getGlobalOrigin } = require_global();
    var { URLSerializer } = require_dataURL();
    var { kHeadersList, kConstruct } = require_symbols();
    var assert = require("assert");
    var { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require("events");
    var TransformStream = globalThis.TransformStream;
    var kAbortController = Symbol("abortController");
    var requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
      signal.removeEventListener("abort", abort);
    });
    var Request = class _Request {
      // https://fetch.spec.whatwg.org/#dom-request
      constructor(input, init = {}) {
        if (input === kConstruct) {
          return;
        }
        webidl.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
        input = webidl.converters.RequestInfo(input);
        init = webidl.converters.RequestInit(init);
        this[kRealm] = {
          settingsObject: {
            baseUrl: getGlobalOrigin(),
            get origin() {
              return this.baseUrl?.origin;
            },
            policyContainer: makePolicyContainer()
          }
        };
        let request2 = null;
        let fallbackMode = null;
        const baseUrl = this[kRealm].settingsObject.baseUrl;
        let signal = null;
        if (typeof input === "string") {
          let parsedURL;
          try {
            parsedURL = new URL(input, baseUrl);
          } catch (err) {
            throw new TypeError("Failed to parse URL from " + input, { cause: err });
          }
          if (parsedURL.username || parsedURL.password) {
            throw new TypeError(
              "Request cannot be constructed from a URL that includes credentials: " + input
            );
          }
          request2 = makeRequest({ urlList: [parsedURL] });
          fallbackMode = "cors";
        } else {
          assert(input instanceof _Request);
          request2 = input[kState];
          signal = input[kSignal];
        }
        const origin = this[kRealm].settingsObject.origin;
        let window2 = "client";
        if (request2.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin(request2.window, origin)) {
          window2 = request2.window;
        }
        if (init.window != null) {
          throw new TypeError(`'window' option '${window2}' must be null`);
        }
        if ("window" in init) {
          window2 = "no-window";
        }
        request2 = makeRequest({
          // URL request’s URL.
          // undici implementation note: this is set as the first item in request's urlList in makeRequest
          // method request’s method.
          method: request2.method,
          // header list A copy of request’s header list.
          // undici implementation note: headersList is cloned in makeRequest
          headersList: request2.headersList,
          // unsafe-request flag Set.
          unsafeRequest: request2.unsafeRequest,
          // client This’s relevant settings object.
          client: this[kRealm].settingsObject,
          // window window.
          window: window2,
          // priority request’s priority.
          priority: request2.priority,
          // origin request’s origin. The propagation of the origin is only significant for navigation requests
          // being handled by a service worker. In this scenario a request can have an origin that is different
          // from the current client.
          origin: request2.origin,
          // referrer request’s referrer.
          referrer: request2.referrer,
          // referrer policy request’s referrer policy.
          referrerPolicy: request2.referrerPolicy,
          // mode request’s mode.
          mode: request2.mode,
          // credentials mode request’s credentials mode.
          credentials: request2.credentials,
          // cache mode request’s cache mode.
          cache: request2.cache,
          // redirect mode request’s redirect mode.
          redirect: request2.redirect,
          // integrity metadata request’s integrity metadata.
          integrity: request2.integrity,
          // keepalive request’s keepalive.
          keepalive: request2.keepalive,
          // reload-navigation flag request’s reload-navigation flag.
          reloadNavigation: request2.reloadNavigation,
          // history-navigation flag request’s history-navigation flag.
          historyNavigation: request2.historyNavigation,
          // URL list A clone of request’s URL list.
          urlList: [...request2.urlList]
        });
        const initHasKey = Object.keys(init).length !== 0;
        if (initHasKey) {
          if (request2.mode === "navigate") {
            request2.mode = "same-origin";
          }
          request2.reloadNavigation = false;
          request2.historyNavigation = false;
          request2.origin = "client";
          request2.referrer = "client";
          request2.referrerPolicy = "";
          request2.url = request2.urlList[request2.urlList.length - 1];
          request2.urlList = [request2.url];
        }
        if (init.referrer !== void 0) {
          const referrer = init.referrer;
          if (referrer === "") {
            request2.referrer = "no-referrer";
          } else {
            let parsedReferrer;
            try {
              parsedReferrer = new URL(referrer, baseUrl);
            } catch (err) {
              throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
            }
            if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl)) {
              request2.referrer = "client";
            } else {
              request2.referrer = parsedReferrer;
            }
          }
        }
        if (init.referrerPolicy !== void 0) {
          request2.referrerPolicy = init.referrerPolicy;
        }
        let mode;
        if (init.mode !== void 0) {
          mode = init.mode;
        } else {
          mode = fallbackMode;
        }
        if (mode === "navigate") {
          throw webidl.errors.exception({
            header: "Request constructor",
            message: "invalid request mode navigate."
          });
        }
        if (mode != null) {
          request2.mode = mode;
        }
        if (init.credentials !== void 0) {
          request2.credentials = init.credentials;
        }
        if (init.cache !== void 0) {
          request2.cache = init.cache;
        }
        if (request2.cache === "only-if-cached" && request2.mode !== "same-origin") {
          throw new TypeError(
            "'only-if-cached' can be set only with 'same-origin' mode"
          );
        }
        if (init.redirect !== void 0) {
          request2.redirect = init.redirect;
        }
        if (init.integrity != null) {
          request2.integrity = String(init.integrity);
        }
        if (init.keepalive !== void 0) {
          request2.keepalive = Boolean(init.keepalive);
        }
        if (init.method !== void 0) {
          let method = init.method;
          if (!isValidHTTPToken(method)) {
            throw new TypeError(`'${method}' is not a valid HTTP method.`);
          }
          if (forbiddenMethodsSet.has(method.toUpperCase())) {
            throw new TypeError(`'${method}' HTTP method is unsupported.`);
          }
          method = normalizeMethodRecord[method] ?? normalizeMethod(method);
          request2.method = method;
        }
        if (init.signal !== void 0) {
          signal = init.signal;
        }
        this[kState] = request2;
        const ac = new AbortController();
        this[kSignal] = ac.signal;
        this[kSignal][kRealm] = this[kRealm];
        if (signal != null) {
          if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") {
            throw new TypeError(
              "Failed to construct 'Request': member signal is not of type AbortSignal."
            );
          }
          if (signal.aborted) {
            ac.abort(signal.reason);
          } else {
            this[kAbortController] = ac;
            const acRef = new WeakRef(ac);
            const abort = function() {
              const ac2 = acRef.deref();
              if (ac2 !== void 0) {
                ac2.abort(this.reason);
              }
            };
            try {
              if (typeof getMaxListeners === "function" && getMaxListeners(signal) === defaultMaxListeners) {
                setMaxListeners(100, signal);
              } else if (getEventListeners(signal, "abort").length >= defaultMaxListeners) {
                setMaxListeners(100, signal);
              }
            } catch {
            }
            util.addAbortListener(signal, abort);
            requestFinalizer.register(ac, { signal, abort });
          }
        }
        this[kHeaders] = new Headers2(kConstruct);
        this[kHeaders][kHeadersList] = request2.headersList;
        this[kHeaders][kGuard] = "request";
        this[kHeaders][kRealm] = this[kRealm];
        if (mode === "no-cors") {
          if (!corsSafeListedMethodsSet.has(request2.method)) {
            throw new TypeError(
              `'${request2.method} is unsupported in no-cors mode.`
            );
          }
          this[kHeaders][kGuard] = "request-no-cors";
        }
        if (initHasKey) {
          const headersList = this[kHeaders][kHeadersList];
          const headers = init.headers !== void 0 ? init.headers : new HeadersList(headersList);
          headersList.clear();
          if (headers instanceof HeadersList) {
            for (const [key, val] of headers) {
              headersList.append(key, val);
            }
            headersList.cookies = headers.cookies;
          } else {
            fillHeaders(this[kHeaders], headers);
          }
        }
        const inputBody = input instanceof _Request ? input[kState].body : null;
        if ((init.body != null || inputBody != null) && (request2.method === "GET" || request2.method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body.");
        }
        let initBody = null;
        if (init.body != null) {
          const [extractedBody, contentType] = extractBody(
            init.body,
            request2.keepalive
          );
          initBody = extractedBody;
          if (contentType && !this[kHeaders][kHeadersList].contains("content-type")) {
            this[kHeaders].append("content-type", contentType);
          }
        }
        const inputOrInitBody = initBody ?? inputBody;
        if (inputOrInitBody != null && inputOrInitBody.source == null) {
          if (initBody != null && init.duplex == null) {
            throw new TypeError("RequestInit: duplex option is required when sending a body.");
          }
          if (request2.mode !== "same-origin" && request2.mode !== "cors") {
            throw new TypeError(
              'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
            );
          }
          request2.useCORSPreflightFlag = true;
        }
        let finalBody = inputOrInitBody;
        if (initBody == null && inputBody != null) {
          if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
            throw new TypeError(
              "Cannot construct a Request with a Request object that has already been used."
            );
          }
          if (!TransformStream) {
            TransformStream = require("stream/web").TransformStream;
          }
          const identityTransform = new TransformStream();
          inputBody.stream.pipeThrough(identityTransform);
          finalBody = {
            source: inputBody.source,
            length: inputBody.length,
            stream: identityTransform.readable
          };
        }
        this[kState].body = finalBody;
      }
      // Returns request’s HTTP method, which is "GET" by default.
      get method() {
        webidl.brandCheck(this, _Request);
        return this[kState].method;
      }
      // Returns the URL of request as a string.
      get url() {
        webidl.brandCheck(this, _Request);
        return URLSerializer(this[kState].url);
      }
      // Returns a Headers object consisting of the headers associated with request.
      // Note that headers added in the network layer by the user agent will not
      // be accounted for in this object, e.g., the "Host" header.
      get headers() {
        webidl.brandCheck(this, _Request);
        return this[kHeaders];
      }
      // Returns the kind of resource requested by request, e.g., "document"
      // or "script".
      get destination() {
        webidl.brandCheck(this, _Request);
        return this[kState].destination;
      }
      // Returns the referrer of request. Its value can be a same-origin URL if
      // explicitly set in init, the empty string to indicate no referrer, and
      // "about:client" when defaulting to the global’s default. This is used
      // during fetching to determine the value of the `Referer` header of the
      // request being made.
      get referrer() {
        webidl.brandCheck(this, _Request);
        if (this[kState].referrer === "no-referrer") {
          return "";
        }
        if (this[kState].referrer === "client") {
          return "about:client";
        }
        return this[kState].referrer.toString();
      }
      // Returns the referrer policy associated with request.
      // This is used during fetching to compute the value of the request’s
      // referrer.
      get referrerPolicy() {
        webidl.brandCheck(this, _Request);
        return this[kState].referrerPolicy;
      }
      // Returns the mode associated with request, which is a string indicating
      // whether the request will use CORS, or will be restricted to same-origin
      // URLs.
      get mode() {
        webidl.brandCheck(this, _Request);
        return this[kState].mode;
      }
      // Returns the credentials mode associated with request,
      // which is a string indicating whether credentials will be sent with the
      // request always, never, or only when sent to a same-origin URL.
      get credentials() {
        return this[kState].credentials;
      }
      // Returns the cache mode associated with request,
      // which is a string indicating how the request will
      // interact with the browser’s cache when fetching.
      get cache() {
        webidl.brandCheck(this, _Request);
        return this[kState].cache;
      }
      // Returns the redirect mode associated with request,
      // which is a string indicating how redirects for the
      // request will be handled during fetching. A request
      // will follow redirects by default.
      get redirect() {
        webidl.brandCheck(this, _Request);
        return this[kState].redirect;
      }
      // Returns request’s subresource integrity metadata, which is a
      // cryptographic hash of the resource being fetched. Its value
      // consists of multiple hashes separated by whitespace. [SRI]
      get integrity() {
        webidl.brandCheck(this, _Request);
        return this[kState].integrity;
      }
      // Returns a boolean indicating whether or not request can outlive the
      // global in which it was created.
      get keepalive() {
        webidl.brandCheck(this, _Request);
        return this[kState].keepalive;
      }
      // Returns a boolean indicating whether or not request is for a reload
      // navigation.
      get isReloadNavigation() {
        webidl.brandCheck(this, _Request);
        return this[kState].reloadNavigation;
      }
      // Returns a boolean indicating whether or not request is for a history
      // navigation (a.k.a. back-foward navigation).
      get isHistoryNavigation() {
        webidl.brandCheck(this, _Request);
        return this[kState].historyNavigation;
      }
      // Returns the signal associated with request, which is an AbortSignal
      // object indicating whether or not request has been aborted, and its
      // abort event handler.
      get signal() {
        webidl.brandCheck(this, _Request);
        return this[kSignal];
      }
      get body() {
        webidl.brandCheck(this, _Request);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, _Request);
        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
      }
      get duplex() {
        webidl.brandCheck(this, _Request);
        return "half";
      }
      // Returns a clone of request.
      clone() {
        webidl.brandCheck(this, _Request);
        if (this.bodyUsed || this.body?.locked) {
          throw new TypeError("unusable");
        }
        const clonedRequest = cloneRequest(this[kState]);
        const clonedRequestObject = new _Request(kConstruct);
        clonedRequestObject[kState] = clonedRequest;
        clonedRequestObject[kRealm] = this[kRealm];
        clonedRequestObject[kHeaders] = new Headers2(kConstruct);
        clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
        clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        const ac = new AbortController();
        if (this.signal.aborted) {
          ac.abort(this.signal.reason);
        } else {
          util.addAbortListener(
            this.signal,
            () => {
              ac.abort(this.signal.reason);
            }
          );
        }
        clonedRequestObject[kSignal] = ac.signal;
        return clonedRequestObject;
      }
    };
    mixinBody(Request);
    function makeRequest(init) {
      const request2 = {
        method: "GET",
        localURLsOnly: false,
        unsafeRequest: false,
        body: null,
        client: null,
        reservedClient: null,
        replacesClientId: "",
        window: "client",
        keepalive: false,
        serviceWorkers: "all",
        initiator: "",
        destination: "",
        priority: null,
        origin: "client",
        policyContainer: "client",
        referrer: "client",
        referrerPolicy: "",
        mode: "no-cors",
        useCORSPreflightFlag: false,
        credentials: "same-origin",
        useCredentials: false,
        cache: "default",
        redirect: "follow",
        integrity: "",
        cryptoGraphicsNonceMetadata: "",
        parserMetadata: "",
        reloadNavigation: false,
        historyNavigation: false,
        userActivation: false,
        taintedOrigin: false,
        redirectCount: 0,
        responseTainting: "basic",
        preventNoCacheCacheControlHeaderModification: false,
        done: false,
        timingAllowFailed: false,
        ...init,
        headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()
      };
      request2.url = request2.urlList[0];
      return request2;
    }
    function cloneRequest(request2) {
      const newRequest = makeRequest({ ...request2, body: null });
      if (request2.body != null) {
        newRequest.body = cloneBody(request2.body);
      }
      return newRequest;
    }
    Object.defineProperties(Request.prototype, {
      method: kEnumerableProperty,
      url: kEnumerableProperty,
      headers: kEnumerableProperty,
      redirect: kEnumerableProperty,
      clone: kEnumerableProperty,
      signal: kEnumerableProperty,
      duplex: kEnumerableProperty,
      destination: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      isHistoryNavigation: kEnumerableProperty,
      isReloadNavigation: kEnumerableProperty,
      keepalive: kEnumerableProperty,
      integrity: kEnumerableProperty,
      cache: kEnumerableProperty,
      credentials: kEnumerableProperty,
      attribute: kEnumerableProperty,
      referrerPolicy: kEnumerableProperty,
      referrer: kEnumerableProperty,
      mode: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "Request",
        configurable: true
      }
    });
    webidl.converters.Request = webidl.interfaceConverter(
      Request
    );
    webidl.converters.RequestInfo = function(V) {
      if (typeof V === "string") {
        return webidl.converters.USVString(V);
      }
      if (V instanceof Request) {
        return webidl.converters.Request(V);
      }
      return webidl.converters.USVString(V);
    };
    webidl.converters.AbortSignal = webidl.interfaceConverter(
      AbortSignal
    );
    webidl.converters.RequestInit = webidl.dictionaryConverter([
      {
        key: "method",
        converter: webidl.converters.ByteString
      },
      {
        key: "headers",
        converter: webidl.converters.HeadersInit
      },
      {
        key: "body",
        converter: webidl.nullableConverter(
          webidl.converters.BodyInit
        )
      },
      {
        key: "referrer",
        converter: webidl.converters.USVString
      },
      {
        key: "referrerPolicy",
        converter: webidl.converters.DOMString,
        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
        allowedValues: referrerPolicy
      },
      {
        key: "mode",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#concept-request-mode
        allowedValues: requestMode
      },
      {
        key: "credentials",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcredentials
        allowedValues: requestCredentials
      },
      {
        key: "cache",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcache
        allowedValues: requestCache
      },
      {
        key: "redirect",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestredirect
        allowedValues: requestRedirect
      },
      {
        key: "integrity",
        converter: webidl.converters.DOMString
      },
      {
        key: "keepalive",
        converter: webidl.converters.boolean
      },
      {
        key: "signal",
        converter: webidl.nullableConverter(
          (signal) => webidl.converters.AbortSignal(
            signal,
            { strict: false }
          )
        )
      },
      {
        key: "window",
        converter: webidl.converters.any
      },
      {
        key: "duplex",
        converter: webidl.converters.DOMString,
        allowedValues: requestDuplex
      }
    ]);
    module2.exports = { Request, makeRequest };
  }
});

// node_modules/undici/lib/fetch/index.js
var require_fetch = __commonJS({
  "node_modules/undici/lib/fetch/index.js"(exports2, module2) {
    "use strict";
    var {
      Response,
      makeNetworkError,
      makeAppropriateNetworkError,
      filterResponse,
      makeResponse
    } = require_response();
    var { Headers: Headers2 } = require_headers();
    var { Request, makeRequest } = require_request2();
    var zlib = require("zlib");
    var {
      bytesMatch,
      makePolicyContainer,
      clonePolicyContainer,
      requestBadPort,
      TAOCheck,
      appendRequestOriginHeader,
      responseLocationURL,
      requestCurrentURL,
      setRequestReferrerPolicyOnRedirect,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      createOpaqueTimingInfo,
      appendFetchMetadata,
      corsCheck,
      crossOriginResourcePolicyCheck,
      determineRequestsReferrer,
      coarsenedSharedCurrentTime,
      createDeferredPromise,
      isBlobLike,
      sameOrigin,
      isCancelled,
      isAborted,
      isErrorLike,
      fullyReadBody,
      readableStreamClose,
      isomorphicEncode,
      urlIsLocal,
      urlIsHttpHttpsScheme,
      urlHasHttpsScheme
    } = require_util2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var assert = require("assert");
    var { safelyExtractBody } = require_body();
    var {
      redirectStatusSet,
      nullBodyStatus,
      safeMethodsSet,
      requestBodyHeader,
      subresourceSet,
      DOMException: DOMException2
    } = require_constants2();
    var { kHeadersList } = require_symbols();
    var EE = require("events");
    var { Readable, pipeline } = require("stream");
    var { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require_util();
    var { dataURLProcessor, serializeAMimeType } = require_dataURL();
    var { TransformStream } = require("stream/web");
    var { getGlobalDispatcher } = require_global2();
    var { webidl } = require_webidl();
    var { STATUS_CODES } = require("http");
    var GET_OR_HEAD = ["GET", "HEAD"];
    var resolveObjectURL;
    var ReadableStream = globalThis.ReadableStream;
    var Fetch = class extends EE {
      constructor(dispatcher) {
        super();
        this.dispatcher = dispatcher;
        this.connection = null;
        this.dump = false;
        this.state = "ongoing";
        this.setMaxListeners(21);
      }
      terminate(reason) {
        if (this.state !== "ongoing") {
          return;
        }
        this.state = "terminated";
        this.connection?.destroy(reason);
        this.emit("terminated", reason);
      }
      // https://fetch.spec.whatwg.org/#fetch-controller-abort
      abort(error) {
        if (this.state !== "ongoing") {
          return;
        }
        this.state = "aborted";
        if (!error) {
          error = new DOMException2("The operation was aborted.", "AbortError");
        }
        this.serializedAbortReason = error;
        this.connection?.destroy(error);
        this.emit("terminated", error);
      }
    };
    function fetch(input, init = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
      const p = createDeferredPromise();
      let requestObject;
      try {
        requestObject = new Request(input, init);
      } catch (e) {
        p.reject(e);
        return p.promise;
      }
      const request2 = requestObject[kState];
      if (requestObject.signal.aborted) {
        abortFetch(p, request2, null, requestObject.signal.reason);
        return p.promise;
      }
      const globalObject = request2.client.globalObject;
      if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") {
        request2.serviceWorkers = "none";
      }
      let responseObject = null;
      const relevantRealm = null;
      let locallyAborted = false;
      let controller = null;
      addAbortListener(
        requestObject.signal,
        () => {
          locallyAborted = true;
          assert(controller != null);
          controller.abort(requestObject.signal.reason);
          abortFetch(p, request2, responseObject, requestObject.signal.reason);
        }
      );
      const handleFetchDone = (response) => finalizeAndReportTiming(response, "fetch");
      const processResponse = (response) => {
        if (locallyAborted) {
          return Promise.resolve();
        }
        if (response.aborted) {
          abortFetch(p, request2, responseObject, controller.serializedAbortReason);
          return Promise.resolve();
        }
        if (response.type === "error") {
          p.reject(
            Object.assign(new TypeError("fetch failed"), { cause: response.error })
          );
          return Promise.resolve();
        }
        responseObject = new Response();
        responseObject[kState] = response;
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kHeadersList] = response.headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        p.resolve(responseObject);
      };
      controller = fetching({
        request: request2,
        processResponseEndOfBody: handleFetchDone,
        processResponse,
        dispatcher: init.dispatcher ?? getGlobalDispatcher()
        // undici
      });
      return p.promise;
    }
    function finalizeAndReportTiming(response, initiatorType = "other") {
      if (response.type === "error" && response.aborted) {
        return;
      }
      if (!response.urlList?.length) {
        return;
      }
      const originalURL = response.urlList[0];
      let timingInfo = response.timingInfo;
      let cacheState = response.cacheState;
      if (!urlIsHttpHttpsScheme(originalURL)) {
        return;
      }
      if (timingInfo === null) {
        return;
      }
      if (!response.timingAllowPassed) {
        timingInfo = createOpaqueTimingInfo({
          startTime: timingInfo.startTime
        });
        cacheState = "";
      }
      timingInfo.endTime = coarsenedSharedCurrentTime();
      response.timingInfo = timingInfo;
      markResourceTiming(
        timingInfo,
        originalURL,
        initiatorType,
        globalThis,
        cacheState
      );
    }
    function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis2, cacheState) {
      if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) {
        performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis2, cacheState);
      }
    }
    function abortFetch(p, request2, responseObject, error) {
      if (!error) {
        error = new DOMException2("The operation was aborted.", "AbortError");
      }
      p.reject(error);
      if (request2.body != null && isReadable(request2.body?.stream)) {
        request2.body.stream.cancel(error).catch((err) => {
          if (err.code === "ERR_INVALID_STATE") {
            return;
          }
          throw err;
        });
      }
      if (responseObject == null) {
        return;
      }
      const response = responseObject[kState];
      if (response.body != null && isReadable(response.body?.stream)) {
        response.body.stream.cancel(error).catch((err) => {
          if (err.code === "ERR_INVALID_STATE") {
            return;
          }
          throw err;
        });
      }
    }
    function fetching({
      request: request2,
      processRequestBodyChunkLength,
      processRequestEndOfBody,
      processResponse,
      processResponseEndOfBody,
      processResponseConsumeBody,
      useParallelQueue = false,
      dispatcher
      // undici
    }) {
      let taskDestination = null;
      let crossOriginIsolatedCapability = false;
      if (request2.client != null) {
        taskDestination = request2.client.globalObject;
        crossOriginIsolatedCapability = request2.client.crossOriginIsolatedCapability;
      }
      const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
      const timingInfo = createOpaqueTimingInfo({
        startTime: currenTime
      });
      const fetchParams = {
        controller: new Fetch(dispatcher),
        request: request2,
        timingInfo,
        processRequestBodyChunkLength,
        processRequestEndOfBody,
        processResponse,
        processResponseConsumeBody,
        processResponseEndOfBody,
        taskDestination,
        crossOriginIsolatedCapability
      };
      assert(!request2.body || request2.body.stream);
      if (request2.window === "client") {
        request2.window = request2.client?.globalObject?.constructor?.name === "Window" ? request2.client : "no-window";
      }
      if (request2.origin === "client") {
        request2.origin = request2.client?.origin;
      }
      if (request2.policyContainer === "client") {
        if (request2.client != null) {
          request2.policyContainer = clonePolicyContainer(
            request2.client.policyContainer
          );
        } else {
          request2.policyContainer = makePolicyContainer();
        }
      }
      if (!request2.headersList.contains("accept")) {
        const value3 = "*/*";
        request2.headersList.append("accept", value3);
      }
      if (!request2.headersList.contains("accept-language")) {
        request2.headersList.append("accept-language", "*");
      }
      if (request2.priority === null) {
      }
      if (subresourceSet.has(request2.destination)) {
      }
      mainFetch(fetchParams).catch((err) => {
        fetchParams.controller.terminate(err);
      });
      return fetchParams.controller;
    }
    async function mainFetch(fetchParams, recursive = false) {
      const request2 = fetchParams.request;
      let response = null;
      if (request2.localURLsOnly && !urlIsLocal(requestCurrentURL(request2))) {
        response = makeNetworkError("local URLs only");
      }
      tryUpgradeRequestToAPotentiallyTrustworthyURL(request2);
      if (requestBadPort(request2) === "blocked") {
        response = makeNetworkError("bad port");
      }
      if (request2.referrerPolicy === "") {
        request2.referrerPolicy = request2.policyContainer.referrerPolicy;
      }
      if (request2.referrer !== "no-referrer") {
        request2.referrer = determineRequestsReferrer(request2);
      }
      if (response === null) {
        response = await (async () => {
          const currentURL = requestCurrentURL(request2);
          if (
            // - request’s current URL’s origin is same origin with request’s origin,
            //   and request’s response tainting is "basic"
            sameOrigin(currentURL, request2.url) && request2.responseTainting === "basic" || // request’s current URL’s scheme is "data"
            currentURL.protocol === "data:" || // - request’s mode is "navigate" or "websocket"
            (request2.mode === "navigate" || request2.mode === "websocket")
          ) {
            request2.responseTainting = "basic";
            return await schemeFetch(fetchParams);
          }
          if (request2.mode === "same-origin") {
            return makeNetworkError('request mode cannot be "same-origin"');
          }
          if (request2.mode === "no-cors") {
            if (request2.redirect !== "follow") {
              return makeNetworkError(
                'redirect mode cannot be "follow" for "no-cors" request'
              );
            }
            request2.responseTainting = "opaque";
            return await schemeFetch(fetchParams);
          }
          if (!urlIsHttpHttpsScheme(requestCurrentURL(request2))) {
            return makeNetworkError("URL scheme must be a HTTP(S) scheme");
          }
          request2.responseTainting = "cors";
          return await httpFetch(fetchParams);
        })();
      }
      if (recursive) {
        return response;
      }
      if (response.status !== 0 && !response.internalResponse) {
        if (request2.responseTainting === "cors") {
        }
        if (request2.responseTainting === "basic") {
          response = filterResponse(response, "basic");
        } else if (request2.responseTainting === "cors") {
          response = filterResponse(response, "cors");
        } else if (request2.responseTainting === "opaque") {
          response = filterResponse(response, "opaque");
        } else {
          assert(false);
        }
      }
      let internalResponse = response.status === 0 ? response : response.internalResponse;
      if (internalResponse.urlList.length === 0) {
        internalResponse.urlList.push(...request2.urlList);
      }
      if (!request2.timingAllowFailed) {
        response.timingAllowPassed = true;
      }
      if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request2.headers.contains("range")) {
        response = internalResponse = makeNetworkError();
      }
      if (response.status !== 0 && (request2.method === "HEAD" || request2.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
        internalResponse.body = null;
        fetchParams.controller.dump = true;
      }
      if (request2.integrity) {
        const processBodyError = (reason) => fetchFinale(fetchParams, makeNetworkError(reason));
        if (request2.responseTainting === "opaque" || response.body == null) {
          processBodyError(response.error);
          return;
        }
        const processBody = (bytes) => {
          if (!bytesMatch(bytes, request2.integrity)) {
            processBodyError("integrity mismatch");
            return;
          }
          response.body = safelyExtractBody(bytes)[0];
          fetchFinale(fetchParams, response);
        };
        await fullyReadBody(response.body, processBody, processBodyError);
      } else {
        fetchFinale(fetchParams, response);
      }
    }
    function schemeFetch(fetchParams) {
      if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
        return Promise.resolve(makeAppropriateNetworkError(fetchParams));
      }
      const { request: request2 } = fetchParams;
      const { protocol: scheme } = requestCurrentURL(request2);
      switch (scheme) {
        case "about:": {
          return Promise.resolve(makeNetworkError("about scheme is not supported"));
        }
        case "blob:": {
          if (!resolveObjectURL) {
            resolveObjectURL = require("buffer").resolveObjectURL;
          }
          const blobURLEntry = requestCurrentURL(request2);
          if (blobURLEntry.search.length !== 0) {
            return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
          }
          const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
          if (request2.method !== "GET" || !isBlobLike(blobURLEntryObject)) {
            return Promise.resolve(makeNetworkError("invalid method"));
          }
          const bodyWithType = safelyExtractBody(blobURLEntryObject);
          const body = bodyWithType[0];
          const length2 = isomorphicEncode(`${body.length}`);
          const type = bodyWithType[1] ?? "";
          const response = makeResponse({
            statusText: "OK",
            headersList: [
              ["content-length", { name: "Content-Length", value: length2 }],
              ["content-type", { name: "Content-Type", value: type }]
            ]
          });
          response.body = body;
          return Promise.resolve(response);
        }
        case "data:": {
          const currentURL = requestCurrentURL(request2);
          const dataURLStruct = dataURLProcessor(currentURL);
          if (dataURLStruct === "failure") {
            return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
          }
          const mimeType = serializeAMimeType(dataURLStruct.mimeType);
          return Promise.resolve(makeResponse({
            statusText: "OK",
            headersList: [
              ["content-type", { name: "Content-Type", value: mimeType }]
            ],
            body: safelyExtractBody(dataURLStruct.body)[0]
          }));
        }
        case "file:": {
          return Promise.resolve(makeNetworkError("not implemented... yet..."));
        }
        case "http:":
        case "https:": {
          return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
        }
        default: {
          return Promise.resolve(makeNetworkError("unknown scheme"));
        }
      }
    }
    function finalizeResponse(fetchParams, response) {
      fetchParams.request.done = true;
      if (fetchParams.processResponseDone != null) {
        queueMicrotask(() => fetchParams.processResponseDone(response));
      }
    }
    function fetchFinale(fetchParams, response) {
      if (response.type === "error") {
        response.urlList = [fetchParams.request.urlList[0]];
        response.timingInfo = createOpaqueTimingInfo({
          startTime: fetchParams.timingInfo.startTime
        });
      }
      const processResponseEndOfBody = () => {
        fetchParams.request.done = true;
        if (fetchParams.processResponseEndOfBody != null) {
          queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
        }
      };
      if (fetchParams.processResponse != null) {
        queueMicrotask(() => fetchParams.processResponse(response));
      }
      if (response.body == null) {
        processResponseEndOfBody();
      } else {
        const identityTransformAlgorithm = (chunk4, controller) => {
          controller.enqueue(chunk4);
        };
        const transformStream = new TransformStream({
          start() {
          },
          transform: identityTransformAlgorithm,
          flush: processResponseEndOfBody
        }, {
          size() {
            return 1;
          }
        }, {
          size() {
            return 1;
          }
        });
        response.body = { stream: response.body.stream.pipeThrough(transformStream) };
      }
      if (fetchParams.processResponseConsumeBody != null) {
        const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes);
        const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure);
        if (response.body == null) {
          queueMicrotask(() => processBody(null));
        } else {
          return fullyReadBody(response.body, processBody, processBodyError);
        }
        return Promise.resolve();
      }
    }
    async function httpFetch(fetchParams) {
      const request2 = fetchParams.request;
      let response = null;
      let actualResponse = null;
      const timingInfo = fetchParams.timingInfo;
      if (request2.serviceWorkers === "all") {
      }
      if (response === null) {
        if (request2.redirect === "follow") {
          request2.serviceWorkers = "none";
        }
        actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
        if (request2.responseTainting === "cors" && corsCheck(request2, response) === "failure") {
          return makeNetworkError("cors failure");
        }
        if (TAOCheck(request2, response) === "failure") {
          request2.timingAllowFailed = true;
        }
      }
      if ((request2.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(
        request2.origin,
        request2.client,
        request2.destination,
        actualResponse
      ) === "blocked") {
        return makeNetworkError("blocked");
      }
      if (redirectStatusSet.has(actualResponse.status)) {
        if (request2.redirect !== "manual") {
          fetchParams.controller.connection.destroy();
        }
        if (request2.redirect === "error") {
          response = makeNetworkError("unexpected redirect");
        } else if (request2.redirect === "manual") {
          response = actualResponse;
        } else if (request2.redirect === "follow") {
          response = await httpRedirectFetch(fetchParams, response);
        } else {
          assert(false);
        }
      }
      response.timingInfo = timingInfo;
      return response;
    }
    function httpRedirectFetch(fetchParams, response) {
      const request2 = fetchParams.request;
      const actualResponse = response.internalResponse ? response.internalResponse : response;
      let locationURL;
      try {
        locationURL = responseLocationURL(
          actualResponse,
          requestCurrentURL(request2).hash
        );
        if (locationURL == null) {
          return response;
        }
      } catch (err) {
        return Promise.resolve(makeNetworkError(err));
      }
      if (!urlIsHttpHttpsScheme(locationURL)) {
        return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
      }
      if (request2.redirectCount === 20) {
        return Promise.resolve(makeNetworkError("redirect count exceeded"));
      }
      request2.redirectCount += 1;
      if (request2.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request2, locationURL)) {
        return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'));
      }
      if (request2.responseTainting === "cors" && (locationURL.username || locationURL.password)) {
        return Promise.resolve(makeNetworkError(
          'URL cannot contain credentials for request mode "cors"'
        ));
      }
      if (actualResponse.status !== 303 && request2.body != null && request2.body.source == null) {
        return Promise.resolve(makeNetworkError());
      }
      if ([301, 302].includes(actualResponse.status) && request2.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request2.method)) {
        request2.method = "GET";
        request2.body = null;
        for (const headerName of requestBodyHeader) {
          request2.headersList.delete(headerName);
        }
      }
      if (!sameOrigin(requestCurrentURL(request2), locationURL)) {
        request2.headersList.delete("authorization");
        request2.headersList.delete("proxy-authorization", true);
        request2.headersList.delete("cookie");
        request2.headersList.delete("host");
      }
      if (request2.body != null) {
        assert(request2.body.source != null);
        request2.body = safelyExtractBody(request2.body.source)[0];
      }
      const timingInfo = fetchParams.timingInfo;
      timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
      if (timingInfo.redirectStartTime === 0) {
        timingInfo.redirectStartTime = timingInfo.startTime;
      }
      request2.urlList.push(locationURL);
      setRequestReferrerPolicyOnRedirect(request2, actualResponse);
      return mainFetch(fetchParams, true);
    }
    async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
      const request2 = fetchParams.request;
      let httpFetchParams = null;
      let httpRequest = null;
      let response = null;
      const httpCache = null;
      const revalidatingFlag = false;
      if (request2.window === "no-window" && request2.redirect === "error") {
        httpFetchParams = fetchParams;
        httpRequest = request2;
      } else {
        httpRequest = makeRequest(request2);
        httpFetchParams = { ...fetchParams };
        httpFetchParams.request = httpRequest;
      }
      const includeCredentials = request2.credentials === "include" || request2.credentials === "same-origin" && request2.responseTainting === "basic";
      const contentLength = httpRequest.body ? httpRequest.body.length : null;
      let contentLengthHeaderValue = null;
      if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) {
        contentLengthHeaderValue = "0";
      }
      if (contentLength != null) {
        contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
      }
      if (contentLengthHeaderValue != null) {
        httpRequest.headersList.append("content-length", contentLengthHeaderValue);
      }
      if (contentLength != null && httpRequest.keepalive) {
      }
      if (httpRequest.referrer instanceof URL) {
        httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href));
      }
      appendRequestOriginHeader(httpRequest);
      appendFetchMetadata(httpRequest);
      if (!httpRequest.headersList.contains("user-agent")) {
        httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
      }
      if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) {
        httpRequest.cache = "no-store";
      }
      if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) {
        httpRequest.headersList.append("cache-control", "max-age=0");
      }
      if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
        if (!httpRequest.headersList.contains("pragma")) {
          httpRequest.headersList.append("pragma", "no-cache");
        }
        if (!httpRequest.headersList.contains("cache-control")) {
          httpRequest.headersList.append("cache-control", "no-cache");
        }
      }
      if (httpRequest.headersList.contains("range")) {
        httpRequest.headersList.append("accept-encoding", "identity");
      }
      if (!httpRequest.headersList.contains("accept-encoding")) {
        if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
          httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
        } else {
          httpRequest.headersList.append("accept-encoding", "gzip, deflate");
        }
      }
      httpRequest.headersList.delete("host");
      if (includeCredentials) {
      }
      if (httpCache == null) {
        httpRequest.cache = "no-store";
      }
      if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {
      }
      if (response == null) {
        if (httpRequest.mode === "only-if-cached") {
          return makeNetworkError("only if cached");
        }
        const forwardResponse = await httpNetworkFetch(
          httpFetchParams,
          includeCredentials,
          isNewConnectionFetch
        );
        if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {
        }
        if (revalidatingFlag && forwardResponse.status === 304) {
        }
        if (response == null) {
          response = forwardResponse;
        }
      }
      response.urlList = [...httpRequest.urlList];
      if (httpRequest.headersList.contains("range")) {
        response.rangeRequested = true;
      }
      response.requestIncludesCredentials = includeCredentials;
      if (response.status === 407) {
        if (request2.window === "no-window") {
          return makeNetworkError();
        }
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams);
        }
        return makeNetworkError("proxy authentication required");
      }
      if (
        // response’s status is 421
        response.status === 421 && // isNewConnectionFetch is false
        !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
        (request2.body == null || request2.body.source != null)
      ) {
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams);
        }
        fetchParams.controller.connection.destroy();
        response = await httpNetworkOrCacheFetch(
          fetchParams,
          isAuthenticationFetch,
          true
        );
      }
      if (isAuthenticationFetch) {
      }
      return response;
    }
    async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
      assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
      fetchParams.controller.connection = {
        abort: null,
        destroyed: false,
        destroy(err) {
          if (!this.destroyed) {
            this.destroyed = true;
            this.abort?.(err ?? new DOMException2("The operation was aborted.", "AbortError"));
          }
        }
      };
      const request2 = fetchParams.request;
      let response = null;
      const timingInfo = fetchParams.timingInfo;
      const httpCache = null;
      if (httpCache == null) {
        request2.cache = "no-store";
      }
      const newConnection = forceNewConnection ? "yes" : "no";
      if (request2.mode === "websocket") {
      } else {
      }
      let requestBody = null;
      if (request2.body == null && fetchParams.processRequestEndOfBody) {
        queueMicrotask(() => fetchParams.processRequestEndOfBody());
      } else if (request2.body != null) {
        const processBodyChunk = async function* (bytes) {
          if (isCancelled(fetchParams)) {
            return;
          }
          yield bytes;
          fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
        };
        const processEndOfBody = () => {
          if (isCancelled(fetchParams)) {
            return;
          }
          if (fetchParams.processRequestEndOfBody) {
            fetchParams.processRequestEndOfBody();
          }
        };
        const processBodyError = (e) => {
          if (isCancelled(fetchParams)) {
            return;
          }
          if (e.name === "AbortError") {
            fetchParams.controller.abort();
          } else {
            fetchParams.controller.terminate(e);
          }
        };
        requestBody = async function* () {
          try {
            for await (const bytes of request2.body.stream) {
              yield* processBodyChunk(bytes);
            }
            processEndOfBody();
          } catch (err) {
            processBodyError(err);
          }
        }();
      }
      try {
        const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
        if (socket) {
          response = makeResponse({ status, statusText, headersList, socket });
        } else {
          const iterator = body[Symbol.asyncIterator]();
          fetchParams.controller.next = () => iterator.next();
          response = makeResponse({ status, statusText, headersList });
        }
      } catch (err) {
        if (err.name === "AbortError") {
          fetchParams.controller.connection.destroy();
          return makeAppropriateNetworkError(fetchParams, err);
        }
        return makeNetworkError(err);
      }
      const pullAlgorithm = () => {
        fetchParams.controller.resume();
      };
      const cancelAlgorithm = (reason) => {
        fetchParams.controller.abort(reason);
      };
      if (!ReadableStream) {
        ReadableStream = require("stream/web").ReadableStream;
      }
      const stream = new ReadableStream(
        {
          async start(controller) {
            fetchParams.controller.controller = controller;
          },
          async pull(controller) {
            await pullAlgorithm(controller);
          },
          async cancel(reason) {
            await cancelAlgorithm(reason);
          }
        },
        {
          highWaterMark: 0,
          size() {
            return 1;
          }
        }
      );
      response.body = { stream };
      fetchParams.controller.on("terminated", onAborted);
      fetchParams.controller.resume = async () => {
        while (true) {
          let bytes;
          let isFailure5;
          try {
            const { done: done7, value: value3 } = await fetchParams.controller.next();
            if (isAborted(fetchParams)) {
              break;
            }
            bytes = done7 ? void 0 : value3;
          } catch (err) {
            if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
              bytes = void 0;
            } else {
              bytes = err;
              isFailure5 = true;
            }
          }
          if (bytes === void 0) {
            readableStreamClose(fetchParams.controller.controller);
            finalizeResponse(fetchParams, response);
            return;
          }
          timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
          if (isFailure5) {
            fetchParams.controller.terminate(bytes);
            return;
          }
          fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
          if (isErrored(stream)) {
            fetchParams.controller.terminate();
            return;
          }
          if (!fetchParams.controller.controller.desiredSize) {
            return;
          }
        }
      };
      function onAborted(reason) {
        if (isAborted(fetchParams)) {
          response.aborted = true;
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(
              fetchParams.controller.serializedAbortReason
            );
          }
        } else {
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(new TypeError("terminated", {
              cause: isErrorLike(reason) ? reason : void 0
            }));
          }
        }
        fetchParams.controller.connection.destroy();
      }
      return response;
      async function dispatch({ body }) {
        const url = requestCurrentURL(request2);
        const agent = fetchParams.controller.dispatcher;
        return new Promise((resolve, reject) => agent.dispatch(
          {
            path: url.pathname + url.search,
            origin: url.origin,
            method: request2.method,
            body: fetchParams.controller.dispatcher.isMockActive ? request2.body && (request2.body.source || request2.body.stream) : body,
            headers: request2.headersList.entries,
            maxRedirections: 0,
            upgrade: request2.mode === "websocket" ? "websocket" : void 0
          },
          {
            body: null,
            abort: null,
            onConnect(abort) {
              const { connection } = fetchParams.controller;
              if (connection.destroyed) {
                abort(new DOMException2("The operation was aborted.", "AbortError"));
              } else {
                fetchParams.controller.on("terminated", abort);
                this.abort = connection.abort = abort;
              }
            },
            onHeaders(status, headersList, resume2, statusText) {
              if (status < 200) {
                return;
              }
              let codings = [];
              let location = "";
              const headers = new Headers2();
              if (Array.isArray(headersList)) {
                for (let n = 0; n < headersList.length; n += 2) {
                  const key = headersList[n + 0].toString("latin1");
                  const val = headersList[n + 1].toString("latin1");
                  if (key.toLowerCase() === "content-encoding") {
                    codings = val.toLowerCase().split(",").map((x) => x.trim());
                  } else if (key.toLowerCase() === "location") {
                    location = val;
                  }
                  headers[kHeadersList].append(key, val);
                }
              } else {
                const keys5 = Object.keys(headersList);
                for (const key of keys5) {
                  const val = headersList[key];
                  if (key.toLowerCase() === "content-encoding") {
                    codings = val.toLowerCase().split(",").map((x) => x.trim()).reverse();
                  } else if (key.toLowerCase() === "location") {
                    location = val;
                  }
                  headers[kHeadersList].append(key, val);
                }
              }
              this.body = new Readable({ read: resume2 });
              const decoders = [];
              const willFollow = request2.redirect === "follow" && location && redirectStatusSet.has(status);
              if (request2.method !== "HEAD" && request2.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) {
                for (const coding of codings) {
                  if (coding === "x-gzip" || coding === "gzip") {
                    decoders.push(zlib.createGunzip({
                      // Be less strict when decoding compressed responses, since sometimes
                      // servers send slightly invalid responses that are still accepted
                      // by common browsers.
                      // Always using Z_SYNC_FLUSH is what cURL does.
                      flush: zlib.constants.Z_SYNC_FLUSH,
                      finishFlush: zlib.constants.Z_SYNC_FLUSH
                    }));
                  } else if (coding === "deflate") {
                    decoders.push(zlib.createInflate());
                  } else if (coding === "br") {
                    decoders.push(zlib.createBrotliDecompress());
                  } else {
                    decoders.length = 0;
                    break;
                  }
                }
              }
              resolve({
                status,
                statusText,
                headersList: headers[kHeadersList],
                body: decoders.length ? pipeline(this.body, ...decoders, () => {
                }) : this.body.on("error", () => {
                })
              });
              return true;
            },
            onData(chunk4) {
              if (fetchParams.controller.dump) {
                return;
              }
              const bytes = chunk4;
              timingInfo.encodedBodySize += bytes.byteLength;
              return this.body.push(bytes);
            },
            onComplete() {
              if (this.abort) {
                fetchParams.controller.off("terminated", this.abort);
              }
              fetchParams.controller.ended = true;
              this.body.push(null);
            },
            onError(error) {
              if (this.abort) {
                fetchParams.controller.off("terminated", this.abort);
              }
              this.body?.destroy(error);
              fetchParams.controller.terminate(error);
              reject(error);
            },
            onUpgrade(status, headersList, socket) {
              if (status !== 101) {
                return;
              }
              const headers = new Headers2();
              for (let n = 0; n < headersList.length; n += 2) {
                const key = headersList[n + 0].toString("latin1");
                const val = headersList[n + 1].toString("latin1");
                headers[kHeadersList].append(key, val);
              }
              resolve({
                status,
                statusText: STATUS_CODES[status],
                headersList: headers[kHeadersList],
                socket
              });
              return true;
            }
          }
        ));
      }
    }
    module2.exports = {
      fetch,
      Fetch,
      fetching,
      finalizeAndReportTiming
    };
  }
});

// node_modules/undici/lib/fileapi/symbols.js
var require_symbols3 = __commonJS({
  "node_modules/undici/lib/fileapi/symbols.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      kState: Symbol("FileReader state"),
      kResult: Symbol("FileReader result"),
      kError: Symbol("FileReader error"),
      kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
      kEvents: Symbol("FileReader events"),
      kAborted: Symbol("FileReader aborted")
    };
  }
});

// node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS({
  "node_modules/undici/lib/fileapi/progressevent.js"(exports2, module2) {
    "use strict";
    var { webidl } = require_webidl();
    var kState = Symbol("ProgressEvent state");
    var ProgressEvent = class _ProgressEvent extends Event {
      constructor(type, eventInitDict = {}) {
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});
        super(type, eventInitDict);
        this[kState] = {
          lengthComputable: eventInitDict.lengthComputable,
          loaded: eventInitDict.loaded,
          total: eventInitDict.total
        };
      }
      get lengthComputable() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].lengthComputable;
      }
      get loaded() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].loaded;
      }
      get total() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].total;
      }
    };
    webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
      {
        key: "lengthComputable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "loaded",
        converter: webidl.converters["unsigned long long"],
        defaultValue: 0
      },
      {
        key: "total",
        converter: webidl.converters["unsigned long long"],
        defaultValue: 0
      },
      {
        key: "bubbles",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "cancelable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "composed",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ]);
    module2.exports = {
      ProgressEvent
    };
  }
});

// node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS({
  "node_modules/undici/lib/fileapi/encoding.js"(exports2, module2) {
    "use strict";
    function getEncoding(label) {
      if (!label) {
        return "failure";
      }
      switch (label.trim().toLowerCase()) {
        case "unicode-1-1-utf-8":
        case "unicode11utf8":
        case "unicode20utf8":
        case "utf-8":
        case "utf8":
        case "x-unicode20utf8":
          return "UTF-8";
        case "866":
        case "cp866":
        case "csibm866":
        case "ibm866":
          return "IBM866";
        case "csisolatin2":
        case "iso-8859-2":
        case "iso-ir-101":
        case "iso8859-2":
        case "iso88592":
        case "iso_8859-2":
        case "iso_8859-2:1987":
        case "l2":
        case "latin2":
          return "ISO-8859-2";
        case "csisolatin3":
        case "iso-8859-3":
        case "iso-ir-109":
        case "iso8859-3":
        case "iso88593":
        case "iso_8859-3":
        case "iso_8859-3:1988":
        case "l3":
        case "latin3":
          return "ISO-8859-3";
        case "csisolatin4":
        case "iso-8859-4":
        case "iso-ir-110":
        case "iso8859-4":
        case "iso88594":
        case "iso_8859-4":
        case "iso_8859-4:1988":
        case "l4":
        case "latin4":
          return "ISO-8859-4";
        case "csisolatincyrillic":
        case "cyrillic":
        case "iso-8859-5":
        case "iso-ir-144":
        case "iso8859-5":
        case "iso88595":
        case "iso_8859-5":
        case "iso_8859-5:1988":
          return "ISO-8859-5";
        case "arabic":
        case "asmo-708":
        case "csiso88596e":
        case "csiso88596i":
        case "csisolatinarabic":
        case "ecma-114":
        case "iso-8859-6":
        case "iso-8859-6-e":
        case "iso-8859-6-i":
        case "iso-ir-127":
        case "iso8859-6":
        case "iso88596":
        case "iso_8859-6":
        case "iso_8859-6:1987":
          return "ISO-8859-6";
        case "csisolatingreek":
        case "ecma-118":
        case "elot_928":
        case "greek":
        case "greek8":
        case "iso-8859-7":
        case "iso-ir-126":
        case "iso8859-7":
        case "iso88597":
        case "iso_8859-7":
        case "iso_8859-7:1987":
        case "sun_eu_greek":
          return "ISO-8859-7";
        case "csiso88598e":
        case "csisolatinhebrew":
        case "hebrew":
        case "iso-8859-8":
        case "iso-8859-8-e":
        case "iso-ir-138":
        case "iso8859-8":
        case "iso88598":
        case "iso_8859-8":
        case "iso_8859-8:1988":
        case "visual":
          return "ISO-8859-8";
        case "csiso88598i":
        case "iso-8859-8-i":
        case "logical":
          return "ISO-8859-8-I";
        case "csisolatin6":
        case "iso-8859-10":
        case "iso-ir-157":
        case "iso8859-10":
        case "iso885910":
        case "l6":
        case "latin6":
          return "ISO-8859-10";
        case "iso-8859-13":
        case "iso8859-13":
        case "iso885913":
          return "ISO-8859-13";
        case "iso-8859-14":
        case "iso8859-14":
        case "iso885914":
          return "ISO-8859-14";
        case "csisolatin9":
        case "iso-8859-15":
        case "iso8859-15":
        case "iso885915":
        case "iso_8859-15":
        case "l9":
          return "ISO-8859-15";
        case "iso-8859-16":
          return "ISO-8859-16";
        case "cskoi8r":
        case "koi":
        case "koi8":
        case "koi8-r":
        case "koi8_r":
          return "KOI8-R";
        case "koi8-ru":
        case "koi8-u":
          return "KOI8-U";
        case "csmacintosh":
        case "mac":
        case "macintosh":
        case "x-mac-roman":
          return "macintosh";
        case "iso-8859-11":
        case "iso8859-11":
        case "iso885911":
        case "tis-620":
        case "windows-874":
          return "windows-874";
        case "cp1250":
        case "windows-1250":
        case "x-cp1250":
          return "windows-1250";
        case "cp1251":
        case "windows-1251":
        case "x-cp1251":
          return "windows-1251";
        case "ansi_x3.4-1968":
        case "ascii":
        case "cp1252":
        case "cp819":
        case "csisolatin1":
        case "ibm819":
        case "iso-8859-1":
        case "iso-ir-100":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "iso_8859-1:1987":
        case "l1":
        case "latin1":
        case "us-ascii":
        case "windows-1252":
        case "x-cp1252":
          return "windows-1252";
        case "cp1253":
        case "windows-1253":
        case "x-cp1253":
          return "windows-1253";
        case "cp1254":
        case "csisolatin5":
        case "iso-8859-9":
        case "iso-ir-148":
        case "iso8859-9":
        case "iso88599":
        case "iso_8859-9":
        case "iso_8859-9:1989":
        case "l5":
        case "latin5":
        case "windows-1254":
        case "x-cp1254":
          return "windows-1254";
        case "cp1255":
        case "windows-1255":
        case "x-cp1255":
          return "windows-1255";
        case "cp1256":
        case "windows-1256":
        case "x-cp1256":
          return "windows-1256";
        case "cp1257":
        case "windows-1257":
        case "x-cp1257":
          return "windows-1257";
        case "cp1258":
        case "windows-1258":
        case "x-cp1258":
          return "windows-1258";
        case "x-mac-cyrillic":
        case "x-mac-ukrainian":
          return "x-mac-cyrillic";
        case "chinese":
        case "csgb2312":
        case "csiso58gb231280":
        case "gb2312":
        case "gb_2312":
        case "gb_2312-80":
        case "gbk":
        case "iso-ir-58":
        case "x-gbk":
          return "GBK";
        case "gb18030":
          return "gb18030";
        case "big5":
        case "big5-hkscs":
        case "cn-big5":
        case "csbig5":
        case "x-x-big5":
          return "Big5";
        case "cseucpkdfmtjapanese":
        case "euc-jp":
        case "x-euc-jp":
          return "EUC-JP";
        case "csiso2022jp":
        case "iso-2022-jp":
          return "ISO-2022-JP";
        case "csshiftjis":
        case "ms932":
        case "ms_kanji":
        case "shift-jis":
        case "shift_jis":
        case "sjis":
        case "windows-31j":
        case "x-sjis":
          return "Shift_JIS";
        case "cseuckr":
        case "csksc56011987":
        case "euc-kr":
        case "iso-ir-149":
        case "korean":
        case "ks_c_5601-1987":
        case "ks_c_5601-1989":
        case "ksc5601":
        case "ksc_5601":
        case "windows-949":
          return "EUC-KR";
        case "csiso2022kr":
        case "hz-gb-2312":
        case "iso-2022-cn":
        case "iso-2022-cn-ext":
        case "iso-2022-kr":
        case "replacement":
          return "replacement";
        case "unicodefffe":
        case "utf-16be":
          return "UTF-16BE";
        case "csunicode":
        case "iso-10646-ucs-2":
        case "ucs-2":
        case "unicode":
        case "unicodefeff":
        case "utf-16":
        case "utf-16le":
          return "UTF-16LE";
        case "x-user-defined":
          return "x-user-defined";
        default:
          return "failure";
      }
    }
    module2.exports = {
      getEncoding
    };
  }
});

// node_modules/undici/lib/fileapi/util.js
var require_util4 = __commonJS({
  "node_modules/undici/lib/fileapi/util.js"(exports2, module2) {
    "use strict";
    var {
      kState,
      kError,
      kResult,
      kAborted,
      kLastProgressEventFired
    } = require_symbols3();
    var { ProgressEvent } = require_progressevent();
    var { getEncoding } = require_encoding();
    var { DOMException: DOMException2 } = require_constants2();
    var { serializeAMimeType, parseMIMEType } = require_dataURL();
    var { types } = require("util");
    var { StringDecoder } = require("string_decoder");
    var { btoa } = require("buffer");
    var staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    };
    function readOperation(fr, blob, type, encodingName) {
      if (fr[kState] === "loading") {
        throw new DOMException2("Invalid state", "InvalidStateError");
      }
      fr[kState] = "loading";
      fr[kResult] = null;
      fr[kError] = null;
      const stream = blob.stream();
      const reader = stream.getReader();
      const bytes = [];
      let chunkPromise = reader.read();
      let isFirstChunk = true;
      (async () => {
        while (!fr[kAborted]) {
          try {
            const { done: done7, value: value3 } = await chunkPromise;
            if (isFirstChunk && !fr[kAborted]) {
              queueMicrotask(() => {
                fireAProgressEvent("loadstart", fr);
              });
            }
            isFirstChunk = false;
            if (!done7 && types.isUint8Array(value3)) {
              bytes.push(value3);
              if ((fr[kLastProgressEventFired] === void 0 || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {
                fr[kLastProgressEventFired] = Date.now();
                queueMicrotask(() => {
                  fireAProgressEvent("progress", fr);
                });
              }
              chunkPromise = reader.read();
            } else if (done7) {
              queueMicrotask(() => {
                fr[kState] = "done";
                try {
                  const result = packageData(bytes, type, blob.type, encodingName);
                  if (fr[kAborted]) {
                    return;
                  }
                  fr[kResult] = result;
                  fireAProgressEvent("load", fr);
                } catch (error) {
                  fr[kError] = error;
                  fireAProgressEvent("error", fr);
                }
                if (fr[kState] !== "loading") {
                  fireAProgressEvent("loadend", fr);
                }
              });
              break;
            }
          } catch (error) {
            if (fr[kAborted]) {
              return;
            }
            queueMicrotask(() => {
              fr[kState] = "done";
              fr[kError] = error;
              fireAProgressEvent("error", fr);
              if (fr[kState] !== "loading") {
                fireAProgressEvent("loadend", fr);
              }
            });
            break;
          }
        }
      })();
    }
    function fireAProgressEvent(e, reader) {
      const event = new ProgressEvent(e, {
        bubbles: false,
        cancelable: false
      });
      reader.dispatchEvent(event);
    }
    function packageData(bytes, type, mimeType, encodingName) {
      switch (type) {
        case "DataURL": {
          let dataURL = "data:";
          const parsed = parseMIMEType(mimeType || "application/octet-stream");
          if (parsed !== "failure") {
            dataURL += serializeAMimeType(parsed);
          }
          dataURL += ";base64,";
          const decoder = new StringDecoder("latin1");
          for (const chunk4 of bytes) {
            dataURL += btoa(decoder.write(chunk4));
          }
          dataURL += btoa(decoder.end());
          return dataURL;
        }
        case "Text": {
          let encoding = "failure";
          if (encodingName) {
            encoding = getEncoding(encodingName);
          }
          if (encoding === "failure" && mimeType) {
            const type2 = parseMIMEType(mimeType);
            if (type2 !== "failure") {
              encoding = getEncoding(type2.parameters.get("charset"));
            }
          }
          if (encoding === "failure") {
            encoding = "UTF-8";
          }
          return decode2(bytes, encoding);
        }
        case "ArrayBuffer": {
          const sequence = combineByteSequences(bytes);
          return sequence.buffer;
        }
        case "BinaryString": {
          let binaryString = "";
          const decoder = new StringDecoder("latin1");
          for (const chunk4 of bytes) {
            binaryString += decoder.write(chunk4);
          }
          binaryString += decoder.end();
          return binaryString;
        }
      }
    }
    function decode2(ioQueue, encoding) {
      const bytes = combineByteSequences(ioQueue);
      const BOMEncoding = BOMSniffing(bytes);
      let slice = 0;
      if (BOMEncoding !== null) {
        encoding = BOMEncoding;
        slice = BOMEncoding === "UTF-8" ? 3 : 2;
      }
      const sliced = bytes.slice(slice);
      return new TextDecoder(encoding).decode(sliced);
    }
    function BOMSniffing(ioQueue) {
      const [a, b, c] = ioQueue;
      if (a === 239 && b === 187 && c === 191) {
        return "UTF-8";
      } else if (a === 254 && b === 255) {
        return "UTF-16BE";
      } else if (a === 255 && b === 254) {
        return "UTF-16LE";
      }
      return null;
    }
    function combineByteSequences(sequences) {
      const size11 = sequences.reduce((a, b) => {
        return a + b.byteLength;
      }, 0);
      let offset = 0;
      return sequences.reduce((a, b) => {
        a.set(b, offset);
        offset += b.byteLength;
        return a;
      }, new Uint8Array(size11));
    }
    module2.exports = {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    };
  }
});

// node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS({
  "node_modules/undici/lib/fileapi/filereader.js"(exports2, module2) {
    "use strict";
    var {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    } = require_util4();
    var {
      kState,
      kError,
      kResult,
      kEvents,
      kAborted
    } = require_symbols3();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var FileReader = class _FileReader extends EventTarget {
      constructor() {
        super();
        this[kState] = "empty";
        this[kResult] = null;
        this[kError] = null;
        this[kEvents] = {
          loadend: null,
          error: null,
          abort: null,
          load: null,
          progress: null,
          loadstart: null
        };
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
       * @param {import('buffer').Blob} blob
       */
      readAsArrayBuffer(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "ArrayBuffer");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#readAsBinaryString
       * @param {import('buffer').Blob} blob
       */
      readAsBinaryString(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "BinaryString");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#readAsDataText
       * @param {import('buffer').Blob} blob
       * @param {string?} encoding
       */
      readAsText(blob, encoding = void 0) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
        blob = webidl.converters.Blob(blob, { strict: false });
        if (encoding !== void 0) {
          encoding = webidl.converters.DOMString(encoding);
        }
        readOperation(this, blob, "Text", encoding);
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
       * @param {import('buffer').Blob} blob
       */
      readAsDataURL(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "DataURL");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-abort
       */
      abort() {
        if (this[kState] === "empty" || this[kState] === "done") {
          this[kResult] = null;
          return;
        }
        if (this[kState] === "loading") {
          this[kState] = "done";
          this[kResult] = null;
        }
        this[kAborted] = true;
        fireAProgressEvent("abort", this);
        if (this[kState] !== "loading") {
          fireAProgressEvent("loadend", this);
        }
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
       */
      get readyState() {
        webidl.brandCheck(this, _FileReader);
        switch (this[kState]) {
          case "empty":
            return this.EMPTY;
          case "loading":
            return this.LOADING;
          case "done":
            return this.DONE;
        }
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-result
       */
      get result() {
        webidl.brandCheck(this, _FileReader);
        return this[kResult];
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-error
       */
      get error() {
        webidl.brandCheck(this, _FileReader);
        return this[kError];
      }
      get onloadend() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].loadend;
      }
      set onloadend(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].loadend) {
          this.removeEventListener("loadend", this[kEvents].loadend);
        }
        if (typeof fn === "function") {
          this[kEvents].loadend = fn;
          this.addEventListener("loadend", fn);
        } else {
          this[kEvents].loadend = null;
        }
      }
      get onerror() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].error;
      }
      set onerror(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].error) {
          this.removeEventListener("error", this[kEvents].error);
        }
        if (typeof fn === "function") {
          this[kEvents].error = fn;
          this.addEventListener("error", fn);
        } else {
          this[kEvents].error = null;
        }
      }
      get onloadstart() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].loadstart;
      }
      set onloadstart(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].loadstart) {
          this.removeEventListener("loadstart", this[kEvents].loadstart);
        }
        if (typeof fn === "function") {
          this[kEvents].loadstart = fn;
          this.addEventListener("loadstart", fn);
        } else {
          this[kEvents].loadstart = null;
        }
      }
      get onprogress() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].progress;
      }
      set onprogress(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].progress) {
          this.removeEventListener("progress", this[kEvents].progress);
        }
        if (typeof fn === "function") {
          this[kEvents].progress = fn;
          this.addEventListener("progress", fn);
        } else {
          this[kEvents].progress = null;
        }
      }
      get onload() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].load;
      }
      set onload(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].load) {
          this.removeEventListener("load", this[kEvents].load);
        }
        if (typeof fn === "function") {
          this[kEvents].load = fn;
          this.addEventListener("load", fn);
        } else {
          this[kEvents].load = null;
        }
      }
      get onabort() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].abort;
      }
      set onabort(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].abort) {
          this.removeEventListener("abort", this[kEvents].abort);
        }
        if (typeof fn === "function") {
          this[kEvents].abort = fn;
          this.addEventListener("abort", fn);
        } else {
          this[kEvents].abort = null;
        }
      }
    };
    FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
    FileReader.LOADING = FileReader.prototype.LOADING = 1;
    FileReader.DONE = FileReader.prototype.DONE = 2;
    Object.defineProperties(FileReader.prototype, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors,
      readAsArrayBuffer: kEnumerableProperty,
      readAsBinaryString: kEnumerableProperty,
      readAsText: kEnumerableProperty,
      readAsDataURL: kEnumerableProperty,
      abort: kEnumerableProperty,
      readyState: kEnumerableProperty,
      result: kEnumerableProperty,
      error: kEnumerableProperty,
      onloadstart: kEnumerableProperty,
      onprogress: kEnumerableProperty,
      onload: kEnumerableProperty,
      onabort: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onloadend: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "FileReader",
        writable: false,
        enumerable: false,
        configurable: true
      }
    });
    Object.defineProperties(FileReader, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors
    });
    module2.exports = {
      FileReader
    };
  }
});

// node_modules/undici/lib/cache/symbols.js
var require_symbols4 = __commonJS({
  "node_modules/undici/lib/cache/symbols.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      kConstruct: require_symbols().kConstruct
    };
  }
});

// node_modules/undici/lib/cache/util.js
var require_util5 = __commonJS({
  "node_modules/undici/lib/cache/util.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var { URLSerializer } = require_dataURL();
    var { isValidHeaderName } = require_util2();
    function urlEquals(A, B, excludeFragment = false) {
      const serializedA = URLSerializer(A, excludeFragment);
      const serializedB = URLSerializer(B, excludeFragment);
      return serializedA === serializedB;
    }
    function fieldValues(header) {
      assert(header !== null);
      const values3 = [];
      for (let value3 of header.split(",")) {
        value3 = value3.trim();
        if (!value3.length) {
          continue;
        } else if (!isValidHeaderName(value3)) {
          continue;
        }
        values3.push(value3);
      }
      return values3;
    }
    module2.exports = {
      urlEquals,
      fieldValues
    };
  }
});

// node_modules/undici/lib/cache/cache.js
var require_cache = __commonJS({
  "node_modules/undici/lib/cache/cache.js"(exports2, module2) {
    "use strict";
    var { kConstruct } = require_symbols4();
    var { urlEquals, fieldValues: getFieldValues } = require_util5();
    var { kEnumerableProperty, isDisturbed } = require_util();
    var { kHeadersList } = require_symbols();
    var { webidl } = require_webidl();
    var { Response, cloneResponse } = require_response();
    var { Request } = require_request2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var { fetching } = require_fetch();
    var { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util2();
    var assert = require("assert");
    var { getGlobalDispatcher } = require_global2();
    var Cache = class _Cache {
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
       * @type {requestResponseList}
       */
      #relevantRequestResponseList;
      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor();
        }
        this.#relevantRequestResponseList = arguments[1];
      }
      async match(request2, options = {}) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
        request2 = webidl.converters.RequestInfo(request2);
        options = webidl.converters.CacheQueryOptions(options);
        const p = await this.matchAll(request2, options);
        if (p.length === 0) {
          return;
        }
        return p[0];
      }
      async matchAll(request2 = void 0, options = {}) {
        webidl.brandCheck(this, _Cache);
        if (request2 !== void 0) request2 = webidl.converters.RequestInfo(request2);
        options = webidl.converters.CacheQueryOptions(options);
        let r = null;
        if (request2 !== void 0) {
          if (request2 instanceof Request) {
            r = request2[kState];
            if (r.method !== "GET" && !options.ignoreMethod) {
              return [];
            }
          } else if (typeof request2 === "string") {
            r = new Request(request2)[kState];
          }
        }
        const responses = [];
        if (request2 === void 0) {
          for (const requestResponse of this.#relevantRequestResponseList) {
            responses.push(requestResponse[1]);
          }
        } else {
          const requestResponses = this.#queryCache(r, options);
          for (const requestResponse of requestResponses) {
            responses.push(requestResponse[1]);
          }
        }
        const responseList = [];
        for (const response of responses) {
          const responseObject = new Response(response.body?.source ?? null);
          const body = responseObject[kState].body;
          responseObject[kState] = response;
          responseObject[kState].body = body;
          responseObject[kHeaders][kHeadersList] = response.headersList;
          responseObject[kHeaders][kGuard] = "immutable";
          responseList.push(responseObject);
        }
        return Object.freeze(responseList);
      }
      async add(request2) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
        request2 = webidl.converters.RequestInfo(request2);
        const requests = [request2];
        const responseArrayPromise = this.addAll(requests);
        return await responseArrayPromise;
      }
      async addAll(requests) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
        requests = webidl.converters["sequence<RequestInfo>"](requests);
        const responsePromises = [];
        const requestList = [];
        for (const request2 of requests) {
          if (typeof request2 === "string") {
            continue;
          }
          const r = request2[kState];
          if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") {
            throw webidl.errors.exception({
              header: "Cache.addAll",
              message: "Expected http/s scheme when method is not GET."
            });
          }
        }
        const fetchControllers = [];
        for (const request2 of requests) {
          const r = new Request(request2)[kState];
          if (!urlIsHttpHttpsScheme(r.url)) {
            throw webidl.errors.exception({
              header: "Cache.addAll",
              message: "Expected http/s scheme."
            });
          }
          r.initiator = "fetch";
          r.destination = "subresource";
          requestList.push(r);
          const responsePromise = createDeferredPromise();
          fetchControllers.push(fetching({
            request: r,
            dispatcher: getGlobalDispatcher(),
            processResponse(response) {
              if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) {
                responsePromise.reject(webidl.errors.exception({
                  header: "Cache.addAll",
                  message: "Received an invalid status code or the request failed."
                }));
              } else if (response.headersList.contains("vary")) {
                const fieldValues = getFieldValues(response.headersList.get("vary"));
                for (const fieldValue of fieldValues) {
                  if (fieldValue === "*") {
                    responsePromise.reject(webidl.errors.exception({
                      header: "Cache.addAll",
                      message: "invalid vary field value"
                    }));
                    for (const controller of fetchControllers) {
                      controller.abort();
                    }
                    return;
                  }
                }
              }
            },
            processResponseEndOfBody(response) {
              if (response.aborted) {
                responsePromise.reject(new DOMException("aborted", "AbortError"));
                return;
              }
              responsePromise.resolve(response);
            }
          }));
          responsePromises.push(responsePromise.promise);
        }
        const p = Promise.all(responsePromises);
        const responses = await p;
        const operations = [];
        let index = 0;
        for (const response of responses) {
          const operation = {
            type: "put",
            // 7.3.2
            request: requestList[index],
            // 7.3.3
            response
            // 7.3.4
          };
          operations.push(operation);
          index++;
        }
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        try {
          this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(void 0);
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      async put(request2, response) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
        request2 = webidl.converters.RequestInfo(request2);
        response = webidl.converters.Response(response);
        let innerRequest = null;
        if (request2 instanceof Request) {
          innerRequest = request2[kState];
        } else {
          innerRequest = new Request(request2)[kState];
        }
        if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Expected an http/s scheme when method is not GET"
          });
        }
        const innerResponse = response[kState];
        if (innerResponse.status === 206) {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Got 206 status"
          });
        }
        if (innerResponse.headersList.contains("vary")) {
          const fieldValues = getFieldValues(innerResponse.headersList.get("vary"));
          for (const fieldValue of fieldValues) {
            if (fieldValue === "*") {
              throw webidl.errors.exception({
                header: "Cache.put",
                message: "Got * vary field value"
              });
            }
          }
        }
        if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Response body is locked or disturbed"
          });
        }
        const clonedResponse = cloneResponse(innerResponse);
        const bodyReadPromise = createDeferredPromise();
        if (innerResponse.body != null) {
          const stream = innerResponse.body.stream;
          const reader = stream.getReader();
          readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
        } else {
          bodyReadPromise.resolve(void 0);
        }
        const operations = [];
        const operation = {
          type: "put",
          // 14.
          request: innerRequest,
          // 15.
          response: clonedResponse
          // 16.
        };
        operations.push(operation);
        const bytes = await bodyReadPromise.promise;
        if (clonedResponse.body != null) {
          clonedResponse.body.source = bytes;
        }
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        try {
          this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve();
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      async delete(request2, options = {}) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
        request2 = webidl.converters.RequestInfo(request2);
        options = webidl.converters.CacheQueryOptions(options);
        let r = null;
        if (request2 instanceof Request) {
          r = request2[kState];
          if (r.method !== "GET" && !options.ignoreMethod) {
            return false;
          }
        } else {
          assert(typeof request2 === "string");
          r = new Request(request2)[kState];
        }
        const operations = [];
        const operation = {
          type: "delete",
          request: r,
          options
        };
        operations.push(operation);
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        let requestResponses;
        try {
          requestResponses = this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(!!requestResponses?.length);
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
       * @param {any} request
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @returns {readonly Request[]}
       */
      async keys(request2 = void 0, options = {}) {
        webidl.brandCheck(this, _Cache);
        if (request2 !== void 0) request2 = webidl.converters.RequestInfo(request2);
        options = webidl.converters.CacheQueryOptions(options);
        let r = null;
        if (request2 !== void 0) {
          if (request2 instanceof Request) {
            r = request2[kState];
            if (r.method !== "GET" && !options.ignoreMethod) {
              return [];
            }
          } else if (typeof request2 === "string") {
            r = new Request(request2)[kState];
          }
        }
        const promise3 = createDeferredPromise();
        const requests = [];
        if (request2 === void 0) {
          for (const requestResponse of this.#relevantRequestResponseList) {
            requests.push(requestResponse[0]);
          }
        } else {
          const requestResponses = this.#queryCache(r, options);
          for (const requestResponse of requestResponses) {
            requests.push(requestResponse[0]);
          }
        }
        queueMicrotask(() => {
          const requestList = [];
          for (const request3 of requests) {
            const requestObject = new Request("https://a");
            requestObject[kState] = request3;
            requestObject[kHeaders][kHeadersList] = request3.headersList;
            requestObject[kHeaders][kGuard] = "immutable";
            requestObject[kRealm] = request3.client;
            requestList.push(requestObject);
          }
          promise3.resolve(Object.freeze(requestList));
        });
        return promise3.promise;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
       * @param {CacheBatchOperation[]} operations
       * @returns {requestResponseList}
       */
      #batchCacheOperations(operations) {
        const cache = this.#relevantRequestResponseList;
        const backupCache = [...cache];
        const addedItems = [];
        const resultList = [];
        try {
          for (const operation of operations) {
            if (operation.type !== "delete" && operation.type !== "put") {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: 'operation type does not match "delete" or "put"'
              });
            }
            if (operation.type === "delete" && operation.response != null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "delete operation should not have an associated response"
              });
            }
            if (this.#queryCache(operation.request, operation.options, addedItems).length) {
              throw new DOMException("???", "InvalidStateError");
            }
            let requestResponses;
            if (operation.type === "delete") {
              requestResponses = this.#queryCache(operation.request, operation.options);
              if (requestResponses.length === 0) {
                return [];
              }
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse);
                assert(idx !== -1);
                cache.splice(idx, 1);
              }
            } else if (operation.type === "put") {
              if (operation.response == null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "put operation should have an associated response"
                });
              }
              const r = operation.request;
              if (!urlIsHttpHttpsScheme(r.url)) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "expected http or https scheme"
                });
              }
              if (r.method !== "GET") {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "not get method"
                });
              }
              if (operation.options != null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "options must not be defined"
                });
              }
              requestResponses = this.#queryCache(operation.request);
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse);
                assert(idx !== -1);
                cache.splice(idx, 1);
              }
              cache.push([operation.request, operation.response]);
              addedItems.push([operation.request, operation.response]);
            }
            resultList.push([operation.request, operation.response]);
          }
          return resultList;
        } catch (e) {
          this.#relevantRequestResponseList.length = 0;
          this.#relevantRequestResponseList = backupCache;
          throw e;
        }
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#query-cache
       * @param {any} requestQuery
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @param {requestResponseList} targetStorage
       * @returns {requestResponseList}
       */
      #queryCache(requestQuery, options, targetStorage) {
        const resultList = [];
        const storage = targetStorage ?? this.#relevantRequestResponseList;
        for (const requestResponse of storage) {
          const [cachedRequest, cachedResponse] = requestResponse;
          if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
            resultList.push(requestResponse);
          }
        }
        return resultList;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
       * @param {any} requestQuery
       * @param {any} request
       * @param {any | null} response
       * @param {import('../../types/cache').CacheQueryOptions | undefined} options
       * @returns {boolean}
       */
      #requestMatchesCachedItem(requestQuery, request2, response = null, options) {
        const queryURL = new URL(requestQuery.url);
        const cachedURL = new URL(request2.url);
        if (options?.ignoreSearch) {
          cachedURL.search = "";
          queryURL.search = "";
        }
        if (!urlEquals(queryURL, cachedURL, true)) {
          return false;
        }
        if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) {
          return true;
        }
        const fieldValues = getFieldValues(response.headersList.get("vary"));
        for (const fieldValue of fieldValues) {
          if (fieldValue === "*") {
            return false;
          }
          const requestValue = request2.headersList.get(fieldValue);
          const queryValue = requestQuery.headersList.get(fieldValue);
          if (requestValue !== queryValue) {
            return false;
          }
        }
        return true;
      }
    };
    Object.defineProperties(Cache.prototype, {
      [Symbol.toStringTag]: {
        value: "Cache",
        configurable: true
      },
      match: kEnumerableProperty,
      matchAll: kEnumerableProperty,
      add: kEnumerableProperty,
      addAll: kEnumerableProperty,
      put: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    });
    var cacheQueryOptionConverters = [
      {
        key: "ignoreSearch",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "ignoreMethod",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "ignoreVary",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ];
    webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);
    webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
      ...cacheQueryOptionConverters,
      {
        key: "cacheName",
        converter: webidl.converters.DOMString
      }
    ]);
    webidl.converters.Response = webidl.interfaceConverter(Response);
    webidl.converters["sequence<RequestInfo>"] = webidl.sequenceConverter(
      webidl.converters.RequestInfo
    );
    module2.exports = {
      Cache
    };
  }
});

// node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage = __commonJS({
  "node_modules/undici/lib/cache/cachestorage.js"(exports2, module2) {
    "use strict";
    var { kConstruct } = require_symbols4();
    var { Cache } = require_cache();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var CacheStorage = class _CacheStorage {
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
       * @type {Map<string, import('./cache').requestResponseList}
       */
      #caches = /* @__PURE__ */ new Map();
      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor();
        }
      }
      async match(request2, options = {}) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
        request2 = webidl.converters.RequestInfo(request2);
        options = webidl.converters.MultiCacheQueryOptions(options);
        if (options.cacheName != null) {
          if (this.#caches.has(options.cacheName)) {
            const cacheList = this.#caches.get(options.cacheName);
            const cache = new Cache(kConstruct, cacheList);
            return await cache.match(request2, options);
          }
        } else {
          for (const cacheList of this.#caches.values()) {
            const cache = new Cache(kConstruct, cacheList);
            const response = await cache.match(request2, options);
            if (response !== void 0) {
              return response;
            }
          }
        }
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async has(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
        cacheName = webidl.converters.DOMString(cacheName);
        return this.#caches.has(cacheName);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
       * @param {string} cacheName
       * @returns {Promise<Cache>}
       */
      async open(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
        cacheName = webidl.converters.DOMString(cacheName);
        if (this.#caches.has(cacheName)) {
          const cache2 = this.#caches.get(cacheName);
          return new Cache(kConstruct, cache2);
        }
        const cache = [];
        this.#caches.set(cacheName, cache);
        return new Cache(kConstruct, cache);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async delete(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
        cacheName = webidl.converters.DOMString(cacheName);
        return this.#caches.delete(cacheName);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
       * @returns {string[]}
       */
      async keys() {
        webidl.brandCheck(this, _CacheStorage);
        const keys5 = this.#caches.keys();
        return [...keys5];
      }
    };
    Object.defineProperties(CacheStorage.prototype, {
      [Symbol.toStringTag]: {
        value: "CacheStorage",
        configurable: true
      },
      match: kEnumerableProperty,
      has: kEnumerableProperty,
      open: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    });
    module2.exports = {
      CacheStorage
    };
  }
});

// node_modules/undici/lib/cookies/constants.js
var require_constants4 = __commonJS({
  "node_modules/undici/lib/cookies/constants.js"(exports2, module2) {
    "use strict";
    var maxAttributeValueSize = 1024;
    var maxNameValuePairSize = 4096;
    module2.exports = {
      maxAttributeValueSize,
      maxNameValuePairSize
    };
  }
});

// node_modules/undici/lib/cookies/util.js
var require_util6 = __commonJS({
  "node_modules/undici/lib/cookies/util.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var { kHeadersList } = require_symbols();
    function isCTLExcludingHtab(value3) {
      if (value3.length === 0) {
        return false;
      }
      for (const char of value3) {
        const code = char.charCodeAt(0);
        if (code >= 0 || code <= 8 || (code >= 10 || code <= 31) || code === 127) {
          return false;
        }
      }
    }
    function validateCookieName(name) {
      for (const char of name) {
        const code = char.charCodeAt(0);
        if (code <= 32 || code > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") {
          throw new Error("Invalid cookie name");
        }
      }
    }
    function validateCookieValue(value3) {
      for (const char of value3) {
        const code = char.charCodeAt(0);
        if (code < 33 || // exclude CTLs (0-31)
        code === 34 || code === 44 || code === 59 || code === 92 || code > 126) {
          throw new Error("Invalid header value");
        }
      }
    }
    function validateCookiePath(path) {
      for (const char of path) {
        const code = char.charCodeAt(0);
        if (code < 33 || char === ";") {
          throw new Error("Invalid cookie path");
        }
      }
    }
    function validateCookieDomain(domain) {
      if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) {
        throw new Error("Invalid cookie domain");
      }
    }
    function toIMFDate(date3) {
      if (typeof date3 === "number") {
        date3 = new Date(date3);
      }
      const days2 = [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
      ];
      const months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      const dayName = days2[date3.getUTCDay()];
      const day = date3.getUTCDate().toString().padStart(2, "0");
      const month = months[date3.getUTCMonth()];
      const year = date3.getUTCFullYear();
      const hour = date3.getUTCHours().toString().padStart(2, "0");
      const minute = date3.getUTCMinutes().toString().padStart(2, "0");
      const second = date3.getUTCSeconds().toString().padStart(2, "0");
      return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
    }
    function validateCookieMaxAge(maxAge) {
      if (maxAge < 0) {
        throw new Error("Invalid cookie max-age");
      }
    }
    function stringify2(cookie) {
      if (cookie.name.length === 0) {
        return null;
      }
      validateCookieName(cookie.name);
      validateCookieValue(cookie.value);
      const out = [`${cookie.name}=${cookie.value}`];
      if (cookie.name.startsWith("__Secure-")) {
        cookie.secure = true;
      }
      if (cookie.name.startsWith("__Host-")) {
        cookie.secure = true;
        cookie.domain = null;
        cookie.path = "/";
      }
      if (cookie.secure) {
        out.push("Secure");
      }
      if (cookie.httpOnly) {
        out.push("HttpOnly");
      }
      if (typeof cookie.maxAge === "number") {
        validateCookieMaxAge(cookie.maxAge);
        out.push(`Max-Age=${cookie.maxAge}`);
      }
      if (cookie.domain) {
        validateCookieDomain(cookie.domain);
        out.push(`Domain=${cookie.domain}`);
      }
      if (cookie.path) {
        validateCookiePath(cookie.path);
        out.push(`Path=${cookie.path}`);
      }
      if (cookie.expires && cookie.expires.toString() !== "Invalid Date") {
        out.push(`Expires=${toIMFDate(cookie.expires)}`);
      }
      if (cookie.sameSite) {
        out.push(`SameSite=${cookie.sameSite}`);
      }
      for (const part of cookie.unparsed) {
        if (!part.includes("=")) {
          throw new Error("Invalid unparsed");
        }
        const [key, ...value3] = part.split("=");
        out.push(`${key.trim()}=${value3.join("=")}`);
      }
      return out.join("; ");
    }
    var kHeadersListNode;
    function getHeadersList(headers) {
      if (headers[kHeadersList]) {
        return headers[kHeadersList];
      }
      if (!kHeadersListNode) {
        kHeadersListNode = Object.getOwnPropertySymbols(headers).find(
          (symbol3) => symbol3.description === "headers list"
        );
        assert(kHeadersListNode, "Headers cannot be parsed");
      }
      const headersList = headers[kHeadersListNode];
      assert(headersList);
      return headersList;
    }
    module2.exports = {
      isCTLExcludingHtab,
      stringify: stringify2,
      getHeadersList
    };
  }
});

// node_modules/undici/lib/cookies/parse.js
var require_parse = __commonJS({
  "node_modules/undici/lib/cookies/parse.js"(exports2, module2) {
    "use strict";
    var { maxNameValuePairSize, maxAttributeValueSize } = require_constants4();
    var { isCTLExcludingHtab } = require_util6();
    var { collectASequenceOfCodePointsFast } = require_dataURL();
    var assert = require("assert");
    function parseSetCookie(header) {
      if (isCTLExcludingHtab(header)) {
        return null;
      }
      let nameValuePair = "";
      let unparsedAttributes = "";
      let name = "";
      let value3 = "";
      if (header.includes(";")) {
        const position = { position: 0 };
        nameValuePair = collectASequenceOfCodePointsFast(";", header, position);
        unparsedAttributes = header.slice(position.position);
      } else {
        nameValuePair = header;
      }
      if (!nameValuePair.includes("=")) {
        value3 = nameValuePair;
      } else {
        const position = { position: 0 };
        name = collectASequenceOfCodePointsFast(
          "=",
          nameValuePair,
          position
        );
        value3 = nameValuePair.slice(position.position + 1);
      }
      name = name.trim();
      value3 = value3.trim();
      if (name.length + value3.length > maxNameValuePairSize) {
        return null;
      }
      return {
        name,
        value: value3,
        ...parseUnparsedAttributes(unparsedAttributes)
      };
    }
    function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
      if (unparsedAttributes.length === 0) {
        return cookieAttributeList;
      }
      assert(unparsedAttributes[0] === ";");
      unparsedAttributes = unparsedAttributes.slice(1);
      let cookieAv = "";
      if (unparsedAttributes.includes(";")) {
        cookieAv = collectASequenceOfCodePointsFast(
          ";",
          unparsedAttributes,
          { position: 0 }
        );
        unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
      } else {
        cookieAv = unparsedAttributes;
        unparsedAttributes = "";
      }
      let attributeName = "";
      let attributeValue = "";
      if (cookieAv.includes("=")) {
        const position = { position: 0 };
        attributeName = collectASequenceOfCodePointsFast(
          "=",
          cookieAv,
          position
        );
        attributeValue = cookieAv.slice(position.position + 1);
      } else {
        attributeName = cookieAv;
      }
      attributeName = attributeName.trim();
      attributeValue = attributeValue.trim();
      if (attributeValue.length > maxAttributeValueSize) {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      const attributeNameLowercase = attributeName.toLowerCase();
      if (attributeNameLowercase === "expires") {
        const expiryTime = new Date(attributeValue);
        cookieAttributeList.expires = expiryTime;
      } else if (attributeNameLowercase === "max-age") {
        const charCode = attributeValue.charCodeAt(0);
        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") {
          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        }
        if (!/^\d+$/.test(attributeValue)) {
          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        }
        const deltaSeconds = Number(attributeValue);
        cookieAttributeList.maxAge = deltaSeconds;
      } else if (attributeNameLowercase === "domain") {
        let cookieDomain = attributeValue;
        if (cookieDomain[0] === ".") {
          cookieDomain = cookieDomain.slice(1);
        }
        cookieDomain = cookieDomain.toLowerCase();
        cookieAttributeList.domain = cookieDomain;
      } else if (attributeNameLowercase === "path") {
        let cookiePath = "";
        if (attributeValue.length === 0 || attributeValue[0] !== "/") {
          cookiePath = "/";
        } else {
          cookiePath = attributeValue;
        }
        cookieAttributeList.path = cookiePath;
      } else if (attributeNameLowercase === "secure") {
        cookieAttributeList.secure = true;
      } else if (attributeNameLowercase === "httponly") {
        cookieAttributeList.httpOnly = true;
      } else if (attributeNameLowercase === "samesite") {
        let enforcement = "Default";
        const attributeValueLowercase = attributeValue.toLowerCase();
        if (attributeValueLowercase.includes("none")) {
          enforcement = "None";
        }
        if (attributeValueLowercase.includes("strict")) {
          enforcement = "Strict";
        }
        if (attributeValueLowercase.includes("lax")) {
          enforcement = "Lax";
        }
        cookieAttributeList.sameSite = enforcement;
      } else {
        cookieAttributeList.unparsed ??= [];
        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
      }
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    }
    module2.exports = {
      parseSetCookie,
      parseUnparsedAttributes
    };
  }
});

// node_modules/undici/lib/cookies/index.js
var require_cookies = __commonJS({
  "node_modules/undici/lib/cookies/index.js"(exports2, module2) {
    "use strict";
    var { parseSetCookie } = require_parse();
    var { stringify: stringify2, getHeadersList } = require_util6();
    var { webidl } = require_webidl();
    var { Headers: Headers2 } = require_headers();
    function getCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: "getCookies" });
      webidl.brandCheck(headers, Headers2, { strict: false });
      const cookie = headers.get("cookie");
      const out = {};
      if (!cookie) {
        return out;
      }
      for (const piece of cookie.split(";")) {
        const [name, ...value3] = piece.split("=");
        out[name.trim()] = value3.join("=");
      }
      return out;
    }
    function deleteCookie(headers, name, attributes) {
      webidl.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
      webidl.brandCheck(headers, Headers2, { strict: false });
      name = webidl.converters.DOMString(name);
      attributes = webidl.converters.DeleteCookieAttributes(attributes);
      setCookie(headers, {
        name,
        value: "",
        expires: /* @__PURE__ */ new Date(0),
        ...attributes
      });
    }
    function getSetCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
      webidl.brandCheck(headers, Headers2, { strict: false });
      const cookies = getHeadersList(headers).cookies;
      if (!cookies) {
        return [];
      }
      return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair));
    }
    function setCookie(headers, cookie) {
      webidl.argumentLengthCheck(arguments, 2, { header: "setCookie" });
      webidl.brandCheck(headers, Headers2, { strict: false });
      cookie = webidl.converters.Cookie(cookie);
      const str = stringify2(cookie);
      if (str) {
        headers.append("Set-Cookie", stringify2(cookie));
      }
    }
    webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "path",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
      }
    ]);
    webidl.converters.Cookie = webidl.dictionaryConverter([
      {
        converter: webidl.converters.DOMString,
        key: "name"
      },
      {
        converter: webidl.converters.DOMString,
        key: "value"
      },
      {
        converter: webidl.nullableConverter((value3) => {
          if (typeof value3 === "number") {
            return webidl.converters["unsigned long long"](value3);
          }
          return new Date(value3);
        }),
        key: "expires",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters["long long"]),
        key: "maxAge",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "path",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: "secure",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: "httpOnly",
        defaultValue: null
      },
      {
        converter: webidl.converters.USVString,
        key: "sameSite",
        allowedValues: ["Strict", "Lax", "None"]
      },
      {
        converter: webidl.sequenceConverter(webidl.converters.DOMString),
        key: "unparsed",
        defaultValue: []
      }
    ]);
    module2.exports = {
      getCookies,
      deleteCookie,
      getSetCookies,
      setCookie
    };
  }
});

// node_modules/undici/lib/websocket/constants.js
var require_constants5 = __commonJS({
  "node_modules/undici/lib/websocket/constants.js"(exports2, module2) {
    "use strict";
    var uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    var staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    };
    var states = {
      CONNECTING: 0,
      OPEN: 1,
      CLOSING: 2,
      CLOSED: 3
    };
    var opcodes = {
      CONTINUATION: 0,
      TEXT: 1,
      BINARY: 2,
      CLOSE: 8,
      PING: 9,
      PONG: 10
    };
    var maxUnsigned16Bit = 2 ** 16 - 1;
    var parserStates = {
      INFO: 0,
      PAYLOADLENGTH_16: 2,
      PAYLOADLENGTH_64: 3,
      READ_DATA: 4
    };
    var emptyBuffer = Buffer.allocUnsafe(0);
    module2.exports = {
      uid,
      staticPropertyDescriptors,
      states,
      opcodes,
      maxUnsigned16Bit,
      parserStates,
      emptyBuffer
    };
  }
});

// node_modules/undici/lib/websocket/symbols.js
var require_symbols5 = __commonJS({
  "node_modules/undici/lib/websocket/symbols.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      kWebSocketURL: Symbol("url"),
      kReadyState: Symbol("ready state"),
      kController: Symbol("controller"),
      kResponse: Symbol("response"),
      kBinaryType: Symbol("binary type"),
      kSentClose: Symbol("sent close"),
      kReceivedClose: Symbol("received close"),
      kByteParser: Symbol("byte parser")
    };
  }
});

// node_modules/undici/lib/websocket/events.js
var require_events = __commonJS({
  "node_modules/undici/lib/websocket/events.js"(exports2, module2) {
    "use strict";
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var { MessagePort } = require("worker_threads");
    var MessageEvent = class _MessageEvent extends Event {
      #eventInit;
      constructor(type, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.MessageEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
      }
      get data() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.data;
      }
      get origin() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.origin;
      }
      get lastEventId() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.lastEventId;
      }
      get source() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.source;
      }
      get ports() {
        webidl.brandCheck(this, _MessageEvent);
        if (!Object.isFrozen(this.#eventInit.ports)) {
          Object.freeze(this.#eventInit.ports);
        }
        return this.#eventInit.ports;
      }
      initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
        webidl.brandCheck(this, _MessageEvent);
        webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
        return new _MessageEvent(type, {
          bubbles,
          cancelable,
          data,
          origin,
          lastEventId,
          source,
          ports
        });
      }
    };
    var CloseEvent = class _CloseEvent extends Event {
      #eventInit;
      constructor(type, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
      }
      get wasClean() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.wasClean;
      }
      get code() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.code;
      }
      get reason() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.reason;
      }
    };
    var ErrorEvent = class _ErrorEvent extends Event {
      #eventInit;
      constructor(type, eventInitDict) {
        webidl.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
        super(type, eventInitDict);
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});
        this.#eventInit = eventInitDict;
      }
      get message() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.message;
      }
      get filename() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.filename;
      }
      get lineno() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.lineno;
      }
      get colno() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.colno;
      }
      get error() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.error;
      }
    };
    Object.defineProperties(MessageEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "MessageEvent",
        configurable: true
      },
      data: kEnumerableProperty,
      origin: kEnumerableProperty,
      lastEventId: kEnumerableProperty,
      source: kEnumerableProperty,
      ports: kEnumerableProperty,
      initMessageEvent: kEnumerableProperty
    });
    Object.defineProperties(CloseEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "CloseEvent",
        configurable: true
      },
      reason: kEnumerableProperty,
      code: kEnumerableProperty,
      wasClean: kEnumerableProperty
    });
    Object.defineProperties(ErrorEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "ErrorEvent",
        configurable: true
      },
      message: kEnumerableProperty,
      filename: kEnumerableProperty,
      lineno: kEnumerableProperty,
      colno: kEnumerableProperty,
      error: kEnumerableProperty
    });
    webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);
    webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(
      webidl.converters.MessagePort
    );
    var eventInit = [
      {
        key: "bubbles",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "cancelable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "composed",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ];
    webidl.converters.MessageEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "data",
        converter: webidl.converters.any,
        defaultValue: null
      },
      {
        key: "origin",
        converter: webidl.converters.USVString,
        defaultValue: ""
      },
      {
        key: "lastEventId",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "source",
        // Node doesn't implement WindowProxy or ServiceWorker, so the only
        // valid value for source is a MessagePort.
        converter: webidl.nullableConverter(webidl.converters.MessagePort),
        defaultValue: null
      },
      {
        key: "ports",
        converter: webidl.converters["sequence<MessagePort>"],
        get defaultValue() {
          return [];
        }
      }
    ]);
    webidl.converters.CloseEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "wasClean",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "code",
        converter: webidl.converters["unsigned short"],
        defaultValue: 0
      },
      {
        key: "reason",
        converter: webidl.converters.USVString,
        defaultValue: ""
      }
    ]);
    webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "message",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "filename",
        converter: webidl.converters.USVString,
        defaultValue: ""
      },
      {
        key: "lineno",
        converter: webidl.converters["unsigned long"],
        defaultValue: 0
      },
      {
        key: "colno",
        converter: webidl.converters["unsigned long"],
        defaultValue: 0
      },
      {
        key: "error",
        converter: webidl.converters.any
      }
    ]);
    module2.exports = {
      MessageEvent,
      CloseEvent,
      ErrorEvent
    };
  }
});

// node_modules/undici/lib/websocket/util.js
var require_util7 = __commonJS({
  "node_modules/undici/lib/websocket/util.js"(exports2, module2) {
    "use strict";
    var { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require_symbols5();
    var { states, opcodes } = require_constants5();
    var { MessageEvent, ErrorEvent } = require_events();
    function isEstablished(ws) {
      return ws[kReadyState] === states.OPEN;
    }
    function isClosing(ws) {
      return ws[kReadyState] === states.CLOSING;
    }
    function isClosed(ws) {
      return ws[kReadyState] === states.CLOSED;
    }
    function fireEvent(e, target, eventConstructor = Event, eventInitDict) {
      const event = new eventConstructor(e, eventInitDict);
      target.dispatchEvent(event);
    }
    function websocketMessageReceived(ws, type, data) {
      if (ws[kReadyState] !== states.OPEN) {
        return;
      }
      let dataForEvent;
      if (type === opcodes.TEXT) {
        try {
          dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data);
        } catch {
          failWebsocketConnection(ws, "Received invalid UTF-8 in text frame.");
          return;
        }
      } else if (type === opcodes.BINARY) {
        if (ws[kBinaryType] === "blob") {
          dataForEvent = new Blob([data]);
        } else {
          dataForEvent = new Uint8Array(data).buffer;
        }
      }
      fireEvent("message", ws, MessageEvent, {
        origin: ws[kWebSocketURL].origin,
        data: dataForEvent
      });
    }
    function isValidSubprotocol(protocol) {
      if (protocol.length === 0) {
        return false;
      }
      for (const char of protocol) {
        const code = char.charCodeAt(0);
        if (code < 33 || code > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || // SP
        code === 9) {
          return false;
        }
      }
      return true;
    }
    function isValidStatusCode(code) {
      if (code >= 1e3 && code < 1015) {
        return code !== 1004 && // reserved
        code !== 1005 && // "MUST NOT be set as a status code"
        code !== 1006;
      }
      return code >= 3e3 && code <= 4999;
    }
    function failWebsocketConnection(ws, reason) {
      const { [kController]: controller, [kResponse]: response } = ws;
      controller.abort();
      if (response?.socket && !response.socket.destroyed) {
        response.socket.destroy();
      }
      if (reason) {
        fireEvent("error", ws, ErrorEvent, {
          error: new Error(reason)
        });
      }
    }
    module2.exports = {
      isEstablished,
      isClosing,
      isClosed,
      fireEvent,
      isValidSubprotocol,
      isValidStatusCode,
      failWebsocketConnection,
      websocketMessageReceived
    };
  }
});

// node_modules/undici/lib/websocket/connection.js
var require_connection = __commonJS({
  "node_modules/undici/lib/websocket/connection.js"(exports2, module2) {
    "use strict";
    var diagnosticsChannel = require("diagnostics_channel");
    var { uid, states } = require_constants5();
    var {
      kReadyState,
      kSentClose,
      kByteParser,
      kReceivedClose
    } = require_symbols5();
    var { fireEvent, failWebsocketConnection } = require_util7();
    var { CloseEvent } = require_events();
    var { makeRequest } = require_request2();
    var { fetching } = require_fetch();
    var { Headers: Headers2 } = require_headers();
    var { getGlobalDispatcher } = require_global2();
    var { kHeadersList } = require_symbols();
    var channels = {};
    channels.open = diagnosticsChannel.channel("undici:websocket:open");
    channels.close = diagnosticsChannel.channel("undici:websocket:close");
    channels.socketError = diagnosticsChannel.channel("undici:websocket:socket_error");
    var crypto4;
    try {
      crypto4 = require("crypto");
    } catch {
    }
    function establishWebSocketConnection(url, protocols, ws, onEstablish, options) {
      const requestURL = url;
      requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
      const request2 = makeRequest({
        urlList: [requestURL],
        serviceWorkers: "none",
        referrer: "no-referrer",
        mode: "websocket",
        credentials: "include",
        cache: "no-store",
        redirect: "error"
      });
      if (options.headers) {
        const headersList = new Headers2(options.headers)[kHeadersList];
        request2.headersList = headersList;
      }
      const keyValue = crypto4.randomBytes(16).toString("base64");
      request2.headersList.append("sec-websocket-key", keyValue);
      request2.headersList.append("sec-websocket-version", "13");
      for (const protocol of protocols) {
        request2.headersList.append("sec-websocket-protocol", protocol);
      }
      const permessageDeflate = "";
      const controller = fetching({
        request: request2,
        useParallelQueue: true,
        dispatcher: options.dispatcher ?? getGlobalDispatcher(),
        processResponse(response) {
          if (response.type === "error" || response.status !== 101) {
            failWebsocketConnection(ws, "Received network error or non-101 status code.");
            return;
          }
          if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
            failWebsocketConnection(ws, "Server did not respond with sent protocols.");
            return;
          }
          if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
            failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
            return;
          }
          if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
            failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
            return;
          }
          const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
          const digest = crypto4.createHash("sha1").update(keyValue + uid).digest("base64");
          if (secWSAccept !== digest) {
            failWebsocketConnection(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
            return;
          }
          const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
          if (secExtension !== null && secExtension !== permessageDeflate) {
            failWebsocketConnection(ws, "Received different permessage-deflate than the one set.");
            return;
          }
          const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
          if (secProtocol !== null && secProtocol !== request2.headersList.get("Sec-WebSocket-Protocol")) {
            failWebsocketConnection(ws, "Protocol was not set in the opening handshake.");
            return;
          }
          response.socket.on("data", onSocketData);
          response.socket.on("close", onSocketClose);
          response.socket.on("error", onSocketError);
          if (channels.open.hasSubscribers) {
            channels.open.publish({
              address: response.socket.address(),
              protocol: secProtocol,
              extensions: secExtension
            });
          }
          onEstablish(response);
        }
      });
      return controller;
    }
    function onSocketData(chunk4) {
      if (!this.ws[kByteParser].write(chunk4)) {
        this.pause();
      }
    }
    function onSocketClose() {
      const { ws } = this;
      const wasClean = ws[kSentClose] && ws[kReceivedClose];
      let code = 1005;
      let reason = "";
      const result = ws[kByteParser].closingInfo;
      if (result) {
        code = result.code ?? 1005;
        reason = result.reason;
      } else if (!ws[kSentClose]) {
        code = 1006;
      }
      ws[kReadyState] = states.CLOSED;
      fireEvent("close", ws, CloseEvent, {
        wasClean,
        code,
        reason
      });
      if (channels.close.hasSubscribers) {
        channels.close.publish({
          websocket: ws,
          code,
          reason
        });
      }
    }
    function onSocketError(error) {
      const { ws } = this;
      ws[kReadyState] = states.CLOSING;
      if (channels.socketError.hasSubscribers) {
        channels.socketError.publish(error);
      }
      this.destroy();
    }
    module2.exports = {
      establishWebSocketConnection
    };
  }
});

// node_modules/undici/lib/websocket/frame.js
var require_frame = __commonJS({
  "node_modules/undici/lib/websocket/frame.js"(exports2, module2) {
    "use strict";
    var { maxUnsigned16Bit } = require_constants5();
    var crypto4;
    try {
      crypto4 = require("crypto");
    } catch {
    }
    var WebsocketFrameSend = class {
      /**
       * @param {Buffer|undefined} data
       */
      constructor(data) {
        this.frameData = data;
        this.maskKey = crypto4.randomBytes(4);
      }
      createFrame(opcode) {
        const bodyLength = this.frameData?.byteLength ?? 0;
        let payloadLength = bodyLength;
        let offset = 6;
        if (bodyLength > maxUnsigned16Bit) {
          offset += 8;
          payloadLength = 127;
        } else if (bodyLength > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const buffer = Buffer.allocUnsafe(bodyLength + offset);
        buffer[0] = buffer[1] = 0;
        buffer[0] |= 128;
        buffer[0] = (buffer[0] & 240) + opcode;
        buffer[offset - 4] = this.maskKey[0];
        buffer[offset - 3] = this.maskKey[1];
        buffer[offset - 2] = this.maskKey[2];
        buffer[offset - 1] = this.maskKey[3];
        buffer[1] = payloadLength;
        if (payloadLength === 126) {
          buffer.writeUInt16BE(bodyLength, 2);
        } else if (payloadLength === 127) {
          buffer[2] = buffer[3] = 0;
          buffer.writeUIntBE(bodyLength, 4, 6);
        }
        buffer[1] |= 128;
        for (let i = 0; i < bodyLength; i++) {
          buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
        }
        return buffer;
      }
    };
    module2.exports = {
      WebsocketFrameSend
    };
  }
});

// node_modules/undici/lib/websocket/receiver.js
var require_receiver = __commonJS({
  "node_modules/undici/lib/websocket/receiver.js"(exports2, module2) {
    "use strict";
    var { Writable } = require("stream");
    var diagnosticsChannel = require("diagnostics_channel");
    var { parserStates, opcodes, states, emptyBuffer } = require_constants5();
    var { kReadyState, kSentClose, kResponse, kReceivedClose } = require_symbols5();
    var { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = require_util7();
    var { WebsocketFrameSend } = require_frame();
    var channels = {};
    channels.ping = diagnosticsChannel.channel("undici:websocket:ping");
    channels.pong = diagnosticsChannel.channel("undici:websocket:pong");
    var ByteParser = class extends Writable {
      #buffers = [];
      #byteOffset = 0;
      #state = parserStates.INFO;
      #info = {};
      #fragments = [];
      constructor(ws) {
        super();
        this.ws = ws;
      }
      /**
       * @param {Buffer} chunk
       * @param {() => void} callback
       */
      _write(chunk4, _, callback) {
        this.#buffers.push(chunk4);
        this.#byteOffset += chunk4.length;
        this.run(callback);
      }
      /**
       * Runs whenever a new chunk is received.
       * Callback is called whenever there are no more chunks buffering,
       * or not enough bytes are buffered to parse.
       */
      run(callback) {
        while (true) {
          if (this.#state === parserStates.INFO) {
            if (this.#byteOffset < 2) {
              return callback();
            }
            const buffer = this.consume(2);
            this.#info.fin = (buffer[0] & 128) !== 0;
            this.#info.opcode = buffer[0] & 15;
            this.#info.originalOpcode ??= this.#info.opcode;
            this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION;
            if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
              failWebsocketConnection(this.ws, "Invalid frame type was fragmented.");
              return;
            }
            const payloadLength = buffer[1] & 127;
            if (payloadLength <= 125) {
              this.#info.payloadLength = payloadLength;
              this.#state = parserStates.READ_DATA;
            } else if (payloadLength === 126) {
              this.#state = parserStates.PAYLOADLENGTH_16;
            } else if (payloadLength === 127) {
              this.#state = parserStates.PAYLOADLENGTH_64;
            }
            if (this.#info.fragmented && payloadLength > 125) {
              failWebsocketConnection(this.ws, "Fragmented frame exceeded 125 bytes.");
              return;
            } else if ((this.#info.opcode === opcodes.PING || this.#info.opcode === opcodes.PONG || this.#info.opcode === opcodes.CLOSE) && payloadLength > 125) {
              failWebsocketConnection(this.ws, "Payload length for control frame exceeded 125 bytes.");
              return;
            } else if (this.#info.opcode === opcodes.CLOSE) {
              if (payloadLength === 1) {
                failWebsocketConnection(this.ws, "Received close frame with a 1-byte body.");
                return;
              }
              const body = this.consume(payloadLength);
              this.#info.closeInfo = this.parseCloseBody(false, body);
              if (!this.ws[kSentClose]) {
                const body2 = Buffer.allocUnsafe(2);
                body2.writeUInt16BE(this.#info.closeInfo.code, 0);
                const closeFrame = new WebsocketFrameSend(body2);
                this.ws[kResponse].socket.write(
                  closeFrame.createFrame(opcodes.CLOSE),
                  (err) => {
                    if (!err) {
                      this.ws[kSentClose] = true;
                    }
                  }
                );
              }
              this.ws[kReadyState] = states.CLOSING;
              this.ws[kReceivedClose] = true;
              this.end();
              return;
            } else if (this.#info.opcode === opcodes.PING) {
              const body = this.consume(payloadLength);
              if (!this.ws[kReceivedClose]) {
                const frame = new WebsocketFrameSend(body);
                this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));
                if (channels.ping.hasSubscribers) {
                  channels.ping.publish({
                    payload: body
                  });
                }
              }
              this.#state = parserStates.INFO;
              if (this.#byteOffset > 0) {
                continue;
              } else {
                callback();
                return;
              }
            } else if (this.#info.opcode === opcodes.PONG) {
              const body = this.consume(payloadLength);
              if (channels.pong.hasSubscribers) {
                channels.pong.publish({
                  payload: body
                });
              }
              if (this.#byteOffset > 0) {
                continue;
              } else {
                callback();
                return;
              }
            }
          } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
            if (this.#byteOffset < 2) {
              return callback();
            }
            const buffer = this.consume(2);
            this.#info.payloadLength = buffer.readUInt16BE(0);
            this.#state = parserStates.READ_DATA;
          } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
            if (this.#byteOffset < 8) {
              return callback();
            }
            const buffer = this.consume(8);
            const upper = buffer.readUInt32BE(0);
            if (upper > 2 ** 31 - 1) {
              failWebsocketConnection(this.ws, "Received payload length > 2^31 bytes.");
              return;
            }
            const lower = buffer.readUInt32BE(4);
            this.#info.payloadLength = (upper << 8) + lower;
            this.#state = parserStates.READ_DATA;
          } else if (this.#state === parserStates.READ_DATA) {
            if (this.#byteOffset < this.#info.payloadLength) {
              return callback();
            } else if (this.#byteOffset >= this.#info.payloadLength) {
              const body = this.consume(this.#info.payloadLength);
              this.#fragments.push(body);
              if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes.CONTINUATION) {
                const fullMessage = Buffer.concat(this.#fragments);
                websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
                this.#info = {};
                this.#fragments.length = 0;
              }
              this.#state = parserStates.INFO;
            }
          }
          if (this.#byteOffset > 0) {
            continue;
          } else {
            callback();
            break;
          }
        }
      }
      /**
       * Take n bytes from the buffered Buffers
       * @param {number} n
       * @returns {Buffer|null}
       */
      consume(n) {
        if (n > this.#byteOffset) {
          return null;
        } else if (n === 0) {
          return emptyBuffer;
        }
        if (this.#buffers[0].length === n) {
          this.#byteOffset -= this.#buffers[0].length;
          return this.#buffers.shift();
        }
        const buffer = Buffer.allocUnsafe(n);
        let offset = 0;
        while (offset !== n) {
          const next = this.#buffers[0];
          const { length: length2 } = next;
          if (length2 + offset === n) {
            buffer.set(this.#buffers.shift(), offset);
            break;
          } else if (length2 + offset > n) {
            buffer.set(next.subarray(0, n - offset), offset);
            this.#buffers[0] = next.subarray(n - offset);
            break;
          } else {
            buffer.set(this.#buffers.shift(), offset);
            offset += next.length;
          }
        }
        this.#byteOffset -= n;
        return buffer;
      }
      parseCloseBody(onlyCode, data) {
        let code;
        if (data.length >= 2) {
          code = data.readUInt16BE(0);
        }
        if (onlyCode) {
          if (!isValidStatusCode(code)) {
            return null;
          }
          return { code };
        }
        let reason = data.subarray(2);
        if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) {
          reason = reason.subarray(3);
        }
        if (code !== void 0 && !isValidStatusCode(code)) {
          return null;
        }
        try {
          reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
        } catch {
          return null;
        }
        return { code, reason };
      }
      get closingInfo() {
        return this.#info.closeInfo;
      }
    };
    module2.exports = {
      ByteParser
    };
  }
});

// node_modules/undici/lib/websocket/websocket.js
var require_websocket = __commonJS({
  "node_modules/undici/lib/websocket/websocket.js"(exports2, module2) {
    "use strict";
    var { webidl } = require_webidl();
    var { DOMException: DOMException2 } = require_constants2();
    var { URLSerializer } = require_dataURL();
    var { getGlobalOrigin } = require_global();
    var { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require_constants5();
    var {
      kWebSocketURL,
      kReadyState,
      kController,
      kBinaryType,
      kResponse,
      kSentClose,
      kByteParser
    } = require_symbols5();
    var { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require_util7();
    var { establishWebSocketConnection } = require_connection();
    var { WebsocketFrameSend } = require_frame();
    var { ByteParser } = require_receiver();
    var { kEnumerableProperty, isBlobLike } = require_util();
    var { getGlobalDispatcher } = require_global2();
    var { types } = require("util");
    var experimentalWarned = false;
    var WebSocket = class _WebSocket extends EventTarget {
      #events = {
        open: null,
        error: null,
        close: null,
        message: null
      };
      #bufferedAmount = 0;
      #protocol = "";
      #extensions = "";
      /**
       * @param {string} url
       * @param {string|string[]} protocols
       */
      constructor(url, protocols = []) {
        super();
        webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
        if (!experimentalWarned) {
          experimentalWarned = true;
          process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
            code: "UNDICI-WS"
          });
        }
        const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
        url = webidl.converters.USVString(url);
        protocols = options.protocols;
        const baseURL = getGlobalOrigin();
        let urlRecord;
        try {
          urlRecord = new URL(url, baseURL);
        } catch (e) {
          throw new DOMException2(e, "SyntaxError");
        }
        if (urlRecord.protocol === "http:") {
          urlRecord.protocol = "ws:";
        } else if (urlRecord.protocol === "https:") {
          urlRecord.protocol = "wss:";
        }
        if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") {
          throw new DOMException2(
            `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
            "SyntaxError"
          );
        }
        if (urlRecord.hash || urlRecord.href.endsWith("#")) {
          throw new DOMException2("Got fragment", "SyntaxError");
        }
        if (typeof protocols === "string") {
          protocols = [protocols];
        }
        if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) {
          throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        }
        if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) {
          throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        }
        this[kWebSocketURL] = new URL(urlRecord.href);
        this[kController] = establishWebSocketConnection(
          urlRecord,
          protocols,
          this,
          (response) => this.#onConnectionEstablished(response),
          options
        );
        this[kReadyState] = _WebSocket.CONNECTING;
        this[kBinaryType] = "blob";
      }
      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-close
       * @param {number|undefined} code
       * @param {string|undefined} reason
       */
      close(code = void 0, reason = void 0) {
        webidl.brandCheck(this, _WebSocket);
        if (code !== void 0) {
          code = webidl.converters["unsigned short"](code, { clamp: true });
        }
        if (reason !== void 0) {
          reason = webidl.converters.USVString(reason);
        }
        if (code !== void 0) {
          if (code !== 1e3 && (code < 3e3 || code > 4999)) {
            throw new DOMException2("invalid code", "InvalidAccessError");
          }
        }
        let reasonByteLength = 0;
        if (reason !== void 0) {
          reasonByteLength = Buffer.byteLength(reason);
          if (reasonByteLength > 123) {
            throw new DOMException2(
              `Reason must be less than 123 bytes; received ${reasonByteLength}`,
              "SyntaxError"
            );
          }
        }
        if (this[kReadyState] === _WebSocket.CLOSING || this[kReadyState] === _WebSocket.CLOSED) {
        } else if (!isEstablished(this)) {
          failWebsocketConnection(this, "Connection was closed before it was established.");
          this[kReadyState] = _WebSocket.CLOSING;
        } else if (!isClosing(this)) {
          const frame = new WebsocketFrameSend();
          if (code !== void 0 && reason === void 0) {
            frame.frameData = Buffer.allocUnsafe(2);
            frame.frameData.writeUInt16BE(code, 0);
          } else if (code !== void 0 && reason !== void 0) {
            frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
            frame.frameData.writeUInt16BE(code, 0);
            frame.frameData.write(reason, 2, "utf-8");
          } else {
            frame.frameData = emptyBuffer;
          }
          const socket = this[kResponse].socket;
          socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
            if (!err) {
              this[kSentClose] = true;
            }
          });
          this[kReadyState] = states.CLOSING;
        } else {
          this[kReadyState] = _WebSocket.CLOSING;
        }
      }
      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-send
       * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
       */
      send(data) {
        webidl.brandCheck(this, _WebSocket);
        webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
        data = webidl.converters.WebSocketSendData(data);
        if (this[kReadyState] === _WebSocket.CONNECTING) {
          throw new DOMException2("Sent before connected.", "InvalidStateError");
        }
        if (!isEstablished(this) || isClosing(this)) {
          return;
        }
        const socket = this[kResponse].socket;
        if (typeof data === "string") {
          const value3 = Buffer.from(data);
          const frame = new WebsocketFrameSend(value3);
          const buffer = frame.createFrame(opcodes.TEXT);
          this.#bufferedAmount += value3.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= value3.byteLength;
          });
        } else if (types.isArrayBuffer(data)) {
          const value3 = Buffer.from(data);
          const frame = new WebsocketFrameSend(value3);
          const buffer = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += value3.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= value3.byteLength;
          });
        } else if (ArrayBuffer.isView(data)) {
          const ab = Buffer.from(data, data.byteOffset, data.byteLength);
          const frame = new WebsocketFrameSend(ab);
          const buffer = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += ab.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= ab.byteLength;
          });
        } else if (isBlobLike(data)) {
          const frame = new WebsocketFrameSend();
          data.arrayBuffer().then((ab) => {
            const value3 = Buffer.from(ab);
            frame.frameData = value3;
            const buffer = frame.createFrame(opcodes.BINARY);
            this.#bufferedAmount += value3.byteLength;
            socket.write(buffer, () => {
              this.#bufferedAmount -= value3.byteLength;
            });
          });
        }
      }
      get readyState() {
        webidl.brandCheck(this, _WebSocket);
        return this[kReadyState];
      }
      get bufferedAmount() {
        webidl.brandCheck(this, _WebSocket);
        return this.#bufferedAmount;
      }
      get url() {
        webidl.brandCheck(this, _WebSocket);
        return URLSerializer(this[kWebSocketURL]);
      }
      get extensions() {
        webidl.brandCheck(this, _WebSocket);
        return this.#extensions;
      }
      get protocol() {
        webidl.brandCheck(this, _WebSocket);
        return this.#protocol;
      }
      get onopen() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.open;
      }
      set onopen(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.open) {
          this.removeEventListener("open", this.#events.open);
        }
        if (typeof fn === "function") {
          this.#events.open = fn;
          this.addEventListener("open", fn);
        } else {
          this.#events.open = null;
        }
      }
      get onerror() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.error;
      }
      set onerror(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.error) {
          this.removeEventListener("error", this.#events.error);
        }
        if (typeof fn === "function") {
          this.#events.error = fn;
          this.addEventListener("error", fn);
        } else {
          this.#events.error = null;
        }
      }
      get onclose() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.close;
      }
      set onclose(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.close) {
          this.removeEventListener("close", this.#events.close);
        }
        if (typeof fn === "function") {
          this.#events.close = fn;
          this.addEventListener("close", fn);
        } else {
          this.#events.close = null;
        }
      }
      get onmessage() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.message;
      }
      set onmessage(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.message) {
          this.removeEventListener("message", this.#events.message);
        }
        if (typeof fn === "function") {
          this.#events.message = fn;
          this.addEventListener("message", fn);
        } else {
          this.#events.message = null;
        }
      }
      get binaryType() {
        webidl.brandCheck(this, _WebSocket);
        return this[kBinaryType];
      }
      set binaryType(type) {
        webidl.brandCheck(this, _WebSocket);
        if (type !== "blob" && type !== "arraybuffer") {
          this[kBinaryType] = "blob";
        } else {
          this[kBinaryType] = type;
        }
      }
      /**
       * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
       */
      #onConnectionEstablished(response) {
        this[kResponse] = response;
        const parser = new ByteParser(this);
        parser.on("drain", function onParserDrain() {
          this.ws[kResponse].socket.resume();
        });
        response.socket.ws = this;
        this[kByteParser] = parser;
        this[kReadyState] = states.OPEN;
        const extensions = response.headersList.get("sec-websocket-extensions");
        if (extensions !== null) {
          this.#extensions = extensions;
        }
        const protocol = response.headersList.get("sec-websocket-protocol");
        if (protocol !== null) {
          this.#protocol = protocol;
        }
        fireEvent("open", this);
      }
    };
    WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
    WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
    WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
    WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
    Object.defineProperties(WebSocket.prototype, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors,
      url: kEnumerableProperty,
      readyState: kEnumerableProperty,
      bufferedAmount: kEnumerableProperty,
      onopen: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onclose: kEnumerableProperty,
      close: kEnumerableProperty,
      onmessage: kEnumerableProperty,
      binaryType: kEnumerableProperty,
      send: kEnumerableProperty,
      extensions: kEnumerableProperty,
      protocol: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "WebSocket",
        writable: false,
        enumerable: false,
        configurable: true
      }
    });
    Object.defineProperties(WebSocket, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors
    });
    webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(
      webidl.converters.DOMString
    );
    webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
      if (webidl.util.Type(V) === "Object" && Symbol.iterator in V) {
        return webidl.converters["sequence<DOMString>"](V);
      }
      return webidl.converters.DOMString(V);
    };
    webidl.converters.WebSocketInit = webidl.dictionaryConverter([
      {
        key: "protocols",
        converter: webidl.converters["DOMString or sequence<DOMString>"],
        get defaultValue() {
          return [];
        }
      },
      {
        key: "dispatcher",
        converter: (V) => V,
        get defaultValue() {
          return getGlobalDispatcher();
        }
      },
      {
        key: "headers",
        converter: webidl.nullableConverter(webidl.converters.HeadersInit)
      }
    ]);
    webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
      if (webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) {
        return webidl.converters.WebSocketInit(V);
      }
      return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V) };
    };
    webidl.converters.WebSocketSendData = function(V) {
      if (webidl.util.Type(V) === "Object") {
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false });
        }
        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
          return webidl.converters.BufferSource(V);
        }
      }
      return webidl.converters.USVString(V);
    };
    module2.exports = {
      WebSocket
    };
  }
});

// node_modules/undici/index.js
var require_undici = __commonJS({
  "node_modules/undici/index.js"(exports2, module2) {
    "use strict";
    var Client = require_client();
    var Dispatcher = require_dispatcher();
    var errors = require_errors();
    var Pool = require_pool();
    var BalancedPool = require_balanced_pool();
    var Agent = require_agent();
    var util = require_util();
    var { InvalidArgumentError } = errors;
    var api = require_api();
    var buildConnector = require_connect();
    var MockClient = require_mock_client();
    var MockAgent = require_mock_agent();
    var MockPool = require_mock_pool();
    var mockErrors = require_mock_errors();
    var ProxyAgent = require_proxy_agent();
    var RetryHandler = require_RetryHandler();
    var { getGlobalDispatcher, setGlobalDispatcher } = require_global2();
    var DecoratorHandler = require_DecoratorHandler();
    var RedirectHandler = require_RedirectHandler();
    var createRedirectInterceptor = require_redirectInterceptor();
    var hasCrypto;
    try {
      require("crypto");
      hasCrypto = true;
    } catch {
      hasCrypto = false;
    }
    Object.assign(Dispatcher.prototype, api);
    module2.exports.Dispatcher = Dispatcher;
    module2.exports.Client = Client;
    module2.exports.Pool = Pool;
    module2.exports.BalancedPool = BalancedPool;
    module2.exports.Agent = Agent;
    module2.exports.ProxyAgent = ProxyAgent;
    module2.exports.RetryHandler = RetryHandler;
    module2.exports.DecoratorHandler = DecoratorHandler;
    module2.exports.RedirectHandler = RedirectHandler;
    module2.exports.createRedirectInterceptor = createRedirectInterceptor;
    module2.exports.buildConnector = buildConnector;
    module2.exports.errors = errors;
    function makeDispatcher(fn) {
      return (url, opts, handler) => {
        if (typeof opts === "function") {
          handler = opts;
          opts = null;
        }
        if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) {
          throw new InvalidArgumentError("invalid url");
        }
        if (opts != null && typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (opts && opts.path != null) {
          if (typeof opts.path !== "string") {
            throw new InvalidArgumentError("invalid opts.path");
          }
          let path = opts.path;
          if (!opts.path.startsWith("/")) {
            path = `/${path}`;
          }
          url = new URL(util.parseOrigin(url).origin + path);
        } else {
          if (!opts) {
            opts = typeof url === "object" ? url : {};
          }
          url = util.parseURL(url);
        }
        const { agent, dispatcher = getGlobalDispatcher() } = opts;
        if (agent) {
          throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
        }
        return fn.call(dispatcher, {
          ...opts,
          origin: url.origin,
          path: url.search ? `${url.pathname}${url.search}` : url.pathname,
          method: opts.method || (opts.body ? "PUT" : "GET")
        }, handler);
      };
    }
    module2.exports.setGlobalDispatcher = setGlobalDispatcher;
    module2.exports.getGlobalDispatcher = getGlobalDispatcher;
    if (util.nodeMajor > 16 || util.nodeMajor === 16 && util.nodeMinor >= 8) {
      let fetchImpl = null;
      module2.exports.fetch = async function fetch(resource) {
        if (!fetchImpl) {
          fetchImpl = require_fetch().fetch;
        }
        try {
          return await fetchImpl(...arguments);
        } catch (err) {
          if (typeof err === "object") {
            Error.captureStackTrace(err, this);
          }
          throw err;
        }
      };
      module2.exports.Headers = require_headers().Headers;
      module2.exports.Response = require_response().Response;
      module2.exports.Request = require_request2().Request;
      module2.exports.FormData = require_formdata().FormData;
      module2.exports.File = require_file().File;
      module2.exports.FileReader = require_filereader().FileReader;
      const { setGlobalOrigin, getGlobalOrigin } = require_global();
      module2.exports.setGlobalOrigin = setGlobalOrigin;
      module2.exports.getGlobalOrigin = getGlobalOrigin;
      const { CacheStorage } = require_cachestorage();
      const { kConstruct } = require_symbols4();
      module2.exports.caches = new CacheStorage(kConstruct);
    }
    if (util.nodeMajor >= 16) {
      const { deleteCookie, getCookies, getSetCookies, setCookie } = require_cookies();
      module2.exports.deleteCookie = deleteCookie;
      module2.exports.getCookies = getCookies;
      module2.exports.getSetCookies = getSetCookies;
      module2.exports.setCookie = setCookie;
      const { parseMIMEType, serializeAMimeType } = require_dataURL();
      module2.exports.parseMIMEType = parseMIMEType;
      module2.exports.serializeAMimeType = serializeAMimeType;
    }
    if (util.nodeMajor >= 18 && hasCrypto) {
      const { WebSocket } = require_websocket();
      module2.exports.WebSocket = WebSocket;
    }
    module2.exports.request = makeDispatcher(api.request);
    module2.exports.stream = makeDispatcher(api.stream);
    module2.exports.pipeline = makeDispatcher(api.pipeline);
    module2.exports.connect = makeDispatcher(api.connect);
    module2.exports.upgrade = makeDispatcher(api.upgrade);
    module2.exports.MockClient = MockClient;
    module2.exports.MockPool = MockPool;
    module2.exports.MockAgent = MockAgent;
    module2.exports.mockErrors = mockErrors;
  }
});

// node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS({
  "node_modules/@actions/http-client/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value3) {
        return value3 instanceof P ? value3 : new P(function(resolve) {
          resolve(value3);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value3) {
          try {
            step4(generator.next(value3));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value3) {
          try {
            step4(generator["throw"](value3));
          } catch (e) {
            reject(e);
          }
        }
        function step4(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step4((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpClient = exports2.isHttps = exports2.HttpClientResponse = exports2.HttpClientError = exports2.getProxyUrl = exports2.MediaTypes = exports2.Headers = exports2.HttpCodes = void 0;
    var http = __importStar(require("http"));
    var https = __importStar(require("https"));
    var pm = __importStar(require_proxy());
    var tunnel = __importStar(require_tunnel2());
    var undici_1 = require_undici();
    var HttpCodes;
    (function(HttpCodes2) {
      HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
      HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
      HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
      HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
      HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
      HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
      HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
      HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
      HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
      HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
      HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
      HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
      HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
      HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
      HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
      HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
      HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
      HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
      HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
      HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
      HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
      HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
      HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
      HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
      HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
      HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
      HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
    })(HttpCodes || (exports2.HttpCodes = HttpCodes = {}));
    var Headers2;
    (function(Headers3) {
      Headers3["Accept"] = "accept";
      Headers3["ContentType"] = "content-type";
    })(Headers2 || (exports2.Headers = Headers2 = {}));
    var MediaTypes;
    (function(MediaTypes2) {
      MediaTypes2["ApplicationJson"] = "application/json";
    })(MediaTypes || (exports2.MediaTypes = MediaTypes = {}));
    function getProxyUrl(serverUrl) {
      const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
      return proxyUrl ? proxyUrl.href : "";
    }
    exports2.getProxyUrl = getProxyUrl;
    var HttpRedirectCodes = [
      HttpCodes.MovedPermanently,
      HttpCodes.ResourceMoved,
      HttpCodes.SeeOther,
      HttpCodes.TemporaryRedirect,
      HttpCodes.PermanentRedirect
    ];
    var HttpResponseRetryCodes = [
      HttpCodes.BadGateway,
      HttpCodes.ServiceUnavailable,
      HttpCodes.GatewayTimeout
    ];
    var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
    var ExponentialBackoffCeiling = 10;
    var ExponentialBackoffTimeSlice = 5;
    var HttpClientError = class _HttpClientError extends Error {
      constructor(message, statusCode) {
        super(message);
        this.name = "HttpClientError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, _HttpClientError.prototype);
      }
    };
    exports2.HttpClientError = HttpClientError;
    var HttpClientResponse = class {
      constructor(message) {
        this.message = message;
      }
      readBody() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            let output = Buffer.alloc(0);
            this.message.on("data", (chunk4) => {
              output = Buffer.concat([output, chunk4]);
            });
            this.message.on("end", () => {
              resolve(output.toString());
            });
          }));
        });
      }
      readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const chunks = [];
            this.message.on("data", (chunk4) => {
              chunks.push(chunk4);
            });
            this.message.on("end", () => {
              resolve(Buffer.concat(chunks));
            });
          }));
        });
      }
    };
    exports2.HttpClientResponse = HttpClientResponse;
    function isHttps(requestUrl) {
      const parsedUrl = new URL(requestUrl);
      return parsedUrl.protocol === "https:";
    }
    exports2.isHttps = isHttps;
    var HttpClient = class {
      constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError;
          }
          this._socketTimeout = requestOptions.socketTimeout;
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects;
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive;
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries;
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries;
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
        });
      }
      get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("GET", requestUrl, null, additionalHeaders || {});
        });
      }
      del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("DELETE", requestUrl, null, additionalHeaders || {});
        });
      }
      post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("POST", requestUrl, data, additionalHeaders || {});
        });
      }
      patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("PATCH", requestUrl, data, additionalHeaders || {});
        });
      }
      put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("PUT", requestUrl, data, additionalHeaders || {});
        });
      }
      head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("HEAD", requestUrl, null, additionalHeaders || {});
        });
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request(verb, requestUrl, stream, additionalHeaders);
        });
      }
      /**
       * Gets a typed object from an endpoint
       * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
       */
      getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
          const res = yield this.get(requestUrl, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.post(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.put(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.patch(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      /**
       * Makes a raw http request.
       * All other methods such as get, post, patch, and request ultimately call this.
       * Prefer get, del, post and patch
       */
      request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._disposed) {
            throw new Error("Client has already been disposed.");
          }
          const parsedUrl = new URL(requestUrl);
          let info = this._prepareRequest(verb, parsedUrl, headers);
          const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
          let numTries = 0;
          let response;
          do {
            response = yield this.requestRaw(info, data);
            if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
              let authenticationHandler;
              for (const handler of this.handlers) {
                if (handler.canHandleAuthentication(response)) {
                  authenticationHandler = handler;
                  break;
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(this, info, data);
              } else {
                return response;
              }
            }
            let redirectsRemaining = this._maxRedirects;
            while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
              const redirectUrl = response.message.headers["location"];
              if (!redirectUrl) {
                break;
              }
              const parsedRedirectUrl = new URL(redirectUrl);
              if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
                throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
              }
              yield response.readBody();
              if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                for (const header in headers) {
                  if (header.toLowerCase() === "authorization") {
                    delete headers[header];
                  }
                }
              }
              info = this._prepareRequest(verb, parsedRedirectUrl, headers);
              response = yield this.requestRaw(info, data);
              redirectsRemaining--;
            }
            if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
              return response;
            }
            numTries += 1;
            if (numTries < maxTries) {
              yield response.readBody();
              yield this._performExponentialBackoff(numTries);
            }
          } while (numTries < maxTries);
          return response;
        });
      }
      /**
       * Needs to be called if keepAlive is set to true in request options.
       */
      dispose() {
        if (this._agent) {
          this._agent.destroy();
        }
        this._disposed = true;
      }
      /**
       * Raw request.
       * @param info
       * @param data
       */
      requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function callbackForResult(err, res) {
              if (err) {
                reject(err);
              } else if (!res) {
                reject(new Error("Unknown error"));
              } else {
                resolve(res);
              }
            }
            this.requestRawWithCallback(info, data, callbackForResult);
          });
        });
      }
      /**
       * Raw request with callback.
       * @param info
       * @param data
       * @param onResult
       */
      requestRawWithCallback(info, data, onResult) {
        if (typeof data === "string") {
          if (!info.options.headers) {
            info.options.headers = {};
          }
          info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        function handleResult(err, res) {
          if (!callbackCalled) {
            callbackCalled = true;
            onResult(err, res);
          }
        }
        const req = info.httpModule.request(info.options, (msg) => {
          const res = new HttpClientResponse(msg);
          handleResult(void 0, res);
        });
        let socket;
        req.on("socket", (sock) => {
          socket = sock;
        });
        req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
          if (socket) {
            socket.end();
          }
          handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on("error", function(err) {
          handleResult(err);
        });
        if (data && typeof data === "string") {
          req.write(data, "utf8");
        }
        if (data && typeof data !== "string") {
          data.on("close", function() {
            req.end();
          });
          data.pipe(req);
        } else {
          req.end();
        }
      }
      /**
       * Gets an http agent. This function is useful when you need an http agent that handles
       * routing through a proxy server - depending upon the url and proxy environment variables.
       * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
       */
      getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
      }
      getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (!useProxy) {
          return;
        }
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
      }
      _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === "https:";
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
        info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "");
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
          info.options.headers["user-agent"] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        if (this.handlers) {
          for (const handler of this.handlers) {
            handler.prepareRequest(info.options);
          }
        }
        return info;
      }
      _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
      }
      _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
          clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
      }
      _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent;
        }
        if (!useProxy) {
          agent = this._agent;
        }
        if (agent) {
          return agent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (this.requestOptions) {
          maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        if (proxyUrl && proxyUrl.hostname) {
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
              proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
            }), { host: proxyUrl.hostname, port: proxyUrl.port })
          };
          let tunnelAgent;
          const overHttps = proxyUrl.protocol === "https:";
          if (usingSsl) {
            tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
          }
          agent = tunnelAgent(agentOptions);
          this._proxyAgent = agent;
        }
        if (!agent) {
          const options = { keepAlive: this._keepAlive, maxSockets };
          agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
          this._agent = agent;
        }
        if (usingSsl && this._ignoreSslError) {
          agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
          });
        }
        return agent;
      }
      _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent;
        if (this._keepAlive) {
          proxyAgent = this._proxyAgentDispatcher;
        }
        if (proxyAgent) {
          return proxyAgent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        proxyAgent = new undici_1.ProxyAgent(Object.assign({ uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 }, (proxyUrl.username || proxyUrl.password) && {
          token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString("base64")}`
        }));
        this._proxyAgentDispatcher = proxyAgent;
        if (usingSsl && this._ignoreSslError) {
          proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
            rejectUnauthorized: false
          });
        }
        return proxyAgent;
      }
      _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
          retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
          const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
          return new Promise((resolve) => setTimeout(() => resolve(), ms));
        });
      }
      _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const statusCode = res.message.statusCode || 0;
            const response = {
              statusCode,
              result: null,
              headers: {}
            };
            if (statusCode === HttpCodes.NotFound) {
              resolve(response);
            }
            function dateTimeDeserializer(key, value3) {
              if (typeof value3 === "string") {
                const a = new Date(value3);
                if (!isNaN(a.valueOf())) {
                  return a;
                }
              }
              return value3;
            }
            let obj;
            let contents;
            try {
              contents = yield res.readBody();
              if (contents && contents.length > 0) {
                if (options && options.deserializeDates) {
                  obj = JSON.parse(contents, dateTimeDeserializer);
                } else {
                  obj = JSON.parse(contents);
                }
                response.result = obj;
              }
              response.headers = res.message.headers;
            } catch (err) {
            }
            if (statusCode > 299) {
              let msg;
              if (obj && obj.message) {
                msg = obj.message;
              } else if (contents && contents.length > 0) {
                msg = contents;
              } else {
                msg = `Failed request: (${statusCode})`;
              }
              const err = new HttpClientError(msg, statusCode);
              err.result = response.result;
              reject(err);
            } else {
              resolve(response);
            }
          }));
        });
      }
    };
    exports2.HttpClient = HttpClient;
    var lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
  }
});

// node_modules/@actions/github/lib/internal/utils.js
var require_utils2 = __commonJS({
  "node_modules/@actions/github/lib/internal/utils.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value3) {
        return value3 instanceof P ? value3 : new P(function(resolve) {
          resolve(value3);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value3) {
          try {
            step4(generator.next(value3));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value3) {
          try {
            step4(generator["throw"](value3));
          } catch (e) {
            reject(e);
          }
        }
        function step4(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step4((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getApiBaseUrl = exports2.getProxyFetch = exports2.getProxyAgentDispatcher = exports2.getProxyAgent = exports2.getAuthString = void 0;
    var httpClient = __importStar(require_lib());
    var undici_1 = require_undici();
    function getAuthString(token, options) {
      if (!token && !options.auth) {
        throw new Error("Parameter token or opts.auth is required");
      } else if (token && options.auth) {
        throw new Error("Parameters token and opts.auth may not both be specified");
      }
      return typeof options.auth === "string" ? options.auth : `token ${token}`;
    }
    exports2.getAuthString = getAuthString;
    function getProxyAgent(destinationUrl) {
      const hc = new httpClient.HttpClient();
      return hc.getAgent(destinationUrl);
    }
    exports2.getProxyAgent = getProxyAgent;
    function getProxyAgentDispatcher(destinationUrl) {
      const hc = new httpClient.HttpClient();
      return hc.getAgentDispatcher(destinationUrl);
    }
    exports2.getProxyAgentDispatcher = getProxyAgentDispatcher;
    function getProxyFetch(destinationUrl) {
      const httpDispatcher = getProxyAgentDispatcher(destinationUrl);
      const proxyFetch = (url, opts) => __awaiter(this, void 0, void 0, function* () {
        return (0, undici_1.fetch)(url, Object.assign(Object.assign({}, opts), { dispatcher: httpDispatcher }));
      });
      return proxyFetch;
    }
    exports2.getProxyFetch = getProxyFetch;
    function getApiBaseUrl() {
      return process.env["GITHUB_API_URL"] || "https://api.github.com";
    }
    exports2.getApiBaseUrl = getApiBaseUrl;
  }
});

// node_modules/@actions/github/node_modules/universal-user-agent/dist-node/index.js
var require_dist_node = __commonJS({
  "node_modules/@actions/github/node_modules/universal-user-agent/dist-node/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function getUserAgent() {
      if (typeof navigator === "object" && "userAgent" in navigator) {
        return navigator.userAgent;
      }
      if (typeof process === "object" && process.version !== void 0) {
        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
      }
      return "<environment undetectable>";
    }
    exports2.getUserAgent = getUserAgent;
  }
});

// node_modules/@actions/github/node_modules/before-after-hook/lib/register.js
var require_register = __commonJS({
  "node_modules/@actions/github/node_modules/before-after-hook/lib/register.js"(exports2, module2) {
    module2.exports = register;
    function register(state, name, method, options) {
      if (typeof method !== "function") {
        throw new Error("method for before hook must be a function");
      }
      if (!options) {
        options = {};
      }
      if (Array.isArray(name)) {
        return name.reverse().reduce(function(callback, name2) {
          return register.bind(null, state, name2, callback, options);
        }, method)();
      }
      return Promise.resolve().then(function() {
        if (!state.registry[name]) {
          return method(options);
        }
        return state.registry[name].reduce(function(method2, registered) {
          return registered.hook.bind(null, method2, options);
        }, method)();
      });
    }
  }
});

// node_modules/@actions/github/node_modules/before-after-hook/lib/add.js
var require_add = __commonJS({
  "node_modules/@actions/github/node_modules/before-after-hook/lib/add.js"(exports2, module2) {
    module2.exports = addHook;
    function addHook(state, kind, name, hook) {
      var orig = hook;
      if (!state.registry[name]) {
        state.registry[name] = [];
      }
      if (kind === "before") {
        hook = function(method, options) {
          return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
        };
      }
      if (kind === "after") {
        hook = function(method, options) {
          var result;
          return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
            result = result_;
            return orig(result, options);
          }).then(function() {
            return result;
          });
        };
      }
      if (kind === "error") {
        hook = function(method, options) {
          return Promise.resolve().then(method.bind(null, options)).catch(function(error) {
            return orig(error, options);
          });
        };
      }
      state.registry[name].push({
        hook,
        orig
      });
    }
  }
});

// node_modules/@actions/github/node_modules/before-after-hook/lib/remove.js
var require_remove = __commonJS({
  "node_modules/@actions/github/node_modules/before-after-hook/lib/remove.js"(exports2, module2) {
    module2.exports = removeHook;
    function removeHook(state, name, method) {
      if (!state.registry[name]) {
        return;
      }
      var index = state.registry[name].map(function(registered) {
        return registered.orig;
      }).indexOf(method);
      if (index === -1) {
        return;
      }
      state.registry[name].splice(index, 1);
    }
  }
});

// node_modules/@actions/github/node_modules/before-after-hook/index.js
var require_before_after_hook = __commonJS({
  "node_modules/@actions/github/node_modules/before-after-hook/index.js"(exports2, module2) {
    var register = require_register();
    var addHook = require_add();
    var removeHook = require_remove();
    var bind4 = Function.bind;
    var bindable = bind4.bind(bind4);
    function bindApi(hook, state, name) {
      var removeHookRef = bindable(removeHook, null).apply(
        null,
        name ? [state, name] : [state]
      );
      hook.api = { remove: removeHookRef };
      hook.remove = removeHookRef;
      ["before", "error", "after", "wrap"].forEach(function(kind) {
        var args = name ? [state, kind, name] : [state, kind];
        hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);
      });
    }
    function HookSingular() {
      var singularHookName = "h";
      var singularHookState = {
        registry: {}
      };
      var singularHook = register.bind(null, singularHookState, singularHookName);
      bindApi(singularHook, singularHookState, singularHookName);
      return singularHook;
    }
    function HookCollection() {
      var state = {
        registry: {}
      };
      var hook = register.bind(null, state);
      bindApi(hook, state);
      return hook;
    }
    var collectionHookDeprecationMessageDisplayed = false;
    function Hook() {
      if (!collectionHookDeprecationMessageDisplayed) {
        console.warn(
          '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
        );
        collectionHookDeprecationMessageDisplayed = true;
      }
      return HookCollection();
    }
    Hook.Singular = HookSingular.bind();
    Hook.Collection = HookCollection.bind();
    module2.exports = Hook;
    module2.exports.Hook = Hook;
    module2.exports.Singular = Hook.Singular;
    module2.exports.Collection = Hook.Collection;
  }
});

// node_modules/@actions/github/node_modules/@octokit/endpoint/dist-node/index.js
var require_dist_node2 = __commonJS({
  "node_modules/@actions/github/node_modules/@octokit/endpoint/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all7) => {
      for (var name in all7)
        __defProp2(target, name, { get: all7[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      endpoint: () => endpoint
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_universal_user_agent = require_dist_node();
    var VERSION = "9.0.5";
    var userAgent = `octokit-endpoint.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;
    var DEFAULTS = {
      method: "GET",
      baseUrl: "https://api.github.com",
      headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": userAgent
      },
      mediaType: {
        format: ""
      }
    };
    function lowercaseKeys(object) {
      if (!object) {
        return {};
      }
      return Object.keys(object).reduce((newObj, key) => {
        newObj[key.toLowerCase()] = object[key];
        return newObj;
      }, {});
    }
    function isPlainObject(value3) {
      if (typeof value3 !== "object" || value3 === null)
        return false;
      if (Object.prototype.toString.call(value3) !== "[object Object]")
        return false;
      const proto6 = Object.getPrototypeOf(value3);
      if (proto6 === null)
        return true;
      const Ctor = Object.prototype.hasOwnProperty.call(proto6, "constructor") && proto6.constructor;
      return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value3);
    }
    function mergeDeep(defaults, options) {
      const result = Object.assign({}, defaults);
      Object.keys(options).forEach((key) => {
        if (isPlainObject(options[key])) {
          if (!(key in defaults))
            Object.assign(result, { [key]: options[key] });
          else
            result[key] = mergeDeep(defaults[key], options[key]);
        } else {
          Object.assign(result, { [key]: options[key] });
        }
      });
      return result;
    }
    function removeUndefinedProperties(obj) {
      for (const key in obj) {
        if (obj[key] === void 0) {
          delete obj[key];
        }
      }
      return obj;
    }
    function merge9(defaults, route, options) {
      if (typeof route === "string") {
        let [method, url] = route.split(" ");
        options = Object.assign(url ? { method, url } : { url: method }, options);
      } else {
        options = Object.assign({}, route);
      }
      options.headers = lowercaseKeys(options.headers);
      removeUndefinedProperties(options);
      removeUndefinedProperties(options.headers);
      const mergedOptions = mergeDeep(defaults || {}, options);
      if (options.url === "/graphql") {
        if (defaults && defaults.mediaType.previews?.length) {
          mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(
            (preview) => !mergedOptions.mediaType.previews.includes(preview)
          ).concat(mergedOptions.mediaType.previews);
        }
        mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview) => preview.replace(/-preview/, ""));
      }
      return mergedOptions;
    }
    function addQueryParameters(url, parameters) {
      const separator = /\?/.test(url) ? "&" : "?";
      const names = Object.keys(parameters);
      if (names.length === 0) {
        return url;
      }
      return url + separator + names.map((name) => {
        if (name === "q") {
          return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
        }
        return `${name}=${encodeURIComponent(parameters[name])}`;
      }).join("&");
    }
    var urlVariableRegex = /\{[^}]+\}/g;
    function removeNonChars(variableName) {
      return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
    }
    function extractUrlVariableNames(url) {
      const matches = url.match(urlVariableRegex);
      if (!matches) {
        return [];
      }
      return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
    }
    function omit3(object, keysToOmit) {
      const result = { __proto__: null };
      for (const key of Object.keys(object)) {
        if (keysToOmit.indexOf(key) === -1) {
          result[key] = object[key];
        }
      }
      return result;
    }
    function encodeReserved(str) {
      return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
        if (!/%[0-9A-Fa-f]/.test(part)) {
          part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
        }
        return part;
      }).join("");
    }
    function encodeUnreserved(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeValue(operator, value3, key) {
      value3 = operator === "+" || operator === "#" ? encodeReserved(value3) : encodeUnreserved(value3);
      if (key) {
        return encodeUnreserved(key) + "=" + value3;
      } else {
        return value3;
      }
    }
    function isDefined(value3) {
      return value3 !== void 0 && value3 !== null;
    }
    function isKeyOperator(operator) {
      return operator === ";" || operator === "&" || operator === "?";
    }
    function getValues(context5, operator, key, modifier) {
      var value3 = context5[key], result = [];
      if (isDefined(value3) && value3 !== "") {
        if (typeof value3 === "string" || typeof value3 === "number" || typeof value3 === "boolean") {
          value3 = value3.toString();
          if (modifier && modifier !== "*") {
            value3 = value3.substring(0, parseInt(modifier, 10));
          }
          result.push(
            encodeValue(operator, value3, isKeyOperator(operator) ? key : "")
          );
        } else {
          if (modifier === "*") {
            if (Array.isArray(value3)) {
              value3.filter(isDefined).forEach(function(value22) {
                result.push(
                  encodeValue(operator, value22, isKeyOperator(operator) ? key : "")
                );
              });
            } else {
              Object.keys(value3).forEach(function(k) {
                if (isDefined(value3[k])) {
                  result.push(encodeValue(operator, value3[k], k));
                }
              });
            }
          } else {
            const tmp = [];
            if (Array.isArray(value3)) {
              value3.filter(isDefined).forEach(function(value22) {
                tmp.push(encodeValue(operator, value22));
              });
            } else {
              Object.keys(value3).forEach(function(k) {
                if (isDefined(value3[k])) {
                  tmp.push(encodeUnreserved(k));
                  tmp.push(encodeValue(operator, value3[k].toString()));
                }
              });
            }
            if (isKeyOperator(operator)) {
              result.push(encodeUnreserved(key) + "=" + tmp.join(","));
            } else if (tmp.length !== 0) {
              result.push(tmp.join(","));
            }
          }
        }
      } else {
        if (operator === ";") {
          if (isDefined(value3)) {
            result.push(encodeUnreserved(key));
          }
        } else if (value3 === "" && (operator === "&" || operator === "?")) {
          result.push(encodeUnreserved(key) + "=");
        } else if (value3 === "") {
          result.push("");
        }
      }
      return result;
    }
    function parseUrl(template) {
      return {
        expand: expand2.bind(null, template)
      };
    }
    function expand2(template, context5) {
      var operators = ["+", "#", ".", "/", ";", "?", "&"];
      template = template.replace(
        /\{([^\{\}]+)\}|([^\{\}]+)/g,
        function(_, expression, literal3) {
          if (expression) {
            let operator = "";
            const values3 = [];
            if (operators.indexOf(expression.charAt(0)) !== -1) {
              operator = expression.charAt(0);
              expression = expression.substr(1);
            }
            expression.split(/,/g).forEach(function(variable) {
              var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
              values3.push(getValues(context5, operator, tmp[1], tmp[2] || tmp[3]));
            });
            if (operator && operator !== "+") {
              var separator = ",";
              if (operator === "?") {
                separator = "&";
              } else if (operator !== "#") {
                separator = operator;
              }
              return (values3.length !== 0 ? operator : "") + values3.join(separator);
            } else {
              return values3.join(",");
            }
          } else {
            return encodeReserved(literal3);
          }
        }
      );
      if (template === "/") {
        return template;
      } else {
        return template.replace(/\/$/, "");
      }
    }
    function parse2(options) {
      let method = options.method.toUpperCase();
      let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
      let headers = Object.assign({}, options.headers);
      let body;
      let parameters = omit3(options, [
        "method",
        "baseUrl",
        "url",
        "headers",
        "request",
        "mediaType"
      ]);
      const urlVariableNames = extractUrlVariableNames(url);
      url = parseUrl(url).expand(parameters);
      if (!/^http/.test(url)) {
        url = options.baseUrl + url;
      }
      const omittedParameters = Object.keys(options).filter((option5) => urlVariableNames.includes(option5)).concat("baseUrl");
      const remainingParameters = omit3(parameters, omittedParameters);
      const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
      if (!isBinaryRequest) {
        if (options.mediaType.format) {
          headers.accept = headers.accept.split(/,/).map(
            (format3) => format3.replace(
              /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
              `application/vnd$1$2.${options.mediaType.format}`
            )
          ).join(",");
        }
        if (url.endsWith("/graphql")) {
          if (options.mediaType.previews?.length) {
            const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
            headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
              const format3 = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
              return `application/vnd.github.${preview}-preview${format3}`;
            }).join(",");
          }
        }
      }
      if (["GET", "HEAD"].includes(method)) {
        url = addQueryParameters(url, remainingParameters);
      } else {
        if ("data" in remainingParameters) {
          body = remainingParameters.data;
        } else {
          if (Object.keys(remainingParameters).length) {
            body = remainingParameters;
          }
        }
      }
      if (!headers["content-type"] && typeof body !== "undefined") {
        headers["content-type"] = "application/json; charset=utf-8";
      }
      if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
        body = "";
      }
      return Object.assign(
        { method, url, headers },
        typeof body !== "undefined" ? { body } : null,
        options.request ? { request: options.request } : null
      );
    }
    function endpointWithDefaults(defaults, route, options) {
      return parse2(merge9(defaults, route, options));
    }
    function withDefaults(oldDefaults, newDefaults) {
      const DEFAULTS2 = merge9(oldDefaults, newDefaults);
      const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
      return Object.assign(endpoint2, {
        DEFAULTS: DEFAULTS2,
        defaults: withDefaults.bind(null, DEFAULTS2),
        merge: merge9.bind(null, DEFAULTS2),
        parse: parse2
      });
    }
    var endpoint = withDefaults(null, DEFAULTS);
  }
});

// node_modules/deprecation/dist-node/index.js
var require_dist_node3 = __commonJS({
  "node_modules/deprecation/dist-node/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var Deprecation = class extends Error {
      constructor(message) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "Deprecation";
      }
    };
    exports2.Deprecation = Deprecation;
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports2, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb) return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports2, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once3);
    module2.exports.strict = wrappy(onceStrict);
    once3.proto = once3(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once3(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once3(fn) {
      var f = function() {
        if (f.called) return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// node_modules/@actions/github/node_modules/@octokit/request-error/dist-node/index.js
var require_dist_node4 = __commonJS({
  "node_modules/@actions/github/node_modules/@octokit/request-error/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all7) => {
      for (var name in all7)
        __defProp2(target, name, { get: all7[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      RequestError: () => RequestError
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_deprecation = require_dist_node3();
    var import_once = __toESM2(require_once());
    var logOnceCode = (0, import_once.default)((deprecation) => console.warn(deprecation));
    var logOnceHeaders = (0, import_once.default)((deprecation) => console.warn(deprecation));
    var RequestError = class extends Error {
      constructor(message, statusCode, options) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        let headers;
        if ("headers" in options && typeof options.headers !== "undefined") {
          headers = options.headers;
        }
        if ("response" in options) {
          this.response = options.response;
          headers = options.response.headers;
        }
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) {
          requestCopy.headers = Object.assign({}, options.request.headers, {
            authorization: options.request.headers.authorization.replace(
              / .*$/,
              " [REDACTED]"
            )
          });
        }
        requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
        Object.defineProperty(this, "code", {
          get() {
            logOnceCode(
              new import_deprecation.Deprecation(
                "[@octokit/request-error] `error.code` is deprecated, use `error.status`."
              )
            );
            return statusCode;
          }
        });
        Object.defineProperty(this, "headers", {
          get() {
            logOnceHeaders(
              new import_deprecation.Deprecation(
                "[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."
              )
            );
            return headers || {};
          }
        });
      }
    };
  }
});

// node_modules/@actions/github/node_modules/@octokit/request/dist-node/index.js
var require_dist_node5 = __commonJS({
  "node_modules/@actions/github/node_modules/@octokit/request/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all7) => {
      for (var name in all7)
        __defProp2(target, name, { get: all7[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      request: () => request2
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_endpoint = require_dist_node2();
    var import_universal_user_agent = require_dist_node();
    var VERSION = "8.4.0";
    function isPlainObject(value3) {
      if (typeof value3 !== "object" || value3 === null)
        return false;
      if (Object.prototype.toString.call(value3) !== "[object Object]")
        return false;
      const proto6 = Object.getPrototypeOf(value3);
      if (proto6 === null)
        return true;
      const Ctor = Object.prototype.hasOwnProperty.call(proto6, "constructor") && proto6.constructor;
      return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value3);
    }
    var import_request_error = require_dist_node4();
    function getBufferResponse(response) {
      return response.arrayBuffer();
    }
    function fetchWrapper(requestOptions) {
      var _a, _b, _c, _d;
      const log3 = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
      const parseSuccessResponseBody = ((_a = requestOptions.request) == null ? void 0 : _a.parseSuccessResponseBody) !== false;
      if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
        requestOptions.body = JSON.stringify(requestOptions.body);
      }
      let headers = {};
      let status;
      let url;
      let { fetch } = globalThis;
      if ((_b = requestOptions.request) == null ? void 0 : _b.fetch) {
        fetch = requestOptions.request.fetch;
      }
      if (!fetch) {
        throw new Error(
          "fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing"
        );
      }
      return fetch(requestOptions.url, {
        method: requestOptions.method,
        body: requestOptions.body,
        redirect: (_c = requestOptions.request) == null ? void 0 : _c.redirect,
        headers: requestOptions.headers,
        signal: (_d = requestOptions.request) == null ? void 0 : _d.signal,
        // duplex must be set if request.body is ReadableStream or Async Iterables.
        // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.
        ...requestOptions.body && { duplex: "half" }
      }).then(async (response) => {
        url = response.url;
        status = response.status;
        for (const keyAndValue of response.headers) {
          headers[keyAndValue[0]] = keyAndValue[1];
        }
        if ("deprecation" in headers) {
          const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
          const deprecationLink = matches && matches.pop();
          log3.warn(
            `[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`
          );
        }
        if (status === 204 || status === 205) {
          return;
        }
        if (requestOptions.method === "HEAD") {
          if (status < 400) {
            return;
          }
          throw new import_request_error.RequestError(response.statusText, status, {
            response: {
              url,
              status,
              headers,
              data: void 0
            },
            request: requestOptions
          });
        }
        if (status === 304) {
          throw new import_request_error.RequestError("Not modified", status, {
            response: {
              url,
              status,
              headers,
              data: await getResponseData(response)
            },
            request: requestOptions
          });
        }
        if (status >= 400) {
          const data = await getResponseData(response);
          const error = new import_request_error.RequestError(toErrorMessage(data), status, {
            response: {
              url,
              status,
              headers,
              data
            },
            request: requestOptions
          });
          throw error;
        }
        return parseSuccessResponseBody ? await getResponseData(response) : response.body;
      }).then((data) => {
        return {
          status,
          url,
          headers,
          data
        };
      }).catch((error) => {
        if (error instanceof import_request_error.RequestError)
          throw error;
        else if (error.name === "AbortError")
          throw error;
        let message = error.message;
        if (error.name === "TypeError" && "cause" in error) {
          if (error.cause instanceof Error) {
            message = error.cause.message;
          } else if (typeof error.cause === "string") {
            message = error.cause;
          }
        }
        throw new import_request_error.RequestError(message, 500, {
          request: requestOptions
        });
      });
    }
    async function getResponseData(response) {
      const contentType = response.headers.get("content-type");
      if (/application\/json/.test(contentType)) {
        return response.json().catch(() => response.text()).catch(() => "");
      }
      if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
        return response.text();
      }
      return getBufferResponse(response);
    }
    function toErrorMessage(data) {
      if (typeof data === "string")
        return data;
      let suffix;
      if ("documentation_url" in data) {
        suffix = ` - ${data.documentation_url}`;
      } else {
        suffix = "";
      }
      if ("message" in data) {
        if (Array.isArray(data.errors)) {
          return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}${suffix}`;
        }
        return `${data.message}${suffix}`;
      }
      return `Unknown error: ${JSON.stringify(data)}`;
    }
    function withDefaults(oldEndpoint, newDefaults) {
      const endpoint2 = oldEndpoint.defaults(newDefaults);
      const newApi = function(route, parameters) {
        const endpointOptions = endpoint2.merge(route, parameters);
        if (!endpointOptions.request || !endpointOptions.request.hook) {
          return fetchWrapper(endpoint2.parse(endpointOptions));
        }
        const request22 = (route2, parameters2) => {
          return fetchWrapper(
            endpoint2.parse(endpoint2.merge(route2, parameters2))
          );
        };
        Object.assign(request22, {
          endpoint: endpoint2,
          defaults: withDefaults.bind(null, endpoint2)
        });
        return endpointOptions.request.hook(request22, endpointOptions);
      };
      return Object.assign(newApi, {
        endpoint: endpoint2,
        defaults: withDefaults.bind(null, endpoint2)
      });
    }
    var request2 = withDefaults(import_endpoint.endpoint, {
      headers: {
        "user-agent": `octokit-request.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`
      }
    });
  }
});

// node_modules/@actions/github/node_modules/@octokit/graphql/dist-node/index.js
var require_dist_node6 = __commonJS({
  "node_modules/@actions/github/node_modules/@octokit/graphql/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all7) => {
      for (var name in all7)
        __defProp2(target, name, { get: all7[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      GraphqlResponseError: () => GraphqlResponseError,
      graphql: () => graphql2,
      withCustomRequest: () => withCustomRequest
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_request3 = require_dist_node5();
    var import_universal_user_agent = require_dist_node();
    var VERSION = "7.1.0";
    var import_request22 = require_dist_node5();
    var import_request4 = require_dist_node5();
    function _buildMessageForResponseErrors(data) {
      return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
    }
    var GraphqlResponseError = class extends Error {
      constructor(request2, headers, response) {
        super(_buildMessageForResponseErrors(response));
        this.request = request2;
        this.headers = headers;
        this.response = response;
        this.name = "GraphqlResponseError";
        this.errors = response.errors;
        this.data = response.data;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
      }
    };
    var NON_VARIABLE_OPTIONS = [
      "method",
      "baseUrl",
      "url",
      "headers",
      "request",
      "query",
      "mediaType"
    ];
    var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
    var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
    function graphql(request2, query, options) {
      if (options) {
        if (typeof query === "string" && "query" in options) {
          return Promise.reject(
            new Error(`[@octokit/graphql] "query" cannot be used as variable name`)
          );
        }
        for (const key in options) {
          if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
            continue;
          return Promise.reject(
            new Error(
              `[@octokit/graphql] "${key}" cannot be used as variable name`
            )
          );
        }
      }
      const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
      const requestOptions = Object.keys(
        parsedOptions
      ).reduce((result, key) => {
        if (NON_VARIABLE_OPTIONS.includes(key)) {
          result[key] = parsedOptions[key];
          return result;
        }
        if (!result.variables) {
          result.variables = {};
        }
        result.variables[key] = parsedOptions[key];
        return result;
      }, {});
      const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
      if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
      }
      return request2(requestOptions).then((response) => {
        if (response.data.errors) {
          const headers = {};
          for (const key of Object.keys(response.headers)) {
            headers[key] = response.headers[key];
          }
          throw new GraphqlResponseError(
            requestOptions,
            headers,
            response.data
          );
        }
        return response.data.data;
      });
    }
    function withDefaults(request2, newDefaults) {
      const newRequest = request2.defaults(newDefaults);
      const newApi = (query, options) => {
        return graphql(newRequest, query, options);
      };
      return Object.assign(newApi, {
        defaults: withDefaults.bind(null, newRequest),
        endpoint: newRequest.endpoint
      });
    }
    var graphql2 = withDefaults(import_request3.request, {
      headers: {
        "user-agent": `octokit-graphql.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`
      },
      method: "POST",
      url: "/graphql"
    });
    function withCustomRequest(customRequest) {
      return withDefaults(customRequest, {
        method: "POST",
        url: "/graphql"
      });
    }
  }
});

// node_modules/@actions/github/node_modules/@octokit/auth-token/dist-node/index.js
var require_dist_node7 = __commonJS({
  "node_modules/@actions/github/node_modules/@octokit/auth-token/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all7) => {
      for (var name in all7)
        __defProp2(target, name, { get: all7[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      createTokenAuth: () => createTokenAuth
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
    var REGEX_IS_INSTALLATION = /^ghs_/;
    var REGEX_IS_USER_TO_SERVER = /^ghu_/;
    async function auth(token) {
      const isApp = token.split(/\./).length === 3;
      const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
      const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
      const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
      return {
        type: "token",
        token,
        tokenType
      };
    }
    function withAuthorizationPrefix(token) {
      if (token.split(/\./).length === 3) {
        return `bearer ${token}`;
      }
      return `token ${token}`;
    }
    async function hook(token, request2, route, parameters) {
      const endpoint = request2.endpoint.merge(
        route,
        parameters
      );
      endpoint.headers.authorization = withAuthorizationPrefix(token);
      return request2(endpoint);
    }
    var createTokenAuth = function createTokenAuth2(token) {
      if (!token) {
        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
      }
      if (typeof token !== "string") {
        throw new Error(
          "[@octokit/auth-token] Token passed to createTokenAuth is not a string"
        );
      }
      token = token.replace(/^(token|bearer) +/i, "");
      return Object.assign(auth.bind(null, token), {
        hook: hook.bind(null, token)
      });
    };
  }
});

// node_modules/@actions/github/node_modules/@octokit/core/dist-node/index.js
var require_dist_node8 = __commonJS({
  "node_modules/@actions/github/node_modules/@octokit/core/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all7) => {
      for (var name in all7)
        __defProp2(target, name, { get: all7[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      Octokit: () => Octokit
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_universal_user_agent = require_dist_node();
    var import_before_after_hook = require_before_after_hook();
    var import_request3 = require_dist_node5();
    var import_graphql = require_dist_node6();
    var import_auth_token = require_dist_node7();
    var VERSION = "5.2.0";
    var noop = () => {
    };
    var consoleWarn = console.warn.bind(console);
    var consoleError = console.error.bind(console);
    var userAgentTrail = `octokit-core.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;
    var Octokit = class {
      static {
        this.VERSION = VERSION;
      }
      static defaults(defaults) {
        const OctokitWithDefaults = class extends this {
          constructor(...args) {
            const options = args[0] || {};
            if (typeof defaults === "function") {
              super(defaults(options));
              return;
            }
            super(
              Object.assign(
                {},
                defaults,
                options,
                options.userAgent && defaults.userAgent ? {
                  userAgent: `${options.userAgent} ${defaults.userAgent}`
                } : null
              )
            );
          }
        };
        return OctokitWithDefaults;
      }
      static {
        this.plugins = [];
      }
      /**
       * Attach a plugin (or many) to your Octokit instance.
       *
       * @example
       * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
       */
      static plugin(...newPlugins) {
        const currentPlugins = this.plugins;
        const NewOctokit = class extends this {
          static {
            this.plugins = currentPlugins.concat(
              newPlugins.filter((plugin) => !currentPlugins.includes(plugin))
            );
          }
        };
        return NewOctokit;
      }
      constructor(options = {}) {
        const hook = new import_before_after_hook.Collection();
        const requestDefaults = {
          baseUrl: import_request3.request.endpoint.DEFAULTS.baseUrl,
          headers: {},
          request: Object.assign({}, options.request, {
            // @ts-ignore internal usage only, no need to type
            hook: hook.bind(null, "request")
          }),
          mediaType: {
            previews: [],
            format: ""
          }
        };
        requestDefaults.headers["user-agent"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;
        if (options.baseUrl) {
          requestDefaults.baseUrl = options.baseUrl;
        }
        if (options.previews) {
          requestDefaults.mediaType.previews = options.previews;
        }
        if (options.timeZone) {
          requestDefaults.headers["time-zone"] = options.timeZone;
        }
        this.request = import_request3.request.defaults(requestDefaults);
        this.graphql = (0, import_graphql.withCustomRequest)(this.request).defaults(requestDefaults);
        this.log = Object.assign(
          {
            debug: noop,
            info: noop,
            warn: consoleWarn,
            error: consoleError
          },
          options.log
        );
        this.hook = hook;
        if (!options.authStrategy) {
          if (!options.auth) {
            this.auth = async () => ({
              type: "unauthenticated"
            });
          } else {
            const auth = (0, import_auth_token.createTokenAuth)(options.auth);
            hook.wrap("request", auth.hook);
            this.auth = auth;
          }
        } else {
          const { authStrategy, ...otherOptions } = options;
          const auth = authStrategy(
            Object.assign(
              {
                request: this.request,
                log: this.log,
                // we pass the current octokit instance as well as its constructor options
                // to allow for authentication strategies that return a new octokit instance
                // that shares the same internal state as the current one. The original
                // requirement for this was the "event-octokit" authentication strategy
                // of https://github.com/probot/octokit-auth-probot.
                octokit: this,
                octokitOptions: otherOptions
              },
              options.auth
            )
          );
          hook.wrap("request", auth.hook);
          this.auth = auth;
        }
        const classConstructor = this.constructor;
        for (let i = 0; i < classConstructor.plugins.length; ++i) {
          Object.assign(this, classConstructor.plugins[i](this, options));
        }
      }
    };
  }
});

// node_modules/@actions/github/node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js
var require_dist_node9 = __commonJS({
  "node_modules/@actions/github/node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all7) => {
      for (var name in all7)
        __defProp2(target, name, { get: all7[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      legacyRestEndpointMethods: () => legacyRestEndpointMethods,
      restEndpointMethods: () => restEndpointMethods
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var VERSION = "10.4.1";
    var Endpoints = {
      actions: {
        addCustomLabelsToSelfHostedRunnerForOrg: [
          "POST /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        addCustomLabelsToSelfHostedRunnerForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        addSelectedRepoToOrgSecret: [
          "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
        ],
        addSelectedRepoToOrgVariable: [
          "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
        ],
        approveWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
        ],
        cancelWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
        ],
        createEnvironmentVariable: [
          "POST /repositories/{repository_id}/environments/{environment_name}/variables"
        ],
        createOrUpdateEnvironmentSecret: [
          "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
        createOrUpdateRepoSecret: [
          "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
        ],
        createOrgVariable: ["POST /orgs/{org}/actions/variables"],
        createRegistrationTokenForOrg: [
          "POST /orgs/{org}/actions/runners/registration-token"
        ],
        createRegistrationTokenForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/registration-token"
        ],
        createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
        createRemoveTokenForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/remove-token"
        ],
        createRepoVariable: ["POST /repos/{owner}/{repo}/actions/variables"],
        createWorkflowDispatch: [
          "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
        ],
        deleteActionsCacheById: [
          "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"
        ],
        deleteActionsCacheByKey: [
          "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"
        ],
        deleteArtifact: [
          "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
        ],
        deleteEnvironmentSecret: [
          "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        deleteEnvironmentVariable: [
          "DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
        deleteOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}"],
        deleteRepoSecret: [
          "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
        ],
        deleteRepoVariable: [
          "DELETE /repos/{owner}/{repo}/actions/variables/{name}"
        ],
        deleteSelfHostedRunnerFromOrg: [
          "DELETE /orgs/{org}/actions/runners/{runner_id}"
        ],
        deleteSelfHostedRunnerFromRepo: [
          "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
        ],
        deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
        deleteWorkflowRunLogs: [
          "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        ],
        disableSelectedRepositoryGithubActionsOrganization: [
          "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
        ],
        disableWorkflow: [
          "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
        ],
        downloadArtifact: [
          "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
        ],
        downloadJobLogsForWorkflowRun: [
          "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
        ],
        downloadWorkflowRunAttemptLogs: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
        ],
        downloadWorkflowRunLogs: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        ],
        enableSelectedRepositoryGithubActionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
        ],
        enableWorkflow: [
          "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
        ],
        forceCancelWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"
        ],
        generateRunnerJitconfigForOrg: [
          "POST /orgs/{org}/actions/runners/generate-jitconfig"
        ],
        generateRunnerJitconfigForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"
        ],
        getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
        getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
        getActionsCacheUsageByRepoForOrg: [
          "GET /orgs/{org}/actions/cache/usage-by-repository"
        ],
        getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
        getAllowedActionsOrganization: [
          "GET /orgs/{org}/actions/permissions/selected-actions"
        ],
        getAllowedActionsRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
        ],
        getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
        getCustomOidcSubClaimForRepo: [
          "GET /repos/{owner}/{repo}/actions/oidc/customization/sub"
        ],
        getEnvironmentPublicKey: [
          "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
        ],
        getEnvironmentSecret: [
          "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        getEnvironmentVariable: [
          "GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        getGithubActionsDefaultWorkflowPermissionsOrganization: [
          "GET /orgs/{org}/actions/permissions/workflow"
        ],
        getGithubActionsDefaultWorkflowPermissionsRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions/workflow"
        ],
        getGithubActionsPermissionsOrganization: [
          "GET /orgs/{org}/actions/permissions"
        ],
        getGithubActionsPermissionsRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions"
        ],
        getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
        getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
        getOrgVariable: ["GET /orgs/{org}/actions/variables/{name}"],
        getPendingDeploymentsForRun: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
        ],
        getRepoPermissions: [
          "GET /repos/{owner}/{repo}/actions/permissions",
          {},
          { renamed: ["actions", "getGithubActionsPermissionsRepository"] }
        ],
        getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
        getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        getRepoVariable: ["GET /repos/{owner}/{repo}/actions/variables/{name}"],
        getReviewsForRun: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
        ],
        getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
        getSelfHostedRunnerForRepo: [
          "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
        ],
        getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
        getWorkflowAccessToRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions/access"
        ],
        getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
        getWorkflowRunAttempt: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
        ],
        getWorkflowRunUsage: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
        ],
        getWorkflowUsage: [
          "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
        ],
        listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
        listEnvironmentSecrets: [
          "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
        ],
        listEnvironmentVariables: [
          "GET /repositories/{repository_id}/environments/{environment_name}/variables"
        ],
        listJobsForWorkflowRun: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
        ],
        listJobsForWorkflowRunAttempt: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
        ],
        listLabelsForSelfHostedRunnerForOrg: [
          "GET /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        listLabelsForSelfHostedRunnerForRepo: [
          "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
        listOrgVariables: ["GET /orgs/{org}/actions/variables"],
        listRepoOrganizationSecrets: [
          "GET /repos/{owner}/{repo}/actions/organization-secrets"
        ],
        listRepoOrganizationVariables: [
          "GET /repos/{owner}/{repo}/actions/organization-variables"
        ],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
        listRepoVariables: ["GET /repos/{owner}/{repo}/actions/variables"],
        listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
        listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
        listRunnerApplicationsForRepo: [
          "GET /repos/{owner}/{repo}/actions/runners/downloads"
        ],
        listSelectedReposForOrgSecret: [
          "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
        ],
        listSelectedReposForOrgVariable: [
          "GET /orgs/{org}/actions/variables/{name}/repositories"
        ],
        listSelectedRepositoriesEnabledGithubActionsOrganization: [
          "GET /orgs/{org}/actions/permissions/repositories"
        ],
        listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
        listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
        listWorkflowRunArtifacts: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
        ],
        listWorkflowRuns: [
          "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
        ],
        listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
        reRunJobForWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
        ],
        reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
        reRunWorkflowFailedJobs: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
        ],
        removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
          "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
          "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        removeCustomLabelFromSelfHostedRunnerForOrg: [
          "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
        ],
        removeCustomLabelFromSelfHostedRunnerForRepo: [
          "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
        ],
        removeSelectedRepoFromOrgSecret: [
          "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
        ],
        removeSelectedRepoFromOrgVariable: [
          "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
        ],
        reviewCustomGatesForRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"
        ],
        reviewPendingDeploymentsForRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
        ],
        setAllowedActionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/selected-actions"
        ],
        setAllowedActionsRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
        ],
        setCustomLabelsForSelfHostedRunnerForOrg: [
          "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        setCustomLabelsForSelfHostedRunnerForRepo: [
          "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        setCustomOidcSubClaimForRepo: [
          "PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"
        ],
        setGithubActionsDefaultWorkflowPermissionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/workflow"
        ],
        setGithubActionsDefaultWorkflowPermissionsRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
        ],
        setGithubActionsPermissionsOrganization: [
          "PUT /orgs/{org}/actions/permissions"
        ],
        setGithubActionsPermissionsRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions"
        ],
        setSelectedReposForOrgSecret: [
          "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
        ],
        setSelectedReposForOrgVariable: [
          "PUT /orgs/{org}/actions/variables/{name}/repositories"
        ],
        setSelectedRepositoriesEnabledGithubActionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/repositories"
        ],
        setWorkflowAccessToRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions/access"
        ],
        updateEnvironmentVariable: [
          "PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        updateOrgVariable: ["PATCH /orgs/{org}/actions/variables/{name}"],
        updateRepoVariable: [
          "PATCH /repos/{owner}/{repo}/actions/variables/{name}"
        ]
      },
      activity: {
        checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
        deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
        deleteThreadSubscription: [
          "DELETE /notifications/threads/{thread_id}/subscription"
        ],
        getFeeds: ["GET /feeds"],
        getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
        getThread: ["GET /notifications/threads/{thread_id}"],
        getThreadSubscriptionForAuthenticatedUser: [
          "GET /notifications/threads/{thread_id}/subscription"
        ],
        listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
        listNotificationsForAuthenticatedUser: ["GET /notifications"],
        listOrgEventsForAuthenticatedUser: [
          "GET /users/{username}/events/orgs/{org}"
        ],
        listPublicEvents: ["GET /events"],
        listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
        listPublicEventsForUser: ["GET /users/{username}/events/public"],
        listPublicOrgEvents: ["GET /orgs/{org}/events"],
        listReceivedEventsForUser: ["GET /users/{username}/received_events"],
        listReceivedPublicEventsForUser: [
          "GET /users/{username}/received_events/public"
        ],
        listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
        listRepoNotificationsForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/notifications"
        ],
        listReposStarredByAuthenticatedUser: ["GET /user/starred"],
        listReposStarredByUser: ["GET /users/{username}/starred"],
        listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
        listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
        listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
        listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
        markNotificationsAsRead: ["PUT /notifications"],
        markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
        markThreadAsDone: ["DELETE /notifications/threads/{thread_id}"],
        markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
        setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
        setThreadSubscription: [
          "PUT /notifications/threads/{thread_id}/subscription"
        ],
        starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
        unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
      },
      apps: {
        addRepoToInstallation: [
          "PUT /user/installations/{installation_id}/repositories/{repository_id}",
          {},
          { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
        ],
        addRepoToInstallationForAuthenticatedUser: [
          "PUT /user/installations/{installation_id}/repositories/{repository_id}"
        ],
        checkToken: ["POST /applications/{client_id}/token"],
        createFromManifest: ["POST /app-manifests/{code}/conversions"],
        createInstallationAccessToken: [
          "POST /app/installations/{installation_id}/access_tokens"
        ],
        deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
        deleteInstallation: ["DELETE /app/installations/{installation_id}"],
        deleteToken: ["DELETE /applications/{client_id}/token"],
        getAuthenticated: ["GET /app"],
        getBySlug: ["GET /apps/{app_slug}"],
        getInstallation: ["GET /app/installations/{installation_id}"],
        getOrgInstallation: ["GET /orgs/{org}/installation"],
        getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
        getSubscriptionPlanForAccount: [
          "GET /marketplace_listing/accounts/{account_id}"
        ],
        getSubscriptionPlanForAccountStubbed: [
          "GET /marketplace_listing/stubbed/accounts/{account_id}"
        ],
        getUserInstallation: ["GET /users/{username}/installation"],
        getWebhookConfigForApp: ["GET /app/hook/config"],
        getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
        listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
        listAccountsForPlanStubbed: [
          "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
        ],
        listInstallationReposForAuthenticatedUser: [
          "GET /user/installations/{installation_id}/repositories"
        ],
        listInstallationRequestsForAuthenticatedApp: [
          "GET /app/installation-requests"
        ],
        listInstallations: ["GET /app/installations"],
        listInstallationsForAuthenticatedUser: ["GET /user/installations"],
        listPlans: ["GET /marketplace_listing/plans"],
        listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
        listReposAccessibleToInstallation: ["GET /installation/repositories"],
        listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
        listSubscriptionsForAuthenticatedUserStubbed: [
          "GET /user/marketplace_purchases/stubbed"
        ],
        listWebhookDeliveries: ["GET /app/hook/deliveries"],
        redeliverWebhookDelivery: [
          "POST /app/hook/deliveries/{delivery_id}/attempts"
        ],
        removeRepoFromInstallation: [
          "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
          {},
          { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
        ],
        removeRepoFromInstallationForAuthenticatedUser: [
          "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
        ],
        resetToken: ["PATCH /applications/{client_id}/token"],
        revokeInstallationAccessToken: ["DELETE /installation/token"],
        scopeToken: ["POST /applications/{client_id}/token/scoped"],
        suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
        unsuspendInstallation: [
          "DELETE /app/installations/{installation_id}/suspended"
        ],
        updateWebhookConfigForApp: ["PATCH /app/hook/config"]
      },
      billing: {
        getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
        getGithubActionsBillingUser: [
          "GET /users/{username}/settings/billing/actions"
        ],
        getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
        getGithubPackagesBillingUser: [
          "GET /users/{username}/settings/billing/packages"
        ],
        getSharedStorageBillingOrg: [
          "GET /orgs/{org}/settings/billing/shared-storage"
        ],
        getSharedStorageBillingUser: [
          "GET /users/{username}/settings/billing/shared-storage"
        ]
      },
      checks: {
        create: ["POST /repos/{owner}/{repo}/check-runs"],
        createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
        get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
        getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
        listAnnotations: [
          "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
        ],
        listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
        listForSuite: [
          "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
        ],
        listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
        rerequestRun: [
          "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
        ],
        rerequestSuite: [
          "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
        ],
        setSuitesPreferences: [
          "PATCH /repos/{owner}/{repo}/check-suites/preferences"
        ],
        update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
      },
      codeScanning: {
        deleteAnalysis: [
          "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
        ],
        getAlert: [
          "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
          {},
          { renamedParameters: { alert_id: "alert_number" } }
        ],
        getAnalysis: [
          "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
        ],
        getCodeqlDatabase: [
          "GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"
        ],
        getDefaultSetup: ["GET /repos/{owner}/{repo}/code-scanning/default-setup"],
        getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
        listAlertInstances: [
          "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
        ],
        listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
        listAlertsInstances: [
          "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
          {},
          { renamed: ["codeScanning", "listAlertInstances"] }
        ],
        listCodeqlDatabases: [
          "GET /repos/{owner}/{repo}/code-scanning/codeql/databases"
        ],
        listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
        updateAlert: [
          "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
        ],
        updateDefaultSetup: [
          "PATCH /repos/{owner}/{repo}/code-scanning/default-setup"
        ],
        uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
      },
      codesOfConduct: {
        getAllCodesOfConduct: ["GET /codes_of_conduct"],
        getConductCode: ["GET /codes_of_conduct/{key}"]
      },
      codespaces: {
        addRepositoryForSecretForAuthenticatedUser: [
          "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        addSelectedRepoToOrgSecret: [
          "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        checkPermissionsForDevcontainer: [
          "GET /repos/{owner}/{repo}/codespaces/permissions_check"
        ],
        codespaceMachinesForAuthenticatedUser: [
          "GET /user/codespaces/{codespace_name}/machines"
        ],
        createForAuthenticatedUser: ["POST /user/codespaces"],
        createOrUpdateOrgSecret: [
          "PUT /orgs/{org}/codespaces/secrets/{secret_name}"
        ],
        createOrUpdateRepoSecret: [
          "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        createOrUpdateSecretForAuthenticatedUser: [
          "PUT /user/codespaces/secrets/{secret_name}"
        ],
        createWithPrForAuthenticatedUser: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
        ],
        createWithRepoForAuthenticatedUser: [
          "POST /repos/{owner}/{repo}/codespaces"
        ],
        deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
        deleteFromOrganization: [
          "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],
        deleteRepoSecret: [
          "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        deleteSecretForAuthenticatedUser: [
          "DELETE /user/codespaces/secrets/{secret_name}"
        ],
        exportForAuthenticatedUser: [
          "POST /user/codespaces/{codespace_name}/exports"
        ],
        getCodespacesForUserInOrg: [
          "GET /orgs/{org}/members/{username}/codespaces"
        ],
        getExportDetailsForAuthenticatedUser: [
          "GET /user/codespaces/{codespace_name}/exports/{export_id}"
        ],
        getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
        getOrgPublicKey: ["GET /orgs/{org}/codespaces/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}"],
        getPublicKeyForAuthenticatedUser: [
          "GET /user/codespaces/secrets/public-key"
        ],
        getRepoPublicKey: [
          "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
        ],
        getRepoSecret: [
          "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        getSecretForAuthenticatedUser: [
          "GET /user/codespaces/secrets/{secret_name}"
        ],
        listDevcontainersInRepositoryForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces/devcontainers"
        ],
        listForAuthenticatedUser: ["GET /user/codespaces"],
        listInOrganization: [
          "GET /orgs/{org}/codespaces",
          {},
          { renamedParameters: { org_id: "org" } }
        ],
        listInRepositoryForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces"
        ],
        listOrgSecrets: ["GET /orgs/{org}/codespaces/secrets"],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
        listRepositoriesForSecretForAuthenticatedUser: [
          "GET /user/codespaces/secrets/{secret_name}/repositories"
        ],
        listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
        listSelectedReposForOrgSecret: [
          "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
        ],
        preFlightWithRepoForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces/new"
        ],
        publishForAuthenticatedUser: [
          "POST /user/codespaces/{codespace_name}/publish"
        ],
        removeRepositoryForSecretForAuthenticatedUser: [
          "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        removeSelectedRepoFromOrgSecret: [
          "DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        repoMachinesForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces/machines"
        ],
        setRepositoriesForSecretForAuthenticatedUser: [
          "PUT /user/codespaces/secrets/{secret_name}/repositories"
        ],
        setSelectedReposForOrgSecret: [
          "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
        ],
        startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
        stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
        stopInOrganization: [
          "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
        ],
        updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
      },
      copilot: {
        addCopilotSeatsForTeams: [
          "POST /orgs/{org}/copilot/billing/selected_teams"
        ],
        addCopilotSeatsForUsers: [
          "POST /orgs/{org}/copilot/billing/selected_users"
        ],
        cancelCopilotSeatAssignmentForTeams: [
          "DELETE /orgs/{org}/copilot/billing/selected_teams"
        ],
        cancelCopilotSeatAssignmentForUsers: [
          "DELETE /orgs/{org}/copilot/billing/selected_users"
        ],
        getCopilotOrganizationDetails: ["GET /orgs/{org}/copilot/billing"],
        getCopilotSeatDetailsForUser: [
          "GET /orgs/{org}/members/{username}/copilot"
        ],
        listCopilotSeats: ["GET /orgs/{org}/copilot/billing/seats"]
      },
      dependabot: {
        addSelectedRepoToOrgSecret: [
          "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
        ],
        createOrUpdateOrgSecret: [
          "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
        ],
        createOrUpdateRepoSecret: [
          "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
        deleteRepoSecret: [
          "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        getAlert: ["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],
        getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
        getRepoPublicKey: [
          "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
        ],
        getRepoSecret: [
          "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        listAlertsForEnterprise: [
          "GET /enterprises/{enterprise}/dependabot/alerts"
        ],
        listAlertsForOrg: ["GET /orgs/{org}/dependabot/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/dependabot/alerts"],
        listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
        listSelectedReposForOrgSecret: [
          "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
        ],
        removeSelectedRepoFromOrgSecret: [
          "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
        ],
        setSelectedReposForOrgSecret: [
          "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
        ],
        updateAlert: [
          "PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"
        ]
      },
      dependencyGraph: {
        createRepositorySnapshot: [
          "POST /repos/{owner}/{repo}/dependency-graph/snapshots"
        ],
        diffRange: [
          "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
        ],
        exportSbom: ["GET /repos/{owner}/{repo}/dependency-graph/sbom"]
      },
      emojis: { get: ["GET /emojis"] },
      gists: {
        checkIsStarred: ["GET /gists/{gist_id}/star"],
        create: ["POST /gists"],
        createComment: ["POST /gists/{gist_id}/comments"],
        delete: ["DELETE /gists/{gist_id}"],
        deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
        fork: ["POST /gists/{gist_id}/forks"],
        get: ["GET /gists/{gist_id}"],
        getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
        getRevision: ["GET /gists/{gist_id}/{sha}"],
        list: ["GET /gists"],
        listComments: ["GET /gists/{gist_id}/comments"],
        listCommits: ["GET /gists/{gist_id}/commits"],
        listForUser: ["GET /users/{username}/gists"],
        listForks: ["GET /gists/{gist_id}/forks"],
        listPublic: ["GET /gists/public"],
        listStarred: ["GET /gists/starred"],
        star: ["PUT /gists/{gist_id}/star"],
        unstar: ["DELETE /gists/{gist_id}/star"],
        update: ["PATCH /gists/{gist_id}"],
        updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
      },
      git: {
        createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
        createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
        createRef: ["POST /repos/{owner}/{repo}/git/refs"],
        createTag: ["POST /repos/{owner}/{repo}/git/tags"],
        createTree: ["POST /repos/{owner}/{repo}/git/trees"],
        deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
        getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
        getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
        getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
        getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
        getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
        listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
        updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
      },
      gitignore: {
        getAllTemplates: ["GET /gitignore/templates"],
        getTemplate: ["GET /gitignore/templates/{name}"]
      },
      interactions: {
        getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
        getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
        getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
        getRestrictionsForYourPublicRepos: [
          "GET /user/interaction-limits",
          {},
          { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
        ],
        removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
        removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
        removeRestrictionsForRepo: [
          "DELETE /repos/{owner}/{repo}/interaction-limits"
        ],
        removeRestrictionsForYourPublicRepos: [
          "DELETE /user/interaction-limits",
          {},
          { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
        ],
        setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
        setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
        setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
        setRestrictionsForYourPublicRepos: [
          "PUT /user/interaction-limits",
          {},
          { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
        ]
      },
      issues: {
        addAssignees: [
          "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
        ],
        addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
        checkUserCanBeAssignedToIssue: [
          "GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"
        ],
        create: ["POST /repos/{owner}/{repo}/issues"],
        createComment: [
          "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
        ],
        createLabel: ["POST /repos/{owner}/{repo}/labels"],
        createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
        deleteComment: [
          "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
        ],
        deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
        deleteMilestone: [
          "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
        ],
        get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
        getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
        getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
        getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
        list: ["GET /issues"],
        listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
        listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
        listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
        listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
        listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
        listEventsForTimeline: [
          "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
        ],
        listForAuthenticatedUser: ["GET /user/issues"],
        listForOrg: ["GET /orgs/{org}/issues"],
        listForRepo: ["GET /repos/{owner}/{repo}/issues"],
        listLabelsForMilestone: [
          "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
        ],
        listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
        listLabelsOnIssue: [
          "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
        ],
        listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
        lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        removeAllLabels: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
        ],
        removeAssignees: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
        ],
        removeLabel: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
        ],
        setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
        updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
        updateMilestone: [
          "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
        ]
      },
      licenses: {
        get: ["GET /licenses/{license}"],
        getAllCommonlyUsed: ["GET /licenses"],
        getForRepo: ["GET /repos/{owner}/{repo}/license"]
      },
      markdown: {
        render: ["POST /markdown"],
        renderRaw: [
          "POST /markdown/raw",
          { headers: { "content-type": "text/plain; charset=utf-8" } }
        ]
      },
      meta: {
        get: ["GET /meta"],
        getAllVersions: ["GET /versions"],
        getOctocat: ["GET /octocat"],
        getZen: ["GET /zen"],
        root: ["GET /"]
      },
      migrations: {
        cancelImport: [
          "DELETE /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import"
          }
        ],
        deleteArchiveForAuthenticatedUser: [
          "DELETE /user/migrations/{migration_id}/archive"
        ],
        deleteArchiveForOrg: [
          "DELETE /orgs/{org}/migrations/{migration_id}/archive"
        ],
        downloadArchiveForOrg: [
          "GET /orgs/{org}/migrations/{migration_id}/archive"
        ],
        getArchiveForAuthenticatedUser: [
          "GET /user/migrations/{migration_id}/archive"
        ],
        getCommitAuthors: [
          "GET /repos/{owner}/{repo}/import/authors",
          {},
          {
            deprecated: "octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors"
          }
        ],
        getImportStatus: [
          "GET /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status"
          }
        ],
        getLargeFiles: [
          "GET /repos/{owner}/{repo}/import/large_files",
          {},
          {
            deprecated: "octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files"
          }
        ],
        getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
        getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
        listForAuthenticatedUser: ["GET /user/migrations"],
        listForOrg: ["GET /orgs/{org}/migrations"],
        listReposForAuthenticatedUser: [
          "GET /user/migrations/{migration_id}/repositories"
        ],
        listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
        listReposForUser: [
          "GET /user/migrations/{migration_id}/repositories",
          {},
          { renamed: ["migrations", "listReposForAuthenticatedUser"] }
        ],
        mapCommitAuthor: [
          "PATCH /repos/{owner}/{repo}/import/authors/{author_id}",
          {},
          {
            deprecated: "octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author"
          }
        ],
        setLfsPreference: [
          "PATCH /repos/{owner}/{repo}/import/lfs",
          {},
          {
            deprecated: "octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference"
          }
        ],
        startForAuthenticatedUser: ["POST /user/migrations"],
        startForOrg: ["POST /orgs/{org}/migrations"],
        startImport: [
          "PUT /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import"
          }
        ],
        unlockRepoForAuthenticatedUser: [
          "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
        ],
        unlockRepoForOrg: [
          "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
        ],
        updateImport: [
          "PATCH /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import"
          }
        ]
      },
      oidc: {
        getOidcCustomSubTemplateForOrg: [
          "GET /orgs/{org}/actions/oidc/customization/sub"
        ],
        updateOidcCustomSubTemplateForOrg: [
          "PUT /orgs/{org}/actions/oidc/customization/sub"
        ]
      },
      orgs: {
        addSecurityManagerTeam: [
          "PUT /orgs/{org}/security-managers/teams/{team_slug}"
        ],
        assignTeamToOrgRole: [
          "PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"
        ],
        assignUserToOrgRole: [
          "PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"
        ],
        blockUser: ["PUT /orgs/{org}/blocks/{username}"],
        cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
        checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
        checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
        checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
        convertMemberToOutsideCollaborator: [
          "PUT /orgs/{org}/outside_collaborators/{username}"
        ],
        createCustomOrganizationRole: ["POST /orgs/{org}/organization-roles"],
        createInvitation: ["POST /orgs/{org}/invitations"],
        createOrUpdateCustomProperties: ["PATCH /orgs/{org}/properties/schema"],
        createOrUpdateCustomPropertiesValuesForRepos: [
          "PATCH /orgs/{org}/properties/values"
        ],
        createOrUpdateCustomProperty: [
          "PUT /orgs/{org}/properties/schema/{custom_property_name}"
        ],
        createWebhook: ["POST /orgs/{org}/hooks"],
        delete: ["DELETE /orgs/{org}"],
        deleteCustomOrganizationRole: [
          "DELETE /orgs/{org}/organization-roles/{role_id}"
        ],
        deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
        enableOrDisableSecurityProductOnAllOrgRepos: [
          "POST /orgs/{org}/{security_product}/{enablement}"
        ],
        get: ["GET /orgs/{org}"],
        getAllCustomProperties: ["GET /orgs/{org}/properties/schema"],
        getCustomProperty: [
          "GET /orgs/{org}/properties/schema/{custom_property_name}"
        ],
        getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
        getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
        getOrgRole: ["GET /orgs/{org}/organization-roles/{role_id}"],
        getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
        getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
        getWebhookDelivery: [
          "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
        ],
        list: ["GET /organizations"],
        listAppInstallations: ["GET /orgs/{org}/installations"],
        listBlockedUsers: ["GET /orgs/{org}/blocks"],
        listCustomPropertiesValuesForRepos: ["GET /orgs/{org}/properties/values"],
        listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
        listForAuthenticatedUser: ["GET /user/orgs"],
        listForUser: ["GET /users/{username}/orgs"],
        listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
        listMembers: ["GET /orgs/{org}/members"],
        listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
        listOrgRoleTeams: ["GET /orgs/{org}/organization-roles/{role_id}/teams"],
        listOrgRoleUsers: ["GET /orgs/{org}/organization-roles/{role_id}/users"],
        listOrgRoles: ["GET /orgs/{org}/organization-roles"],
        listOrganizationFineGrainedPermissions: [
          "GET /orgs/{org}/organization-fine-grained-permissions"
        ],
        listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
        listPatGrantRepositories: [
          "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"
        ],
        listPatGrantRequestRepositories: [
          "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"
        ],
        listPatGrantRequests: ["GET /orgs/{org}/personal-access-token-requests"],
        listPatGrants: ["GET /orgs/{org}/personal-access-tokens"],
        listPendingInvitations: ["GET /orgs/{org}/invitations"],
        listPublicMembers: ["GET /orgs/{org}/public_members"],
        listSecurityManagerTeams: ["GET /orgs/{org}/security-managers"],
        listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
        listWebhooks: ["GET /orgs/{org}/hooks"],
        patchCustomOrganizationRole: [
          "PATCH /orgs/{org}/organization-roles/{role_id}"
        ],
        pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: [
          "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
        ],
        removeCustomProperty: [
          "DELETE /orgs/{org}/properties/schema/{custom_property_name}"
        ],
        removeMember: ["DELETE /orgs/{org}/members/{username}"],
        removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
        removeOutsideCollaborator: [
          "DELETE /orgs/{org}/outside_collaborators/{username}"
        ],
        removePublicMembershipForAuthenticatedUser: [
          "DELETE /orgs/{org}/public_members/{username}"
        ],
        removeSecurityManagerTeam: [
          "DELETE /orgs/{org}/security-managers/teams/{team_slug}"
        ],
        reviewPatGrantRequest: [
          "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"
        ],
        reviewPatGrantRequestsInBulk: [
          "POST /orgs/{org}/personal-access-token-requests"
        ],
        revokeAllOrgRolesTeam: [
          "DELETE /orgs/{org}/organization-roles/teams/{team_slug}"
        ],
        revokeAllOrgRolesUser: [
          "DELETE /orgs/{org}/organization-roles/users/{username}"
        ],
        revokeOrgRoleTeam: [
          "DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"
        ],
        revokeOrgRoleUser: [
          "DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"
        ],
        setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
        setPublicMembershipForAuthenticatedUser: [
          "PUT /orgs/{org}/public_members/{username}"
        ],
        unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
        update: ["PATCH /orgs/{org}"],
        updateMembershipForAuthenticatedUser: [
          "PATCH /user/memberships/orgs/{org}"
        ],
        updatePatAccess: ["POST /orgs/{org}/personal-access-tokens/{pat_id}"],
        updatePatAccesses: ["POST /orgs/{org}/personal-access-tokens"],
        updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
        updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
      },
      packages: {
        deletePackageForAuthenticatedUser: [
          "DELETE /user/packages/{package_type}/{package_name}"
        ],
        deletePackageForOrg: [
          "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
        ],
        deletePackageForUser: [
          "DELETE /users/{username}/packages/{package_type}/{package_name}"
        ],
        deletePackageVersionForAuthenticatedUser: [
          "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        deletePackageVersionForOrg: [
          "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        deletePackageVersionForUser: [
          "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getAllPackageVersionsForAPackageOwnedByAnOrg: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
          {},
          { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
        ],
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}/versions",
          {},
          {
            renamed: [
              "packages",
              "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
            ]
          }
        ],
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}/versions"
        ],
        getAllPackageVersionsForPackageOwnedByOrg: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
        ],
        getAllPackageVersionsForPackageOwnedByUser: [
          "GET /users/{username}/packages/{package_type}/{package_name}/versions"
        ],
        getPackageForAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}"
        ],
        getPackageForOrganization: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}"
        ],
        getPackageForUser: [
          "GET /users/{username}/packages/{package_type}/{package_name}"
        ],
        getPackageVersionForAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getPackageVersionForOrganization: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getPackageVersionForUser: [
          "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        listDockerMigrationConflictingPackagesForAuthenticatedUser: [
          "GET /user/docker/conflicts"
        ],
        listDockerMigrationConflictingPackagesForOrganization: [
          "GET /orgs/{org}/docker/conflicts"
        ],
        listDockerMigrationConflictingPackagesForUser: [
          "GET /users/{username}/docker/conflicts"
        ],
        listPackagesForAuthenticatedUser: ["GET /user/packages"],
        listPackagesForOrganization: ["GET /orgs/{org}/packages"],
        listPackagesForUser: ["GET /users/{username}/packages"],
        restorePackageForAuthenticatedUser: [
          "POST /user/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageForOrg: [
          "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageForUser: [
          "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageVersionForAuthenticatedUser: [
          "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ],
        restorePackageVersionForOrg: [
          "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ],
        restorePackageVersionForUser: [
          "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ]
      },
      projects: {
        addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
        createCard: ["POST /projects/columns/{column_id}/cards"],
        createColumn: ["POST /projects/{project_id}/columns"],
        createForAuthenticatedUser: ["POST /user/projects"],
        createForOrg: ["POST /orgs/{org}/projects"],
        createForRepo: ["POST /repos/{owner}/{repo}/projects"],
        delete: ["DELETE /projects/{project_id}"],
        deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
        deleteColumn: ["DELETE /projects/columns/{column_id}"],
        get: ["GET /projects/{project_id}"],
        getCard: ["GET /projects/columns/cards/{card_id}"],
        getColumn: ["GET /projects/columns/{column_id}"],
        getPermissionForUser: [
          "GET /projects/{project_id}/collaborators/{username}/permission"
        ],
        listCards: ["GET /projects/columns/{column_id}/cards"],
        listCollaborators: ["GET /projects/{project_id}/collaborators"],
        listColumns: ["GET /projects/{project_id}/columns"],
        listForOrg: ["GET /orgs/{org}/projects"],
        listForRepo: ["GET /repos/{owner}/{repo}/projects"],
        listForUser: ["GET /users/{username}/projects"],
        moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
        moveColumn: ["POST /projects/columns/{column_id}/moves"],
        removeCollaborator: [
          "DELETE /projects/{project_id}/collaborators/{username}"
        ],
        update: ["PATCH /projects/{project_id}"],
        updateCard: ["PATCH /projects/columns/cards/{card_id}"],
        updateColumn: ["PATCH /projects/columns/{column_id}"]
      },
      pulls: {
        checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        create: ["POST /repos/{owner}/{repo}/pulls"],
        createReplyForReviewComment: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
        ],
        createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        createReviewComment: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
        ],
        deletePendingReview: [
          "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        deleteReviewComment: [
          "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
        ],
        dismissReview: [
          "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
        ],
        get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
        getReview: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
        list: ["GET /repos/{owner}/{repo}/pulls"],
        listCommentsForReview: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
        ],
        listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
        listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
        listRequestedReviewers: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        listReviewComments: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
        ],
        listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
        listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        removeRequestedReviewers: [
          "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        requestReviewers: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        submitReview: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
        ],
        update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
        updateBranch: [
          "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
        ],
        updateReview: [
          "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        updateReviewComment: [
          "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
        ]
      },
      rateLimit: { get: ["GET /rate_limit"] },
      reactions: {
        createForCommitComment: [
          "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
        ],
        createForIssue: [
          "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
        ],
        createForIssueComment: [
          "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        ],
        createForPullRequestReviewComment: [
          "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        ],
        createForRelease: [
          "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
        ],
        createForTeamDiscussionCommentInOrg: [
          "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        ],
        createForTeamDiscussionInOrg: [
          "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        ],
        deleteForCommitComment: [
          "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForIssue: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
        ],
        deleteForIssueComment: [
          "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForPullRequestComment: [
          "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForRelease: [
          "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
        ],
        deleteForTeamDiscussion: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
        ],
        deleteForTeamDiscussionComment: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
        ],
        listForCommitComment: [
          "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
        ],
        listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
        listForIssueComment: [
          "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        ],
        listForPullRequestReviewComment: [
          "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        ],
        listForRelease: [
          "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
        ],
        listForTeamDiscussionCommentInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        ],
        listForTeamDiscussionInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        ]
      },
      repos: {
        acceptInvitation: [
          "PATCH /user/repository_invitations/{invitation_id}",
          {},
          { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
        ],
        acceptInvitationForAuthenticatedUser: [
          "PATCH /user/repository_invitations/{invitation_id}"
        ],
        addAppAccessRestrictions: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          {},
          { mapToData: "apps" }
        ],
        addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
        addStatusCheckContexts: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          {},
          { mapToData: "contexts" }
        ],
        addTeamAccessRestrictions: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          {},
          { mapToData: "teams" }
        ],
        addUserAccessRestrictions: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          {},
          { mapToData: "users" }
        ],
        cancelPagesDeployment: [
          "POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"
        ],
        checkAutomatedSecurityFixes: [
          "GET /repos/{owner}/{repo}/automated-security-fixes"
        ],
        checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
        checkVulnerabilityAlerts: [
          "GET /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
        compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
        compareCommitsWithBasehead: [
          "GET /repos/{owner}/{repo}/compare/{basehead}"
        ],
        createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
        createCommitComment: [
          "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
        ],
        createCommitSignatureProtection: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
        createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
        createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
        createDeploymentBranchPolicy: [
          "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
        ],
        createDeploymentProtectionRule: [
          "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
        ],
        createDeploymentStatus: [
          "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        ],
        createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
        createForAuthenticatedUser: ["POST /user/repos"],
        createFork: ["POST /repos/{owner}/{repo}/forks"],
        createInOrg: ["POST /orgs/{org}/repos"],
        createOrUpdateCustomPropertiesValues: [
          "PATCH /repos/{owner}/{repo}/properties/values"
        ],
        createOrUpdateEnvironment: [
          "PUT /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
        createOrgRuleset: ["POST /orgs/{org}/rulesets"],
        createPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployments"],
        createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
        createRelease: ["POST /repos/{owner}/{repo}/releases"],
        createRepoRuleset: ["POST /repos/{owner}/{repo}/rulesets"],
        createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
        createUsingTemplate: [
          "POST /repos/{template_owner}/{template_repo}/generate"
        ],
        createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
        declineInvitation: [
          "DELETE /user/repository_invitations/{invitation_id}",
          {},
          { renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
        ],
        declineInvitationForAuthenticatedUser: [
          "DELETE /user/repository_invitations/{invitation_id}"
        ],
        delete: ["DELETE /repos/{owner}/{repo}"],
        deleteAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        ],
        deleteAdminBranchProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        deleteAnEnvironment: [
          "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        deleteBranchProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
        deleteCommitSignatureProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
        deleteDeployment: [
          "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
        ],
        deleteDeploymentBranchPolicy: [
          "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
        deleteInvitation: [
          "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
        ],
        deleteOrgRuleset: ["DELETE /orgs/{org}/rulesets/{ruleset_id}"],
        deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
        deletePullRequestReviewProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
        deleteReleaseAsset: [
          "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
        ],
        deleteRepoRuleset: ["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
        deleteTagProtection: [
          "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"
        ],
        deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
        disableAutomatedSecurityFixes: [
          "DELETE /repos/{owner}/{repo}/automated-security-fixes"
        ],
        disableDeploymentProtectionRule: [
          "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
        ],
        disablePrivateVulnerabilityReporting: [
          "DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"
        ],
        disableVulnerabilityAlerts: [
          "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        downloadArchive: [
          "GET /repos/{owner}/{repo}/zipball/{ref}",
          {},
          { renamed: ["repos", "downloadZipballArchive"] }
        ],
        downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
        downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
        enableAutomatedSecurityFixes: [
          "PUT /repos/{owner}/{repo}/automated-security-fixes"
        ],
        enablePrivateVulnerabilityReporting: [
          "PUT /repos/{owner}/{repo}/private-vulnerability-reporting"
        ],
        enableVulnerabilityAlerts: [
          "PUT /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        generateReleaseNotes: [
          "POST /repos/{owner}/{repo}/releases/generate-notes"
        ],
        get: ["GET /repos/{owner}/{repo}"],
        getAccessRestrictions: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        ],
        getAdminBranchProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        getAllDeploymentProtectionRules: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
        ],
        getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
        getAllStatusCheckContexts: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
        ],
        getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
        getAppsWithAccessToProtectedBranch: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
        ],
        getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
        getBranchProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        getBranchRules: ["GET /repos/{owner}/{repo}/rules/branches/{branch}"],
        getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
        getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
        getCollaboratorPermissionLevel: [
          "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
        ],
        getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
        getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
        getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
        getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
        getCommitSignatureProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
        getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
        getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
        getCustomDeploymentProtectionRule: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
        ],
        getCustomPropertiesValues: ["GET /repos/{owner}/{repo}/properties/values"],
        getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
        getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
        getDeploymentBranchPolicy: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        getDeploymentStatus: [
          "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
        ],
        getEnvironment: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
        getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
        getOrgRuleSuite: ["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],
        getOrgRuleSuites: ["GET /orgs/{org}/rulesets/rule-suites"],
        getOrgRuleset: ["GET /orgs/{org}/rulesets/{ruleset_id}"],
        getOrgRulesets: ["GET /orgs/{org}/rulesets"],
        getPages: ["GET /repos/{owner}/{repo}/pages"],
        getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
        getPagesDeployment: [
          "GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"
        ],
        getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
        getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
        getPullRequestReviewProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
        getReadme: ["GET /repos/{owner}/{repo}/readme"],
        getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
        getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
        getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
        getRepoRuleSuite: [
          "GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"
        ],
        getRepoRuleSuites: ["GET /repos/{owner}/{repo}/rulesets/rule-suites"],
        getRepoRuleset: ["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
        getRepoRulesets: ["GET /repos/{owner}/{repo}/rulesets"],
        getStatusChecksProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        getTeamsWithAccessToProtectedBranch: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
        ],
        getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
        getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
        getUsersWithAccessToProtectedBranch: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
        ],
        getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
        getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
        getWebhookConfigForRepo: [
          "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
        ],
        getWebhookDelivery: [
          "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
        ],
        listActivities: ["GET /repos/{owner}/{repo}/activity"],
        listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
        listBranches: ["GET /repos/{owner}/{repo}/branches"],
        listBranchesForHeadCommit: [
          "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
        ],
        listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
        listCommentsForCommit: [
          "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
        ],
        listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
        listCommitStatusesForRef: [
          "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
        ],
        listCommits: ["GET /repos/{owner}/{repo}/commits"],
        listContributors: ["GET /repos/{owner}/{repo}/contributors"],
        listCustomDeploymentRuleIntegrations: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"
        ],
        listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
        listDeploymentBranchPolicies: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
        ],
        listDeploymentStatuses: [
          "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        ],
        listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
        listForAuthenticatedUser: ["GET /user/repos"],
        listForOrg: ["GET /orgs/{org}/repos"],
        listForUser: ["GET /users/{username}/repos"],
        listForks: ["GET /repos/{owner}/{repo}/forks"],
        listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
        listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
        listLanguages: ["GET /repos/{owner}/{repo}/languages"],
        listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
        listPublic: ["GET /repositories"],
        listPullRequestsAssociatedWithCommit: [
          "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
        ],
        listReleaseAssets: [
          "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
        ],
        listReleases: ["GET /repos/{owner}/{repo}/releases"],
        listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
        listTags: ["GET /repos/{owner}/{repo}/tags"],
        listTeams: ["GET /repos/{owner}/{repo}/teams"],
        listWebhookDeliveries: [
          "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
        ],
        listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
        merge: ["POST /repos/{owner}/{repo}/merges"],
        mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
        pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: [
          "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
        ],
        removeAppAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          {},
          { mapToData: "apps" }
        ],
        removeCollaborator: [
          "DELETE /repos/{owner}/{repo}/collaborators/{username}"
        ],
        removeStatusCheckContexts: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          {},
          { mapToData: "contexts" }
        ],
        removeStatusCheckProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        removeTeamAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          {},
          { mapToData: "teams" }
        ],
        removeUserAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          {},
          { mapToData: "users" }
        ],
        renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
        replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
        requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
        setAdminBranchProtection: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        setAppAccessRestrictions: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          {},
          { mapToData: "apps" }
        ],
        setStatusCheckContexts: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          {},
          { mapToData: "contexts" }
        ],
        setTeamAccessRestrictions: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          {},
          { mapToData: "teams" }
        ],
        setUserAccessRestrictions: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          {},
          { mapToData: "users" }
        ],
        testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
        transfer: ["POST /repos/{owner}/{repo}/transfer"],
        update: ["PATCH /repos/{owner}/{repo}"],
        updateBranchProtection: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
        updateDeploymentBranchPolicy: [
          "PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
        updateInvitation: [
          "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
        ],
        updateOrgRuleset: ["PUT /orgs/{org}/rulesets/{ruleset_id}"],
        updatePullRequestReviewProtection: [
          "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
        updateReleaseAsset: [
          "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
        ],
        updateRepoRuleset: ["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
        updateStatusCheckPotection: [
          "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
          {},
          { renamed: ["repos", "updateStatusCheckProtection"] }
        ],
        updateStatusCheckProtection: [
          "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
        updateWebhookConfigForRepo: [
          "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
        ],
        uploadReleaseAsset: [
          "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
          { baseUrl: "https://uploads.github.com" }
        ]
      },
      search: {
        code: ["GET /search/code"],
        commits: ["GET /search/commits"],
        issuesAndPullRequests: ["GET /search/issues"],
        labels: ["GET /search/labels"],
        repos: ["GET /search/repositories"],
        topics: ["GET /search/topics"],
        users: ["GET /search/users"]
      },
      secretScanning: {
        getAlert: [
          "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
        ],
        listAlertsForEnterprise: [
          "GET /enterprises/{enterprise}/secret-scanning/alerts"
        ],
        listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
        listLocationsForAlert: [
          "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
        ],
        updateAlert: [
          "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
        ]
      },
      securityAdvisories: {
        createFork: [
          "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"
        ],
        createPrivateVulnerabilityReport: [
          "POST /repos/{owner}/{repo}/security-advisories/reports"
        ],
        createRepositoryAdvisory: [
          "POST /repos/{owner}/{repo}/security-advisories"
        ],
        createRepositoryAdvisoryCveRequest: [
          "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"
        ],
        getGlobalAdvisory: ["GET /advisories/{ghsa_id}"],
        getRepositoryAdvisory: [
          "GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
        ],
        listGlobalAdvisories: ["GET /advisories"],
        listOrgRepositoryAdvisories: ["GET /orgs/{org}/security-advisories"],
        listRepositoryAdvisories: ["GET /repos/{owner}/{repo}/security-advisories"],
        updateRepositoryAdvisory: [
          "PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
        ]
      },
      teams: {
        addOrUpdateMembershipForUserInOrg: [
          "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        addOrUpdateProjectPermissionsInOrg: [
          "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        addOrUpdateRepoPermissionsInOrg: [
          "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        checkPermissionsForProjectInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        checkPermissionsForRepoInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        create: ["POST /orgs/{org}/teams"],
        createDiscussionCommentInOrg: [
          "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        ],
        createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
        deleteDiscussionCommentInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        deleteDiscussionInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
        getByName: ["GET /orgs/{org}/teams/{team_slug}"],
        getDiscussionCommentInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        getDiscussionInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        getMembershipForUserInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        list: ["GET /orgs/{org}/teams"],
        listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
        listDiscussionCommentsInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        ],
        listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
        listForAuthenticatedUser: ["GET /user/teams"],
        listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
        listPendingInvitationsInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/invitations"
        ],
        listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
        listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
        removeMembershipForUserInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        removeProjectInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        removeRepoInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        updateDiscussionCommentInOrg: [
          "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        updateDiscussionInOrg: [
          "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
      },
      users: {
        addEmailForAuthenticated: [
          "POST /user/emails",
          {},
          { renamed: ["users", "addEmailForAuthenticatedUser"] }
        ],
        addEmailForAuthenticatedUser: ["POST /user/emails"],
        addSocialAccountForAuthenticatedUser: ["POST /user/social_accounts"],
        block: ["PUT /user/blocks/{username}"],
        checkBlocked: ["GET /user/blocks/{username}"],
        checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
        checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
        createGpgKeyForAuthenticated: [
          "POST /user/gpg_keys",
          {},
          { renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
        ],
        createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
        createPublicSshKeyForAuthenticated: [
          "POST /user/keys",
          {},
          { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
        ],
        createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
        createSshSigningKeyForAuthenticatedUser: ["POST /user/ssh_signing_keys"],
        deleteEmailForAuthenticated: [
          "DELETE /user/emails",
          {},
          { renamed: ["users", "deleteEmailForAuthenticatedUser"] }
        ],
        deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
        deleteGpgKeyForAuthenticated: [
          "DELETE /user/gpg_keys/{gpg_key_id}",
          {},
          { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
        ],
        deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
        deletePublicSshKeyForAuthenticated: [
          "DELETE /user/keys/{key_id}",
          {},
          { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
        ],
        deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
        deleteSocialAccountForAuthenticatedUser: ["DELETE /user/social_accounts"],
        deleteSshSigningKeyForAuthenticatedUser: [
          "DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"
        ],
        follow: ["PUT /user/following/{username}"],
        getAuthenticated: ["GET /user"],
        getByUsername: ["GET /users/{username}"],
        getContextForUser: ["GET /users/{username}/hovercard"],
        getGpgKeyForAuthenticated: [
          "GET /user/gpg_keys/{gpg_key_id}",
          {},
          { renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
        ],
        getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
        getPublicSshKeyForAuthenticated: [
          "GET /user/keys/{key_id}",
          {},
          { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
        ],
        getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
        getSshSigningKeyForAuthenticatedUser: [
          "GET /user/ssh_signing_keys/{ssh_signing_key_id}"
        ],
        list: ["GET /users"],
        listBlockedByAuthenticated: [
          "GET /user/blocks",
          {},
          { renamed: ["users", "listBlockedByAuthenticatedUser"] }
        ],
        listBlockedByAuthenticatedUser: ["GET /user/blocks"],
        listEmailsForAuthenticated: [
          "GET /user/emails",
          {},
          { renamed: ["users", "listEmailsForAuthenticatedUser"] }
        ],
        listEmailsForAuthenticatedUser: ["GET /user/emails"],
        listFollowedByAuthenticated: [
          "GET /user/following",
          {},
          { renamed: ["users", "listFollowedByAuthenticatedUser"] }
        ],
        listFollowedByAuthenticatedUser: ["GET /user/following"],
        listFollowersForAuthenticatedUser: ["GET /user/followers"],
        listFollowersForUser: ["GET /users/{username}/followers"],
        listFollowingForUser: ["GET /users/{username}/following"],
        listGpgKeysForAuthenticated: [
          "GET /user/gpg_keys",
          {},
          { renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
        ],
        listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
        listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
        listPublicEmailsForAuthenticated: [
          "GET /user/public_emails",
          {},
          { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
        ],
        listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
        listPublicKeysForUser: ["GET /users/{username}/keys"],
        listPublicSshKeysForAuthenticated: [
          "GET /user/keys",
          {},
          { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
        ],
        listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
        listSocialAccountsForAuthenticatedUser: ["GET /user/social_accounts"],
        listSocialAccountsForUser: ["GET /users/{username}/social_accounts"],
        listSshSigningKeysForAuthenticatedUser: ["GET /user/ssh_signing_keys"],
        listSshSigningKeysForUser: ["GET /users/{username}/ssh_signing_keys"],
        setPrimaryEmailVisibilityForAuthenticated: [
          "PATCH /user/email/visibility",
          {},
          { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
        ],
        setPrimaryEmailVisibilityForAuthenticatedUser: [
          "PATCH /user/email/visibility"
        ],
        unblock: ["DELETE /user/blocks/{username}"],
        unfollow: ["DELETE /user/following/{username}"],
        updateAuthenticated: ["PATCH /user"]
      }
    };
    var endpoints_default = Endpoints;
    var endpointMethodsMap = /* @__PURE__ */ new Map();
    for (const [scope5, endpoints] of Object.entries(endpoints_default)) {
      for (const [methodName, endpoint] of Object.entries(endpoints)) {
        const [route, defaults, decorations] = endpoint;
        const [method, url] = route.split(/ /);
        const endpointDefaults = Object.assign(
          {
            method,
            url
          },
          defaults
        );
        if (!endpointMethodsMap.has(scope5)) {
          endpointMethodsMap.set(scope5, /* @__PURE__ */ new Map());
        }
        endpointMethodsMap.get(scope5).set(methodName, {
          scope: scope5,
          methodName,
          endpointDefaults,
          decorations
        });
      }
    }
    var handler = {
      has({ scope: scope5 }, methodName) {
        return endpointMethodsMap.get(scope5).has(methodName);
      },
      getOwnPropertyDescriptor(target, methodName) {
        return {
          value: this.get(target, methodName),
          // ensures method is in the cache
          configurable: true,
          writable: true,
          enumerable: true
        };
      },
      defineProperty(target, methodName, descriptor3) {
        Object.defineProperty(target.cache, methodName, descriptor3);
        return true;
      },
      deleteProperty(target, methodName) {
        delete target.cache[methodName];
        return true;
      },
      ownKeys({ scope: scope5 }) {
        return [...endpointMethodsMap.get(scope5).keys()];
      },
      set(target, methodName, value3) {
        return target.cache[methodName] = value3;
      },
      get({ octokit, scope: scope5, cache }, methodName) {
        if (cache[methodName]) {
          return cache[methodName];
        }
        const method = endpointMethodsMap.get(scope5).get(methodName);
        if (!method) {
          return void 0;
        }
        const { endpointDefaults, decorations } = method;
        if (decorations) {
          cache[methodName] = decorate(
            octokit,
            scope5,
            methodName,
            endpointDefaults,
            decorations
          );
        } else {
          cache[methodName] = octokit.request.defaults(endpointDefaults);
        }
        return cache[methodName];
      }
    };
    function endpointsToMethods(octokit) {
      const newMethods = {};
      for (const scope5 of endpointMethodsMap.keys()) {
        newMethods[scope5] = new Proxy({ octokit, scope: scope5, cache: {} }, handler);
      }
      return newMethods;
    }
    function decorate(octokit, scope5, methodName, defaults, decorations) {
      const requestWithDefaults = octokit.request.defaults(defaults);
      function withDecorations(...args) {
        let options = requestWithDefaults.endpoint.merge(...args);
        if (decorations.mapToData) {
          options = Object.assign({}, options, {
            data: options[decorations.mapToData],
            [decorations.mapToData]: void 0
          });
          return requestWithDefaults(options);
        }
        if (decorations.renamed) {
          const [newScope, newMethodName] = decorations.renamed;
          octokit.log.warn(
            `octokit.${scope5}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`
          );
        }
        if (decorations.deprecated) {
          octokit.log.warn(decorations.deprecated);
        }
        if (decorations.renamedParameters) {
          const options2 = requestWithDefaults.endpoint.merge(...args);
          for (const [name, alias] of Object.entries(
            decorations.renamedParameters
          )) {
            if (name in options2) {
              octokit.log.warn(
                `"${name}" parameter is deprecated for "octokit.${scope5}.${methodName}()". Use "${alias}" instead`
              );
              if (!(alias in options2)) {
                options2[alias] = options2[name];
              }
              delete options2[name];
            }
          }
          return requestWithDefaults(options2);
        }
        return requestWithDefaults(...args);
      }
      return Object.assign(withDecorations, requestWithDefaults);
    }
    function restEndpointMethods(octokit) {
      const api = endpointsToMethods(octokit);
      return {
        rest: api
      };
    }
    restEndpointMethods.VERSION = VERSION;
    function legacyRestEndpointMethods(octokit) {
      const api = endpointsToMethods(octokit);
      return {
        ...api,
        rest: api
      };
    }
    legacyRestEndpointMethods.VERSION = VERSION;
  }
});

// node_modules/@actions/github/node_modules/@octokit/plugin-paginate-rest/dist-node/index.js
var require_dist_node10 = __commonJS({
  "node_modules/@actions/github/node_modules/@octokit/plugin-paginate-rest/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all7) => {
      for (var name in all7)
        __defProp2(target, name, { get: all7[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      composePaginateRest: () => composePaginateRest,
      isPaginatingEndpoint: () => isPaginatingEndpoint,
      paginateRest: () => paginateRest,
      paginatingEndpoints: () => paginatingEndpoints
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var VERSION = "9.2.1";
    function normalizePaginatedListResponse(response) {
      if (!response.data) {
        return {
          ...response,
          data: []
        };
      }
      const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
      if (!responseNeedsNormalization)
        return response;
      const incompleteResults = response.data.incomplete_results;
      const repositorySelection = response.data.repository_selection;
      const totalCount = response.data.total_count;
      delete response.data.incomplete_results;
      delete response.data.repository_selection;
      delete response.data.total_count;
      const namespaceKey = Object.keys(response.data)[0];
      const data = response.data[namespaceKey];
      response.data = data;
      if (typeof incompleteResults !== "undefined") {
        response.data.incomplete_results = incompleteResults;
      }
      if (typeof repositorySelection !== "undefined") {
        response.data.repository_selection = repositorySelection;
      }
      response.data.total_count = totalCount;
      return response;
    }
    function iterator(octokit, route, parameters) {
      const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
      const requestMethod = typeof route === "function" ? route : octokit.request;
      const method = options.method;
      const headers = options.headers;
      let url = options.url;
      return {
        [Symbol.asyncIterator]: () => ({
          async next() {
            if (!url)
              return { done: true };
            try {
              const response = await requestMethod({ method, url, headers });
              const normalizedResponse = normalizePaginatedListResponse(response);
              url = ((normalizedResponse.headers.link || "").match(
                /<([^>]+)>;\s*rel="next"/
              ) || [])[1];
              return { value: normalizedResponse };
            } catch (error) {
              if (error.status !== 409)
                throw error;
              url = "";
              return {
                value: {
                  status: 200,
                  headers: {},
                  data: []
                }
              };
            }
          }
        })
      };
    }
    function paginate(octokit, route, parameters, mapFn) {
      if (typeof parameters === "function") {
        mapFn = parameters;
        parameters = void 0;
      }
      return gather(
        octokit,
        [],
        iterator(octokit, route, parameters)[Symbol.asyncIterator](),
        mapFn
      );
    }
    function gather(octokit, results, iterator2, mapFn) {
      return iterator2.next().then((result) => {
        if (result.done) {
          return results;
        }
        let earlyExit = false;
        function done7() {
          earlyExit = true;
        }
        results = results.concat(
          mapFn ? mapFn(result.value, done7) : result.value.data
        );
        if (earlyExit) {
          return results;
        }
        return gather(octokit, results, iterator2, mapFn);
      });
    }
    var composePaginateRest = Object.assign(paginate, {
      iterator
    });
    var paginatingEndpoints = [
      "GET /advisories",
      "GET /app/hook/deliveries",
      "GET /app/installation-requests",
      "GET /app/installations",
      "GET /assignments/{assignment_id}/accepted_assignments",
      "GET /classrooms",
      "GET /classrooms/{classroom_id}/assignments",
      "GET /enterprises/{enterprise}/dependabot/alerts",
      "GET /enterprises/{enterprise}/secret-scanning/alerts",
      "GET /events",
      "GET /gists",
      "GET /gists/public",
      "GET /gists/starred",
      "GET /gists/{gist_id}/comments",
      "GET /gists/{gist_id}/commits",
      "GET /gists/{gist_id}/forks",
      "GET /installation/repositories",
      "GET /issues",
      "GET /licenses",
      "GET /marketplace_listing/plans",
      "GET /marketplace_listing/plans/{plan_id}/accounts",
      "GET /marketplace_listing/stubbed/plans",
      "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
      "GET /networks/{owner}/{repo}/events",
      "GET /notifications",
      "GET /organizations",
      "GET /orgs/{org}/actions/cache/usage-by-repository",
      "GET /orgs/{org}/actions/permissions/repositories",
      "GET /orgs/{org}/actions/runners",
      "GET /orgs/{org}/actions/secrets",
      "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
      "GET /orgs/{org}/actions/variables",
      "GET /orgs/{org}/actions/variables/{name}/repositories",
      "GET /orgs/{org}/blocks",
      "GET /orgs/{org}/code-scanning/alerts",
      "GET /orgs/{org}/codespaces",
      "GET /orgs/{org}/codespaces/secrets",
      "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
      "GET /orgs/{org}/copilot/billing/seats",
      "GET /orgs/{org}/dependabot/alerts",
      "GET /orgs/{org}/dependabot/secrets",
      "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
      "GET /orgs/{org}/events",
      "GET /orgs/{org}/failed_invitations",
      "GET /orgs/{org}/hooks",
      "GET /orgs/{org}/hooks/{hook_id}/deliveries",
      "GET /orgs/{org}/installations",
      "GET /orgs/{org}/invitations",
      "GET /orgs/{org}/invitations/{invitation_id}/teams",
      "GET /orgs/{org}/issues",
      "GET /orgs/{org}/members",
      "GET /orgs/{org}/members/{username}/codespaces",
      "GET /orgs/{org}/migrations",
      "GET /orgs/{org}/migrations/{migration_id}/repositories",
      "GET /orgs/{org}/organization-roles/{role_id}/teams",
      "GET /orgs/{org}/organization-roles/{role_id}/users",
      "GET /orgs/{org}/outside_collaborators",
      "GET /orgs/{org}/packages",
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
      "GET /orgs/{org}/personal-access-token-requests",
      "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
      "GET /orgs/{org}/personal-access-tokens",
      "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
      "GET /orgs/{org}/projects",
      "GET /orgs/{org}/properties/values",
      "GET /orgs/{org}/public_members",
      "GET /orgs/{org}/repos",
      "GET /orgs/{org}/rulesets",
      "GET /orgs/{org}/rulesets/rule-suites",
      "GET /orgs/{org}/secret-scanning/alerts",
      "GET /orgs/{org}/security-advisories",
      "GET /orgs/{org}/teams",
      "GET /orgs/{org}/teams/{team_slug}/discussions",
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
      "GET /orgs/{org}/teams/{team_slug}/invitations",
      "GET /orgs/{org}/teams/{team_slug}/members",
      "GET /orgs/{org}/teams/{team_slug}/projects",
      "GET /orgs/{org}/teams/{team_slug}/repos",
      "GET /orgs/{org}/teams/{team_slug}/teams",
      "GET /projects/columns/{column_id}/cards",
      "GET /projects/{project_id}/collaborators",
      "GET /projects/{project_id}/columns",
      "GET /repos/{owner}/{repo}/actions/artifacts",
      "GET /repos/{owner}/{repo}/actions/caches",
      "GET /repos/{owner}/{repo}/actions/organization-secrets",
      "GET /repos/{owner}/{repo}/actions/organization-variables",
      "GET /repos/{owner}/{repo}/actions/runners",
      "GET /repos/{owner}/{repo}/actions/runs",
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
      "GET /repos/{owner}/{repo}/actions/secrets",
      "GET /repos/{owner}/{repo}/actions/variables",
      "GET /repos/{owner}/{repo}/actions/workflows",
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
      "GET /repos/{owner}/{repo}/activity",
      "GET /repos/{owner}/{repo}/assignees",
      "GET /repos/{owner}/{repo}/branches",
      "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
      "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
      "GET /repos/{owner}/{repo}/code-scanning/alerts",
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      "GET /repos/{owner}/{repo}/code-scanning/analyses",
      "GET /repos/{owner}/{repo}/codespaces",
      "GET /repos/{owner}/{repo}/codespaces/devcontainers",
      "GET /repos/{owner}/{repo}/codespaces/secrets",
      "GET /repos/{owner}/{repo}/collaborators",
      "GET /repos/{owner}/{repo}/comments",
      "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
      "GET /repos/{owner}/{repo}/commits",
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
      "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
      "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
      "GET /repos/{owner}/{repo}/commits/{ref}/status",
      "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
      "GET /repos/{owner}/{repo}/contributors",
      "GET /repos/{owner}/{repo}/dependabot/alerts",
      "GET /repos/{owner}/{repo}/dependabot/secrets",
      "GET /repos/{owner}/{repo}/deployments",
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
      "GET /repos/{owner}/{repo}/environments",
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
      "GET /repos/{owner}/{repo}/events",
      "GET /repos/{owner}/{repo}/forks",
      "GET /repos/{owner}/{repo}/hooks",
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
      "GET /repos/{owner}/{repo}/invitations",
      "GET /repos/{owner}/{repo}/issues",
      "GET /repos/{owner}/{repo}/issues/comments",
      "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      "GET /repos/{owner}/{repo}/issues/events",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
      "GET /repos/{owner}/{repo}/keys",
      "GET /repos/{owner}/{repo}/labels",
      "GET /repos/{owner}/{repo}/milestones",
      "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
      "GET /repos/{owner}/{repo}/notifications",
      "GET /repos/{owner}/{repo}/pages/builds",
      "GET /repos/{owner}/{repo}/projects",
      "GET /repos/{owner}/{repo}/pulls",
      "GET /repos/{owner}/{repo}/pulls/comments",
      "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
      "GET /repos/{owner}/{repo}/releases",
      "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
      "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
      "GET /repos/{owner}/{repo}/rules/branches/{branch}",
      "GET /repos/{owner}/{repo}/rulesets",
      "GET /repos/{owner}/{repo}/rulesets/rule-suites",
      "GET /repos/{owner}/{repo}/secret-scanning/alerts",
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
      "GET /repos/{owner}/{repo}/security-advisories",
      "GET /repos/{owner}/{repo}/stargazers",
      "GET /repos/{owner}/{repo}/subscribers",
      "GET /repos/{owner}/{repo}/tags",
      "GET /repos/{owner}/{repo}/teams",
      "GET /repos/{owner}/{repo}/topics",
      "GET /repositories",
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
      "GET /repositories/{repository_id}/environments/{environment_name}/variables",
      "GET /search/code",
      "GET /search/commits",
      "GET /search/issues",
      "GET /search/labels",
      "GET /search/repositories",
      "GET /search/topics",
      "GET /search/users",
      "GET /teams/{team_id}/discussions",
      "GET /teams/{team_id}/discussions/{discussion_number}/comments",
      "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
      "GET /teams/{team_id}/invitations",
      "GET /teams/{team_id}/members",
      "GET /teams/{team_id}/projects",
      "GET /teams/{team_id}/repos",
      "GET /teams/{team_id}/teams",
      "GET /user/blocks",
      "GET /user/codespaces",
      "GET /user/codespaces/secrets",
      "GET /user/emails",
      "GET /user/followers",
      "GET /user/following",
      "GET /user/gpg_keys",
      "GET /user/installations",
      "GET /user/installations/{installation_id}/repositories",
      "GET /user/issues",
      "GET /user/keys",
      "GET /user/marketplace_purchases",
      "GET /user/marketplace_purchases/stubbed",
      "GET /user/memberships/orgs",
      "GET /user/migrations",
      "GET /user/migrations/{migration_id}/repositories",
      "GET /user/orgs",
      "GET /user/packages",
      "GET /user/packages/{package_type}/{package_name}/versions",
      "GET /user/public_emails",
      "GET /user/repos",
      "GET /user/repository_invitations",
      "GET /user/social_accounts",
      "GET /user/ssh_signing_keys",
      "GET /user/starred",
      "GET /user/subscriptions",
      "GET /user/teams",
      "GET /users",
      "GET /users/{username}/events",
      "GET /users/{username}/events/orgs/{org}",
      "GET /users/{username}/events/public",
      "GET /users/{username}/followers",
      "GET /users/{username}/following",
      "GET /users/{username}/gists",
      "GET /users/{username}/gpg_keys",
      "GET /users/{username}/keys",
      "GET /users/{username}/orgs",
      "GET /users/{username}/packages",
      "GET /users/{username}/projects",
      "GET /users/{username}/received_events",
      "GET /users/{username}/received_events/public",
      "GET /users/{username}/repos",
      "GET /users/{username}/social_accounts",
      "GET /users/{username}/ssh_signing_keys",
      "GET /users/{username}/starred",
      "GET /users/{username}/subscriptions"
    ];
    function isPaginatingEndpoint(arg) {
      if (typeof arg === "string") {
        return paginatingEndpoints.includes(arg);
      } else {
        return false;
      }
    }
    function paginateRest(octokit) {
      return {
        paginate: Object.assign(paginate.bind(null, octokit), {
          iterator: iterator.bind(null, octokit)
        })
      };
    }
    paginateRest.VERSION = VERSION;
  }
});

// node_modules/@actions/github/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/@actions/github/lib/utils.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOctokitOptions = exports2.GitHub = exports2.defaults = exports2.context = void 0;
    var Context = __importStar(require_context());
    var Utils = __importStar(require_utils2());
    var core_1 = require_dist_node8();
    var plugin_rest_endpoint_methods_1 = require_dist_node9();
    var plugin_paginate_rest_1 = require_dist_node10();
    exports2.context = new Context.Context();
    var baseUrl = Utils.getApiBaseUrl();
    exports2.defaults = {
      baseUrl,
      request: {
        agent: Utils.getProxyAgent(baseUrl),
        fetch: Utils.getProxyFetch(baseUrl)
      }
    };
    exports2.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(exports2.defaults);
    function getOctokitOptions(token, options) {
      const opts = Object.assign({}, options || {});
      const auth = Utils.getAuthString(token, opts);
      if (auth) {
        opts.auth = auth;
      }
      return opts;
    }
    exports2.getOctokitOptions = getOctokitOptions;
  }
});

// node_modules/@actions/github/lib/github.js
var require_github = __commonJS({
  "node_modules/@actions/github/lib/github.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOctokit = exports2.context = void 0;
    var Context = __importStar(require_context());
    var utils_1 = require_utils3();
    exports2.context = new Context.Context();
    function getOctokit2(token, options, ...additionalPlugins) {
      const GitHubWithPlugins = utils_1.GitHub.plugin(...additionalPlugins);
      return new GitHubWithPlugins((0, utils_1.getOctokitOptions)(token, options));
    }
    exports2.getOctokit = getOctokit2;
  }
});

// node_modules/@linear/sdk/dist/index-cjs.min.js
var require_index_cjs_min = __commonJS({
  "node_modules/@linear/sdk/dist/index-cjs.min.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var e = require("stream");
    var i = require("http");
    var n = require("url");
    var a = require("https");
    var t = require("zlib");
    var d = require("crypto");
    function l(e2) {
      return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
    }
    var m;
    var o = l(e);
    var r = l(i);
    var s = l(n);
    var u = l(a);
    var k = l(t);
    var p = l(d);
    function c(e2, i2) {
      var n2 = {};
      for (var a2 in e2) Object.prototype.hasOwnProperty.call(e2, a2) && i2.indexOf(a2) < 0 && (n2[a2] = e2[a2]);
      if (null != e2 && "function" == typeof Object.getOwnPropertySymbols) {
        var t2 = 0;
        for (a2 = Object.getOwnPropertySymbols(e2); t2 < a2.length; t2++) i2.indexOf(a2[t2]) < 0 && Object.prototype.propertyIsEnumerable.call(e2, a2[t2]) && (n2[a2[t2]] = e2[a2[t2]]);
      }
      return n2;
    }
    function v(e2, i2, n2, a2) {
      return new (n2 || (n2 = Promise))(function(t2, d2) {
        function l2(e3) {
          try {
            o2(a2.next(e3));
          } catch (e4) {
            d2(e4);
          }
        }
        function m2(e3) {
          try {
            o2(a2.throw(e3));
          } catch (e4) {
            d2(e4);
          }
        }
        function o2(e3) {
          var i3;
          e3.done ? t2(e3.value) : (i3 = e3.value, i3 instanceof n2 ? i3 : new n2(function(e4) {
            e4(i3);
          })).then(l2, m2);
        }
        o2((a2 = a2.apply(e2, i2 || [])).next());
      });
    }
    function N(e2) {
      return null != e2;
    }
    "function" == typeof SuppressedError && SuppressedError, exports2.LinearErrorType = void 0, (m = exports2.LinearErrorType || (exports2.LinearErrorType = {})).FeatureNotAccessible = "FeatureNotAccessible", m.InvalidInput = "InvalidInput", m.Ratelimited = "Ratelimited", m.NetworkError = "NetworkError", m.AuthenticationError = "AuthenticationError", m.Forbidden = "Forbidden", m.BootstrapError = "BootstrapError", m.Unknown = "Unknown", m.InternalError = "InternalError", m.Other = "Other", m.UserError = "UserError", m.GraphqlError = "GraphqlError", m.LockTimeout = "LockTimeout";
    var h = { [exports2.LinearErrorType.FeatureNotAccessible]: "feature not accessible", [exports2.LinearErrorType.InvalidInput]: "invalid input", [exports2.LinearErrorType.Ratelimited]: "ratelimited", [exports2.LinearErrorType.NetworkError]: "network error", [exports2.LinearErrorType.AuthenticationError]: "authentication error", [exports2.LinearErrorType.Forbidden]: "forbidden", [exports2.LinearErrorType.BootstrapError]: "bootstrap error", [exports2.LinearErrorType.Unknown]: "unknown", [exports2.LinearErrorType.InternalError]: "internal error", [exports2.LinearErrorType.Other]: "other", [exports2.LinearErrorType.UserError]: "user error", [exports2.LinearErrorType.GraphqlError]: "graphql error", [exports2.LinearErrorType.LockTimeout]: "lock timeout" };
    function f(e2) {
      var i2, n2, a2;
      return null !== (n2 = h, a2 = e2, i2 = Object.keys(n2).find((e3) => n2[e3] === a2)) && void 0 !== i2 ? i2 : exports2.LinearErrorType.Unknown;
    }
    var S = "Unknown error from LinearClient";
    var y = class {
      constructor(e2) {
        var i2, n2, a2, t2, d2, l2, m2;
        this.type = f(null === (i2 = null == e2 ? void 0 : e2.extensions) || void 0 === i2 ? void 0 : i2.type), this.userError = null === (n2 = null == e2 ? void 0 : e2.extensions) || void 0 === n2 ? void 0 : n2.userError, this.path = null == e2 ? void 0 : e2.path, this.message = null !== (m2 = null !== (d2 = null !== (t2 = null === (a2 = null == e2 ? void 0 : e2.extensions) || void 0 === a2 ? void 0 : a2.userPresentableMessage) && void 0 !== t2 ? t2 : null == e2 ? void 0 : e2.message) && void 0 !== d2 ? d2 : null === (l2 = null == e2 ? void 0 : e2.extensions) || void 0 === l2 ? void 0 : l2.type) && void 0 !== m2 ? m2 : S;
      }
    };
    var b = class extends Error {
      constructor(e2, i2, n2) {
        var a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(null !== (m2 = Array.from(new Set([(k2 = null === (t2 = null === (a2 = null == e2 ? void 0 : e2.message) || void 0 === a2 ? void 0 : a2.split(": {")) || void 0 === t2 ? void 0 : t2[0], k2 ? `${k2.charAt(0).toUpperCase()}${k2.slice(1)}` : void 0), null === (d2 = null == e2 ? void 0 : e2.response) || void 0 === d2 ? void 0 : d2.error, null === (l2 = null == i2 ? void 0 : i2[0]) || void 0 === l2 ? void 0 : l2.message].filter(N))).filter(N).join(" - ")) && void 0 !== m2 ? m2 : S), this.type = n2, this.errors = i2, this.query = null === (o2 = null == e2 ? void 0 : e2.request) || void 0 === o2 ? void 0 : o2.query, this.variables = null === (r2 = null == e2 ? void 0 : e2.request) || void 0 === r2 ? void 0 : r2.variables, this.status = null === (s2 = null == e2 ? void 0 : e2.response) || void 0 === s2 ? void 0 : s2.status, this.data = null === (u2 = null == e2 ? void 0 : e2.response) || void 0 === u2 ? void 0 : u2.data, this.raw = e2;
      }
    };
    var g = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.FeatureNotAccessible);
      }
    };
    var D = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.InvalidInput);
      }
    };
    var F = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.Ratelimited);
      }
    };
    var V = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.NetworkError);
      }
    };
    var _ = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.AuthenticationError);
      }
    };
    var A = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.Forbidden);
      }
    };
    var T = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.BootstrapError);
      }
    };
    var w = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.Unknown);
      }
    };
    var I = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.InternalError);
      }
    };
    var C = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.Other);
      }
    };
    var P = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.UserError);
      }
    };
    var q = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.GraphqlError);
      }
    };
    var x = class extends b {
      constructor(e2, i2) {
        super(e2, i2, exports2.LinearErrorType.LockTimeout);
      }
    };
    var j = { [exports2.LinearErrorType.FeatureNotAccessible]: g, [exports2.LinearErrorType.InvalidInput]: D, [exports2.LinearErrorType.Ratelimited]: F, [exports2.LinearErrorType.NetworkError]: V, [exports2.LinearErrorType.AuthenticationError]: _, [exports2.LinearErrorType.Forbidden]: A, [exports2.LinearErrorType.BootstrapError]: T, [exports2.LinearErrorType.Unknown]: w, [exports2.LinearErrorType.InternalError]: I, [exports2.LinearErrorType.Other]: C, [exports2.LinearErrorType.UserError]: P, [exports2.LinearErrorType.GraphqlError]: q, [exports2.LinearErrorType.LockTimeout]: x };
    function O(e2) {
      var i2, n2, a2, t2, d2, l2;
      if (e2 instanceof b) return e2;
      const m2 = (null !== (n2 = null === (i2 = null == e2 ? void 0 : e2.response) || void 0 === i2 ? void 0 : i2.errors) && void 0 !== n2 ? n2 : []).map((e3) => new y(e3)), o2 = null === (a2 = null == e2 ? void 0 : e2.response) || void 0 === a2 ? void 0 : a2.status, r2 = null !== (d2 = null === (t2 = m2[0]) || void 0 === t2 ? void 0 : t2.type) && void 0 !== d2 ? d2 : 403 === o2 ? exports2.LinearErrorType.Forbidden : 429 === o2 ? exports2.LinearErrorType.Ratelimited : `${o2}`.startsWith("4") ? exports2.LinearErrorType.AuthenticationError : 500 === o2 ? exports2.LinearErrorType.InternalError : `${o2}`.startsWith("5") ? exports2.LinearErrorType.NetworkError : exports2.LinearErrorType.Unknown;
      return new (null !== (l2 = j[r2]) && void 0 !== l2 ? l2 : b)(e2, m2);
    }
    var U = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : void 0;
    function B(e2) {
      return B = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
        return typeof e3;
      } : function(e3) {
        return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
      }, B(e2);
    }
    var E = 10;
    var R = 2;
    function M(e2, i2) {
      switch (B(e2)) {
        case "string":
          return JSON.stringify(e2);
        case "function":
          return e2.name ? "[function ".concat(e2.name, "]") : "[function]";
        case "object":
          return null === e2 ? "null" : function(e3, i3) {
            if (-1 !== i3.indexOf(e3)) return "[Circular]";
            var n2 = [].concat(i3, [e3]), a2 = function(e4) {
              var i4 = e4[String(U)];
              if ("function" == typeof i4) return i4;
              if ("function" == typeof e4.inspect) return e4.inspect;
            }(e3);
            if (void 0 !== a2) {
              var t2 = a2.call(e3);
              if (t2 !== e3) return "string" == typeof t2 ? t2 : M(t2, n2);
            } else if (Array.isArray(e3)) return function(e4, i4) {
              if (0 === e4.length) return "[]";
              if (i4.length > R) return "[Array]";
              for (var n3 = Math.min(E, e4.length), a3 = e4.length - n3, t3 = [], d2 = 0; d2 < n3; ++d2) t3.push(M(e4[d2], i4));
              1 === a3 ? t3.push("... 1 more item") : a3 > 1 && t3.push("... ".concat(a3, " more items"));
              return "[" + t3.join(", ") + "]";
            }(e3, n2);
            return function(e4, i4) {
              var n3 = Object.keys(e4);
              if (0 === n3.length) return "{}";
              if (i4.length > R) return "[" + function(e5) {
                var i5 = Object.prototype.toString.call(e5).replace(/^\[object /, "").replace(/]$/, "");
                if ("Object" === i5 && "function" == typeof e5.constructor) {
                  var n4 = e5.constructor.name;
                  if ("string" == typeof n4 && "" !== n4) return n4;
                }
                return i5;
              }(e4) + "]";
              var a3 = n3.map(function(n4) {
                return n4 + ": " + M(e4[n4], i4);
              });
              return "{ " + a3.join(", ") + " }";
            }(e3, n2);
          }(e2, i2);
        default:
          return String(e2);
      }
    }
    function L(e2) {
      var i2 = e2.prototype.toJSON;
      "function" == typeof i2 || function(e3, i3) {
        if (!Boolean(e3)) throw new Error(null != i3 ? i3 : "Unexpected invariant triggered.");
      }(0), e2.prototype.inspect = i2, U && (e2.prototype[U] = i2);
    }
    function z(e2) {
      return null != e2 && "string" == typeof e2.kind;
    }
    L(function() {
      function e2(e3, i2, n2) {
        this.start = e3.start, this.end = i2.end, this.startToken = e3, this.endToken = i2, this.source = n2;
      }
      return e2.prototype.toJSON = function() {
        return { start: this.start, end: this.end };
      }, e2;
    }()), L(function() {
      function e2(e3, i2, n2, a2, t2, d2, l2) {
        this.kind = e3, this.start = i2, this.end = n2, this.line = a2, this.column = t2, this.value = l2, this.prev = d2, this.next = null;
      }
      return e2.prototype.toJSON = function() {
        return { kind: this.kind, value: this.value, line: this.line, column: this.column };
      }, e2;
    }());
    var H = { Name: [], Document: ["definitions"], OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"], VariableDefinition: ["variable", "type", "defaultValue", "directives"], Variable: ["name"], SelectionSet: ["selections"], Field: ["alias", "name", "arguments", "directives", "selectionSet"], Argument: ["name", "value"], FragmentSpread: ["name", "directives"], InlineFragment: ["typeCondition", "directives", "selectionSet"], FragmentDefinition: ["name", "variableDefinitions", "typeCondition", "directives", "selectionSet"], IntValue: [], FloatValue: [], StringValue: [], BooleanValue: [], NullValue: [], EnumValue: [], ListValue: ["values"], ObjectValue: ["fields"], ObjectField: ["name", "value"], Directive: ["name", "arguments"], NamedType: ["name"], ListType: ["type"], NonNullType: ["type"], SchemaDefinition: ["description", "directives", "operationTypes"], OperationTypeDefinition: ["type"], ScalarTypeDefinition: ["description", "name", "directives"], ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"], FieldDefinition: ["description", "name", "arguments", "type", "directives"], InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"], InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"], UnionTypeDefinition: ["description", "name", "directives", "types"], EnumTypeDefinition: ["description", "name", "directives", "values"], EnumValueDefinition: ["description", "name", "directives"], InputObjectTypeDefinition: ["description", "name", "directives", "fields"], DirectiveDefinition: ["description", "name", "arguments", "locations"], SchemaExtension: ["directives", "operationTypes"], ScalarTypeExtension: ["name", "directives"], ObjectTypeExtension: ["name", "interfaces", "directives", "fields"], InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"], UnionTypeExtension: ["name", "directives", "types"], EnumTypeExtension: ["name", "directives", "values"], InputObjectTypeExtension: ["name", "directives", "fields"] };
    var G = Object.freeze({});
    function W(e2, i2, n2) {
      var a2 = e2[i2];
      if (a2) {
        if (!n2 && "function" == typeof a2) return a2;
        var t2 = n2 ? a2.leave : a2.enter;
        if ("function" == typeof t2) return t2;
      } else {
        var d2 = n2 ? e2.leave : e2.enter;
        if (d2) {
          if ("function" == typeof d2) return d2;
          var l2 = d2[i2];
          if ("function" == typeof l2) return l2;
        }
      }
    }
    function Q(e2) {
      return function(e3, i2) {
        var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : H, a2 = void 0, t2 = Array.isArray(e3), d2 = [e3], l2 = -1, m2 = [], o2 = void 0, r2 = void 0, s2 = void 0, u2 = [], k2 = [], p2 = e3;
        do {
          var c2 = ++l2 === d2.length, v2 = c2 && 0 !== m2.length;
          if (c2) {
            if (r2 = 0 === k2.length ? void 0 : u2[u2.length - 1], o2 = s2, s2 = k2.pop(), v2) {
              if (t2) o2 = o2.slice();
              else {
                for (var N2 = {}, h2 = 0, f2 = Object.keys(o2); h2 < f2.length; h2++) {
                  var S2 = f2[h2];
                  N2[S2] = o2[S2];
                }
                o2 = N2;
              }
              for (var y2 = 0, b2 = 0; b2 < m2.length; b2++) {
                var g2 = m2[b2][0], D2 = m2[b2][1];
                t2 && (g2 -= y2), t2 && null === D2 ? (o2.splice(g2, 1), y2++) : o2[g2] = D2;
              }
            }
            l2 = a2.index, d2 = a2.keys, m2 = a2.edits, t2 = a2.inArray, a2 = a2.prev;
          } else {
            if (r2 = s2 ? t2 ? l2 : d2[l2] : void 0, null == (o2 = s2 ? s2[r2] : p2)) continue;
            s2 && u2.push(r2);
          }
          var F2, V2 = void 0;
          if (!Array.isArray(o2)) {
            if (!z(o2)) throw new Error("Invalid AST Node: ".concat(M(o2, []), "."));
            var _2 = W(i2, o2.kind, c2);
            if (_2) {
              if ((V2 = _2.call(i2, o2, r2, s2, u2, k2)) === G) break;
              if (false === V2) {
                if (!c2) {
                  u2.pop();
                  continue;
                }
              } else if (void 0 !== V2 && (m2.push([r2, V2]), !c2)) {
                if (!z(V2)) {
                  u2.pop();
                  continue;
                }
                o2 = V2;
              }
            }
          }
          void 0 === V2 && v2 && m2.push([r2, o2]), c2 ? u2.pop() : (a2 = { inArray: t2, index: l2, keys: d2, edits: m2, prev: a2 }, d2 = (t2 = Array.isArray(o2)) ? o2 : null !== (F2 = n2[o2.kind]) && void 0 !== F2 ? F2 : [], l2 = -1, m2 = [], s2 && k2.push(s2), s2 = o2);
        } while (void 0 !== a2);
        return 0 !== m2.length && (p2 = m2[m2.length - 1][1]), p2;
      }(e2, { leave: J });
    }
    var J = { Name: function(e2) {
      return e2.value;
    }, Variable: function(e2) {
      return "$" + e2.name;
    }, Document: function(e2) {
      return $(e2.definitions, "\n\n") + "\n";
    }, OperationDefinition: function(e2) {
      var i2 = e2.operation, n2 = e2.name, a2 = Y("(", $(e2.variableDefinitions, ", "), ")"), t2 = $(e2.directives, " "), d2 = e2.selectionSet;
      return n2 || t2 || a2 || "query" !== i2 ? $([i2, $([n2, a2]), t2, d2], " ") : d2;
    }, VariableDefinition: function(e2) {
      var i2 = e2.variable, n2 = e2.type, a2 = e2.defaultValue, t2 = e2.directives;
      return i2 + ": " + n2 + Y(" = ", a2) + Y(" ", $(t2, " "));
    }, SelectionSet: function(e2) {
      return Z(e2.selections);
    }, Field: function(e2) {
      var i2 = e2.alias, n2 = e2.name, a2 = e2.arguments, t2 = e2.directives, d2 = e2.selectionSet, l2 = Y("", i2, ": ") + n2, m2 = l2 + Y("(", $(a2, ", "), ")");
      return m2.length > 80 && (m2 = l2 + Y("(\n", X($(a2, "\n")), "\n)")), $([m2, $(t2, " "), d2], " ");
    }, Argument: function(e2) {
      return e2.name + ": " + e2.value;
    }, FragmentSpread: function(e2) {
      return "..." + e2.name + Y(" ", $(e2.directives, " "));
    }, InlineFragment: function(e2) {
      var i2 = e2.typeCondition, n2 = e2.directives, a2 = e2.selectionSet;
      return $(["...", Y("on ", i2), $(n2, " "), a2], " ");
    }, FragmentDefinition: function(e2) {
      var i2 = e2.name, n2 = e2.typeCondition, a2 = e2.variableDefinitions, t2 = e2.directives, d2 = e2.selectionSet;
      return "fragment ".concat(i2).concat(Y("(", $(a2, ", "), ")"), " ") + "on ".concat(n2, " ").concat(Y("", $(t2, " "), " ")) + d2;
    }, IntValue: function(e2) {
      return e2.value;
    }, FloatValue: function(e2) {
      return e2.value;
    }, StringValue: function(e2, i2) {
      var n2 = e2.value;
      return e2.block ? function(e3) {
        var i3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], a2 = -1 === e3.indexOf("\n"), t2 = " " === e3[0] || "	" === e3[0], d2 = '"' === e3[e3.length - 1], l2 = "\\" === e3[e3.length - 1], m2 = !a2 || d2 || l2 || n3, o2 = "";
        return !m2 || a2 && t2 || (o2 += "\n" + i3), o2 += i3 ? e3.replace(/\n/g, "\n" + i3) : e3, m2 && (o2 += "\n"), '"""' + o2.replace(/"""/g, '\\"""') + '"""';
      }(n2, "description" === i2 ? "" : "  ") : JSON.stringify(n2);
    }, BooleanValue: function(e2) {
      return e2.value ? "true" : "false";
    }, NullValue: function() {
      return "null";
    }, EnumValue: function(e2) {
      return e2.value;
    }, ListValue: function(e2) {
      return "[" + $(e2.values, ", ") + "]";
    }, ObjectValue: function(e2) {
      return "{" + $(e2.fields, ", ") + "}";
    }, ObjectField: function(e2) {
      return e2.name + ": " + e2.value;
    }, Directive: function(e2) {
      return "@" + e2.name + Y("(", $(e2.arguments, ", "), ")");
    }, NamedType: function(e2) {
      return e2.name;
    }, ListType: function(e2) {
      return "[" + e2.type + "]";
    }, NonNullType: function(e2) {
      return e2.type + "!";
    }, SchemaDefinition: K(function(e2) {
      var i2 = e2.directives, n2 = e2.operationTypes;
      return $(["schema", $(i2, " "), Z(n2)], " ");
    }), OperationTypeDefinition: function(e2) {
      return e2.operation + ": " + e2.type;
    }, ScalarTypeDefinition: K(function(e2) {
      return $(["scalar", e2.name, $(e2.directives, " ")], " ");
    }), ObjectTypeDefinition: K(function(e2) {
      var i2 = e2.name, n2 = e2.interfaces, a2 = e2.directives, t2 = e2.fields;
      return $(["type", i2, Y("implements ", $(n2, " & ")), $(a2, " "), Z(t2)], " ");
    }), FieldDefinition: K(function(e2) {
      var i2 = e2.name, n2 = e2.arguments, a2 = e2.type, t2 = e2.directives;
      return i2 + (ie(n2) ? Y("(\n", X($(n2, "\n")), "\n)") : Y("(", $(n2, ", "), ")")) + ": " + a2 + Y(" ", $(t2, " "));
    }), InputValueDefinition: K(function(e2) {
      var i2 = e2.name, n2 = e2.type, a2 = e2.defaultValue, t2 = e2.directives;
      return $([i2 + ": " + n2, Y("= ", a2), $(t2, " ")], " ");
    }), InterfaceTypeDefinition: K(function(e2) {
      var i2 = e2.name, n2 = e2.interfaces, a2 = e2.directives, t2 = e2.fields;
      return $(["interface", i2, Y("implements ", $(n2, " & ")), $(a2, " "), Z(t2)], " ");
    }), UnionTypeDefinition: K(function(e2) {
      var i2 = e2.name, n2 = e2.directives, a2 = e2.types;
      return $(["union", i2, $(n2, " "), a2 && 0 !== a2.length ? "= " + $(a2, " | ") : ""], " ");
    }), EnumTypeDefinition: K(function(e2) {
      var i2 = e2.name, n2 = e2.directives, a2 = e2.values;
      return $(["enum", i2, $(n2, " "), Z(a2)], " ");
    }), EnumValueDefinition: K(function(e2) {
      return $([e2.name, $(e2.directives, " ")], " ");
    }), InputObjectTypeDefinition: K(function(e2) {
      var i2 = e2.name, n2 = e2.directives, a2 = e2.fields;
      return $(["input", i2, $(n2, " "), Z(a2)], " ");
    }), DirectiveDefinition: K(function(e2) {
      var i2 = e2.name, n2 = e2.arguments, a2 = e2.repeatable, t2 = e2.locations;
      return "directive @" + i2 + (ie(n2) ? Y("(\n", X($(n2, "\n")), "\n)") : Y("(", $(n2, ", "), ")")) + (a2 ? " repeatable" : "") + " on " + $(t2, " | ");
    }), SchemaExtension: function(e2) {
      var i2 = e2.directives, n2 = e2.operationTypes;
      return $(["extend schema", $(i2, " "), Z(n2)], " ");
    }, ScalarTypeExtension: function(e2) {
      return $(["extend scalar", e2.name, $(e2.directives, " ")], " ");
    }, ObjectTypeExtension: function(e2) {
      var i2 = e2.name, n2 = e2.interfaces, a2 = e2.directives, t2 = e2.fields;
      return $(["extend type", i2, Y("implements ", $(n2, " & ")), $(a2, " "), Z(t2)], " ");
    }, InterfaceTypeExtension: function(e2) {
      var i2 = e2.name, n2 = e2.interfaces, a2 = e2.directives, t2 = e2.fields;
      return $(["extend interface", i2, Y("implements ", $(n2, " & ")), $(a2, " "), Z(t2)], " ");
    }, UnionTypeExtension: function(e2) {
      var i2 = e2.name, n2 = e2.directives, a2 = e2.types;
      return $(["extend union", i2, $(n2, " "), a2 && 0 !== a2.length ? "= " + $(a2, " | ") : ""], " ");
    }, EnumTypeExtension: function(e2) {
      var i2 = e2.name, n2 = e2.directives, a2 = e2.values;
      return $(["extend enum", i2, $(n2, " "), Z(a2)], " ");
    }, InputObjectTypeExtension: function(e2) {
      var i2 = e2.name, n2 = e2.directives, a2 = e2.fields;
      return $(["extend input", i2, $(n2, " "), Z(a2)], " ");
    } };
    function K(e2) {
      return function(i2) {
        return $([i2.description, e2(i2)], "\n");
      };
    }
    function $(e2) {
      var i2, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
      return null !== (i2 = null == e2 ? void 0 : e2.filter(function(e3) {
        return e3;
      }).join(n2)) && void 0 !== i2 ? i2 : "";
    }
    function Z(e2) {
      return Y("{\n", X($(e2, "\n")), "\n}");
    }
    function Y(e2, i2) {
      return null != i2 && "" !== i2 ? e2 + i2 + (arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "") : "";
    }
    function X(e2) {
      return Y("  ", e2.replace(/\n/g, "\n  "));
    }
    function ee(e2) {
      return -1 !== e2.indexOf("\n");
    }
    function ie(e2) {
      return null != e2 && e2.some(ee);
    }
    var ne = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
    function ae(e2) {
      if (e2.__esModule) return e2;
      var i2 = Object.defineProperty({}, "__esModule", { value: true });
      return Object.keys(e2).forEach(function(n2) {
        var a2 = Object.getOwnPropertyDescriptor(e2, n2);
        Object.defineProperty(i2, n2, a2.get ? a2 : { enumerable: true, get: function() {
          return e2[n2];
        } });
      }), i2;
    }
    function te(e2) {
      var i2 = { exports: {} };
      return e2(i2, i2.exports), i2.exports;
    }
    var de = Object.freeze({ __proto__: null, default: function(e2, i2) {
      return i2 = i2 || {}, new Promise(function(n2, a2) {
        var t2 = new XMLHttpRequest(), d2 = [], l2 = [], m2 = {}, o2 = function() {
          return { ok: 2 == (t2.status / 100 | 0), statusText: t2.statusText, status: t2.status, url: t2.responseURL, text: function() {
            return Promise.resolve(t2.responseText);
          }, json: function() {
            return Promise.resolve(t2.responseText).then(JSON.parse);
          }, blob: function() {
            return Promise.resolve(new Blob([t2.response]));
          }, clone: o2, headers: { keys: function() {
            return d2;
          }, entries: function() {
            return l2;
          }, get: function(e3) {
            return m2[e3.toLowerCase()];
          }, has: function(e3) {
            return e3.toLowerCase() in m2;
          } } };
        };
        for (var r2 in t2.open(i2.method || "get", e2, true), t2.onload = function() {
          t2.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e3, i3, n3) {
            d2.push(i3 = i3.toLowerCase()), l2.push([i3, n3]), m2[i3] = m2[i3] ? m2[i3] + "," + n3 : n3;
          }), n2(o2());
        }, t2.onerror = a2, t2.withCredentials = "include" == i2.credentials, i2.headers) t2.setRequestHeader(r2, i2.headers[r2]);
        t2.send(i2.body || null);
      });
    } });
    var le = {};
    var me = le;
    function oe(e2) {
      return e2 < 0 ? -1 : 1;
    }
    function re(e2, i2) {
      i2.unsigned || --e2;
      const n2 = i2.unsigned ? 0 : -Math.pow(2, e2), a2 = Math.pow(2, e2) - 1, t2 = i2.moduloBitLength ? Math.pow(2, i2.moduloBitLength) : Math.pow(2, e2), d2 = i2.moduloBitLength ? Math.pow(2, i2.moduloBitLength - 1) : Math.pow(2, e2 - 1);
      return function(e3, l2) {
        l2 || (l2 = {});
        let m2 = +e3;
        if (l2.enforceRange) {
          if (!Number.isFinite(m2)) throw new TypeError("Argument is not a finite number");
          if (m2 = oe(m2) * Math.floor(Math.abs(m2)), m2 < n2 || m2 > a2) throw new TypeError("Argument is not in byte range");
          return m2;
        }
        if (!isNaN(m2) && l2.clamp) return m2 = function(e4) {
          return e4 % 1 != 0.5 || 1 & e4 ? Math.round(e4) : Math.floor(e4);
        }(m2), m2 < n2 && (m2 = n2), m2 > a2 && (m2 = a2), m2;
        if (!Number.isFinite(m2) || 0 === m2) return 0;
        if (m2 = oe(m2) * Math.floor(Math.abs(m2)), m2 %= t2, !i2.unsigned && m2 >= d2) return m2 - t2;
        if (i2.unsigned) {
          if (m2 < 0) m2 += t2;
          else if (-0 === m2) return 0;
        }
        return m2;
      };
    }
    le.void = function() {
    }, le.boolean = function(e2) {
      return !!e2;
    }, le.byte = re(8, { unsigned: false }), le.octet = re(8, { unsigned: true }), le.short = re(16, { unsigned: false }), le["unsigned short"] = re(16, { unsigned: true }), le.long = re(32, { unsigned: false }), le["unsigned long"] = re(32, { unsigned: true }), le["long long"] = re(32, { unsigned: false, moduloBitLength: 64 }), le["unsigned long long"] = re(32, { unsigned: true, moduloBitLength: 64 }), le.double = function(e2) {
      const i2 = +e2;
      if (!Number.isFinite(i2)) throw new TypeError("Argument is not a finite floating-point value");
      return i2;
    }, le["unrestricted double"] = function(e2) {
      const i2 = +e2;
      if (isNaN(i2)) throw new TypeError("Argument is NaN");
      return i2;
    }, le.float = le.double, le["unrestricted float"] = le["unrestricted double"], le.DOMString = function(e2, i2) {
      return i2 || (i2 = {}), i2.treatNullAsEmptyString && null === e2 ? "" : String(e2);
    }, le.ByteString = function(e2, i2) {
      const n2 = String(e2);
      let a2;
      for (let e3 = 0; void 0 !== (a2 = n2.codePointAt(e3)); ++e3) if (a2 > 255) throw new TypeError("Argument is not a valid bytestring");
      return n2;
    }, le.USVString = function(e2) {
      const i2 = String(e2), n2 = i2.length, a2 = [];
      for (let e3 = 0; e3 < n2; ++e3) {
        const t2 = i2.charCodeAt(e3);
        if (t2 < 55296 || t2 > 57343) a2.push(String.fromCodePoint(t2));
        else if (56320 <= t2 && t2 <= 57343) a2.push(String.fromCodePoint(65533));
        else if (e3 === n2 - 1) a2.push(String.fromCodePoint(65533));
        else {
          const n3 = i2.charCodeAt(e3 + 1);
          if (56320 <= n3 && n3 <= 57343) {
            const i3 = 1023 & t2, d2 = 1023 & n3;
            a2.push(String.fromCodePoint(65536 + 1024 * i3 + d2)), ++e3;
          } else a2.push(String.fromCodePoint(65533));
        }
      }
      return a2.join("");
    }, le.Date = function(e2, i2) {
      if (!(e2 instanceof Date)) throw new TypeError("Argument is not a Date object");
      if (!isNaN(e2)) return e2;
    }, le.RegExp = function(e2, i2) {
      return e2 instanceof RegExp || (e2 = new RegExp(e2)), e2;
    };
    var se = te(function(e2) {
      e2.exports.mixin = function(e3, i2) {
        const n2 = Object.getOwnPropertyNames(i2);
        for (let a2 = 0; a2 < n2.length; ++a2) Object.defineProperty(e3, n2[a2], Object.getOwnPropertyDescriptor(i2, n2[a2]));
      }, e2.exports.wrapperSymbol = Symbol("wrapper"), e2.exports.implSymbol = Symbol("impl"), e2.exports.wrapperForImpl = function(i2) {
        return i2[e2.exports.wrapperSymbol];
      }, e2.exports.implForWrapper = function(i2) {
        return i2[e2.exports.implSymbol];
      };
    });
    var ue = 2147483647;
    var ke = 36;
    var pe = /^xn--/;
    var ce = /[^\0-\x7F]/;
    var ve = /[\x2E\u3002\uFF0E\uFF61]/g;
    var Ne = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" };
    var he = Math.floor;
    var fe = String.fromCharCode;
    function Se(e2) {
      throw new RangeError(Ne[e2]);
    }
    function ye(e2, i2) {
      const n2 = e2.split("@");
      let a2 = "";
      n2.length > 1 && (a2 = n2[0] + "@", e2 = n2[1]);
      const t2 = function(e3, i3) {
        const n3 = [];
        let a3 = e3.length;
        for (; a3--; ) n3[a3] = i3(e3[a3]);
        return n3;
      }((e2 = e2.replace(ve, ".")).split("."), i2).join(".");
      return a2 + t2;
    }
    function be(e2) {
      const i2 = [];
      let n2 = 0;
      const a2 = e2.length;
      for (; n2 < a2; ) {
        const t2 = e2.charCodeAt(n2++);
        if (t2 >= 55296 && t2 <= 56319 && n2 < a2) {
          const a3 = e2.charCodeAt(n2++);
          56320 == (64512 & a3) ? i2.push(((1023 & t2) << 10) + (1023 & a3) + 65536) : (i2.push(t2), n2--);
        } else i2.push(t2);
      }
      return i2;
    }
    var ge = function(e2, i2) {
      return e2 + 22 + 75 * (e2 < 26) - ((0 != i2) << 5);
    };
    var De = function(e2, i2, n2) {
      let a2 = 0;
      for (e2 = n2 ? he(e2 / 700) : e2 >> 1, e2 += he(e2 / i2); e2 > 455; a2 += ke) e2 = he(e2 / 35);
      return he(a2 + 36 * e2 / (e2 + 38));
    };
    var Fe = function(e2) {
      const i2 = [], n2 = e2.length;
      let a2 = 0, t2 = 128, d2 = 72, l2 = e2.lastIndexOf("-");
      l2 < 0 && (l2 = 0);
      for (let n3 = 0; n3 < l2; ++n3) e2.charCodeAt(n3) >= 128 && Se("not-basic"), i2.push(e2.charCodeAt(n3));
      for (let o2 = l2 > 0 ? l2 + 1 : 0; o2 < n2; ) {
        const l3 = a2;
        for (let i3 = 1, t3 = ke; ; t3 += ke) {
          o2 >= n2 && Se("invalid-input");
          const l4 = (m2 = e2.charCodeAt(o2++)) >= 48 && m2 < 58 ? m2 - 48 + 26 : m2 >= 65 && m2 < 91 ? m2 - 65 : m2 >= 97 && m2 < 123 ? m2 - 97 : ke;
          l4 >= ke && Se("invalid-input"), l4 > he((ue - a2) / i3) && Se("overflow"), a2 += l4 * i3;
          const r3 = t3 <= d2 ? 1 : t3 >= d2 + 26 ? 26 : t3 - d2;
          if (l4 < r3) break;
          const s2 = ke - r3;
          i3 > he(ue / s2) && Se("overflow"), i3 *= s2;
        }
        const r2 = i2.length + 1;
        d2 = De(a2 - l3, r2, 0 == l3), he(a2 / r2) > ue - t2 && Se("overflow"), t2 += he(a2 / r2), a2 %= r2, i2.splice(a2++, 0, t2);
      }
      var m2;
      return String.fromCodePoint(...i2);
    };
    var Ve = function(e2) {
      const i2 = [], n2 = (e2 = be(e2)).length;
      let a2 = 128, t2 = 0, d2 = 72;
      for (const n3 of e2) n3 < 128 && i2.push(fe(n3));
      const l2 = i2.length;
      let m2 = l2;
      for (l2 && i2.push("-"); m2 < n2; ) {
        let n3 = ue;
        for (const i3 of e2) i3 >= a2 && i3 < n3 && (n3 = i3);
        const o2 = m2 + 1;
        n3 - a2 > he((ue - t2) / o2) && Se("overflow"), t2 += (n3 - a2) * o2, a2 = n3;
        for (const n4 of e2) if (n4 < a2 && ++t2 > ue && Se("overflow"), n4 === a2) {
          let e3 = t2;
          for (let n5 = ke; ; n5 += ke) {
            const a3 = n5 <= d2 ? 1 : n5 >= d2 + 26 ? 26 : n5 - d2;
            if (e3 < a3) break;
            const t3 = e3 - a3, l3 = ke - a3;
            i2.push(fe(ge(a3 + t3 % l3, 0))), e3 = he(t3 / l3);
          }
          i2.push(fe(ge(e3, 0))), d2 = De(t2, o2, m2 === l2), t2 = 0, ++m2;
        }
        ++t2, ++a2;
      }
      return i2.join("");
    };
    var _e = { version: "2.3.1", ucs2: { decode: be, encode: (e2) => String.fromCodePoint(...e2) }, decode: Fe, encode: Ve, toASCII: function(e2) {
      return ye(e2, function(e3) {
        return ce.test(e3) ? "xn--" + Ve(e3) : e3;
      });
    }, toUnicode: function(e2) {
      return ye(e2, function(e3) {
        return pe.test(e3) ? Fe(e3.slice(4).toLowerCase()) : e3;
      });
    } };
    var Ae = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
    var Te = { TRANSITIONAL: 0, NONTRANSITIONAL: 1 };
    function we(e2) {
      return e2.split("\0").map(function(e3) {
        return e3.normalize("NFC");
      }).join("\0");
    }
    function Ie(e2) {
      for (var i2 = 0, n2 = Ae.length - 1; i2 <= n2; ) {
        var a2 = Math.floor((i2 + n2) / 2), t2 = Ae[a2];
        if (t2[0][0] <= e2 && t2[0][1] >= e2) return t2;
        t2[0][0] > e2 ? n2 = a2 - 1 : i2 = a2 + 1;
      }
      return null;
    }
    var Ce = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    function Pe(e2) {
      return e2.replace(Ce, "_").length;
    }
    var qe = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
    function xe(e2, i2) {
      "xn--" === e2.substr(0, 4) && (e2 = _e.toUnicode(e2));
      var n2 = false;
      (we(e2) !== e2 || "-" === e2[3] && "-" === e2[4] || "-" === e2[0] || "-" === e2[e2.length - 1] || -1 !== e2.indexOf(".") || 0 === e2.search(qe)) && (n2 = true);
      for (var a2 = Pe(e2), t2 = 0; t2 < a2; ++t2) {
        var d2 = Ie(e2.codePointAt(t2));
        if (je === Te.TRANSITIONAL && "valid" !== d2[1] || je === Te.NONTRANSITIONAL && "valid" !== d2[1] && "deviation" !== d2[1]) {
          n2 = true;
          break;
        }
      }
      return { label: e2, error: n2 };
    }
    function je(e2, i2, n2) {
      var a2 = function(e3, i3, n3) {
        for (var a3 = false, t3 = "", d3 = Pe(e3), l3 = 0; l3 < d3; ++l3) {
          var m2 = e3.codePointAt(l3), o2 = Ie(m2);
          switch (o2[1]) {
            case "disallowed":
              a3 = true, t3 += String.fromCodePoint(m2);
              break;
            case "ignored":
              break;
            case "mapped":
              t3 += String.fromCodePoint.apply(String, o2[2]);
              break;
            case "deviation":
              n3 === Te.TRANSITIONAL ? t3 += String.fromCodePoint.apply(String, o2[2]) : t3 += String.fromCodePoint(m2);
              break;
            case "valid":
              t3 += String.fromCodePoint(m2);
              break;
            case "disallowed_STD3_mapped":
              i3 ? (a3 = true, t3 += String.fromCodePoint(m2)) : t3 += String.fromCodePoint.apply(String, o2[2]);
              break;
            case "disallowed_STD3_valid":
              i3 && (a3 = true), t3 += String.fromCodePoint(m2);
          }
        }
        return { string: t3, error: a3 };
      }(e2, i2, n2);
      a2.string = we(a2.string);
      for (var t2 = a2.string.split("."), d2 = 0; d2 < t2.length; ++d2) try {
        var l2 = xe(t2[d2]);
        t2[d2] = l2.label, a2.error = a2.error || l2.error;
      } catch (e3) {
        a2.error = true;
      }
      return { string: t2.join("."), error: a2.error };
    }
    var Oe = { toASCII: function(e2, i2, n2, a2) {
      var t2 = je(e2, i2, n2), d2 = t2.string.split(".");
      if (d2 = d2.map(function(e3) {
        try {
          return _e.toASCII(e3);
        } catch (i3) {
          return t2.error = true, e3;
        }
      }), a2) {
        var l2 = d2.slice(0, d2.length - 1).join(".").length;
        (l2.length > 253 || 0 === l2.length) && (t2.error = true);
        for (var m2 = 0; m2 < d2.length; ++m2) if (d2.length > 63 || 0 === d2.length) {
          t2.error = true;
          break;
        }
      }
      return t2.error ? null : d2.join(".");
    }, toUnicode: function(e2, i2) {
      var n2 = je(e2, i2, Te.NONTRANSITIONAL);
      return { domain: n2.string, error: n2.error };
    }, PROCESSING_OPTIONS: Te };
    var Ue = te(function(e2) {
      const i2 = { ftp: 21, file: null, gopher: 70, http: 80, https: 443, ws: 80, wss: 443 }, n2 = Symbol("failure");
      function a2(e3) {
        return _e.ucs2.decode(e3).length;
      }
      function t2(e3, i3) {
        const n3 = e3[i3];
        return isNaN(n3) ? void 0 : String.fromCodePoint(n3);
      }
      function d2(e3) {
        return e3 >= 48 && e3 <= 57;
      }
      function l2(e3) {
        return e3 >= 65 && e3 <= 90 || e3 >= 97 && e3 <= 122;
      }
      function m2(e3) {
        return d2(e3) || e3 >= 65 && e3 <= 70 || e3 >= 97 && e3 <= 102;
      }
      function o2(e3) {
        return "." === e3 || "%2e" === e3.toLowerCase();
      }
      function r2(e3) {
        return 2 === e3.length && l2(e3.codePointAt(0)) && (":" === e3[1] || "|" === e3[1]);
      }
      function s2(e3) {
        return void 0 !== i2[e3];
      }
      function u2(e3) {
        return s2(e3.scheme);
      }
      function k2(e3) {
        let i3 = e3.toString(16).toUpperCase();
        return 1 === i3.length && (i3 = "0" + i3), "%" + i3;
      }
      function p2(e3) {
        return e3 <= 31 || e3 > 126;
      }
      const c2 = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
      function v2(e3) {
        return p2(e3) || c2.has(e3);
      }
      const N2 = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
      function h2(e3) {
        return v2(e3) || N2.has(e3);
      }
      function f2(e3, i3) {
        const n3 = String.fromCodePoint(e3);
        return i3(e3) ? function(e4) {
          const i4 = new Buffer(e4);
          let n4 = "";
          for (let e5 = 0; e5 < i4.length; ++e5) n4 += k2(i4[e5]);
          return n4;
        }(n3) : n3;
      }
      function S2(e3) {
        let i3 = 10;
        if (e3.length >= 2 && "0" === e3.charAt(0) && "x" === e3.charAt(1).toLowerCase() ? (e3 = e3.substring(2), i3 = 16) : e3.length >= 2 && "0" === e3.charAt(0) && (e3 = e3.substring(1), i3 = 8), "" === e3) return 0;
        return (10 === i3 ? /[^0-9]/ : 16 === i3 ? /[^0-9A-Fa-f]/ : /[^0-7]/).test(e3) ? n2 : parseInt(e3, i3);
      }
      function y2(e3, i3) {
        if ("[" === e3[0]) return "]" !== e3[e3.length - 1] ? n2 : function(e4) {
          const i4 = [0, 0, 0, 0, 0, 0, 0, 0];
          let a4 = 0, l4 = null, o4 = 0;
          if (58 === (e4 = _e.ucs2.decode(e4))[o4]) {
            if (58 !== e4[o4 + 1]) return n2;
            o4 += 2, ++a4, l4 = a4;
          }
          for (; o4 < e4.length; ) {
            if (8 === a4) return n2;
            if (58 === e4[o4]) {
              if (null !== l4) return n2;
              ++o4, ++a4, l4 = a4;
              continue;
            }
            let r3 = 0, s3 = 0;
            for (; s3 < 4 && m2(e4[o4]); ) r3 = 16 * r3 + parseInt(t2(e4, o4), 16), ++o4, ++s3;
            if (46 === e4[o4]) {
              if (0 === s3) return n2;
              if (o4 -= s3, a4 > 6) return n2;
              let l5 = 0;
              for (; void 0 !== e4[o4]; ) {
                let m3 = null;
                if (l5 > 0) {
                  if (!(46 === e4[o4] && l5 < 4)) return n2;
                  ++o4;
                }
                if (!d2(e4[o4])) return n2;
                for (; d2(e4[o4]); ) {
                  const i5 = parseInt(t2(e4, o4));
                  if (null === m3) m3 = i5;
                  else {
                    if (0 === m3) return n2;
                    m3 = 10 * m3 + i5;
                  }
                  if (m3 > 255) return n2;
                  ++o4;
                }
                i4[a4] = 256 * i4[a4] + m3, ++l5, 2 !== l5 && 4 !== l5 || ++a4;
              }
              if (4 !== l5) return n2;
              break;
            }
            if (58 === e4[o4]) {
              if (++o4, void 0 === e4[o4]) return n2;
            } else if (void 0 !== e4[o4]) return n2;
            i4[a4] = r3, ++a4;
          }
          if (null !== l4) {
            let e5 = a4 - l4;
            for (a4 = 7; 0 !== a4 && e5 > 0; ) {
              const n3 = i4[l4 + e5 - 1];
              i4[l4 + e5 - 1] = i4[a4], i4[a4] = n3, --a4, --e5;
            }
          } else if (null === l4 && 8 !== a4) return n2;
          return i4;
        }(e3.substring(1, e3.length - 1));
        if (!i3) return function(e4) {
          if (i4 = e4, -1 !== i4.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/)) return n2;
          var i4;
          let a4 = "";
          const t3 = _e.ucs2.decode(e4);
          for (let e5 = 0; e5 < t3.length; ++e5) a4 += f2(t3[e5], p2);
          return a4;
        }(e3);
        const a3 = function(e4) {
          const i4 = new Buffer(e4), n3 = [];
          for (let e5 = 0; e5 < i4.length; ++e5) 37 !== i4[e5] ? n3.push(i4[e5]) : 37 === i4[e5] && m2(i4[e5 + 1]) && m2(i4[e5 + 2]) ? (n3.push(parseInt(i4.slice(e5 + 1, e5 + 3).toString(), 16)), e5 += 2) : n3.push(i4[e5]);
          return new Buffer(n3).toString();
        }(e3), l3 = Oe.toASCII(a3, false, Oe.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
        if (null === l3) return n2;
        if (-1 !== l3.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/)) return n2;
        const o3 = function(e4) {
          const i4 = e4.split(".");
          if ("" === i4[i4.length - 1] && i4.length > 1 && i4.pop(), i4.length > 4) return e4;
          const a4 = [];
          for (const t4 of i4) {
            if ("" === t4) return e4;
            const i5 = S2(t4);
            if (i5 === n2) return e4;
            a4.push(i5);
          }
          for (let e5 = 0; e5 < a4.length - 1; ++e5) if (a4[e5] > 255) return n2;
          if (a4[a4.length - 1] >= Math.pow(256, 5 - a4.length)) return n2;
          let t3 = a4.pop(), d3 = 0;
          for (const e5 of a4) t3 += e5 * Math.pow(256, 3 - d3), ++d3;
          return t3;
        }(l3);
        return "number" == typeof o3 || o3 === n2 ? o3 : l3;
      }
      function b2(e3) {
        return "number" == typeof e3 ? function(e4) {
          let i3 = "", n3 = e4;
          for (let e5 = 1; e5 <= 4; ++e5) i3 = String(n3 % 256) + i3, 4 !== e5 && (i3 = "." + i3), n3 = Math.floor(n3 / 256);
          return i3;
        }(e3) : e3 instanceof Array ? "[" + function(e4) {
          let i3 = "";
          const n3 = function(e5) {
            let i4 = null, n4 = 1, a4 = null, t3 = 0;
            for (let d3 = 0; d3 < e5.length; ++d3) 0 !== e5[d3] ? (t3 > n4 && (i4 = a4, n4 = t3), a4 = null, t3 = 0) : (null === a4 && (a4 = d3), ++t3);
            return t3 > n4 && (i4 = a4, n4 = t3), { idx: i4, len: n4 };
          }(e4).idx;
          let a3 = false;
          for (let t3 = 0; t3 <= 7; ++t3) a3 && 0 === e4[t3] || (a3 && (a3 = false), n3 !== t3 ? (i3 += e4[t3].toString(16), 7 !== t3 && (i3 += ":")) : (i3 += 0 === t3 ? "::" : ":", a3 = true));
          return i3;
        }(e3) + "]" : e3;
      }
      function g2(e3) {
        const i3 = e3.path;
        var n3;
        0 !== i3.length && ("file" === e3.scheme && 1 === i3.length && (n3 = i3[0], /^[A-Za-z]:$/.test(n3)) || i3.pop());
      }
      function D2(e3) {
        return "" !== e3.username || "" !== e3.password;
      }
      function F2(e3, i3, a3, t3, d3) {
        if (this.pointer = 0, this.input = e3, this.base = i3 || null, this.encodingOverride = a3 || "utf-8", this.stateOverride = d3, this.url = t3, this.failure = false, this.parseError = false, !this.url) {
          this.url = { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, cannotBeABaseURL: false };
          const e4 = function(e5) {
            return e5.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
          }(this.input);
          e4 !== this.input && (this.parseError = true), this.input = e4;
        }
        const l3 = function(e4) {
          return e4.replace(/\u0009|\u000A|\u000D/g, "");
        }(this.input);
        for (l3 !== this.input && (this.parseError = true), this.input = l3, this.state = d3 || "scheme start", this.buffer = "", this.atFlag = false, this.arrFlag = false, this.passwordTokenSeenFlag = false, this.input = _e.ucs2.decode(this.input); this.pointer <= this.input.length; ++this.pointer) {
          const e4 = this.input[this.pointer], i4 = isNaN(e4) ? void 0 : String.fromCodePoint(e4), a4 = this["parse " + this.state](e4, i4);
          if (!a4) break;
          if (a4 === n2) {
            this.failure = true;
            break;
          }
        }
      }
      F2.prototype["parse scheme start"] = function(e3, i3) {
        if (l2(e3)) this.buffer += i3.toLowerCase(), this.state = "scheme";
        else {
          if (this.stateOverride) return this.parseError = true, n2;
          this.state = "no scheme", --this.pointer;
        }
        return true;
      }, F2.prototype["parse scheme"] = function(e3, i3) {
        if (function(e4) {
          return l2(e4) || d2(e4);
        }(e3) || 43 === e3 || 45 === e3 || 46 === e3) this.buffer += i3.toLowerCase();
        else if (58 === e3) {
          if (this.stateOverride) {
            if (u2(this.url) && !s2(this.buffer)) return false;
            if (!u2(this.url) && s2(this.buffer)) return false;
            if ((D2(this.url) || null !== this.url.port) && "file" === this.buffer) return false;
            if ("file" === this.url.scheme && ("" === this.url.host || null === this.url.host)) return false;
          }
          if (this.url.scheme = this.buffer, this.buffer = "", this.stateOverride) return false;
          "file" === this.url.scheme ? (47 === this.input[this.pointer + 1] && 47 === this.input[this.pointer + 2] || (this.parseError = true), this.state = "file") : u2(this.url) && null !== this.base && this.base.scheme === this.url.scheme ? this.state = "special relative or authority" : u2(this.url) ? this.state = "special authority slashes" : 47 === this.input[this.pointer + 1] ? (this.state = "path or authority", ++this.pointer) : (this.url.cannotBeABaseURL = true, this.url.path.push(""), this.state = "cannot-be-a-base-URL path");
        } else {
          if (this.stateOverride) return this.parseError = true, n2;
          this.buffer = "", this.state = "no scheme", this.pointer = -1;
        }
        return true;
      }, F2.prototype["parse no scheme"] = function(e3) {
        return null === this.base || this.base.cannotBeABaseURL && 35 !== e3 ? n2 : (this.base.cannotBeABaseURL && 35 === e3 ? (this.url.scheme = this.base.scheme, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.url.cannotBeABaseURL = true, this.state = "fragment") : "file" === this.base.scheme ? (this.state = "file", --this.pointer) : (this.state = "relative", --this.pointer), true);
      }, F2.prototype["parse special relative or authority"] = function(e3) {
        return 47 === e3 && 47 === this.input[this.pointer + 1] ? (this.state = "special authority ignore slashes", ++this.pointer) : (this.parseError = true, this.state = "relative", --this.pointer), true;
      }, F2.prototype["parse path or authority"] = function(e3) {
        return 47 === e3 ? this.state = "authority" : (this.state = "path", --this.pointer), true;
      }, F2.prototype["parse relative"] = function(e3) {
        return this.url.scheme = this.base.scheme, isNaN(e3) ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = this.base.query) : 47 === e3 ? this.state = "relative slash" : 63 === e3 ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = "", this.state = "query") : 35 === e3 ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.state = "fragment") : u2(this.url) && 92 === e3 ? (this.parseError = true, this.state = "relative slash") : (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(0, this.base.path.length - 1), this.state = "path", --this.pointer), true;
      }, F2.prototype["parse relative slash"] = function(e3) {
        return !u2(this.url) || 47 !== e3 && 92 !== e3 ? 47 === e3 ? this.state = "authority" : (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.state = "path", --this.pointer) : (92 === e3 && (this.parseError = true), this.state = "special authority ignore slashes"), true;
      }, F2.prototype["parse special authority slashes"] = function(e3) {
        return 47 === e3 && 47 === this.input[this.pointer + 1] ? (this.state = "special authority ignore slashes", ++this.pointer) : (this.parseError = true, this.state = "special authority ignore slashes", --this.pointer), true;
      }, F2.prototype["parse special authority ignore slashes"] = function(e3) {
        return 47 !== e3 && 92 !== e3 ? (this.state = "authority", --this.pointer) : this.parseError = true, true;
      }, F2.prototype["parse authority"] = function(e3, i3) {
        if (64 === e3) {
          this.parseError = true, this.atFlag && (this.buffer = "%40" + this.buffer), this.atFlag = true;
          const e4 = a2(this.buffer);
          for (let i4 = 0; i4 < e4; ++i4) {
            const e5 = this.buffer.codePointAt(i4);
            if (58 === e5 && !this.passwordTokenSeenFlag) {
              this.passwordTokenSeenFlag = true;
              continue;
            }
            const n3 = f2(e5, h2);
            this.passwordTokenSeenFlag ? this.url.password += n3 : this.url.username += n3;
          }
          this.buffer = "";
        } else if (isNaN(e3) || 47 === e3 || 63 === e3 || 35 === e3 || u2(this.url) && 92 === e3) {
          if (this.atFlag && "" === this.buffer) return this.parseError = true, n2;
          this.pointer -= a2(this.buffer) + 1, this.buffer = "", this.state = "host";
        } else this.buffer += i3;
        return true;
      }, F2.prototype["parse hostname"] = F2.prototype["parse host"] = function(e3, i3) {
        if (this.stateOverride && "file" === this.url.scheme) --this.pointer, this.state = "file host";
        else if (58 !== e3 || this.arrFlag) if (isNaN(e3) || 47 === e3 || 63 === e3 || 35 === e3 || u2(this.url) && 92 === e3) {
          if (--this.pointer, u2(this.url) && "" === this.buffer) return this.parseError = true, n2;
          if (this.stateOverride && "" === this.buffer && (D2(this.url) || null !== this.url.port)) return this.parseError = true, false;
          const e4 = y2(this.buffer, u2(this.url));
          if (e4 === n2) return n2;
          if (this.url.host = e4, this.buffer = "", this.state = "path start", this.stateOverride) return false;
        } else 91 === e3 ? this.arrFlag = true : 93 === e3 && (this.arrFlag = false), this.buffer += i3;
        else {
          if ("" === this.buffer) return this.parseError = true, n2;
          const e4 = y2(this.buffer, u2(this.url));
          if (e4 === n2) return n2;
          if (this.url.host = e4, this.buffer = "", this.state = "port", "hostname" === this.stateOverride) return false;
        }
        return true;
      }, F2.prototype["parse port"] = function(e3, a3) {
        if (d2(e3)) this.buffer += a3;
        else {
          if (!(isNaN(e3) || 47 === e3 || 63 === e3 || 35 === e3 || u2(this.url) && 92 === e3 || this.stateOverride)) return this.parseError = true, n2;
          if ("" !== this.buffer) {
            const e4 = parseInt(this.buffer);
            if (e4 > Math.pow(2, 16) - 1) return this.parseError = true, n2;
            this.url.port = e4 === (t3 = this.url.scheme, i2[t3]) ? null : e4, this.buffer = "";
          }
          if (this.stateOverride) return false;
          this.state = "path start", --this.pointer;
        }
        var t3;
        return true;
      };
      const V2 = /* @__PURE__ */ new Set([47, 92, 63, 35]);
      F2.prototype["parse file"] = function(e3) {
        var i3, n3;
        return this.url.scheme = "file", 47 === e3 || 92 === e3 ? (92 === e3 && (this.parseError = true), this.state = "file slash") : null !== this.base && "file" === this.base.scheme ? isNaN(e3) ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = this.base.query) : 63 === e3 ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = "", this.state = "query") : 35 === e3 ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.state = "fragment") : (this.input.length - this.pointer - 1 == 0 || (i3 = e3, n3 = this.input[this.pointer + 1], !l2(i3) || 58 !== n3 && 124 !== n3) || this.input.length - this.pointer - 1 >= 2 && !V2.has(this.input[this.pointer + 2]) ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), g2(this.url)) : this.parseError = true, this.state = "path", --this.pointer) : (this.state = "path", --this.pointer), true;
      }, F2.prototype["parse file slash"] = function(e3) {
        var i3;
        return 47 === e3 || 92 === e3 ? (92 === e3 && (this.parseError = true), this.state = "file host") : (null !== this.base && "file" === this.base.scheme && (2 === (i3 = this.base.path[0]).length && l2(i3.codePointAt(0)) && ":" === i3[1] ? this.url.path.push(this.base.path[0]) : this.url.host = this.base.host), this.state = "path", --this.pointer), true;
      }, F2.prototype["parse file host"] = function(e3, i3) {
        if (isNaN(e3) || 47 === e3 || 92 === e3 || 63 === e3 || 35 === e3) if (--this.pointer, !this.stateOverride && r2(this.buffer)) this.parseError = true, this.state = "path";
        else if ("" === this.buffer) {
          if (this.url.host = "", this.stateOverride) return false;
          this.state = "path start";
        } else {
          let e4 = y2(this.buffer, u2(this.url));
          if (e4 === n2) return n2;
          if ("localhost" === e4 && (e4 = ""), this.url.host = e4, this.stateOverride) return false;
          this.buffer = "", this.state = "path start";
        }
        else this.buffer += i3;
        return true;
      }, F2.prototype["parse path start"] = function(e3) {
        return u2(this.url) ? (92 === e3 && (this.parseError = true), this.state = "path", 47 !== e3 && 92 !== e3 && --this.pointer) : this.stateOverride || 63 !== e3 ? this.stateOverride || 35 !== e3 ? void 0 !== e3 && (this.state = "path", 47 !== e3 && --this.pointer) : (this.url.fragment = "", this.state = "fragment") : (this.url.query = "", this.state = "query"), true;
      }, F2.prototype["parse path"] = function(e3) {
        if (isNaN(e3) || 47 === e3 || u2(this.url) && 92 === e3 || !this.stateOverride && (63 === e3 || 35 === e3)) {
          if (u2(this.url) && 92 === e3 && (this.parseError = true), ".." === (i3 = (i3 = this.buffer).toLowerCase()) || "%2e." === i3 || ".%2e" === i3 || "%2e%2e" === i3 ? (g2(this.url), 47 === e3 || u2(this.url) && 92 === e3 || this.url.path.push("")) : !o2(this.buffer) || 47 === e3 || u2(this.url) && 92 === e3 ? o2(this.buffer) || ("file" === this.url.scheme && 0 === this.url.path.length && r2(this.buffer) && ("" !== this.url.host && null !== this.url.host && (this.parseError = true, this.url.host = ""), this.buffer = this.buffer[0] + ":"), this.url.path.push(this.buffer)) : this.url.path.push(""), this.buffer = "", "file" === this.url.scheme && (void 0 === e3 || 63 === e3 || 35 === e3)) for (; this.url.path.length > 1 && "" === this.url.path[0]; ) this.parseError = true, this.url.path.shift();
          63 === e3 && (this.url.query = "", this.state = "query"), 35 === e3 && (this.url.fragment = "", this.state = "fragment");
        } else 37 !== e3 || m2(this.input[this.pointer + 1]) && m2(this.input[this.pointer + 2]) || (this.parseError = true), this.buffer += f2(e3, v2);
        var i3;
        return true;
      }, F2.prototype["parse cannot-be-a-base-URL path"] = function(e3) {
        return 63 === e3 ? (this.url.query = "", this.state = "query") : 35 === e3 ? (this.url.fragment = "", this.state = "fragment") : (isNaN(e3) || 37 === e3 || (this.parseError = true), 37 !== e3 || m2(this.input[this.pointer + 1]) && m2(this.input[this.pointer + 2]) || (this.parseError = true), isNaN(e3) || (this.url.path[0] = this.url.path[0] + f2(e3, p2))), true;
      }, F2.prototype["parse query"] = function(e3, i3) {
        if (isNaN(e3) || !this.stateOverride && 35 === e3) {
          u2(this.url) && "ws" !== this.url.scheme && "wss" !== this.url.scheme || (this.encodingOverride = "utf-8");
          const i4 = new Buffer(this.buffer);
          for (let e4 = 0; e4 < i4.length; ++e4) i4[e4] < 33 || i4[e4] > 126 || 34 === i4[e4] || 35 === i4[e4] || 60 === i4[e4] || 62 === i4[e4] ? this.url.query += k2(i4[e4]) : this.url.query += String.fromCodePoint(i4[e4]);
          this.buffer = "", 35 === e3 && (this.url.fragment = "", this.state = "fragment");
        } else 37 !== e3 || m2(this.input[this.pointer + 1]) && m2(this.input[this.pointer + 2]) || (this.parseError = true), this.buffer += i3;
        return true;
      }, F2.prototype["parse fragment"] = function(e3) {
        return isNaN(e3) || (0 === e3 ? this.parseError = true : (37 !== e3 || m2(this.input[this.pointer + 1]) && m2(this.input[this.pointer + 2]) || (this.parseError = true), this.url.fragment += f2(e3, p2))), true;
      }, e2.exports.serializeURL = function(e3, i3) {
        let n3 = e3.scheme + ":";
        if (null !== e3.host ? (n3 += "//", "" === e3.username && "" === e3.password || (n3 += e3.username, "" !== e3.password && (n3 += ":" + e3.password), n3 += "@"), n3 += b2(e3.host), null !== e3.port && (n3 += ":" + e3.port)) : null === e3.host && "file" === e3.scheme && (n3 += "//"), e3.cannotBeABaseURL) n3 += e3.path[0];
        else for (const i4 of e3.path) n3 += "/" + i4;
        return null !== e3.query && (n3 += "?" + e3.query), i3 || null === e3.fragment || (n3 += "#" + e3.fragment), n3;
      }, e2.exports.serializeURLOrigin = function(i3) {
        switch (i3.scheme) {
          case "blob":
            try {
              return e2.exports.serializeURLOrigin(e2.exports.parseURL(i3.path[0]));
            } catch (e3) {
              return "null";
            }
          case "ftp":
          case "gopher":
          case "http":
          case "https":
          case "ws":
          case "wss":
            return function(e3) {
              let i4 = e3.scheme + "://";
              return i4 += b2(e3.host), null !== e3.port && (i4 += ":" + e3.port), i4;
            }({ scheme: i3.scheme, host: i3.host, port: i3.port });
          case "file":
            return "file://";
          default:
            return "null";
        }
      }, e2.exports.basicURLParse = function(e3, i3) {
        void 0 === i3 && (i3 = {});
        const n3 = new F2(e3, i3.baseURL, i3.encodingOverride, i3.url, i3.stateOverride);
        return n3.failure ? "failure" : n3.url;
      }, e2.exports.setTheUsername = function(e3, i3) {
        e3.username = "";
        const n3 = _e.ucs2.decode(i3);
        for (let i4 = 0; i4 < n3.length; ++i4) e3.username += f2(n3[i4], h2);
      }, e2.exports.setThePassword = function(e3, i3) {
        e3.password = "";
        const n3 = _e.ucs2.decode(i3);
        for (let i4 = 0; i4 < n3.length; ++i4) e3.password += f2(n3[i4], h2);
      }, e2.exports.serializeHost = b2, e2.exports.cannotHaveAUsernamePasswordPort = function(e3) {
        return null === e3.host || "" === e3.host || e3.cannotBeABaseURL || "file" === e3.scheme;
      }, e2.exports.serializeInteger = function(e3) {
        return String(e3);
      }, e2.exports.parseURL = function(i3, n3) {
        return void 0 === n3 && (n3 = {}), e2.exports.basicURLParse(i3, { baseURL: n3.baseURL, encodingOverride: n3.encodingOverride });
      };
    });
    var Be = class {
      constructor(e2) {
        const i2 = e2[0], n2 = e2[1];
        let a2 = null;
        if (void 0 !== n2 && (a2 = Ue.basicURLParse(n2), "failure" === a2)) throw new TypeError("Invalid base URL");
        const t2 = Ue.basicURLParse(i2, { baseURL: a2 });
        if ("failure" === t2) throw new TypeError("Invalid URL");
        this._url = t2;
      }
      get href() {
        return Ue.serializeURL(this._url);
      }
      set href(e2) {
        const i2 = Ue.basicURLParse(e2);
        if ("failure" === i2) throw new TypeError("Invalid URL");
        this._url = i2;
      }
      get origin() {
        return Ue.serializeURLOrigin(this._url);
      }
      get protocol() {
        return this._url.scheme + ":";
      }
      set protocol(e2) {
        Ue.basicURLParse(e2 + ":", { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(e2) {
        Ue.cannotHaveAUsernamePasswordPort(this._url) || Ue.setTheUsername(this._url, e2);
      }
      get password() {
        return this._url.password;
      }
      set password(e2) {
        Ue.cannotHaveAUsernamePasswordPort(this._url) || Ue.setThePassword(this._url, e2);
      }
      get host() {
        const e2 = this._url;
        return null === e2.host ? "" : null === e2.port ? Ue.serializeHost(e2.host) : Ue.serializeHost(e2.host) + ":" + Ue.serializeInteger(e2.port);
      }
      set host(e2) {
        this._url.cannotBeABaseURL || Ue.basicURLParse(e2, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        return null === this._url.host ? "" : Ue.serializeHost(this._url.host);
      }
      set hostname(e2) {
        this._url.cannotBeABaseURL || Ue.basicURLParse(e2, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        return null === this._url.port ? "" : Ue.serializeInteger(this._url.port);
      }
      set port(e2) {
        Ue.cannotHaveAUsernamePasswordPort(this._url) || ("" === e2 ? this._url.port = null : Ue.basicURLParse(e2, { url: this._url, stateOverride: "port" }));
      }
      get pathname() {
        return this._url.cannotBeABaseURL ? this._url.path[0] : 0 === this._url.path.length ? "" : "/" + this._url.path.join("/");
      }
      set pathname(e2) {
        this._url.cannotBeABaseURL || (this._url.path = [], Ue.basicURLParse(e2, { url: this._url, stateOverride: "path start" }));
      }
      get search() {
        return null === this._url.query || "" === this._url.query ? "" : "?" + this._url.query;
      }
      set search(e2) {
        const i2 = this._url;
        if ("" === e2) return void (i2.query = null);
        const n2 = "?" === e2[0] ? e2.substring(1) : e2;
        i2.query = "", Ue.basicURLParse(n2, { url: i2, stateOverride: "query" });
      }
      get hash() {
        return null === this._url.fragment || "" === this._url.fragment ? "" : "#" + this._url.fragment;
      }
      set hash(e2) {
        if ("" === e2) return void (this._url.fragment = null);
        const i2 = "#" === e2[0] ? e2.substring(1) : e2;
        this._url.fragment = "", Ue.basicURLParse(i2, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
    };
    var Ee = te(function(e2) {
      const i2 = se.implSymbol;
      function n2(a2) {
        if (!this || this[i2] || !(this instanceof n2)) throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
        if (arguments.length < 1) throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
        const t2 = [];
        for (let e3 = 0; e3 < arguments.length && e3 < 2; ++e3) t2[e3] = arguments[e3];
        t2[0] = me.USVString(t2[0]), void 0 !== t2[1] && (t2[1] = me.USVString(t2[1])), e2.exports.setup(this, t2);
      }
      n2.prototype.toJSON = function() {
        if (!this || !e2.exports.is(this)) throw new TypeError("Illegal invocation");
        const n3 = [];
        for (let e3 = 0; e3 < arguments.length && e3 < 0; ++e3) n3[e3] = arguments[e3];
        return this[i2].toJSON.apply(this[i2], n3);
      }, Object.defineProperty(n2.prototype, "href", { get() {
        return this[i2].href;
      }, set(e3) {
        e3 = me.USVString(e3), this[i2].href = e3;
      }, enumerable: true, configurable: true }), n2.prototype.toString = function() {
        if (!this || !e2.exports.is(this)) throw new TypeError("Illegal invocation");
        return this.href;
      }, Object.defineProperty(n2.prototype, "origin", { get() {
        return this[i2].origin;
      }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "protocol", { get() {
        return this[i2].protocol;
      }, set(e3) {
        e3 = me.USVString(e3), this[i2].protocol = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "username", { get() {
        return this[i2].username;
      }, set(e3) {
        e3 = me.USVString(e3), this[i2].username = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "password", { get() {
        return this[i2].password;
      }, set(e3) {
        e3 = me.USVString(e3), this[i2].password = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "host", { get() {
        return this[i2].host;
      }, set(e3) {
        e3 = me.USVString(e3), this[i2].host = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "hostname", { get() {
        return this[i2].hostname;
      }, set(e3) {
        e3 = me.USVString(e3), this[i2].hostname = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "port", { get() {
        return this[i2].port;
      }, set(e3) {
        e3 = me.USVString(e3), this[i2].port = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "pathname", { get() {
        return this[i2].pathname;
      }, set(e3) {
        e3 = me.USVString(e3), this[i2].pathname = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "search", { get() {
        return this[i2].search;
      }, set(e3) {
        e3 = me.USVString(e3), this[i2].search = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "hash", { get() {
        return this[i2].hash;
      }, set(e3) {
        e3 = me.USVString(e3), this[i2].hash = e3;
      }, enumerable: true, configurable: true }), e2.exports = { is: (e3) => !!e3 && e3[i2] instanceof Be, create(e3, i3) {
        let a2 = Object.create(n2.prototype);
        return this.setup(a2, e3, i3), a2;
      }, setup(e3, n3, a2) {
        a2 || (a2 = {}), a2.wrapper = e3, e3[i2] = new Be(n3, a2), e3[i2][se.wrapperSymbol] = e3;
      }, interface: n2, expose: { Window: { URL: n2 }, Worker: { URL: n2 } } };
    });
    var Re = { URL: Ee.interface, serializeURL: Ue.serializeURL, serializeURLOrigin: Ue.serializeURLOrigin, basicURLParse: Ue.basicURLParse, setTheUsername: Ue.setTheUsername, setThePassword: Ue.setThePassword, serializeHost: Ue.serializeHost, serializeInteger: Ue.serializeInteger, parseURL: Ue.parseURL };
    var Me = o.default.Readable;
    var Le = Symbol("buffer");
    var ze = Symbol("type");
    var He = class _He {
      constructor() {
        this[ze] = "";
        const e2 = arguments[0], i2 = arguments[1], n2 = [];
        let a2 = 0;
        if (e2) {
          const i3 = e2, t3 = Number(i3.length);
          for (let e3 = 0; e3 < t3; e3++) {
            const t4 = i3[e3];
            let d2;
            d2 = t4 instanceof Buffer ? t4 : ArrayBuffer.isView(t4) ? Buffer.from(t4.buffer, t4.byteOffset, t4.byteLength) : t4 instanceof ArrayBuffer ? Buffer.from(t4) : t4 instanceof _He ? t4[Le] : Buffer.from("string" == typeof t4 ? t4 : String(t4)), a2 += d2.length, n2.push(d2);
          }
        }
        this[Le] = Buffer.concat(n2);
        let t2 = i2 && void 0 !== i2.type && String(i2.type).toLowerCase();
        t2 && !/[^\u0020-\u007E]/.test(t2) && (this[ze] = t2);
      }
      get size() {
        return this[Le].length;
      }
      get type() {
        return this[ze];
      }
      text() {
        return Promise.resolve(this[Le].toString());
      }
      arrayBuffer() {
        const e2 = this[Le], i2 = e2.buffer.slice(e2.byteOffset, e2.byteOffset + e2.byteLength);
        return Promise.resolve(i2);
      }
      stream() {
        const e2 = new Me();
        return e2._read = function() {
        }, e2.push(this[Le]), e2.push(null), e2;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const e2 = this.size, i2 = arguments[0], n2 = arguments[1];
        let a2, t2;
        a2 = void 0 === i2 ? 0 : i2 < 0 ? Math.max(e2 + i2, 0) : Math.min(i2, e2), t2 = void 0 === n2 ? e2 : n2 < 0 ? Math.max(e2 + n2, 0) : Math.min(n2, e2);
        const d2 = Math.max(t2 - a2, 0), l2 = this[Le].slice(a2, a2 + d2), m2 = new _He([], { type: arguments[2] });
        return m2[Le] = l2, m2;
      }
    };
    function Ge(e2, i2, n2) {
      Error.call(this, e2), this.message = e2, this.type = i2, n2 && (this.code = this.errno = n2.code), Error.captureStackTrace(this, this.constructor);
    }
    var We;
    Object.defineProperties(He.prototype, { size: { enumerable: true }, type: { enumerable: true }, slice: { enumerable: true } }), Object.defineProperty(He.prototype, Symbol.toStringTag, { value: "Blob", writable: false, enumerable: false, configurable: true }), Ge.prototype = Object.create(Error.prototype), Ge.prototype.constructor = Ge, Ge.prototype.name = "FetchError";
    try {
      We = require("encoding").convert;
    } catch (e2) {
    }
    var Qe = Symbol("Body internals");
    var Je = o.default.PassThrough;
    function Ke(e2) {
      var i2 = this, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, a2 = n2.size;
      let t2 = void 0 === a2 ? 0 : a2;
      var d2 = n2.timeout;
      let l2 = void 0 === d2 ? 0 : d2;
      null == e2 ? e2 = null : Ze(e2) ? e2 = Buffer.from(e2.toString()) : Ye(e2) || Buffer.isBuffer(e2) || ("[object ArrayBuffer]" === Object.prototype.toString.call(e2) ? e2 = Buffer.from(e2) : ArrayBuffer.isView(e2) ? e2 = Buffer.from(e2.buffer, e2.byteOffset, e2.byteLength) : e2 instanceof o.default || (e2 = Buffer.from(String(e2)))), this[Qe] = { body: e2, disturbed: false, error: null }, this.size = t2, this.timeout = l2, e2 instanceof o.default && e2.on("error", function(e3) {
        const n3 = "AbortError" === e3.name ? e3 : new Ge(`Invalid response body while trying to fetch ${i2.url}: ${e3.message}`, "system", e3);
        i2[Qe].error = n3;
      });
    }
    function $e() {
      var e2 = this;
      if (this[Qe].disturbed) return Ke.Promise.reject(new TypeError(`body used already for: ${this.url}`));
      if (this[Qe].disturbed = true, this[Qe].error) return Ke.Promise.reject(this[Qe].error);
      let i2 = this.body;
      if (null === i2) return Ke.Promise.resolve(Buffer.alloc(0));
      if (Ye(i2) && (i2 = i2.stream()), Buffer.isBuffer(i2)) return Ke.Promise.resolve(i2);
      if (!(i2 instanceof o.default)) return Ke.Promise.resolve(Buffer.alloc(0));
      let n2 = [], a2 = 0, t2 = false;
      return new Ke.Promise(function(d2, l2) {
        let m2;
        e2.timeout && (m2 = setTimeout(function() {
          t2 = true, l2(new Ge(`Response timeout while trying to fetch ${e2.url} (over ${e2.timeout}ms)`, "body-timeout"));
        }, e2.timeout)), i2.on("error", function(i3) {
          "AbortError" === i3.name ? (t2 = true, l2(i3)) : l2(new Ge(`Invalid response body while trying to fetch ${e2.url}: ${i3.message}`, "system", i3));
        }), i2.on("data", function(i3) {
          if (!t2 && null !== i3) {
            if (e2.size && a2 + i3.length > e2.size) return t2 = true, void l2(new Ge(`content size at ${e2.url} over limit: ${e2.size}`, "max-size"));
            a2 += i3.length, n2.push(i3);
          }
        }), i2.on("end", function() {
          if (!t2) {
            clearTimeout(m2);
            try {
              d2(Buffer.concat(n2, a2));
            } catch (i3) {
              l2(new Ge(`Could not create Buffer from response body for ${e2.url}: ${i3.message}`, "system", i3));
            }
          }
        });
      });
    }
    function Ze(e2) {
      return "object" == typeof e2 && "function" == typeof e2.append && "function" == typeof e2.delete && "function" == typeof e2.get && "function" == typeof e2.getAll && "function" == typeof e2.has && "function" == typeof e2.set && ("URLSearchParams" === e2.constructor.name || "[object URLSearchParams]" === Object.prototype.toString.call(e2) || "function" == typeof e2.sort);
    }
    function Ye(e2) {
      return "object" == typeof e2 && "function" == typeof e2.arrayBuffer && "string" == typeof e2.type && "function" == typeof e2.stream && "function" == typeof e2.constructor && "string" == typeof e2.constructor.name && /^(Blob|File)$/.test(e2.constructor.name) && /^(Blob|File)$/.test(e2[Symbol.toStringTag]);
    }
    function Xe(e2) {
      let i2, n2, a2 = e2.body;
      if (e2.bodyUsed) throw new Error("cannot clone body after it is used");
      return a2 instanceof o.default && "function" != typeof a2.getBoundary && (i2 = new Je(), n2 = new Je(), a2.pipe(i2), a2.pipe(n2), e2[Qe].body = i2, a2 = n2), a2;
    }
    function ei(e2) {
      return null === e2 ? null : "string" == typeof e2 ? "text/plain;charset=UTF-8" : Ze(e2) ? "application/x-www-form-urlencoded;charset=UTF-8" : Ye(e2) ? e2.type || null : Buffer.isBuffer(e2) || "[object ArrayBuffer]" === Object.prototype.toString.call(e2) || ArrayBuffer.isView(e2) ? null : "function" == typeof e2.getBoundary ? `multipart/form-data;boundary=${e2.getBoundary()}` : e2 instanceof o.default ? null : "text/plain;charset=UTF-8";
    }
    function ii(e2) {
      const i2 = e2.body;
      return null === i2 ? 0 : Ye(i2) ? i2.size : Buffer.isBuffer(i2) ? i2.length : i2 && "function" == typeof i2.getLengthSync && (i2._lengthRetrievers && 0 == i2._lengthRetrievers.length || i2.hasKnownLength && i2.hasKnownLength()) ? i2.getLengthSync() : null;
    }
    Ke.prototype = { get body() {
      return this[Qe].body;
    }, get bodyUsed() {
      return this[Qe].disturbed;
    }, arrayBuffer() {
      return $e.call(this).then(function(e2) {
        return e2.buffer.slice(e2.byteOffset, e2.byteOffset + e2.byteLength);
      });
    }, blob() {
      let e2 = this.headers && this.headers.get("content-type") || "";
      return $e.call(this).then(function(i2) {
        return Object.assign(new He([], { type: e2.toLowerCase() }), { [Le]: i2 });
      });
    }, json() {
      var e2 = this;
      return $e.call(this).then(function(i2) {
        try {
          return JSON.parse(i2.toString());
        } catch (i3) {
          return Ke.Promise.reject(new Ge(`invalid json response body at ${e2.url} reason: ${i3.message}`, "invalid-json"));
        }
      });
    }, text() {
      return $e.call(this).then(function(e2) {
        return e2.toString();
      });
    }, buffer() {
      return $e.call(this);
    }, textConverted() {
      var e2 = this;
      return $e.call(this).then(function(i2) {
        return function(e3, i3) {
          if ("function" != typeof We) throw new Error("The package `encoding` must be installed to use the textConverted() function");
          const n2 = i3.get("content-type");
          let a2, t2, d2 = "utf-8";
          n2 && (a2 = /charset=([^;]*)/i.exec(n2));
          t2 = e3.slice(0, 1024).toString(), !a2 && t2 && (a2 = /<meta.+?charset=(['"])(.+?)\1/i.exec(t2));
          !a2 && t2 && (a2 = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(t2), a2 || (a2 = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(t2), a2 && a2.pop()), a2 && (a2 = /charset=(.*)/i.exec(a2.pop())));
          !a2 && t2 && (a2 = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(t2));
          a2 && (d2 = a2.pop(), "gb2312" !== d2 && "gbk" !== d2 || (d2 = "gb18030"));
          return We(e3, "UTF-8", d2).toString();
        }(i2, e2.headers);
      });
    } }, Object.defineProperties(Ke.prototype, { body: { enumerable: true }, bodyUsed: { enumerable: true }, arrayBuffer: { enumerable: true }, blob: { enumerable: true }, json: { enumerable: true }, text: { enumerable: true } }), Ke.mixIn = function(e2) {
      for (const i2 of Object.getOwnPropertyNames(Ke.prototype)) if (!(i2 in e2)) {
        const n2 = Object.getOwnPropertyDescriptor(Ke.prototype, i2);
        Object.defineProperty(e2, i2, n2);
      }
    }, Ke.Promise = global.Promise;
    var ni = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    var ai = /[^\t\x20-\x7e\x80-\xff]/;
    function ti(e2) {
      if (e2 = `${e2}`, ni.test(e2) || "" === e2) throw new TypeError(`${e2} is not a legal HTTP header name`);
    }
    function di(e2) {
      if (e2 = `${e2}`, ai.test(e2)) throw new TypeError(`${e2} is not a legal HTTP header value`);
    }
    function li(e2, i2) {
      i2 = i2.toLowerCase();
      for (const n2 in e2) if (n2.toLowerCase() === i2) return n2;
    }
    var mi = Symbol("map");
    var oi = class _oi {
      constructor() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
        if (this[mi] = /* @__PURE__ */ Object.create(null), e2 instanceof _oi) {
          const i2 = e2.raw(), n2 = Object.keys(i2);
          for (const e3 of n2) for (const n3 of i2[e3]) this.append(e3, n3);
        } else if (null == e2) ;
        else {
          if ("object" != typeof e2) throw new TypeError("Provided initializer must be an object");
          {
            const i2 = e2[Symbol.iterator];
            if (null != i2) {
              if ("function" != typeof i2) throw new TypeError("Header pairs must be iterable");
              const n2 = [];
              for (const i3 of e2) {
                if ("object" != typeof i3 || "function" != typeof i3[Symbol.iterator]) throw new TypeError("Each header pair must be iterable");
                n2.push(Array.from(i3));
              }
              for (const e3 of n2) {
                if (2 !== e3.length) throw new TypeError("Each header pair must be a name/value tuple");
                this.append(e3[0], e3[1]);
              }
            } else for (const i3 of Object.keys(e2)) {
              const n2 = e2[i3];
              this.append(i3, n2);
            }
          }
        }
      }
      get(e2) {
        ti(e2 = `${e2}`);
        const i2 = li(this[mi], e2);
        return void 0 === i2 ? null : this[mi][i2].join(", ");
      }
      forEach(e2) {
        let i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, n2 = ri(this), a2 = 0;
        for (; a2 < n2.length; ) {
          var t2 = n2[a2];
          const d2 = t2[0], l2 = t2[1];
          e2.call(i2, l2, d2, this), n2 = ri(this), a2++;
        }
      }
      set(e2, i2) {
        i2 = `${i2}`, ti(e2 = `${e2}`), di(i2);
        const n2 = li(this[mi], e2);
        this[mi][void 0 !== n2 ? n2 : e2] = [i2];
      }
      append(e2, i2) {
        i2 = `${i2}`, ti(e2 = `${e2}`), di(i2);
        const n2 = li(this[mi], e2);
        void 0 !== n2 ? this[mi][n2].push(i2) : this[mi][e2] = [i2];
      }
      has(e2) {
        return ti(e2 = `${e2}`), void 0 !== li(this[mi], e2);
      }
      delete(e2) {
        ti(e2 = `${e2}`);
        const i2 = li(this[mi], e2);
        void 0 !== i2 && delete this[mi][i2];
      }
      raw() {
        return this[mi];
      }
      keys() {
        return ui(this, "key");
      }
      values() {
        return ui(this, "value");
      }
      [Symbol.iterator]() {
        return ui(this, "key+value");
      }
    };
    function ri(e2) {
      let i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "key+value";
      return Object.keys(e2[mi]).sort().map("key" === i2 ? function(e3) {
        return e3.toLowerCase();
      } : "value" === i2 ? function(i3) {
        return e2[mi][i3].join(", ");
      } : function(i3) {
        return [i3.toLowerCase(), e2[mi][i3].join(", ")];
      });
    }
    oi.prototype.entries = oi.prototype[Symbol.iterator], Object.defineProperty(oi.prototype, Symbol.toStringTag, { value: "Headers", writable: false, enumerable: false, configurable: true }), Object.defineProperties(oi.prototype, { get: { enumerable: true }, forEach: { enumerable: true }, set: { enumerable: true }, append: { enumerable: true }, has: { enumerable: true }, delete: { enumerable: true }, keys: { enumerable: true }, values: { enumerable: true }, entries: { enumerable: true } });
    var si = Symbol("internal");
    function ui(e2, i2) {
      const n2 = Object.create(ki);
      return n2[si] = { target: e2, kind: i2, index: 0 }, n2;
    }
    var ki = Object.setPrototypeOf({ next() {
      if (!this || Object.getPrototypeOf(this) !== ki) throw new TypeError("Value of `this` is not a HeadersIterator");
      var e2 = this[si];
      const i2 = e2.target, n2 = e2.kind, a2 = e2.index, t2 = ri(i2, n2);
      return a2 >= t2.length ? { value: void 0, done: true } : (this[si].index = a2 + 1, { value: t2[a2], done: false });
    } }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    function pi(e2) {
      const i2 = Object.assign({ __proto__: null }, e2[mi]), n2 = li(e2[mi], "Host");
      return void 0 !== n2 && (i2[n2] = i2[n2][0]), i2;
    }
    Object.defineProperty(ki, Symbol.toStringTag, { value: "HeadersIterator", writable: false, enumerable: false, configurable: true });
    var ci = Symbol("Response internals");
    var vi = r.default.STATUS_CODES;
    var Ni = class _Ni {
      constructor() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        Ke.call(this, e2, i2);
        const n2 = i2.status || 200, a2 = new oi(i2.headers);
        if (null != e2 && !a2.has("Content-Type")) {
          const i3 = ei(e2);
          i3 && a2.append("Content-Type", i3);
        }
        this[ci] = { url: i2.url, status: n2, statusText: i2.statusText || vi[n2], headers: a2, counter: i2.counter };
      }
      get url() {
        return this[ci].url || "";
      }
      get status() {
        return this[ci].status;
      }
      get ok() {
        return this[ci].status >= 200 && this[ci].status < 300;
      }
      get redirected() {
        return this[ci].counter > 0;
      }
      get statusText() {
        return this[ci].statusText;
      }
      get headers() {
        return this[ci].headers;
      }
      clone() {
        return new _Ni(Xe(this), { url: this.url, status: this.status, statusText: this.statusText, headers: this.headers, ok: this.ok, redirected: this.redirected });
      }
    };
    Ke.mixIn(Ni.prototype), Object.defineProperties(Ni.prototype, { url: { enumerable: true }, status: { enumerable: true }, ok: { enumerable: true }, redirected: { enumerable: true }, statusText: { enumerable: true }, headers: { enumerable: true }, clone: { enumerable: true } }), Object.defineProperty(Ni.prototype, Symbol.toStringTag, { value: "Response", writable: false, enumerable: false, configurable: true });
    var hi = Symbol("Request internals");
    var fi = s.default.URL || Re.URL;
    var Si = s.default.parse;
    var yi = s.default.format;
    function bi(e2) {
      return /^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e2) && (e2 = new fi(e2).toString()), Si(e2);
    }
    var gi = "destroy" in o.default.Readable.prototype;
    function Di(e2) {
      return "object" == typeof e2 && "object" == typeof e2[hi];
    }
    var Fi = class _Fi {
      constructor(e2) {
        let i2, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        Di(e2) ? i2 = bi(e2.url) : (i2 = e2 && e2.href ? bi(e2.href) : bi(`${e2}`), e2 = {});
        let a2 = n2.method || e2.method || "GET";
        if (a2 = a2.toUpperCase(), (null != n2.body || Di(e2) && null !== e2.body) && ("GET" === a2 || "HEAD" === a2)) throw new TypeError("Request with GET/HEAD method cannot have body");
        let t2 = null != n2.body ? n2.body : Di(e2) && null !== e2.body ? Xe(e2) : null;
        Ke.call(this, t2, { timeout: n2.timeout || e2.timeout || 0, size: n2.size || e2.size || 0 });
        const d2 = new oi(n2.headers || e2.headers || {});
        if (null != t2 && !d2.has("Content-Type")) {
          const e3 = ei(t2);
          e3 && d2.append("Content-Type", e3);
        }
        let l2 = Di(e2) ? e2.signal : null;
        if ("signal" in n2 && (l2 = n2.signal), null != l2 && !function(e3) {
          const i3 = e3 && "object" == typeof e3 && Object.getPrototypeOf(e3);
          return !(!i3 || "AbortSignal" !== i3.constructor.name);
        }(l2)) throw new TypeError("Expected signal to be an instanceof AbortSignal");
        this[hi] = { method: a2, redirect: n2.redirect || e2.redirect || "follow", headers: d2, parsedURL: i2, signal: l2 }, this.follow = void 0 !== n2.follow ? n2.follow : void 0 !== e2.follow ? e2.follow : 20, this.compress = void 0 !== n2.compress ? n2.compress : void 0 === e2.compress || e2.compress, this.counter = n2.counter || e2.counter || 0, this.agent = n2.agent || e2.agent;
      }
      get method() {
        return this[hi].method;
      }
      get url() {
        return yi(this[hi].parsedURL);
      }
      get headers() {
        return this[hi].headers;
      }
      get redirect() {
        return this[hi].redirect;
      }
      get signal() {
        return this[hi].signal;
      }
      clone() {
        return new _Fi(this);
      }
    };
    function Vi(e2) {
      Error.call(this, e2), this.type = "aborted", this.message = e2, Error.captureStackTrace(this, this.constructor);
    }
    Ke.mixIn(Fi.prototype), Object.defineProperty(Fi.prototype, Symbol.toStringTag, { value: "Request", writable: false, enumerable: false, configurable: true }), Object.defineProperties(Fi.prototype, { method: { enumerable: true }, url: { enumerable: true }, headers: { enumerable: true }, redirect: { enumerable: true }, clone: { enumerable: true }, signal: { enumerable: true } }), Vi.prototype = Object.create(Error.prototype), Vi.prototype.constructor = Vi, Vi.prototype.name = "AbortError";
    var _i = s.default.URL || Re.URL;
    var Ai = o.default.PassThrough;
    function Ti(e2, i2) {
      if (!Ti.Promise) throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
      return Ke.Promise = Ti.Promise, new Ti.Promise(function(n2, a2) {
        const t2 = new Fi(e2, i2), d2 = function(e3) {
          const i3 = e3[hi].parsedURL, n3 = new oi(e3[hi].headers);
          if (n3.has("Accept") || n3.set("Accept", "*/*"), !i3.protocol || !i3.hostname) throw new TypeError("Only absolute URLs are supported");
          if (!/^https?:$/.test(i3.protocol)) throw new TypeError("Only HTTP(S) protocols are supported");
          if (e3.signal && e3.body instanceof o.default.Readable && !gi) throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
          let a3 = null;
          if (null == e3.body && /^(POST|PUT)$/i.test(e3.method) && (a3 = "0"), null != e3.body) {
            const i4 = ii(e3);
            "number" == typeof i4 && (a3 = String(i4));
          }
          a3 && n3.set("Content-Length", a3), n3.has("User-Agent") || n3.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"), e3.compress && !n3.has("Accept-Encoding") && n3.set("Accept-Encoding", "gzip,deflate");
          let t3 = e3.agent;
          return "function" == typeof t3 && (t3 = t3(i3)), Object.assign({}, i3, { method: e3.method, headers: pi(n3), agent: t3 });
        }(t2), l2 = ("https:" === d2.protocol ? u.default : r.default).request, m2 = t2.signal;
        let s2 = null;
        const p2 = function() {
          let e3 = new Vi("The user aborted a request.");
          a2(e3), t2.body && t2.body instanceof o.default.Readable && wi(t2.body, e3), s2 && s2.body && s2.body.emit("error", e3);
        };
        if (m2 && m2.aborted) return void p2();
        const c2 = function() {
          p2(), h2();
        }, v2 = l2(d2);
        let N2;
        function h2() {
          v2.abort(), m2 && m2.removeEventListener("abort", c2), clearTimeout(N2);
        }
        m2 && m2.addEventListener("abort", c2), t2.timeout && v2.once("socket", function(e3) {
          N2 = setTimeout(function() {
            a2(new Ge(`network timeout at: ${t2.url}`, "request-timeout")), h2();
          }, t2.timeout);
        }), v2.on("error", function(e3) {
          a2(new Ge(`request to ${t2.url} failed, reason: ${e3.message}`, "system", e3)), s2 && s2.body && wi(s2.body, e3), h2();
        }), function(e3, i3) {
          let n3;
          e3.on("socket", function(e4) {
            n3 = e4;
          }), e3.on("response", function(e4) {
            const a3 = e4.headers;
            "chunked" !== a3["transfer-encoding"] || a3["content-length"] || e4.once("close", function(e5) {
              if (n3 && n3.listenerCount("data") > 0 && !e5) {
                const e6 = new Error("Premature close");
                e6.code = "ERR_STREAM_PREMATURE_CLOSE", i3(e6);
              }
            });
          });
        }(v2, function(e3) {
          m2 && m2.aborted || s2 && s2.body && wi(s2.body, e3);
        }), parseInt(process.version.substring(1)) < 14 && v2.on("socket", function(e3) {
          e3.addListener("close", function(i3) {
            const n3 = e3.listenerCount("data") > 0;
            if (s2 && n3 && !i3 && (!m2 || !m2.aborted)) {
              const e4 = new Error("Premature close");
              e4.code = "ERR_STREAM_PREMATURE_CLOSE", s2.body.emit("error", e4);
            }
          });
        }), v2.on("response", function(e3) {
          clearTimeout(N2);
          const i3 = function(e4) {
            const i4 = new oi();
            for (const n3 of Object.keys(e4)) if (!ni.test(n3)) if (Array.isArray(e4[n3])) for (const a3 of e4[n3]) ai.test(a3) || (void 0 === i4[mi][n3] ? i4[mi][n3] = [a3] : i4[mi][n3].push(a3));
            else ai.test(e4[n3]) || (i4[mi][n3] = [e4[n3]]);
            return i4;
          }(e3.headers);
          if (Ti.isRedirect(e3.statusCode)) {
            const l4 = i3.get("Location");
            let m3 = null;
            try {
              m3 = null === l4 ? null : new _i(l4, t2.url).toString();
            } catch (e4) {
              if ("manual" !== t2.redirect) return a2(new Ge(`uri requested responds with an invalid redirect URL: ${l4}`, "invalid-redirect")), void h2();
            }
            switch (t2.redirect) {
              case "error":
                return a2(new Ge(`uri requested responds with a redirect, redirect mode is set to error: ${t2.url}`, "no-redirect")), void h2();
              case "manual":
                if (null !== m3) try {
                  i3.set("Location", m3);
                } catch (e4) {
                  a2(e4);
                }
                break;
              case "follow":
                if (null === m3) break;
                if (t2.counter >= t2.follow) return a2(new Ge(`maximum redirect reached at: ${t2.url}`, "max-redirect")), void h2();
                const l5 = { headers: new oi(t2.headers), follow: t2.follow, counter: t2.counter + 1, agent: t2.agent, compress: t2.compress, method: t2.method, body: t2.body, signal: t2.signal, timeout: t2.timeout, size: t2.size };
                if (!function(e4, i4) {
                  const n3 = new _i(i4).hostname, a3 = new _i(e4).hostname;
                  return n3 === a3 || "." === n3[n3.length - a3.length - 1] && n3.endsWith(a3);
                }(t2.url, m3) || (d3 = t2.url, new _i(m3).protocol !== new _i(d3).protocol)) for (const e4 of ["authorization", "www-authenticate", "cookie", "cookie2"]) l5.headers.delete(e4);
                return 303 !== e3.statusCode && t2.body && null === ii(t2) ? (a2(new Ge("Cannot follow redirect with body being a readable stream", "unsupported-redirect")), void h2()) : (303 !== e3.statusCode && (301 !== e3.statusCode && 302 !== e3.statusCode || "POST" !== t2.method) || (l5.method = "GET", l5.body = void 0, l5.headers.delete("content-length")), n2(Ti(new Fi(m3, l5))), void h2());
            }
          }
          var d3;
          e3.once("end", function() {
            m2 && m2.removeEventListener("abort", c2);
          });
          let l3 = e3.pipe(new Ai());
          const o2 = { url: t2.url, status: e3.statusCode, statusText: e3.statusMessage, headers: i3, size: t2.size, timeout: t2.timeout, counter: t2.counter }, r2 = i3.get("Content-Encoding");
          if (!t2.compress || "HEAD" === t2.method || null === r2 || 204 === e3.statusCode || 304 === e3.statusCode) return s2 = new Ni(l3, o2), void n2(s2);
          const u2 = { flush: k.default.Z_SYNC_FLUSH, finishFlush: k.default.Z_SYNC_FLUSH };
          if ("gzip" == r2 || "x-gzip" == r2) return l3 = l3.pipe(k.default.createGunzip(u2)), s2 = new Ni(l3, o2), void n2(s2);
          if ("deflate" == r2 || "x-deflate" == r2) {
            const i4 = e3.pipe(new Ai());
            return i4.once("data", function(e4) {
              l3 = 8 == (15 & e4[0]) ? l3.pipe(k.default.createInflate()) : l3.pipe(k.default.createInflateRaw()), s2 = new Ni(l3, o2), n2(s2);
            }), void i4.on("end", function() {
              s2 || (s2 = new Ni(l3, o2), n2(s2));
            });
          }
          if ("br" == r2 && "function" == typeof k.default.createBrotliDecompress) return l3 = l3.pipe(k.default.createBrotliDecompress()), s2 = new Ni(l3, o2), void n2(s2);
          s2 = new Ni(l3, o2), n2(s2);
        }), function(e3, i3) {
          const n3 = i3.body;
          null === n3 ? e3.end() : Ye(n3) ? n3.stream().pipe(e3) : Buffer.isBuffer(n3) ? (e3.write(n3), e3.end()) : n3.pipe(e3);
        }(v2, t2);
      });
    }
    function wi(e2, i2) {
      e2.destroy ? e2.destroy(i2) : (e2.emit("error", i2), e2.end());
    }
    Ti.isRedirect = function(e2) {
      return 301 === e2 || 302 === e2 || 303 === e2 || 307 === e2 || 308 === e2;
    }, Ti.Promise = global.Promise;
    var Ii = Object.freeze({ __proto__: null, default: Ti, Headers: oi, Request: Fi, Response: Ni, FetchError: Ge, AbortError: Vi });
    var Ci = ae(de);
    var Pi = ae(Ii);
    function qi(e2) {
      return e2 && e2.default || e2;
    }
    var xi;
    var ji;
    var Oi;
    var Ui;
    var Bi;
    var Ei;
    var Ri;
    var Mi;
    var Li;
    var zi;
    var Hi;
    var Gi;
    var Wi;
    var Qi;
    var Ji;
    var Ki;
    var $i;
    var Zi;
    var Yi;
    var Xi;
    var en;
    var nn;
    var an;
    var tn;
    var dn;
    var ln;
    var mn;
    var on;
    var rn;
    var sn;
    var un;
    var kn;
    var pn;
    var cn;
    var vn;
    var Nn;
    var hn;
    var fn;
    var Sn;
    var yn;
    var bn;
    var gn = ne.fetch = ne.fetch || ("undefined" == typeof process ? qi(Ci) : function(e2, i2) {
      return qi(Pi)(String(e2).replace(/^\/\//g, "https://"), i2);
    });
    var Dn = class _Dn extends Error {
      constructor(e2, i2) {
        super(`${_Dn.extractMessage(e2)}: ${JSON.stringify({ response: e2, request: i2 })}`), Object.setPrototypeOf(this, _Dn.prototype), this.response = e2, this.request = i2, "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, _Dn);
      }
      static extractMessage(e2) {
        var i2, n2, a2;
        try {
          return null !== (a2 = null === (n2 = null === (i2 = e2.errors) || void 0 === i2 ? void 0 : i2[0]) || void 0 === n2 ? void 0 : n2.message) && void 0 !== a2 ? a2 : `GraphQL Error (Code: ${e2.status})`;
        } catch (i3) {
          return `GraphQL Error (Code: ${e2.status})`;
        }
      }
    };
    var Fn = class {
      constructor(e2, i2) {
        this.url = e2, this.options = i2 || {};
      }
      rawRequest(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = this.options, { headers: t2 } = a2, d2 = c(a2, ["headers"]), l2 = JSON.stringify({ query: e2, variables: i2 }), m2 = yield gn(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, "string" == typeof l2 ? { "Content-Type": "application/json" } : {}), _n(t2)), _n(n2)), body: l2 }, d2)), o2 = yield Vn(m2);
          if ("string" != typeof o2 && m2.ok && !o2.errors && o2.data) return Object.assign(Object.assign({}, o2), { headers: m2.headers, status: m2.status });
          throw O(new Dn(Object.assign(Object.assign({}, "string" == typeof o2 ? { error: o2 } : o2), { status: m2.status, headers: m2.headers }), { query: e2, variables: i2 }));
        });
      }
      request(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = this.options, { headers: t2 } = a2, d2 = c(a2, ["headers"]), l2 = "string" == typeof e2 ? e2 : Q(e2), m2 = JSON.stringify({ query: l2, variables: i2 }), o2 = yield gn(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, "string" == typeof m2 ? { "Content-Type": "application/json" } : {}), _n(t2)), _n(n2)), body: m2 }, d2)), r2 = yield Vn(o2);
          if ("string" != typeof r2 && o2.ok && !r2.errors && r2.data) return r2.data;
          throw new Dn(Object.assign(Object.assign({}, "string" == typeof r2 ? { error: r2 } : r2), { status: o2.status, headers: o2.headers }), { query: l2, variables: i2 });
        });
      }
      setHeaders(e2) {
        return this.options.headers = e2, this;
      }
      setHeader(e2, i2) {
        const { headers: n2 } = this.options;
        return n2 ? n2[e2] = i2 : this.options.headers = { [e2]: i2 }, this;
      }
    };
    function Vn(e2) {
      const i2 = e2.headers.get("Content-Type");
      return i2 && i2.startsWith("application/json") ? e2.json() : e2.text();
    }
    function _n(e2) {
      let i2 = {};
      return e2 && ("undefined" != typeof Headers && e2 instanceof Headers ? i2 = function(e3) {
        const i3 = {};
        return e3.forEach((e4, n2) => {
          i3[n2] = e4;
        }), i3;
      }(e2) : Array.isArray(e2) ? e2.forEach(([e3, n2]) => {
        i2[e3] = n2;
      }) : i2 = e2), i2;
    }
    !function(e2) {
      e2.Android = "android", e2.Desktop = "desktop", e2.Ios = "ios", e2.Web = "web";
    }(xi || (xi = {})), function(e2) {
      e2.ActiveCycle = "activeCycle", e2.ActiveIssues = "activeIssues", e2.Backlog = "backlog", e2.Triage = "triage", e2.UpcomingCycle = "upcomingCycle";
    }(ji || (ji = {})), function(e2) {
      e2.Active = "active", e2.Inactive = "inactive";
    }(Oi || (Oi = {})), function(e2) {
      e2.HalfYear = "halfYear", e2.Month = "month", e2.Quarter = "quarter", e2.Year = "year";
    }(Ui || (Ui = {})), function(e2) {
      e2.Friday = "Friday", e2.Monday = "Monday", e2.Saturday = "Saturday", e2.Sunday = "Sunday", e2.Thursday = "Thursday", e2.Tuesday = "Tuesday", e2.Wednesday = "Wednesday";
    }(Bi || (Bi = {})), function(e2) {
      e2.Projects = "projects";
    }(Ei || (Ei = {})), function(e2) {
      e2.Dev = "dev", e2.Full = "full", e2.Internal = "internal", e2.Partial = "partial";
    }(Ri || (Ri = {})), function(e2) {
      e2.Draft = "draft", e2.Merge = "merge", e2.Mergeable = "mergeable", e2.Review = "review", e2.Start = "start";
    }(Mi || (Mi = {})), function(e2) {
      e2.Organization = "organization", e2.User = "user";
    }(Li || (Li = {})), function(e2) {
      e2.Active = "Active", e2.Completed = "Completed", e2.Planned = "Planned";
    }(zi || (zi = {})), function(e2) {
      e2.Overview = "overview", e2.Projects = "projects";
    }(Hi || (Hi = {})), function(e2) {
      e2.Airbyte = "airbyte", e2.Discord = "discord", e2.Email = "email", e2.Figma = "figma", e2.FigmaPlugin = "figmaPlugin", e2.Front = "front", e2.Github = "github", e2.GithubCommit = "githubCommit", e2.GithubEnterpriseServer = "githubEnterpriseServer", e2.GithubImport = "githubImport", e2.GithubPersonal = "githubPersonal", e2.Gitlab = "gitlab", e2.GoogleCalendarPersonal = "googleCalendarPersonal", e2.GoogleSheets = "googleSheets", e2.Intercom = "intercom", e2.Jira = "jira", e2.JiraPersonal = "jiraPersonal", e2.LaunchDarkly = "launchDarkly", e2.Loom = "loom", e2.Notion = "notion", e2.Opsgenie = "opsgenie", e2.PagerDuty = "pagerDuty", e2.Sentry = "sentry", e2.Slack = "slack", e2.SlackAsks = "slackAsks", e2.SlackCustomViewNotifications = "slackCustomViewNotifications", e2.SlackOrgProjectUpdatesPost = "slackOrgProjectUpdatesPost", e2.SlackPersonal = "slackPersonal", e2.SlackPost = "slackPost", e2.SlackProjectPost = "slackProjectPost", e2.SlackProjectUpdatesPost = "slackProjectUpdatesPost", e2.Zendesk = "zendesk";
    }(Gi || (Gi = {})), function(e2) {
      e2.Blocks = "blocks", e2.Duplicate = "duplicate", e2.Related = "related";
    }(Wi || (Wi = {})), function(e2) {
      e2.Approved = "approved", e2.Denied = "denied", e2.Requested = "requested";
    }(Qi || (Qi = {})), function(e2) {
      e2.General = "general", e2.Saml = "saml";
    }(Ji || (Ji = {})), function(e2) {
      e2.Accepted = "accepted", e2.Expired = "expired", e2.Pending = "pending";
    }(Ki || (Ki = {})), function(e2) {
      e2.First = "first", e2.Last = "last";
    }($i || ($i = {})), function(e2) {
      e2.CreatedAt = "createdAt", e2.UpdatedAt = "updatedAt";
    }(Zi || (Zi = {})), function(e2) {
      e2.Ascending = "Ascending", e2.Descending = "Descending";
    }(Yi || (Yi = {})), function(e2) {
      e2.Backlog = "backlog", e2.Canceled = "canceled", e2.Completed = "completed", e2.Paused = "paused", e2.Planned = "planned", e2.Started = "started";
    }(Xi || (Xi = {})), function(e2) {
      e2.Documents = "documents", e2.Issues = "issues";
    }(en || (en = {})), function(e2) {
      e2.AtRisk = "atRisk", e2.OffTrack = "offTrack", e2.OnTrack = "onTrack";
    }(nn || (nn = {})), function(e2) {
      e2.Month = "month", e2.Never = "never", e2.TwoWeeks = "twoWeeks", e2.Week = "week";
    }(an || (an = {})), function(e2) {
      e2.Apple = "apple", e2.AppleDevelopment = "appleDevelopment", e2.Firebase = "firebase", e2.Web = "web";
    }(tn || (tn = {})), function(e2) {
      e2.Beta = "beta", e2.Internal = "internal", e2.PreRelease = "preRelease", e2.Public = "public";
    }(dn || (dn = {})), function(e2) {
      e2.All = "all", e2.OnlyBusinessDays = "onlyBusinessDays";
    }(ln || (ln = {})), function(e2) {
      e2.BooleanType = "booleanType", e2.DateType = "dateType", e2.NumberType = "numberType", e2.StringType = "stringType";
    }(mn || (mn = {})), function(e2) {
      e2.Desktop = "desktop", e2.DesktopAndPush = "desktopAndPush", e2.DesktopThenPush = "desktopThenPush", e2.Push = "push";
    }(on || (on = {})), function(e2) {
      e2.Breached = "Breached", e2.Completed = "Completed", e2.Failed = "Failed", e2.HighRisk = "HighRisk", e2.LowRisk = "LowRisk", e2.MediumRisk = "MediumRisk";
    }(rn || (rn = {})), function(e2) {
      e2.DirectMessage = "DirectMessage", e2.MultiPersonDirectMessage = "MultiPersonDirectMessage", e2.Private = "Private", e2.Public = "Public";
    }(sn || (sn = {})), function(e2) {
      e2.ExcludeTrash = "excludeTrash", e2.IncludeTrash = "includeTrash", e2.TrashOnly = "trashOnly";
    }(un || (un = {})), function(e2) {
      e2.Assign = "assign", e2.Notify = "notify";
    }(kn || (kn = {})), function(e2) {
      e2.Assigned = "assigned";
    }(pn || (pn = {})), function(e2) {
      e2.All = "all", e2.AnalyticsWelcomeDismissed = "analyticsWelcomeDismissed", e2.CanPlaySnake = "canPlaySnake", e2.CanPlayTetris = "canPlayTetris", e2.CompletedOnboarding = "completedOnboarding", e2.CycleWelcomeDismissed = "cycleWelcomeDismissed", e2.DesktopDownloadToastDismissed = "desktopDownloadToastDismissed", e2.DesktopInstalled = "desktopInstalled", e2.DesktopTabsOnboardingDismissed = "desktopTabsOnboardingDismissed", e2.DueDateShortcutMigration = "dueDateShortcutMigration", e2.EditorSlashCommandUsed = "editorSlashCommandUsed", e2.EmptyActiveIssuesDismissed = "emptyActiveIssuesDismissed", e2.EmptyBacklogDismissed = "emptyBacklogDismissed", e2.EmptyCustomViewsDismissed = "emptyCustomViewsDismissed", e2.EmptyMyIssuesDismissed = "emptyMyIssuesDismissed", e2.EmptyParagraphSlashCommandTip = "emptyParagraphSlashCommandTip", e2.FigmaPluginBannerDismissed = "figmaPluginBannerDismissed", e2.FigmaPromptDismissed = "figmaPromptDismissed", e2.HelpIslandFeatureInsightsDismissed = "helpIslandFeatureInsightsDismissed", e2.ImportBannerDismissed = "importBannerDismissed", e2.InitiativesBannerDismissed = "initiativesBannerDismissed", e2.InsightsHelpDismissed = "insightsHelpDismissed", e2.InsightsWelcomeDismissed = "insightsWelcomeDismissed", e2.IssueLabelSuggestionUsed = "issueLabelSuggestionUsed", e2.IssueMovePromptCompleted = "issueMovePromptCompleted", e2.JoinTeamIntroductionDismissed = "joinTeamIntroductionDismissed", e2.ListSelectionTip = "listSelectionTip", e2.MigrateThemePreference = "migrateThemePreference", e2.MilestoneOnboardingIsSeenAndDismissed = "milestoneOnboardingIsSeenAndDismissed", e2.ProjectBacklogWelcomeDismissed = "projectBacklogWelcomeDismissed", e2.ProjectBoardOnboardingIsSeenAndDismissed = "projectBoardOnboardingIsSeenAndDismissed", e2.ProjectUpdatesWelcomeDismissed = "projectUpdatesWelcomeDismissed", e2.ProjectWelcomeDismissed = "projectWelcomeDismissed", e2.RewindBannerDismissed = "rewindBannerDismissed", e2.SlackCommentReactionTipShown = "slackCommentReactionTipShown", e2.TeamsPageIntroductionDismissed = "teamsPageIntroductionDismissed", e2.ThreadedCommentsNudgeIsSeen = "threadedCommentsNudgeIsSeen", e2.TriageWelcomeDismissed = "triageWelcomeDismissed", e2.TryCyclesDismissed = "tryCyclesDismissed", e2.TryGithubDismissed = "tryGithubDismissed", e2.TryInvitePeopleDismissed = "tryInvitePeopleDismissed", e2.TryRoadmapsDismissed = "tryRoadmapsDismissed", e2.TryTriageDismissed = "tryTriageDismissed", e2.UpdatedSlackThreadSyncIntegration = "updatedSlackThreadSyncIntegration";
    }(cn || (cn = {})), function(e2) {
      e2.Clear = "clear", e2.Decr = "decr", e2.Incr = "incr", e2.Lock = "lock";
    }(vn || (vn = {})), function(e2) {
      e2.Admin = "admin", e2.Guest = "guest", e2.User = "user";
    }(Nn || (Nn = {})), function(e2) {
      e2.Organization = "organization", e2.User = "user";
    }(hn || (hn = {})), function(e2) {
      e2.ActiveIssues = "activeIssues", e2.AllIssues = "allIssues", e2.Archive = "archive", e2.Backlog = "backlog", e2.Board = "board", e2.CompletedCycle = "completedCycle", e2.CustomRoadmap = "customRoadmap", e2.CustomView = "customView", e2.CustomViews = "customViews", e2.Customers = "customers", e2.Cycle = "cycle", e2.Inbox = "inbox", e2.Initiative = "initiative", e2.InitiativeOverview = "initiativeOverview", e2.Initiatives = "initiatives", e2.InitiativesCompleted = "initiativesCompleted", e2.InitiativesPlanned = "initiativesPlanned", e2.IssueIdentifiers = "issueIdentifiers", e2.Label = "label", e2.MyIssues = "myIssues", e2.MyIssuesActivity = "myIssuesActivity", e2.MyIssuesCreatedByMe = "myIssuesCreatedByMe", e2.MyIssuesSubscribedTo = "myIssuesSubscribedTo", e2.Project = "project", e2.ProjectDocuments = "projectDocuments", e2.Projects = "projects", e2.ProjectsAll = "projectsAll", e2.ProjectsBacklog = "projectsBacklog", e2.ProjectsClosed = "projectsClosed", e2.QuickView = "quickView", e2.Roadmap = "roadmap", e2.RoadmapAll = "roadmapAll", e2.RoadmapBacklog = "roadmapBacklog", e2.RoadmapClosed = "roadmapClosed", e2.Roadmaps = "roadmaps", e2.Search = "search", e2.SplitSearch = "splitSearch", e2.Teams = "teams", e2.Triage = "triage", e2.UserProfile = "userProfile", e2.UserProfileCreatedByUser = "userProfileCreatedByUser";
    }(fn || (fn = {})), function(e2) {
      e2.EntityCreated = "entityCreated", e2.EntityCreatedOrUpdated = "entityCreatedOrUpdated", e2.EntityRemoved = "entityRemoved", e2.EntityUnarchived = "entityUnarchived", e2.EntityUpdated = "entityUpdated";
    }(Sn || (Sn = {})), function(e2) {
      e2.Issue = "issue", e2.Project = "project";
    }(yn || (yn = {})), function(e2) {
      e2.Custom = "custom", e2.Sla = "sla", e2.ViewSubscription = "viewSubscription";
    }(bn || (bn = {}));
    var An = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "contentState" } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "restoredAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var Tn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var wn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var In = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entityId" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Cn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Pn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var qn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var xn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueDraftArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueDraftArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var jn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ActorBot" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ActorBot" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "userDisplayName" } }, { kind: "Field", name: { kind: "Name", value: "subType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var On = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "documentId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Un = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Bn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] };
    var En = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscriptions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Rn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClientApproval" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApproval" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "requesterId" } }, { kind: "Field", name: { kind: "Name", value: "responderId" } }, { kind: "Field", name: { kind: "Name", value: "requestReason" } }, { kind: "Field", name: { kind: "Name", value: "denyReason" } }, { kind: "Field", name: { kind: "Name", value: "scopes" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientId" } }] } }] };
    var Mn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClientApprovalNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientApprovalId" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientApproval" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApproval" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Ln = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestoneId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var zn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Notification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Notification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApprovalNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectNotification" } }] } }] } }] };
    var Hn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Gn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Wn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Qn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Jn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStateArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Kn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOrganization" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganization" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } }, { kind: "Field", name: { kind: "Name", value: "serviceId" } }, { kind: "Field", name: { kind: "Name", value: "releaseChannel" } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "urlKey" } }, { kind: "Field", name: { kind: "Name", value: "region" } }, { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "samlEnabled" } }, { kind: "Field", name: { kind: "Name", value: "scimEnabled" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }, { kind: "Field", name: { kind: "Name", value: "userCount" } }] } }] };
    var $n = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthUser" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthUser" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "userAccountId" } }, { kind: "Field", name: { kind: "Name", value: "active" } }, { kind: "Field", name: { kind: "Name", value: "role" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var Zn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationIpRestriction" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationIpRestriction" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "range" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] };
    var Yn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatus" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatus" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "indefinite" } }] } }] };
    var Xn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PaidSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PaidSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "collectionMethod" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "nextBillingAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "seatsMaximum" } }, { kind: "Field", name: { kind: "Name", value: "seatsMinimum" } }, { kind: "Field", name: { kind: "Name", value: "seats" } }, { kind: "Field", name: { kind: "Name", value: "pendingChangeType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var ea = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Organization" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Organization" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "gitBranchFormat" } }, { kind: "Field", name: { kind: "Name", value: "ipRestrictions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationIpRestriction" } }] } }, { kind: "Field", name: { kind: "Name", value: "userCount" } }, { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } }, { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } }, { kind: "Field", name: { kind: "Name", value: "periodUploadVolume" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "releaseChannel" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "fiscalYearStartMonth" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "projectStatuses" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "urlKey" } }, { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "trialEndsAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "samlEnabled" } }, { kind: "Field", name: { kind: "Name", value: "scimEnabled" } }, { kind: "Field", name: { kind: "Name", value: "allowMembersToInvite" } }, { kind: "Field", name: { kind: "Name", value: "gitLinkbackMessagesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "gitPublicLinkbackMessagesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "roadmapEnabled" } }, { kind: "Field", name: { kind: "Name", value: "slaDayCount" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdatesReminderFrequency" } }] } }] };
    var ia = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthenticationSessionResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthenticationSessionResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "client" } }, { kind: "Field", name: { kind: "Name", value: "countryCodes" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "location" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "isCurrentSession" } }, { kind: "Field", name: { kind: "Name", value: "locationCity" } }, { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } }, { kind: "Field", name: { kind: "Name", value: "locationCountry" } }, { kind: "Field", name: { kind: "Name", value: "locationRegionCode" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "operatingSystem" } }, { kind: "Field", name: { kind: "Name", value: "userAgent" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "browserType" } }, { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var na = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityCountResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityCountResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "counts" } }] } }] };
    var aa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserAuthorizedApplication" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAuthorizedApplication" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "approvalErrorCode" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "developer" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "developerUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhooksEnabled" } }, { kind: "Field", name: { kind: "Name", value: "createdByLinear" } }, { kind: "Field", name: { kind: "Name", value: "isAuthorized" } }] } }] };
    var ta = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Application" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Application" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "developer" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "developerUrl" } }] } }] };
    var da = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackAsksTeamSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackAsksTeamSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "hasDefaultAsk" } }] } }] };
    var la = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackChannelNameMapping" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelNameMapping" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateTemplateId" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnBotMention" } }, { kind: "Field", name: { kind: "Name", value: "postCancellationUpdates" } }, { kind: "Field", name: { kind: "Name", value: "postCompletionUpdates" } }, { kind: "Field", name: { kind: "Name", value: "postAcceptedFromTriageUpdates" } }, { kind: "Field", name: { kind: "Name", value: "botAdded" } }, { kind: "Field", name: { kind: "Name", value: "isPrivate" } }, { kind: "Field", name: { kind: "Name", value: "isShared" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnMessage" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnEmoji" } }, { kind: "Field", name: { kind: "Name", value: "teams" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackAsksTeamSettings" } }] } }] } }] };
    var ma = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var oa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeToProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeToProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var ra = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "end" } }, { kind: "Field", name: { kind: "Name", value: "start" } }] } }] };
    var sa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "friday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "monday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "saturday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "sunday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "thursday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "tuesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "wednesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "disabled" } }] } }] };
    var ua = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } }] } }, { kind: "Field", name: { kind: "Name", value: "notificationsDisabled" } }] } }] };
    var ka = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } }] } }] } }] };
    var pa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "calendarHash" } }, { kind: "Field", name: { kind: "Name", value: "unsubscribedFrom" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationPreferences" } }, { kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscribedToDPA" } }, { kind: "Field", name: { kind: "Name", value: "subscribedToChangelog" } }, { kind: "Field", name: { kind: "Name", value: "subscribedToInviteAccepted" } }, { kind: "Field", name: { kind: "Name", value: "subscribedToPrivacyLegalUpdates" } }, { kind: "Field", name: { kind: "Name", value: "subscribedToUnreadNotificationsReminder" } }, { kind: "Field", name: { kind: "Name", value: "showFullUserNames" } }] } }] };
    var ca = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportSyncCheckPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "error" } }, { kind: "Field", name: { kind: "Name", value: "canSync" } }] } }] };
    var va = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKey" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKey" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var Na = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PageInfo" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PageInfo" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "startCursor" } }, { kind: "Field", name: { kind: "Name", value: "endCursor" } }, { kind: "Field", name: { kind: "Name", value: "hasPreviousPage" } }, { kind: "Field", name: { kind: "Name", value: "hasNextPage" } }] } }] };
    var ha = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKeyConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var fa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AsksChannelConnectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AsksChannelConnectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "mapping" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelNameMapping" } }] } }, { kind: "Field", name: { kind: "Name", value: "addBot" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Sa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Attachment" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Attachment" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "sourceType" } }, { kind: "Field", name: { kind: "Name", value: "subtitle" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "groupBySource" } }, { kind: "Field", name: { kind: "Name", value: "source" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var ya = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var ba = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var ga = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntry" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntry" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "requestInformation" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "countryCode" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
    var Da = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntry" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Fa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntryType" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryType" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
    var Va = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthResolverResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthResolverResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "token" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "lastUsedOrganizationId" } }, { kind: "Field", name: { kind: "Name", value: "users" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "lockedUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "lockedOrganizations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "availableOrganizations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "allowDomainAccess" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var _a = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Reaction" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reaction" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emoji" } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Aa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Comment" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Comment" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "resolvingComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "quotedText" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "resolvedAt" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "resolvingUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Ta = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var wa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Ia = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ContactPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ContactPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Ca = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CreateCsvExportReportPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Pa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }] } }] };
    var qa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferencesValues" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesValues" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issueGrouping" } }, { kind: "Field", name: { kind: "Name", value: "viewOrdering" } }, { kind: "Field", name: { kind: "Name", value: "showCompletedIssues" } }] } }] };
    var xa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "preferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }, { kind: "Field", name: { kind: "Name", value: "viewType" } }] } }] };
    var ja = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomView" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomView" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "viewPreferencesValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "userViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "filterData" } }, { kind: "Field", name: { kind: "Name", value: "projectFilterData" } }, { kind: "Field", name: { kind: "Name", value: "filters" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "modelName" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "organizationViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "shared" } }] } }] };
    var Oa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Ua = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "hasSubscribers" } }] } }] };
    var Ba = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Ea = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Cycle" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Cycle" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "endsAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "startsAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var Ra = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Ma = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CyclePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CyclePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var La = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DiaryEntry" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DiaryEntry" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "date" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var za = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DiaryEntryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DiaryEntryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "diaryEntry" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Ha = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Document" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Document" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "documentContentId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "hiddenAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Ga = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Wa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContentHistoryType" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryType" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "actorIds" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "contentDataSnapshotAt" } }] } }] };
    var Qa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContentHistoryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "history" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryType" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Ja = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Ka = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ArchiveResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchiveResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archive" } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "databaseVersion" } }, { kind: "Field", name: { kind: "Name", value: "includesDependencies" } }] } }] };
    var $a = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "documentContentId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "hiddenAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Za = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Ya = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailIntakeAddress" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddress" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "address" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] };
    var Xa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailIntakeAddressPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emailIntakeAddress" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddress" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var et = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailUnsubscribePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var it = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "authType" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var nt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Emoji" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Emoji" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "source" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var at = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmojiConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var tt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmojiPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emoji" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var dt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityExternalLink" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLink" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var lt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityExternalLinkConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var mt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityExternalLinkPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "entityExternalLink" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var ot = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalUser" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUser" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "lastSeen" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var rt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalUserConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUserConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var st = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Favorite" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Favorite" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "folderName" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeTab" } }, { kind: "Field", name: { kind: "Name", value: "projectTab" } }, { kind: "Field", name: { kind: "Name", value: "predefinedViewTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "predefinedViewType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "projectTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var ut = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FavoriteConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoriteConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var kt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FavoritePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoritePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var pt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FrontAttachmentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontAttachmentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var ct = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationTargetBranch" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranch" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "branchPattern" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "isRegex" } }] } }] };
    var vt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationState" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationState" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "event" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "targetBranch" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "branchPattern" } }] } }] };
    var Nt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationStateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var ht = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationStatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "gitAutomationState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var ft = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "targetBranch" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var St = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var yt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var bt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "installUrl" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "setupUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var gt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Dt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ImageUploadFromUrlPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Ft = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Initiative" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Initiative" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Vt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var _t = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeToProject" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProject" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var At = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeToProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Tt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Integration" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Integration" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var wt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var It = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationHasScopesPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationHasScopesPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "missingScopes" } }, { kind: "Field", name: { kind: "Name", value: "hasAllScopes" } }] } }] };
    var Ct = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Pt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationRequestPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var qt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplate" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplate" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "foreignEntityId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var xt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var jt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "integrationTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Ot = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationsSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueNewComment" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToTriage" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueCreated" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreated" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueSlaHighRisk" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueSlaBreached" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToView" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedDone" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedAll" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToTeam" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToWorkspace" } }] } }] };
    var Ut = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationsSettingsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Bt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Issue" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Issue" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } }, { kind: "Field", name: { kind: "Name", value: "branchName" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "dueDate" } }, { kind: "Field", name: { kind: "Name", value: "estimate" } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "boardOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } }, { kind: "Field", name: { kind: "Name", value: "triagedAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "assignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "snoozedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Et = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueBatchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Rt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Mt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueDraftPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueDraftPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Lt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueFilterSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "filter" } }] } }] };
    var zt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationHistoryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
    var Ht = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "User" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "User" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "statusUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } }, { kind: "Field", name: { kind: "Name", value: "disableReason" } }, { kind: "Field", name: { kind: "Name", value: "avatarBackgroundColor" } }, { kind: "Field", name: { kind: "Name", value: "statusEmoji" } }, { kind: "Field", name: { kind: "Name", value: "initials" } }, { kind: "Field", name: { kind: "Name", value: "statusLabel" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "lastSeen" } }, { kind: "Field", name: { kind: "Name", value: "timezone" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "inviteHash" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "active" } }, { kind: "Field", name: { kind: "Name", value: "guest" } }, { kind: "Field", name: { kind: "Name", value: "admin" } }, { kind: "Field", name: { kind: "Name", value: "isMe" } }, { kind: "Field", name: { kind: "Name", value: "calendarHash" } }] } }] };
    var Gt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImport" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImport" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "errorMetadata" } }, { kind: "Field", name: { kind: "Name", value: "csvFileUrl" } }, { kind: "Field", name: { kind: "Name", value: "serviceMetadata" } }, { kind: "Field", name: { kind: "Name", value: "teamName" } }, { kind: "Field", name: { kind: "Name", value: "mapping" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "error" } }] } }] };
    var Wt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabel" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabel" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isGroup" } }] } }] };
    var Qt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueHistory" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistory" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "relationChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "addedLabelIds" } }, { kind: "Field", name: { kind: "Name", value: "removedLabelIds" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "actors" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "attachmentId" } }, { kind: "Field", name: { kind: "Name", value: "toCycleId" } }, { kind: "Field", name: { kind: "Name", value: "toParentId" } }, { kind: "Field", name: { kind: "Name", value: "toConvertedProjectId" } }, { kind: "Field", name: { kind: "Name", value: "toProjectId" } }, { kind: "Field", name: { kind: "Name", value: "toStateId" } }, { kind: "Field", name: { kind: "Name", value: "fromCycleId" } }, { kind: "Field", name: { kind: "Name", value: "fromParentId" } }, { kind: "Field", name: { kind: "Name", value: "fromProjectId" } }, { kind: "Field", name: { kind: "Name", value: "fromStateId" } }, { kind: "Field", name: { kind: "Name", value: "fromTeamId" } }, { kind: "Field", name: { kind: "Name", value: "toTeamId" } }, { kind: "Field", name: { kind: "Name", value: "fromAssigneeId" } }, { kind: "Field", name: { kind: "Name", value: "toAssigneeId" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "addedLabels" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "removedLabels" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toConvertedProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromParent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toParent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "toAssignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromAssignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "triageResponsibilityNotifiedUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromDueDate" } }, { kind: "Field", name: { kind: "Name", value: "toDueDate" } }, { kind: "Field", name: { kind: "Name", value: "fromEstimate" } }, { kind: "Field", name: { kind: "Name", value: "toEstimate" } }, { kind: "Field", name: { kind: "Name", value: "fromPriority" } }, { kind: "Field", name: { kind: "Name", value: "toPriority" } }, { kind: "Field", name: { kind: "Name", value: "fromTitle" } }, { kind: "Field", name: { kind: "Name", value: "toTitle" } }, { kind: "Field", name: { kind: "Name", value: "archived" } }, { kind: "Field", name: { kind: "Name", value: "autoArchived" } }, { kind: "Field", name: { kind: "Name", value: "autoClosed" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "updatedDescription" } }] } }] };
    var Jt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueHistoryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistoryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistory" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Kt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportCheckPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportCheckPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var $t = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Zt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Yt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabelConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Xt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabelPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueLabel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var ed = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssuePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var id = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssuePriorityValue" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePriorityValue" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }] } }] };
    var nd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelation" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelation" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "relatedIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var ad = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var td = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueRelation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var dd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } }, { kind: "Field", name: { kind: "Name", value: "branchName" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "dueDate" } }, { kind: "Field", name: { kind: "Name", value: "estimate" } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "boardOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } }, { kind: "Field", name: { kind: "Name", value: "triagedAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "assignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "snoozedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var ld = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var md = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "LogoutResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LogoutResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var od = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationBatchActionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationBatchActionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notifications" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var rd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var sd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notification" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var ud = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscriptionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var kd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscriptionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var pd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationCancelDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var cd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var vd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationExistsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationExistsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "exists" } }] } }] };
    var Nd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInvite" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvite" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "external" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "acceptedAt" } }, { kind: "Field", name: { kind: "Name", value: "expiresAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "role" } }, { kind: "Field", name: { kind: "Name", value: "inviter" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "invitee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var hd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInviteConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var fd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInvitePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvitePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "organizationInvite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Sd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var yd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationStartTrialPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var bd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Project" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Project" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "startDate" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "lead" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "convertedFromIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }, { kind: "Field", name: { kind: "Name", value: "state" } }] } }] };
    var gd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Dd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "filter" } }] } }] };
    var Fd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectHistory" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistory" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entries" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var Vd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectHistoryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistoryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistory" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var _d = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectLink" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLink" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Ad = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectLinkConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Td = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectLinkPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectLink" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var wd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestone" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestone" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var Id = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Cd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestonePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestonePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Pd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var qd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectRelation" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelation" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "relatedProjectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "relatedProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "anchorType" } }, { kind: "Field", name: { kind: "Name", value: "relatedAnchorType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var xd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectRelationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var jd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "startDate" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "lead" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "convertedFromIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }, { kind: "Field", name: { kind: "Name", value: "state" } }] } }] };
    var Od = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Ud = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdate" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdate" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } }, { kind: "Field", name: { kind: "Name", value: "diff" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isDiffHidden" } }] } }] };
    var Bd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Ed = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateInteraction" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteraction" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Rd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateInteractionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteraction" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Md = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateInteractionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateInteraction" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Ld = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var zd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateReminderPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Hd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "interaction" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Gd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var Wd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscriptionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Qd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscriptionTestPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Jd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RateLimitResultPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitResultPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "period" } }, { kind: "Field", name: { kind: "Name", value: "remainingAmount" } }, { kind: "Field", name: { kind: "Name", value: "requestedAmount" } }, { kind: "Field", name: { kind: "Name", value: "reset" } }, { kind: "Field", name: { kind: "Name", value: "allowedAmount" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
    var Kd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RateLimitPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "kind" } }, { kind: "Field", name: { kind: "Name", value: "limits" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitResultPayload" } }] } }] } }] };
    var $d = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ReactionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "reaction" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Zd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Roadmap" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Roadmap" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var Yd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Xd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var el = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProject" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProject" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var il = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var nl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "roadmapToProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var al = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackChannelConnectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelConnectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "nudgeToConnectMainSlackIntegration" } }, { kind: "Field", name: { kind: "Name", value: "nudgeToUpdateMainSlackIntegration" } }, { kind: "Field", name: { kind: "Name", value: "addBot" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var tl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SsoUrlFromEmailResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "samlSsoUrl" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var dl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Team" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Team" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignCompleted" } }, { kind: "Field", name: { kind: "Name", value: "cycleLockToActive" } }, { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignStarted" } }, { kind: "Field", name: { kind: "Name", value: "cycleCalenderUrl" } }, { kind: "Field", name: { kind: "Name", value: "upcomingCycleCount" } }, { kind: "Field", name: { kind: "Name", value: "issueCount" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivePeriod" } }, { kind: "Field", name: { kind: "Name", value: "autoClosePeriod" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "activeCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "scimGroupName" } }, { kind: "Field", name: { kind: "Name", value: "autoCloseStateId" } }, { kind: "Field", name: { kind: "Name", value: "cycleCooldownTime" } }, { kind: "Field", name: { kind: "Name", value: "cycleStartDay" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultProjectTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultIssueState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycleDuration" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembersId" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembersId" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationType" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "timezone" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "mergeWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "draftWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "startWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "mergeableWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "reviewWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "markedAsDuplicateWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "triageIssueState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "inviteHash" } }, { kind: "Field", name: { kind: "Name", value: "defaultIssueEstimate" } }, { kind: "Field", name: { kind: "Name", value: "setIssueSortOrderOnStateChange" } }, { kind: "Field", name: { kind: "Name", value: "requirePriorityToLeaveTriage" } }, { kind: "Field", name: { kind: "Name", value: "autoCloseChildIssues" } }, { kind: "Field", name: { kind: "Name", value: "autoCloseParentIssues" } }, { kind: "Field", name: { kind: "Name", value: "scimManaged" } }, { kind: "Field", name: { kind: "Name", value: "private" } }, { kind: "Field", name: { kind: "Name", value: "cyclesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationExtended" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationAllowZero" } }, { kind: "Field", name: { kind: "Name", value: "groupIssueHistory" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }, { kind: "Field", name: { kind: "Name", value: "triageEnabled" } }, { kind: "Field", name: { kind: "Name", value: "issueOrderingNoPriorityFirst" } }, { kind: "Field", name: { kind: "Name", value: "issueSortOrderDefaultToBottom" } }] } }] };
    var ll = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var ml = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembership" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembership" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" } }] } }] };
    var ol = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembershipConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var rl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembershipPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "teamMembership" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var sl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var ul = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Template" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Template" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "templateData" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastUpdatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var kl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TemplateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var pl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TemplatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var cl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeScheduleEntry" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleEntry" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "userEmail" } }, { kind: "Field", name: { kind: "Name", value: "endsAt" } }, { kind: "Field", name: { kind: "Name", value: "startsAt" } }] } }] };
    var vl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeSchedule" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedule" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "externalUrl" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "entries" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleEntry" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var Nl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeScheduleConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var hl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeSchedulePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedulePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "timeSchedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var fl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibilityManualSelection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "userIds" } }] } }] };
    var Sl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibility" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibility" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "manualSelection" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } }] } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "timeSchedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "currentUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var yl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibilityConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var bl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibilityPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
    var gl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadFileHeader" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFileHeader" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "value" } }] } }] };
    var Dl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadFile" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFile" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "assetUrl" } }, { kind: "Field", name: { kind: "Name", value: "contentType" } }, { kind: "Field", name: { kind: "Name", value: "filename" } }, { kind: "Field", name: { kind: "Name", value: "uploadUrl" } }, { kind: "Field", name: { kind: "Name", value: "size" } }, { kind: "Field", name: { kind: "Name", value: "headers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFileHeader" } }] } }, { kind: "Field", name: { kind: "Name", value: "metaData" } }] } }] };
    var Fl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "uploadFile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFile" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Vl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserAdminPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAdminPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var _l = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Al = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Tl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsFlagPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "flag" } }, { kind: "Field", name: { kind: "Name", value: "value" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var wl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Il = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Cl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferencesPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "viewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Pl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Webhook" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Webhook" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "secret" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "resourceTypes" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "allPublicTeams" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] };
    var ql = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var xl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "webhook" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var jl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowState" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowState" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
    var Ol = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
    var Ul = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "workflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
    var Bl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "administrableTeams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "administrableTeams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }, ...ll.definitions, ...dl.definitions, ...Na.definitions] };
    var El = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "apiKeys" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "apiKeys" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyConnection" } }] } }] } }, ...ha.definitions, ...va.definitions, ...Na.definitions] };
    var Rl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "applicationInfo" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "applicationInfo" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "clientId" }, value: { kind: "Variable", name: { kind: "Name", value: "clientId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Application" } }] } }] } }, ...ta.definitions] };
    var Ml = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "applicationWithAuthorization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "actor" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scope" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "applicationWithAuthorization" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "actor" }, value: { kind: "Variable", name: { kind: "Name", value: "actor" } } }, { kind: "Argument", name: { kind: "Name", value: "clientId" }, value: { kind: "Variable", name: { kind: "Name", value: "clientId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "scope" }, value: { kind: "Variable", name: { kind: "Name", value: "scope" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAuthorizedApplication" } }] } }] } }, ...aa.definitions] };
    var Ll = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "archivedModelSync" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "identifier" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "modelClass" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivedModelSync" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "identifier" }, value: { kind: "Variable", name: { kind: "Name", value: "identifier" } } }, { kind: "Argument", name: { kind: "Name", value: "modelClass" }, value: { kind: "Variable", name: { kind: "Name", value: "modelClass" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }, ...Ka.definitions] };
    var zl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "archivedModelsSync" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "beforeId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueFilter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "modelClass" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "trashOption" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TrashOptionType" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivedModelsSync" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "beforeId" }, value: { kind: "Variable", name: { kind: "Name", value: "beforeId" } } }, { kind: "Argument", name: { kind: "Name", value: "issueFilter" }, value: { kind: "Variable", name: { kind: "Name", value: "issueFilter" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "modelClass" }, value: { kind: "Variable", name: { kind: "Name", value: "modelClass" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "trashOption" }, value: { kind: "Variable", name: { kind: "Name", value: "trashOption" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }, ...Ka.definitions] };
    var Hl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }] } }] } }, ...Sa.definitions] };
    var Gl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ...Bt.definitions, ..._a.definitions, ...jn.definitions] };
    var Wl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...ya.definitions, ...Sa.definitions, ...Na.definitions] };
    var Ql = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...jn.definitions] };
    var Jl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var Kl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ta.definitions, ...Aa.definitions, ..._a.definitions, ...jn.definitions, ...An.definitions, ...Na.definitions] };
    var $l = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }] } }] } }] } }, ...Jt.definitions, ...Qt.definitions, ...zt.definitions, ...Ht.definitions, ...jn.definitions, ...Gt.definitions, ...Wt.definitions, ...Na.definitions] };
    var Zl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ad.definitions, ...nd.definitions, ...Na.definitions] };
    var Yl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Yt.definitions, ...Wt.definitions, ...Na.definitions] };
    var Xl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ad.definitions, ...nd.definitions, ...Na.definitions] };
    var em = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_subscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ..._l.definitions, ...Ht.definitions, ...Na.definitions] };
    var im = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }, ...ya.definitions, ...Sa.definitions, ...Na.definitions] };
    var nm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentsForURL" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentsForURL" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }, ...ya.definitions, ...Sa.definitions, ...Na.definitions] };
    var am = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "auditEntries" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "auditEntries" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryConnection" } }] } }] } }, ...Da.definitions, ...ga.definitions, ...Na.definitions] };
    var tm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "auditEntryTypes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "auditEntryTypes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryType" } }] } }] } }, ...Fa.definitions] };
    var dm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "authenticationSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "authenticationSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthenticationSessionResponse" } }] } }] } }, ...ia.definitions] };
    var lm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "availableUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "availableUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...Va.definitions, ...$n.definitions, ...Kn.definitions] };
    var mm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...jn.definitions, ...An.definitions] };
    var om = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...jn.definitions] };
    var rm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ta.definitions, ...Aa.definitions, ..._a.definitions, ...jn.definitions, ...An.definitions, ...Na.definitions] };
    var sm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_documentContent" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }] } }] } }, ...An.definitions] };
    var um = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }, ...Ta.definitions, ...Aa.definitions, ..._a.definitions, ...jn.definitions, ...An.definitions, ...Na.definitions] };
    var km = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }] } }] } }, ...ja.definitions, ...qa.definitions, ...xa.definitions] };
    var pm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var cm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_organizationViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }] } }] } }, ...xa.definitions, ...qa.definitions] };
    var vm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_organizationViewPreferences_preferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "preferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }] } }] } }] } }, ...qa.definitions] };
    var Nm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...gd.definitions, ...bd.definitions, ...An.definitions, ...Yn.definitions, ...Na.definitions] };
    var hm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_userViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }] } }] } }, ...xa.definitions, ...qa.definitions] };
    var fm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_userViewPreferences_preferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "preferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }] } }] } }] } }, ...qa.definitions] };
    var Sm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_viewPreferencesValues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }] } }] } }, ...qa.definitions] };
    var ym = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customViewHasSubscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewHasSubscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } }] } }] } }, ...Ua.definitions] };
    var bm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customViews" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViews" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewConnection" } }] } }] } }, ...Oa.definitions, ...ja.definitions, ...qa.definitions, ...xa.definitions, ...Na.definitions] };
    var gm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }] } }] } }, ...Ea.definitions] };
    var Dm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var Fm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle_uncompletedIssuesUponClose" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "uncompletedIssuesUponClose" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var Vm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycles" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }] } }] } }, ...Ra.definitions, ...Ea.definitions, ...Na.definitions] };
    var _m = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "diaryEntry" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "diaryEntry" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DiaryEntry" } }] } }] } }, ...La.definitions] };
    var Am = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "document" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "document" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }] } }] } }, ...Ha.definitions] };
    var Tm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "document_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "document" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ta.definitions, ...Aa.definitions, ..._a.definitions, ...jn.definitions, ...An.definitions, ...Na.definitions] };
    var wm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "documentContentHistory" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContentHistory" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }] } }] } }, ...Qa.definitions, ...Wa.definitions] };
    var Im = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "documents" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documents" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }] } }] } }, ...Ga.definitions, ...Ha.definitions, ...Na.definitions] };
    var Cm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "emoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emoji" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }] } }] } }, ...nt.definitions] };
    var Pm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "emojis" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojis" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiConnection" } }] } }] } }, ...at.definitions, ...nt.definitions, ...Na.definitions] };
    var qm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "entityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLink" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }] } }] } }, ...dt.definitions] };
    var xm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "externalUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalUser" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }] } }] } }, ...ot.definitions] };
    var jm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "externalUsers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalUsers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserConnection" } }] } }] } }, ...rt.definitions, ...ot.definitions, ...Na.definitions] };
    var Om = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }] } }] } }, ...st.definitions] };
    var Um = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorite_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }] } }] } }] } }, ...ut.definitions, ...st.definitions, ...Na.definitions] };
    var Bm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorites" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorites" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }] } }] } }, ...ut.definitions, ...st.definitions, ...Na.definitions] };
    var Em = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }] } }] } }, ...Ft.definitions] };
    var Rm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_links" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "links" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } }] } }] } }] } }, ...lt.definitions, ...dt.definitions, ...Na.definitions] };
    var Mm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...gd.definitions, ...bd.definitions, ...An.definitions, ...Yn.definitions, ...Na.definitions] };
    var Lm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProject" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }] } }] } }, ..._t.definitions] };
    var zm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeToProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectConnection" } }] } }] } }, ...At.definitions, ..._t.definitions, ...Na.definitions] };
    var Hm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiatives" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiatives" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }] } }] } }, ...Vt.definitions, ...Ft.definitions, ...Na.definitions] };
    var Gm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integration" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }] } }] } }, ...Tt.definitions] };
    var Wm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationHasScopes" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scopes" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationHasScopes" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "integrationId" }, value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } } }, { kind: "Argument", name: { kind: "Name", value: "scopes" }, value: { kind: "Variable", name: { kind: "Name", value: "scopes" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationHasScopesPayload" } }] } }] } }, ...It.definitions] };
    var Qm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }] } }] } }, ...qt.definitions] };
    var Jm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationTemplates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplateConnection" } }] } }] } }, ...xt.definitions, ...qt.definitions, ...Na.definitions] };
    var Km = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }] } }] } }, ...wt.definitions, ...Tt.definitions, ...Na.definitions] };
    var $m = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }] } }] } }, ...Ot.definitions] };
    var Zm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ...Bt.definitions, ..._a.definitions, ...jn.definitions] };
    var Ym = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...ya.definitions, ...Sa.definitions, ...Na.definitions] };
    var Xm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...jn.definitions] };
    var eo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var io = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ta.definitions, ...Aa.definitions, ..._a.definitions, ...jn.definitions, ...An.definitions, ...Na.definitions] };
    var no = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }] } }] } }] } }, ...Jt.definitions, ...Qt.definitions, ...zt.definitions, ...Ht.definitions, ...jn.definitions, ...Gt.definitions, ...Wt.definitions, ...Na.definitions] };
    var ao = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ad.definitions, ...nd.definitions, ...Na.definitions] };
    var to = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Yt.definitions, ...Wt.definitions, ...Na.definitions] };
    var lo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ad.definitions, ...nd.definitions, ...Na.definitions] };
    var mo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_subscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ..._l.definitions, ...Ht.definitions, ...Na.definitions] };
    var oo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueFigmaFileKeySearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "fileKey" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueFigmaFileKeySearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "fileKey" }, value: { kind: "Variable", name: { kind: "Name", value: "fileKey" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var ro = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueFilterSuggestion" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueFilterSuggestion" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "prompt" }, value: { kind: "Variable", name: { kind: "Name", value: "prompt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }] } }] } }, ...Lt.definitions] };
    var so = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueImportCheckCSV" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCheckCSV" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "csvUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportCheckPayload" } }] } }] } }, ...Kt.definitions] };
    var uo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueImportCheckSync" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCheckSync" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } }] } }] } }, ...ca.definitions] };
    var ko = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }] } }, ...Wt.definitions] };
    var po = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Yt.definitions, ...Wt.definitions, ...Na.definitions] };
    var co = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var vo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }, ...Yt.definitions, ...Wt.definitions, ...Na.definitions] };
    var No = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issuePriorityValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issuePriorityValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePriorityValue" } }] } }] } }, ...id.definitions] };
    var ho = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelation" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }] } }] } }, ...nd.definitions] };
    var fo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }, ...ad.definitions, ...nd.definitions, ...Na.definitions] };
    var So = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueSearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "query" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "query" }, value: { kind: "Variable", name: { kind: "Name", value: "query" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var yo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ...Bt.definitions, ..._a.definitions, ...jn.definitions] };
    var bo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...ya.definitions, ...Sa.definitions, ...Na.definitions] };
    var go = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...jn.definitions] };
    var Do3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var Fo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ta.definitions, ...Aa.definitions, ..._a.definitions, ...jn.definitions, ...An.definitions, ...Na.definitions] };
    var Vo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }] } }] } }] } }, ...Jt.definitions, ...Qt.definitions, ...zt.definitions, ...Ht.definitions, ...jn.definitions, ...Gt.definitions, ...Wt.definitions, ...Na.definitions] };
    var _o = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ad.definitions, ...nd.definitions, ...Na.definitions] };
    var Ao = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Yt.definitions, ...Wt.definitions, ...Na.definitions] };
    var To = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ad.definitions, ...nd.definitions, ...Na.definitions] };
    var wo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_subscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ..._l.definitions, ...Ht.definitions, ...Na.definitions] };
    var Io = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var Co = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notification" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }] } }, ...zn.definitions, ...jn.definitions, ...On.definitions, ...Un.definitions, ...En.definitions, ...Bn.definitions, ...Mn.definitions, ...Rn.definitions, ...Ln.definitions] };
    var Po = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscription" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }] } }, ...Bn.definitions] };
    var qo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notificationSubscriptions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionConnection" } }] } }] } }, ...ud.definitions, ...Bn.definitions, ...Na.definitions] };
    var xo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notifications" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "NotificationFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notifications" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationConnection" } }] } }] } }, ...rd.definitions, ...zn.definitions, ...jn.definitions, ...On.definitions, ...Un.definitions, ...En.definitions, ...Bn.definitions, ...Mn.definitions, ...Rn.definitions, ...Ln.definitions, ...Na.definitions] };
    var jo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }] } }] } }, ...ea.definitions, ...Zn.definitions, ...Yn.definitions, ...Xn.definitions] };
    var Oo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_integrations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }] } }] } }] } }, ...wt.definitions, ...Tt.definitions, ...Na.definitions] };
    var Uo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Yt.definitions, ...Wt.definitions, ...Na.definitions] };
    var Bo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_subscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }] } }] } }] } }, ...Xn.definitions] };
    var Eo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...ll.definitions, ...dl.definitions, ...Na.definitions] };
    var Ro = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_templates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }] } }] } }] } }, ...kl.definitions, ...ul.definitions, ...Na.definitions] };
    var Mo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_users" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "users" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ..._l.definitions, ...Ht.definitions, ...Na.definitions] };
    var Lo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationExists" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "urlKey" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationExists" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "urlKey" }, value: { kind: "Variable", name: { kind: "Name", value: "urlKey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationExistsPayload" } }] } }] } }, ...vd.definitions] };
    var zo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInvite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }] } }] } }, ...Nd.definitions] };
    var Ho = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationInvites" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInvites" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteConnection" } }] } }] } }, ...hd.definitions, ...Nd.definitions, ...Na.definitions] };
    var Go = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }] } }] } }, ...bd.definitions, ...An.definitions, ...Yn.definitions] };
    var Wo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_documentContent" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }] } }] } }, ...An.definitions] };
    var Qo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_documents" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documents" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }] } }] } }] } }, ...Ga.definitions, ...Ha.definitions, ...Na.definitions] };
    var Jo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_externalLinks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalLinks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } }] } }] } }] } }, ...lt.definitions, ...dt.definitions, ...Na.definitions] };
    var Ko = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistoryConnection" } }] } }] } }] } }, ...Vd.definitions, ...Fd.definitions, ...Na.definitions] };
    var $o = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_initiatives" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiatives" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }] } }] } }] } }, ...Vt.definitions, ...Ft.definitions, ...Na.definitions] };
    var Zo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var Yo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_links" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "links" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }] } }] } }] } }, ...Ad.definitions, ..._d.definitions, ...Na.definitions] };
    var Xo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_members" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "members" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ..._l.definitions, ...Ht.definitions, ...Na.definitions] };
    var er = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_projectMilestones" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestones" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }] } }] } }] } }, ...Id.definitions, ...wd.definitions, ...An.definitions, ...Na.definitions] };
    var ir = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_projectUpdates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }] } }] } }] } }, ...Bd.definitions, ...Ud.definitions, ..._a.definitions, ...Na.definitions] };
    var nr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_status" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }] } }] } }, ...Yn.definitions] };
    var ar = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...ll.definitions, ...dl.definitions, ...Na.definitions] };
    var tr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectFilterSuggestion" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectFilterSuggestion" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "prompt" }, value: { kind: "Variable", name: { kind: "Name", value: "prompt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }] } }] } }, ...Dd.definitions] };
    var dr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLink" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }] } }] } }, ..._d.definitions] };
    var lr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectLinks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLinks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }] } }] } }, ...Ad.definitions, ..._d.definitions, ...Na.definitions] };
    var mr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestone" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }] } }] } }, ...wd.definitions, ...An.definitions] };
    var or = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestone_documentContent" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestone" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }] } }] } }, ...An.definitions] };
    var rr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestone_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestone" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var sr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestones" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestones" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }] } }] } }, ...Id.definitions, ...wd.definitions, ...An.definitions, ...Na.definitions] };
    var ur = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelation" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }] } }] } }, ...qd.definitions] };
    var kr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } }] } }] } }, ...xd.definitions, ...qd.definitions, ...Na.definitions] };
    var pr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }] } }] } }, ...Ud.definitions, ..._a.definitions] };
    var cr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdate_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ta.definitions, ...Aa.definitions, ..._a.definitions, ...jn.definitions, ...An.definitions, ...Na.definitions] };
    var vr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdateInteraction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateInteraction" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteraction" } }] } }] } }, ...Ed.definitions] };
    var Nr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdateInteractions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateInteractions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteractionConnection" } }] } }] } }, ...Rd.definitions, ...Ed.definitions, ...Na.definitions] };
    var hr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }] } }] } }, ...Bd.definitions, ...Ud.definitions, ..._a.definitions, ...Na.definitions] };
    var fr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }, ...gd.definitions, ...bd.definitions, ...An.definitions, ...Yn.definitions, ...Na.definitions] };
    var Sr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "pushSubscriptionTest" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "SendStrategy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionTest" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sendStrategy" }, value: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } } }, { kind: "Argument", name: { kind: "Name", value: "targetMobile" }, value: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }] } }] } }, ...Qd.definitions] };
    var yr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "rateLimitStatus" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "rateLimitStatus" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitPayload" } }] } }] } }, ...Kd.definitions, ...Jd.definitions] };
    var br = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmap" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }] } }] } }, ...Zd.definitions] };
    var gr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmap_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmap" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...gd.definitions, ...bd.definitions, ...An.definitions, ...Yn.definitions, ...Na.definitions] };
    var Dr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProject" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }] } }] } }, ...el.definitions] };
    var Fr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmapToProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectConnection" } }] } }] } }, ...il.definitions, ...el.definitions, ...Na.definitions] };
    var Vr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmaps" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmaps" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapConnection" } }] } }] } }, ...Yd.definitions, ...Zd.definitions, ...Na.definitions] };
    var _r = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchDocuments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchDocuments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "snippetSize" }, value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchPayload" } }] } }] } }, ...Za.definitions, ...Ka.definitions, ...$a.definitions, ...Na.definitions] };
    var Ar = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchDocuments_archivePayload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchDocuments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "snippetSize" }, value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }] } }, ...Ka.definitions] };
    var Tr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "snippetSize" }, value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchPayload" } }] } }] } }, ...ld.definitions, ...Ka.definitions, ...dd.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var wr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchIssues_archivePayload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "snippetSize" }, value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }] } }, ...Ka.definitions] };
    var Ir = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "snippetSize" }, value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchPayload" } }] } }] } }, ...Od.definitions, ...Ka.definitions, ...jd.definitions, ...An.definitions, ...Yn.definitions, ...Na.definitions] };
    var Cr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchProjects_archivePayload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "snippetSize" }, value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }] } }, ...Ka.definitions] };
    var Pr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "ssoUrlFromEmail" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "email" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "ssoUrlFromEmail" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "email" }, value: { kind: "Variable", name: { kind: "Name", value: "email" } } }, { kind: "Argument", name: { kind: "Name", value: "isDesktop" }, value: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }] } }] } }, ...tl.definitions] };
    var qr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "syncEntityCount" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "syncEntityCount" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityCountResponse" } }] } }] } }, ...na.definitions] };
    var xr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }] } }] } }, ...dl.definitions] };
    var jr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_cycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycles" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }] } }] } }] } }, ...Ra.definitions, ...Ea.definitions, ...Na.definitions] };
    var Or3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_gitAutomationStates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStateConnection" } }] } }] } }] } }, ...Nt.definitions, ...vt.definitions, ...ct.definitions, ...Na.definitions] };
    var Ur = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var Br = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Yt.definitions, ...Wt.definitions, ...Na.definitions] };
    var Er = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_members" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "members" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ..._l.definitions, ...Ht.definitions, ...Na.definitions] };
    var Rr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_memberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "memberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...ol.definitions, ...ml.definitions, ...Na.definitions] };
    var Mr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...gd.definitions, ...bd.definitions, ...An.definitions, ...Yn.definitions, ...Na.definitions] };
    var Lr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_states" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "states" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }] } }] } }] } }, ...Ol.definitions, ...jl.definitions, ...Na.definitions] };
    var zr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_templates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }] } }] } }] } }, ...kl.definitions, ...ul.definitions, ...Na.definitions] };
    var Hr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_webhooks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhooks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }] } }] } }] } }, ...ql.definitions, ...Pl.definitions, ...Na.definitions] };
    var Gr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembership" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }] } }] } }, ...ml.definitions] };
    var Wr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }, ...ol.definitions, ...ml.definitions, ...Na.definitions] };
    var Qr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }, ...ll.definitions, ...dl.definitions, ...Na.definitions] };
    var Jr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "template" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "template" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...ul.definitions] };
    var Kr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "templates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...ul.definitions] };
    var $r = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "templatesForIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "integrationType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templatesForIntegration" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "integrationType" }, value: { kind: "Variable", name: { kind: "Name", value: "integrationType" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...ul.definitions] };
    var Zr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "timeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeSchedule" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }] } }] } }, ...vl.definitions, ...cl.definitions] };
    var Yr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "timeSchedules" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeSchedules" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleConnection" } }] } }] } }, ...Nl.definitions, ...vl.definitions, ...cl.definitions, ...Na.definitions] };
    var Xr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "triageResponsibilities" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilities" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityConnection" } }] } }] } }, ...yl.definitions, ...Sl.definitions, ...fl.definitions, ...Na.definitions] };
    var es = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "triageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }] } }] } }, ...Sl.definitions, ...fl.definitions] };
    var is = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "triageResponsibility_manualSelection" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "manualSelection" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } }] } }] } }] } }, ...fl.definitions] };
    var ns = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }] } }, ...Ht.definitions] };
    var as4 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_assignedIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "assignedIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var ts = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_createdIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createdIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var ds = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...ol.definitions, ...ml.definitions, ...Na.definitions] };
    var ls = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...ll.definitions, ...dl.definitions, ...Na.definitions] };
    var ms = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettings" } }] } }] } }, ...pa.definitions, ...ka.definitions, ...ua.definitions, ...sa.definitions, ...ra.definitions] };
    var os = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } }] } }] } }] } }, ...ka.definitions, ...ua.definitions, ...sa.definitions, ...ra.definitions] };
    var rs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } }] } }] } }] } }] } }, ...ua.definitions, ...sa.definitions, ...ra.definitions] };
    var ss = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } }] } }] } }] } }] } }] } }, ...sa.definitions, ...ra.definitions] };
    var us = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_friday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "friday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ra.definitions] };
    var ks = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_monday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "monday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ra.definitions] };
    var ps = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_saturday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "saturday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ra.definitions] };
    var cs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_sunday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sunday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ra.definitions] };
    var vs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_thursday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "thursday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ra.definitions] };
    var Ns = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_tuesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "tuesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ra.definitions] };
    var hs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_wednesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "wednesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ra.definitions] };
    var fs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "users" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "users" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }, ..._l.definitions, ...Ht.definitions, ...Na.definitions] };
    var Ss = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" } }] } }] } }, ...yt.definitions] };
    var ys = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }] } }, ...Ht.definitions] };
    var bs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_assignedIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "assignedIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var gs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_createdIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createdIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var Ds = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...ol.definitions, ...ml.definitions, ...Na.definitions] };
    var Fs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...ll.definitions, ...dl.definitions, ...Na.definitions] };
    var Vs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "webhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhook" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }] } }] } }, ...Pl.definitions] };
    var _s = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "webhooks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhooks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }] } }] } }, ...ql.definitions, ...Pl.definitions, ...Na.definitions] };
    var As = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowState" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }] } }] } }, ...jl.definitions] };
    var Ts = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowState_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowState" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rt.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions, ...Na.definitions] };
    var ws = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowStates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }] } }] } }, ...Ol.definitions, ...jl.definitions, ...Na.definitions] };
    var Is = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "airbyteIntegrationConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AirbyteConfigurationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "airbyteIntegrationConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var Cs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentArchivePayload" } }] } }] } }, ...Tn.definitions] };
    var Ps = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var qs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var xs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkDiscord" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "channelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "messageId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkDiscord" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "channelId" }, value: { kind: "Variable", name: { kind: "Name", value: "channelId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "messageId" }, value: { kind: "Variable", name: { kind: "Name", value: "messageId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var js = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkFront" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkFront" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "conversationId" }, value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontAttachmentPayload" } }] } }] } }, ...pt.definitions] };
    var Os = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitHubIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitHubIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var Us = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitHubPR" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "number" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "owner" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "repo" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitHubPR" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "number" }, value: { kind: "Variable", name: { kind: "Name", value: "number" } } }, { kind: "Argument", name: { kind: "Name", value: "owner" }, value: { kind: "Variable", name: { kind: "Name", value: "owner" } } }, { kind: "Argument", name: { kind: "Name", value: "repo" }, value: { kind: "Variable", name: { kind: "Name", value: "repo" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var Bs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitLabMR" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "number" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitLabMR" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "number" }, value: { kind: "Variable", name: { kind: "Name", value: "number" } } }, { kind: "Argument", name: { kind: "Name", value: "projectPathWithNamespace" }, value: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var Es = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkIntercom" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkIntercom" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "conversationId" }, value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var Rs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkJiraIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkJiraIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraIssueId" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var Ms = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "channel" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "latest" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "ts" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "channel" }, value: { kind: "Variable", name: { kind: "Name", value: "channel" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "latest" }, value: { kind: "Variable", name: { kind: "Name", value: "latest" } } }, { kind: "Argument", name: { kind: "Name", value: "syncToCommentThread" }, value: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "ts" }, value: { kind: "Variable", name: { kind: "Name", value: "ts" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var Ls = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkURL" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkURL" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var zs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkZendesk" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "ticketId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkZendesk" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "ticketId" }, value: { kind: "Variable", name: { kind: "Name", value: "ticketId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var Hs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentSyncToSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentSyncToSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var Gs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...ba.definitions] };
    var Ws = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CommentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...wa.definitions] };
    var Qs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Js = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "commentResolve" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentResolve" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "resolvingCommentId" }, value: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...wa.definitions] };
    var Ks = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "commentUnresolve" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentUnresolve" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...wa.definitions] };
    var $s = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CommentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...wa.definitions] };
    var Zs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createContact" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ContactCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "contactCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ContactPayload" } }] } }] } }, ...Ia.definitions] };
    var Ys = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCsvExportReport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createCsvExportReport" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "includePrivateTeamIds" }, value: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }] } }] } }, ...Ca.definitions] };
    var Xs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createOrganizationFromOnboarding" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CreateOrganizationInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "survey" } }, type: { kind: "NamedType", name: { kind: "Name", value: "OnboardingCustomerSurvey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createOrganizationFromOnboarding" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "survey" }, value: { kind: "Variable", name: { kind: "Name", value: "survey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...Pa.definitions, ...Kn.definitions, ...$n.definitions] };
    var eu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectUpdateReminder" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createProjectUpdateReminder" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }] } }] } }, ...zd.definitions] };
    var iu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }] } }] } }, ...Ba.definitions] };
    var nu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var au = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }] } }] } }, ...Ba.definitions] };
    var tu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }] } }] } }, ...wn.definitions] };
    var du = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...Ma.definitions] };
    var lu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "cycleShiftAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleShiftAllInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleShiftAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...Ma.definitions] };
    var mu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "cycleStartUpcomingCycleToday" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleStartUpcomingCycleToday" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...Ma.definitions] };
    var ou = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...Ma.definitions] };
    var ru = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createDiaryEntry" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DiaryEntryCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "diaryEntryCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DiaryEntryPayload" } }] } }] } }, ...za.definitions] };
    var su = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteDiaryEntry" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "diaryEntryDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var uu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateDiaryEntry" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DiaryEntryUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "diaryEntryUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DiaryEntryPayload" } }] } }] } }, ...za.definitions] };
    var ku = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DocumentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }] } }] } }, ...Ja.definitions] };
    var pu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }] } }] } }, ...Cn.definitions] };
    var cu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }] } }] } }, ...Cn.definitions] };
    var vu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DocumentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }] } }] } }, ...Ja.definitions] };
    var Nu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createEmailIntakeAddress" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }] } }] } }, ...Xa.definitions, ...Ya.definitions] };
    var hu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteEmailIntakeAddress" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var fu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailIntakeAddressRotate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressRotate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }] } }] } }, ...Xa.definitions, ...Ya.definitions] };
    var Su = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateEmailIntakeAddress" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }] } }] } }, ...Xa.definitions, ...Ya.definitions] };
    var yu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailTokenUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailTokenUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...Va.definitions, ...$n.definitions, ...Kn.definitions] };
    var bu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailUnsubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribeInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailUnsubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUnsubscribePayload" } }] } }] } }, ...et.definitions] };
    var gu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailUserAccountAuthChallenge" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailUserAccountAuthChallenge" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } }] } }] } }, ...it.definitions] };
    var Du = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createEmoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmojiCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojiCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiPayload" } }] } }] } }, ...tt.definitions] };
    var Fu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteEmoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojiDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Vu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createEntityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLinkCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }] } }] } }, ...mt.definitions] };
    var _u = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteEntityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLinkDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Au = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateEntityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLinkUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }] } }] } }, ...mt.definitions] };
    var Tu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }] } }] } }, ...kt.definitions] };
    var wu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Iu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }] } }] } }, ...kt.definitions] };
    var Cu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "fileUpload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filename" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "makePublic" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } }, type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "size" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "fileUpload" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "contentType" }, value: { kind: "Variable", name: { kind: "Name", value: "contentType" } } }, { kind: "Argument", name: { kind: "Name", value: "filename" }, value: { kind: "Variable", name: { kind: "Name", value: "filename" } } }, { kind: "Argument", name: { kind: "Name", value: "makePublic" }, value: { kind: "Variable", name: { kind: "Name", value: "makePublic" } } }, { kind: "Argument", name: { kind: "Name", value: "metaData" }, value: { kind: "Variable", name: { kind: "Name", value: "metaData" } } }, { kind: "Argument", name: { kind: "Name", value: "size" }, value: { kind: "Variable", name: { kind: "Name", value: "size" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }] } }] } }, ...Fl.definitions, ...Dl.definitions, ...gl.definitions] };
    var Pu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createGitAutomationState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }] } }] } }, ...ht.definitions, ...vt.definitions, ...ct.definitions] };
    var qu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteGitAutomationState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var xu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateGitAutomationState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }] } }] } }, ...ht.definitions, ...vt.definitions, ...ct.definitions] };
    var ju = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createGitAutomationTargetBranch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationTargetBranchCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } }] } }] } }, ...ft.definitions, ...ct.definitions] };
    var Ou = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteGitAutomationTargetBranch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationTargetBranchDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Uu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateGitAutomationTargetBranch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationTargetBranchUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } }] } }] } }, ...ft.definitions, ...ct.definitions] };
    var Bu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "googleUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GoogleUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "googleUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...Va.definitions, ...$n.definitions, ...Kn.definitions] };
    var Eu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "imageUploadFromUrl" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "imageUploadFromUrl" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }] } }] } }, ...Dt.definitions] };
    var Ru = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "importFileUpload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filename" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } }, type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "size" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "importFileUpload" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "contentType" }, value: { kind: "Variable", name: { kind: "Name", value: "contentType" } } }, { kind: "Argument", name: { kind: "Name", value: "filename" }, value: { kind: "Variable", name: { kind: "Name", value: "filename" } } }, { kind: "Argument", name: { kind: "Name", value: "metaData" }, value: { kind: "Variable", name: { kind: "Name", value: "metaData" } } }, { kind: "Argument", name: { kind: "Name", value: "size" }, value: { kind: "Variable", name: { kind: "Name", value: "size" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }] } }] } }, ...Fl.definitions, ...Dl.definitions, ...gl.definitions] };
    var Mu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }] } }] } }, ...Pn.definitions] };
    var Lu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }] } }] } }, ...ma.definitions] };
    var zu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Hu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }] } }] } }, ...oa.definitions] };
    var Gu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteInitiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Wu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateInitiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }] } }] } }, ...oa.definitions] };
    var Qu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }] } }] } }, ...Pn.definitions] };
    var Ju = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }] } }] } }, ...ma.definitions] };
    var Ku = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var $u = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationAsksConnectChannel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationAsksConnectChannel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AsksChannelConnectPayload" } }] } }] } }, ...fa.definitions, ...la.definitions, ...da.definitions] };
    var Zu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Yu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationDiscord" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationDiscord" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var Xu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationFigma" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationFigma" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var ek = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationFront" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationFront" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var ik = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "githubUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationName" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } }] } }] } }, ...bt.definitions] };
    var nk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitHubPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitHubPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var ak = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationGithubCommit" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubCommitCreate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }] } }] } }, ...St.definitions] };
    var tk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGithubConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var dk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGithubImportConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubImportConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var lk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitlabConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitlabConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "accessToken" }, value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } } }, { kind: "Argument", name: { kind: "Name", value: "gitlabUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } }] } }] } }, ...gt.definitions] };
    var mk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGoogleSheets" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGoogleSheets" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var ok = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationIntercom" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercom" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "domainUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var rk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegrationIntercom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercomDelete" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var sk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIntegrationIntercomSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettingsInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercomSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var uk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationJiraPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationJiraPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "accessToken" }, value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } } }, { kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var kk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationLoom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationLoom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var pk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationRequest" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationRequest" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationRequestPayload" } }] } }] } }, ...Pt.definitions] };
    var ck = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSentryConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSentryConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationSlug" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var vk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "shouldUseV2Auth" }, value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var Nk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackAsks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackAsks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var hk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackCustomViewNotifications" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "customViewId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackCustomViewNotifications" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "customViewId" }, value: { kind: "Variable", name: { kind: "Name", value: "customViewId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...al.definitions] };
    var fk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackImportEmojis" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackImportEmojis" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var Sk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...al.definitions] };
    var yk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var bk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "shouldUseV2Auth" }, value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...al.definitions] };
    var gk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackProjectPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackProjectPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...al.definitions] };
    var Dk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplatePayload" } }] } }] } }, ...jt.definitions] };
    var Fk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Vk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationZendesk" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scope" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationZendesk" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "scope" }, value: { kind: "Variable", name: { kind: "Name", value: "scope" } } }, { kind: "Argument", name: { kind: "Name", value: "subdomain" }, value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var _k = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettingsCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }] } }] } }, ...Ut.definitions] };
    var Ak = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIntegrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }] } }] } }, ...Ut.definitions] };
    var Tk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueAddLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueAddLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "labelId" }, value: { kind: "Variable", name: { kind: "Name", value: "labelId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...ed.definitions] };
    var wk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "trash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "trash" }, value: { kind: "Variable", name: { kind: "Name", value: "trash" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...qn.definitions] };
    var Ik = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueBatch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "ids" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UUID" } } } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueBatchUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "ids" }, value: { kind: "Variable", name: { kind: "Name", value: "ids" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }] } }] } }, ...Et.definitions, ...Bt.definitions, ..._a.definitions, ...jn.definitions] };
    var Ck = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...ed.definitions] };
    var Pk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "permanentlyDelete" }, value: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...qn.definitions] };
    var qk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveIssueDraft" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueDraftArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueDraftArchivePayload" } }] } }] } }, ...xn.definitions] };
    var xk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueDraft" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueDraftCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueDraftCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueDraftPayload" } }] } }] } }, ...Mt.definitions] };
    var jk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueDraft" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueDraftDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Ok = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueDraft" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueDraftUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueDraftUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueDraftPayload" } }] } }] } }, ...Mt.definitions] };
    var Uk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateAsana" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateAsana" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "asanaTeamName" }, value: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } } }, { kind: "Argument", name: { kind: "Name", value: "asanaToken" }, value: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Zt.definitions, ...Gt.definitions] };
    var Bk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateCSVJira" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateCSVJira" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "csvUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraEmail" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraHostname" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraToken" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Zt.definitions, ...Gt.definitions] };
    var Ek = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateClubhouse" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateClubhouse" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "clubhouseGroupName" }, value: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } } }, { kind: "Argument", name: { kind: "Name", value: "clubhouseToken" }, value: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Zt.definitions, ...Gt.definitions] };
    var Rk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateGithub" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateGithub" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "githubLabels" }, value: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } } }, { kind: "Argument", name: { kind: "Name", value: "githubRepoIds" }, value: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } } }, { kind: "Argument", name: { kind: "Name", value: "githubShouldImportOrgProjects" }, value: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "integrationId" }, value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Zt.definitions, ...Gt.definitions] };
    var Mk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateJira" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateJira" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraEmail" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraHostname" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraProject" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraToken" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Zt.definitions, ...Gt.definitions] };
    var Lk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueImport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportDeletePayload" } }] } }] } }, ...$t.definitions, ...Gt.definitions] };
    var zk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportProcess" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JSONObject" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportProcess" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }, { kind: "Argument", name: { kind: "Name", value: "mapping" }, value: { kind: "Variable", name: { kind: "Name", value: "mapping" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Zt.definitions, ...Gt.definitions] };
    var Hk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueImport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueImportUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Zt.definitions, ...Gt.definitions] };
    var Gk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelCreateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "replaceTeamLabels" }, value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }] } }] } }, ...Xt.definitions] };
    var Wk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Qk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelUpdateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "replaceTeamLabels" }, value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }] } }] } }, ...Xt.definitions] };
    var Jk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationCreateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "overrideCreatedAt" }, value: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }] } }] } }, ...td.definitions] };
    var Kk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var $k = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }] } }] } }, ...td.definitions] };
    var Zk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueReminder" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueReminder" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "reminderAt" }, value: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...ed.definitions] };
    var Yk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueRemoveLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRemoveLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "labelId" }, value: { kind: "Variable", name: { kind: "Name", value: "labelId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...ed.definitions] };
    var Xk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueSubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueSubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...ed.definitions] };
    var ep = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...qn.definitions] };
    var ip = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueUnsubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUnsubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...ed.definitions] };
    var np = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...ed.definitions] };
    var ap2 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "joinOrganizationFromOnboarding" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JoinOrganizationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "joinOrganizationFromOnboarding" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...Pa.definitions, ...Kn.definitions, ...$n.definitions] };
    var tp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "leaveOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "leaveOrganization" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...Pa.definitions, ...Kn.definitions, ...$n.definitions] };
    var dp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logout" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logout" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...md.definitions] };
    var lp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutAllSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutAllSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...md.definitions] };
    var mp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutOtherSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutOtherSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...md.definitions] };
    var op = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutSession" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sessionId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutSession" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sessionId" }, value: { kind: "Variable", name: { kind: "Name", value: "sessionId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...md.definitions] };
    var rp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }] } }, ...Hn.definitions, ...zn.definitions, ...jn.definitions, ...On.definitions, ...Un.definitions, ...En.definitions, ...Bn.definitions, ...Mn.definitions, ...Rn.definitions, ...Ln.definitions] };
    var sp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationArchiveAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationArchiveAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...od.definitions, ...zn.definitions, ...jn.definitions, ...On.definitions, ...Un.definitions, ...En.definitions, ...Bn.definitions, ...Mn.definitions, ...Rn.definitions, ...Ln.definitions] };
    var up = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationMarkReadAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "readAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationMarkReadAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "readAt" }, value: { kind: "Variable", name: { kind: "Name", value: "readAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...od.definitions, ...zn.definitions, ...jn.definitions, ...On.definitions, ...Un.definitions, ...En.definitions, ...Bn.definitions, ...Mn.definitions, ...Rn.definitions, ...Ln.definitions] };
    var kp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationMarkUnreadAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationMarkUnreadAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...od.definitions, ...zn.definitions, ...jn.definitions, ...On.definitions, ...Un.definitions, ...En.definitions, ...Bn.definitions, ...Mn.definitions, ...Rn.definitions, ...Ln.definitions] };
    var pp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationSnoozeAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSnoozeAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "snoozedUntilAt" }, value: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...od.definitions, ...zn.definitions, ...jn.definitions, ...On.definitions, ...Un.definitions, ...En.definitions, ...Bn.definitions, ...Mn.definitions, ...Rn.definitions, ...Ln.definitions] };
    var cp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }] } }] } }, ...kd.definitions, ...Bn.definitions] };
    var vp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Np = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }] } }] } }, ...kd.definitions, ...Bn.definitions] };
    var hp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }] } }, ...Hn.definitions, ...zn.definitions, ...jn.definitions, ...On.definitions, ...Un.definitions, ...En.definitions, ...Bn.definitions, ...Mn.definitions, ...Rn.definitions, ...Ln.definitions] };
    var fp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationUnsnoozeAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUnsnoozeAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "unsnoozedAt" }, value: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...od.definitions, ...zn.definitions, ...jn.definitions, ...On.definitions, ...Un.definitions, ...En.definitions, ...Bn.definitions, ...Mn.definitions, ...Rn.definitions, ...Ln.definitions] };
    var Sp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }] } }] } }, ...sd.definitions, ...zn.definitions, ...jn.definitions, ...On.definitions, ...Un.definitions, ...En.definitions, ...Bn.definitions, ...Mn.definitions, ...Rn.definitions, ...Ln.definitions] };
    var yp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationCancel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationCancelDelete" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } }] } }] } }, ...pd.definitions] };
    var bp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DeleteOrganizationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }] } }] } }, ...cd.definitions] };
    var gp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "organizationDeleteChallenge" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDeleteChallenge" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }] } }] } }, ...cd.definitions] };
    var Dp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationDomain" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDomainDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Fp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }] } }] } }, ...fd.definitions] };
    var Vp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var _p = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }] } }] } }, ...fd.definitions] };
    var Ap = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "organizationStartTrial" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationStartTrial" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }] } }] } }, ...yd.definitions] };
    var Tp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationPayload" } }] } }] } }, ...Sd.definitions] };
    var wp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "trash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "trash" }, value: { kind: "Variable", name: { kind: "Name", value: "trash" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...Gn.definitions] };
    var Ip = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "connectSlackChannel" }, value: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }] } }] } }, ...Pd.definitions] };
    var Cp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...Gn.definitions] };
    var Pp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLinkCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }] } }] } }, ...Td.definitions] };
    var qp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLinkDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var xp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLinkUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }] } }] } }, ...Td.definitions] };
    var jp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }] } }] } }, ...Cd.definitions] };
    var Op = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Up = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }] } }] } }, ...Cd.definitions] };
    var Bp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...Gn.definitions] };
    var Ep = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }] } }] } }, ...Pd.definitions] };
    var Rp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }] } }] } }, ...Ld.definitions] };
    var Mp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Lp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectUpdateInteraction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateInteractionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteractionPayload" } }] } }] } }, ...Md.definitions] };
    var zp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "projectUpdateMarkAsRead" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateMarkAsRead" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" } }] } }] } }, ...Hd.definitions] };
    var Hp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }] } }] } }, ...Ld.definitions] };
    var Gp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createPushSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }] } }] } }, ...Wd.definitions, ...Gd.definitions] };
    var Wp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deletePushSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }] } }] } }, ...Wd.definitions, ...Gd.definitions] };
    var Qp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createReaction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ReactionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reactionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionPayload" } }] } }] } }, ...$d.definitions, ..._a.definitions] };
    var Jp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteReaction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reactionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Kp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "refreshGoogleSheetsData" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "refreshGoogleSheetsData" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Ct.definitions] };
    var $p = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "resendOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "resendOrganizationInvite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Zp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }] } }, ...Wn.definitions] };
    var Yp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }] } }] } }, ...Xd.definitions] };
    var Xp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var ec = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }] } }] } }, ...nl.definitions] };
    var ic = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var nc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }] } }] } }, ...nl.definitions] };
    var ac = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }] } }, ...Wn.definitions] };
    var tc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }] } }] } }, ...Xd.definitions] };
    var dc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "samlTokenUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "samlTokenUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...Va.definitions, ...$n.definitions, ...Kn.definitions] };
    var lc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "copySettingsFromTeamId" }, value: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...sl.definitions] };
    var mc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamCycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamCyclesDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...sl.definitions] };
    var oc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var rc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamKey" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamKeyDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var sc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }] } }] } }, ...rl.definitions] };
    var uc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var kc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }] } }] } }, ...rl.definitions] };
    var pc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }] } }] } }, ...Qn.definitions] };
    var cc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...sl.definitions] };
    var vc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TemplateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }] } }] } }, ...pl.definitions] };
    var Nc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var hc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TemplateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }] } }] } }, ...pl.definitions] };
    var fc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTimeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...hl.definitions] };
    var Sc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTimeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var yc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...hl.definitions] };
    var bc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTimeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...hl.definitions] };
    var gc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "timeScheduleUpsertExternal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "externalId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleUpsertExternal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "externalId" }, value: { kind: "Variable", name: { kind: "Name", value: "externalId" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...hl.definitions] };
    var Dc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTriageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilityCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }] } }] } }, ...bl.definitions] };
    var Fc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTriageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilityDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Vc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTriageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilityUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }] } }] } }, ...bl.definitions] };
    var _c = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDemoteAdmin" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDemoteAdmin" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Vl.definitions] };
    var Ac = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDemoteMember" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDemoteMember" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Vl.definitions] };
    var Tc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDiscordConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDiscordConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Al.definitions] };
    var wc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userExternalUserDisconnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userExternalUserDisconnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Al.definitions] };
    var Ic = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUserFlag" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "flag" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "operation" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagUpdateOperation" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userFlagUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "flag" }, value: { kind: "Variable", name: { kind: "Name", value: "flag" } } }, { kind: "Argument", name: { kind: "Name", value: "operation" }, value: { kind: "Variable", name: { kind: "Name", value: "operation" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }] } }] } }, ...Tl.definitions] };
    var Cc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userPromoteAdmin" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userPromoteAdmin" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Vl.definitions] };
    var Pc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userPromoteMember" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userPromoteMember" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Vl.definitions] };
    var qc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userSettingsFlagsReset" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "flags" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettingsFlagsReset" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "flags" }, value: { kind: "Variable", name: { kind: "Name", value: "flags" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }] } }] } }, ...wl.definitions] };
    var xc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUserSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }] } }] } }, ...Il.definitions] };
    var jc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "suspendUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSuspend" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Vl.definitions] };
    var Oc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unsuspendUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userUnsuspend" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Vl.definitions] };
    var Uc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Al.definitions] };
    var Bc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }] } }] } }, ...Cl.definitions, ...xa.definitions, ...qa.definitions] };
    var Ec = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var Rc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }] } }] } }, ...Cl.definitions, ...xa.definitions, ...qa.definitions] };
    var Mc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WebhookCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }] } }] } }, ...xl.definitions] };
    var Lc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...In.definitions] };
    var zc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WebhookUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }] } }] } }, ...xl.definitions] };
    var Hc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }] } }] } }, ...Jn.definitions] };
    var Gc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }] } }] } }, ...Ul.definitions] };
    var Wc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }] } }] } }, ...Ul.definitions] };
    var Qc = Object.freeze({ __proto__: null, get AuthenticationSessionType() {
      return xi;
    }, get ContextViewType() {
      return ji;
    }, get CustomerStatusType() {
      return Oi;
    }, get DateResolutionType() {
      return Ui;
    }, get Day() {
      return Bi;
    }, get FacetPageSource() {
      return Ei;
    }, get FeatureFlagRolloutStageType() {
      return Ri;
    }, get GitAutomationStates() {
      return Mi;
    }, get GithubOrgType() {
      return Li;
    }, get InitiativeStatus() {
      return zi;
    }, get InitiativeTab() {
      return Hi;
    }, get IntegrationService() {
      return Gi;
    }, get IssueRelationType() {
      return Wi;
    }, get OAuthClientApprovalStatus() {
      return Qi;
    }, get OrganizationDomainAuthType() {
      return Ji;
    }, get OrganizationInviteStatus() {
      return Ki;
    }, get PaginationNulls() {
      return $i;
    }, get PaginationOrderBy() {
      return Zi;
    }, get PaginationSortOrder() {
      return Yi;
    }, get ProjectStatusType() {
      return Xi;
    }, get ProjectTab() {
      return en;
    }, get ProjectUpdateHealthType() {
      return nn;
    }, get ProjectUpdateReminderFrequency() {
      return an;
    }, get PushSubscriptionType() {
      return tn;
    }, get ReleaseChannel() {
      return dn;
    }, get SLADayCountType() {
      return ln;
    }, get SchemaFieldType() {
      return mn;
    }, get SendStrategy() {
      return on;
    }, get SlaStatus() {
      return rn;
    }, get SlackChannelType() {
      return sn;
    }, get TrashOptionType() {
      return un;
    }, get TriageResponsibilityAction() {
      return kn;
    }, get UserContextViewType() {
      return pn;
    }, get UserFlagType() {
      return cn;
    }, get UserFlagUpdateOperation() {
      return vn;
    }, get UserRoleType() {
      return Nn;
    }, get ViewPreferencesType() {
      return hn;
    }, get ViewType() {
      return fn;
    }, get WorkflowTrigger() {
      return Sn;
    }, get WorkflowTriggerType() {
      return yn;
    }, get WorkflowType() {
      return bn;
    }, EntityFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Entity" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Entity" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, CommentNotificationFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }] } }] }, CustomViewNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, CycleNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, DocumentContentFragmentDoc: An, DocumentContentHistoryFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContentHistory" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistory" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "actorIds" } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "contentDataSnapshotAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, DraftFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Draft" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Draft" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "data" } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "bodyData" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isAutogenerated" } }] } }] }, AttachmentArchivePayloadFragmentDoc: Tn, CycleArchivePayloadFragmentDoc: wn, DeletePayloadFragmentDoc: In, DocumentArchivePayloadFragmentDoc: Cn, InitiativeArchivePayloadFragmentDoc: Pn, IssueArchivePayloadFragmentDoc: qn, IssueDraftArchivePayloadFragmentDoc: xn, ActorBotFragmentDoc: jn, DocumentNotificationFragmentDoc: On, InitiativeNotificationFragmentDoc: Un, NotificationSubscriptionFragmentDoc: Bn, IssueNotificationFragmentDoc: En, OauthClientApprovalFragmentDoc: Rn, OauthClientApprovalNotificationFragmentDoc: Mn, ProjectNotificationFragmentDoc: Ln, NotificationFragmentDoc: zn, NotificationArchivePayloadFragmentDoc: Hn, ProjectArchivePayloadFragmentDoc: Gn, RoadmapArchivePayloadFragmentDoc: Wn, TeamArchivePayloadFragmentDoc: Qn, WorkflowStateArchivePayloadFragmentDoc: Jn, ArchivePayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueDraftArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueDraftArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }] } }] } }] }, LabelNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "LabelNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LabelNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, ProjectNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, ReminderFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Reminder" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reminder" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "schedule" } }, { kind: "Field", name: { kind: "Name", value: "documentId" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issueId" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectId" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "remindAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, TeamNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, UserAccountFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserAccount" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAccount" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "authTokenLinkDisabled" } }] } }] }, UserNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, AuthOrganizationFragmentDoc: Kn, AuthUserFragmentDoc: $n, AuthEmailIntakeAddressFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthEmailIntakeAddress" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthEmailIntakeAddress" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "address" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] }, InitiativeNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, AuthOrganizationInviteFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOrganizationInvite" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganizationInvite" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "expiresAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, OrganizationIpRestrictionFragmentDoc: Zn, ProjectStatusFragmentDoc: Yn, PaidSubscriptionFragmentDoc: Xn, OrganizationFragmentDoc: ea, AuthOauthClientWithScopeFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOauthClientWithScope" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOauthClientWithScope" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "appId" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "webhookUrl" } }] } }] }, AuthOauthClientWithMembershipsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOauthClientWithMemberships" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOauthClientWithMemberships" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "appId" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "webhookUrl" } }, { kind: "Field", name: { kind: "Name", value: "totalMembers" } }] } }] }, AuthenticationSessionResponseFragmentDoc: ia, EntityCountResponseFragmentDoc: na, OrganizationDomainFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationDomain" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomain" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "verificationEmail" } }, { kind: "Field", name: { kind: "Name", value: "verified" } }, { kind: "Field", name: { kind: "Name", value: "disableOrganizationCreation" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "authType" } }, { kind: "Field", name: { kind: "Name", value: "claimed" } }] } }] }, WebhookFailureEventFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookFailureEvent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookFailureEvent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "responseOrError" } }, { kind: "Field", name: { kind: "Name", value: "httpStatus" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "executionId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "webhook" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, UserAuthorizedApplicationFragmentDoc: aa, ApplicationFragmentDoc: ta, PasskeyFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Passkey" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Passkey" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "userAgent" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "locationCity" } }, { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } }, { kind: "Field", name: { kind: "Name", value: "locationCountry" } }, { kind: "Field", name: { kind: "Name", value: "locationRegionCode" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "lastUsedAt" } }, { kind: "Field", name: { kind: "Name", value: "clientType" } }, { kind: "Field", name: { kind: "Name", value: "browserType" } }, { kind: "Field", name: { kind: "Name", value: "aaguid" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "lastUsedSessionId" } }] } }] }, SharedSlackSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SharedSlackSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SharedSlackSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "enterpriseId" } }, { kind: "Field", name: { kind: "Name", value: "enterpriseName" } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }, { kind: "Field", name: { kind: "Name", value: "teamName" } }, { kind: "Field", name: { kind: "Name", value: "shouldUnfurl" } }] } }] }, FrontSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FrontSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnComment" } }, { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCancellation" } }, { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCompletion" } }, { kind: "Field", name: { kind: "Name", value: "sendNoteOnStatusChange" } }, { kind: "Field", name: { kind: "Name", value: "sendNoteOnComment" } }] } }] }, GitHubRepoMappingFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubRepoMapping" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubRepoMapping" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "gitHubLabels" } }, { kind: "Field", name: { kind: "Name", value: "gitHubRepoId" } }, { kind: "Field", name: { kind: "Name", value: "linearTeamId" } }, { kind: "Field", name: { kind: "Name", value: "bidirectional" } }, { kind: "Field", name: { kind: "Name", value: "default" } }] } }] }, GitHubRepoFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubRepo" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubRepo" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "fullName" } }] } }] }, GitHubSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "repositoriesMapping" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubRepoMapping" } }] } }, { kind: "Field", name: { kind: "Name", value: "orgLogin" } }, { kind: "Field", name: { kind: "Name", value: "orgAvatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "repositories" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubRepo" } }] } }, { kind: "Field", name: { kind: "Name", value: "orgType" } }] } }] }, GitHubImportSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubImportSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubImportSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "labels" } }, { kind: "Field", name: { kind: "Name", value: "orgLogin" } }, { kind: "Field", name: { kind: "Name", value: "orgAvatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "repositories" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubRepo" } }] } }, { kind: "Field", name: { kind: "Name", value: "orgType" } }] } }] }, GitHubPersonalSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubPersonalSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubPersonalSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "login" } }] } }] }, GitLabSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitLabSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitLabSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "expiresAt" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "readonly" } }] } }] }, GoogleSheetsSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GoogleSheetsSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GoogleSheetsSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "sheetId" } }, { kind: "Field", name: { kind: "Name", value: "spreadsheetId" } }, { kind: "Field", name: { kind: "Name", value: "spreadsheetUrl" } }, { kind: "Field", name: { kind: "Name", value: "updatedIssuesAt" } }] } }] }, IntercomSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntercomSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnComment" } }, { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCancellation" } }, { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCompletion" } }, { kind: "Field", name: { kind: "Name", value: "sendNoteOnStatusChange" } }, { kind: "Field", name: { kind: "Name", value: "sendNoteOnComment" } }] } }] }, JiraProjectDataFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "JiraProjectData" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraProjectData" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, JiraLinearMappingFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "JiraLinearMapping" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraLinearMapping" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "jiraProjectId" } }, { kind: "Field", name: { kind: "Name", value: "linearTeamId" } }, { kind: "Field", name: { kind: "Name", value: "bidirectional" } }, { kind: "Field", name: { kind: "Name", value: "default" } }] } }] }, JiraSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "JiraSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "projects" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraProjectData" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMapping" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraLinearMapping" } }] } }, { kind: "Field", name: { kind: "Name", value: "setupPending" } }, { kind: "Field", name: { kind: "Name", value: "isJiraServer" } }, { kind: "Field", name: { kind: "Name", value: "manualSetup" } }] } }] }, JiraPersonalSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "JiraPersonalSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraPersonalSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "siteName" } }] } }] }, LaunchDarklySettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "LaunchDarklySettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LaunchDarklySettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "environment" } }, { kind: "Field", name: { kind: "Name", value: "projectKey" } }] } }] }, NotionSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotionSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotionSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "workspaceId" } }, { kind: "Field", name: { kind: "Name", value: "workspaceName" } }] } }] }, OpsgenieSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OpsgenieSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OpsgenieSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "apiFailedWithUnauthorizedErrorAt" } }] } }] }, PagerDutySettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PagerDutySettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PagerDutySettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "apiFailedWithUnauthorizedErrorAt" } }] } }] }, SentrySettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SentrySettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SentrySettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organizationSlug" } }] } }] }, SlackSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "enterpriseId" } }, { kind: "Field", name: { kind: "Name", value: "enterpriseName" } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }, { kind: "Field", name: { kind: "Name", value: "teamName" } }, { kind: "Field", name: { kind: "Name", value: "linkOnIssueIdMention" } }, { kind: "Field", name: { kind: "Name", value: "shouldUnfurl" } }] } }] }, SlackAsksTeamSettingsFragmentDoc: da, SlackChannelNameMappingFragmentDoc: la, SlackAsksSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackAsksSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackAsksSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "enterpriseId" } }, { kind: "Field", name: { kind: "Name", value: "enterpriseName" } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }, { kind: "Field", name: { kind: "Name", value: "teamName" } }, { kind: "Field", name: { kind: "Name", value: "slackChannelMapping" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelNameMapping" } }] } }, { kind: "Field", name: { kind: "Name", value: "canAdministrate" } }, { kind: "Field", name: { kind: "Name", value: "shouldUnfurl" } }] } }] }, SlackPostSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackPostSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackPostSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "channel" } }, { kind: "Field", name: { kind: "Name", value: "channelId" } }, { kind: "Field", name: { kind: "Name", value: "channelType" } }, { kind: "Field", name: { kind: "Name", value: "configurationUrl" } }] } }] }, ZendeskSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ZendeskSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ZendeskSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "botUserId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "subdomain" } }, { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnComment" } }, { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCancellation" } }, { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCompletion" } }, { kind: "Field", name: { kind: "Name", value: "sendNoteOnStatusChange" } }, { kind: "Field", name: { kind: "Name", value: "sendNoteOnComment" } }] } }] }, IntegrationSettingsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "front" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "gitHub" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "gitHubImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubImportSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "gitHubPersonal" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubPersonalSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "gitLab" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitLabSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "googleSheets" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GoogleSheetsSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "intercom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntercomSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "jira" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "jiraPersonal" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraPersonalSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "launchDarkly" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LaunchDarklySettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "notion" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotionSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "opsgenie" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OpsgenieSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "pagerDuty" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PagerDutySettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "sentry" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SentrySettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "slack" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackAsks" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackAsksSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackCustomViewNotifications" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackOrgProjectUpdatesPost" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackPost" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackProjectPost" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "zendesk" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ZendeskSettings" } }] } }] } }] }, InitiativePayloadFragmentDoc: ma, InitiativeToProjectPayloadFragmentDoc: oa, NotificationDeliveryPreferencesDayFragmentDoc: ra, NotificationDeliveryPreferencesScheduleFragmentDoc: sa, NotificationDeliveryPreferencesChannelFragmentDoc: ua, NotificationDeliveryPreferencesFragmentDoc: ka, UserSettingsFragmentDoc: pa, AuthenticationSessionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthenticationSession" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthenticationSession" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "client" } }, { kind: "Field", name: { kind: "Name", value: "countryCodes" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "location" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "locationCity" } }, { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } }, { kind: "Field", name: { kind: "Name", value: "locationCountry" } }, { kind: "Field", name: { kind: "Name", value: "locationRegionCode" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "operatingSystem" } }, { kind: "Field", name: { kind: "Name", value: "userAgent" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "browserType" } }, { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, IssueImportSyncCheckPayloadFragmentDoc: ca, ApiKeyFragmentDoc: va, PageInfoFragmentDoc: Na, ApiKeyConnectionFragmentDoc: ha, ApiKeyPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKeyPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "apiKey" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, AsksChannelConnectPayloadFragmentDoc: fa, AttachmentFragmentDoc: Sa, AttachmentConnectionFragmentDoc: ya, AttachmentPayloadFragmentDoc: ba, AttachmentSourcesPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentSourcesPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentSourcesPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "sources" } }] } }] }, AuditEntryFragmentDoc: ga, AuditEntryConnectionFragmentDoc: Da, AuditEntryTypeFragmentDoc: Fa, AuthApiKeyFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthApiKey" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthApiKey" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, AuthApiKeyPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthApiKeyPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthApiKeyPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "authApiKey" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthApiKey" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, AuthIntegrationFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthIntegration" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthIntegration" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, AuthOauthClientFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOauthClient" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOauthClient" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "redirectUris" } }, { kind: "Field", name: { kind: "Name", value: "developer" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "clientSecret" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "webhookResourceTypes" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "developerUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhookUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "publicEnabled" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }] } }] }, OauthTokenFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthToken" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthToken" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "client" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOauthClient" } }] } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "revokedAt" } }] } }] }, AuthOauthClientWithTokensFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOauthClientWithTokens" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOauthClientWithTokens" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "client" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOauthClient" } }] } }, { kind: "Field", name: { kind: "Name", value: "tokens" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthToken" } }] } }] } }] }, AuthOrganizationBucketNamePayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOrganizationBucketNamePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganizationBucketNamePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "importsBucketName" } }, { kind: "Field", name: { kind: "Name", value: "region" } }, { kind: "Field", name: { kind: "Name", value: "uploadsBucketName" } }] } }] }, AuthOrganizationDomainFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOrganizationDomain" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganizationDomain" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "disableOrganizationCreation" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "authType" } }, { kind: "Field", name: { kind: "Name", value: "claimed" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "verified" } }] } }] }, AuthOrganizationExistsPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOrganizationExistsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganizationExistsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "exists" } }] } }] }, AuthOrganizationPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOrganizationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganizationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "authOrganization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, AuthResolverResponseFragmentDoc: Va, AuthSuccessPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthSuccessPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthSuccessPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, AuthorizedApplicationBaseFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthorizedApplicationBase" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthorizedApplicationBase" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "appId" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }] } }] }, ReactionFragmentDoc: _a, CommentFragmentDoc: Aa, CommentConnectionFragmentDoc: Ta, CommentPayloadFragmentDoc: wa, ContactPayloadFragmentDoc: Ia, CreateCsvExportReportPayloadFragmentDoc: Ca, CreateOrJoinOrganizationResponseFragmentDoc: Pa, ViewPreferencesValuesFragmentDoc: qa, ViewPreferencesFragmentDoc: xa, CustomViewFragmentDoc: ja, CustomViewConnectionFragmentDoc: Oa, CustomViewHasSubscribersPayloadFragmentDoc: Ua, CustomViewPayloadFragmentDoc: Ba, CustomViewSuggestionPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, CustomerNeedPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, CustomerPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, CustomerStatusPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerStatusPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, CustomerTierPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerTierPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, CycleFragmentDoc: Ea, CycleConnectionFragmentDoc: Ra, CyclePayloadFragmentDoc: Ma, DiaryEntryFragmentDoc: La, DiaryEntryConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DiaryEntryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DiaryEntryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DiaryEntry" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, DiaryEntryPayloadFragmentDoc: za, DocumentFragmentDoc: Ha, DocumentConnectionFragmentDoc: Ga, DocumentContentHistoryTypeFragmentDoc: Wa, DocumentContentHistoryPayloadFragmentDoc: Qa, DocumentPayloadFragmentDoc: Ja, ArchiveResponseFragmentDoc: Ka, DocumentSearchResultFragmentDoc: $a, DocumentSearchPayloadFragmentDoc: Za, DocumentSearchResultConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentSearchResultConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchResultConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, EmailIntakeAddressFragmentDoc: Ya, EmailIntakeAddressPayloadFragmentDoc: Xa, EmailUnsubscribePayloadFragmentDoc: et, EmailUserAccountAuthChallengeResponseFragmentDoc: it, EmojiFragmentDoc: nt, EmojiConnectionFragmentDoc: at, EmojiPayloadFragmentDoc: tt, EntityExternalLinkFragmentDoc: dt, EntityExternalLinkConnectionFragmentDoc: lt, EntityExternalLinkPayloadFragmentDoc: mt, ExternalUserFragmentDoc: ot, ExternalUserConnectionFragmentDoc: rt, FacetFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Facet" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Facet" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sourceInitiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourcePage" } }, { kind: "Field", name: { kind: "Name", value: "sourceProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "targetCustomView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, FacetConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FacetConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FacetConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Facet" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, FavoriteFragmentDoc: st, FavoriteConnectionFragmentDoc: ut, FavoritePayloadFragmentDoc: kt, FeatureFlagRolloutStageFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FeatureFlagRolloutStage" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FeatureFlagRolloutStage" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "segmentKeys" } }] } }] }, FeatureFlagFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FeatureFlag" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FeatureFlag" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastStageUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "pendingRolloutStage" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FeatureFlagRolloutStage" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "rolloutStage" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FeatureFlagRolloutStage" } }] } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastStageUpdatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUrl" } }, { kind: "Field", name: { kind: "Name", value: "isEnabled" } }] } }] }, FeatureFlagConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FeatureFlagConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FeatureFlagConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FeatureFlag" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, FeatureFlagRolloutStageConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FeatureFlagRolloutStageConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FeatureFlagRolloutStageConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FeatureFlagRolloutStage" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, FrontAttachmentPayloadFragmentDoc: pt, GitAutomationTargetBranchFragmentDoc: ct, GitAutomationStateFragmentDoc: vt, GitAutomationStateConnectionFragmentDoc: Nt, GitAutomationStatePayloadFragmentDoc: ht, GitAutomationTargetBranchPayloadFragmentDoc: ft, GitHubCommitIntegrationPayloadFragmentDoc: St, GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc: yt, GitHubEnterpriseServerPayloadFragmentDoc: bt, GitLabIntegrationCreatePayloadFragmentDoc: gt, ImageUploadFromUrlPayloadFragmentDoc: Dt, InitiativeFragmentDoc: Ft, InitiativeConnectionFragmentDoc: Vt, InitiativeToProjectFragmentDoc: _t, InitiativeToProjectConnectionFragmentDoc: At, IntegrationFragmentDoc: Tt, IntegrationConnectionFragmentDoc: wt, IntegrationHasScopesPayloadFragmentDoc: It, IntegrationPayloadFragmentDoc: Ct, IntegrationRequestPayloadFragmentDoc: Pt, IntegrationTemplateFragmentDoc: qt, IntegrationTemplateConnectionFragmentDoc: xt, IntegrationTemplatePayloadFragmentDoc: jt, IntegrationsSettingsFragmentDoc: Ot, IntegrationsSettingsConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationsSettingsConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, IntegrationsSettingsPayloadFragmentDoc: Ut, IssueFragmentDoc: Bt, IssueBatchPayloadFragmentDoc: Et, IssueConnectionFragmentDoc: Rt, IssueDraftPayloadFragmentDoc: Mt, IssueFilterSuggestionPayloadFragmentDoc: Lt, IssueRelationHistoryPayloadFragmentDoc: zt, UserFragmentDoc: Ht, IssueImportFragmentDoc: Gt, IssueLabelFragmentDoc: Wt, IssueHistoryFragmentDoc: Qt, IssueHistoryConnectionFragmentDoc: Jt, IssueImportCheckPayloadFragmentDoc: Kt, IssueImportDeletePayloadFragmentDoc: $t, IssueImportPayloadFragmentDoc: Zt, IssueLabelConnectionFragmentDoc: Yt, IssueLabelPayloadFragmentDoc: Xt, IssuePayloadFragmentDoc: ed, IssuePriorityValueFragmentDoc: id, IssueRelationFragmentDoc: nd, IssueRelationConnectionFragmentDoc: ad, IssueRelationPayloadFragmentDoc: td, IssueSearchResultFragmentDoc: dd, IssueSearchPayloadFragmentDoc: ld, IssueSearchResultConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSearchResultConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchResultConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, LogoutResponseFragmentDoc: md, NodeFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Node" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Node" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, NotificationBatchActionPayloadFragmentDoc: od, NotificationConnectionFragmentDoc: rd, NotificationPayloadFragmentDoc: sd, NotificationSubscriptionConnectionFragmentDoc: ud, NotificationSubscriptionPayloadFragmentDoc: kd, OauthClientFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClient" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClient" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "redirectUris" } }, { kind: "Field", name: { kind: "Name", value: "developer" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "clientSecret" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "webhookResourceTypes" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "developerUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhookUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "publicEnabled" } }] } }] }, OauthClientConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClientConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClient" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, OrganizationAcceptedOrExpiredInviteDetailsPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "status" } }] } }] }, OrganizationCancelDeletePayloadFragmentDoc: pd, OrganizationDeletePayloadFragmentDoc: cd, OrganizationExistsPayloadFragmentDoc: vd, OrganizationInviteFragmentDoc: Nd, OrganizationInviteConnectionFragmentDoc: hd, OrganizationInviteFullDetailsPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "organizationName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "inviter" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } }, { kind: "Field", name: { kind: "Name", value: "role" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "accepted" } }, { kind: "Field", name: { kind: "Name", value: "expired" } }] } }] }, OrganizationInviteLinkDetailsPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInviteLinkDetailsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteLinkDetailsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "organizationName" } }, { kind: "Field", name: { kind: "Name", value: "organizationRegion" } }, { kind: "Field", name: { kind: "Name", value: "organizationUrlKey" } }, { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } }] } }] }, OrganizationInvitePayloadFragmentDoc: fd, OrganizationMetaFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationMeta" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationMeta" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "region" } }] } }] }, OrganizationPayloadFragmentDoc: Sd, OrganizationRegionResponseFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationRegionResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationRegionResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "region" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, OrganizationStartTrialPayloadFragmentDoc: yd, PasskeyLoginStartResponseFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PasskeyLoginStartResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PasskeyLoginStartResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "options" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, ProjectFragmentDoc: bd, ProjectConnectionFragmentDoc: gd, ProjectFilterSuggestionPayloadFragmentDoc: Dd, ProjectHistoryFragmentDoc: Fd, ProjectHistoryConnectionFragmentDoc: Vd, ProjectLinkFragmentDoc: _d, ProjectLinkConnectionFragmentDoc: Ad, ProjectLinkPayloadFragmentDoc: Td, ProjectMilestoneFragmentDoc: wd, ProjectMilestoneConnectionFragmentDoc: Id, ProjectMilestoneMoveIssueToTeamFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }] } }] }, ProjectMilestoneMoveProjectTeamsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "teamIds" } }] } }] }, ProjectMilestoneMovePayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneMovePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMovePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "previousIssueTeamIds" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } }] } }, { kind: "Field", name: { kind: "Name", value: "previousProjectTeamIds" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, ProjectMilestonePayloadFragmentDoc: Cd, ProjectPayloadFragmentDoc: Pd, ProjectRelationFragmentDoc: qd, ProjectRelationConnectionFragmentDoc: xd, ProjectRelationPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectRelationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectRelation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, ProjectSearchResultFragmentDoc: jd, ProjectSearchPayloadFragmentDoc: Od, ProjectSearchResultConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectSearchResultConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchResultConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, ProjectStatusConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatusConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, ProjectUpdateFragmentDoc: Ud, ProjectUpdateConnectionFragmentDoc: Bd, ProjectUpdateInteractionFragmentDoc: Ed, ProjectUpdateInteractionConnectionFragmentDoc: Rd, ProjectUpdateInteractionPayloadFragmentDoc: Md, ProjectUpdatePayloadFragmentDoc: Ld, ProjectUpdateReminderPayloadFragmentDoc: zd, ProjectUpdateWithInteractionPayloadFragmentDoc: Hd, PushSubscriptionFragmentDoc: Gd, PushSubscriptionConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscriptionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, PushSubscriptionPayloadFragmentDoc: Wd, PushSubscriptionTestPayloadFragmentDoc: Qd, RateLimitResultPayloadFragmentDoc: Jd, RateLimitPayloadFragmentDoc: Kd, ReactionConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ReactionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, ReactionPayloadFragmentDoc: $d, RoadmapFragmentDoc: Zd, RoadmapConnectionFragmentDoc: Yd, RoadmapPayloadFragmentDoc: Xd, RoadmapToProjectFragmentDoc: el, RoadmapToProjectConnectionFragmentDoc: il, RoadmapToProjectPayloadFragmentDoc: nl, SlackChannelConnectPayloadFragmentDoc: al, SsoUrlFromEmailResponseFragmentDoc: tl, SuccessPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SuccessPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SuccessPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, SummaryPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SummaryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SummaryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "summary" } }] } }] }, SynchronizedPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SynchronizedPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SynchronizedPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }] } }] }, TeamFragmentDoc: dl, TeamConnectionFragmentDoc: ll, TeamMembershipFragmentDoc: ml, TeamMembershipConnectionFragmentDoc: ol, TeamMembershipPayloadFragmentDoc: rl, TeamPayloadFragmentDoc: sl, TemplateFragmentDoc: ul, TemplateConnectionFragmentDoc: kl, TemplatePayloadFragmentDoc: pl, TimeScheduleEntryFragmentDoc: cl, TimeScheduleFragmentDoc: vl, TimeScheduleConnectionFragmentDoc: Nl, TimeSchedulePayloadFragmentDoc: hl, TriageResponsibilityManualSelectionFragmentDoc: fl, TriageResponsibilityFragmentDoc: Sl, TriageResponsibilityConnectionFragmentDoc: yl, TriageResponsibilityPayloadFragmentDoc: bl, UploadFileHeaderFragmentDoc: gl, UploadFileFragmentDoc: Dl, UploadPayloadFragmentDoc: Fl, UserAdminPayloadFragmentDoc: Vl, UserConnectionFragmentDoc: _l, UserPayloadFragmentDoc: Al, UserSettingsFlagPayloadFragmentDoc: Tl, UserSettingsFlagsResetPayloadFragmentDoc: wl, UserSettingsPayloadFragmentDoc: Il, ViewPreferencesPayloadFragmentDoc: Cl, WebhookFragmentDoc: Pl, WebhookConnectionFragmentDoc: ql, WebhookPayloadFragmentDoc: xl, WorkflowCronJobDefinitionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowCronJobDefinition" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowCronJobDefinition" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "activities" } }, { kind: "Field", name: { kind: "Name", value: "schedule" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] }, WorkflowCronJobDefinitionConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowCronJobDefinitionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowCronJobDefinitionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowCronJobDefinition" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, WorkflowDefinitionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowDefinition" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowDefinition" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "activities" } }, { kind: "Field", name: { kind: "Name", value: "conditions" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "groupName" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "triggerType" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "trigger" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] }, WorkflowDefinitionConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowDefinitionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowDefinitionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowDefinition" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, WorkflowStateFragmentDoc: jl, WorkflowStateConnectionFragmentDoc: Ol, WorkflowStatePayloadFragmentDoc: Ul, AdministrableTeamsDocument: Bl, ApiKeysDocument: El, ApplicationInfoDocument: Rl, ApplicationWithAuthorizationDocument: Ml, ArchivedModelSyncDocument: Ll, ArchivedModelsSyncDocument: zl, AttachmentDocument: Hl, AttachmentIssueDocument: Gl, AttachmentIssue_AttachmentsDocument: Wl, AttachmentIssue_BotActorDocument: Ql, AttachmentIssue_ChildrenDocument: Jl, AttachmentIssue_CommentsDocument: Kl, AttachmentIssue_HistoryDocument: $l, AttachmentIssue_InverseRelationsDocument: Zl, AttachmentIssue_LabelsDocument: Yl, AttachmentIssue_RelationsDocument: Xl, AttachmentIssue_SubscribersDocument: em, AttachmentsDocument: im, AttachmentsForUrlDocument: nm, AuditEntriesDocument: am, AuditEntryTypesDocument: tm, AuthenticationSessionsDocument: dm, AvailableUsersDocument: lm, CommentDocument: mm, Comment_BotActorDocument: om, Comment_ChildrenDocument: rm, Comment_DocumentContentDocument: sm, CommentsDocument: um, CustomViewDocument: km, CustomView_IssuesDocument: pm, CustomView_OrganizationViewPreferencesDocument: cm, CustomView_OrganizationViewPreferences_PreferencesDocument: vm, CustomView_ProjectsDocument: Nm, CustomView_UserViewPreferencesDocument: hm, CustomView_UserViewPreferences_PreferencesDocument: fm, CustomView_ViewPreferencesValuesDocument: Sm, CustomViewHasSubscribersDocument: ym, CustomViewsDocument: bm, CycleDocument: gm, Cycle_IssuesDocument: Dm, Cycle_UncompletedIssuesUponCloseDocument: Fm, CyclesDocument: Vm, DiaryEntryDocument: _m, DocumentDocument: Am, Document_CommentsDocument: Tm, DocumentContentHistoryDocument: wm, DocumentsDocument: Im, EmojiDocument: Cm, EmojisDocument: Pm, EntityExternalLinkDocument: qm, ExternalUserDocument: xm, ExternalUsersDocument: jm, FavoriteDocument: Om, Favorite_ChildrenDocument: Um, FavoritesDocument: Bm, InitiativeDocument: Em, Initiative_LinksDocument: Rm, Initiative_ProjectsDocument: Mm, InitiativeToProjectDocument: Lm, InitiativeToProjectsDocument: zm, InitiativesDocument: Hm, IntegrationDocument: Gm, IntegrationHasScopesDocument: Wm, IntegrationTemplateDocument: Qm, IntegrationTemplatesDocument: Jm, IntegrationsDocument: Km, IntegrationsSettingsDocument: $m, IssueDocument: Zm, Issue_AttachmentsDocument: Ym, Issue_BotActorDocument: Xm, Issue_ChildrenDocument: eo, Issue_CommentsDocument: io, Issue_HistoryDocument: no, Issue_InverseRelationsDocument: ao, Issue_LabelsDocument: to, Issue_RelationsDocument: lo, Issue_SubscribersDocument: mo, IssueFigmaFileKeySearchDocument: oo, IssueFilterSuggestionDocument: ro, IssueImportCheckCsvDocument: so, IssueImportCheckSyncDocument: uo, IssueLabelDocument: ko, IssueLabel_ChildrenDocument: po, IssueLabel_IssuesDocument: co, IssueLabelsDocument: vo, IssuePriorityValuesDocument: No, IssueRelationDocument: ho, IssueRelationsDocument: fo, IssueSearchDocument: So, IssueVcsBranchSearchDocument: yo, IssueVcsBranchSearch_AttachmentsDocument: bo, IssueVcsBranchSearch_BotActorDocument: go, IssueVcsBranchSearch_ChildrenDocument: Do3, IssueVcsBranchSearch_CommentsDocument: Fo, IssueVcsBranchSearch_HistoryDocument: Vo, IssueVcsBranchSearch_InverseRelationsDocument: _o, IssueVcsBranchSearch_LabelsDocument: Ao, IssueVcsBranchSearch_RelationsDocument: To, IssueVcsBranchSearch_SubscribersDocument: wo, IssuesDocument: Io, NotificationDocument: Co, NotificationSubscriptionDocument: Po, NotificationSubscriptionsDocument: qo, NotificationsDocument: xo, OrganizationDocument: jo, Organization_IntegrationsDocument: Oo, Organization_LabelsDocument: Uo, Organization_SubscriptionDocument: Bo, Organization_TeamsDocument: Eo, Organization_TemplatesDocument: Ro, Organization_UsersDocument: Mo, OrganizationExistsDocument: Lo, OrganizationInviteDocument: zo, OrganizationInvitesDocument: Ho, ProjectDocument: Go, Project_DocumentContentDocument: Wo, Project_DocumentsDocument: Qo, Project_ExternalLinksDocument: Jo, Project_HistoryDocument: Ko, Project_InitiativesDocument: $o, Project_IssuesDocument: Zo, Project_LinksDocument: Yo, Project_MembersDocument: Xo, Project_ProjectMilestonesDocument: er, Project_ProjectUpdatesDocument: ir, Project_StatusDocument: nr, Project_TeamsDocument: ar, ProjectFilterSuggestionDocument: tr, ProjectLinkDocument: dr, ProjectLinksDocument: lr, ProjectMilestoneDocument: mr, ProjectMilestone_DocumentContentDocument: or, ProjectMilestone_IssuesDocument: rr, ProjectMilestonesDocument: sr, ProjectRelationDocument: ur, ProjectRelationsDocument: kr, ProjectUpdateDocument: pr, ProjectUpdate_CommentsDocument: cr, ProjectUpdateInteractionDocument: vr, ProjectUpdateInteractionsDocument: Nr, ProjectUpdatesDocument: hr, ProjectsDocument: fr, PushSubscriptionTestDocument: Sr, RateLimitStatusDocument: yr, RoadmapDocument: br, Roadmap_ProjectsDocument: gr, RoadmapToProjectDocument: Dr, RoadmapToProjectsDocument: Fr, RoadmapsDocument: Vr, SearchDocumentsDocument: _r, SearchDocuments_ArchivePayloadDocument: Ar, SearchIssuesDocument: Tr, SearchIssues_ArchivePayloadDocument: wr, SearchProjectsDocument: Ir, SearchProjects_ArchivePayloadDocument: Cr, SsoUrlFromEmailDocument: Pr, SyncEntityCountDocument: qr, TeamDocument: xr, Team_CyclesDocument: jr, Team_GitAutomationStatesDocument: Or3, Team_IssuesDocument: Ur, Team_LabelsDocument: Br, Team_MembersDocument: Er, Team_MembershipsDocument: Rr, Team_ProjectsDocument: Mr, Team_StatesDocument: Lr, Team_TemplatesDocument: zr, Team_WebhooksDocument: Hr, TeamMembershipDocument: Gr, TeamMembershipsDocument: Wr, TeamsDocument: Qr, TemplateDocument: Jr, TemplatesDocument: Kr, TemplatesForIntegrationDocument: $r, TimeScheduleDocument: Zr, TimeSchedulesDocument: Yr, TriageResponsibilitiesDocument: Xr, TriageResponsibilityDocument: es, TriageResponsibility_ManualSelectionDocument: is, UserDocument: ns, User_AssignedIssuesDocument: as4, User_CreatedIssuesDocument: ts, User_TeamMembershipsDocument: ds, User_TeamsDocument: ls, UserSettingsDocument: ms, UserSettings_NotificationDeliveryPreferencesDocument: os, UserSettings_NotificationDeliveryPreferences_MobileDocument: rs, UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument: ss, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument: us, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument: ks, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument: ps, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument: cs, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument: vs, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument: Ns, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument: hs, UsersDocument: fs, VerifyGitHubEnterpriseServerInstallationDocument: Ss, ViewerDocument: ys, Viewer_AssignedIssuesDocument: bs, Viewer_CreatedIssuesDocument: gs, Viewer_TeamMembershipsDocument: Ds, Viewer_TeamsDocument: Fs, WebhookDocument: Vs, WebhooksDocument: _s, WorkflowStateDocument: As, WorkflowState_IssuesDocument: Ts, WorkflowStatesDocument: ws, AirbyteIntegrationConnectDocument: Is, ArchiveAttachmentDocument: Cs, CreateAttachmentDocument: Ps, DeleteAttachmentDocument: qs, AttachmentLinkDiscordDocument: xs, AttachmentLinkFrontDocument: js, AttachmentLinkGitHubIssueDocument: Os, AttachmentLinkGitHubPrDocument: Us, AttachmentLinkGitLabMrDocument: Bs, AttachmentLinkIntercomDocument: Es, AttachmentLinkJiraIssueDocument: Rs, AttachmentLinkSlackDocument: Ms, AttachmentLinkUrlDocument: Ls, AttachmentLinkZendeskDocument: zs, AttachmentSyncToSlackDocument: Hs, UpdateAttachmentDocument: Gs, CreateCommentDocument: Ws, DeleteCommentDocument: Qs, CommentResolveDocument: Js, CommentUnresolveDocument: Ks, UpdateCommentDocument: $s, CreateContactDocument: Zs, CreateCsvExportReportDocument: Ys, CreateOrganizationFromOnboardingDocument: Xs, CreateProjectUpdateReminderDocument: eu, CreateCustomViewDocument: iu, DeleteCustomViewDocument: nu, UpdateCustomViewDocument: au, ArchiveCycleDocument: tu, CreateCycleDocument: du, CycleShiftAllDocument: lu, CycleStartUpcomingCycleTodayDocument: mu, UpdateCycleDocument: ou, CreateDiaryEntryDocument: ru, DeleteDiaryEntryDocument: su, UpdateDiaryEntryDocument: uu, CreateDocumentDocument: ku, DeleteDocumentDocument: pu, UnarchiveDocumentDocument: cu, UpdateDocumentDocument: vu, CreateEmailIntakeAddressDocument: Nu, DeleteEmailIntakeAddressDocument: hu, EmailIntakeAddressRotateDocument: fu, UpdateEmailIntakeAddressDocument: Su, EmailTokenUserAccountAuthDocument: yu, EmailUnsubscribeDocument: bu, EmailUserAccountAuthChallengeDocument: gu, CreateEmojiDocument: Du, DeleteEmojiDocument: Fu, CreateEntityExternalLinkDocument: Vu, DeleteEntityExternalLinkDocument: _u, UpdateEntityExternalLinkDocument: Au, CreateFavoriteDocument: Tu, DeleteFavoriteDocument: wu, UpdateFavoriteDocument: Iu, FileUploadDocument: Cu, CreateGitAutomationStateDocument: Pu, DeleteGitAutomationStateDocument: qu, UpdateGitAutomationStateDocument: xu, CreateGitAutomationTargetBranchDocument: ju, DeleteGitAutomationTargetBranchDocument: Ou, UpdateGitAutomationTargetBranchDocument: Uu, GoogleUserAccountAuthDocument: Bu, ImageUploadFromUrlDocument: Eu, ImportFileUploadDocument: Ru, ArchiveInitiativeDocument: Mu, CreateInitiativeDocument: Lu, DeleteInitiativeDocument: zu, CreateInitiativeToProjectDocument: Hu, DeleteInitiativeToProjectDocument: Gu, UpdateInitiativeToProjectDocument: Wu, UnarchiveInitiativeDocument: Qu, UpdateInitiativeDocument: Ju, ArchiveIntegrationDocument: Ku, IntegrationAsksConnectChannelDocument: $u, DeleteIntegrationDocument: Zu, IntegrationDiscordDocument: Yu, IntegrationFigmaDocument: Xu, IntegrationFrontDocument: ek, IntegrationGitHubEnterpriseServerConnectDocument: ik, IntegrationGitHubPersonalDocument: nk, CreateIntegrationGithubCommitDocument: ak, IntegrationGithubConnectDocument: tk, IntegrationGithubImportConnectDocument: dk, IntegrationGitlabConnectDocument: lk, IntegrationGoogleSheetsDocument: mk, IntegrationIntercomDocument: ok, DeleteIntegrationIntercomDocument: rk, UpdateIntegrationIntercomSettingsDocument: sk, IntegrationJiraPersonalDocument: uk, IntegrationLoomDocument: kk, IntegrationRequestDocument: pk, IntegrationSentryConnectDocument: ck, IntegrationSlackDocument: vk, IntegrationSlackAsksDocument: Nk, IntegrationSlackCustomViewNotificationsDocument: hk, IntegrationSlackImportEmojisDocument: fk, IntegrationSlackOrgProjectUpdatesPostDocument: Sk, IntegrationSlackPersonalDocument: yk, IntegrationSlackPostDocument: bk, IntegrationSlackProjectPostDocument: gk, CreateIntegrationTemplateDocument: Dk, DeleteIntegrationTemplateDocument: Fk, IntegrationZendeskDocument: Vk, CreateIntegrationsSettingsDocument: _k, UpdateIntegrationsSettingsDocument: Ak, IssueAddLabelDocument: Tk, ArchiveIssueDocument: wk, UpdateIssueBatchDocument: Ik, CreateIssueDocument: Ck, DeleteIssueDocument: Pk, ArchiveIssueDraftDocument: qk, CreateIssueDraftDocument: xk, DeleteIssueDraftDocument: jk, UpdateIssueDraftDocument: Ok, IssueImportCreateAsanaDocument: Uk, IssueImportCreateCsvJiraDocument: Bk, IssueImportCreateClubhouseDocument: Ek, IssueImportCreateGithubDocument: Rk, IssueImportCreateJiraDocument: Mk, DeleteIssueImportDocument: Lk, IssueImportProcessDocument: zk, UpdateIssueImportDocument: Hk, CreateIssueLabelDocument: Gk, DeleteIssueLabelDocument: Wk, UpdateIssueLabelDocument: Qk, CreateIssueRelationDocument: Jk, DeleteIssueRelationDocument: Kk, UpdateIssueRelationDocument: $k, IssueReminderDocument: Zk, IssueRemoveLabelDocument: Yk, IssueSubscribeDocument: Xk, UnarchiveIssueDocument: ep, IssueUnsubscribeDocument: ip, UpdateIssueDocument: np, JoinOrganizationFromOnboardingDocument: ap2, LeaveOrganizationDocument: tp, LogoutDocument: dp, LogoutAllSessionsDocument: lp, LogoutOtherSessionsDocument: mp, LogoutSessionDocument: op, ArchiveNotificationDocument: rp, NotificationArchiveAllDocument: sp, NotificationMarkReadAllDocument: up, NotificationMarkUnreadAllDocument: kp, NotificationSnoozeAllDocument: pp, CreateNotificationSubscriptionDocument: cp, DeleteNotificationSubscriptionDocument: vp, UpdateNotificationSubscriptionDocument: Np, UnarchiveNotificationDocument: hp, NotificationUnsnoozeAllDocument: fp, UpdateNotificationDocument: Sp, DeleteOrganizationCancelDocument: yp, DeleteOrganizationDocument: bp, OrganizationDeleteChallengeDocument: gp, DeleteOrganizationDomainDocument: Dp, CreateOrganizationInviteDocument: Fp, DeleteOrganizationInviteDocument: Vp, UpdateOrganizationInviteDocument: _p, OrganizationStartTrialDocument: Ap, UpdateOrganizationDocument: Tp, ArchiveProjectDocument: wp, CreateProjectDocument: Ip, DeleteProjectDocument: Cp, CreateProjectLinkDocument: Pp, DeleteProjectLinkDocument: qp, UpdateProjectLinkDocument: xp, CreateProjectMilestoneDocument: jp, DeleteProjectMilestoneDocument: Op, UpdateProjectMilestoneDocument: Up, UnarchiveProjectDocument: Bp, UpdateProjectDocument: Ep, CreateProjectUpdateDocument: Rp, DeleteProjectUpdateDocument: Mp, CreateProjectUpdateInteractionDocument: Lp, ProjectUpdateMarkAsReadDocument: zp, UpdateProjectUpdateDocument: Hp, CreatePushSubscriptionDocument: Gp, DeletePushSubscriptionDocument: Wp, CreateReactionDocument: Qp, DeleteReactionDocument: Jp, RefreshGoogleSheetsDataDocument: Kp, ResendOrganizationInviteDocument: $p, ArchiveRoadmapDocument: Zp, CreateRoadmapDocument: Yp, DeleteRoadmapDocument: Xp, CreateRoadmapToProjectDocument: ec, DeleteRoadmapToProjectDocument: ic, UpdateRoadmapToProjectDocument: nc, UnarchiveRoadmapDocument: ac, UpdateRoadmapDocument: tc, SamlTokenUserAccountAuthDocument: dc, CreateTeamDocument: lc, DeleteTeamCyclesDocument: mc, DeleteTeamDocument: oc, DeleteTeamKeyDocument: rc, CreateTeamMembershipDocument: sc, DeleteTeamMembershipDocument: uc, UpdateTeamMembershipDocument: kc, UnarchiveTeamDocument: pc, UpdateTeamDocument: cc, CreateTemplateDocument: vc, DeleteTemplateDocument: Nc, UpdateTemplateDocument: hc, CreateTimeScheduleDocument: fc, DeleteTimeScheduleDocument: Sc, TimeScheduleRefreshIntegrationScheduleDocument: yc, UpdateTimeScheduleDocument: bc, TimeScheduleUpsertExternalDocument: gc, CreateTriageResponsibilityDocument: Dc, DeleteTriageResponsibilityDocument: Fc, UpdateTriageResponsibilityDocument: Vc, UserDemoteAdminDocument: _c, UserDemoteMemberDocument: Ac, UserDiscordConnectDocument: Tc, UserExternalUserDisconnectDocument: wc, UpdateUserFlagDocument: Ic, UserPromoteAdminDocument: Cc, UserPromoteMemberDocument: Pc, UserSettingsFlagsResetDocument: qc, UpdateUserSettingsDocument: xc, SuspendUserDocument: jc, UnsuspendUserDocument: Oc, UpdateUserDocument: Uc, CreateViewPreferencesDocument: Bc, DeleteViewPreferencesDocument: Ec, UpdateViewPreferencesDocument: Rc, CreateWebhookDocument: Mc, DeleteWebhookDocument: Lc, UpdateWebhookDocument: zc, ArchiveWorkflowStateDocument: Hc, CreateWorkflowStateDocument: Gc, UpdateWorkflowStateDocument: Wc });
    var Jc = class {
      constructor(e2) {
        this._request = e2;
      }
      paginate(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = e2.bind(this);
          let a2 = yield n2(i2);
          const t2 = a2.nodes;
          for (; a2.pageInfo.hasNextPage; ) a2 = yield n2(Object.assign(Object.assign({ first: 50 }, i2), { after: a2.pageInfo.endCursor })), t2.push(...a2.nodes);
          return t2;
        });
      }
    };
    function Kc(e2) {
      var i2, n2;
      return Object.assign(Object.assign({}, e2), { first: null !== (i2 = e2.first) && void 0 !== i2 ? i2 : e2.after ? 50 : void 0, last: null !== (n2 = e2.last) && void 0 !== n2 ? n2 : e2.before ? 50 : void 0 });
    }
    var $c = class extends Jc {
      constructor(e2) {
        super(e2), this.pageInfo = new lf(e2, { hasNextPage: false, hasPreviousPage: false, __typename: "PageInfo" }), this.nodes = [];
      }
    };
    var Zc = class extends $c {
      constructor(e2, i2, n2, a2) {
        super(e2), this._fetch = i2, this.nodes = n2, this.pageInfo = a2;
      }
      _appendNodes(e2) {
        var i2;
        this.nodes = e2 ? [...null !== (i2 = this.nodes) && void 0 !== i2 ? i2 : [], ...e2] : this.nodes;
      }
      _prependNodes(e2) {
        var i2;
        this.nodes = e2 ? [...e2, ...null !== (i2 = this.nodes) && void 0 !== i2 ? i2 : []] : this.nodes;
      }
      _appendPageInfo(e2) {
        var i2, n2;
        this.pageInfo && (this.pageInfo.endCursor = null !== (i2 = null == e2 ? void 0 : e2.endCursor) && void 0 !== i2 ? i2 : this.pageInfo.startCursor, this.pageInfo.hasNextPage = null !== (n2 = null == e2 ? void 0 : e2.hasNextPage) && void 0 !== n2 ? n2 : this.pageInfo.hasNextPage);
      }
      _prependPageInfo(e2) {
        var i2, n2;
        this.pageInfo && (this.pageInfo.startCursor = null !== (i2 = null == e2 ? void 0 : e2.startCursor) && void 0 !== i2 ? i2 : this.pageInfo.startCursor, this.pageInfo.hasPreviousPage = null !== (n2 = null == e2 ? void 0 : e2.hasPreviousPage) && void 0 !== n2 ? n2 : this.pageInfo.hasPreviousPage);
      }
      fetchNext() {
        var e2, i2;
        return v(this, void 0, void 0, function* () {
          if (null === (e2 = this.pageInfo) || void 0 === e2 ? void 0 : e2.hasNextPage) {
            const e3 = yield this._fetch({ after: null === (i2 = this.pageInfo) || void 0 === i2 ? void 0 : i2.endCursor });
            this._appendNodes(null == e3 ? void 0 : e3.nodes), this._appendPageInfo(null == e3 ? void 0 : e3.pageInfo);
          }
          return Promise.resolve(this);
        });
      }
      fetchPrevious() {
        var e2, i2;
        return v(this, void 0, void 0, function* () {
          if (null === (e2 = this.pageInfo) || void 0 === e2 ? void 0 : e2.hasPreviousPage) {
            const e3 = yield this._fetch({ before: null === (i2 = this.pageInfo) || void 0 === i2 ? void 0 : i2.startCursor });
            this._prependNodes(null == e3 ? void 0 : e3.nodes), this._prependPageInfo(null == e3 ? void 0 : e3.pageInfo);
          }
          return Promise.resolve(this);
        });
      }
    };
    function Yc(e2) {
      try {
        return e2 ? new Date(e2) : void 0;
      } catch (e3) {
        return;
      }
    }
    function Xc(e2) {
      try {
        return e2 ? JSON.parse(e2) : void 0;
      } catch (e3) {
        return;
      }
    }
    var ev = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.avatarUrl = null !== (n2 = i2.avatarUrl) && void 0 !== n2 ? n2 : void 0, this.id = null !== (a2 = i2.id) && void 0 !== a2 ? a2 : void 0, this.name = null !== (t2 = i2.name) && void 0 !== t2 ? t2 : void 0, this.subType = null !== (d2 = i2.subType) && void 0 !== d2 ? d2 : void 0, this.type = i2.type, this.userDisplayName = null !== (l2 = i2.userDisplayName) && void 0 !== l2 ? l2 : void 0;
      }
    };
    var iv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.label = i2.label, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date();
      }
    };
    var nv = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new iv(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var av = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.clientId = i2.clientId, this.description = null !== (n2 = i2.description) && void 0 !== n2 ? n2 : void 0, this.developer = i2.developer, this.developerUrl = i2.developerUrl, this.id = i2.id, this.imageUrl = null !== (a2 = i2.imageUrl) && void 0 !== a2 ? a2 : void 0, this.name = i2.name;
      }
    };
    var tv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.archive = i2.archive, this.databaseVersion = i2.databaseVersion, this.includesDependencies = i2.includesDependencies, this.totalCount = i2.totalCount;
      }
    };
    var dv = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.addBot = i2.addBot, this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.mapping = new aS(e2, i2.mapping), this._integration = null !== (n2 = i2.integration) && void 0 !== n2 ? n2 : void 0;
      }
      get integration() {
        var e2, i2;
        return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new xy(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var lv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.groupBySource = i2.groupBySource, this.id = i2.id, this.metadata = i2.metadata, this.source = null !== (t2 = i2.source) && void 0 !== t2 ? t2 : void 0, this.sourceType = null !== (d2 = i2.sourceType) && void 0 !== d2 ? d2 : void 0, this.subtitle = null !== (l2 = i2.subtitle) && void 0 !== l2 ? l2 : void 0, this.title = i2.title, this.updatedAt = null !== (m2 = Yc(i2.updatedAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this.url = i2.url, this._creator = null !== (o2 = i2.creator) && void 0 !== o2 ? o2 : void 0, this._externalUserCreator = null !== (r2 = i2.externalUserCreator) && void 0 !== r2 ? r2 : void 0, this._issue = i2.issue;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get externalUserCreator() {
        var e2, i2;
        return (null === (e2 = this._externalUserCreator) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUserCreator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get issue() {
        return new Ry(this._request).fetch(this._issue.id);
      }
      archive() {
        return new Yb(this._request).fetch(this.id);
      }
      create(e2) {
        return new Xb(this._request).fetch(e2);
      }
      delete() {
        return new eg(this._request).fetch(this.id);
      }
      update(e2) {
        return new kg(this._request).fetch(this.id, e2);
      }
    };
    var mv = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
      }
      get entity() {
        var e2, i2;
        return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new ty(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var ov = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new lv(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var rv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._attachment = i2.attachment;
      }
      get attachment() {
        return new ty(this._request).fetch(this._attachment.id);
      }
    };
    var sv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2;
        super(e2), this.actorId = null !== (n2 = i2.actorId) && void 0 !== n2 ? n2 : void 0, this.archivedAt = null !== (a2 = Yc(i2.archivedAt)) && void 0 !== a2 ? a2 : void 0, this.countryCode = null !== (t2 = i2.countryCode) && void 0 !== t2 ? t2 : void 0, this.createdAt = null !== (d2 = Yc(i2.createdAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.ip = null !== (l2 = i2.ip) && void 0 !== l2 ? l2 : void 0, this.metadata = null !== (m2 = i2.metadata) && void 0 !== m2 ? m2 : void 0, this.requestInformation = null !== (o2 = i2.requestInformation) && void 0 !== o2 ? o2 : void 0, this.type = i2.type, this.updatedAt = null !== (r2 = Yc(i2.updatedAt)) && void 0 !== r2 ? r2 : /* @__PURE__ */ new Date(), this._actor = null !== (s2 = i2.actor) && void 0 !== s2 ? s2 : void 0;
      }
      get actor() {
        var e2, i2;
        return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
    };
    var uv = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new sv(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var kv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.description = i2.description, this.type = i2.type;
      }
    };
    var pv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.id = i2.id;
      }
    };
    var cv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.clientId = i2.clientId, this.clientSecret = i2.clientSecret, this.creatorId = i2.creatorId, this.description = null !== (a2 = i2.description) && void 0 !== a2 ? a2 : void 0, this.developer = i2.developer, this.developerUrl = i2.developerUrl, this.id = i2.id, this.imageUrl = null !== (t2 = i2.imageUrl) && void 0 !== t2 ? t2 : void 0, this.name = i2.name, this.organizationId = i2.organizationId, this.publicEnabled = i2.publicEnabled, this.redirectUris = i2.redirectUris, this.webhookResourceTypes = i2.webhookResourceTypes, this.webhookSecret = null !== (d2 = i2.webhookSecret) && void 0 !== d2 ? d2 : void 0, this.webhookUrl = null !== (l2 = i2.webhookUrl) && void 0 !== l2 ? l2 : void 0;
      }
    };
    var vv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.allowedAuthServices = i2.allowedAuthServices, this.deletionRequestedAt = null !== (n2 = Yc(i2.deletionRequestedAt)) && void 0 !== n2 ? n2 : void 0, this.enabled = i2.enabled, this.id = i2.id, this.logoUrl = null !== (a2 = i2.logoUrl) && void 0 !== a2 ? a2 : void 0, this.name = i2.name, this.previousUrlKeys = i2.previousUrlKeys, this.region = i2.region, this.samlEnabled = i2.samlEnabled, this.scimEnabled = i2.scimEnabled, this.serviceId = i2.serviceId, this.urlKey = i2.urlKey, this.userCount = i2.userCount, this.releaseChannel = i2.releaseChannel;
      }
    };
    var Nv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.allowDomainAccess = null !== (n2 = i2.allowDomainAccess) && void 0 !== n2 ? n2 : void 0, this.email = i2.email, this.id = i2.id, this.lastUsedOrganizationId = null !== (a2 = i2.lastUsedOrganizationId) && void 0 !== a2 ? a2 : void 0, this.token = null !== (t2 = i2.token) && void 0 !== t2 ? t2 : void 0, this.availableOrganizations = i2.availableOrganizations ? i2.availableOrganizations.map((i3) => new vv(e2, i3)) : void 0, this.lockedOrganizations = i2.lockedOrganizations ? i2.lockedOrganizations.map((i3) => new vv(e2, i3)) : void 0, this.lockedUsers = i2.lockedUsers.map((i3) => new hv(e2, i3)), this.users = i2.users.map((i3) => new hv(e2, i3));
      }
    };
    var hv = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.active = i2.active, this.avatarUrl = null !== (n2 = i2.avatarUrl) && void 0 !== n2 ? n2 : void 0, this.displayName = i2.displayName, this.email = i2.email, this.id = i2.id, this.name = i2.name, this.userAccountId = i2.userAccountId, this.organization = new vv(e2, i2.organization), this.role = i2.role;
      }
    };
    var fv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2;
        super(e2), this.browserType = null !== (n2 = i2.browserType) && void 0 !== n2 ? n2 : void 0, this.client = null !== (a2 = i2.client) && void 0 !== a2 ? a2 : void 0, this.countryCodes = i2.countryCodes, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.ip = null !== (d2 = i2.ip) && void 0 !== d2 ? d2 : void 0, this.isCurrentSession = i2.isCurrentSession, this.lastActiveAt = null !== (l2 = Yc(i2.lastActiveAt)) && void 0 !== l2 ? l2 : void 0, this.location = null !== (m2 = i2.location) && void 0 !== m2 ? m2 : void 0, this.locationCity = null !== (o2 = i2.locationCity) && void 0 !== o2 ? o2 : void 0, this.locationCountry = null !== (r2 = i2.locationCountry) && void 0 !== r2 ? r2 : void 0, this.locationCountryCode = null !== (s2 = i2.locationCountryCode) && void 0 !== s2 ? s2 : void 0, this.locationRegionCode = null !== (u2 = i2.locationRegionCode) && void 0 !== u2 ? u2 : void 0, this.name = i2.name, this.operatingSystem = null !== (k2 = i2.operatingSystem) && void 0 !== k2 ? k2 : void 0, this.updatedAt = null !== (p2 = Yc(i2.updatedAt)) && void 0 !== p2 ? p2 : /* @__PURE__ */ new Date(), this.userAgent = null !== (c2 = i2.userAgent) && void 0 !== c2 ? c2 : void 0, this.type = i2.type;
      }
    };
    var Sv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.body = i2.body, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.editedAt = null !== (t2 = Yc(i2.editedAt)) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.quotedText = null !== (d2 = i2.quotedText) && void 0 !== d2 ? d2 : void 0, this.reactionData = i2.reactionData, this.resolvedAt = null !== (l2 = Yc(i2.resolvedAt)) && void 0 !== l2 ? l2 : void 0, this.updatedAt = null !== (m2 = Yc(i2.updatedAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this.url = i2.url, this.botActor = i2.botActor ? new ev(e2, i2.botActor) : void 0, this.documentContent = i2.documentContent ? new Mv(e2, i2.documentContent) : void 0, this.reactions = i2.reactions.map((i3) => new Hf(e2, i3)), this._externalUser = null !== (o2 = i2.externalUser) && void 0 !== o2 ? o2 : void 0, this._issue = null !== (r2 = i2.issue) && void 0 !== r2 ? r2 : void 0, this._parent = null !== (s2 = i2.parent) && void 0 !== s2 ? s2 : void 0, this._projectUpdate = null !== (u2 = i2.projectUpdate) && void 0 !== u2 ? u2 : void 0, this._resolvingComment = null !== (k2 = i2.resolvingComment) && void 0 !== k2 ? k2 : void 0, this._resolvingUser = null !== (p2 = i2.resolvingUser) && void 0 !== p2 ? p2 : void 0, this._user = null !== (c2 = i2.user) && void 0 !== c2 ? c2 : void 0;
      }
      get externalUser() {
        var e2, i2;
        return (null === (e2 = this._externalUser) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUser) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get issue() {
        var e2, i2;
        return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get parent() {
        var e2, i2;
        return (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id) ? new ky(this._request).fetch({ id: null === (i2 = this._parent) || void 0 === i2 ? void 0 : i2.id }) : void 0;
      }
      get projectUpdate() {
        var e2, i2;
        return (null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id) ? new vb(this._request).fetch(null === (i2 = this._projectUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get resolvingComment() {
        var e2, i2;
        return (null === (e2 = this._resolvingComment) || void 0 === e2 ? void 0 : e2.id) ? new ky(this._request).fetch({ id: null === (i2 = this._resolvingComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
      }
      get resolvingUser() {
        var e2, i2;
        return (null === (e2 = this._resolvingUser) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._resolvingUser) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      children(e2) {
        return new c_(this._request, e2).fetch(e2);
      }
      create(e2) {
        return new pg(this._request).fetch(e2);
      }
      delete() {
        return new cg(this._request).fetch(this.id);
      }
      update(e2) {
        return new hg(this._request).fetch(this.id, e2);
      }
    };
    var yv = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Sv(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var bv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._comment = i2.comment;
      }
      get comment() {
        return new ky(this._request).fetch({ id: this._comment.id });
      }
    };
    var gv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var Dv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var Fv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.organization = new vv(e2, i2.organization), this.user = new hv(e2, i2.user);
      }
    };
    var Vv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = null !== (a2 = i2.color) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.description = null !== (d2 = i2.description) && void 0 !== d2 ? d2 : void 0, this.filterData = i2.filterData, this.filters = i2.filters, this.icon = null !== (l2 = i2.icon) && void 0 !== l2 ? l2 : void 0, this.id = i2.id, this.modelName = i2.modelName, this.name = i2.name, this.projectFilterData = null !== (m2 = i2.projectFilterData) && void 0 !== m2 ? m2 : void 0, this.shared = i2.shared, this.slugId = null !== (o2 = i2.slugId) && void 0 !== o2 ? o2 : void 0, this.updatedAt = null !== (r2 = Yc(i2.updatedAt)) && void 0 !== r2 ? r2 : /* @__PURE__ */ new Date(), this.organizationViewPreferences = i2.organizationViewPreferences ? new ES(e2, i2.organizationViewPreferences) : void 0, this.userViewPreferences = i2.userViewPreferences ? new ES(e2, i2.userViewPreferences) : void 0, this.viewPreferencesValues = i2.viewPreferencesValues ? new MS(e2, i2.viewPreferencesValues) : void 0, this._creator = i2.creator, this._owner = i2.owner, this._team = null !== (s2 = i2.team) && void 0 !== s2 ? s2 : void 0, this._updatedBy = i2.updatedBy;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      get owner() {
        return new Lb(this._request).fetch(this._owner.id);
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get updatedBy() {
        return new Lb(this._request).fetch(this._updatedBy.id);
      }
      issues(e2) {
        return new v_(this._request, this.id, e2).fetch(e2);
      }
      projects(e2) {
        return new N_(this._request, this.id, e2).fetch(e2);
      }
      create(e2) {
        return new gg(this._request).fetch(e2);
      }
      delete() {
        return new Dg(this._request).fetch(this.id);
      }
      update(e2) {
        return new Fg(this._request).fetch(this.id, e2);
      }
    };
    var _v = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Vv(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var Av = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.hasSubscribers = i2.hasSubscribers;
      }
    };
    var Tv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = i2.customView, this._cycle = null !== (m2 = i2.cycle) && void 0 !== m2 ? m2 : void 0, this._initiative = null !== (o2 = i2.initiative) && void 0 !== o2 ? o2 : void 0, this._label = null !== (r2 = i2.label) && void 0 !== r2 ? r2 : void 0, this._project = null !== (s2 = i2.project) && void 0 !== s2 ? s2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (u2 = i2.team) && void 0 !== u2 ? u2 : void 0, this._user = null !== (k2 = i2.user) && void 0 !== k2 ? k2 : void 0;
      }
      get customView() {
        return new cy(this._request).fetch(this._customView.id);
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get initiative() {
        var e2, i2;
        return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get label() {
        var e2, i2;
        return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new Gy(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get subscriber() {
        return new Lb(this._request).fetch(this._subscriber.id);
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var wv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._customView = i2.customView;
      }
      get customView() {
        return new cy(this._request).fetch(this._customView.id);
      }
    };
    var Iv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.autoArchivedAt = null !== (a2 = Yc(i2.autoArchivedAt)) && void 0 !== a2 ? a2 : void 0, this.completedAt = null !== (t2 = Yc(i2.completedAt)) && void 0 !== t2 ? t2 : void 0, this.completedIssueCountHistory = i2.completedIssueCountHistory, this.completedScopeHistory = i2.completedScopeHistory, this.createdAt = null !== (d2 = Yc(i2.createdAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.description = null !== (l2 = i2.description) && void 0 !== l2 ? l2 : void 0, this.endsAt = null !== (m2 = Yc(i2.endsAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.inProgressScopeHistory = i2.inProgressScopeHistory, this.issueCountHistory = i2.issueCountHistory, this.name = null !== (o2 = i2.name) && void 0 !== o2 ? o2 : void 0, this.number = i2.number, this.progress = i2.progress, this.scopeHistory = i2.scopeHistory, this.startsAt = null !== (r2 = Yc(i2.startsAt)) && void 0 !== r2 ? r2 : /* @__PURE__ */ new Date(), this.updatedAt = null !== (s2 = Yc(i2.updatedAt)) && void 0 !== s2 ? s2 : /* @__PURE__ */ new Date(), this._team = i2.team;
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
      issues(e2) {
        return new h_(this._request, this.id, e2).fetch(e2);
      }
      uncompletedIssuesUponClose(e2) {
        return new f_(this._request, this.id, e2).fetch(e2);
      }
      archive() {
        return new Vg(this._request).fetch(this.id);
      }
      create(e2) {
        return new _g(this._request).fetch(e2);
      }
      update(e2) {
        return new wg(this._request).fetch(this.id, e2);
      }
    };
    var Cv = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
      }
      get entity() {
        var e2, i2;
        return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var Pv = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Iv(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var qv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (m2 = i2.customView) && void 0 !== m2 ? m2 : void 0, this._cycle = i2.cycle, this._initiative = null !== (o2 = i2.initiative) && void 0 !== o2 ? o2 : void 0, this._label = null !== (r2 = i2.label) && void 0 !== r2 ? r2 : void 0, this._project = null !== (s2 = i2.project) && void 0 !== s2 ? s2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (u2 = i2.team) && void 0 !== u2 ? u2 : void 0, this._user = null !== (k2 = i2.user) && void 0 !== k2 ? k2 : void 0;
      }
      get customView() {
        var e2, i2;
        return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new cy(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        return new hy(this._request).fetch(this._cycle.id);
      }
      get initiative() {
        var e2, i2;
        return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get label() {
        var e2, i2;
        return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new Gy(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get subscriber() {
        return new Lb(this._request).fetch(this._subscriber.id);
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var xv = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._cycle = null !== (n2 = i2.cycle) && void 0 !== n2 ? n2 : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var jv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.entityId = i2.entityId, this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    };
    var Ov = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.date = i2.date, this.id = i2.id, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.url = i2.url, this._user = i2.user;
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
      create(e2) {
        return new Ig(this._request).fetch(e2);
      }
      delete() {
        return new Cg(this._request).fetch(this.id);
      }
      update(e2) {
        return new Pg(this._request).fetch(this.id, e2);
      }
    };
    var Uv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._diaryEntry = i2.diaryEntry;
      }
      get diaryEntry() {
        return new Sy(this._request).fetch(this._diaryEntry.id);
      }
    };
    var Bv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = null !== (a2 = i2.color) && void 0 !== a2 ? a2 : void 0, this.content = null !== (t2 = i2.content) && void 0 !== t2 ? t2 : void 0, this.createdAt = null !== (d2 = Yc(i2.createdAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.documentContentId = null !== (l2 = i2.documentContentId) && void 0 !== l2 ? l2 : void 0, this.hiddenAt = null !== (m2 = Yc(i2.hiddenAt)) && void 0 !== m2 ? m2 : void 0, this.icon = null !== (o2 = i2.icon) && void 0 !== o2 ? o2 : void 0, this.id = i2.id, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.title = i2.title, this.trashed = null !== (r2 = i2.trashed) && void 0 !== r2 ? r2 : void 0, this.updatedAt = null !== (s2 = Yc(i2.updatedAt)) && void 0 !== s2 ? s2 : /* @__PURE__ */ new Date(), this.url = i2.url, this._creator = i2.creator, this._lastAppliedTemplate = null !== (u2 = i2.lastAppliedTemplate) && void 0 !== u2 ? u2 : void 0, this._project = null !== (k2 = i2.project) && void 0 !== k2 ? k2 : void 0, this._updatedBy = i2.updatedBy;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get lastAppliedTemplate() {
        var e2, i2;
        return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new jb(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get updatedBy() {
        return new Lb(this._request).fetch(this._updatedBy.id);
      }
      comments(e2) {
        return new S_(this._request, this.id, e2).fetch(e2);
      }
      create(e2) {
        return new qg(this._request).fetch(e2);
      }
      delete() {
        return new xg(this._request).fetch(this.id);
      }
      unarchive() {
        return new jg(this._request).fetch(this.id);
      }
      update(e2) {
        return new Og(this._request).fetch(this.id, e2);
      }
    };
    var Ev = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
      }
      get entity() {
        var e2, i2;
        return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new yy(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var Rv = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Bv(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var Mv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.content = null !== (a2 = i2.content) && void 0 !== a2 ? a2 : void 0, this.contentState = null !== (t2 = i2.contentState) && void 0 !== t2 ? t2 : void 0, this.createdAt = null !== (d2 = Yc(i2.createdAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.restoredAt = null !== (l2 = Yc(i2.restoredAt)) && void 0 !== l2 ? l2 : void 0, this.updatedAt = null !== (m2 = Yc(i2.updatedAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this._document = null !== (o2 = i2.document) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (r2 = i2.initiative) && void 0 !== r2 ? r2 : void 0, this._issue = null !== (s2 = i2.issue) && void 0 !== s2 ? s2 : void 0, this._project = null !== (u2 = i2.project) && void 0 !== u2 ? u2 : void 0, this._projectMilestone = null !== (k2 = i2.projectMilestone) && void 0 !== k2 ? k2 : void 0;
      }
      get document() {
        var e2, i2;
        return (null === (e2 = this._document) || void 0 === e2 ? void 0 : e2.id) ? new yy(this._request).fetch(null === (i2 = this._document) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get initiative() {
        var e2, i2;
        return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get issue() {
        var e2, i2;
        return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get projectMilestone() {
        var e2, i2;
        return (null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id) ? new ub(this._request).fetch(null === (i2 = this._projectMilestone) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var Lv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success, this.history = i2.history.map((i3) => new zv(e2, i3));
      }
    };
    var zv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.actorIds = null !== (n2 = i2.actorIds) && void 0 !== n2 ? n2 : void 0, this.contentDataSnapshotAt = null !== (a2 = Yc(i2.contentDataSnapshotAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.id = i2.id;
      }
    };
    var Hv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.commentId = null !== (a2 = i2.commentId) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.documentId = i2.documentId, this.emailedAt = null !== (d2 = Yc(i2.emailedAt)) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.parentCommentId = null !== (l2 = i2.parentCommentId) && void 0 !== l2 ? l2 : void 0, this.reactionEmoji = null !== (m2 = i2.reactionEmoji) && void 0 !== m2 ? m2 : void 0, this.readAt = null !== (o2 = Yc(i2.readAt)) && void 0 !== o2 ? o2 : void 0, this.snoozedUntilAt = null !== (r2 = Yc(i2.snoozedUntilAt)) && void 0 !== r2 ? r2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (s2 = Yc(i2.unsnoozedAt)) && void 0 !== s2 ? s2 : void 0, this.updatedAt = null !== (u2 = Yc(i2.updatedAt)) && void 0 !== u2 ? u2 : /* @__PURE__ */ new Date(), this.botActor = i2.botActor ? new ev(e2, i2.botActor) : void 0, this._actor = null !== (k2 = i2.actor) && void 0 !== k2 ? k2 : void 0, this._externalUserActor = null !== (p2 = i2.externalUserActor) && void 0 !== p2 ? p2 : void 0, this._user = i2.user;
      }
      get actor() {
        var e2, i2;
        return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get externalUserActor() {
        var e2, i2;
        return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
    };
    var Gv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._document = i2.document;
      }
      get document() {
        return new yy(this._request).fetch(this._document.id);
      }
    };
    var Wv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.totalCount = i2.totalCount, this.archivePayload = new tv(e2, i2.archivePayload), this.pageInfo = new lf(e2, i2.pageInfo), this.nodes = i2.nodes.map((i3) => new Qv(e2, i3));
      }
    };
    var Qv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = null !== (a2 = i2.color) && void 0 !== a2 ? a2 : void 0, this.content = null !== (t2 = i2.content) && void 0 !== t2 ? t2 : void 0, this.createdAt = null !== (d2 = Yc(i2.createdAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.documentContentId = null !== (l2 = i2.documentContentId) && void 0 !== l2 ? l2 : void 0, this.hiddenAt = null !== (m2 = Yc(i2.hiddenAt)) && void 0 !== m2 ? m2 : void 0, this.icon = null !== (o2 = i2.icon) && void 0 !== o2 ? o2 : void 0, this.id = i2.id, this.metadata = i2.metadata, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.title = i2.title, this.trashed = null !== (r2 = i2.trashed) && void 0 !== r2 ? r2 : void 0, this.updatedAt = null !== (s2 = Yc(i2.updatedAt)) && void 0 !== s2 ? s2 : /* @__PURE__ */ new Date(), this.url = i2.url, this._creator = i2.creator, this._lastAppliedTemplate = null !== (u2 = i2.lastAppliedTemplate) && void 0 !== u2 ? u2 : void 0, this._project = null !== (k2 = i2.project) && void 0 !== k2 ? k2 : void 0, this._updatedBy = i2.updatedBy;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get lastAppliedTemplate() {
        var e2, i2;
        return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new jb(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get updatedBy() {
        return new Lb(this._request).fetch(this._updatedBy.id);
      }
    };
    var Jv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.address = i2.address, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.enabled = i2.enabled, this.id = i2.id, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this._creator = null !== (d2 = i2.creator) && void 0 !== d2 ? d2 : void 0, this._team = i2.team, this._template = null !== (l2 = i2.template) && void 0 !== l2 ? l2 : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
      get template() {
        var e2, i2;
        return (null === (e2 = this._template) || void 0 === e2 ? void 0 : e2.id) ? new jb(this._request).fetch(null === (i2 = this._template) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      create(e2) {
        return new Ug(this._request).fetch(e2);
      }
      delete() {
        return new Bg(this._request).fetch(this.id);
      }
      update(e2) {
        return new Rg(this._request).fetch(this.id, e2);
      }
    };
    var Kv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.emailIntakeAddress = new Jv(e2, i2.emailIntakeAddress);
      }
    };
    var $v = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var Zv = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.authType = i2.authType, this.success = i2.success;
      }
    };
    var Yv = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.name = i2.name, this.source = i2.source, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.url = i2.url, this._creator = i2.creator;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      create(e2) {
        return new Hg(this._request).fetch(e2);
      }
      delete() {
        return new Gg(this._request).fetch(this.id);
      }
    };
    var Xv = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Yv(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var eN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._emoji = i2.emoji;
      }
      get emoji() {
        return new Dy(this._request).fetch(this._emoji.id);
      }
    };
    var iN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.counts = i2.counts;
      }
    };
    var nN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.label = i2.label, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.url = i2.url, this._creator = i2.creator, this._initiative = null !== (d2 = i2.initiative) && void 0 !== d2 ? d2 : void 0;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get initiative() {
        var e2, i2;
        return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      create(e2) {
        return new Wg(this._request).fetch(e2);
      }
      delete() {
        return new Qg(this._request).fetch(this.id);
      }
      update(e2) {
        return new Jg(this._request).fetch(this.id, e2);
      }
    };
    var aN = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new nN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var tN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entityExternalLink = i2.entityExternalLink;
      }
      get entityExternalLink() {
        return new Vy(this._request).fetch(this._entityExternalLink.id);
      }
    };
    var dN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.avatarUrl = null !== (a2 = i2.avatarUrl) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.displayName = i2.displayName, this.email = null !== (d2 = i2.email) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.lastSeen = null !== (l2 = Yc(i2.lastSeen)) && void 0 !== l2 ? l2 : void 0, this.name = i2.name, this.updatedAt = null !== (m2 = Yc(i2.updatedAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date();
      }
      get organization() {
        return new ab(this._request).fetch();
      }
    };
    var lN = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new dN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var mN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.sourcePage = null !== (d2 = i2.sourcePage) && void 0 !== d2 ? d2 : void 0, this._sourceInitiative = null !== (l2 = i2.sourceInitiative) && void 0 !== l2 ? l2 : void 0, this._sourceProject = null !== (m2 = i2.sourceProject) && void 0 !== m2 ? m2 : void 0, this._sourceTeam = null !== (o2 = i2.sourceTeam) && void 0 !== o2 ? o2 : void 0, this._targetCustomView = null !== (r2 = i2.targetCustomView) && void 0 !== r2 ? r2 : void 0;
      }
      get sourceInitiative() {
        var e2, i2;
        return (null === (e2 = this._sourceInitiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._sourceInitiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get sourceOrganization() {
        return new ab(this._request).fetch();
      }
      get sourceProject() {
        var e2, i2;
        return (null === (e2 = this._sourceProject) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._sourceProject) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get sourceTeam() {
        var e2, i2;
        return (null === (e2 = this._sourceTeam) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._sourceTeam) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get targetCustomView() {
        var e2, i2;
        return (null === (e2 = this._targetCustomView) || void 0 === e2 ? void 0 : e2.id) ? new cy(this._request).fetch(null === (i2 = this._targetCustomView) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var oN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2, N2, h2, f2, S2, y2, b2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.folderName = null !== (t2 = i2.folderName) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.predefinedViewType = null !== (d2 = i2.predefinedViewType) && void 0 !== d2 ? d2 : void 0, this.sortOrder = i2.sortOrder, this.type = i2.type, this.updatedAt = null !== (l2 = Yc(i2.updatedAt)) && void 0 !== l2 ? l2 : /* @__PURE__ */ new Date(), this.url = null !== (m2 = i2.url) && void 0 !== m2 ? m2 : void 0, this.initiativeTab = null !== (o2 = i2.initiativeTab) && void 0 !== o2 ? o2 : void 0, this.projectTab = null !== (r2 = i2.projectTab) && void 0 !== r2 ? r2 : void 0, this._customView = null !== (s2 = i2.customView) && void 0 !== s2 ? s2 : void 0, this._cycle = null !== (u2 = i2.cycle) && void 0 !== u2 ? u2 : void 0, this._document = null !== (k2 = i2.document) && void 0 !== k2 ? k2 : void 0, this._initiative = null !== (p2 = i2.initiative) && void 0 !== p2 ? p2 : void 0, this._issue = null !== (c2 = i2.issue) && void 0 !== c2 ? c2 : void 0, this._label = null !== (v2 = i2.label) && void 0 !== v2 ? v2 : void 0, this._owner = i2.owner, this._parent = null !== (N2 = i2.parent) && void 0 !== N2 ? N2 : void 0, this._predefinedViewTeam = null !== (h2 = i2.predefinedViewTeam) && void 0 !== h2 ? h2 : void 0, this._project = null !== (f2 = i2.project) && void 0 !== f2 ? f2 : void 0, this._projectTeam = null !== (S2 = i2.projectTeam) && void 0 !== S2 ? S2 : void 0, this._roadmap = null !== (y2 = i2.roadmap) && void 0 !== y2 ? y2 : void 0, this._user = null !== (b2 = i2.user) && void 0 !== b2 ? b2 : void 0;
      }
      get customView() {
        var e2, i2;
        return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new cy(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get document() {
        var e2, i2;
        return (null === (e2 = this._document) || void 0 === e2 ? void 0 : e2.id) ? new yy(this._request).fetch(null === (i2 = this._document) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get initiative() {
        var e2, i2;
        return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get issue() {
        var e2, i2;
        return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get label() {
        var e2, i2;
        return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new Gy(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get owner() {
        return new Lb(this._request).fetch(this._owner.id);
      }
      get parent() {
        var e2, i2;
        return (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id) ? new Ty(this._request).fetch(null === (i2 = this._parent) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get predefinedViewTeam() {
        var e2, i2;
        return (null === (e2 = this._predefinedViewTeam) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._predefinedViewTeam) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get projectTeam() {
        var e2, i2;
        return (null === (e2 = this._projectTeam) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._projectTeam) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get roadmap() {
        var e2, i2;
        return (null === (e2 = this._roadmap) || void 0 === e2 ? void 0 : e2.id) ? new gb(this._request).fetch(null === (i2 = this._roadmap) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      children(e2) {
        return new y_(this._request, this.id, e2).fetch(e2);
      }
      create(e2) {
        return new Kg(this._request).fetch(e2);
      }
      delete() {
        return new $g(this._request).fetch(this.id);
      }
      update(e2) {
        return new Zg(this._request).fetch(this.id, e2);
      }
    };
    var rN = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new oN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var sN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._favorite = i2.favorite;
      }
      get favorite() {
        return new Ty(this._request).fetch(this._favorite.id);
      }
    };
    var uN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.externalUrl = i2.externalUrl, this.id = i2.id, this.isEnabled = i2.isEnabled, this.key = i2.key, this.lastStageUpdatedAt = null !== (d2 = Yc(i2.lastStageUpdatedAt)) && void 0 !== d2 ? d2 : void 0, this.status = i2.status, this.updatedAt = null !== (l2 = Yc(i2.updatedAt)) && void 0 !== l2 ? l2 : /* @__PURE__ */ new Date(), this.pendingRolloutStage = i2.pendingRolloutStage ? new kN(e2, i2.pendingRolloutStage) : void 0, this.rolloutStage = new kN(e2, i2.rolloutStage), this._creator = null !== (m2 = i2.creator) && void 0 !== m2 ? m2 : void 0, this._integration = i2.integration, this._lastStageUpdatedBy = null !== (o2 = i2.lastStageUpdatedBy) && void 0 !== o2 ? o2 : void 0, this._project = null !== (r2 = i2.project) && void 0 !== r2 ? r2 : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get integration() {
        return new xy(this._request).fetch(this._integration.id);
      }
      get lastStageUpdatedBy() {
        var e2, i2;
        return (null === (e2 = this._lastStageUpdatedBy) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._lastStageUpdatedBy) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var kN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.name = i2.name, this.segmentKeys = i2.segmentKeys, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.type = i2.type, this._integration = i2.integration;
      }
      get integration() {
        return new xy(this._request).fetch(this._integration.id);
      }
      get organization() {
        return new ab(this._request).fetch();
      }
    };
    var pN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    };
    var cN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.automateTicketReopeningOnCancellation = null !== (n2 = i2.automateTicketReopeningOnCancellation) && void 0 !== n2 ? n2 : void 0, this.automateTicketReopeningOnComment = null !== (a2 = i2.automateTicketReopeningOnComment) && void 0 !== a2 ? a2 : void 0, this.automateTicketReopeningOnCompletion = null !== (t2 = i2.automateTicketReopeningOnCompletion) && void 0 !== t2 ? t2 : void 0, this.sendNoteOnComment = null !== (d2 = i2.sendNoteOnComment) && void 0 !== d2 ? d2 : void 0, this.sendNoteOnStatusChange = null !== (l2 = i2.sendNoteOnStatusChange) && void 0 !== l2 ? l2 : void 0;
      }
    };
    var vN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.branchPattern = null !== (a2 = i2.branchPattern) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.targetBranch = i2.targetBranch ? new fN(e2, i2.targetBranch) : void 0, this.event = i2.event, this._state = null !== (l2 = i2.state) && void 0 !== l2 ? l2 : void 0, this._team = i2.team;
      }
      get state() {
        var e2, i2;
        return (null === (e2 = this._state) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._state) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
      create(e2) {
        return new Xg(this._request).fetch(e2);
      }
      delete() {
        return new eD(this._request).fetch(this.id);
      }
      update(e2) {
        return new iD(this._request).fetch(this.id, e2);
      }
    };
    var NN = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new vN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var hN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.gitAutomationState = new vN(e2, i2.gitAutomationState);
      }
    };
    var fN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.branchPattern = i2.branchPattern, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.isRegex = i2.isRegex, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this._team = i2.team;
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
      create(e2) {
        return new nD(this._request).fetch(e2);
      }
      delete() {
        return new aD(this._request).fetch(this.id);
      }
      update(e2) {
        return new tD(this._request).fetch(this.id, e2);
      }
    };
    var SN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.targetBranch = new fN(e2, i2.targetBranch);
      }
    };
    var yN = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.webhookSecret = i2.webhookSecret, this._integration = null !== (n2 = i2.integration) && void 0 !== n2 ? n2 : void 0;
      }
      get integration() {
        var e2, i2;
        return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new xy(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var bN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var gN = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.installUrl = i2.installUrl, this.lastSyncId = i2.lastSyncId, this.setupUrl = i2.setupUrl, this.success = i2.success, this.webhookSecret = i2.webhookSecret, this._integration = null !== (n2 = i2.integration) && void 0 !== n2 ? n2 : void 0;
      }
      get integration() {
        var e2, i2;
        return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new xy(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var DN = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.labels = null !== (n2 = i2.labels) && void 0 !== n2 ? n2 : void 0, this.orgAvatarUrl = i2.orgAvatarUrl, this.orgLogin = i2.orgLogin, this.repositories = i2.repositories.map((i3) => new VN(e2, i3)), this.orgType = i2.orgType;
      }
    };
    var FN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.login = i2.login;
      }
    };
    var VN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.fullName = i2.fullName, this.id = i2.id;
      }
    };
    var _N = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.bidirectional = null !== (n2 = i2.bidirectional) && void 0 !== n2 ? n2 : void 0, this.default = null !== (a2 = i2.default) && void 0 !== a2 ? a2 : void 0, this.gitHubLabels = null !== (t2 = i2.gitHubLabels) && void 0 !== t2 ? t2 : void 0, this.gitHubRepoId = i2.gitHubRepoId, this.linearTeamId = i2.linearTeamId;
      }
    };
    var AN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.orgAvatarUrl = null !== (n2 = i2.orgAvatarUrl) && void 0 !== n2 ? n2 : void 0, this.orgLogin = i2.orgLogin, this.repositories = i2.repositories ? i2.repositories.map((i3) => new VN(e2, i3)) : void 0, this.repositoriesMapping = i2.repositoriesMapping ? i2.repositoriesMapping.map((i3) => new _N(e2, i3)) : void 0, this.orgType = null !== (a2 = i2.orgType) && void 0 !== a2 ? a2 : void 0;
      }
    };
    var TN = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.webhookSecret = i2.webhookSecret, this._integration = null !== (n2 = i2.integration) && void 0 !== n2 ? n2 : void 0;
      }
      get integration() {
        var e2, i2;
        return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new xy(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var wN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.expiresAt = null !== (n2 = i2.expiresAt) && void 0 !== n2 ? n2 : void 0, this.readonly = null !== (a2 = i2.readonly) && void 0 !== a2 ? a2 : void 0, this.url = null !== (t2 = i2.url) && void 0 !== t2 ? t2 : void 0;
      }
    };
    var IN = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.sheetId = i2.sheetId, this.spreadsheetId = i2.spreadsheetId, this.spreadsheetUrl = i2.spreadsheetUrl, this.updatedIssuesAt = null !== (n2 = Yc(i2.updatedIssuesAt)) && void 0 !== n2 ? n2 : void 0;
      }
    };
    var CN = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.url = null !== (n2 = i2.url) && void 0 !== n2 ? n2 : void 0;
      }
    };
    var PN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = null !== (a2 = i2.color) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.description = null !== (d2 = i2.description) && void 0 !== d2 ? d2 : void 0, this.icon = null !== (l2 = i2.icon) && void 0 !== l2 ? l2 : void 0, this.id = i2.id, this.name = i2.name, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.targetDate = null !== (m2 = i2.targetDate) && void 0 !== m2 ? m2 : void 0, this.trashed = null !== (o2 = i2.trashed) && void 0 !== o2 ? o2 : void 0, this.updatedAt = null !== (r2 = Yc(i2.updatedAt)) && void 0 !== r2 ? r2 : /* @__PURE__ */ new Date(), this.status = i2.status, this.targetDateResolution = null !== (s2 = i2.targetDateResolution) && void 0 !== s2 ? s2 : void 0, this._creator = null !== (u2 = i2.creator) && void 0 !== u2 ? u2 : void 0, this._owner = null !== (k2 = i2.owner) && void 0 !== k2 ? k2 : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      get owner() {
        var e2, i2;
        return (null === (e2 = this._owner) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._owner) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      links(e2) {
        return new b_(this._request, this.id, e2).fetch(e2);
      }
      projects(e2) {
        return new g_(this._request, this.id, e2).fetch(e2);
      }
      archive() {
        return new oD(this._request).fetch(this.id);
      }
      create(e2) {
        return new rD(this._request).fetch(e2);
      }
      delete() {
        return new sD(this._request).fetch(this.id);
      }
      unarchive() {
        return new cD(this._request).fetch(this.id);
      }
      update(e2) {
        return new vD(this._request).fetch(this.id, e2);
      }
    };
    var qN = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
      }
      get entity() {
        var e2, i2;
        return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var xN = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new PN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var jN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.commentId = null !== (a2 = i2.commentId) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.emailedAt = null !== (d2 = Yc(i2.emailedAt)) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.initiativeId = i2.initiativeId, this.parentCommentId = null !== (l2 = i2.parentCommentId) && void 0 !== l2 ? l2 : void 0, this.reactionEmoji = null !== (m2 = i2.reactionEmoji) && void 0 !== m2 ? m2 : void 0, this.readAt = null !== (o2 = Yc(i2.readAt)) && void 0 !== o2 ? o2 : void 0, this.snoozedUntilAt = null !== (r2 = Yc(i2.snoozedUntilAt)) && void 0 !== r2 ? r2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (s2 = Yc(i2.unsnoozedAt)) && void 0 !== s2 ? s2 : void 0, this.updatedAt = null !== (u2 = Yc(i2.updatedAt)) && void 0 !== u2 ? u2 : /* @__PURE__ */ new Date(), this.botActor = i2.botActor ? new ev(e2, i2.botActor) : void 0, this._actor = null !== (k2 = i2.actor) && void 0 !== k2 ? k2 : void 0, this._externalUserActor = null !== (p2 = i2.externalUserActor) && void 0 !== p2 ? p2 : void 0, this._user = i2.user;
      }
      get actor() {
        var e2, i2;
        return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get externalUserActor() {
        var e2, i2;
        return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
    };
    var ON = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (m2 = i2.customView) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = i2.initiative, this._label = null !== (r2 = i2.label) && void 0 !== r2 ? r2 : void 0, this._project = null !== (s2 = i2.project) && void 0 !== s2 ? s2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (u2 = i2.team) && void 0 !== u2 ? u2 : void 0, this._user = null !== (k2 = i2.user) && void 0 !== k2 ? k2 : void 0;
      }
      get customView() {
        var e2, i2;
        return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new cy(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get initiative() {
        return new Iy(this._request).fetch(this._initiative.id);
      }
      get label() {
        var e2, i2;
        return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new Gy(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get subscriber() {
        return new Lb(this._request).fetch(this._subscriber.id);
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var UN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._initiative = i2.initiative;
      }
      get initiative() {
        return new Iy(this._request).fetch(this._initiative.id);
      }
    };
    var BN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this._initiative = i2.initiative, this._project = i2.project;
      }
      get initiative() {
        return new Iy(this._request).fetch(this._initiative.id);
      }
      get project() {
        return new mb(this._request).fetch(this._project.id);
      }
      create(e2) {
        return new uD(this._request).fetch(e2);
      }
      delete() {
        return new kD(this._request).fetch(this.id);
      }
      update(e2) {
        return new pD(this._request).fetch(this.id, e2);
      }
    };
    var EN = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new BN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var RN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._initiativeToProject = i2.initiativeToProject;
      }
      get initiativeToProject() {
        return new Cy(this._request).fetch(this._initiativeToProject.id);
      }
    };
    var MN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.service = i2.service, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this._creator = i2.creator, this._team = null !== (d2 = i2.team) && void 0 !== d2 ? d2 : void 0;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      archive() {
        return new ND(this._request).fetch(this.id);
      }
      delete() {
        return new fD(this._request).fetch(this.id);
      }
    };
    var LN = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new MN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var zN = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.hasAllScopes = i2.hasAllScopes, this.missingScopes = null !== (n2 = i2.missingScopes) && void 0 !== n2 ? n2 : void 0;
      }
    };
    var HN = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._integration = null !== (n2 = i2.integration) && void 0 !== n2 ? n2 : void 0;
      }
      get integration() {
        var e2, i2;
        return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new xy(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var GN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var WN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.foreignEntityId = null !== (t2 = i2.foreignEntityId) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this._integration = i2.integration, this._template = i2.template;
      }
      get integration() {
        return new xy(this._request).fetch(this._integration.id);
      }
      get template() {
        return new jb(this._request).fetch(this._template.id);
      }
      create(e2) {
        return new HD(this._request).fetch(e2);
      }
      delete() {
        return new GD(this._request).fetch(this.id);
      }
    };
    var QN = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new WN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var JN = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._integrationTemplate = i2.integrationTemplate;
      }
      get integrationTemplate() {
        return new Oy(this._request).fetch(this._integrationTemplate.id);
      }
    };
    var KN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2, N2, h2, f2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.slackIssueAddedToTriage = null !== (t2 = i2.slackIssueAddedToTriage) && void 0 !== t2 ? t2 : void 0, this.slackIssueAddedToView = null !== (d2 = i2.slackIssueAddedToView) && void 0 !== d2 ? d2 : void 0, this.slackIssueCreated = null !== (l2 = i2.slackIssueCreated) && void 0 !== l2 ? l2 : void 0, this.slackIssueNewComment = null !== (m2 = i2.slackIssueNewComment) && void 0 !== m2 ? m2 : void 0, this.slackIssueSlaBreached = null !== (o2 = i2.slackIssueSlaBreached) && void 0 !== o2 ? o2 : void 0, this.slackIssueSlaHighRisk = null !== (r2 = i2.slackIssueSlaHighRisk) && void 0 !== r2 ? r2 : void 0, this.slackIssueStatusChangedAll = null !== (s2 = i2.slackIssueStatusChangedAll) && void 0 !== s2 ? s2 : void 0, this.slackIssueStatusChangedDone = null !== (u2 = i2.slackIssueStatusChangedDone) && void 0 !== u2 ? u2 : void 0, this.slackProjectUpdateCreated = null !== (k2 = i2.slackProjectUpdateCreated) && void 0 !== k2 ? k2 : void 0, this.slackProjectUpdateCreatedToTeam = null !== (p2 = i2.slackProjectUpdateCreatedToTeam) && void 0 !== p2 ? p2 : void 0, this.slackProjectUpdateCreatedToWorkspace = null !== (c2 = i2.slackProjectUpdateCreatedToWorkspace) && void 0 !== c2 ? c2 : void 0, this.updatedAt = null !== (v2 = Yc(i2.updatedAt)) && void 0 !== v2 ? v2 : /* @__PURE__ */ new Date(), this.contextViewType = null !== (N2 = i2.contextViewType) && void 0 !== N2 ? N2 : void 0, this._project = null !== (h2 = i2.project) && void 0 !== h2 ? h2 : void 0, this._team = null !== (f2 = i2.team) && void 0 !== f2 ? f2 : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      create(e2) {
        return new QD(this._request).fetch(e2);
      }
      update(e2) {
        return new JD(this._request).fetch(this.id, e2);
      }
    };
    var $N = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._integrationsSettings = i2.integrationsSettings;
      }
      get integrationsSettings() {
        return new Ey(this._request).fetch(this._integrationsSettings.id);
      }
    };
    var ZN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.automateTicketReopeningOnCancellation = null !== (n2 = i2.automateTicketReopeningOnCancellation) && void 0 !== n2 ? n2 : void 0, this.automateTicketReopeningOnComment = null !== (a2 = i2.automateTicketReopeningOnComment) && void 0 !== a2 ? a2 : void 0, this.automateTicketReopeningOnCompletion = null !== (t2 = i2.automateTicketReopeningOnCompletion) && void 0 !== t2 ? t2 : void 0, this.sendNoteOnComment = null !== (d2 = i2.sendNoteOnComment) && void 0 !== d2 ? d2 : void 0, this.sendNoteOnStatusChange = null !== (l2 = i2.sendNoteOnStatusChange) && void 0 !== l2 ? l2 : void 0;
      }
    };
    var YN = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2, N2, h2, f2, S2, y2, b2, g2, D2, F2, V2, _2, A2, T2, w2, I2, C2, P2, q2;
        super(e2), this.addedToCycleAt = null !== (n2 = Yc(i2.addedToCycleAt)) && void 0 !== n2 ? n2 : void 0, this.addedToProjectAt = null !== (a2 = Yc(i2.addedToProjectAt)) && void 0 !== a2 ? a2 : void 0, this.archivedAt = null !== (t2 = Yc(i2.archivedAt)) && void 0 !== t2 ? t2 : void 0, this.autoArchivedAt = null !== (d2 = Yc(i2.autoArchivedAt)) && void 0 !== d2 ? d2 : void 0, this.autoClosedAt = null !== (l2 = Yc(i2.autoClosedAt)) && void 0 !== l2 ? l2 : void 0, this.boardOrder = i2.boardOrder, this.branchName = i2.branchName, this.canceledAt = null !== (m2 = Yc(i2.canceledAt)) && void 0 !== m2 ? m2 : void 0, this.completedAt = null !== (o2 = Yc(i2.completedAt)) && void 0 !== o2 ? o2 : void 0, this.createdAt = null !== (r2 = Yc(i2.createdAt)) && void 0 !== r2 ? r2 : /* @__PURE__ */ new Date(), this.customerTicketCount = i2.customerTicketCount, this.description = null !== (s2 = i2.description) && void 0 !== s2 ? s2 : void 0, this.dueDate = null !== (u2 = i2.dueDate) && void 0 !== u2 ? u2 : void 0, this.estimate = null !== (k2 = i2.estimate) && void 0 !== k2 ? k2 : void 0, this.id = i2.id, this.identifier = i2.identifier, this.labelIds = i2.labelIds, this.number = i2.number, this.previousIdentifiers = i2.previousIdentifiers, this.priority = i2.priority, this.priorityLabel = i2.priorityLabel, this.reactionData = i2.reactionData, this.slaBreachesAt = null !== (p2 = Yc(i2.slaBreachesAt)) && void 0 !== p2 ? p2 : void 0, this.slaStartedAt = null !== (c2 = Yc(i2.slaStartedAt)) && void 0 !== c2 ? c2 : void 0, this.snoozedUntilAt = null !== (v2 = Yc(i2.snoozedUntilAt)) && void 0 !== v2 ? v2 : void 0, this.sortOrder = i2.sortOrder, this.startedAt = null !== (N2 = Yc(i2.startedAt)) && void 0 !== N2 ? N2 : void 0, this.startedTriageAt = null !== (h2 = Yc(i2.startedTriageAt)) && void 0 !== h2 ? h2 : void 0, this.subIssueSortOrder = null !== (f2 = i2.subIssueSortOrder) && void 0 !== f2 ? f2 : void 0, this.title = i2.title, this.trashed = null !== (S2 = i2.trashed) && void 0 !== S2 ? S2 : void 0, this.triagedAt = null !== (y2 = Yc(i2.triagedAt)) && void 0 !== y2 ? y2 : void 0, this.updatedAt = null !== (b2 = Yc(i2.updatedAt)) && void 0 !== b2 ? b2 : /* @__PURE__ */ new Date(), this.url = i2.url, this.botActor = i2.botActor ? new ev(e2, i2.botActor) : void 0, this.reactions = i2.reactions.map((i3) => new Hf(e2, i3)), this.integrationSourceType = null !== (g2 = i2.integrationSourceType) && void 0 !== g2 ? g2 : void 0, this._assignee = null !== (D2 = i2.assignee) && void 0 !== D2 ? D2 : void 0, this._creator = null !== (F2 = i2.creator) && void 0 !== F2 ? F2 : void 0, this._cycle = null !== (V2 = i2.cycle) && void 0 !== V2 ? V2 : void 0, this._externalUserCreator = null !== (_2 = i2.externalUserCreator) && void 0 !== _2 ? _2 : void 0, this._favorite = null !== (A2 = i2.favorite) && void 0 !== A2 ? A2 : void 0, this._lastAppliedTemplate = null !== (T2 = i2.lastAppliedTemplate) && void 0 !== T2 ? T2 : void 0, this._parent = null !== (w2 = i2.parent) && void 0 !== w2 ? w2 : void 0, this._project = null !== (I2 = i2.project) && void 0 !== I2 ? I2 : void 0, this._projectMilestone = null !== (C2 = i2.projectMilestone) && void 0 !== C2 ? C2 : void 0, this._snoozedBy = null !== (P2 = i2.snoozedBy) && void 0 !== P2 ? P2 : void 0, this._sourceComment = null !== (q2 = i2.sourceComment) && void 0 !== q2 ? q2 : void 0, this._state = i2.state, this._team = i2.team;
      }
      get assignee() {
        var e2, i2;
        return (null === (e2 = this._assignee) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._assignee) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get externalUserCreator() {
        var e2, i2;
        return (null === (e2 = this._externalUserCreator) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUserCreator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get favorite() {
        var e2, i2;
        return (null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id) ? new Ty(this._request).fetch(null === (i2 = this._favorite) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get lastAppliedTemplate() {
        var e2, i2;
        return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new jb(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get parent() {
        var e2, i2;
        return (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._parent) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get projectMilestone() {
        var e2, i2;
        return (null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id) ? new ub(this._request).fetch(null === (i2 = this._projectMilestone) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get snoozedBy() {
        var e2, i2;
        return (null === (e2 = this._snoozedBy) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._snoozedBy) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get sourceComment() {
        var e2, i2;
        return (null === (e2 = this._sourceComment) || void 0 === e2 ? void 0 : e2.id) ? new ky(this._request).fetch({ id: null === (i2 = this._sourceComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
      }
      get state() {
        return new Kb(this._request).fetch(this._state.id);
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
      attachments(e2) {
        return new D_(this._request, this.id, e2).fetch(e2);
      }
      children(e2) {
        return new F_(this._request, this.id, e2).fetch(e2);
      }
      comments(e2) {
        return new V_(this._request, this.id, e2).fetch(e2);
      }
      history(e2) {
        return new __(this._request, this.id, e2).fetch(e2);
      }
      inverseRelations(e2) {
        return new A_(this._request, this.id, e2).fetch(e2);
      }
      labels(e2) {
        return new T_(this._request, this.id, e2).fetch(e2);
      }
      relations(e2) {
        return new w_(this._request, this.id, e2).fetch(e2);
      }
      subscribers(e2) {
        return new I_(this._request, this.id, e2).fetch(e2);
      }
      archive(e2) {
        return new $D(this._request).fetch(this.id, e2);
      }
      create(e2) {
        return new YD(this._request).fetch(e2);
      }
      delete(e2) {
        return new XD(this._request).fetch(this.id, e2);
      }
      unarchive() {
        return new bF(this._request).fetch(this.id);
      }
      update(e2) {
        return new DF(this._request).fetch(this.id, e2);
      }
    };
    var XN = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
      }
      get entity() {
        var e2, i2;
        return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var eh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.issues = i2.issues.map((i3) => new YN(e2, i3));
      }
    };
    var ih = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new YN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var nh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    };
    var ah = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    };
    var th = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.filter = null !== (n2 = i2.filter) && void 0 !== n2 ? n2 : void 0;
      }
    };
    var dh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2, N2, h2, f2, S2, y2, b2, g2, D2, F2, V2, _2, A2, T2, w2, I2, C2, P2, q2, x2, j2, O2, U2, B2, E2, R2, M2, L2, z2, H2, G2, W2, Q2, J2, K2;
        super(e2), this.actorId = null !== (n2 = i2.actorId) && void 0 !== n2 ? n2 : void 0, this.addedLabelIds = null !== (a2 = i2.addedLabelIds) && void 0 !== a2 ? a2 : void 0, this.archived = null !== (t2 = i2.archived) && void 0 !== t2 ? t2 : void 0, this.archivedAt = null !== (d2 = Yc(i2.archivedAt)) && void 0 !== d2 ? d2 : void 0, this.attachmentId = null !== (l2 = i2.attachmentId) && void 0 !== l2 ? l2 : void 0, this.autoArchived = null !== (m2 = i2.autoArchived) && void 0 !== m2 ? m2 : void 0, this.autoClosed = null !== (o2 = i2.autoClosed) && void 0 !== o2 ? o2 : void 0, this.createdAt = null !== (r2 = Yc(i2.createdAt)) && void 0 !== r2 ? r2 : /* @__PURE__ */ new Date(), this.fromAssigneeId = null !== (s2 = i2.fromAssigneeId) && void 0 !== s2 ? s2 : void 0, this.fromCycleId = null !== (u2 = i2.fromCycleId) && void 0 !== u2 ? u2 : void 0, this.fromDueDate = null !== (k2 = i2.fromDueDate) && void 0 !== k2 ? k2 : void 0, this.fromEstimate = null !== (p2 = i2.fromEstimate) && void 0 !== p2 ? p2 : void 0, this.fromParentId = null !== (c2 = i2.fromParentId) && void 0 !== c2 ? c2 : void 0, this.fromPriority = null !== (v2 = i2.fromPriority) && void 0 !== v2 ? v2 : void 0, this.fromProjectId = null !== (N2 = i2.fromProjectId) && void 0 !== N2 ? N2 : void 0, this.fromStateId = null !== (h2 = i2.fromStateId) && void 0 !== h2 ? h2 : void 0, this.fromTeamId = null !== (f2 = i2.fromTeamId) && void 0 !== f2 ? f2 : void 0, this.fromTitle = null !== (S2 = i2.fromTitle) && void 0 !== S2 ? S2 : void 0, this.id = i2.id, this.removedLabelIds = null !== (y2 = i2.removedLabelIds) && void 0 !== y2 ? y2 : void 0, this.toAssigneeId = null !== (b2 = i2.toAssigneeId) && void 0 !== b2 ? b2 : void 0, this.toConvertedProjectId = null !== (g2 = i2.toConvertedProjectId) && void 0 !== g2 ? g2 : void 0, this.toCycleId = null !== (D2 = i2.toCycleId) && void 0 !== D2 ? D2 : void 0, this.toDueDate = null !== (F2 = i2.toDueDate) && void 0 !== F2 ? F2 : void 0, this.toEstimate = null !== (V2 = i2.toEstimate) && void 0 !== V2 ? V2 : void 0, this.toParentId = null !== (_2 = i2.toParentId) && void 0 !== _2 ? _2 : void 0, this.toPriority = null !== (A2 = i2.toPriority) && void 0 !== A2 ? A2 : void 0, this.toProjectId = null !== (T2 = i2.toProjectId) && void 0 !== T2 ? T2 : void 0, this.toStateId = null !== (w2 = i2.toStateId) && void 0 !== w2 ? w2 : void 0, this.toTeamId = null !== (I2 = i2.toTeamId) && void 0 !== I2 ? I2 : void 0, this.toTitle = null !== (C2 = i2.toTitle) && void 0 !== C2 ? C2 : void 0, this.trashed = null !== (P2 = i2.trashed) && void 0 !== P2 ? P2 : void 0, this.updatedAt = null !== (q2 = Yc(i2.updatedAt)) && void 0 !== q2 ? q2 : /* @__PURE__ */ new Date(), this.updatedDescription = null !== (x2 = i2.updatedDescription) && void 0 !== x2 ? x2 : void 0, this.botActor = i2.botActor ? new ev(e2, i2.botActor) : void 0, this.issueImport = i2.issueImport ? new mh(e2, i2.issueImport) : void 0, this.actors = i2.actors ? i2.actors.map((i3) => new wS(e2, i3)) : void 0, this.addedLabels = i2.addedLabels ? i2.addedLabels.map((i3) => new kh(e2, i3)) : void 0, this.relationChanges = i2.relationChanges ? i2.relationChanges.map((i3) => new yh(e2, i3)) : void 0, this.removedLabels = i2.removedLabels ? i2.removedLabels.map((i3) => new kh(e2, i3)) : void 0, this.triageResponsibilityNotifiedUsers = i2.triageResponsibilityNotifiedUsers ? i2.triageResponsibilityNotifiedUsers.map((i3) => new wS(e2, i3)) : void 0, this._actor = null !== (j2 = i2.actor) && void 0 !== j2 ? j2 : void 0, this._attachment = null !== (O2 = i2.attachment) && void 0 !== O2 ? O2 : void 0, this._fromAssignee = null !== (U2 = i2.fromAssignee) && void 0 !== U2 ? U2 : void 0, this._fromCycle = null !== (B2 = i2.fromCycle) && void 0 !== B2 ? B2 : void 0, this._fromParent = null !== (E2 = i2.fromParent) && void 0 !== E2 ? E2 : void 0, this._fromProject = null !== (R2 = i2.fromProject) && void 0 !== R2 ? R2 : void 0, this._fromState = null !== (M2 = i2.fromState) && void 0 !== M2 ? M2 : void 0, this._fromTeam = null !== (L2 = i2.fromTeam) && void 0 !== L2 ? L2 : void 0, this._issue = i2.issue, this._toAssignee = null !== (z2 = i2.toAssignee) && void 0 !== z2 ? z2 : void 0, this._toConvertedProject = null !== (H2 = i2.toConvertedProject) && void 0 !== H2 ? H2 : void 0, this._toCycle = null !== (G2 = i2.toCycle) && void 0 !== G2 ? G2 : void 0, this._toParent = null !== (W2 = i2.toParent) && void 0 !== W2 ? W2 : void 0, this._toProject = null !== (Q2 = i2.toProject) && void 0 !== Q2 ? Q2 : void 0, this._toState = null !== (J2 = i2.toState) && void 0 !== J2 ? J2 : void 0, this._toTeam = null !== (K2 = i2.toTeam) && void 0 !== K2 ? K2 : void 0;
      }
      get actor() {
        var e2, i2;
        return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get attachment() {
        var e2, i2;
        return (null === (e2 = this._attachment) || void 0 === e2 ? void 0 : e2.id) ? new ty(this._request).fetch(null === (i2 = this._attachment) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get fromAssignee() {
        var e2, i2;
        return (null === (e2 = this._fromAssignee) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._fromAssignee) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get fromCycle() {
        var e2, i2;
        return (null === (e2 = this._fromCycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._fromCycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get fromParent() {
        var e2, i2;
        return (null === (e2 = this._fromParent) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._fromParent) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get fromProject() {
        var e2, i2;
        return (null === (e2 = this._fromProject) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._fromProject) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get fromState() {
        var e2, i2;
        return (null === (e2 = this._fromState) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._fromState) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get fromTeam() {
        var e2, i2;
        return (null === (e2 = this._fromTeam) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._fromTeam) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get issue() {
        return new Ry(this._request).fetch(this._issue.id);
      }
      get toAssignee() {
        var e2, i2;
        return (null === (e2 = this._toAssignee) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._toAssignee) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get toConvertedProject() {
        var e2, i2;
        return (null === (e2 = this._toConvertedProject) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._toConvertedProject) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get toCycle() {
        var e2, i2;
        return (null === (e2 = this._toCycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._toCycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get toParent() {
        var e2, i2;
        return (null === (e2 = this._toParent) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._toParent) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get toProject() {
        var e2, i2;
        return (null === (e2 = this._toProject) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._toProject) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get toState() {
        var e2, i2;
        return (null === (e2 = this._toState) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._toState) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get toTeam() {
        var e2, i2;
        return (null === (e2 = this._toTeam) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._toTeam) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var lh = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new dh(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var mh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.creatorId = i2.creatorId, this.csvFileUrl = null !== (t2 = i2.csvFileUrl) && void 0 !== t2 ? t2 : void 0, this.displayName = i2.displayName, this.error = null !== (d2 = i2.error) && void 0 !== d2 ? d2 : void 0, this.errorMetadata = null !== (l2 = i2.errorMetadata) && void 0 !== l2 ? l2 : void 0, this.id = i2.id, this.mapping = null !== (m2 = i2.mapping) && void 0 !== m2 ? m2 : void 0, this.progress = null !== (o2 = i2.progress) && void 0 !== o2 ? o2 : void 0, this.service = i2.service, this.serviceMetadata = null !== (r2 = i2.serviceMetadata) && void 0 !== r2 ? r2 : void 0, this.status = i2.status, this.teamName = null !== (s2 = i2.teamName) && void 0 !== s2 ? s2 : void 0, this.updatedAt = null !== (u2 = Yc(i2.updatedAt)) && void 0 !== u2 ? u2 : /* @__PURE__ */ new Date();
      }
      delete(e2) {
        return new rF(this._request).fetch(e2);
      }
      update(e2) {
        return new uF(this._request).fetch(this.id, e2);
      }
    };
    var oh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var rh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.issueImport = i2.issueImport ? new mh(e2, i2.issueImport) : void 0;
      }
    };
    var sh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.issueImport = i2.issueImport ? new mh(e2, i2.issueImport) : void 0;
      }
    };
    var uh = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.canSync = i2.canSync, this.error = null !== (n2 = i2.error) && void 0 !== n2 ? n2 : void 0;
      }
    };
    var kh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = i2.color, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.isGroup = i2.isGroup, this.name = i2.name, this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this._creator = null !== (l2 = i2.creator) && void 0 !== l2 ? l2 : void 0, this._parent = null !== (m2 = i2.parent) && void 0 !== m2 ? m2 : void 0, this._team = null !== (o2 = i2.team) && void 0 !== o2 ? o2 : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      get parent() {
        var e2, i2;
        return (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id) ? new Gy(this._request).fetch(null === (i2 = this._parent) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      children(e2) {
        return new C_(this._request, this.id, e2).fetch(e2);
      }
      issues(e2) {
        return new P_(this._request, this.id, e2).fetch(e2);
      }
      create(e2, i2) {
        return new kF(this._request).fetch(e2, i2);
      }
      delete() {
        return new pF(this._request).fetch(this.id);
      }
      update(e2, i2) {
        return new cF(this._request).fetch(this.id, e2, i2);
      }
    };
    var ph = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new kh(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var ch = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._issueLabel = i2.issueLabel;
      }
      get issueLabel() {
        return new Gy(this._request).fetch(this._issueLabel.id);
      }
    };
    var vh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.commentId = null !== (a2 = i2.commentId) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.emailedAt = null !== (d2 = Yc(i2.emailedAt)) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.issueId = i2.issueId, this.parentCommentId = null !== (l2 = i2.parentCommentId) && void 0 !== l2 ? l2 : void 0, this.reactionEmoji = null !== (m2 = i2.reactionEmoji) && void 0 !== m2 ? m2 : void 0, this.readAt = null !== (o2 = Yc(i2.readAt)) && void 0 !== o2 ? o2 : void 0, this.snoozedUntilAt = null !== (r2 = Yc(i2.snoozedUntilAt)) && void 0 !== r2 ? r2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (s2 = Yc(i2.unsnoozedAt)) && void 0 !== s2 ? s2 : void 0, this.updatedAt = null !== (u2 = Yc(i2.updatedAt)) && void 0 !== u2 ? u2 : /* @__PURE__ */ new Date(), this.botActor = i2.botActor ? new ev(e2, i2.botActor) : void 0, this.subscriptions = i2.subscriptions ? i2.subscriptions.map((i3) => new Rh(e2, i3)) : void 0, this._actor = null !== (k2 = i2.actor) && void 0 !== k2 ? k2 : void 0, this._comment = null !== (p2 = i2.comment) && void 0 !== p2 ? p2 : void 0, this._externalUserActor = null !== (c2 = i2.externalUserActor) && void 0 !== c2 ? c2 : void 0, this._issue = i2.issue, this._parentComment = null !== (v2 = i2.parentComment) && void 0 !== v2 ? v2 : void 0, this._team = i2.team, this._user = i2.user;
      }
      get actor() {
        var e2, i2;
        return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get comment() {
        var e2, i2;
        return (null === (e2 = this._comment) || void 0 === e2 ? void 0 : e2.id) ? new ky(this._request).fetch({ id: null === (i2 = this._comment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
      }
      get externalUserActor() {
        var e2, i2;
        return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get issue() {
        return new Ry(this._request).fetch(this._issue.id);
      }
      get parentComment() {
        var e2, i2;
        return (null === (e2 = this._parentComment) || void 0 === e2 ? void 0 : e2.id) ? new ky(this._request).fetch({ id: null === (i2 = this._parentComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
    };
    var Nh = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._issue = null !== (n2 = i2.issue) && void 0 !== n2 ? n2 : void 0;
      }
      get issue() {
        var e2, i2;
        return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var hh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.label = i2.label, this.priority = i2.priority;
      }
    };
    var fh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.type = i2.type, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this._issue = i2.issue, this._relatedIssue = i2.relatedIssue;
      }
      get issue() {
        return new Ry(this._request).fetch(this._issue.id);
      }
      get relatedIssue() {
        return new Ry(this._request).fetch(this._relatedIssue.id);
      }
      create(e2, i2) {
        return new vF(this._request).fetch(e2, i2);
      }
      delete() {
        return new NF(this._request).fetch(this.id);
      }
      update(e2) {
        return new hF(this._request).fetch(this.id, e2);
      }
    };
    var Sh = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new fh(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var yh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.identifier = i2.identifier, this.type = i2.type;
      }
    };
    var bh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._issueRelation = i2.issueRelation;
      }
      get issueRelation() {
        return new Jy(this._request).fetch(this._issueRelation.id);
      }
    };
    var gh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.totalCount = i2.totalCount, this.archivePayload = new tv(e2, i2.archivePayload), this.pageInfo = new lf(e2, i2.pageInfo), this.nodes = i2.nodes.map((i3) => new Dh(e2, i3));
      }
    };
    var Dh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2, N2, h2, f2, S2, y2, b2, g2, D2, F2, V2, _2, A2, T2, w2, I2, C2, P2, q2;
        super(e2), this.addedToCycleAt = null !== (n2 = Yc(i2.addedToCycleAt)) && void 0 !== n2 ? n2 : void 0, this.addedToProjectAt = null !== (a2 = Yc(i2.addedToProjectAt)) && void 0 !== a2 ? a2 : void 0, this.archivedAt = null !== (t2 = Yc(i2.archivedAt)) && void 0 !== t2 ? t2 : void 0, this.autoArchivedAt = null !== (d2 = Yc(i2.autoArchivedAt)) && void 0 !== d2 ? d2 : void 0, this.autoClosedAt = null !== (l2 = Yc(i2.autoClosedAt)) && void 0 !== l2 ? l2 : void 0, this.boardOrder = i2.boardOrder, this.branchName = i2.branchName, this.canceledAt = null !== (m2 = Yc(i2.canceledAt)) && void 0 !== m2 ? m2 : void 0, this.completedAt = null !== (o2 = Yc(i2.completedAt)) && void 0 !== o2 ? o2 : void 0, this.createdAt = null !== (r2 = Yc(i2.createdAt)) && void 0 !== r2 ? r2 : /* @__PURE__ */ new Date(), this.customerTicketCount = i2.customerTicketCount, this.description = null !== (s2 = i2.description) && void 0 !== s2 ? s2 : void 0, this.dueDate = null !== (u2 = i2.dueDate) && void 0 !== u2 ? u2 : void 0, this.estimate = null !== (k2 = i2.estimate) && void 0 !== k2 ? k2 : void 0, this.id = i2.id, this.identifier = i2.identifier, this.labelIds = i2.labelIds, this.metadata = i2.metadata, this.number = i2.number, this.previousIdentifiers = i2.previousIdentifiers, this.priority = i2.priority, this.priorityLabel = i2.priorityLabel, this.reactionData = i2.reactionData, this.slaBreachesAt = null !== (p2 = Yc(i2.slaBreachesAt)) && void 0 !== p2 ? p2 : void 0, this.slaStartedAt = null !== (c2 = Yc(i2.slaStartedAt)) && void 0 !== c2 ? c2 : void 0, this.snoozedUntilAt = null !== (v2 = Yc(i2.snoozedUntilAt)) && void 0 !== v2 ? v2 : void 0, this.sortOrder = i2.sortOrder, this.startedAt = null !== (N2 = Yc(i2.startedAt)) && void 0 !== N2 ? N2 : void 0, this.startedTriageAt = null !== (h2 = Yc(i2.startedTriageAt)) && void 0 !== h2 ? h2 : void 0, this.subIssueSortOrder = null !== (f2 = i2.subIssueSortOrder) && void 0 !== f2 ? f2 : void 0, this.title = i2.title, this.trashed = null !== (S2 = i2.trashed) && void 0 !== S2 ? S2 : void 0, this.triagedAt = null !== (y2 = Yc(i2.triagedAt)) && void 0 !== y2 ? y2 : void 0, this.updatedAt = null !== (b2 = Yc(i2.updatedAt)) && void 0 !== b2 ? b2 : /* @__PURE__ */ new Date(), this.url = i2.url, this.botActor = i2.botActor ? new ev(e2, i2.botActor) : void 0, this.reactions = i2.reactions.map((i3) => new Hf(e2, i3)), this.integrationSourceType = null !== (g2 = i2.integrationSourceType) && void 0 !== g2 ? g2 : void 0, this._assignee = null !== (D2 = i2.assignee) && void 0 !== D2 ? D2 : void 0, this._creator = null !== (F2 = i2.creator) && void 0 !== F2 ? F2 : void 0, this._cycle = null !== (V2 = i2.cycle) && void 0 !== V2 ? V2 : void 0, this._externalUserCreator = null !== (_2 = i2.externalUserCreator) && void 0 !== _2 ? _2 : void 0, this._favorite = null !== (A2 = i2.favorite) && void 0 !== A2 ? A2 : void 0, this._lastAppliedTemplate = null !== (T2 = i2.lastAppliedTemplate) && void 0 !== T2 ? T2 : void 0, this._parent = null !== (w2 = i2.parent) && void 0 !== w2 ? w2 : void 0, this._project = null !== (I2 = i2.project) && void 0 !== I2 ? I2 : void 0, this._projectMilestone = null !== (C2 = i2.projectMilestone) && void 0 !== C2 ? C2 : void 0, this._snoozedBy = null !== (P2 = i2.snoozedBy) && void 0 !== P2 ? P2 : void 0, this._sourceComment = null !== (q2 = i2.sourceComment) && void 0 !== q2 ? q2 : void 0, this._state = i2.state, this._team = i2.team;
      }
      get assignee() {
        var e2, i2;
        return (null === (e2 = this._assignee) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._assignee) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get externalUserCreator() {
        var e2, i2;
        return (null === (e2 = this._externalUserCreator) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUserCreator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get favorite() {
        var e2, i2;
        return (null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id) ? new Ty(this._request).fetch(null === (i2 = this._favorite) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get lastAppliedTemplate() {
        var e2, i2;
        return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new jb(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get parent() {
        var e2, i2;
        return (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._parent) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get projectMilestone() {
        var e2, i2;
        return (null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id) ? new ub(this._request).fetch(null === (i2 = this._projectMilestone) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get snoozedBy() {
        var e2, i2;
        return (null === (e2 = this._snoozedBy) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._snoozedBy) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get sourceComment() {
        var e2, i2;
        return (null === (e2 = this._sourceComment) || void 0 === e2 ? void 0 : e2.id) ? new ky(this._request).fetch({ id: null === (i2 = this._sourceComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
      }
      get state() {
        return new Kb(this._request).fetch(this._state.id);
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
    };
    var Fh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.bidirectional = null !== (n2 = i2.bidirectional) && void 0 !== n2 ? n2 : void 0, this.default = null !== (a2 = i2.default) && void 0 !== a2 ? a2 : void 0, this.jiraProjectId = i2.jiraProjectId, this.linearTeamId = i2.linearTeamId;
      }
    };
    var Vh = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.siteName = null !== (n2 = i2.siteName) && void 0 !== n2 ? n2 : void 0;
      }
    };
    var _h = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.id = i2.id, this.key = i2.key, this.name = i2.name;
      }
    };
    var Ah = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.isJiraServer = null !== (n2 = i2.isJiraServer) && void 0 !== n2 ? n2 : void 0, this.manualSetup = null !== (a2 = i2.manualSetup) && void 0 !== a2 ? a2 : void 0, this.setupPending = null !== (t2 = i2.setupPending) && void 0 !== t2 ? t2 : void 0, this.projectMapping = i2.projectMapping ? i2.projectMapping.map((i3) => new Fh(e2, i3)) : void 0, this.projects = i2.projects.map((i3) => new _h(e2, i3));
      }
    };
    var Th = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (m2 = i2.customView) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (r2 = i2.initiative) && void 0 !== r2 ? r2 : void 0, this._label = i2.label, this._project = null !== (s2 = i2.project) && void 0 !== s2 ? s2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (u2 = i2.team) && void 0 !== u2 ? u2 : void 0, this._user = null !== (k2 = i2.user) && void 0 !== k2 ? k2 : void 0;
      }
      get customView() {
        var e2, i2;
        return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new cy(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get initiative() {
        var e2, i2;
        return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get label() {
        return new Gy(this._request).fetch(this._label.id);
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get subscriber() {
        return new Lb(this._request).fetch(this._subscriber.id);
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var wh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.environment = i2.environment, this.projectKey = i2.projectKey;
      }
    };
    var Ih = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var Ch = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.emailedAt = null !== (t2 = Yc(i2.emailedAt)) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.readAt = null !== (d2 = Yc(i2.readAt)) && void 0 !== d2 ? d2 : void 0, this.snoozedUntilAt = null !== (l2 = Yc(i2.snoozedUntilAt)) && void 0 !== l2 ? l2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (m2 = Yc(i2.unsnoozedAt)) && void 0 !== m2 ? m2 : void 0, this.updatedAt = null !== (o2 = Yc(i2.updatedAt)) && void 0 !== o2 ? o2 : /* @__PURE__ */ new Date(), this.botActor = i2.botActor ? new ev(e2, i2.botActor) : void 0, this._actor = null !== (r2 = i2.actor) && void 0 !== r2 ? r2 : void 0, this._externalUserActor = null !== (s2 = i2.externalUserActor) && void 0 !== s2 ? s2 : void 0, this._user = i2.user;
      }
      get actor() {
        var e2, i2;
        return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get externalUserActor() {
        var e2, i2;
        return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
      archive() {
        return new IF(this._request).fetch(this.id);
      }
      unarchive() {
        return new BF(this._request).fetch(this.id);
      }
      update(e2) {
        return new RF(this._request).fetch(this.id, e2);
      }
    };
    var Ph = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    };
    var qh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.notifications = i2.notifications.map((i3) => new Ch(e2, i3));
      }
    };
    var xh = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => {
          switch (i3.__typename) {
            case "DocumentNotification":
              return new Hv(e2, i3);
            case "InitiativeNotification":
              return new jN(e2, i3);
            case "IssueNotification":
              return new vh(e2, i3);
            case "OauthClientApprovalNotification":
              return new Wh(e2, i3);
            case "ProjectNotification":
              return new Df(e2, i3);
            default:
              return new Ch(e2, i3);
          }
        }), new lf(e2, n2.pageInfo));
      }
    };
    var jh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.mobile = i2.mobile ? new Oh(e2, i2.mobile) : void 0;
      }
    };
    var Oh = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.notificationsDisabled = null !== (n2 = i2.notificationsDisabled) && void 0 !== n2 ? n2 : void 0, this.schedule = i2.schedule ? new Bh(e2, i2.schedule) : void 0;
      }
    };
    var Uh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.end = null !== (n2 = i2.end) && void 0 !== n2 ? n2 : void 0, this.start = null !== (a2 = i2.start) && void 0 !== a2 ? a2 : void 0;
      }
    };
    var Bh = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.disabled = null !== (n2 = i2.disabled) && void 0 !== n2 ? n2 : void 0, this.friday = new Uh(e2, i2.friday), this.monday = new Uh(e2, i2.monday), this.saturday = new Uh(e2, i2.saturday), this.sunday = new Uh(e2, i2.sunday), this.thursday = new Uh(e2, i2.thursday), this.tuesday = new Uh(e2, i2.tuesday), this.wednesday = new Uh(e2, i2.wednesday);
      }
    };
    var Eh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    };
    var Rh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2;
        super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (m2 = i2.customView) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (r2 = i2.initiative) && void 0 !== r2 ? r2 : void 0, this._label = null !== (s2 = i2.label) && void 0 !== s2 ? s2 : void 0, this._project = null !== (u2 = i2.project) && void 0 !== u2 ? u2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (k2 = i2.team) && void 0 !== k2 ? k2 : void 0, this._user = null !== (p2 = i2.user) && void 0 !== p2 ? p2 : void 0;
      }
      get customView() {
        var e2, i2;
        return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new cy(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get initiative() {
        var e2, i2;
        return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get label() {
        var e2, i2;
        return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new Gy(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get subscriber() {
        return new Lb(this._request).fetch(this._subscriber.id);
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      create(e2) {
        return new jF(this._request).fetch(e2);
      }
      delete() {
        return new OF(this._request).fetch(this.id);
      }
      update(e2) {
        return new UF(this._request).fetch(this.id, e2);
      }
    };
    var Mh = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => {
          switch (i3.__typename) {
            case "CustomViewNotificationSubscription":
              return new Tv(e2, i3);
            case "CycleNotificationSubscription":
              return new qv(e2, i3);
            case "InitiativeNotificationSubscription":
              return new ON(e2, i3);
            case "LabelNotificationSubscription":
              return new Th(e2, i3);
            case "ProjectNotificationSubscription":
              return new Ff(e2, i3);
            case "TeamNotificationSubscription":
              return new pS(e2, i3);
            case "UserNotificationSubscription":
              return new qS(e2, i3);
            default:
              return new Rh(e2, i3);
          }
        }), new lf(e2, n2.pageInfo));
      }
    };
    var Lh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    };
    var zh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.workspaceId = i2.workspaceId, this.workspaceName = i2.workspaceName;
      }
    };
    var Hh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.clientId = i2.clientId, this.clientSecret = i2.clientSecret, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.developer = i2.developer, this.developerUrl = i2.developerUrl, this.id = i2.id, this.imageUrl = null !== (d2 = i2.imageUrl) && void 0 !== d2 ? d2 : void 0, this.name = i2.name, this.publicEnabled = i2.publicEnabled, this.redirectUris = i2.redirectUris, this.updatedAt = null !== (l2 = Yc(i2.updatedAt)) && void 0 !== l2 ? l2 : /* @__PURE__ */ new Date(), this.webhookResourceTypes = i2.webhookResourceTypes, this.webhookSecret = null !== (m2 = i2.webhookSecret) && void 0 !== m2 ? m2 : void 0, this.webhookUrl = null !== (o2 = i2.webhookUrl) && void 0 !== o2 ? o2 : void 0, this._creator = i2.creator;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get organization() {
        return new ab(this._request).fetch();
      }
    };
    var Gh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.denyReason = null !== (t2 = i2.denyReason) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.oauthClientId = i2.oauthClientId, this.requestReason = null !== (d2 = i2.requestReason) && void 0 !== d2 ? d2 : void 0, this.requesterId = i2.requesterId, this.responderId = null !== (l2 = i2.responderId) && void 0 !== l2 ? l2 : void 0, this.scopes = i2.scopes, this.updatedAt = null !== (m2 = Yc(i2.updatedAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this.status = i2.status;
      }
    };
    var Wh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.emailedAt = null !== (t2 = Yc(i2.emailedAt)) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.oauthClientApprovalId = i2.oauthClientApprovalId, this.readAt = null !== (d2 = Yc(i2.readAt)) && void 0 !== d2 ? d2 : void 0, this.snoozedUntilAt = null !== (l2 = Yc(i2.snoozedUntilAt)) && void 0 !== l2 ? l2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (m2 = Yc(i2.unsnoozedAt)) && void 0 !== m2 ? m2 : void 0, this.updatedAt = null !== (o2 = Yc(i2.updatedAt)) && void 0 !== o2 ? o2 : /* @__PURE__ */ new Date(), this.botActor = i2.botActor ? new ev(e2, i2.botActor) : void 0, this.oauthClientApproval = new Gh(e2, i2.oauthClientApproval), this._actor = null !== (r2 = i2.actor) && void 0 !== r2 ? r2 : void 0, this._externalUserActor = null !== (s2 = i2.externalUserActor) && void 0 !== s2 ? s2 : void 0, this._user = i2.user;
      }
      get actor() {
        var e2, i2;
        return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get externalUserActor() {
        var e2, i2;
        return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
    };
    var Qh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.clientId = i2.clientId, this.createdAt = null !== (n2 = Yc(i2.createdAt)) && void 0 !== n2 ? n2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.revokedAt = null !== (a2 = Yc(i2.revokedAt)) && void 0 !== a2 ? a2 : void 0, this.scope = i2.scope, this.userId = i2.userId, this.client = new cv(e2, i2.client), this.user = new hv(e2, i2.user);
      }
    };
    var Jh = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.apiFailedWithUnauthorizedErrorAt = null !== (n2 = Yc(i2.apiFailedWithUnauthorizedErrorAt)) && void 0 !== n2 ? n2 : void 0;
      }
    };
    var Kh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2;
        super(e2), this.allowMembersToInvite = null !== (n2 = i2.allowMembersToInvite) && void 0 !== n2 ? n2 : void 0, this.allowedAuthServices = i2.allowedAuthServices, this.archivedAt = null !== (a2 = Yc(i2.archivedAt)) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.createdIssueCount = i2.createdIssueCount, this.deletionRequestedAt = null !== (d2 = Yc(i2.deletionRequestedAt)) && void 0 !== d2 ? d2 : void 0, this.fiscalYearStartMonth = i2.fiscalYearStartMonth, this.gitBranchFormat = null !== (l2 = i2.gitBranchFormat) && void 0 !== l2 ? l2 : void 0, this.gitLinkbackMessagesEnabled = i2.gitLinkbackMessagesEnabled, this.gitPublicLinkbackMessagesEnabled = i2.gitPublicLinkbackMessagesEnabled, this.id = i2.id, this.logoUrl = null !== (m2 = i2.logoUrl) && void 0 !== m2 ? m2 : void 0, this.name = i2.name, this.periodUploadVolume = i2.periodUploadVolume, this.previousUrlKeys = i2.previousUrlKeys, this.projectUpdateReminderFrequencyInWeeks = null !== (o2 = i2.projectUpdateReminderFrequencyInWeeks) && void 0 !== o2 ? o2 : void 0, this.projectUpdateRemindersHour = i2.projectUpdateRemindersHour, this.roadmapEnabled = i2.roadmapEnabled, this.samlEnabled = i2.samlEnabled, this.scimEnabled = i2.scimEnabled, this.trialEndsAt = null !== (r2 = Yc(i2.trialEndsAt)) && void 0 !== r2 ? r2 : void 0, this.updatedAt = null !== (s2 = Yc(i2.updatedAt)) && void 0 !== s2 ? s2 : /* @__PURE__ */ new Date(), this.urlKey = i2.urlKey, this.userCount = i2.userCount, this.subscription = i2.subscription ? new of5(e2, i2.subscription) : void 0, this.ipRestrictions = i2.ipRestrictions ? i2.ipRestrictions.map((i3) => new af(e2, i3)) : void 0, this.projectStatuses = i2.projectStatuses.map((i3) => new If(e2, i3)), this.projectUpdateRemindersDay = i2.projectUpdateRemindersDay, this.projectUpdatesReminderFrequency = i2.projectUpdatesReminderFrequency, this.releaseChannel = i2.releaseChannel, this.slaDayCount = i2.slaDayCount;
      }
      integrations(e2) {
        return new q_(this._request, e2).fetch(e2);
      }
      labels(e2) {
        return new x_(this._request, e2).fetch(e2);
      }
      teams(e2) {
        return new j_(this._request, e2).fetch(e2);
      }
      templates(e2) {
        return new O_(this._request, e2).fetch(e2);
      }
      users(e2) {
        return new U_(this._request, e2).fetch(e2);
      }
      delete(e2) {
        return new LF(this._request).fetch(e2);
      }
      update(e2) {
        return new KF(this._request).fetch(e2);
      }
    };
    var $h = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var Zh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var Yh = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.exists = i2.exists, this.success = i2.success;
      }
    };
    var Xh = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2;
        super(e2), this.acceptedAt = null !== (n2 = Yc(i2.acceptedAt)) && void 0 !== n2 ? n2 : void 0, this.archivedAt = null !== (a2 = Yc(i2.archivedAt)) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.email = i2.email, this.expiresAt = null !== (d2 = Yc(i2.expiresAt)) && void 0 !== d2 ? d2 : void 0, this.external = i2.external, this.id = i2.id, this.metadata = null !== (l2 = i2.metadata) && void 0 !== l2 ? l2 : void 0, this.updatedAt = null !== (m2 = Yc(i2.updatedAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this.role = i2.role, this._invitee = null !== (o2 = i2.invitee) && void 0 !== o2 ? o2 : void 0, this._inviter = i2.inviter;
      }
      get invitee() {
        var e2, i2;
        return (null === (e2 = this._invitee) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._invitee) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get inviter() {
        return new Lb(this._request).fetch(this._inviter.id);
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      create(e2) {
        return new GF(this._request).fetch(e2);
      }
      delete() {
        return new WF(this._request).fetch(this.id);
      }
      update(e2) {
        return new QF(this._request).fetch(this.id, e2);
      }
    };
    var ef = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Xh(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var nf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._organizationInvite = i2.organizationInvite;
      }
      get organizationInvite() {
        return new db(this._request).fetch(this._organizationInvite.id);
      }
    };
    var af = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.description = null !== (n2 = i2.description) && void 0 !== n2 ? n2 : void 0, this.enabled = i2.enabled, this.range = i2.range, this.type = i2.type;
      }
    };
    var tf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
    };
    var df = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var lf = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.endCursor = null !== (n2 = i2.endCursor) && void 0 !== n2 ? n2 : void 0, this.hasNextPage = i2.hasNextPage, this.hasPreviousPage = i2.hasPreviousPage, this.startCursor = null !== (a2 = i2.startCursor) && void 0 !== a2 ? a2 : void 0;
      }
    };
    var mf = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.apiFailedWithUnauthorizedErrorAt = null !== (n2 = Yc(i2.apiFailedWithUnauthorizedErrorAt)) && void 0 !== n2 ? n2 : void 0;
      }
    };
    var of5 = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.canceledAt = null !== (a2 = Yc(i2.canceledAt)) && void 0 !== a2 ? a2 : void 0, this.collectionMethod = i2.collectionMethod, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.nextBillingAt = null !== (d2 = Yc(i2.nextBillingAt)) && void 0 !== d2 ? d2 : void 0, this.pendingChangeType = null !== (l2 = i2.pendingChangeType) && void 0 !== l2 ? l2 : void 0, this.seats = i2.seats, this.seatsMaximum = null !== (m2 = i2.seatsMaximum) && void 0 !== m2 ? m2 : void 0, this.seatsMinimum = null !== (o2 = i2.seatsMinimum) && void 0 !== o2 ? o2 : void 0, this.type = i2.type, this.updatedAt = null !== (r2 = Yc(i2.updatedAt)) && void 0 !== r2 ? r2 : /* @__PURE__ */ new Date(), this._creator = null !== (s2 = i2.creator) && void 0 !== s2 ? s2 : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
    };
    var rf = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2, N2, h2, f2, S2, y2, b2, g2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.autoArchivedAt = null !== (a2 = Yc(i2.autoArchivedAt)) && void 0 !== a2 ? a2 : void 0, this.canceledAt = null !== (t2 = Yc(i2.canceledAt)) && void 0 !== t2 ? t2 : void 0, this.color = i2.color, this.completedAt = null !== (d2 = Yc(i2.completedAt)) && void 0 !== d2 ? d2 : void 0, this.completedIssueCountHistory = i2.completedIssueCountHistory, this.completedScopeHistory = i2.completedScopeHistory, this.content = null !== (l2 = i2.content) && void 0 !== l2 ? l2 : void 0, this.createdAt = null !== (m2 = Yc(i2.createdAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this.description = i2.description, this.healthUpdatedAt = null !== (o2 = Yc(i2.healthUpdatedAt)) && void 0 !== o2 ? o2 : void 0, this.icon = null !== (r2 = i2.icon) && void 0 !== r2 ? r2 : void 0, this.id = i2.id, this.inProgressScopeHistory = i2.inProgressScopeHistory, this.issueCountHistory = i2.issueCountHistory, this.name = i2.name, this.priority = i2.priority, this.progress = i2.progress, this.projectUpdateRemindersPausedUntilAt = null !== (s2 = Yc(i2.projectUpdateRemindersPausedUntilAt)) && void 0 !== s2 ? s2 : void 0, this.scope = i2.scope, this.scopeHistory = i2.scopeHistory, this.slackIssueComments = i2.slackIssueComments, this.slackIssueStatuses = i2.slackIssueStatuses, this.slackNewIssue = i2.slackNewIssue, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.startDate = null !== (u2 = i2.startDate) && void 0 !== u2 ? u2 : void 0, this.startedAt = null !== (k2 = Yc(i2.startedAt)) && void 0 !== k2 ? k2 : void 0, this.state = i2.state, this.targetDate = null !== (p2 = i2.targetDate) && void 0 !== p2 ? p2 : void 0, this.trashed = null !== (c2 = i2.trashed) && void 0 !== c2 ? c2 : void 0, this.updatedAt = null !== (v2 = Yc(i2.updatedAt)) && void 0 !== v2 ? v2 : /* @__PURE__ */ new Date(), this.url = i2.url, this.documentContent = i2.documentContent ? new Mv(e2, i2.documentContent) : void 0, this.status = new If(e2, i2.status), this.health = null !== (N2 = i2.health) && void 0 !== N2 ? N2 : void 0, this._convertedFromIssue = null !== (h2 = i2.convertedFromIssue) && void 0 !== h2 ? h2 : void 0, this._creator = null !== (f2 = i2.creator) && void 0 !== f2 ? f2 : void 0, this._favorite = null !== (S2 = i2.favorite) && void 0 !== S2 ? S2 : void 0, this._integrationsSettings = null !== (y2 = i2.integrationsSettings) && void 0 !== y2 ? y2 : void 0, this._lastAppliedTemplate = null !== (b2 = i2.lastAppliedTemplate) && void 0 !== b2 ? b2 : void 0, this._lead = null !== (g2 = i2.lead) && void 0 !== g2 ? g2 : void 0;
      }
      get convertedFromIssue() {
        var e2, i2;
        return (null === (e2 = this._convertedFromIssue) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._convertedFromIssue) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get favorite() {
        var e2, i2;
        return (null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id) ? new Ty(this._request).fetch(null === (i2 = this._favorite) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get integrationsSettings() {
        var e2, i2;
        return (null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id) ? new Ey(this._request).fetch(null === (i2 = this._integrationsSettings) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get lastAppliedTemplate() {
        var e2, i2;
        return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new jb(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get lead() {
        var e2, i2;
        return (null === (e2 = this._lead) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._lead) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      documents(e2) {
        return new B_(this._request, this.id, e2).fetch(e2);
      }
      externalLinks(e2) {
        return new E_(this._request, this.id, e2).fetch(e2);
      }
      history(e2) {
        return new R_(this._request, this.id, e2).fetch(e2);
      }
      initiatives(e2) {
        return new M_(this._request, this.id, e2).fetch(e2);
      }
      issues(e2) {
        return new L_(this._request, this.id, e2).fetch(e2);
      }
      links(e2) {
        return new z_(this._request, this.id, e2).fetch(e2);
      }
      members(e2) {
        return new H_(this._request, this.id, e2).fetch(e2);
      }
      projectMilestones(e2) {
        return new G_(this._request, this.id, e2).fetch(e2);
      }
      projectUpdates(e2) {
        return new W_(this._request, this.id, e2).fetch(e2);
      }
      teams(e2) {
        return new Q_(this._request, this.id, e2).fetch(e2);
      }
      archive(e2) {
        return new $F(this._request).fetch(this.id, e2);
      }
      create(e2, i2) {
        return new ZF(this._request).fetch(e2, i2);
      }
      delete() {
        return new YF(this._request).fetch(this.id);
      }
      unarchive() {
        return new dV(this._request).fetch(this.id);
      }
      update() {
        return new vb(this._request).fetch(this.id);
      }
    };
    var sf = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
      }
      get entity() {
        var e2, i2;
        return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var uf = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new rf(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var kf = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.filter = null !== (n2 = i2.filter) && void 0 !== n2 ? n2 : void 0;
      }
    };
    var pf = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.entries = i2.entries, this.id = i2.id, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this._project = i2.project;
      }
      get project() {
        return new mb(this._request).fetch(this._project.id);
      }
    };
    var cf = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new pf(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var vf = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.label = i2.label, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.url = i2.url, this._creator = i2.creator, this._project = i2.project;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get project() {
        return new mb(this._request).fetch(this._project.id);
      }
      create(e2) {
        return new XF(this._request).fetch(e2);
      }
      delete() {
        return new eV(this._request).fetch(this.id);
      }
      update(e2) {
        return new iV(this._request).fetch(this.id, e2);
      }
    };
    var Nf = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new vf(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var hf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectLink = i2.projectLink;
      }
      get projectLink() {
        return new rb(this._request).fetch(this._projectLink.id);
      }
    };
    var ff = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.name = i2.name, this.sortOrder = i2.sortOrder, this.targetDate = null !== (d2 = i2.targetDate) && void 0 !== d2 ? d2 : void 0, this.updatedAt = null !== (l2 = Yc(i2.updatedAt)) && void 0 !== l2 ? l2 : /* @__PURE__ */ new Date(), this.documentContent = i2.documentContent ? new Mv(e2, i2.documentContent) : void 0, this._project = i2.project;
      }
      get project() {
        return new mb(this._request).fetch(this._project.id);
      }
      issues(e2) {
        return new J_(this._request, this.id, e2).fetch(e2);
      }
      create(e2) {
        return new nV(this._request).fetch(e2);
      }
      delete() {
        return new aV(this._request).fetch(this.id);
      }
      update(e2) {
        return new tV(this._request).fetch(this.id, e2);
      }
    };
    var Sf = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new ff(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var yf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.issueId = i2.issueId, this.teamId = i2.teamId;
      }
    };
    var bf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.projectId = i2.projectId, this.teamIds = i2.teamIds;
      }
    };
    var gf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectMilestone = i2.projectMilestone;
      }
      get projectMilestone() {
        return new ub(this._request).fetch(this._projectMilestone.id);
      }
    };
    var Df = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2, N2, h2, f2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.commentId = null !== (a2 = i2.commentId) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.emailedAt = null !== (d2 = Yc(i2.emailedAt)) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.parentCommentId = null !== (l2 = i2.parentCommentId) && void 0 !== l2 ? l2 : void 0, this.projectId = i2.projectId, this.projectMilestoneId = null !== (m2 = i2.projectMilestoneId) && void 0 !== m2 ? m2 : void 0, this.projectUpdateId = null !== (o2 = i2.projectUpdateId) && void 0 !== o2 ? o2 : void 0, this.reactionEmoji = null !== (r2 = i2.reactionEmoji) && void 0 !== r2 ? r2 : void 0, this.readAt = null !== (s2 = Yc(i2.readAt)) && void 0 !== s2 ? s2 : void 0, this.snoozedUntilAt = null !== (u2 = Yc(i2.snoozedUntilAt)) && void 0 !== u2 ? u2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (k2 = Yc(i2.unsnoozedAt)) && void 0 !== k2 ? k2 : void 0, this.updatedAt = null !== (p2 = Yc(i2.updatedAt)) && void 0 !== p2 ? p2 : /* @__PURE__ */ new Date(), this.botActor = i2.botActor ? new ev(e2, i2.botActor) : void 0, this._actor = null !== (c2 = i2.actor) && void 0 !== c2 ? c2 : void 0, this._comment = null !== (v2 = i2.comment) && void 0 !== v2 ? v2 : void 0, this._externalUserActor = null !== (N2 = i2.externalUserActor) && void 0 !== N2 ? N2 : void 0, this._parentComment = null !== (h2 = i2.parentComment) && void 0 !== h2 ? h2 : void 0, this._project = i2.project, this._projectUpdate = null !== (f2 = i2.projectUpdate) && void 0 !== f2 ? f2 : void 0, this._user = i2.user;
      }
      get actor() {
        var e2, i2;
        return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get comment() {
        var e2, i2;
        return (null === (e2 = this._comment) || void 0 === e2 ? void 0 : e2.id) ? new ky(this._request).fetch({ id: null === (i2 = this._comment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
      }
      get externalUserActor() {
        var e2, i2;
        return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get parentComment() {
        var e2, i2;
        return (null === (e2 = this._parentComment) || void 0 === e2 ? void 0 : e2.id) ? new ky(this._request).fetch({ id: null === (i2 = this._parentComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
      }
      get project() {
        return new mb(this._request).fetch(this._project.id);
      }
      get projectUpdate() {
        var e2, i2;
        return (null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id) ? new vb(this._request).fetch(null === (i2 = this._projectUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
    };
    var Ff = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (m2 = i2.customView) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (r2 = i2.initiative) && void 0 !== r2 ? r2 : void 0, this._label = null !== (s2 = i2.label) && void 0 !== s2 ? s2 : void 0, this._project = i2.project, this._subscriber = i2.subscriber, this._team = null !== (u2 = i2.team) && void 0 !== u2 ? u2 : void 0, this._user = null !== (k2 = i2.user) && void 0 !== k2 ? k2 : void 0;
      }
      get customView() {
        var e2, i2;
        return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new cy(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get initiative() {
        var e2, i2;
        return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get label() {
        var e2, i2;
        return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new Gy(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        return new mb(this._request).fetch(this._project.id);
      }
      get subscriber() {
        return new Lb(this._request).fetch(this._subscriber.id);
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var Vf = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._project = null !== (n2 = i2.project) && void 0 !== n2 ? n2 : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var _f = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2;
        super(e2), this.anchorType = i2.anchorType, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.relatedAnchorType = i2.relatedAnchorType, this.type = i2.type, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this._project = i2.project, this._projectMilestone = null !== (d2 = i2.projectMilestone) && void 0 !== d2 ? d2 : void 0, this._relatedProject = i2.relatedProject, this._relatedProjectMilestone = null !== (l2 = i2.relatedProjectMilestone) && void 0 !== l2 ? l2 : void 0, this._user = null !== (m2 = i2.user) && void 0 !== m2 ? m2 : void 0;
      }
      get project() {
        return new mb(this._request).fetch(this._project.id);
      }
      get projectMilestone() {
        var e2, i2;
        return (null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id) ? new ub(this._request).fetch(null === (i2 = this._projectMilestone) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get relatedProject() {
        return new mb(this._request).fetch(this._relatedProject.id);
      }
      get relatedProjectMilestone() {
        var e2, i2;
        return (null === (e2 = this._relatedProjectMilestone) || void 0 === e2 ? void 0 : e2.id) ? new ub(this._request).fetch(null === (i2 = this._relatedProjectMilestone) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var Af = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new _f(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var Tf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.totalCount = i2.totalCount, this.archivePayload = new tv(e2, i2.archivePayload), this.pageInfo = new lf(e2, i2.pageInfo), this.nodes = i2.nodes.map((i3) => new wf(e2, i3));
      }
    };
    var wf = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2, N2, h2, f2, S2, y2, b2, g2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.autoArchivedAt = null !== (a2 = Yc(i2.autoArchivedAt)) && void 0 !== a2 ? a2 : void 0, this.canceledAt = null !== (t2 = Yc(i2.canceledAt)) && void 0 !== t2 ? t2 : void 0, this.color = i2.color, this.completedAt = null !== (d2 = Yc(i2.completedAt)) && void 0 !== d2 ? d2 : void 0, this.completedIssueCountHistory = i2.completedIssueCountHistory, this.completedScopeHistory = i2.completedScopeHistory, this.content = null !== (l2 = i2.content) && void 0 !== l2 ? l2 : void 0, this.createdAt = null !== (m2 = Yc(i2.createdAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this.description = i2.description, this.healthUpdatedAt = null !== (o2 = Yc(i2.healthUpdatedAt)) && void 0 !== o2 ? o2 : void 0, this.icon = null !== (r2 = i2.icon) && void 0 !== r2 ? r2 : void 0, this.id = i2.id, this.inProgressScopeHistory = i2.inProgressScopeHistory, this.issueCountHistory = i2.issueCountHistory, this.metadata = i2.metadata, this.name = i2.name, this.priority = i2.priority, this.progress = i2.progress, this.projectUpdateRemindersPausedUntilAt = null !== (s2 = Yc(i2.projectUpdateRemindersPausedUntilAt)) && void 0 !== s2 ? s2 : void 0, this.scope = i2.scope, this.scopeHistory = i2.scopeHistory, this.slackIssueComments = i2.slackIssueComments, this.slackIssueStatuses = i2.slackIssueStatuses, this.slackNewIssue = i2.slackNewIssue, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.startDate = null !== (u2 = i2.startDate) && void 0 !== u2 ? u2 : void 0, this.startedAt = null !== (k2 = Yc(i2.startedAt)) && void 0 !== k2 ? k2 : void 0, this.state = i2.state, this.targetDate = null !== (p2 = i2.targetDate) && void 0 !== p2 ? p2 : void 0, this.trashed = null !== (c2 = i2.trashed) && void 0 !== c2 ? c2 : void 0, this.updatedAt = null !== (v2 = Yc(i2.updatedAt)) && void 0 !== v2 ? v2 : /* @__PURE__ */ new Date(), this.url = i2.url, this.documentContent = i2.documentContent ? new Mv(e2, i2.documentContent) : void 0, this.status = new If(e2, i2.status), this.health = null !== (N2 = i2.health) && void 0 !== N2 ? N2 : void 0, this._convertedFromIssue = null !== (h2 = i2.convertedFromIssue) && void 0 !== h2 ? h2 : void 0, this._creator = null !== (f2 = i2.creator) && void 0 !== f2 ? f2 : void 0, this._favorite = null !== (S2 = i2.favorite) && void 0 !== S2 ? S2 : void 0, this._integrationsSettings = null !== (y2 = i2.integrationsSettings) && void 0 !== y2 ? y2 : void 0, this._lastAppliedTemplate = null !== (b2 = i2.lastAppliedTemplate) && void 0 !== b2 ? b2 : void 0, this._lead = null !== (g2 = i2.lead) && void 0 !== g2 ? g2 : void 0;
      }
      get convertedFromIssue() {
        var e2, i2;
        return (null === (e2 = this._convertedFromIssue) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._convertedFromIssue) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get favorite() {
        var e2, i2;
        return (null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id) ? new Ty(this._request).fetch(null === (i2 = this._favorite) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get integrationsSettings() {
        var e2, i2;
        return (null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id) ? new Ey(this._request).fetch(null === (i2 = this._integrationsSettings) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get lastAppliedTemplate() {
        var e2, i2;
        return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new jb(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get lead() {
        var e2, i2;
        return (null === (e2 = this._lead) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._lead) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var If = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = i2.color, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.indefinite = i2.indefinite, this.name = i2.name, this.position = i2.position, this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.type = i2.type;
      }
    };
    var Cf = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.body = i2.body, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.diff = null !== (t2 = i2.diff) && void 0 !== t2 ? t2 : void 0, this.diffMarkdown = null !== (d2 = i2.diffMarkdown) && void 0 !== d2 ? d2 : void 0, this.editedAt = null !== (l2 = Yc(i2.editedAt)) && void 0 !== l2 ? l2 : void 0, this.id = i2.id, this.isDiffHidden = i2.isDiffHidden, this.reactionData = i2.reactionData, this.slugId = i2.slugId, this.updatedAt = null !== (m2 = Yc(i2.updatedAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this.url = i2.url, this.reactions = i2.reactions.map((i3) => new Hf(e2, i3)), this.health = i2.health, this._project = i2.project, this._user = i2.user;
      }
      get project() {
        return new mb(this._request).fetch(this._project.id);
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
      comments(e2) {
        return new K_(this._request, this.id, e2).fetch(e2);
      }
      create(e2) {
        return new mV(this._request).fetch(e2);
      }
      delete() {
        return new oV(this._request).fetch(this.id);
      }
      update(e2) {
        return new uV(this._request).fetch(this.id, e2);
      }
    };
    var Pf = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Cf(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var qf = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.readAt = null !== (t2 = Yc(i2.readAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this._projectUpdate = i2.projectUpdate, this._user = i2.user;
      }
      get projectUpdate() {
        return new vb(this._request).fetch(this._projectUpdate.id);
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
      create(e2) {
        return new rV(this._request).fetch(e2);
      }
    };
    var xf = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new qf(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var jf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectUpdateInteraction = i2.projectUpdateInteraction;
      }
      get projectUpdateInteraction() {
        return new Nb(this._request).fetch(this._projectUpdateInteraction.id);
      }
    };
    var Of = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectUpdate = i2.projectUpdate;
      }
      get projectUpdate() {
        return new vb(this._request).fetch(this._projectUpdate.id);
      }
    };
    var Uf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    };
    var Bf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._interaction = i2.interaction, this._projectUpdate = i2.projectUpdate;
      }
      get interaction() {
        return new Nb(this._request).fetch(this._interaction.id);
      }
      get projectUpdate() {
        return new vb(this._request).fetch(this._projectUpdate.id);
      }
    };
    var Ef = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date();
      }
      create(e2) {
        return new kV(this._request).fetch(e2);
      }
      delete() {
        return new pV(this._request).fetch(this.id);
      }
    };
    var Rf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.entity = new Ef(e2, i2.entity);
      }
    };
    var Mf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var Lf = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.identifier = null !== (n2 = i2.identifier) && void 0 !== n2 ? n2 : void 0, this.kind = i2.kind, this.limits = i2.limits.map((i3) => new zf(e2, i3));
      }
    };
    var zf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.allowedAmount = i2.allowedAmount, this.period = i2.period, this.remainingAmount = i2.remainingAmount, this.requestedAmount = i2.requestedAmount, this.reset = i2.reset, this.type = i2.type;
      }
    };
    var Hf = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.emoji = i2.emoji, this.id = i2.id, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this._comment = null !== (d2 = i2.comment) && void 0 !== d2 ? d2 : void 0, this._externalUser = null !== (l2 = i2.externalUser) && void 0 !== l2 ? l2 : void 0, this._issue = null !== (m2 = i2.issue) && void 0 !== m2 ? m2 : void 0, this._projectUpdate = null !== (o2 = i2.projectUpdate) && void 0 !== o2 ? o2 : void 0, this._user = null !== (r2 = i2.user) && void 0 !== r2 ? r2 : void 0;
      }
      get comment() {
        var e2, i2;
        return (null === (e2 = this._comment) || void 0 === e2 ? void 0 : e2.id) ? new ky(this._request).fetch({ id: null === (i2 = this._comment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
      }
      get externalUser() {
        var e2, i2;
        return (null === (e2 = this._externalUser) || void 0 === e2 ? void 0 : e2.id) ? new _y(this._request).fetch(null === (i2 = this._externalUser) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get issue() {
        var e2, i2;
        return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get projectUpdate() {
        var e2, i2;
        return (null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id) ? new vb(this._request).fetch(null === (i2 = this._projectUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      create(e2) {
        return new cV(this._request).fetch(e2);
      }
      delete() {
        return new vV(this._request).fetch(this.id);
      }
    };
    var Gf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.reaction = new Hf(e2, i2.reaction);
      }
    };
    var Wf = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = null !== (a2 = i2.color) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.description = null !== (d2 = i2.description) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.name = i2.name, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (l2 = Yc(i2.updatedAt)) && void 0 !== l2 ? l2 : /* @__PURE__ */ new Date(), this.url = i2.url, this._creator = i2.creator, this._owner = i2.owner;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      get owner() {
        return new Lb(this._request).fetch(this._owner.id);
      }
      projects(e2) {
        return new $_(this._request, this.id, e2).fetch(e2);
      }
      archive() {
        return new fV(this._request).fetch(this.id);
      }
      create(e2) {
        return new SV(this._request).fetch(e2);
      }
      delete() {
        return new yV(this._request).fetch(this.id);
      }
      unarchive() {
        return new FV(this._request).fetch(this.id);
      }
      update(e2) {
        return new VV(this._request).fetch(this.id, e2);
      }
    };
    var Qf = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
      }
      get entity() {
        var e2, i2;
        return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new gb(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var Jf = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Wf(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var Kf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._roadmap = i2.roadmap;
      }
      get roadmap() {
        return new gb(this._request).fetch(this._roadmap.id);
      }
    };
    var $f = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this._project = i2.project, this._roadmap = i2.roadmap;
      }
      get project() {
        return new mb(this._request).fetch(this._project.id);
      }
      get roadmap() {
        return new gb(this._request).fetch(this._roadmap.id);
      }
      create(e2) {
        return new bV(this._request).fetch(e2);
      }
      delete() {
        return new gV(this._request).fetch(this.id);
      }
      update(e2) {
        return new DV(this._request).fetch(this.id, e2);
      }
    };
    var Zf = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new $f(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var Yf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._roadmapToProject = i2.roadmapToProject;
      }
      get roadmapToProject() {
        return new Db(this._request).fetch(this._roadmapToProject.id);
      }
    };
    var Xf = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.organizationSlug = i2.organizationSlug;
      }
    };
    var eS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.enterpriseId = null !== (n2 = i2.enterpriseId) && void 0 !== n2 ? n2 : void 0, this.enterpriseName = null !== (a2 = i2.enterpriseName) && void 0 !== a2 ? a2 : void 0, this.shouldUnfurl = null !== (t2 = i2.shouldUnfurl) && void 0 !== t2 ? t2 : void 0, this.teamId = null !== (d2 = i2.teamId) && void 0 !== d2 ? d2 : void 0, this.teamName = null !== (l2 = i2.teamName) && void 0 !== l2 ? l2 : void 0, this.slackChannelMapping = i2.slackChannelMapping ? i2.slackChannelMapping.map((i3) => new aS(e2, i3)) : void 0, this.canAdministrate = i2.canAdministrate;
      }
    };
    var iS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.hasDefaultAsk = i2.hasDefaultAsk, this.id = i2.id;
      }
    };
    var nS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.addBot = i2.addBot, this.lastSyncId = i2.lastSyncId, this.nudgeToConnectMainSlackIntegration = null !== (n2 = i2.nudgeToConnectMainSlackIntegration) && void 0 !== n2 ? n2 : void 0, this.nudgeToUpdateMainSlackIntegration = null !== (a2 = i2.nudgeToUpdateMainSlackIntegration) && void 0 !== a2 ? a2 : void 0, this.success = i2.success, this._integration = null !== (t2 = i2.integration) && void 0 !== t2 ? t2 : void 0;
      }
      get integration() {
        var e2, i2;
        return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new xy(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var aS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2;
        super(e2), this.autoCreateOnBotMention = null !== (n2 = i2.autoCreateOnBotMention) && void 0 !== n2 ? n2 : void 0, this.autoCreateOnEmoji = null !== (a2 = i2.autoCreateOnEmoji) && void 0 !== a2 ? a2 : void 0, this.autoCreateOnMessage = null !== (t2 = i2.autoCreateOnMessage) && void 0 !== t2 ? t2 : void 0, this.autoCreateTemplateId = null !== (d2 = i2.autoCreateTemplateId) && void 0 !== d2 ? d2 : void 0, this.botAdded = null !== (l2 = i2.botAdded) && void 0 !== l2 ? l2 : void 0, this.id = i2.id, this.isPrivate = null !== (m2 = i2.isPrivate) && void 0 !== m2 ? m2 : void 0, this.isShared = null !== (o2 = i2.isShared) && void 0 !== o2 ? o2 : void 0, this.name = i2.name, this.postAcceptedFromTriageUpdates = null !== (r2 = i2.postAcceptedFromTriageUpdates) && void 0 !== r2 ? r2 : void 0, this.postCancellationUpdates = null !== (s2 = i2.postCancellationUpdates) && void 0 !== s2 ? s2 : void 0, this.postCompletionUpdates = null !== (u2 = i2.postCompletionUpdates) && void 0 !== u2 ? u2 : void 0, this.teams = i2.teams.map((i3) => new iS(e2, i3));
      }
    };
    var tS = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.channel = i2.channel, this.channelId = i2.channelId, this.configurationUrl = i2.configurationUrl, this.channelType = null !== (n2 = i2.channelType) && void 0 !== n2 ? n2 : void 0;
      }
    };
    var dS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.enterpriseId = null !== (n2 = i2.enterpriseId) && void 0 !== n2 ? n2 : void 0, this.enterpriseName = null !== (a2 = i2.enterpriseName) && void 0 !== a2 ? a2 : void 0, this.linkOnIssueIdMention = i2.linkOnIssueIdMention, this.shouldUnfurl = null !== (t2 = i2.shouldUnfurl) && void 0 !== t2 ? t2 : void 0, this.teamId = null !== (d2 = i2.teamId) && void 0 !== d2 ? d2 : void 0, this.teamName = null !== (l2 = i2.teamName) && void 0 !== l2 ? l2 : void 0;
      }
    };
    var lS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.samlSsoUrl = i2.samlSsoUrl, this.success = i2.success;
      }
    };
    var mS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2, N2, h2, f2, S2, y2, b2, g2, D2, F2, V2, _2, A2, T2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.autoArchivePeriod = i2.autoArchivePeriod, this.autoCloseChildIssues = null !== (a2 = i2.autoCloseChildIssues) && void 0 !== a2 ? a2 : void 0, this.autoCloseParentIssues = null !== (t2 = i2.autoCloseParentIssues) && void 0 !== t2 ? t2 : void 0, this.autoClosePeriod = null !== (d2 = i2.autoClosePeriod) && void 0 !== d2 ? d2 : void 0, this.autoCloseStateId = null !== (l2 = i2.autoCloseStateId) && void 0 !== l2 ? l2 : void 0, this.color = null !== (m2 = i2.color) && void 0 !== m2 ? m2 : void 0, this.createdAt = null !== (o2 = Yc(i2.createdAt)) && void 0 !== o2 ? o2 : /* @__PURE__ */ new Date(), this.cycleCalenderUrl = i2.cycleCalenderUrl, this.cycleCooldownTime = i2.cycleCooldownTime, this.cycleDuration = i2.cycleDuration, this.cycleIssueAutoAssignCompleted = i2.cycleIssueAutoAssignCompleted, this.cycleIssueAutoAssignStarted = i2.cycleIssueAutoAssignStarted, this.cycleLockToActive = i2.cycleLockToActive, this.cycleStartDay = i2.cycleStartDay, this.cyclesEnabled = i2.cyclesEnabled, this.defaultIssueEstimate = i2.defaultIssueEstimate, this.defaultTemplateForMembersId = null !== (r2 = i2.defaultTemplateForMembersId) && void 0 !== r2 ? r2 : void 0, this.defaultTemplateForNonMembersId = null !== (s2 = i2.defaultTemplateForNonMembersId) && void 0 !== s2 ? s2 : void 0, this.description = null !== (u2 = i2.description) && void 0 !== u2 ? u2 : void 0, this.groupIssueHistory = i2.groupIssueHistory, this.icon = null !== (k2 = i2.icon) && void 0 !== k2 ? k2 : void 0, this.id = i2.id, this.inviteHash = i2.inviteHash, this.issueCount = i2.issueCount, this.issueEstimationAllowZero = i2.issueEstimationAllowZero, this.issueEstimationExtended = i2.issueEstimationExtended, this.issueEstimationType = i2.issueEstimationType, this.issueOrderingNoPriorityFirst = i2.issueOrderingNoPriorityFirst, this.issueSortOrderDefaultToBottom = i2.issueSortOrderDefaultToBottom, this.key = i2.key, this.name = i2.name, this.private = i2.private, this.requirePriorityToLeaveTriage = i2.requirePriorityToLeaveTriage, this.scimGroupName = null !== (p2 = i2.scimGroupName) && void 0 !== p2 ? p2 : void 0, this.scimManaged = i2.scimManaged, this.setIssueSortOrderOnStateChange = i2.setIssueSortOrderOnStateChange, this.slackIssueComments = i2.slackIssueComments, this.slackIssueStatuses = i2.slackIssueStatuses, this.slackNewIssue = i2.slackNewIssue, this.timezone = i2.timezone, this.triageEnabled = i2.triageEnabled, this.upcomingCycleCount = i2.upcomingCycleCount, this.updatedAt = null !== (c2 = Yc(i2.updatedAt)) && void 0 !== c2 ? c2 : /* @__PURE__ */ new Date(), this._activeCycle = null !== (v2 = i2.activeCycle) && void 0 !== v2 ? v2 : void 0, this._defaultIssueState = null !== (N2 = i2.defaultIssueState) && void 0 !== N2 ? N2 : void 0, this._defaultProjectTemplate = null !== (h2 = i2.defaultProjectTemplate) && void 0 !== h2 ? h2 : void 0, this._defaultTemplateForMembers = null !== (f2 = i2.defaultTemplateForMembers) && void 0 !== f2 ? f2 : void 0, this._defaultTemplateForNonMembers = null !== (S2 = i2.defaultTemplateForNonMembers) && void 0 !== S2 ? S2 : void 0, this._draftWorkflowState = null !== (y2 = i2.draftWorkflowState) && void 0 !== y2 ? y2 : void 0, this._integrationsSettings = null !== (b2 = i2.integrationsSettings) && void 0 !== b2 ? b2 : void 0, this._markedAsDuplicateWorkflowState = null !== (g2 = i2.markedAsDuplicateWorkflowState) && void 0 !== g2 ? g2 : void 0, this._mergeWorkflowState = null !== (D2 = i2.mergeWorkflowState) && void 0 !== D2 ? D2 : void 0, this._mergeableWorkflowState = null !== (F2 = i2.mergeableWorkflowState) && void 0 !== F2 ? F2 : void 0, this._reviewWorkflowState = null !== (V2 = i2.reviewWorkflowState) && void 0 !== V2 ? V2 : void 0, this._startWorkflowState = null !== (_2 = i2.startWorkflowState) && void 0 !== _2 ? _2 : void 0, this._triageIssueState = null !== (A2 = i2.triageIssueState) && void 0 !== A2 ? A2 : void 0, this._triageResponsibility = null !== (T2 = i2.triageResponsibility) && void 0 !== T2 ? T2 : void 0;
      }
      get activeCycle() {
        var e2, i2;
        return (null === (e2 = this._activeCycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._activeCycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get defaultIssueState() {
        var e2, i2;
        return (null === (e2 = this._defaultIssueState) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._defaultIssueState) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get defaultProjectTemplate() {
        var e2, i2;
        return (null === (e2 = this._defaultProjectTemplate) || void 0 === e2 ? void 0 : e2.id) ? new jb(this._request).fetch(null === (i2 = this._defaultProjectTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get defaultTemplateForMembers() {
        var e2, i2;
        return (null === (e2 = this._defaultTemplateForMembers) || void 0 === e2 ? void 0 : e2.id) ? new jb(this._request).fetch(null === (i2 = this._defaultTemplateForMembers) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get defaultTemplateForNonMembers() {
        var e2, i2;
        return (null === (e2 = this._defaultTemplateForNonMembers) || void 0 === e2 ? void 0 : e2.id) ? new jb(this._request).fetch(null === (i2 = this._defaultTemplateForNonMembers) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get draftWorkflowState() {
        var e2, i2;
        return (null === (e2 = this._draftWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._draftWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get integrationsSettings() {
        var e2, i2;
        return (null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id) ? new Ey(this._request).fetch(null === (i2 = this._integrationsSettings) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get markedAsDuplicateWorkflowState() {
        var e2, i2;
        return (null === (e2 = this._markedAsDuplicateWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._markedAsDuplicateWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get mergeWorkflowState() {
        var e2, i2;
        return (null === (e2 = this._mergeWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._mergeWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get mergeableWorkflowState() {
        var e2, i2;
        return (null === (e2 = this._mergeableWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._mergeableWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      get reviewWorkflowState() {
        var e2, i2;
        return (null === (e2 = this._reviewWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._reviewWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get startWorkflowState() {
        var e2, i2;
        return (null === (e2 = this._startWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._startWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get triageIssueState() {
        var e2, i2;
        return (null === (e2 = this._triageIssueState) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._triageIssueState) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get triageResponsibility() {
        var e2, i2;
        return (null === (e2 = this._triageResponsibility) || void 0 === e2 ? void 0 : e2.id) ? new Mb(this._request).fetch(null === (i2 = this._triageResponsibility) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      cycles(e2) {
        return new Z_(this._request, this.id, e2).fetch(e2);
      }
      gitAutomationStates(e2) {
        return new Y_(this._request, this.id, e2).fetch(e2);
      }
      issues(e2) {
        return new X_(this._request, this.id, e2).fetch(e2);
      }
      labels(e2) {
        return new eA(this._request, this.id, e2).fetch(e2);
      }
      members(e2) {
        return new iA(this._request, this.id, e2).fetch(e2);
      }
      memberships(e2) {
        return new nA(this._request, this.id, e2).fetch(e2);
      }
      projects(e2) {
        return new aA(this._request, this.id, e2).fetch(e2);
      }
      states(e2) {
        return new tA(this._request, this.id, e2).fetch(e2);
      }
      templates(e2) {
        return new dA(this._request, this.id, e2).fetch(e2);
      }
      webhooks(e2) {
        return new lA(this._request, this.id, e2).fetch(e2);
      }
      create(e2, i2) {
        return new AV(this._request).fetch(e2, i2);
      }
      delete() {
        return new wV(this._request).fetch(this.id);
      }
      unarchive() {
        return new xV(this._request).fetch(this.id);
      }
      update(e2) {
        return new jV(this._request).fetch(this.id, e2);
      }
    };
    var oS = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
      }
      get entity() {
        var e2, i2;
        return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var rS = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new mS(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var sS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.owner = i2.owner, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this._team = i2.team, this._user = i2.user;
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
      create(e2) {
        return new CV(this._request).fetch(e2);
      }
      delete() {
        return new PV(this._request).fetch(this.id);
      }
      update(e2) {
        return new qV(this._request).fetch(this.id, e2);
      }
    };
    var uS = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new sS(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var kS = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._teamMembership = null !== (n2 = i2.teamMembership) && void 0 !== n2 ? n2 : void 0;
      }
      get teamMembership() {
        var e2, i2;
        return (null === (e2 = this._teamMembership) || void 0 === e2 ? void 0 : e2.id) ? new Pb(this._request).fetch(null === (i2 = this._teamMembership) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var pS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (m2 = i2.customView) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (r2 = i2.initiative) && void 0 !== r2 ? r2 : void 0, this._label = null !== (s2 = i2.label) && void 0 !== s2 ? s2 : void 0, this._project = null !== (u2 = i2.project) && void 0 !== u2 ? u2 : void 0, this._subscriber = i2.subscriber, this._team = i2.team, this._user = null !== (k2 = i2.user) && void 0 !== k2 ? k2 : void 0;
      }
      get customView() {
        var e2, i2;
        return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new cy(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get initiative() {
        var e2, i2;
        return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get label() {
        var e2, i2;
        return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new Gy(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get subscriber() {
        return new Lb(this._request).fetch(this._subscriber.id);
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var cS = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._team = null !== (n2 = i2.team) && void 0 !== n2 ? n2 : void 0;
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var vS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.name = i2.name, this.sortOrder = i2.sortOrder, this.templateData = null !== (d2 = Xc(i2.templateData)) && void 0 !== d2 ? d2 : {}, this.type = i2.type, this.updatedAt = null !== (l2 = Yc(i2.updatedAt)) && void 0 !== l2 ? l2 : /* @__PURE__ */ new Date(), this._creator = null !== (m2 = i2.creator) && void 0 !== m2 ? m2 : void 0, this._lastUpdatedBy = null !== (o2 = i2.lastUpdatedBy) && void 0 !== o2 ? o2 : void 0, this._team = null !== (r2 = i2.team) && void 0 !== r2 ? r2 : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get lastUpdatedBy() {
        var e2, i2;
        return (null === (e2 = this._lastUpdatedBy) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._lastUpdatedBy) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      create(e2) {
        return new OV(this._request).fetch(e2);
      }
      delete() {
        return new UV(this._request).fetch(this.id);
      }
      update(e2) {
        return new BV(this._request).fetch(this.id, e2);
      }
    };
    var NS = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new vS(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var hS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._template = i2.template;
      }
      get template() {
        return new jb(this._request).fetch(this._template.id);
      }
    };
    var fS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.externalId = null !== (t2 = i2.externalId) && void 0 !== t2 ? t2 : void 0, this.externalUrl = null !== (d2 = i2.externalUrl) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.name = i2.name, this.updatedAt = null !== (l2 = Yc(i2.updatedAt)) && void 0 !== l2 ? l2 : /* @__PURE__ */ new Date(), this.entries = i2.entries ? i2.entries.map((i3) => new yS(e2, i3)) : void 0, this._integration = null !== (m2 = i2.integration) && void 0 !== m2 ? m2 : void 0;
      }
      get integration() {
        var e2, i2;
        return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new xy(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      create(e2) {
        return new EV(this._request).fetch(e2);
      }
      delete() {
        return new RV(this._request).fetch(this.id);
      }
      update(e2) {
        return new LV(this._request).fetch(this.id, e2);
      }
    };
    var SS = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new fS(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var yS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.endsAt = null !== (n2 = Yc(i2.endsAt)) && void 0 !== n2 ? n2 : /* @__PURE__ */ new Date(), this.startsAt = null !== (a2 = Yc(i2.startsAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.userEmail = null !== (t2 = i2.userEmail) && void 0 !== t2 ? t2 : void 0, this.userId = null !== (d2 = i2.userId) && void 0 !== d2 ? d2 : void 0;
      }
    };
    var bS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._timeSchedule = i2.timeSchedule;
      }
      get timeSchedule() {
        return new Bb(this._request).fetch(this._timeSchedule.id);
      }
    };
    var gS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.manualSelection = i2.manualSelection ? new FS(e2, i2.manualSelection) : void 0, this.action = i2.action, this._currentUser = null !== (d2 = i2.currentUser) && void 0 !== d2 ? d2 : void 0, this._team = i2.team, this._timeSchedule = null !== (l2 = i2.timeSchedule) && void 0 !== l2 ? l2 : void 0;
      }
      get currentUser() {
        var e2, i2;
        return (null === (e2 = this._currentUser) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._currentUser) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
      get timeSchedule() {
        var e2, i2;
        return (null === (e2 = this._timeSchedule) || void 0 === e2 ? void 0 : e2.id) ? new Bb(this._request).fetch(null === (i2 = this._timeSchedule) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      create(e2) {
        return new HV(this._request).fetch(e2);
      }
      delete() {
        return new GV(this._request).fetch(this.id);
      }
      update(e2) {
        return new WV(this._request).fetch(this.id, e2);
      }
    };
    var DS = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new gS(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var FS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.userIds = i2.userIds;
      }
    };
    var VS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._triageResponsibility = i2.triageResponsibility;
      }
      get triageResponsibility() {
        return new Mb(this._request).fetch(this._triageResponsibility.id);
      }
    };
    var _S = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.assetUrl = i2.assetUrl, this.contentType = i2.contentType, this.filename = i2.filename, this.metaData = null !== (n2 = i2.metaData) && void 0 !== n2 ? n2 : void 0, this.size = i2.size, this.uploadUrl = i2.uploadUrl, this.headers = i2.headers.map((i3) => new AS(e2, i3));
      }
    };
    var AS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.key = i2.key, this.value = i2.value;
      }
    };
    var TS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.uploadFile = i2.uploadFile ? new _S(e2, i2.uploadFile) : void 0;
      }
    };
    var wS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2;
        super(e2), this.active = i2.active, this.admin = i2.admin, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.avatarBackgroundColor = i2.avatarBackgroundColor, this.avatarUrl = null !== (a2 = i2.avatarUrl) && void 0 !== a2 ? a2 : void 0, this.calendarHash = null !== (t2 = i2.calendarHash) && void 0 !== t2 ? t2 : void 0, this.createdAt = null !== (d2 = Yc(i2.createdAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.createdIssueCount = i2.createdIssueCount, this.description = null !== (l2 = i2.description) && void 0 !== l2 ? l2 : void 0, this.disableReason = null !== (m2 = i2.disableReason) && void 0 !== m2 ? m2 : void 0, this.displayName = i2.displayName, this.email = i2.email, this.guest = i2.guest, this.id = i2.id, this.initials = i2.initials, this.inviteHash = i2.inviteHash, this.isMe = i2.isMe, this.lastSeen = null !== (o2 = Yc(i2.lastSeen)) && void 0 !== o2 ? o2 : void 0, this.name = i2.name, this.statusEmoji = null !== (r2 = i2.statusEmoji) && void 0 !== r2 ? r2 : void 0, this.statusLabel = null !== (s2 = i2.statusLabel) && void 0 !== s2 ? s2 : void 0, this.statusUntilAt = null !== (u2 = Yc(i2.statusUntilAt)) && void 0 !== u2 ? u2 : void 0, this.timezone = null !== (k2 = i2.timezone) && void 0 !== k2 ? k2 : void 0, this.updatedAt = null !== (p2 = Yc(i2.updatedAt)) && void 0 !== p2 ? p2 : /* @__PURE__ */ new Date(), this.url = i2.url;
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      assignedIssues(e2) {
        return new mA(this._request, this.id, e2).fetch(e2);
      }
      createdIssues(e2) {
        return new oA(this._request, this.id, e2).fetch(e2);
      }
      teamMemberships(e2) {
        return new rA(this._request, this.id, e2).fetch(e2);
      }
      teams(e2) {
        return new sA(this._request, this.id, e2).fetch(e2);
      }
      suspend() {
        return new n_(this._request).fetch(this.id);
      }
      unsuspend() {
        return new a_(this._request).fetch(this.id);
      }
      update(e2) {
        return new t_(this._request).fetch(this.id, e2);
      }
    };
    var IS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    };
    var CS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.approvalErrorCode = null !== (n2 = i2.approvalErrorCode) && void 0 !== n2 ? n2 : void 0, this.clientId = i2.clientId, this.createdByLinear = i2.createdByLinear, this.description = null !== (a2 = i2.description) && void 0 !== a2 ? a2 : void 0, this.developer = i2.developer, this.developerUrl = i2.developerUrl, this.id = i2.id, this.imageUrl = null !== (t2 = i2.imageUrl) && void 0 !== t2 ? t2 : void 0, this.isAuthorized = i2.isAuthorized, this.name = i2.name, this.webhooksEnabled = i2.webhooksEnabled;
      }
    };
    var PS = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new wS(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var qS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (m2 = i2.customView) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (r2 = i2.initiative) && void 0 !== r2 ? r2 : void 0, this._label = null !== (s2 = i2.label) && void 0 !== s2 ? s2 : void 0, this._project = null !== (u2 = i2.project) && void 0 !== u2 ? u2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (k2 = i2.team) && void 0 !== k2 ? k2 : void 0, this._user = i2.user;
      }
      get customView() {
        var e2, i2;
        return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new cy(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get initiative() {
        var e2, i2;
        return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Iy(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get label() {
        var e2, i2;
        return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new Gy(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get subscriber() {
        return new Lb(this._request).fetch(this._subscriber.id);
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
    };
    var xS = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._user = null !== (n2 = i2.user) && void 0 !== n2 ? n2 : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var jS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.calendarHash = null !== (a2 = i2.calendarHash) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.notificationPreferences = i2.notificationPreferences, this.showFullUserNames = i2.showFullUserNames, this.subscribedToChangelog = i2.subscribedToChangelog, this.subscribedToDPA = i2.subscribedToDPA, this.subscribedToInviteAccepted = i2.subscribedToInviteAccepted, this.subscribedToPrivacyLegalUpdates = i2.subscribedToPrivacyLegalUpdates, this.subscribedToUnreadNotificationsReminder = i2.subscribedToUnreadNotificationsReminder, this.unsubscribedFrom = i2.unsubscribedFrom, this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.notificationDeliveryPreferences = new jh(e2, i2.notificationDeliveryPreferences), this._user = i2.user;
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
      update(e2) {
        return new i_(this._request).fetch(this.id, e2);
      }
    };
    var OS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.flag = null !== (n2 = i2.flag) && void 0 !== n2 ? n2 : void 0, this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.value = null !== (a2 = i2.value) && void 0 !== a2 ? a2 : void 0;
      }
    };
    var US = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    };
    var BS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
      get userSettings() {
        return new zb(this._request).fetch();
      }
    };
    var ES = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.type = i2.type, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.viewType = i2.viewType, this.preferences = new MS(e2, i2.preferences);
      }
      create(e2) {
        return new d_(this._request).fetch(e2);
      }
      delete() {
        return new l_(this._request).fetch(this.id);
      }
      update(e2) {
        return new m_(this._request).fetch(this.id, e2);
      }
    };
    var RS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.viewPreferences = new ES(e2, i2.viewPreferences);
      }
    };
    var MS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.issueGrouping = null !== (n2 = i2.issueGrouping) && void 0 !== n2 ? n2 : void 0, this.showCompletedIssues = null !== (a2 = i2.showCompletedIssues) && void 0 !== a2 ? a2 : void 0, this.viewOrdering = null !== (t2 = i2.viewOrdering) && void 0 !== t2 ? t2 : void 0;
      }
    };
    var LS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2;
        super(e2), this.allPublicTeams = i2.allPublicTeams, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.enabled = i2.enabled, this.id = i2.id, this.label = null !== (t2 = i2.label) && void 0 !== t2 ? t2 : void 0, this.resourceTypes = i2.resourceTypes, this.secret = null !== (d2 = i2.secret) && void 0 !== d2 ? d2 : void 0, this.updatedAt = null !== (l2 = Yc(i2.updatedAt)) && void 0 !== l2 ? l2 : /* @__PURE__ */ new Date(), this.url = null !== (m2 = i2.url) && void 0 !== m2 ? m2 : void 0, this._creator = null !== (o2 = i2.creator) && void 0 !== o2 ? o2 : void 0, this._team = null !== (r2 = i2.team) && void 0 !== r2 ? r2 : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      create(e2) {
        return new o_(this._request).fetch(e2);
      }
      delete() {
        return new r_(this._request).fetch(this.id);
      }
      update(e2) {
        return new s_(this._request).fetch(this.id, e2);
      }
    };
    var zS = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new LS(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var HS = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._webhook = i2.webhook;
      }
      get webhook() {
        return new Qb(this._request).fetch(this._webhook.id);
      }
    };
    var GS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.activities = i2.activities, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.enabled = i2.enabled, this.id = i2.id, this.name = i2.name, this.schedule = i2.schedule, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this._creator = i2.creator, this._team = i2.team;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
    };
    var WS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2, v2;
        super(e2), this.activities = i2.activities, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.conditions = null !== (a2 = i2.conditions) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.description = null !== (d2 = i2.description) && void 0 !== d2 ? d2 : void 0, this.enabled = i2.enabled, this.groupName = null !== (l2 = i2.groupName) && void 0 !== l2 ? l2 : void 0, this.id = i2.id, this.name = i2.name, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (m2 = Yc(i2.updatedAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this.contextViewType = null !== (o2 = i2.contextViewType) && void 0 !== o2 ? o2 : void 0, this.trigger = i2.trigger, this.triggerType = i2.triggerType, this.type = i2.type, this.userContextViewType = null !== (r2 = i2.userContextViewType) && void 0 !== r2 ? r2 : void 0, this._creator = i2.creator, this._customView = null !== (s2 = i2.customView) && void 0 !== s2 ? s2 : void 0, this._cycle = null !== (u2 = i2.cycle) && void 0 !== u2 ? u2 : void 0, this._label = null !== (k2 = i2.label) && void 0 !== k2 ? k2 : void 0, this._project = null !== (p2 = i2.project) && void 0 !== p2 ? p2 : void 0, this._team = null !== (c2 = i2.team) && void 0 !== c2 ? c2 : void 0, this._user = null !== (v2 = i2.user) && void 0 !== v2 ? v2 : void 0;
      }
      get creator() {
        return new Lb(this._request).fetch(this._creator.id);
      }
      get customView() {
        var e2, i2;
        return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new cy(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get cycle() {
        var e2, i2;
        return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new hy(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get label() {
        var e2, i2;
        return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new Gy(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get team() {
        var e2, i2;
        return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new Cb(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        var e2, i2;
        return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var QS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = i2.color, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.name = i2.name, this.position = i2.position, this.type = i2.type, this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this._team = i2.team;
      }
      get team() {
        return new Cb(this._request).fetch(this._team.id);
      }
      issues(e2) {
        return new uA(this._request, this.id, e2).fetch(e2);
      }
      archive() {
        return new u_(this._request).fetch(this.id);
      }
      create(e2) {
        return new k_(this._request).fetch(e2);
      }
      update(e2) {
        return new p_(this._request).fetch(this.id, e2);
      }
    };
    var JS = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
      }
      get entity() {
        var e2, i2;
        return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new Kb(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
    };
    var KS = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new QS(e2, i3)), new lf(e2, n2.pageInfo));
      }
    };
    var $S = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._workflowState = i2.workflowState;
      }
      get workflowState() {
        return new Kb(this._request).fetch(this._workflowState.id);
      }
    };
    var ZS = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2;
        super(e2), this.automateTicketReopeningOnCancellation = null !== (n2 = i2.automateTicketReopeningOnCancellation) && void 0 !== n2 ? n2 : void 0, this.automateTicketReopeningOnComment = null !== (a2 = i2.automateTicketReopeningOnComment) && void 0 !== a2 ? a2 : void 0, this.automateTicketReopeningOnCompletion = null !== (t2 = i2.automateTicketReopeningOnCompletion) && void 0 !== t2 ? t2 : void 0, this.botUserId = null !== (d2 = i2.botUserId) && void 0 !== d2 ? d2 : void 0, this.sendNoteOnComment = null !== (l2 = i2.sendNoteOnComment) && void 0 !== l2 ? l2 : void 0, this.sendNoteOnStatusChange = null !== (m2 = i2.sendNoteOnStatusChange) && void 0 !== m2 ? m2 : void 0, this.subdomain = i2.subdomain, this.url = i2.url;
      }
    };
    var YS = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Bl, e2)).administrableTeams;
          return new rS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var XS = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(El, e2)).apiKeys;
          return new nv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var ey = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Rl, { clientId: e2 })).applicationInfo;
          return new av(this._request, i2);
        });
      }
    };
    var iy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(Ml, Object.assign({ clientId: e2, scope: i2 }, n2))).applicationWithAuthorization;
          return new CS(this._request, a2);
        });
      }
    };
    var ny = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Ll, { identifier: e2, modelClass: i2 })).archivedModelSync;
          return new tv(this._request, n2);
        });
      }
    };
    var ay = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(zl, Object.assign({ modelClass: e2, teamId: i2 }, n2))).archivedModelsSync;
          return new tv(this._request, a2);
        });
      }
    };
    var ty = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Hl, { id: e2 })).attachment;
          return new lv(this._request, i2);
        });
      }
    };
    var dy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Gl, { id: e2 })).attachmentIssue;
          return new YN(this._request, i2);
        });
      }
    };
    var ly = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(im, e2)).attachments;
          return new ov(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var my = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(nm, Object.assign({ url: e2 }, i2))).attachmentsForURL;
          return new ov(this._request, (n3) => this.fetch(e2, Kc(Object.assign(Object.assign({}, i2), n3))), n2);
        });
      }
    };
    var oy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(am, e2)).auditEntries;
          return new uv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var ry = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          return (yield this._request(tm, {})).auditEntryTypes.map((e2) => new kv(this._request, e2));
        });
      }
    };
    var sy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          return (yield this._request(dm, {})).authenticationSessions.map((e2) => new fv(this._request, e2));
        });
      }
    };
    var uy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(lm, {})).availableUsers;
          return new Nv(this._request, e2);
        });
      }
    };
    var ky = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(mm, e2)).comment;
          return new Sv(this._request, i2);
        });
      }
    };
    var py = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(um, e2)).comments;
          return new yv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var cy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(km, { id: e2 })).customView;
          return new Vv(this._request, i2);
        });
      }
    };
    var vy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ym, { id: e2 })).customViewHasSubscribers;
          return new Av(this._request, i2);
        });
      }
    };
    var Ny = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(bm, e2)).customViews;
          return new _v(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var hy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(gm, { id: e2 })).cycle;
          return new Iv(this._request, i2);
        });
      }
    };
    var fy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Vm, e2)).cycles;
          return new Pv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Sy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(_m, { id: e2 })).diaryEntry;
          return new Ov(this._request, i2);
        });
      }
    };
    var yy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Am, { id: e2 })).document;
          return new Bv(this._request, i2);
        });
      }
    };
    var by = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(wm, { id: e2 })).documentContentHistory;
          return new Lv(this._request, i2);
        });
      }
    };
    var gy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Im, e2)).documents;
          return new Rv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Dy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Cm, { id: e2 })).emoji;
          return new Yv(this._request, i2);
        });
      }
    };
    var Fy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Pm, e2)).emojis;
          return new Xv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Vy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(qm, { id: e2 })).entityExternalLink;
          return new nN(this._request, i2);
        });
      }
    };
    var _y = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(xm, { id: e2 })).externalUser;
          return new dN(this._request, i2);
        });
      }
    };
    var Ay = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(jm, e2)).externalUsers;
          return new lN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Ty = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Om, { id: e2 })).favorite;
          return new oN(this._request, i2);
        });
      }
    };
    var wy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Bm, e2)).favorites;
          return new rN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Iy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Em, { id: e2 })).initiative;
          return new PN(this._request, i2);
        });
      }
    };
    var Cy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Lm, { id: e2 })).initiativeToProject;
          return new BN(this._request, i2);
        });
      }
    };
    var Py = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(zm, e2)).initiativeToProjects;
          return new EN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var qy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Hm, e2)).initiatives;
          return new xN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var xy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Gm, { id: e2 })).integration;
          return new MN(this._request, i2);
        });
      }
    };
    var jy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Wm, { integrationId: e2, scopes: i2 })).integrationHasScopes;
          return new zN(this._request, n2);
        });
      }
    };
    var Oy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Qm, { id: e2 })).integrationTemplate;
          return new WN(this._request, i2);
        });
      }
    };
    var Uy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Jm, e2)).integrationTemplates;
          return new QN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var By = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Km, e2)).integrations;
          return new LN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Ey = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request($m, { id: e2 })).integrationsSettings;
          return new KN(this._request, i2);
        });
      }
    };
    var Ry = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Zm, { id: e2 })).issue;
          return new YN(this._request, i2);
        });
      }
    };
    var My = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(oo, Object.assign({ fileKey: e2 }, i2))).issueFigmaFileKeySearch;
          return new ih(this._request, (n3) => this.fetch(e2, Kc(Object.assign(Object.assign({}, i2), n3))), n2);
        });
      }
    };
    var Ly = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(ro, Object.assign({ prompt: e2 }, i2))).issueFilterSuggestion;
          return new th(this._request, n2);
        });
      }
    };
    var zy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(so, { csvUrl: e2, service: i2 })).issueImportCheckCSV;
          return new oh(this._request, n2);
        });
      }
    };
    var Hy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(uo, { issueImportId: e2 })).issueImportCheckSync;
          return new uh(this._request, i2);
        });
      }
    };
    var Gy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ko, { id: e2 })).issueLabel;
          return new kh(this._request, i2);
        });
      }
    };
    var Wy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(vo, e2)).issueLabels;
          return new ph(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Qy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          return (yield this._request(No, {})).issuePriorityValues.map((e2) => new hh(this._request, e2));
        });
      }
    };
    var Jy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ho, { id: e2 })).issueRelation;
          return new fh(this._request, i2);
        });
      }
    };
    var Ky = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(fo, e2)).issueRelations;
          return new Sh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var $y = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(So, e2)).issueSearch;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Zy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(yo, { branchName: e2 })).issueVcsBranchSearch;
          return i2 ? new YN(this._request, i2) : void 0;
        });
      }
    };
    var Yy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Io, e2)).issues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Xy = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Co, { id: e2 })).notification;
          switch (i2.__typename) {
            case "DocumentNotification":
              return new Hv(this._request, i2);
            case "InitiativeNotification":
              return new jN(this._request, i2);
            case "IssueNotification":
              return new vh(this._request, i2);
            case "OauthClientApprovalNotification":
              return new Wh(this._request, i2);
            case "ProjectNotification":
              return new Df(this._request, i2);
            default:
              return new Ch(this._request, i2);
          }
        });
      }
    };
    var eb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Po, { id: e2 })).notificationSubscription;
          switch (i2.__typename) {
            case "CustomViewNotificationSubscription":
              return new Tv(this._request, i2);
            case "CycleNotificationSubscription":
              return new qv(this._request, i2);
            case "InitiativeNotificationSubscription":
              return new ON(this._request, i2);
            case "LabelNotificationSubscription":
              return new Th(this._request, i2);
            case "ProjectNotificationSubscription":
              return new Ff(this._request, i2);
            case "TeamNotificationSubscription":
              return new pS(this._request, i2);
            case "UserNotificationSubscription":
              return new qS(this._request, i2);
            default:
              return new Rh(this._request, i2);
          }
        });
      }
    };
    var ib = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(qo, e2)).notificationSubscriptions;
          return new Mh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var nb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(xo, e2)).notifications;
          return new xh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var ab = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(jo, {})).organization;
          return new Kh(this._request, e2);
        });
      }
    };
    var tb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Lo, { urlKey: e2 })).organizationExists;
          return new Yh(this._request, i2);
        });
      }
    };
    var db = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(zo, { id: e2 })).organizationInvite;
          return new Xh(this._request, i2);
        });
      }
    };
    var lb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ho, e2)).organizationInvites;
          return new ef(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var mb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Go, { id: e2 })).project;
          return new rf(this._request, i2);
        });
      }
    };
    var ob = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(tr, { prompt: e2 })).projectFilterSuggestion;
          return new kf(this._request, i2);
        });
      }
    };
    var rb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(dr, { id: e2 })).projectLink;
          return new vf(this._request, i2);
        });
      }
    };
    var sb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(lr, e2)).projectLinks;
          return new Nf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var ub = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(mr, { id: e2 })).projectMilestone;
          return new ff(this._request, i2);
        });
      }
    };
    var kb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(sr, e2)).projectMilestones;
          return new Sf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var pb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ur, { id: e2 })).projectRelation;
          return new _f(this._request, i2);
        });
      }
    };
    var cb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(kr, e2)).projectRelations;
          return new Af(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var vb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(pr, { id: e2 })).projectUpdate;
          return new Cf(this._request, i2);
        });
      }
    };
    var Nb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(vr, { id: e2 })).projectUpdateInteraction;
          return new qf(this._request, i2);
        });
      }
    };
    var hb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Nr, e2)).projectUpdateInteractions;
          return new xf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var fb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(hr, e2)).projectUpdates;
          return new Pf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Sb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(fr, e2)).projects;
          return new uf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var yb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Sr, e2)).pushSubscriptionTest;
          return new Mf(this._request, i2);
        });
      }
    };
    var bb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(yr, {})).rateLimitStatus;
          return new Lf(this._request, e2);
        });
      }
    };
    var gb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(br, { id: e2 })).roadmap;
          return new Wf(this._request, i2);
        });
      }
    };
    var Db = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Dr, { id: e2 })).roadmapToProject;
          return new $f(this._request, i2);
        });
      }
    };
    var Fb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Fr, e2)).roadmapToProjects;
          return new Zf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Vb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Vr, e2)).roadmaps;
          return new Jf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var _b = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(_r, Object.assign({ term: e2 }, i2))).searchDocuments;
          return new Wv(this._request, n2);
        });
      }
    };
    var Ab = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Tr, Object.assign({ term: e2 }, i2))).searchIssues;
          return new gh(this._request, n2);
        });
      }
    };
    var Tb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Ir, Object.assign({ term: e2 }, i2))).searchProjects;
          return new Tf(this._request, n2);
        });
      }
    };
    var wb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Pr, Object.assign({ email: e2 }, i2))).ssoUrlFromEmail;
          return new lS(this._request, n2);
        });
      }
    };
    var Ib = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(qr, {})).syncEntityCount;
          return new iN(this._request, e2);
        });
      }
    };
    var Cb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(xr, { id: e2 })).team;
          return new mS(this._request, i2);
        });
      }
    };
    var Pb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Gr, { id: e2 })).teamMembership;
          return new sS(this._request, i2);
        });
      }
    };
    var qb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Wr, e2)).teamMemberships;
          return new uS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var xb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Qr, e2)).teams;
          return new rS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var jb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Jr, { id: e2 })).template;
          return new vS(this._request, i2);
        });
      }
    };
    var Ob = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          return (yield this._request(Kr, {})).templates.map((e2) => new vS(this._request, e2));
        });
      }
    };
    var Ub = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          return (yield this._request($r, { integrationType: e2 })).templatesForIntegration.map((e3) => new vS(this._request, e3));
        });
      }
    };
    var Bb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Zr, { id: e2 })).timeSchedule;
          return new fS(this._request, i2);
        });
      }
    };
    var Eb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Yr, e2)).timeSchedules;
          return new SS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Rb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Xr, e2)).triageResponsibilities;
          return new DS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Mb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(es, { id: e2 })).triageResponsibility;
          return new gS(this._request, i2);
        });
      }
    };
    var Lb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ns, { id: e2 })).user;
          return new wS(this._request, i2);
        });
      }
    };
    var zb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(ms, {})).userSettings;
          return new jS(this._request, e2);
        });
      }
    };
    var Hb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(fs, e2)).users;
          return new PS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Gb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(Ss, {})).verifyGitHubEnterpriseServerInstallation;
          return new bN(this._request, e2);
        });
      }
    };
    var Wb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(ys, {})).viewer;
          return new wS(this._request, e2);
        });
      }
    };
    var Qb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Vs, { id: e2 })).webhook;
          return new LS(this._request, i2);
        });
      }
    };
    var Jb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(_s, e2)).webhooks;
          return new zS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Kb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(As, { id: e2 })).workflowState;
          return new QS(this._request, i2);
        });
      }
    };
    var $b = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ws, e2)).workflowStates;
          return new KS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign({}, e2), i3))), i2);
        });
      }
    };
    var Zb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Is, { input: e2 })).airbyteIntegrationConnect;
          return new HN(this._request, i2);
        });
      }
    };
    var Yb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Cs, { id: e2 })).attachmentArchive;
          return new mv(this._request, i2);
        });
      }
    };
    var Xb = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ps, { input: e2 })).attachmentCreate;
          return new rv(this._request, i2);
        });
      }
    };
    var eg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(qs, { id: e2 })).attachmentDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var ig = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2, a2, t2) {
        return v(this, void 0, void 0, function* () {
          const d2 = (yield this._request(xs, Object.assign({ channelId: e2, issueId: i2, messageId: n2, url: a2 }, t2))).attachmentLinkDiscord;
          return new rv(this._request, d2);
        });
      }
    };
    var ng = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(js, Object.assign({ conversationId: e2, issueId: i2 }, n2))).attachmentLinkFront;
          return new pN(this._request, a2);
        });
      }
    };
    var ag = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(Os, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkGitHubIssue;
          return new rv(this._request, a2);
        });
      }
    };
    var tg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(Us, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkGitHubPR;
          return new rv(this._request, a2);
        });
      }
    };
    var dg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2, a2, t2) {
        return v(this, void 0, void 0, function* () {
          const d2 = (yield this._request(Bs, Object.assign({ issueId: e2, number: i2, projectPathWithNamespace: n2, url: a2 }, t2))).attachmentLinkGitLabMR;
          return new rv(this._request, d2);
        });
      }
    };
    var lg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(Es, Object.assign({ conversationId: e2, issueId: i2 }, n2))).attachmentLinkIntercom;
          return new rv(this._request, a2);
        });
      }
    };
    var mg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(Rs, Object.assign({ issueId: e2, jiraIssueId: i2 }, n2))).attachmentLinkJiraIssue;
          return new rv(this._request, a2);
        });
      }
    };
    var og = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(Ms, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkSlack;
          return new rv(this._request, a2);
        });
      }
    };
    var rg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(Ls, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkURL;
          return new rv(this._request, a2);
        });
      }
    };
    var sg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(zs, Object.assign({ issueId: e2, ticketId: i2 }, n2))).attachmentLinkZendesk;
          return new rv(this._request, a2);
        });
      }
    };
    var ug = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Hs, { id: e2 })).attachmentSyncToSlack;
          return new rv(this._request, i2);
        });
      }
    };
    var kg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Gs, { id: e2, input: i2 })).attachmentUpdate;
          return new rv(this._request, n2);
        });
      }
    };
    var pg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ws, { input: e2 })).commentCreate;
          return new bv(this._request, i2);
        });
      }
    };
    var cg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Qs, { id: e2 })).commentDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var vg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Js, Object.assign({ id: e2 }, i2))).commentResolve;
          return new bv(this._request, n2);
        });
      }
    };
    var Ng = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ks, { id: e2 })).commentUnresolve;
          return new bv(this._request, i2);
        });
      }
    };
    var hg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request($s, { id: e2, input: i2 })).commentUpdate;
          return new bv(this._request, n2);
        });
      }
    };
    var fg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Zs, { input: e2 })).contactCreate;
          return new gv(this._request, i2);
        });
      }
    };
    var Sg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ys, e2)).createCsvExportReport;
          return new Dv(this._request, i2);
        });
      }
    };
    var yg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Xs, Object.assign({ input: e2 }, i2))).createOrganizationFromOnboarding;
          return new Fv(this._request, n2);
        });
      }
    };
    var bg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(eu, Object.assign({ projectId: e2 }, i2))).createProjectUpdateReminder;
          return new Uf(this._request, n2);
        });
      }
    };
    var gg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(iu, { input: e2 })).customViewCreate;
          return new wv(this._request, i2);
        });
      }
    };
    var Dg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(nu, { id: e2 })).customViewDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var Fg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(au, { id: e2, input: i2 })).customViewUpdate;
          return new wv(this._request, n2);
        });
      }
    };
    var Vg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(tu, { id: e2 })).cycleArchive;
          return new Cv(this._request, i2);
        });
      }
    };
    var _g = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(du, { input: e2 })).cycleCreate;
          return new xv(this._request, i2);
        });
      }
    };
    var Ag = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(lu, { input: e2 })).cycleShiftAll;
          return new xv(this._request, i2);
        });
      }
    };
    var Tg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(mu, { id: e2 })).cycleStartUpcomingCycleToday;
          return new xv(this._request, i2);
        });
      }
    };
    var wg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(ou, { id: e2, input: i2 })).cycleUpdate;
          return new xv(this._request, n2);
        });
      }
    };
    var Ig = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ru, { input: e2 })).diaryEntryCreate;
          return new Uv(this._request, i2);
        });
      }
    };
    var Cg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(su, { id: e2 })).diaryEntryDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var Pg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(uu, { id: e2, input: i2 })).diaryEntryUpdate;
          return new Uv(this._request, n2);
        });
      }
    };
    var qg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ku, { input: e2 })).documentCreate;
          return new Gv(this._request, i2);
        });
      }
    };
    var xg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(pu, { id: e2 })).documentDelete;
          return new Ev(this._request, i2);
        });
      }
    };
    var jg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(cu, { id: e2 })).documentUnarchive;
          return new Ev(this._request, i2);
        });
      }
    };
    var Og = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(vu, { id: e2, input: i2 })).documentUpdate;
          return new Gv(this._request, n2);
        });
      }
    };
    var Ug = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Nu, { input: e2 })).emailIntakeAddressCreate;
          return new Kv(this._request, i2);
        });
      }
    };
    var Bg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(hu, { id: e2 })).emailIntakeAddressDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var Eg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(fu, { id: e2 })).emailIntakeAddressRotate;
          return new Kv(this._request, i2);
        });
      }
    };
    var Rg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Su, { id: e2, input: i2 })).emailIntakeAddressUpdate;
          return new Kv(this._request, n2);
        });
      }
    };
    var Mg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(yu, { input: e2 })).emailTokenUserAccountAuth;
          return new Nv(this._request, i2);
        });
      }
    };
    var Lg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(bu, { input: e2 })).emailUnsubscribe;
          return new $v(this._request, i2);
        });
      }
    };
    var zg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(gu, { input: e2 })).emailUserAccountAuthChallenge;
          return new Zv(this._request, i2);
        });
      }
    };
    var Hg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Du, { input: e2 })).emojiCreate;
          return new eN(this._request, i2);
        });
      }
    };
    var Gg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Fu, { id: e2 })).emojiDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var Wg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Vu, { input: e2 })).entityExternalLinkCreate;
          return new tN(this._request, i2);
        });
      }
    };
    var Qg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(_u, { id: e2 })).entityExternalLinkDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var Jg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Au, { id: e2, input: i2 })).entityExternalLinkUpdate;
          return new tN(this._request, n2);
        });
      }
    };
    var Kg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Tu, { input: e2 })).favoriteCreate;
          return new sN(this._request, i2);
        });
      }
    };
    var $g = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(wu, { id: e2 })).favoriteDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var Zg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Iu, { id: e2, input: i2 })).favoriteUpdate;
          return new sN(this._request, n2);
        });
      }
    };
    var Yg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2, a2) {
        return v(this, void 0, void 0, function* () {
          const t2 = (yield this._request(Cu, Object.assign({ contentType: e2, filename: i2, size: n2 }, a2))).fileUpload;
          return new TS(this._request, t2);
        });
      }
    };
    var Xg = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Pu, { input: e2 })).gitAutomationStateCreate;
          return new hN(this._request, i2);
        });
      }
    };
    var eD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(qu, { id: e2 })).gitAutomationStateDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var iD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(xu, { id: e2, input: i2 })).gitAutomationStateUpdate;
          return new hN(this._request, n2);
        });
      }
    };
    var nD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ju, { input: e2 })).gitAutomationTargetBranchCreate;
          return new SN(this._request, i2);
        });
      }
    };
    var aD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ou, { id: e2 })).gitAutomationTargetBranchDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var tD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Uu, { id: e2, input: i2 })).gitAutomationTargetBranchUpdate;
          return new SN(this._request, n2);
        });
      }
    };
    var dD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Bu, { input: e2 })).googleUserAccountAuth;
          return new Nv(this._request, i2);
        });
      }
    };
    var lD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Eu, { url: e2 })).imageUploadFromUrl;
          return new CN(this._request, i2);
        });
      }
    };
    var mD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2, a2) {
        return v(this, void 0, void 0, function* () {
          const t2 = (yield this._request(Ru, Object.assign({ contentType: e2, filename: i2, size: n2 }, a2))).importFileUpload;
          return new TS(this._request, t2);
        });
      }
    };
    var oD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Mu, { id: e2 })).initiativeArchive;
          return new qN(this._request, i2);
        });
      }
    };
    var rD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Lu, { input: e2 })).initiativeCreate;
          return new UN(this._request, i2);
        });
      }
    };
    var sD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(zu, { id: e2 })).initiativeDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var uD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Hu, { input: e2 })).initiativeToProjectCreate;
          return new RN(this._request, i2);
        });
      }
    };
    var kD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Gu, { id: e2 })).initiativeToProjectDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var pD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Wu, { id: e2, input: i2 })).initiativeToProjectUpdate;
          return new RN(this._request, n2);
        });
      }
    };
    var cD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Qu, { id: e2 })).initiativeUnarchive;
          return new qN(this._request, i2);
        });
      }
    };
    var vD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Ju, { id: e2, input: i2 })).initiativeUpdate;
          return new UN(this._request, n2);
        });
      }
    };
    var ND = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ku, { id: e2 })).integrationArchive;
          return new jv(this._request, i2);
        });
      }
    };
    var hD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request($u, { code: e2, redirectUri: i2 })).integrationAsksConnectChannel;
          return new dv(this._request, n2);
        });
      }
    };
    var fD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Zu, { id: e2 })).integrationDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var SD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Yu, { code: e2, redirectUri: i2 })).integrationDiscord;
          return new HN(this._request, n2);
        });
      }
    };
    var yD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Xu, { code: e2, redirectUri: i2 })).integrationFigma;
          return new HN(this._request, n2);
        });
      }
    };
    var bD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(ek, { code: e2, redirectUri: i2 })).integrationFront;
          return new HN(this._request, n2);
        });
      }
    };
    var gD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(ik, Object.assign({ githubUrl: e2 }, i2))).integrationGitHubEnterpriseServerConnect;
          return new gN(this._request, n2);
        });
      }
    };
    var DD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(nk, { code: e2 })).integrationGitHubPersonal;
          return new HN(this._request, i2);
        });
      }
    };
    var FD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(ak, {})).integrationGithubCommitCreate;
          return new yN(this._request, e2);
        });
      }
    };
    var VD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(tk, { installationId: e2 })).integrationGithubConnect;
          return new HN(this._request, i2);
        });
      }
    };
    var _D = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(dk, { installationId: e2 })).integrationGithubImportConnect;
          return new HN(this._request, i2);
        });
      }
    };
    var AD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(lk, { accessToken: e2, gitlabUrl: i2 })).integrationGitlabConnect;
          return new TN(this._request, n2);
        });
      }
    };
    var TD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(mk, { code: e2 })).integrationGoogleSheets;
          return new HN(this._request, i2);
        });
      }
    };
    var wD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(ok, Object.assign({ code: e2, redirectUri: i2 }, n2))).integrationIntercom;
          return new HN(this._request, a2);
        });
      }
    };
    var ID = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(rk, {})).integrationIntercomDelete;
          return new HN(this._request, e2);
        });
      }
    };
    var CD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(sk, { input: e2 })).integrationIntercomSettingsUpdate;
          return new HN(this._request, i2);
        });
      }
    };
    var PD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(uk, e2)).integrationJiraPersonal;
          return new HN(this._request, i2);
        });
      }
    };
    var qD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(kk, {})).integrationLoom;
          return new HN(this._request, e2);
        });
      }
    };
    var xD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(pk, { input: e2 })).integrationRequest;
          return new GN(this._request, i2);
        });
      }
    };
    var jD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(ck, { code: e2, installationId: i2, organizationSlug: n2 })).integrationSentryConnect;
          return new HN(this._request, a2);
        });
      }
    };
    var OD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(vk, Object.assign({ code: e2, redirectUri: i2 }, n2))).integrationSlack;
          return new HN(this._request, a2);
        });
      }
    };
    var UD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Nk, { code: e2, redirectUri: i2 })).integrationSlackAsks;
          return new HN(this._request, n2);
        });
      }
    };
    var BD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(hk, { code: e2, customViewId: i2, redirectUri: n2 })).integrationSlackCustomViewNotifications;
          return new nS(this._request, a2);
        });
      }
    };
    var ED = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(fk, { code: e2, redirectUri: i2 })).integrationSlackImportEmojis;
          return new HN(this._request, n2);
        });
      }
    };
    var RD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Sk, { code: e2, redirectUri: i2 })).integrationSlackOrgProjectUpdatesPost;
          return new nS(this._request, n2);
        });
      }
    };
    var MD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(yk, { code: e2, redirectUri: i2 })).integrationSlackPersonal;
          return new HN(this._request, n2);
        });
      }
    };
    var LD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2, a2) {
        return v(this, void 0, void 0, function* () {
          const t2 = (yield this._request(bk, Object.assign({ code: e2, redirectUri: i2, teamId: n2 }, a2))).integrationSlackPost;
          return new nS(this._request, t2);
        });
      }
    };
    var zD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2, a2) {
        return v(this, void 0, void 0, function* () {
          const t2 = (yield this._request(gk, { code: e2, projectId: i2, redirectUri: n2, service: a2 })).integrationSlackProjectPost;
          return new nS(this._request, t2);
        });
      }
    };
    var HD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Dk, { input: e2 })).integrationTemplateCreate;
          return new JN(this._request, i2);
        });
      }
    };
    var GD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Fk, { id: e2 })).integrationTemplateDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var WD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2, a2) {
        return v(this, void 0, void 0, function* () {
          const t2 = (yield this._request(Vk, { code: e2, redirectUri: i2, scope: n2, subdomain: a2 })).integrationZendesk;
          return new HN(this._request, t2);
        });
      }
    };
    var QD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(_k, { input: e2 })).integrationsSettingsCreate;
          return new $N(this._request, i2);
        });
      }
    };
    var JD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Ak, { id: e2, input: i2 })).integrationsSettingsUpdate;
          return new $N(this._request, n2);
        });
      }
    };
    var KD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Tk, { id: e2, labelId: i2 })).issueAddLabel;
          return new Nh(this._request, n2);
        });
      }
    };
    var $D = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(wk, Object.assign({ id: e2 }, i2))).issueArchive;
          return new XN(this._request, n2);
        });
      }
    };
    var ZD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Ik, { ids: e2, input: i2 })).issueBatchUpdate;
          return new eh(this._request, n2);
        });
      }
    };
    var YD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ck, { input: e2 })).issueCreate;
          return new Nh(this._request, i2);
        });
      }
    };
    var XD = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Pk, Object.assign({ id: e2 }, i2))).issueDelete;
          return new XN(this._request, n2);
        });
      }
    };
    var eF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(qk, { id: e2 })).issueDraftArchive;
          return new nh(this._request, i2);
        });
      }
    };
    var iF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(xk, { input: e2 })).issueDraftCreate;
          return new ah(this._request, i2);
        });
      }
    };
    var nF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(jk, { id: e2 })).issueDraftDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var aF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Ok, { id: e2, input: i2 })).issueDraftUpdate;
          return new ah(this._request, n2);
        });
      }
    };
    var tF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(Uk, Object.assign({ asanaTeamName: e2, asanaToken: i2 }, n2))).issueImportCreateAsana;
          return new sh(this._request, a2);
        });
      }
    };
    var dF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Bk, Object.assign({ csvUrl: e2 }, i2))).issueImportCreateCSVJira;
          return new sh(this._request, n2);
        });
      }
    };
    var lF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(Ek, Object.assign({ clubhouseGroupName: e2, clubhouseToken: i2 }, n2))).issueImportCreateClubhouse;
          return new sh(this._request, a2);
        });
      }
    };
    var mF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Rk, e2)).issueImportCreateGithub;
          return new sh(this._request, i2);
        });
      }
    };
    var oF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2, a2, t2) {
        return v(this, void 0, void 0, function* () {
          const d2 = (yield this._request(Mk, Object.assign({ jiraEmail: e2, jiraHostname: i2, jiraProject: n2, jiraToken: a2 }, t2))).issueImportCreateJira;
          return new sh(this._request, d2);
        });
      }
    };
    var rF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Lk, { issueImportId: e2 })).issueImportDelete;
          return new rh(this._request, i2);
        });
      }
    };
    var sF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(zk, { issueImportId: e2, mapping: i2 })).issueImportProcess;
          return new sh(this._request, n2);
        });
      }
    };
    var uF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Hk, { id: e2, input: i2 })).issueImportUpdate;
          return new sh(this._request, n2);
        });
      }
    };
    var kF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Gk, Object.assign({ input: e2 }, i2))).issueLabelCreate;
          return new ch(this._request, n2);
        });
      }
    };
    var pF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Wk, { id: e2 })).issueLabelDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var cF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2, n2) {
        return v(this, void 0, void 0, function* () {
          const a2 = (yield this._request(Qk, Object.assign({ id: e2, input: i2 }, n2))).issueLabelUpdate;
          return new ch(this._request, a2);
        });
      }
    };
    var vF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Jk, Object.assign({ input: e2 }, i2))).issueRelationCreate;
          return new bh(this._request, n2);
        });
      }
    };
    var NF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Kk, { id: e2 })).issueRelationDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var hF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request($k, { id: e2, input: i2 })).issueRelationUpdate;
          return new bh(this._request, n2);
        });
      }
    };
    var fF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Zk, { id: e2, reminderAt: i2 })).issueReminder;
          return new Nh(this._request, n2);
        });
      }
    };
    var SF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Yk, { id: e2, labelId: i2 })).issueRemoveLabel;
          return new Nh(this._request, n2);
        });
      }
    };
    var yF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Xk, Object.assign({ id: e2 }, i2))).issueSubscribe;
          return new Nh(this._request, n2);
        });
      }
    };
    var bF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ep, { id: e2 })).issueUnarchive;
          return new XN(this._request, i2);
        });
      }
    };
    var gF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(ip, Object.assign({ id: e2 }, i2))).issueUnsubscribe;
          return new Nh(this._request, n2);
        });
      }
    };
    var DF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(np, { id: e2, input: i2 })).issueUpdate;
          return new Nh(this._request, n2);
        });
      }
    };
    var FF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ap2, { input: e2 })).joinOrganizationFromOnboarding;
          return new Fv(this._request, i2);
        });
      }
    };
    var VF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(tp, { organizationId: e2 })).leaveOrganization;
          return new Fv(this._request, i2);
        });
      }
    };
    var _F = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(dp, {})).logout;
          return new Ih(this._request, e2);
        });
      }
    };
    var AF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(lp, {})).logoutAllSessions;
          return new Ih(this._request, e2);
        });
      }
    };
    var TF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(mp, {})).logoutOtherSessions;
          return new Ih(this._request, e2);
        });
      }
    };
    var wF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(op, { sessionId: e2 })).logoutSession;
          return new Ih(this._request, i2);
        });
      }
    };
    var IF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(rp, { id: e2 })).notificationArchive;
          return new Ph(this._request, i2);
        });
      }
    };
    var CF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(sp, { input: e2 })).notificationArchiveAll;
          return new qh(this._request, i2);
        });
      }
    };
    var PF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(up, { input: e2, readAt: i2 })).notificationMarkReadAll;
          return new qh(this._request, n2);
        });
      }
    };
    var qF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(kp, { input: e2 })).notificationMarkUnreadAll;
          return new qh(this._request, i2);
        });
      }
    };
    var xF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(pp, { input: e2, snoozedUntilAt: i2 })).notificationSnoozeAll;
          return new qh(this._request, n2);
        });
      }
    };
    var jF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(cp, { input: e2 })).notificationSubscriptionCreate;
          return new Lh(this._request, i2);
        });
      }
    };
    var OF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(vp, { id: e2 })).notificationSubscriptionDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var UF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Np, { id: e2, input: i2 })).notificationSubscriptionUpdate;
          return new Lh(this._request, n2);
        });
      }
    };
    var BF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(hp, { id: e2 })).notificationUnarchive;
          return new Ph(this._request, i2);
        });
      }
    };
    var EF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(fp, { input: e2, unsnoozedAt: i2 })).notificationUnsnoozeAll;
          return new qh(this._request, n2);
        });
      }
    };
    var RF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Sp, { id: e2, input: i2 })).notificationUpdate;
          return new Eh(this._request, n2);
        });
      }
    };
    var MF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(yp, {})).organizationCancelDelete;
          return new $h(this._request, e2);
        });
      }
    };
    var LF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(bp, { input: e2 })).organizationDelete;
          return new Zh(this._request, i2);
        });
      }
    };
    var zF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(gp, {})).organizationDeleteChallenge;
          return new Zh(this._request, e2);
        });
      }
    };
    var HF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Dp, { id: e2 })).organizationDomainDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var GF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Fp, { input: e2 })).organizationInviteCreate;
          return new nf(this._request, i2);
        });
      }
    };
    var WF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Vp, { id: e2 })).organizationInviteDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var QF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(_p, { id: e2, input: i2 })).organizationInviteUpdate;
          return new nf(this._request, n2);
        });
      }
    };
    var JF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(Ap, {})).organizationStartTrial;
          return new df(this._request, e2);
        });
      }
    };
    var KF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Tp, { input: e2 })).organizationUpdate;
          return new tf(this._request, i2);
        });
      }
    };
    var $F = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(wp, Object.assign({ id: e2 }, i2))).projectArchive;
          return new sf(this._request, n2);
        });
      }
    };
    var ZF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Ip, Object.assign({ input: e2 }, i2))).projectCreate;
          return new Vf(this._request, n2);
        });
      }
    };
    var YF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Cp, { id: e2 })).projectDelete;
          return new sf(this._request, i2);
        });
      }
    };
    var XF = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Pp, { input: e2 })).projectLinkCreate;
          return new hf(this._request, i2);
        });
      }
    };
    var eV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(qp, { id: e2 })).projectLinkDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var iV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(xp, { id: e2, input: i2 })).projectLinkUpdate;
          return new hf(this._request, n2);
        });
      }
    };
    var nV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(jp, { input: e2 })).projectMilestoneCreate;
          return new gf(this._request, i2);
        });
      }
    };
    var aV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Op, { id: e2 })).projectMilestoneDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var tV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Up, { id: e2, input: i2 })).projectMilestoneUpdate;
          return new gf(this._request, n2);
        });
      }
    };
    var dV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Bp, { id: e2 })).projectUnarchive;
          return new sf(this._request, i2);
        });
      }
    };
    var lV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Ep, { id: e2, input: i2 })).projectUpdate;
          return new Vf(this._request, n2);
        });
      }
    };
    var mV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Rp, { input: e2 })).projectUpdateCreate;
          return new Of(this._request, i2);
        });
      }
    };
    var oV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Mp, { id: e2 })).projectUpdateDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var rV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Lp, { input: e2 })).projectUpdateInteractionCreate;
          return new jf(this._request, i2);
        });
      }
    };
    var sV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(zp, { id: e2 })).projectUpdateMarkAsRead;
          return new Bf(this._request, i2);
        });
      }
    };
    var uV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Hp, { id: e2, input: i2 })).projectUpdateUpdate;
          return new Of(this._request, n2);
        });
      }
    };
    var kV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Gp, { input: e2 })).pushSubscriptionCreate;
          return new Rf(this._request, i2);
        });
      }
    };
    var pV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Wp, { id: e2 })).pushSubscriptionDelete;
          return new Rf(this._request, i2);
        });
      }
    };
    var cV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Qp, { input: e2 })).reactionCreate;
          return new Gf(this._request, i2);
        });
      }
    };
    var vV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Jp, { id: e2 })).reactionDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var NV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Kp, { id: e2 })).refreshGoogleSheetsData;
          return new HN(this._request, i2);
        });
      }
    };
    var hV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request($p, { id: e2 })).resendOrganizationInvite;
          return new jv(this._request, i2);
        });
      }
    };
    var fV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Zp, { id: e2 })).roadmapArchive;
          return new Qf(this._request, i2);
        });
      }
    };
    var SV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Yp, { input: e2 })).roadmapCreate;
          return new Kf(this._request, i2);
        });
      }
    };
    var yV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Xp, { id: e2 })).roadmapDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var bV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ec, { input: e2 })).roadmapToProjectCreate;
          return new Yf(this._request, i2);
        });
      }
    };
    var gV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ic, { id: e2 })).roadmapToProjectDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var DV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(nc, { id: e2, input: i2 })).roadmapToProjectUpdate;
          return new Yf(this._request, n2);
        });
      }
    };
    var FV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ac, { id: e2 })).roadmapUnarchive;
          return new Qf(this._request, i2);
        });
      }
    };
    var VV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(tc, { id: e2, input: i2 })).roadmapUpdate;
          return new Kf(this._request, n2);
        });
      }
    };
    var _V = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(dc, { input: e2 })).samlTokenUserAccountAuth;
          return new Nv(this._request, i2);
        });
      }
    };
    var AV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(lc, Object.assign({ input: e2 }, i2))).teamCreate;
          return new cS(this._request, n2);
        });
      }
    };
    var TV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(mc, { id: e2 })).teamCyclesDelete;
          return new cS(this._request, i2);
        });
      }
    };
    var wV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(oc, { id: e2 })).teamDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var IV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(rc, { id: e2 })).teamKeyDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var CV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(sc, { input: e2 })).teamMembershipCreate;
          return new kS(this._request, i2);
        });
      }
    };
    var PV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(uc, { id: e2 })).teamMembershipDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var qV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(kc, { id: e2, input: i2 })).teamMembershipUpdate;
          return new kS(this._request, n2);
        });
      }
    };
    var xV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(pc, { id: e2 })).teamUnarchive;
          return new oS(this._request, i2);
        });
      }
    };
    var jV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(cc, { id: e2, input: i2 })).teamUpdate;
          return new cS(this._request, n2);
        });
      }
    };
    var OV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(vc, { input: e2 })).templateCreate;
          return new hS(this._request, i2);
        });
      }
    };
    var UV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Nc, { id: e2 })).templateDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var BV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(hc, { id: e2, input: i2 })).templateUpdate;
          return new hS(this._request, n2);
        });
      }
    };
    var EV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(fc, { input: e2 })).timeScheduleCreate;
          return new bS(this._request, i2);
        });
      }
    };
    var RV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Sc, { id: e2 })).timeScheduleDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var MV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(yc, { id: e2 })).timeScheduleRefreshIntegrationSchedule;
          return new bS(this._request, i2);
        });
      }
    };
    var LV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(bc, { id: e2, input: i2 })).timeScheduleUpdate;
          return new bS(this._request, n2);
        });
      }
    };
    var zV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(gc, { externalId: e2, input: i2 })).timeScheduleUpsertExternal;
          return new bS(this._request, n2);
        });
      }
    };
    var HV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Dc, { input: e2 })).triageResponsibilityCreate;
          return new VS(this._request, i2);
        });
      }
    };
    var GV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Fc, { id: e2 })).triageResponsibilityDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var WV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Vc, { id: e2, input: i2 })).triageResponsibilityUpdate;
          return new VS(this._request, n2);
        });
      }
    };
    var QV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(_c, { id: e2 })).userDemoteAdmin;
          return new IS(this._request, i2);
        });
      }
    };
    var JV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ac, { id: e2 })).userDemoteMember;
          return new IS(this._request, i2);
        });
      }
    };
    var KV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Tc, { code: e2, redirectUri: i2 })).userDiscordConnect;
          return new xS(this._request, n2);
        });
      }
    };
    var $V = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(wc, { service: e2 })).userExternalUserDisconnect;
          return new xS(this._request, i2);
        });
      }
    };
    var ZV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Ic, { flag: e2, operation: i2 })).userFlagUpdate;
          return new OS(this._request, n2);
        });
      }
    };
    var YV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Cc, { id: e2 })).userPromoteAdmin;
          return new IS(this._request, i2);
        });
      }
    };
    var XV = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Pc, { id: e2 })).userPromoteMember;
          return new IS(this._request, i2);
        });
      }
    };
    var e_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(qc, e2)).userSettingsFlagsReset;
          return new US(this._request, i2);
        });
      }
    };
    var i_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(xc, { id: e2, input: i2 })).userSettingsUpdate;
          return new BS(this._request, n2);
        });
      }
    };
    var n_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(jc, { id: e2 })).userSuspend;
          return new IS(this._request, i2);
        });
      }
    };
    var a_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Oc, { id: e2 })).userUnsuspend;
          return new IS(this._request, i2);
        });
      }
    };
    var t_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Uc, { id: e2, input: i2 })).userUpdate;
          return new xS(this._request, n2);
        });
      }
    };
    var d_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Bc, { input: e2 })).viewPreferencesCreate;
          return new RS(this._request, i2);
        });
      }
    };
    var l_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ec, { id: e2 })).viewPreferencesDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var m_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Rc, { id: e2, input: i2 })).viewPreferencesUpdate;
          return new RS(this._request, n2);
        });
      }
    };
    var o_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Mc, { input: e2 })).webhookCreate;
          return new HS(this._request, i2);
        });
      }
    };
    var r_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Lc, { id: e2 })).webhookDelete;
          return new jv(this._request, i2);
        });
      }
    };
    var s_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(zc, { id: e2, input: i2 })).webhookUpdate;
          return new HS(this._request, n2);
        });
      }
    };
    var u_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Hc, { id: e2 })).workflowStateArchive;
          return new JS(this._request, i2);
        });
      }
    };
    var k_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Gc, { input: e2 })).workflowStateCreate;
          return new $S(this._request, i2);
        });
      }
    };
    var p_ = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch(e2, i2) {
        return v(this, void 0, void 0, function* () {
          const n2 = (yield this._request(Wc, { id: e2, input: i2 })).workflowStateUpdate;
          return new $S(this._request, n2);
        });
      }
    };
    var c_ = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(rm, e2)).comment.children;
          return new yv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var v_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(pm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).customView.issues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var N_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Nm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).customView.projects;
          return new uf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var h_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Dm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).cycle.issues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var f_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Fm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).cycle.uncompletedIssuesUponClose;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var S_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Tm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).document.comments;
          return new yv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var y_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Um, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).favorite.children;
          return new rN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var b_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Rm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiative.links;
          return new aN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var g_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Mm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiative.projects;
          return new uf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var D_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ym, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.attachments;
          return new ov(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var F_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(eo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.children;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var V_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(io, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.comments;
          return new yv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var __ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(no, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.history;
          return new lh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var A_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ao, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.inverseRelations;
          return new Sh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var T_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(to, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.labels;
          return new ph(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var w_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(lo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.relations;
          return new Sh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var I_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(mo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.subscribers;
          return new PS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var C_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(po, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issueLabel.children;
          return new ph(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var P_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(co, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issueLabel.issues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var q_ = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Oo, e2)).organization.integrations;
          return new LN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var x_ = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Uo, e2)).organization.labels;
          return new ph(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var j_ = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Eo, e2)).organization.teams;
          return new rS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var O_ = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ro, e2)).organization.templates;
          return new NS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var U_ = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Mo, e2)).organization.users;
          return new PS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var B_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Qo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.documents;
          return new Rv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var E_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Jo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.externalLinks;
          return new aN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var R_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ko, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.history;
          return new cf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var M_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request($o, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.initiatives;
          return new xN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var L_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Zo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.issues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var z_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Yo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.links;
          return new Nf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var H_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Xo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.members;
          return new PS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var G_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(er, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.projectMilestones;
          return new Sf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var W_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ir, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.projectUpdates;
          return new Pf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var Q_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ar, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.teams;
          return new rS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var J_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(rr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).projectMilestone.issues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var K_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(cr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).projectUpdate.comments;
          return new yv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var $_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(gr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).roadmap.projects;
          return new uf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var Z_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(jr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.cycles;
          return new Pv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var Y_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Or3, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.gitAutomationStates;
          return new NN(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var X_ = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ur, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.issues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var eA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Br, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.labels;
          return new ph(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var iA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Er, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.members;
          return new PS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var nA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Rr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.memberships;
          return new uS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var aA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Mr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.projects;
          return new uf(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var tA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Lr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.states;
          return new KS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var dA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(zr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.templates;
          return new NS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var lA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Hr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.webhooks;
          return new zS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var mA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(as4, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.assignedIssues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var oA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ts, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.createdIssues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var rA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ds, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.teamMemberships;
          return new uS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var sA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(ls, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.teams;
          return new rS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var uA = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ts, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).workflowState.issues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    };
    var kA = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      administrableTeams(e2) {
        return new YS(this._request).fetch(e2);
      }
      apiKeys(e2) {
        return new XS(this._request).fetch(e2);
      }
      applicationInfo(e2) {
        return new ey(this._request).fetch(e2);
      }
      applicationWithAuthorization(e2, i2, n2) {
        return new iy(this._request).fetch(e2, i2, n2);
      }
      archivedModelSync(e2, i2) {
        return new ny(this._request).fetch(e2, i2);
      }
      archivedModelsSync(e2, i2, n2) {
        return new ay(this._request).fetch(e2, i2, n2);
      }
      attachment(e2) {
        return new ty(this._request).fetch(e2);
      }
      attachmentIssue(e2) {
        return new dy(this._request).fetch(e2);
      }
      attachments(e2) {
        return new ly(this._request).fetch(e2);
      }
      attachmentsForURL(e2, i2) {
        return new my(this._request).fetch(e2, i2);
      }
      auditEntries(e2) {
        return new oy(this._request).fetch(e2);
      }
      get auditEntryTypes() {
        return new ry(this._request).fetch();
      }
      get authenticationSessions() {
        return new sy(this._request).fetch();
      }
      get availableUsers() {
        return new uy(this._request).fetch();
      }
      comment(e2) {
        return new ky(this._request).fetch(e2);
      }
      comments(e2) {
        return new py(this._request).fetch(e2);
      }
      customView(e2) {
        return new cy(this._request).fetch(e2);
      }
      customViewHasSubscribers(e2) {
        return new vy(this._request).fetch(e2);
      }
      customViews(e2) {
        return new Ny(this._request).fetch(e2);
      }
      cycle(e2) {
        return new hy(this._request).fetch(e2);
      }
      cycles(e2) {
        return new fy(this._request).fetch(e2);
      }
      diaryEntry(e2) {
        return new Sy(this._request).fetch(e2);
      }
      document(e2) {
        return new yy(this._request).fetch(e2);
      }
      documentContentHistory(e2) {
        return new by(this._request).fetch(e2);
      }
      documents(e2) {
        return new gy(this._request).fetch(e2);
      }
      emoji(e2) {
        return new Dy(this._request).fetch(e2);
      }
      emojis(e2) {
        return new Fy(this._request).fetch(e2);
      }
      entityExternalLink(e2) {
        return new Vy(this._request).fetch(e2);
      }
      externalUser(e2) {
        return new _y(this._request).fetch(e2);
      }
      externalUsers(e2) {
        return new Ay(this._request).fetch(e2);
      }
      favorite(e2) {
        return new Ty(this._request).fetch(e2);
      }
      favorites(e2) {
        return new wy(this._request).fetch(e2);
      }
      initiative(e2) {
        return new Iy(this._request).fetch(e2);
      }
      initiativeToProject(e2) {
        return new Cy(this._request).fetch(e2);
      }
      initiativeToProjects(e2) {
        return new Py(this._request).fetch(e2);
      }
      initiatives(e2) {
        return new qy(this._request).fetch(e2);
      }
      integration(e2) {
        return new xy(this._request).fetch(e2);
      }
      integrationHasScopes(e2, i2) {
        return new jy(this._request).fetch(e2, i2);
      }
      integrationTemplate(e2) {
        return new Oy(this._request).fetch(e2);
      }
      integrationTemplates(e2) {
        return new Uy(this._request).fetch(e2);
      }
      integrations(e2) {
        return new By(this._request).fetch(e2);
      }
      integrationsSettings(e2) {
        return new Ey(this._request).fetch(e2);
      }
      issue(e2) {
        return new Ry(this._request).fetch(e2);
      }
      issueFigmaFileKeySearch(e2, i2) {
        return new My(this._request).fetch(e2, i2);
      }
      issueFilterSuggestion(e2, i2) {
        return new Ly(this._request).fetch(e2, i2);
      }
      issueImportCheckCSV(e2, i2) {
        return new zy(this._request).fetch(e2, i2);
      }
      issueImportCheckSync(e2) {
        return new Hy(this._request).fetch(e2);
      }
      issueLabel(e2) {
        return new Gy(this._request).fetch(e2);
      }
      issueLabels(e2) {
        return new Wy(this._request).fetch(e2);
      }
      get issuePriorityValues() {
        return new Qy(this._request).fetch();
      }
      issueRelation(e2) {
        return new Jy(this._request).fetch(e2);
      }
      issueRelations(e2) {
        return new Ky(this._request).fetch(e2);
      }
      issueSearch(e2) {
        return new $y(this._request).fetch(e2);
      }
      issueVcsBranchSearch(e2) {
        return new Zy(this._request).fetch(e2);
      }
      issues(e2) {
        return new Yy(this._request).fetch(e2);
      }
      notification(e2) {
        return new Xy(this._request).fetch(e2);
      }
      notificationSubscription(e2) {
        return new eb(this._request).fetch(e2);
      }
      notificationSubscriptions(e2) {
        return new ib(this._request).fetch(e2);
      }
      notifications(e2) {
        return new nb(this._request).fetch(e2);
      }
      get organization() {
        return new ab(this._request).fetch();
      }
      organizationExists(e2) {
        return new tb(this._request).fetch(e2);
      }
      organizationInvite(e2) {
        return new db(this._request).fetch(e2);
      }
      organizationInvites(e2) {
        return new lb(this._request).fetch(e2);
      }
      project(e2) {
        return new mb(this._request).fetch(e2);
      }
      projectFilterSuggestion(e2) {
        return new ob(this._request).fetch(e2);
      }
      projectLink(e2) {
        return new rb(this._request).fetch(e2);
      }
      projectLinks(e2) {
        return new sb(this._request).fetch(e2);
      }
      projectMilestone(e2) {
        return new ub(this._request).fetch(e2);
      }
      projectMilestones(e2) {
        return new kb(this._request).fetch(e2);
      }
      projectRelation(e2) {
        return new pb(this._request).fetch(e2);
      }
      projectRelations(e2) {
        return new cb(this._request).fetch(e2);
      }
      projectUpdate(e2) {
        return new vb(this._request).fetch(e2);
      }
      projectUpdateInteraction(e2) {
        return new Nb(this._request).fetch(e2);
      }
      projectUpdateInteractions(e2) {
        return new hb(this._request).fetch(e2);
      }
      projectUpdates(e2) {
        return new fb(this._request).fetch(e2);
      }
      projects(e2) {
        return new Sb(this._request).fetch(e2);
      }
      pushSubscriptionTest(e2) {
        return new yb(this._request).fetch(e2);
      }
      get rateLimitStatus() {
        return new bb(this._request).fetch();
      }
      roadmap(e2) {
        return new gb(this._request).fetch(e2);
      }
      roadmapToProject(e2) {
        return new Db(this._request).fetch(e2);
      }
      roadmapToProjects(e2) {
        return new Fb(this._request).fetch(e2);
      }
      roadmaps(e2) {
        return new Vb(this._request).fetch(e2);
      }
      searchDocuments(e2, i2) {
        return new _b(this._request).fetch(e2, i2);
      }
      searchIssues(e2, i2) {
        return new Ab(this._request).fetch(e2, i2);
      }
      searchProjects(e2, i2) {
        return new Tb(this._request).fetch(e2, i2);
      }
      ssoUrlFromEmail(e2, i2) {
        return new wb(this._request).fetch(e2, i2);
      }
      get syncEntityCount() {
        return new Ib(this._request).fetch();
      }
      team(e2) {
        return new Cb(this._request).fetch(e2);
      }
      teamMembership(e2) {
        return new Pb(this._request).fetch(e2);
      }
      teamMemberships(e2) {
        return new qb(this._request).fetch(e2);
      }
      teams(e2) {
        return new xb(this._request).fetch(e2);
      }
      template(e2) {
        return new jb(this._request).fetch(e2);
      }
      get templates() {
        return new Ob(this._request).fetch();
      }
      templatesForIntegration(e2) {
        return new Ub(this._request).fetch(e2);
      }
      timeSchedule(e2) {
        return new Bb(this._request).fetch(e2);
      }
      timeSchedules(e2) {
        return new Eb(this._request).fetch(e2);
      }
      triageResponsibilities(e2) {
        return new Rb(this._request).fetch(e2);
      }
      triageResponsibility(e2) {
        return new Mb(this._request).fetch(e2);
      }
      user(e2) {
        return new Lb(this._request).fetch(e2);
      }
      get userSettings() {
        return new zb(this._request).fetch();
      }
      users(e2) {
        return new Hb(this._request).fetch(e2);
      }
      get verifyGitHubEnterpriseServerInstallation() {
        return new Gb(this._request).fetch();
      }
      get viewer() {
        return new Wb(this._request).fetch();
      }
      webhook(e2) {
        return new Qb(this._request).fetch(e2);
      }
      webhooks(e2) {
        return new Jb(this._request).fetch(e2);
      }
      workflowState(e2) {
        return new Kb(this._request).fetch(e2);
      }
      workflowStates(e2) {
        return new $b(this._request).fetch(e2);
      }
      airbyteIntegrationConnect(e2) {
        return new Zb(this._request).fetch(e2);
      }
      archiveAttachment(e2) {
        return new Yb(this._request).fetch(e2);
      }
      createAttachment(e2) {
        return new Xb(this._request).fetch(e2);
      }
      deleteAttachment(e2) {
        return new eg(this._request).fetch(e2);
      }
      attachmentLinkDiscord(e2, i2, n2, a2, t2) {
        return new ig(this._request).fetch(e2, i2, n2, a2, t2);
      }
      attachmentLinkFront(e2, i2, n2) {
        return new ng(this._request).fetch(e2, i2, n2);
      }
      attachmentLinkGitHubIssue(e2, i2, n2) {
        return new ag(this._request).fetch(e2, i2, n2);
      }
      attachmentLinkGitHubPR(e2, i2, n2) {
        return new tg(this._request).fetch(e2, i2, n2);
      }
      attachmentLinkGitLabMR(e2, i2, n2, a2, t2) {
        return new dg(this._request).fetch(e2, i2, n2, a2, t2);
      }
      attachmentLinkIntercom(e2, i2, n2) {
        return new lg(this._request).fetch(e2, i2, n2);
      }
      attachmentLinkJiraIssue(e2, i2, n2) {
        return new mg(this._request).fetch(e2, i2, n2);
      }
      attachmentLinkSlack(e2, i2, n2) {
        return new og(this._request).fetch(e2, i2, n2);
      }
      attachmentLinkURL(e2, i2, n2) {
        return new rg(this._request).fetch(e2, i2, n2);
      }
      attachmentLinkZendesk(e2, i2, n2) {
        return new sg(this._request).fetch(e2, i2, n2);
      }
      attachmentSyncToSlack(e2) {
        return new ug(this._request).fetch(e2);
      }
      updateAttachment(e2, i2) {
        return new kg(this._request).fetch(e2, i2);
      }
      createComment(e2) {
        return new pg(this._request).fetch(e2);
      }
      deleteComment(e2) {
        return new cg(this._request).fetch(e2);
      }
      commentResolve(e2, i2) {
        return new vg(this._request).fetch(e2, i2);
      }
      commentUnresolve(e2) {
        return new Ng(this._request).fetch(e2);
      }
      updateComment(e2, i2) {
        return new hg(this._request).fetch(e2, i2);
      }
      createContact(e2) {
        return new fg(this._request).fetch(e2);
      }
      createCsvExportReport(e2) {
        return new Sg(this._request).fetch(e2);
      }
      createOrganizationFromOnboarding(e2, i2) {
        return new yg(this._request).fetch(e2, i2);
      }
      createProjectUpdateReminder(e2, i2) {
        return new bg(this._request).fetch(e2, i2);
      }
      createCustomView(e2) {
        return new gg(this._request).fetch(e2);
      }
      deleteCustomView(e2) {
        return new Dg(this._request).fetch(e2);
      }
      updateCustomView(e2, i2) {
        return new Fg(this._request).fetch(e2, i2);
      }
      archiveCycle(e2) {
        return new Vg(this._request).fetch(e2);
      }
      createCycle(e2) {
        return new _g(this._request).fetch(e2);
      }
      cycleShiftAll(e2) {
        return new Ag(this._request).fetch(e2);
      }
      cycleStartUpcomingCycleToday(e2) {
        return new Tg(this._request).fetch(e2);
      }
      updateCycle(e2, i2) {
        return new wg(this._request).fetch(e2, i2);
      }
      createDiaryEntry(e2) {
        return new Ig(this._request).fetch(e2);
      }
      deleteDiaryEntry(e2) {
        return new Cg(this._request).fetch(e2);
      }
      updateDiaryEntry(e2, i2) {
        return new Pg(this._request).fetch(e2, i2);
      }
      createDocument(e2) {
        return new qg(this._request).fetch(e2);
      }
      deleteDocument(e2) {
        return new xg(this._request).fetch(e2);
      }
      unarchiveDocument(e2) {
        return new jg(this._request).fetch(e2);
      }
      updateDocument(e2, i2) {
        return new Og(this._request).fetch(e2, i2);
      }
      createEmailIntakeAddress(e2) {
        return new Ug(this._request).fetch(e2);
      }
      deleteEmailIntakeAddress(e2) {
        return new Bg(this._request).fetch(e2);
      }
      emailIntakeAddressRotate(e2) {
        return new Eg(this._request).fetch(e2);
      }
      updateEmailIntakeAddress(e2, i2) {
        return new Rg(this._request).fetch(e2, i2);
      }
      emailTokenUserAccountAuth(e2) {
        return new Mg(this._request).fetch(e2);
      }
      emailUnsubscribe(e2) {
        return new Lg(this._request).fetch(e2);
      }
      emailUserAccountAuthChallenge(e2) {
        return new zg(this._request).fetch(e2);
      }
      createEmoji(e2) {
        return new Hg(this._request).fetch(e2);
      }
      deleteEmoji(e2) {
        return new Gg(this._request).fetch(e2);
      }
      createEntityExternalLink(e2) {
        return new Wg(this._request).fetch(e2);
      }
      deleteEntityExternalLink(e2) {
        return new Qg(this._request).fetch(e2);
      }
      updateEntityExternalLink(e2, i2) {
        return new Jg(this._request).fetch(e2, i2);
      }
      createFavorite(e2) {
        return new Kg(this._request).fetch(e2);
      }
      deleteFavorite(e2) {
        return new $g(this._request).fetch(e2);
      }
      updateFavorite(e2, i2) {
        return new Zg(this._request).fetch(e2, i2);
      }
      fileUpload(e2, i2, n2, a2) {
        return new Yg(this._request).fetch(e2, i2, n2, a2);
      }
      createGitAutomationState(e2) {
        return new Xg(this._request).fetch(e2);
      }
      deleteGitAutomationState(e2) {
        return new eD(this._request).fetch(e2);
      }
      updateGitAutomationState(e2, i2) {
        return new iD(this._request).fetch(e2, i2);
      }
      createGitAutomationTargetBranch(e2) {
        return new nD(this._request).fetch(e2);
      }
      deleteGitAutomationTargetBranch(e2) {
        return new aD(this._request).fetch(e2);
      }
      updateGitAutomationTargetBranch(e2, i2) {
        return new tD(this._request).fetch(e2, i2);
      }
      googleUserAccountAuth(e2) {
        return new dD(this._request).fetch(e2);
      }
      imageUploadFromUrl(e2) {
        return new lD(this._request).fetch(e2);
      }
      importFileUpload(e2, i2, n2, a2) {
        return new mD(this._request).fetch(e2, i2, n2, a2);
      }
      archiveInitiative(e2) {
        return new oD(this._request).fetch(e2);
      }
      createInitiative(e2) {
        return new rD(this._request).fetch(e2);
      }
      deleteInitiative(e2) {
        return new sD(this._request).fetch(e2);
      }
      createInitiativeToProject(e2) {
        return new uD(this._request).fetch(e2);
      }
      deleteInitiativeToProject(e2) {
        return new kD(this._request).fetch(e2);
      }
      updateInitiativeToProject(e2, i2) {
        return new pD(this._request).fetch(e2, i2);
      }
      unarchiveInitiative(e2) {
        return new cD(this._request).fetch(e2);
      }
      updateInitiative(e2, i2) {
        return new vD(this._request).fetch(e2, i2);
      }
      archiveIntegration(e2) {
        return new ND(this._request).fetch(e2);
      }
      integrationAsksConnectChannel(e2, i2) {
        return new hD(this._request).fetch(e2, i2);
      }
      deleteIntegration(e2) {
        return new fD(this._request).fetch(e2);
      }
      integrationDiscord(e2, i2) {
        return new SD(this._request).fetch(e2, i2);
      }
      integrationFigma(e2, i2) {
        return new yD(this._request).fetch(e2, i2);
      }
      integrationFront(e2, i2) {
        return new bD(this._request).fetch(e2, i2);
      }
      integrationGitHubEnterpriseServerConnect(e2, i2) {
        return new gD(this._request).fetch(e2, i2);
      }
      integrationGitHubPersonal(e2) {
        return new DD(this._request).fetch(e2);
      }
      get createIntegrationGithubCommit() {
        return new FD(this._request).fetch();
      }
      integrationGithubConnect(e2) {
        return new VD(this._request).fetch(e2);
      }
      integrationGithubImportConnect(e2) {
        return new _D(this._request).fetch(e2);
      }
      integrationGitlabConnect(e2, i2) {
        return new AD(this._request).fetch(e2, i2);
      }
      integrationGoogleSheets(e2) {
        return new TD(this._request).fetch(e2);
      }
      integrationIntercom(e2, i2, n2) {
        return new wD(this._request).fetch(e2, i2, n2);
      }
      get deleteIntegrationIntercom() {
        return new ID(this._request).fetch();
      }
      updateIntegrationIntercomSettings(e2) {
        return new CD(this._request).fetch(e2);
      }
      integrationJiraPersonal(e2) {
        return new PD(this._request).fetch(e2);
      }
      get integrationLoom() {
        return new qD(this._request).fetch();
      }
      integrationRequest(e2) {
        return new xD(this._request).fetch(e2);
      }
      integrationSentryConnect(e2, i2, n2) {
        return new jD(this._request).fetch(e2, i2, n2);
      }
      integrationSlack(e2, i2, n2) {
        return new OD(this._request).fetch(e2, i2, n2);
      }
      integrationSlackAsks(e2, i2) {
        return new UD(this._request).fetch(e2, i2);
      }
      integrationSlackCustomViewNotifications(e2, i2, n2) {
        return new BD(this._request).fetch(e2, i2, n2);
      }
      integrationSlackImportEmojis(e2, i2) {
        return new ED(this._request).fetch(e2, i2);
      }
      integrationSlackOrgProjectUpdatesPost(e2, i2) {
        return new RD(this._request).fetch(e2, i2);
      }
      integrationSlackPersonal(e2, i2) {
        return new MD(this._request).fetch(e2, i2);
      }
      integrationSlackPost(e2, i2, n2, a2) {
        return new LD(this._request).fetch(e2, i2, n2, a2);
      }
      integrationSlackProjectPost(e2, i2, n2, a2) {
        return new zD(this._request).fetch(e2, i2, n2, a2);
      }
      createIntegrationTemplate(e2) {
        return new HD(this._request).fetch(e2);
      }
      deleteIntegrationTemplate(e2) {
        return new GD(this._request).fetch(e2);
      }
      integrationZendesk(e2, i2, n2, a2) {
        return new WD(this._request).fetch(e2, i2, n2, a2);
      }
      createIntegrationsSettings(e2) {
        return new QD(this._request).fetch(e2);
      }
      updateIntegrationsSettings(e2, i2) {
        return new JD(this._request).fetch(e2, i2);
      }
      issueAddLabel(e2, i2) {
        return new KD(this._request).fetch(e2, i2);
      }
      archiveIssue(e2, i2) {
        return new $D(this._request).fetch(e2, i2);
      }
      updateIssueBatch(e2, i2) {
        return new ZD(this._request).fetch(e2, i2);
      }
      createIssue(e2) {
        return new YD(this._request).fetch(e2);
      }
      deleteIssue(e2, i2) {
        return new XD(this._request).fetch(e2, i2);
      }
      archiveIssueDraft(e2) {
        return new eF(this._request).fetch(e2);
      }
      createIssueDraft(e2) {
        return new iF(this._request).fetch(e2);
      }
      deleteIssueDraft(e2) {
        return new nF(this._request).fetch(e2);
      }
      updateIssueDraft(e2, i2) {
        return new aF(this._request).fetch(e2, i2);
      }
      issueImportCreateAsana(e2, i2, n2) {
        return new tF(this._request).fetch(e2, i2, n2);
      }
      issueImportCreateCSVJira(e2, i2) {
        return new dF(this._request).fetch(e2, i2);
      }
      issueImportCreateClubhouse(e2, i2, n2) {
        return new lF(this._request).fetch(e2, i2, n2);
      }
      issueImportCreateGithub(e2) {
        return new mF(this._request).fetch(e2);
      }
      issueImportCreateJira(e2, i2, n2, a2, t2) {
        return new oF(this._request).fetch(e2, i2, n2, a2, t2);
      }
      deleteIssueImport(e2) {
        return new rF(this._request).fetch(e2);
      }
      issueImportProcess(e2, i2) {
        return new sF(this._request).fetch(e2, i2);
      }
      updateIssueImport(e2, i2) {
        return new uF(this._request).fetch(e2, i2);
      }
      createIssueLabel(e2, i2) {
        return new kF(this._request).fetch(e2, i2);
      }
      deleteIssueLabel(e2) {
        return new pF(this._request).fetch(e2);
      }
      updateIssueLabel(e2, i2, n2) {
        return new cF(this._request).fetch(e2, i2, n2);
      }
      createIssueRelation(e2, i2) {
        return new vF(this._request).fetch(e2, i2);
      }
      deleteIssueRelation(e2) {
        return new NF(this._request).fetch(e2);
      }
      updateIssueRelation(e2, i2) {
        return new hF(this._request).fetch(e2, i2);
      }
      issueReminder(e2, i2) {
        return new fF(this._request).fetch(e2, i2);
      }
      issueRemoveLabel(e2, i2) {
        return new SF(this._request).fetch(e2, i2);
      }
      issueSubscribe(e2, i2) {
        return new yF(this._request).fetch(e2, i2);
      }
      unarchiveIssue(e2) {
        return new bF(this._request).fetch(e2);
      }
      issueUnsubscribe(e2, i2) {
        return new gF(this._request).fetch(e2, i2);
      }
      updateIssue(e2, i2) {
        return new DF(this._request).fetch(e2, i2);
      }
      joinOrganizationFromOnboarding(e2) {
        return new FF(this._request).fetch(e2);
      }
      leaveOrganization(e2) {
        return new VF(this._request).fetch(e2);
      }
      get logout() {
        return new _F(this._request).fetch();
      }
      get logoutAllSessions() {
        return new AF(this._request).fetch();
      }
      get logoutOtherSessions() {
        return new TF(this._request).fetch();
      }
      logoutSession(e2) {
        return new wF(this._request).fetch(e2);
      }
      archiveNotification(e2) {
        return new IF(this._request).fetch(e2);
      }
      notificationArchiveAll(e2) {
        return new CF(this._request).fetch(e2);
      }
      notificationMarkReadAll(e2, i2) {
        return new PF(this._request).fetch(e2, i2);
      }
      notificationMarkUnreadAll(e2) {
        return new qF(this._request).fetch(e2);
      }
      notificationSnoozeAll(e2, i2) {
        return new xF(this._request).fetch(e2, i2);
      }
      createNotificationSubscription(e2) {
        return new jF(this._request).fetch(e2);
      }
      deleteNotificationSubscription(e2) {
        return new OF(this._request).fetch(e2);
      }
      updateNotificationSubscription(e2, i2) {
        return new UF(this._request).fetch(e2, i2);
      }
      unarchiveNotification(e2) {
        return new BF(this._request).fetch(e2);
      }
      notificationUnsnoozeAll(e2, i2) {
        return new EF(this._request).fetch(e2, i2);
      }
      updateNotification(e2, i2) {
        return new RF(this._request).fetch(e2, i2);
      }
      get deleteOrganizationCancel() {
        return new MF(this._request).fetch();
      }
      deleteOrganization(e2) {
        return new LF(this._request).fetch(e2);
      }
      get organizationDeleteChallenge() {
        return new zF(this._request).fetch();
      }
      deleteOrganizationDomain(e2) {
        return new HF(this._request).fetch(e2);
      }
      createOrganizationInvite(e2) {
        return new GF(this._request).fetch(e2);
      }
      deleteOrganizationInvite(e2) {
        return new WF(this._request).fetch(e2);
      }
      updateOrganizationInvite(e2, i2) {
        return new QF(this._request).fetch(e2, i2);
      }
      get organizationStartTrial() {
        return new JF(this._request).fetch();
      }
      updateOrganization(e2) {
        return new KF(this._request).fetch(e2);
      }
      archiveProject(e2, i2) {
        return new $F(this._request).fetch(e2, i2);
      }
      createProject(e2, i2) {
        return new ZF(this._request).fetch(e2, i2);
      }
      deleteProject(e2) {
        return new YF(this._request).fetch(e2);
      }
      createProjectLink(e2) {
        return new XF(this._request).fetch(e2);
      }
      deleteProjectLink(e2) {
        return new eV(this._request).fetch(e2);
      }
      updateProjectLink(e2, i2) {
        return new iV(this._request).fetch(e2, i2);
      }
      createProjectMilestone(e2) {
        return new nV(this._request).fetch(e2);
      }
      deleteProjectMilestone(e2) {
        return new aV(this._request).fetch(e2);
      }
      updateProjectMilestone(e2, i2) {
        return new tV(this._request).fetch(e2, i2);
      }
      unarchiveProject(e2) {
        return new dV(this._request).fetch(e2);
      }
      updateProject(e2, i2) {
        return new lV(this._request).fetch(e2, i2);
      }
      createProjectUpdate(e2) {
        return new mV(this._request).fetch(e2);
      }
      deleteProjectUpdate(e2) {
        return new oV(this._request).fetch(e2);
      }
      createProjectUpdateInteraction(e2) {
        return new rV(this._request).fetch(e2);
      }
      projectUpdateMarkAsRead(e2) {
        return new sV(this._request).fetch(e2);
      }
      updateProjectUpdate(e2, i2) {
        return new uV(this._request).fetch(e2, i2);
      }
      createPushSubscription(e2) {
        return new kV(this._request).fetch(e2);
      }
      deletePushSubscription(e2) {
        return new pV(this._request).fetch(e2);
      }
      createReaction(e2) {
        return new cV(this._request).fetch(e2);
      }
      deleteReaction(e2) {
        return new vV(this._request).fetch(e2);
      }
      refreshGoogleSheetsData(e2) {
        return new NV(this._request).fetch(e2);
      }
      resendOrganizationInvite(e2) {
        return new hV(this._request).fetch(e2);
      }
      archiveRoadmap(e2) {
        return new fV(this._request).fetch(e2);
      }
      createRoadmap(e2) {
        return new SV(this._request).fetch(e2);
      }
      deleteRoadmap(e2) {
        return new yV(this._request).fetch(e2);
      }
      createRoadmapToProject(e2) {
        return new bV(this._request).fetch(e2);
      }
      deleteRoadmapToProject(e2) {
        return new gV(this._request).fetch(e2);
      }
      updateRoadmapToProject(e2, i2) {
        return new DV(this._request).fetch(e2, i2);
      }
      unarchiveRoadmap(e2) {
        return new FV(this._request).fetch(e2);
      }
      updateRoadmap(e2, i2) {
        return new VV(this._request).fetch(e2, i2);
      }
      samlTokenUserAccountAuth(e2) {
        return new _V(this._request).fetch(e2);
      }
      createTeam(e2, i2) {
        return new AV(this._request).fetch(e2, i2);
      }
      deleteTeamCycles(e2) {
        return new TV(this._request).fetch(e2);
      }
      deleteTeam(e2) {
        return new wV(this._request).fetch(e2);
      }
      deleteTeamKey(e2) {
        return new IV(this._request).fetch(e2);
      }
      createTeamMembership(e2) {
        return new CV(this._request).fetch(e2);
      }
      deleteTeamMembership(e2) {
        return new PV(this._request).fetch(e2);
      }
      updateTeamMembership(e2, i2) {
        return new qV(this._request).fetch(e2, i2);
      }
      unarchiveTeam(e2) {
        return new xV(this._request).fetch(e2);
      }
      updateTeam(e2, i2) {
        return new jV(this._request).fetch(e2, i2);
      }
      createTemplate(e2) {
        return new OV(this._request).fetch(e2);
      }
      deleteTemplate(e2) {
        return new UV(this._request).fetch(e2);
      }
      updateTemplate(e2, i2) {
        return new BV(this._request).fetch(e2, i2);
      }
      createTimeSchedule(e2) {
        return new EV(this._request).fetch(e2);
      }
      deleteTimeSchedule(e2) {
        return new RV(this._request).fetch(e2);
      }
      timeScheduleRefreshIntegrationSchedule(e2) {
        return new MV(this._request).fetch(e2);
      }
      updateTimeSchedule(e2, i2) {
        return new LV(this._request).fetch(e2, i2);
      }
      timeScheduleUpsertExternal(e2, i2) {
        return new zV(this._request).fetch(e2, i2);
      }
      createTriageResponsibility(e2) {
        return new HV(this._request).fetch(e2);
      }
      deleteTriageResponsibility(e2) {
        return new GV(this._request).fetch(e2);
      }
      updateTriageResponsibility(e2, i2) {
        return new WV(this._request).fetch(e2, i2);
      }
      userDemoteAdmin(e2) {
        return new QV(this._request).fetch(e2);
      }
      userDemoteMember(e2) {
        return new JV(this._request).fetch(e2);
      }
      userDiscordConnect(e2, i2) {
        return new KV(this._request).fetch(e2, i2);
      }
      userExternalUserDisconnect(e2) {
        return new $V(this._request).fetch(e2);
      }
      updateUserFlag(e2, i2) {
        return new ZV(this._request).fetch(e2, i2);
      }
      userPromoteAdmin(e2) {
        return new YV(this._request).fetch(e2);
      }
      userPromoteMember(e2) {
        return new XV(this._request).fetch(e2);
      }
      userSettingsFlagsReset(e2) {
        return new e_(this._request).fetch(e2);
      }
      updateUserSettings(e2, i2) {
        return new i_(this._request).fetch(e2, i2);
      }
      suspendUser(e2) {
        return new n_(this._request).fetch(e2);
      }
      unsuspendUser(e2) {
        return new a_(this._request).fetch(e2);
      }
      updateUser(e2, i2) {
        return new t_(this._request).fetch(e2, i2);
      }
      createViewPreferences(e2) {
        return new d_(this._request).fetch(e2);
      }
      deleteViewPreferences(e2) {
        return new l_(this._request).fetch(e2);
      }
      updateViewPreferences(e2, i2) {
        return new m_(this._request).fetch(e2, i2);
      }
      createWebhook(e2) {
        return new o_(this._request).fetch(e2);
      }
      deleteWebhook(e2) {
        return new r_(this._request).fetch(e2);
      }
      updateWebhook(e2, i2) {
        return new s_(this._request).fetch(e2, i2);
      }
      archiveWorkflowState(e2) {
        return new u_(this._request).fetch(e2);
      }
      createWorkflowState(e2) {
        return new k_(this._request).fetch(e2);
      }
      updateWorkflowState(e2, i2) {
        return new p_(this._request).fetch(e2, i2);
      }
    };
    exports2.ActorBot = ev, exports2.AdministrableTeamsQuery = YS, exports2.AirbyteIntegrationConnectMutation = Zb, exports2.ApiKey = iv, exports2.ApiKeyConnection = nv, exports2.ApiKeyPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.apiKey = new iv(e2, i2.apiKey);
      }
    }, exports2.ApiKeysQuery = XS, exports2.Application = av, exports2.ApplicationInfoQuery = ey, exports2.ApplicationWithAuthorizationQuery = iy, exports2.ArchiveAttachmentMutation = Yb, exports2.ArchiveCycleMutation = Vg, exports2.ArchiveInitiativeMutation = oD, exports2.ArchiveIntegrationMutation = ND, exports2.ArchiveIssueDraftMutation = eF, exports2.ArchiveIssueMutation = $D, exports2.ArchiveNotificationMutation = IF, exports2.ArchivePayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    }, exports2.ArchiveProjectMutation = $F, exports2.ArchiveResponse = tv, exports2.ArchiveRoadmapMutation = fV, exports2.ArchiveWorkflowStateMutation = u_, exports2.ArchivedModelSyncQuery = ny, exports2.ArchivedModelsSyncQuery = ay, exports2.AsksChannelConnectPayload = dv, exports2.Attachment = lv, exports2.AttachmentArchivePayload = mv, exports2.AttachmentConnection = ov, exports2.AttachmentIssueQuery = dy, exports2.AttachmentIssue_AttachmentsQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Wl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.attachments;
          return new ov(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.AttachmentIssue_BotActorQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(Ql, { id: this._id })).attachmentIssue.botActor;
          return e2 ? new ev(this._request, e2) : void 0;
        });
      }
    }, exports2.AttachmentIssue_ChildrenQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Jl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.children;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.AttachmentIssue_CommentsQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Kl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.comments;
          return new yv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.AttachmentIssue_HistoryQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request($l, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.history;
          return new lh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.AttachmentIssue_InverseRelationsQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Zl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.inverseRelations;
          return new Sh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.AttachmentIssue_LabelsQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Yl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.labels;
          return new ph(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.AttachmentIssue_RelationsQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Xl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.relations;
          return new Sh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.AttachmentIssue_SubscribersQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._id = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(em, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.subscribers;
          return new PS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.AttachmentLinkDiscordMutation = ig, exports2.AttachmentLinkFrontMutation = ng, exports2.AttachmentLinkGitHubIssueMutation = ag, exports2.AttachmentLinkGitHubPrMutation = tg, exports2.AttachmentLinkGitLabMrMutation = dg, exports2.AttachmentLinkIntercomMutation = lg, exports2.AttachmentLinkJiraIssueMutation = mg, exports2.AttachmentLinkSlackMutation = og, exports2.AttachmentLinkUrlMutation = rg, exports2.AttachmentLinkZendeskMutation = sg, exports2.AttachmentPayload = rv, exports2.AttachmentQuery = ty, exports2.AttachmentSourcesPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.sources = i2.sources;
      }
    }, exports2.AttachmentSyncToSlackMutation = ug, exports2.AttachmentsForUrlQuery = my, exports2.AttachmentsQuery = ly, exports2.AuditEntriesQuery = oy, exports2.AuditEntry = sv, exports2.AuditEntryConnection = uv, exports2.AuditEntryType = kv, exports2.AuditEntryTypesQuery = ry, exports2.AuthApiKey = pv, exports2.AuthApiKeyPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success, this.authApiKey = new pv(e2, i2.authApiKey);
      }
    }, exports2.AuthEmailIntakeAddress = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.address = i2.address, this.enabled = i2.enabled, this.id = i2.id, this.creator = i2.creator ? new hv(e2, i2.creator) : void 0, this.organization = new vv(e2, i2.organization);
      }
    }, exports2.AuthIntegration = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.id = i2.id;
      }
    }, exports2.AuthOauthClient = cv, exports2.AuthOauthClientWithMemberships = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.appId = i2.appId, this.clientId = i2.clientId, this.imageUrl = null !== (n2 = i2.imageUrl) && void 0 !== n2 ? n2 : void 0, this.name = i2.name, this.scope = i2.scope, this.totalMembers = i2.totalMembers, this.webhookUrl = null !== (a2 = i2.webhookUrl) && void 0 !== a2 ? a2 : void 0;
      }
    }, exports2.AuthOauthClientWithScope = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.appId = i2.appId, this.clientId = i2.clientId, this.imageUrl = null !== (n2 = i2.imageUrl) && void 0 !== n2 ? n2 : void 0, this.name = i2.name, this.scope = i2.scope, this.webhookUrl = null !== (a2 = i2.webhookUrl) && void 0 !== a2 ? a2 : void 0;
      }
    }, exports2.AuthOauthClientWithTokens = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.client = new cv(e2, i2.client), this.tokens = i2.tokens.map((i3) => new Qh(e2, i3));
      }
    }, exports2.AuthOrganization = vv, exports2.AuthOrganizationBucketNamePayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.importsBucketName = i2.importsBucketName, this.region = i2.region, this.uploadsBucketName = i2.uploadsBucketName;
      }
    }, exports2.AuthOrganizationDomain = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.claimed = null !== (n2 = i2.claimed) && void 0 !== n2 ? n2 : void 0, this.disableOrganizationCreation = null !== (a2 = i2.disableOrganizationCreation) && void 0 !== a2 ? a2 : void 0, this.id = i2.id, this.name = i2.name, this.organizationId = i2.organizationId, this.verified = i2.verified, this.authType = i2.authType;
      }
    }, exports2.AuthOrganizationExistsPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.exists = i2.exists, this.success = i2.success;
      }
    }, exports2.AuthOrganizationInvite = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.expiresAt = null !== (n2 = Yc(i2.expiresAt)) && void 0 !== n2 ? n2 : void 0, this.id = i2.id;
      }
    }, exports2.AuthOrganizationPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success, this.authOrganization = new vv(e2, i2.authOrganization);
      }
    }, exports2.AuthResolverResponse = Nv, exports2.AuthSuccessPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.success = i2.success;
      }
    }, exports2.AuthUser = hv, exports2.AuthenticationLinearError = _, exports2.AuthenticationSession = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2, p2, c2;
        super(e2), this.browserType = null !== (n2 = i2.browserType) && void 0 !== n2 ? n2 : void 0, this.client = null !== (a2 = i2.client) && void 0 !== a2 ? a2 : void 0, this.countryCodes = i2.countryCodes, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.ip = null !== (d2 = i2.ip) && void 0 !== d2 ? d2 : void 0, this.lastActiveAt = null !== (l2 = Yc(i2.lastActiveAt)) && void 0 !== l2 ? l2 : void 0, this.location = null !== (m2 = i2.location) && void 0 !== m2 ? m2 : void 0, this.locationCity = null !== (o2 = i2.locationCity) && void 0 !== o2 ? o2 : void 0, this.locationCountry = null !== (r2 = i2.locationCountry) && void 0 !== r2 ? r2 : void 0, this.locationCountryCode = null !== (s2 = i2.locationCountryCode) && void 0 !== s2 ? s2 : void 0, this.locationRegionCode = null !== (u2 = i2.locationRegionCode) && void 0 !== u2 ? u2 : void 0, this.name = i2.name, this.operatingSystem = null !== (k2 = i2.operatingSystem) && void 0 !== k2 ? k2 : void 0, this.updatedAt = null !== (p2 = Yc(i2.updatedAt)) && void 0 !== p2 ? p2 : /* @__PURE__ */ new Date(), this.userAgent = null !== (c2 = i2.userAgent) && void 0 !== c2 ? c2 : void 0, this.type = i2.type;
      }
    }, exports2.AuthenticationSessionResponse = fv, exports2.AuthenticationSessionsQuery = sy, exports2.AuthorizedApplicationBase = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.appId = i2.appId, this.clientId = i2.clientId, this.imageUrl = null !== (n2 = i2.imageUrl) && void 0 !== n2 ? n2 : void 0, this.name = i2.name, this.scope = i2.scope;
      }
    }, exports2.AvailableUsersQuery = uy, exports2.BootstrapLinearError = T, exports2.Comment = Sv, exports2.CommentConnection = yv, exports2.CommentNotification = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.commentId = null !== (n2 = i2.commentId) && void 0 !== n2 ? n2 : void 0, this.parentCommentId = null !== (a2 = i2.parentCommentId) && void 0 !== a2 ? a2 : void 0, this.reactionEmoji = null !== (t2 = i2.reactionEmoji) && void 0 !== t2 ? t2 : void 0;
      }
    }, exports2.CommentPayload = bv, exports2.CommentQuery = ky, exports2.CommentResolveMutation = vg, exports2.CommentUnresolveMutation = Ng, exports2.Comment_BotActorQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(om, e2)).comment.botActor;
          return i2 ? new ev(this._request, i2) : void 0;
        });
      }
    }, exports2.Comment_ChildrenQuery = c_, exports2.Comment_DocumentContentQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(sm, e2)).comment.documentContent;
          return i2 ? new Mv(this._request, i2) : void 0;
        });
      }
    }, exports2.CommentsQuery = py, exports2.Connection = Zc, exports2.ContactPayload = gv, exports2.CreateAttachmentMutation = Xb, exports2.CreateCommentMutation = pg, exports2.CreateContactMutation = fg, exports2.CreateCsvExportReportMutation = Sg, exports2.CreateCsvExportReportPayload = Dv, exports2.CreateCustomViewMutation = gg, exports2.CreateCycleMutation = _g, exports2.CreateDiaryEntryMutation = Ig, exports2.CreateDocumentMutation = qg, exports2.CreateEmailIntakeAddressMutation = Ug, exports2.CreateEmojiMutation = Hg, exports2.CreateEntityExternalLinkMutation = Wg, exports2.CreateFavoriteMutation = Kg, exports2.CreateGitAutomationStateMutation = Xg, exports2.CreateGitAutomationTargetBranchMutation = nD, exports2.CreateInitiativeMutation = rD, exports2.CreateInitiativeToProjectMutation = uD, exports2.CreateIntegrationGithubCommitMutation = FD, exports2.CreateIntegrationTemplateMutation = HD, exports2.CreateIntegrationsSettingsMutation = QD, exports2.CreateIssueDraftMutation = iF, exports2.CreateIssueLabelMutation = kF, exports2.CreateIssueMutation = YD, exports2.CreateIssueRelationMutation = vF, exports2.CreateNotificationSubscriptionMutation = jF, exports2.CreateOrJoinOrganizationResponse = Fv, exports2.CreateOrganizationFromOnboardingMutation = yg, exports2.CreateOrganizationInviteMutation = GF, exports2.CreateProjectLinkMutation = XF, exports2.CreateProjectMilestoneMutation = nV, exports2.CreateProjectMutation = ZF, exports2.CreateProjectUpdateInteractionMutation = rV, exports2.CreateProjectUpdateMutation = mV, exports2.CreateProjectUpdateReminderMutation = bg, exports2.CreatePushSubscriptionMutation = kV, exports2.CreateReactionMutation = cV, exports2.CreateRoadmapMutation = SV, exports2.CreateRoadmapToProjectMutation = bV, exports2.CreateTeamMembershipMutation = CV, exports2.CreateTeamMutation = AV, exports2.CreateTemplateMutation = OV, exports2.CreateTimeScheduleMutation = EV, exports2.CreateTriageResponsibilityMutation = HV, exports2.CreateViewPreferencesMutation = d_, exports2.CreateWebhookMutation = o_, exports2.CreateWorkflowStateMutation = k_, exports2.CustomView = Vv, exports2.CustomViewConnection = _v, exports2.CustomViewHasSubscribersPayload = Av, exports2.CustomViewHasSubscribersQuery = vy, exports2.CustomViewNotificationSubscription = Tv, exports2.CustomViewPayload = wv, exports2.CustomViewQuery = cy, exports2.CustomViewSuggestionPayload = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.description = null !== (n2 = i2.description) && void 0 !== n2 ? n2 : void 0, this.icon = null !== (a2 = i2.icon) && void 0 !== a2 ? a2 : void 0, this.name = null !== (t2 = i2.name) && void 0 !== t2 ? t2 : void 0;
      }
    }, exports2.CustomView_IssuesQuery = v_, exports2.CustomView_OrganizationViewPreferencesQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(cm, { id: this._id })).customView.organizationViewPreferences;
          return e2 ? new ES(this._request, e2) : void 0;
        });
      }
    }, exports2.CustomView_OrganizationViewPreferences_PreferencesQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        var e2;
        return v(this, void 0, void 0, function* () {
          const i2 = yield this._request(vm, { id: this._id }), n2 = null === (e2 = i2.customView.organizationViewPreferences) || void 0 === e2 ? void 0 : e2.preferences;
          return n2 ? new MS(this._request, n2) : void 0;
        });
      }
    }, exports2.CustomView_ProjectsQuery = N_, exports2.CustomView_UserViewPreferencesQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(hm, { id: this._id })).customView.userViewPreferences;
          return e2 ? new ES(this._request, e2) : void 0;
        });
      }
    }, exports2.CustomView_UserViewPreferences_PreferencesQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        var e2;
        return v(this, void 0, void 0, function* () {
          const i2 = yield this._request(fm, { id: this._id }), n2 = null === (e2 = i2.customView.userViewPreferences) || void 0 === e2 ? void 0 : e2.preferences;
          return n2 ? new MS(this._request, n2) : void 0;
        });
      }
    }, exports2.CustomView_ViewPreferencesValuesQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(Sm, { id: this._id })).customView.viewPreferencesValues;
          return e2 ? new MS(this._request, e2) : void 0;
        });
      }
    }, exports2.CustomViewsQuery = Ny, exports2.CustomerNeedPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    }, exports2.CustomerPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    }, exports2.CustomerStatusPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    }, exports2.CustomerTierPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    }, exports2.Cycle = Iv, exports2.CycleArchivePayload = Cv, exports2.CycleConnection = Pv, exports2.CycleNotificationSubscription = qv, exports2.CyclePayload = xv, exports2.CycleQuery = hy, exports2.CycleShiftAllMutation = Ag, exports2.CycleStartUpcomingCycleTodayMutation = Tg, exports2.Cycle_IssuesQuery = h_, exports2.Cycle_UncompletedIssuesUponCloseQuery = f_, exports2.CyclesQuery = fy, exports2.DeleteAttachmentMutation = eg, exports2.DeleteCommentMutation = cg, exports2.DeleteCustomViewMutation = Dg, exports2.DeleteDiaryEntryMutation = Cg, exports2.DeleteDocumentMutation = xg, exports2.DeleteEmailIntakeAddressMutation = Bg, exports2.DeleteEmojiMutation = Gg, exports2.DeleteEntityExternalLinkMutation = Qg, exports2.DeleteFavoriteMutation = $g, exports2.DeleteGitAutomationStateMutation = eD, exports2.DeleteGitAutomationTargetBranchMutation = aD, exports2.DeleteInitiativeMutation = sD, exports2.DeleteInitiativeToProjectMutation = kD, exports2.DeleteIntegrationIntercomMutation = ID, exports2.DeleteIntegrationMutation = fD, exports2.DeleteIntegrationTemplateMutation = GD, exports2.DeleteIssueDraftMutation = nF, exports2.DeleteIssueImportMutation = rF, exports2.DeleteIssueLabelMutation = pF, exports2.DeleteIssueMutation = XD, exports2.DeleteIssueRelationMutation = NF, exports2.DeleteNotificationSubscriptionMutation = OF, exports2.DeleteOrganizationCancelMutation = MF, exports2.DeleteOrganizationDomainMutation = HF, exports2.DeleteOrganizationInviteMutation = WF, exports2.DeleteOrganizationMutation = LF, exports2.DeletePayload = jv, exports2.DeleteProjectLinkMutation = eV, exports2.DeleteProjectMilestoneMutation = aV, exports2.DeleteProjectMutation = YF, exports2.DeleteProjectUpdateMutation = oV, exports2.DeletePushSubscriptionMutation = pV, exports2.DeleteReactionMutation = vV, exports2.DeleteRoadmapMutation = yV, exports2.DeleteRoadmapToProjectMutation = gV, exports2.DeleteTeamCyclesMutation = TV, exports2.DeleteTeamKeyMutation = IV, exports2.DeleteTeamMembershipMutation = PV, exports2.DeleteTeamMutation = wV, exports2.DeleteTemplateMutation = UV, exports2.DeleteTimeScheduleMutation = RV, exports2.DeleteTriageResponsibilityMutation = GV, exports2.DeleteViewPreferencesMutation = l_, exports2.DeleteWebhookMutation = r_, exports2.DiaryEntry = Ov, exports2.DiaryEntryConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Ov(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.DiaryEntryPayload = Uv, exports2.DiaryEntryQuery = Sy, exports2.Document = Bv, exports2.DocumentArchivePayload = Ev, exports2.DocumentConnection = Rv, exports2.DocumentContent = Mv, exports2.DocumentContentHistory = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.actorIds = i2.actorIds, this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.contentDataSnapshotAt = null !== (a2 = Yc(i2.contentDataSnapshotAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.documentContent = new Mv(e2, i2.documentContent);
      }
    }, exports2.DocumentContentHistoryPayload = Lv, exports2.DocumentContentHistoryQuery = by, exports2.DocumentContentHistoryType = zv, exports2.DocumentNotification = Hv, exports2.DocumentPayload = Gv, exports2.DocumentQuery = yy, exports2.DocumentSearchPayload = Wv, exports2.DocumentSearchResult = Qv, exports2.DocumentSearchResultConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Qv(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.Document_CommentsQuery = S_, exports2.DocumentsQuery = gy, exports2.Draft = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.bodyData = null !== (a2 = Xc(i2.bodyData)) && void 0 !== a2 ? a2 : {}, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.data = null !== (d2 = i2.data) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.isAutogenerated = i2.isAutogenerated, this.updatedAt = null !== (l2 = Yc(i2.updatedAt)) && void 0 !== l2 ? l2 : /* @__PURE__ */ new Date(), this._issue = null !== (m2 = i2.issue) && void 0 !== m2 ? m2 : void 0, this._parentComment = null !== (o2 = i2.parentComment) && void 0 !== o2 ? o2 : void 0, this._project = null !== (r2 = i2.project) && void 0 !== r2 ? r2 : void 0, this._projectUpdate = null !== (s2 = i2.projectUpdate) && void 0 !== s2 ? s2 : void 0, this._user = i2.user;
      }
      get issue() {
        var e2, i2;
        return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get parentComment() {
        var e2, i2;
        return (null === (e2 = this._parentComment) || void 0 === e2 ? void 0 : e2.id) ? new ky(this._request).fetch({ id: null === (i2 = this._parentComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
      }
      get project() {
        var e2, i2;
        return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get projectUpdate() {
        var e2, i2;
        return (null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id) ? new vb(this._request).fetch(null === (i2 = this._projectUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
    }, exports2.EmailIntakeAddress = Jv, exports2.EmailIntakeAddressPayload = Kv, exports2.EmailIntakeAddressRotateMutation = Eg, exports2.EmailTokenUserAccountAuthMutation = Mg, exports2.EmailUnsubscribeMutation = Lg, exports2.EmailUnsubscribePayload = $v, exports2.EmailUserAccountAuthChallengeMutation = zg, exports2.EmailUserAccountAuthChallengeResponse = Zv, exports2.Emoji = Yv, exports2.EmojiConnection = Xv, exports2.EmojiPayload = eN, exports2.EmojiQuery = Dy, exports2.EmojisQuery = Fy, exports2.Entity = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.updatedAt = null !== (t2 = Yc(i2.updatedAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date();
      }
    }, exports2.EntityCountResponse = iN, exports2.EntityExternalLink = nN, exports2.EntityExternalLinkConnection = aN, exports2.EntityExternalLinkPayload = tN, exports2.EntityExternalLinkQuery = Vy, exports2.ExternalUser = dN, exports2.ExternalUserConnection = lN, exports2.ExternalUserQuery = _y, exports2.ExternalUsersQuery = Ay, exports2.Facet = mN, exports2.FacetConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new mN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.Favorite = oN, exports2.FavoriteConnection = rN, exports2.FavoritePayload = sN, exports2.FavoriteQuery = Ty, exports2.Favorite_ChildrenQuery = y_, exports2.FavoritesQuery = wy, exports2.FeatureFlag = uN, exports2.FeatureFlagConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new uN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.FeatureFlagRolloutStage = kN, exports2.FeatureFlagRolloutStageConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new kN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.FeatureNotAccessibleLinearError = g, exports2.FileUploadMutation = Yg, exports2.ForbiddenLinearError = A, exports2.FrontAttachmentPayload = pN, exports2.FrontSettings = cN, exports2.GitAutomationState = vN, exports2.GitAutomationStateConnection = NN, exports2.GitAutomationStatePayload = hN, exports2.GitAutomationTargetBranch = fN, exports2.GitAutomationTargetBranchPayload = SN, exports2.GitHubCommitIntegrationPayload = yN, exports2.GitHubEnterpriseServerInstallVerificationPayload = bN, exports2.GitHubEnterpriseServerPayload = gN, exports2.GitHubImportSettings = DN, exports2.GitHubPersonalSettings = FN, exports2.GitHubRepo = VN, exports2.GitHubRepoMapping = _N, exports2.GitHubSettings = AN, exports2.GitLabIntegrationCreatePayload = TN, exports2.GitLabSettings = wN, exports2.GoogleSheetsSettings = IN, exports2.GoogleUserAccountAuthMutation = dD, exports2.GraphQLClientError = Dn, exports2.GraphqlLinearError = q, exports2.ImageUploadFromUrlMutation = lD, exports2.ImageUploadFromUrlPayload = CN, exports2.ImportFileUploadMutation = mD, exports2.Initiative = PN, exports2.InitiativeArchivePayload = qN, exports2.InitiativeConnection = xN, exports2.InitiativeNotification = jN, exports2.InitiativeNotificationSubscription = ON, exports2.InitiativePayload = UN, exports2.InitiativeQuery = Iy, exports2.InitiativeToProject = BN, exports2.InitiativeToProjectConnection = EN, exports2.InitiativeToProjectPayload = RN, exports2.InitiativeToProjectQuery = Cy, exports2.InitiativeToProjectsQuery = Py, exports2.Initiative_LinksQuery = b_, exports2.Initiative_ProjectsQuery = g_, exports2.InitiativesQuery = qy, exports2.Integration = MN, exports2.IntegrationAsksConnectChannelMutation = hD, exports2.IntegrationConnection = LN, exports2.IntegrationDiscordMutation = SD, exports2.IntegrationFigmaMutation = yD, exports2.IntegrationFrontMutation = bD, exports2.IntegrationGitHubEnterpriseServerConnectMutation = gD, exports2.IntegrationGitHubPersonalMutation = DD, exports2.IntegrationGithubConnectMutation = VD, exports2.IntegrationGithubImportConnectMutation = _D, exports2.IntegrationGitlabConnectMutation = AD, exports2.IntegrationGoogleSheetsMutation = TD, exports2.IntegrationHasScopesPayload = zN, exports2.IntegrationHasScopesQuery = jy, exports2.IntegrationIntercomMutation = wD, exports2.IntegrationJiraPersonalMutation = PD, exports2.IntegrationLoomMutation = qD, exports2.IntegrationPayload = HN, exports2.IntegrationQuery = xy, exports2.IntegrationRequestMutation = xD, exports2.IntegrationRequestPayload = GN, exports2.IntegrationSentryConnectMutation = jD, exports2.IntegrationSettings = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.front = i2.front ? new cN(e2, i2.front) : void 0, this.gitHub = i2.gitHub ? new AN(e2, i2.gitHub) : void 0, this.gitHubImport = i2.gitHubImport ? new DN(e2, i2.gitHubImport) : void 0, this.gitHubPersonal = i2.gitHubPersonal ? new FN(e2, i2.gitHubPersonal) : void 0, this.gitLab = i2.gitLab ? new wN(e2, i2.gitLab) : void 0, this.googleSheets = i2.googleSheets ? new IN(e2, i2.googleSheets) : void 0, this.intercom = i2.intercom ? new ZN(e2, i2.intercom) : void 0, this.jira = i2.jira ? new Ah(e2, i2.jira) : void 0, this.jiraPersonal = i2.jiraPersonal ? new Vh(e2, i2.jiraPersonal) : void 0, this.launchDarkly = i2.launchDarkly ? new wh(e2, i2.launchDarkly) : void 0, this.notion = i2.notion ? new zh(e2, i2.notion) : void 0, this.opsgenie = i2.opsgenie ? new Jh(e2, i2.opsgenie) : void 0, this.pagerDuty = i2.pagerDuty ? new mf(e2, i2.pagerDuty) : void 0, this.sentry = i2.sentry ? new Xf(e2, i2.sentry) : void 0, this.slack = i2.slack ? new dS(e2, i2.slack) : void 0, this.slackAsks = i2.slackAsks ? new eS(e2, i2.slackAsks) : void 0, this.slackCustomViewNotifications = i2.slackCustomViewNotifications ? new tS(e2, i2.slackCustomViewNotifications) : void 0, this.slackOrgProjectUpdatesPost = i2.slackOrgProjectUpdatesPost ? new tS(e2, i2.slackOrgProjectUpdatesPost) : void 0, this.slackPost = i2.slackPost ? new tS(e2, i2.slackPost) : void 0, this.slackProjectPost = i2.slackProjectPost ? new tS(e2, i2.slackProjectPost) : void 0, this.zendesk = i2.zendesk ? new ZS(e2, i2.zendesk) : void 0;
      }
    }, exports2.IntegrationSlackAsksMutation = UD, exports2.IntegrationSlackCustomViewNotificationsMutation = BD, exports2.IntegrationSlackImportEmojisMutation = ED, exports2.IntegrationSlackMutation = OD, exports2.IntegrationSlackOrgProjectUpdatesPostMutation = RD, exports2.IntegrationSlackPersonalMutation = MD, exports2.IntegrationSlackPostMutation = LD, exports2.IntegrationSlackProjectPostMutation = zD, exports2.IntegrationTemplate = WN, exports2.IntegrationTemplateConnection = QN, exports2.IntegrationTemplatePayload = JN, exports2.IntegrationTemplateQuery = Oy, exports2.IntegrationTemplatesQuery = Uy, exports2.IntegrationZendeskMutation = WD, exports2.IntegrationsQuery = By, exports2.IntegrationsSettings = KN, exports2.IntegrationsSettingsConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new KN(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.IntegrationsSettingsPayload = $N, exports2.IntegrationsSettingsQuery = Ey, exports2.IntercomSettings = ZN, exports2.InternalLinearError = I, exports2.InvalidInputLinearError = D, exports2.Issue = YN, exports2.IssueAddLabelMutation = KD, exports2.IssueArchivePayload = XN, exports2.IssueBatchPayload = eh, exports2.IssueConnection = ih, exports2.IssueDraftArchivePayload = nh, exports2.IssueDraftPayload = ah, exports2.IssueFigmaFileKeySearchQuery = My, exports2.IssueFilterSuggestionPayload = th, exports2.IssueFilterSuggestionQuery = Ly, exports2.IssueHistory = dh, exports2.IssueHistoryConnection = lh, exports2.IssueImport = mh, exports2.IssueImportCheckCsvQuery = zy, exports2.IssueImportCheckPayload = oh, exports2.IssueImportCheckSyncQuery = Hy, exports2.IssueImportCreateAsanaMutation = tF, exports2.IssueImportCreateClubhouseMutation = lF, exports2.IssueImportCreateCsvJiraMutation = dF, exports2.IssueImportCreateGithubMutation = mF, exports2.IssueImportCreateJiraMutation = oF, exports2.IssueImportDeletePayload = rh, exports2.IssueImportPayload = sh, exports2.IssueImportProcessMutation = sF, exports2.IssueImportSyncCheckPayload = uh, exports2.IssueLabel = kh, exports2.IssueLabelConnection = ph, exports2.IssueLabelPayload = ch, exports2.IssueLabelQuery = Gy, exports2.IssueLabel_ChildrenQuery = C_, exports2.IssueLabel_IssuesQuery = P_, exports2.IssueLabelsQuery = Wy, exports2.IssueNotification = vh, exports2.IssuePayload = Nh, exports2.IssuePriorityValue = hh, exports2.IssuePriorityValuesQuery = Qy, exports2.IssueQuery = Ry, exports2.IssueRelation = fh, exports2.IssueRelationConnection = Sh, exports2.IssueRelationHistoryPayload = yh, exports2.IssueRelationPayload = bh, exports2.IssueRelationQuery = Jy, exports2.IssueRelationsQuery = Ky, exports2.IssueReminderMutation = fF, exports2.IssueRemoveLabelMutation = SF, exports2.IssueSearchPayload = gh, exports2.IssueSearchQuery = $y, exports2.IssueSearchResult = Dh, exports2.IssueSearchResultConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Dh(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.IssueSubscribeMutation = yF, exports2.IssueUnsubscribeMutation = gF, exports2.IssueVcsBranchSearchQuery = Zy, exports2.IssueVcsBranchSearch_AttachmentsQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._branchName = i2, this._variables = n2;
      }
      fetch(e2) {
        var i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(bo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = null === (i2 = n2.issueVcsBranchSearch) || void 0 === i2 ? void 0 : i2.attachments;
          return a2 ? new ov(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : void 0;
        });
      }
    }, exports2.IssueVcsBranchSearch_BotActorQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._branchName = i2;
      }
      fetch() {
        var e2;
        return v(this, void 0, void 0, function* () {
          const i2 = yield this._request(go, { branchName: this._branchName }), n2 = null === (e2 = i2.issueVcsBranchSearch) || void 0 === e2 ? void 0 : e2.botActor;
          return n2 ? new ev(this._request, n2) : void 0;
        });
      }
    }, exports2.IssueVcsBranchSearch_ChildrenQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._branchName = i2, this._variables = n2;
      }
      fetch(e2) {
        var i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(Do3, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = null === (i2 = n2.issueVcsBranchSearch) || void 0 === i2 ? void 0 : i2.children;
          return a2 ? new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : void 0;
        });
      }
    }, exports2.IssueVcsBranchSearch_CommentsQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._branchName = i2, this._variables = n2;
      }
      fetch(e2) {
        var i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(Fo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = null === (i2 = n2.issueVcsBranchSearch) || void 0 === i2 ? void 0 : i2.comments;
          return a2 ? new yv(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : void 0;
        });
      }
    }, exports2.IssueVcsBranchSearch_HistoryQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._branchName = i2, this._variables = n2;
      }
      fetch(e2) {
        var i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(Vo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = null === (i2 = n2.issueVcsBranchSearch) || void 0 === i2 ? void 0 : i2.history;
          return a2 ? new lh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : void 0;
        });
      }
    }, exports2.IssueVcsBranchSearch_InverseRelationsQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._branchName = i2, this._variables = n2;
      }
      fetch(e2) {
        var i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(_o, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = null === (i2 = n2.issueVcsBranchSearch) || void 0 === i2 ? void 0 : i2.inverseRelations;
          return a2 ? new Sh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : void 0;
        });
      }
    }, exports2.IssueVcsBranchSearch_LabelsQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._branchName = i2, this._variables = n2;
      }
      fetch(e2) {
        var i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(Ao, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = null === (i2 = n2.issueVcsBranchSearch) || void 0 === i2 ? void 0 : i2.labels;
          return a2 ? new ph(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : void 0;
        });
      }
    }, exports2.IssueVcsBranchSearch_RelationsQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._branchName = i2, this._variables = n2;
      }
      fetch(e2) {
        var i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(To, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = null === (i2 = n2.issueVcsBranchSearch) || void 0 === i2 ? void 0 : i2.relations;
          return a2 ? new Sh(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : void 0;
        });
      }
    }, exports2.IssueVcsBranchSearch_SubscribersQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._branchName = i2, this._variables = n2;
      }
      fetch(e2) {
        var i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(wo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = null === (i2 = n2.issueVcsBranchSearch) || void 0 === i2 ? void 0 : i2.subscribers;
          return a2 ? new PS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : void 0;
        });
      }
    }, exports2.Issue_AttachmentsQuery = D_, exports2.Issue_BotActorQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(Xm, { id: this._id })).issue.botActor;
          return e2 ? new ev(this._request, e2) : void 0;
        });
      }
    }, exports2.Issue_ChildrenQuery = F_, exports2.Issue_CommentsQuery = V_, exports2.Issue_HistoryQuery = __, exports2.Issue_InverseRelationsQuery = A_, exports2.Issue_LabelsQuery = T_, exports2.Issue_RelationsQuery = w_, exports2.Issue_SubscribersQuery = I_, exports2.IssuesQuery = Yy, exports2.JiraLinearMapping = Fh, exports2.JiraPersonalSettings = Vh, exports2.JiraProjectData = _h, exports2.JiraSettings = Ah, exports2.JoinOrganizationFromOnboardingMutation = FF, exports2.LINEAR_WEBHOOK_SIGNATURE_HEADER = "linear-signature", exports2.LINEAR_WEBHOOK_TS_FIELD = "webhookTimestamp", exports2.LabelNotificationSubscription = Th, exports2.LaunchDarklySettings = wh, exports2.LeaveOrganizationMutation = VF, exports2.LinearClient = class extends kA {
      constructor(e2) {
        const i2 = function(e3) {
          var i3, n3, a2, { apiKey: t2, accessToken: d2, apiUrl: l2, headers: m2 } = e3, o2 = c(e3, ["apiKey", "accessToken", "apiUrl", "headers"]);
          if (!d2 && !t2) throw new Error("No accessToken or apiKey provided to the LinearClient - create one here: https://linear.app/settings/api");
          return Object.assign({ headers: Object.assign(Object.assign({ Authorization: d2 ? d2.startsWith("Bearer ") ? d2 : `Bearer ${d2}` : null != t2 ? t2 : "" }, m2), { "User-Agent": (a2 = { [null !== (i3 = process.env.npm_package_name) && void 0 !== i3 ? i3 : "@linear/sdk"]: null !== (n3 = process.env.npm_package_version) && void 0 !== n3 ? n3 : "unknown" }, Object.entries(a2).reduce((e4, [i4, n4]) => {
            const a3 = `${i4}@${encodeURIComponent(n4)}`;
            return e4 ? `${e4} ${a3}` : a3;
          }, "")) }), apiUrl: null != l2 ? l2 : "https://api.linear.app/graphql" }, o2);
        }(e2), n2 = new Fn(i2.apiUrl, i2);
        super((e3, i3) => this.client.request(e3, i3).catch((e4) => {
          throw O(e4);
        })), this.options = i2, this.client = n2;
      }
    }, exports2.LinearConnection = $c, exports2.LinearDocument = Qc, exports2.LinearError = b, exports2.LinearGraphQLClient = Fn, exports2.LinearGraphQLError = y, exports2.LinearSdk = kA, exports2.LinearWebhooks = class {
      constructor(e2) {
        this.secret = e2;
      }
      verify(e2, i2, n2) {
        const a2 = Buffer.from(p.default.createHmac("sha256", this.secret).update(e2).digest("hex")), t2 = Buffer.from(i2);
        if (a2.length !== t2.length) throw new Error("Invalid webhook signature");
        if (!p.default.timingSafeEqual(a2, t2)) throw new Error("Invalid webhook signature");
        if (n2) {
          if (Math.abs((/* @__PURE__ */ new Date()).getTime() - n2) > 6e4) throw new Error("Invalid webhook timestamp");
        }
        return true;
      }
    }, exports2.LockTimeoutLinearError = x, exports2.LogoutAllSessionsMutation = AF, exports2.LogoutMutation = _F, exports2.LogoutOtherSessionsMutation = TF, exports2.LogoutResponse = Ih, exports2.LogoutSessionMutation = wF, exports2.NetworkLinearError = V, exports2.Node = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.id = i2.id;
      }
    }, exports2.Notification = Ch, exports2.NotificationArchiveAllMutation = CF, exports2.NotificationArchivePayload = Ph, exports2.NotificationBatchActionPayload = qh, exports2.NotificationConnection = xh, exports2.NotificationDeliveryPreferences = jh, exports2.NotificationDeliveryPreferencesChannel = Oh, exports2.NotificationDeliveryPreferencesDay = Uh, exports2.NotificationDeliveryPreferencesSchedule = Bh, exports2.NotificationMarkReadAllMutation = PF, exports2.NotificationMarkUnreadAllMutation = qF, exports2.NotificationPayload = Eh, exports2.NotificationQuery = Xy, exports2.NotificationSnoozeAllMutation = xF, exports2.NotificationSubscription = Rh, exports2.NotificationSubscriptionConnection = Mh, exports2.NotificationSubscriptionPayload = Lh, exports2.NotificationSubscriptionQuery = eb, exports2.NotificationSubscriptionsQuery = ib, exports2.NotificationUnsnoozeAllMutation = EF, exports2.NotificationsQuery = nb, exports2.NotionSettings = zh, exports2.OauthClient = Hh, exports2.OauthClientApproval = Gh, exports2.OauthClientApprovalNotification = Wh, exports2.OauthClientConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Hh(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.OauthToken = Qh, exports2.OpsgenieSettings = Jh, exports2.Organization = Kh, exports2.OrganizationAcceptedOrExpiredInviteDetailsPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.status = i2.status;
      }
    }, exports2.OrganizationCancelDeletePayload = $h, exports2.OrganizationDeleteChallengeMutation = zF, exports2.OrganizationDeletePayload = Zh, exports2.OrganizationDomain = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.claimed = null !== (a2 = i2.claimed) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.disableOrganizationCreation = null !== (d2 = i2.disableOrganizationCreation) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.name = i2.name, this.updatedAt = null !== (l2 = Yc(i2.updatedAt)) && void 0 !== l2 ? l2 : /* @__PURE__ */ new Date(), this.verificationEmail = null !== (m2 = i2.verificationEmail) && void 0 !== m2 ? m2 : void 0, this.verified = i2.verified, this.authType = i2.authType, this._creator = null !== (o2 = i2.creator) && void 0 !== o2 ? o2 : void 0;
      }
      get creator() {
        var e2, i2;
        return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new Lb(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      delete() {
        return new HF(this._request).fetch(this.id);
      }
    }, exports2.OrganizationExistsPayload = Yh, exports2.OrganizationExistsQuery = tb, exports2.OrganizationInvite = Xh, exports2.OrganizationInviteConnection = ef, exports2.OrganizationInviteFullDetailsPayload = class extends Jc {
      constructor(e2, i2) {
        var n2, a2;
        super(e2), this.accepted = i2.accepted, this.allowedAuthServices = i2.allowedAuthServices, this.createdAt = null !== (n2 = Yc(i2.createdAt)) && void 0 !== n2 ? n2 : /* @__PURE__ */ new Date(), this.email = i2.email, this.expired = i2.expired, this.inviter = i2.inviter, this.organizationId = i2.organizationId, this.organizationLogoUrl = null !== (a2 = i2.organizationLogoUrl) && void 0 !== a2 ? a2 : void 0, this.organizationName = i2.organizationName, this.role = i2.role, this.status = i2.status;
      }
    }, exports2.OrganizationInviteLinkDetailsPayload = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.allowedAuthServices = i2.allowedAuthServices, this.organizationId = null !== (n2 = i2.organizationId) && void 0 !== n2 ? n2 : void 0, this.organizationLogoUrl = null !== (a2 = i2.organizationLogoUrl) && void 0 !== a2 ? a2 : void 0, this.organizationName = null !== (t2 = i2.organizationName) && void 0 !== t2 ? t2 : void 0, this.organizationRegion = null !== (d2 = i2.organizationRegion) && void 0 !== d2 ? d2 : void 0, this.organizationUrlKey = null !== (l2 = i2.organizationUrlKey) && void 0 !== l2 ? l2 : void 0;
      }
    }, exports2.OrganizationInvitePayload = nf, exports2.OrganizationInviteQuery = db, exports2.OrganizationInvitesQuery = lb, exports2.OrganizationIpRestriction = af, exports2.OrganizationMeta = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.allowedAuthServices = i2.allowedAuthServices, this.region = i2.region;
      }
    }, exports2.OrganizationPayload = tf, exports2.OrganizationQuery = ab, exports2.OrganizationRegionResponse = class extends Jc {
      constructor(e2, i2) {
        var n2;
        super(e2), this.region = null !== (n2 = i2.region) && void 0 !== n2 ? n2 : void 0, this.success = i2.success;
      }
    }, exports2.OrganizationStartTrialMutation = JF, exports2.OrganizationStartTrialPayload = df, exports2.Organization_IntegrationsQuery = q_, exports2.Organization_LabelsQuery = x_, exports2.Organization_SubscriptionQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(Bo, {})).organization.subscription;
          return e2 ? new of5(this._request, e2) : void 0;
        });
      }
    }, exports2.Organization_TeamsQuery = j_, exports2.Organization_TemplatesQuery = O_, exports2.Organization_UsersQuery = U_, exports2.OtherLinearError = C, exports2.PageInfo = lf, exports2.PagerDutySettings = mf, exports2.PaidSubscription = of5, exports2.Passkey = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2, u2, k2;
        super(e2), this.aaguid = i2.aaguid, this.browserType = null !== (n2 = i2.browserType) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.ip = null !== (t2 = i2.ip) && void 0 !== t2 ? t2 : void 0, this.label = i2.label, this.lastUsedAt = null !== (d2 = Yc(i2.lastUsedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date(), this.lastUsedSessionId = null !== (l2 = i2.lastUsedSessionId) && void 0 !== l2 ? l2 : void 0, this.locationCity = null !== (m2 = i2.locationCity) && void 0 !== m2 ? m2 : void 0, this.locationCountry = null !== (o2 = i2.locationCountry) && void 0 !== o2 ? o2 : void 0, this.locationCountryCode = null !== (r2 = i2.locationCountryCode) && void 0 !== r2 ? r2 : void 0, this.locationRegionCode = null !== (s2 = i2.locationRegionCode) && void 0 !== s2 ? s2 : void 0, this.updatedAt = null !== (u2 = Yc(i2.updatedAt)) && void 0 !== u2 ? u2 : /* @__PURE__ */ new Date(), this.userAgent = null !== (k2 = i2.userAgent) && void 0 !== k2 ? k2 : void 0, this.clientType = i2.clientType;
      }
    }, exports2.PasskeyLoginStartResponse = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.options = i2.options, this.success = i2.success;
      }
    }, exports2.Project = rf, exports2.ProjectArchivePayload = sf, exports2.ProjectConnection = uf, exports2.ProjectFilterSuggestionPayload = kf, exports2.ProjectFilterSuggestionQuery = ob, exports2.ProjectHistory = pf, exports2.ProjectHistoryConnection = cf, exports2.ProjectLink = vf, exports2.ProjectLinkConnection = Nf, exports2.ProjectLinkPayload = hf, exports2.ProjectLinkQuery = rb, exports2.ProjectLinksQuery = sb, exports2.ProjectMilestone = ff, exports2.ProjectMilestoneConnection = Sf, exports2.ProjectMilestoneMoveIssueToTeam = yf, exports2.ProjectMilestoneMovePayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.previousProjectTeamIds = i2.previousProjectTeamIds ? new bf(e2, i2.previousProjectTeamIds) : void 0, this.previousIssueTeamIds = i2.previousIssueTeamIds ? i2.previousIssueTeamIds.map((i3) => new yf(e2, i3)) : void 0, this._projectMilestone = i2.projectMilestone;
      }
      get projectMilestone() {
        return new ub(this._request).fetch(this._projectMilestone.id);
      }
    }, exports2.ProjectMilestoneMoveProjectTeams = bf, exports2.ProjectMilestonePayload = gf, exports2.ProjectMilestoneQuery = ub, exports2.ProjectMilestone_DocumentContentQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(or, { id: this._id })).projectMilestone.documentContent;
          return e2 ? new Mv(this._request, e2) : void 0;
        });
      }
    }, exports2.ProjectMilestone_IssuesQuery = J_, exports2.ProjectMilestonesQuery = kb, exports2.ProjectNotification = Df, exports2.ProjectNotificationSubscription = Ff, exports2.ProjectPayload = Vf, exports2.ProjectQuery = mb, exports2.ProjectRelation = _f, exports2.ProjectRelationConnection = Af, exports2.ProjectRelationPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectRelation = i2.projectRelation;
      }
      get projectRelation() {
        return new pb(this._request).fetch(this._projectRelation.id);
      }
    }, exports2.ProjectRelationQuery = pb, exports2.ProjectRelationsQuery = cb, exports2.ProjectSearchPayload = Tf, exports2.ProjectSearchResult = wf, exports2.ProjectSearchResultConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new wf(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.ProjectStatus = If, exports2.ProjectStatusConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new If(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.ProjectUpdate = Cf, exports2.ProjectUpdateConnection = Pf, exports2.ProjectUpdateInteraction = qf, exports2.ProjectUpdateInteractionConnection = xf, exports2.ProjectUpdateInteractionPayload = jf, exports2.ProjectUpdateInteractionQuery = Nb, exports2.ProjectUpdateInteractionsQuery = hb, exports2.ProjectUpdateMarkAsReadMutation = sV, exports2.ProjectUpdatePayload = Of, exports2.ProjectUpdateQuery = vb, exports2.ProjectUpdateReminderPayload = Uf, exports2.ProjectUpdateWithInteractionPayload = Bf, exports2.ProjectUpdate_CommentsQuery = K_, exports2.ProjectUpdatesQuery = fb, exports2.Project_DocumentContentQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(Wo, { id: this._id })).project.documentContent;
          return e2 ? new Mv(this._request, e2) : void 0;
        });
      }
    }, exports2.Project_DocumentsQuery = B_, exports2.Project_ExternalLinksQuery = E_, exports2.Project_HistoryQuery = R_, exports2.Project_InitiativesQuery = M_, exports2.Project_IssuesQuery = L_, exports2.Project_LinksQuery = z_, exports2.Project_MembersQuery = H_, exports2.Project_ProjectMilestonesQuery = G_, exports2.Project_ProjectUpdatesQuery = W_, exports2.Project_StatusQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(nr, { id: this._id })).project.status;
          return new If(this._request, e2);
        });
      }
    }, exports2.Project_TeamsQuery = Q_, exports2.ProjectsQuery = Sb, exports2.PushSubscription = Ef, exports2.PushSubscriptionConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Ef(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.PushSubscriptionPayload = Rf, exports2.PushSubscriptionTestPayload = Mf, exports2.PushSubscriptionTestQuery = yb, exports2.RateLimitPayload = Lf, exports2.RateLimitResultPayload = zf, exports2.RateLimitStatusQuery = bb, exports2.RatelimitedLinearError = F, exports2.Reaction = Hf, exports2.ReactionConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new Hf(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.ReactionPayload = Gf, exports2.RefreshGoogleSheetsDataMutation = NV, exports2.Reminder = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2, m2, o2, r2, s2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.comment = null !== (a2 = i2.comment) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = Yc(i2.createdAt)) && void 0 !== t2 ? t2 : /* @__PURE__ */ new Date(), this.id = i2.id, this.remindAt = null !== (d2 = Yc(i2.remindAt)) && void 0 !== d2 ? d2 : void 0, this.schedule = null !== (l2 = i2.schedule) && void 0 !== l2 ? l2 : void 0, this.updatedAt = null !== (m2 = Yc(i2.updatedAt)) && void 0 !== m2 ? m2 : /* @__PURE__ */ new Date(), this._documentId = null !== (o2 = i2.documentId) && void 0 !== o2 ? o2 : void 0, this._issueId = null !== (r2 = i2.issueId) && void 0 !== r2 ? r2 : void 0, this._projectId = null !== (s2 = i2.projectId) && void 0 !== s2 ? s2 : void 0, this._user = i2.user;
      }
      get documentId() {
        var e2, i2;
        return (null === (e2 = this._documentId) || void 0 === e2 ? void 0 : e2.id) ? new yy(this._request).fetch(null === (i2 = this._documentId) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get issueId() {
        var e2, i2;
        return (null === (e2 = this._issueId) || void 0 === e2 ? void 0 : e2.id) ? new Ry(this._request).fetch(null === (i2 = this._issueId) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get projectId() {
        var e2, i2;
        return (null === (e2 = this._projectId) || void 0 === e2 ? void 0 : e2.id) ? new mb(this._request).fetch(null === (i2 = this._projectId) || void 0 === i2 ? void 0 : i2.id) : void 0;
      }
      get user() {
        return new Lb(this._request).fetch(this._user.id);
      }
    }, exports2.Request = Jc, exports2.ResendOrganizationInviteMutation = hV, exports2.Roadmap = Wf, exports2.RoadmapArchivePayload = Qf, exports2.RoadmapConnection = Jf, exports2.RoadmapPayload = Kf, exports2.RoadmapQuery = gb, exports2.RoadmapToProject = $f, exports2.RoadmapToProjectConnection = Zf, exports2.RoadmapToProjectPayload = Yf, exports2.RoadmapToProjectQuery = Db, exports2.RoadmapToProjectsQuery = Fb, exports2.Roadmap_ProjectsQuery = $_, exports2.RoadmapsQuery = Vb, exports2.SamlTokenUserAccountAuthMutation = _V, exports2.SearchDocumentsQuery = _b, exports2.SearchDocuments_ArchivePayloadQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._term = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ar, Object.assign(Object.assign({ term: this._term }, this._variables), e2))).searchDocuments.archivePayload;
          return new tv(this._request, i2);
        });
      }
    }, exports2.SearchIssuesQuery = Ab, exports2.SearchIssues_ArchivePayloadQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._term = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(wr, Object.assign(Object.assign({ term: this._term }, this._variables), e2))).searchIssues.archivePayload;
          return new tv(this._request, i2);
        });
      }
    }, exports2.SearchProjectsQuery = Tb, exports2.SearchProjects_ArchivePayloadQuery = class extends Jc {
      constructor(e2, i2, n2) {
        super(e2), this._term = i2, this._variables = n2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Cr, Object.assign(Object.assign({ term: this._term }, this._variables), e2))).searchProjects.archivePayload;
          return new tv(this._request, i2);
        });
      }
    }, exports2.SentrySettings = Xf, exports2.SharedSlackSettings = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2, l2;
        super(e2), this.enterpriseId = null !== (n2 = i2.enterpriseId) && void 0 !== n2 ? n2 : void 0, this.enterpriseName = null !== (a2 = i2.enterpriseName) && void 0 !== a2 ? a2 : void 0, this.shouldUnfurl = null !== (t2 = i2.shouldUnfurl) && void 0 !== t2 ? t2 : void 0, this.teamId = null !== (d2 = i2.teamId) && void 0 !== d2 ? d2 : void 0, this.teamName = null !== (l2 = i2.teamName) && void 0 !== l2 ? l2 : void 0;
      }
    }, exports2.SlackAsksSettings = eS, exports2.SlackAsksTeamSettings = iS, exports2.SlackChannelConnectPayload = nS, exports2.SlackChannelNameMapping = aS, exports2.SlackPostSettings = tS, exports2.SlackSettings = dS, exports2.SsoUrlFromEmailQuery = wb, exports2.SsoUrlFromEmailResponse = lS, exports2.SuccessPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
      }
    }, exports2.SummaryPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.summary = i2.summary;
      }
    }, exports2.SuspendUserMutation = n_, exports2.SyncEntityCountQuery = Ib, exports2.SynchronizedPayload = class extends Jc {
      constructor(e2, i2) {
        super(e2), this.lastSyncId = i2.lastSyncId;
      }
    }, exports2.Team = mS, exports2.TeamArchivePayload = oS, exports2.TeamConnection = rS, exports2.TeamMembership = sS, exports2.TeamMembershipConnection = uS, exports2.TeamMembershipPayload = kS, exports2.TeamMembershipQuery = Pb, exports2.TeamMembershipsQuery = qb, exports2.TeamNotificationSubscription = pS, exports2.TeamPayload = cS, exports2.TeamQuery = Cb, exports2.Team_CyclesQuery = Z_, exports2.Team_GitAutomationStatesQuery = Y_, exports2.Team_IssuesQuery = X_, exports2.Team_LabelsQuery = eA, exports2.Team_MembersQuery = iA, exports2.Team_MembershipsQuery = nA, exports2.Team_ProjectsQuery = aA, exports2.Team_StatesQuery = tA, exports2.Team_TemplatesQuery = dA, exports2.Team_WebhooksQuery = lA, exports2.TeamsQuery = xb, exports2.Template = vS, exports2.TemplateConnection = NS, exports2.TemplatePayload = hS, exports2.TemplateQuery = jb, exports2.TemplatesForIntegrationQuery = Ub, exports2.TemplatesQuery = Ob, exports2.TimeSchedule = fS, exports2.TimeScheduleConnection = SS, exports2.TimeScheduleEntry = yS, exports2.TimeSchedulePayload = bS, exports2.TimeScheduleQuery = Bb, exports2.TimeScheduleRefreshIntegrationScheduleMutation = MV, exports2.TimeScheduleUpsertExternalMutation = zV, exports2.TimeSchedulesQuery = Eb, exports2.TriageResponsibilitiesQuery = Rb, exports2.TriageResponsibility = gS, exports2.TriageResponsibilityConnection = DS, exports2.TriageResponsibilityManualSelection = FS, exports2.TriageResponsibilityPayload = VS, exports2.TriageResponsibilityQuery = Mb, exports2.TriageResponsibility_ManualSelectionQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._id = i2;
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(is, { id: this._id })).triageResponsibility.manualSelection;
          return e2 ? new FS(this._request, e2) : void 0;
        });
      }
    }, exports2.UnarchiveDocumentMutation = jg, exports2.UnarchiveInitiativeMutation = cD, exports2.UnarchiveIssueMutation = bF, exports2.UnarchiveNotificationMutation = BF, exports2.UnarchiveProjectMutation = dV, exports2.UnarchiveRoadmapMutation = FV, exports2.UnarchiveTeamMutation = xV, exports2.UnknownLinearError = w, exports2.UnsuspendUserMutation = a_, exports2.UpdateAttachmentMutation = kg, exports2.UpdateCommentMutation = hg, exports2.UpdateCustomViewMutation = Fg, exports2.UpdateCycleMutation = wg, exports2.UpdateDiaryEntryMutation = Pg, exports2.UpdateDocumentMutation = Og, exports2.UpdateEmailIntakeAddressMutation = Rg, exports2.UpdateEntityExternalLinkMutation = Jg, exports2.UpdateFavoriteMutation = Zg, exports2.UpdateGitAutomationStateMutation = iD, exports2.UpdateGitAutomationTargetBranchMutation = tD, exports2.UpdateInitiativeMutation = vD, exports2.UpdateInitiativeToProjectMutation = pD, exports2.UpdateIntegrationIntercomSettingsMutation = CD, exports2.UpdateIntegrationsSettingsMutation = JD, exports2.UpdateIssueBatchMutation = ZD, exports2.UpdateIssueDraftMutation = aF, exports2.UpdateIssueImportMutation = uF, exports2.UpdateIssueLabelMutation = cF, exports2.UpdateIssueMutation = DF, exports2.UpdateIssueRelationMutation = hF, exports2.UpdateNotificationMutation = RF, exports2.UpdateNotificationSubscriptionMutation = UF, exports2.UpdateOrganizationInviteMutation = QF, exports2.UpdateOrganizationMutation = KF, exports2.UpdateProjectLinkMutation = iV, exports2.UpdateProjectMilestoneMutation = tV, exports2.UpdateProjectMutation = lV, exports2.UpdateProjectUpdateMutation = uV, exports2.UpdateRoadmapMutation = VV, exports2.UpdateRoadmapToProjectMutation = DV, exports2.UpdateTeamMembershipMutation = qV, exports2.UpdateTeamMutation = jV, exports2.UpdateTemplateMutation = BV, exports2.UpdateTimeScheduleMutation = LV, exports2.UpdateTriageResponsibilityMutation = WV, exports2.UpdateUserFlagMutation = ZV, exports2.UpdateUserMutation = t_, exports2.UpdateUserSettingsMutation = i_, exports2.UpdateViewPreferencesMutation = m_, exports2.UpdateWebhookMutation = s_, exports2.UpdateWorkflowStateMutation = p_, exports2.UploadFile = _S, exports2.UploadFileHeader = AS, exports2.UploadPayload = TS, exports2.User = wS, exports2.UserAccount = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2, d2;
        super(e2), this.archivedAt = null !== (n2 = Yc(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.authTokenLinkDisabled = i2.authTokenLinkDisabled, this.createdAt = null !== (a2 = Yc(i2.createdAt)) && void 0 !== a2 ? a2 : /* @__PURE__ */ new Date(), this.email = i2.email, this.id = i2.id, this.name = null !== (t2 = i2.name) && void 0 !== t2 ? t2 : void 0, this.service = i2.service, this.updatedAt = null !== (d2 = Yc(i2.updatedAt)) && void 0 !== d2 ? d2 : /* @__PURE__ */ new Date();
      }
    }, exports2.UserAdminPayload = IS, exports2.UserAuthorizedApplication = CS, exports2.UserConnection = PS, exports2.UserDemoteAdminMutation = QV, exports2.UserDemoteMemberMutation = JV, exports2.UserDiscordConnectMutation = KV, exports2.UserExternalUserDisconnectMutation = $V, exports2.UserLinearError = P, exports2.UserNotificationSubscription = qS, exports2.UserPayload = xS, exports2.UserPromoteAdminMutation = YV, exports2.UserPromoteMemberMutation = XV, exports2.UserQuery = Lb, exports2.UserSettings = jS, exports2.UserSettingsFlagPayload = OS, exports2.UserSettingsFlagsResetMutation = e_, exports2.UserSettingsFlagsResetPayload = US, exports2.UserSettingsPayload = BS, exports2.UserSettingsQuery = zb, exports2.UserSettings_NotificationDeliveryPreferencesQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(os, {})).userSettings.notificationDeliveryPreferences;
          return new jh(this._request, e2);
        });
      }
    }, exports2.UserSettings_NotificationDeliveryPreferences_MobileQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        return v(this, void 0, void 0, function* () {
          const e2 = (yield this._request(rs, {})).userSettings.notificationDeliveryPreferences.mobile;
          return e2 ? new Oh(this._request, e2) : void 0;
        });
      }
    }, exports2.UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        var e2;
        return v(this, void 0, void 0, function* () {
          const i2 = yield this._request(ss, {}), n2 = null === (e2 = i2.userSettings.notificationDeliveryPreferences.mobile) || void 0 === e2 ? void 0 : e2.schedule;
          return n2 ? new Bh(this._request, n2) : void 0;
        });
      }
    }, exports2.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        var e2, i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(us, {}), a2 = null === (i2 = null === (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) || void 0 === e2 ? void 0 : e2.schedule) || void 0 === i2 ? void 0 : i2.friday;
          return a2 ? new Uh(this._request, a2) : void 0;
        });
      }
    }, exports2.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        var e2, i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(ks, {}), a2 = null === (i2 = null === (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) || void 0 === e2 ? void 0 : e2.schedule) || void 0 === i2 ? void 0 : i2.monday;
          return a2 ? new Uh(this._request, a2) : void 0;
        });
      }
    }, exports2.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        var e2, i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(ps, {}), a2 = null === (i2 = null === (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) || void 0 === e2 ? void 0 : e2.schedule) || void 0 === i2 ? void 0 : i2.saturday;
          return a2 ? new Uh(this._request, a2) : void 0;
        });
      }
    }, exports2.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        var e2, i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(cs, {}), a2 = null === (i2 = null === (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) || void 0 === e2 ? void 0 : e2.schedule) || void 0 === i2 ? void 0 : i2.sunday;
          return a2 ? new Uh(this._request, a2) : void 0;
        });
      }
    }, exports2.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        var e2, i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(vs, {}), a2 = null === (i2 = null === (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) || void 0 === e2 ? void 0 : e2.schedule) || void 0 === i2 ? void 0 : i2.thursday;
          return a2 ? new Uh(this._request, a2) : void 0;
        });
      }
    }, exports2.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        var e2, i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(Ns, {}), a2 = null === (i2 = null === (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) || void 0 === e2 ? void 0 : e2.schedule) || void 0 === i2 ? void 0 : i2.tuesday;
          return a2 ? new Uh(this._request, a2) : void 0;
        });
      }
    }, exports2.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery = class extends Jc {
      constructor(e2) {
        super(e2);
      }
      fetch() {
        var e2, i2;
        return v(this, void 0, void 0, function* () {
          const n2 = yield this._request(hs, {}), a2 = null === (i2 = null === (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) || void 0 === e2 ? void 0 : e2.schedule) || void 0 === i2 ? void 0 : i2.wednesday;
          return a2 ? new Uh(this._request, a2) : void 0;
        });
      }
    }, exports2.User_AssignedIssuesQuery = mA, exports2.User_CreatedIssuesQuery = oA, exports2.User_TeamMembershipsQuery = rA, exports2.User_TeamsQuery = sA, exports2.UsersQuery = Hb, exports2.VerifyGitHubEnterpriseServerInstallationQuery = Gb, exports2.ViewPreferences = ES, exports2.ViewPreferencesPayload = RS, exports2.ViewPreferencesValues = MS, exports2.ViewerQuery = Wb, exports2.Viewer_AssignedIssuesQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(bs, e2)).viewer.assignedIssues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.Viewer_CreatedIssuesQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(gs, e2)).viewer.createdIssues;
          return new ih(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.Viewer_TeamMembershipsQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Ds, e2)).viewer.teamMemberships;
          return new uS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.Viewer_TeamsQuery = class extends Jc {
      constructor(e2, i2) {
        super(e2), this._variables = i2;
      }
      fetch(e2) {
        return v(this, void 0, void 0, function* () {
          const i2 = (yield this._request(Fs, e2)).viewer.teams;
          return new rS(this._request, (i3) => this.fetch(Kc(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
        });
      }
    }, exports2.Webhook = LS, exports2.WebhookConnection = zS, exports2.WebhookFailureEvent = class extends Jc {
      constructor(e2, i2) {
        var n2, a2, t2;
        super(e2), this.createdAt = null !== (n2 = Yc(i2.createdAt)) && void 0 !== n2 ? n2 : /* @__PURE__ */ new Date(), this.executionId = i2.executionId, this.httpStatus = null !== (a2 = i2.httpStatus) && void 0 !== a2 ? a2 : void 0, this.id = i2.id, this.responseOrError = null !== (t2 = i2.responseOrError) && void 0 !== t2 ? t2 : void 0, this.url = i2.url, this._webhook = i2.webhook;
      }
      get webhook() {
        return new Qb(this._request).fetch(this._webhook.id);
      }
    }, exports2.WebhookPayload = HS, exports2.WebhookQuery = Qb, exports2.WebhooksQuery = Jb, exports2.WorkflowCronJobDefinition = GS, exports2.WorkflowCronJobDefinitionConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new GS(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.WorkflowDefinition = WS, exports2.WorkflowDefinitionConnection = class extends Zc {
      constructor(e2, i2, n2) {
        super(e2, i2, n2.nodes.map((i3) => new WS(e2, i3)), new lf(e2, n2.pageInfo));
      }
    }, exports2.WorkflowState = QS, exports2.WorkflowStateArchivePayload = JS, exports2.WorkflowStateConnection = KS, exports2.WorkflowStatePayload = $S, exports2.WorkflowStateQuery = Kb, exports2.WorkflowState_IssuesQuery = uA, exports2.WorkflowStatesQuery = $b, exports2.ZendeskSettings = ZS, exports2.parseLinearError = O;
  }
});

// node_modules/@actions/core/lib/utils.js
var require_utils4 = __commonJS({
  "node_modules/@actions/core/lib/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toCommandProperties = exports2.toCommandValue = void 0;
    function toCommandValue(input) {
      if (input === null || input === void 0) {
        return "";
      } else if (typeof input === "string" || input instanceof String) {
        return input;
      }
      return JSON.stringify(input);
    }
    exports2.toCommandValue = toCommandValue;
    function toCommandProperties(annotationProperties) {
      if (!Object.keys(annotationProperties).length) {
        return {};
      }
      return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
      };
    }
    exports2.toCommandProperties = toCommandProperties;
  }
});

// node_modules/@actions/core/lib/command.js
var require_command = __commonJS({
  "node_modules/@actions/core/lib/command.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.issue = exports2.issueCommand = void 0;
    var os = __importStar(require("os"));
    var utils_1 = require_utils4();
    function issueCommand(command, properties, message) {
      const cmd = new Command(command, properties, message);
      process.stdout.write(cmd.toString() + os.EOL);
    }
    exports2.issueCommand = issueCommand;
    function issue(name, message = "") {
      issueCommand(name, {}, message);
    }
    exports2.issue = issue;
    var CMD_STRING = "::";
    var Command = class {
      constructor(command, properties, message) {
        if (!command) {
          command = "missing.command";
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
      }
      toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
          cmdStr += " ";
          let first2 = true;
          for (const key in this.properties) {
            if (this.properties.hasOwnProperty(key)) {
              const val = this.properties[key];
              if (val) {
                if (first2) {
                  first2 = false;
                } else {
                  cmdStr += ",";
                }
                cmdStr += `${key}=${escapeProperty(val)}`;
              }
            }
          }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
      }
    };
    function escapeData(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
    }
    function escapeProperty(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
    }
  }
});

// node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-node/validate.js
function validate5(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate5;
  }
});

// node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value3, namespace, buf, offset) {
    if (typeof value3 === "string") {
      value3 = stringToBytes(value3);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value3.length);
    bytes.set(namespace);
    bytes.set(value3, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({
  "node_modules/@actions/core/lib/file-command.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareKeyValueMessage = exports2.issueFileCommand = void 0;
    var fs = __importStar(require("fs"));
    var os = __importStar(require("os"));
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var utils_1 = require_utils4();
    function issueFileCommand(command, message) {
      const filePath = process.env[`GITHUB_${command}`];
      if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
      }
      if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
      }
      fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: "utf8"
      });
    }
    exports2.issueFileCommand = issueFileCommand;
    function prepareKeyValueMessage(key, value3) {
      const delimiter = `ghadelimiter_${uuid_1.v4()}`;
      const convertedValue = utils_1.toCommandValue(value3);
      if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
      }
      if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
      }
      return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
    }
    exports2.prepareKeyValueMessage = prepareKeyValueMessage;
  }
});

// node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({
  "node_modules/@actions/http-client/lib/auth.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value3) {
        return value3 instanceof P ? value3 : new P(function(resolve) {
          resolve(value3);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value3) {
          try {
            step4(generator.next(value3));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value3) {
          try {
            step4(generator["throw"](value3));
          } catch (e) {
            reject(e);
          }
        }
        function step4(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step4((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PersonalAccessTokenCredentialHandler = exports2.BearerCredentialHandler = exports2.BasicCredentialHandler = void 0;
    var BasicCredentialHandler = class {
      constructor(username, password) {
        this.username = username;
        this.password = password;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports2.BasicCredentialHandler = BasicCredentialHandler;
    var BearerCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Bearer ${this.token}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports2.BearerCredentialHandler = BearerCredentialHandler;
    var PersonalAccessTokenCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports2.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({
  "node_modules/@actions/core/lib/oidc-utils.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value3) {
        return value3 instanceof P ? value3 : new P(function(resolve) {
          resolve(value3);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value3) {
          try {
            step4(generator.next(value3));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value3) {
          try {
            step4(generator["throw"](value3));
          } catch (e) {
            reject(e);
          }
        }
        function step4(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step4((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OidcClient = void 0;
    var http_client_1 = require_lib();
    var auth_1 = require_auth();
    var core_1 = require_core();
    var OidcClient = class _OidcClient {
      static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
          allowRetries: allowRetry,
          maxRetries: maxRetry
        };
        return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(_OidcClient.getRequestToken())], requestOptions);
      }
      static getRequestToken() {
        const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
        if (!token) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
        }
        return token;
      }
      static getIDTokenUrl() {
        const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
        if (!runtimeUrl) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
        }
        return runtimeUrl;
      }
      static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          const httpclient = _OidcClient.createHttpClient();
          const res = yield httpclient.getJson(id_token_url).catch((error) => {
            throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error.statusCode}
 
        Error Message: ${error.message}`);
          });
          const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
          if (!id_token) {
            throw new Error("Response json body do not have ID Token field");
          }
          return id_token;
        });
      }
      static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            let id_token_url = _OidcClient.getIDTokenUrl();
            if (audience) {
              const encodedAudience = encodeURIComponent(audience);
              id_token_url = `${id_token_url}&audience=${encodedAudience}`;
            }
            core_1.debug(`ID token url is ${id_token_url}`);
            const id_token = yield _OidcClient.getCall(id_token_url);
            core_1.setSecret(id_token);
            return id_token;
          } catch (error) {
            throw new Error(`Error message: ${error.message}`);
          }
        });
      }
    };
    exports2.OidcClient = OidcClient;
  }
});

// node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({
  "node_modules/@actions/core/lib/summary.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value3) {
        return value3 instanceof P ? value3 : new P(function(resolve) {
          resolve(value3);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value3) {
          try {
            step4(generator.next(value3));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value3) {
          try {
            step4(generator["throw"](value3));
          } catch (e) {
            reject(e);
          }
        }
        function step4(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step4((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.summary = exports2.markdownSummary = exports2.SUMMARY_DOCS_URL = exports2.SUMMARY_ENV_VAR = void 0;
    var os_1 = require("os");
    var fs_1 = require("fs");
    var { access, appendFile, writeFile } = fs_1.promises;
    exports2.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
    exports2.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
    var Summary = class {
      constructor() {
        this._buffer = "";
      }
      /**
       * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
       * Also checks r/w permissions.
       *
       * @returns step summary file path
       */
      filePath() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._filePath) {
            return this._filePath;
          }
          const pathFromEnv = process.env[exports2.SUMMARY_ENV_VAR];
          if (!pathFromEnv) {
            throw new Error(`Unable to find environment variable for $${exports2.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
          }
          try {
            yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
          } catch (_a) {
            throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
          }
          this._filePath = pathFromEnv;
          return this._filePath;
        });
      }
      /**
       * Wraps content in an HTML tag, adding any HTML attributes
       *
       * @param {string} tag HTML tag to wrap
       * @param {string | null} content content within the tag
       * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
       *
       * @returns {string} content wrapped in HTML element
       */
      wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs).map(([key, value3]) => ` ${key}="${value3}"`).join("");
        if (!content) {
          return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
      }
      /**
       * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
       *
       * @param {SummaryWriteOptions} [options] (optional) options for write operation
       *
       * @returns {Promise<Summary>} summary instance
       */
      write(options) {
        return __awaiter(this, void 0, void 0, function* () {
          const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
          const filePath = yield this.filePath();
          const writeFunc = overwrite ? writeFile : appendFile;
          yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
          return this.emptyBuffer();
        });
      }
      /**
       * Clears the summary buffer and wipes the summary file
       *
       * @returns {Summary} summary instance
       */
      clear() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: true });
        });
      }
      /**
       * Returns the current summary buffer as a string
       *
       * @returns {string} string of summary buffer
       */
      stringify() {
        return this._buffer;
      }
      /**
       * If the summary buffer is empty
       *
       * @returns {boolen} true if the buffer is empty
       */
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      /**
       * Resets the summary buffer without writing to summary file
       *
       * @returns {Summary} summary instance
       */
      emptyBuffer() {
        this._buffer = "";
        return this;
      }
      /**
       * Adds raw text to the summary buffer
       *
       * @param {string} text content to add
       * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
       *
       * @returns {Summary} summary instance
       */
      addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
      }
      /**
       * Adds the operating system-specific end-of-line marker to the buffer
       *
       * @returns {Summary} summary instance
       */
      addEOL() {
        return this.addRaw(os_1.EOL);
      }
      /**
       * Adds an HTML codeblock to the summary buffer
       *
       * @param {string} code content to render within fenced code block
       * @param {string} lang (optional) language to syntax highlight code
       *
       * @returns {Summary} summary instance
       */
      addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && { lang });
        const element = this.wrap("pre", this.wrap("code", code), attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML list to the summary buffer
       *
       * @param {string[]} items list of items to render
       * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
       *
       * @returns {Summary} summary instance
       */
      addList(items, ordered = false) {
        const tag = ordered ? "ol" : "ul";
        const listItems = items.map((item) => this.wrap("li", item)).join("");
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML table to the summary buffer
       *
       * @param {SummaryTableCell[]} rows table rows
       *
       * @returns {Summary} summary instance
       */
      addTable(rows) {
        const tableBody = rows.map((row) => {
          const cells = row.map((cell) => {
            if (typeof cell === "string") {
              return this.wrap("td", cell);
            }
            const { header, data, colspan, rowspan } = cell;
            const tag = header ? "th" : "td";
            const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
            return this.wrap(tag, data, attrs);
          }).join("");
          return this.wrap("tr", cells);
        }).join("");
        const element = this.wrap("table", tableBody);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds a collapsable HTML details element to the summary buffer
       *
       * @param {string} label text for the closed state
       * @param {string} content collapsable content
       *
       * @returns {Summary} summary instance
       */
      addDetails(label, content) {
        const element = this.wrap("details", this.wrap("summary", label) + content);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML image tag to the summary buffer
       *
       * @param {string} src path to the image you to embed
       * @param {string} alt text description of the image
       * @param {SummaryImageOptions} options (optional) addition image attributes
       *
       * @returns {Summary} summary instance
       */
      addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
        const element = this.wrap("img", null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML section heading element
       *
       * @param {string} text heading text
       * @param {number | string} [level=1] (optional) the heading level, default: 1
       *
       * @returns {Summary} summary instance
       */
      addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag) ? tag : "h1";
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML thematic break (<hr>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addSeparator() {
        const element = this.wrap("hr", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML line break (<br>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addBreak() {
        const element = this.wrap("br", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML blockquote to the summary buffer
       *
       * @param {string} text quote text
       * @param {string} cite (optional) citation url
       *
       * @returns {Summary} summary instance
       */
      addQuote(text, cite) {
        const attrs = Object.assign({}, cite && { cite });
        const element = this.wrap("blockquote", text, attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML anchor tag to the summary buffer
       *
       * @param {string} text link text/content
       * @param {string} href hyperlink
       *
       * @returns {Summary} summary instance
       */
      addLink(text, href) {
        const element = this.wrap("a", text, { href });
        return this.addRaw(element).addEOL();
      }
    };
    var _summary = new Summary();
    exports2.markdownSummary = _summary;
    exports2.summary = _summary;
  }
});

// node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({
  "node_modules/@actions/core/lib/path-utils.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toPlatformPath = exports2.toWin32Path = exports2.toPosixPath = void 0;
    var path = __importStar(require("path"));
    function toPosixPath(pth) {
      return pth.replace(/[\\]/g, "/");
    }
    exports2.toPosixPath = toPosixPath;
    function toWin32Path(pth) {
      return pth.replace(/[/]/g, "\\");
    }
    exports2.toWin32Path = toWin32Path;
    function toPlatformPath(pth) {
      return pth.replace(/[/\\]/g, path.sep);
    }
    exports2.toPlatformPath = toPlatformPath;
  }
});

// node_modules/@actions/core/lib/core.js
var require_core = __commonJS({
  "node_modules/@actions/core/lib/core.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value3) {
        return value3 instanceof P ? value3 : new P(function(resolve) {
          resolve(value3);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value3) {
          try {
            step4(generator.next(value3));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value3) {
          try {
            step4(generator["throw"](value3));
          } catch (e) {
            reject(e);
          }
        }
        function step4(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step4((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getIDToken = exports2.getState = exports2.saveState = exports2.group = exports2.endGroup = exports2.startGroup = exports2.info = exports2.notice = exports2.warning = exports2.error = exports2.debug = exports2.isDebug = exports2.setFailed = exports2.setCommandEcho = exports2.setOutput = exports2.getBooleanInput = exports2.getMultilineInput = exports2.getInput = exports2.addPath = exports2.setSecret = exports2.exportVariable = exports2.ExitCode = void 0;
    var command_1 = require_command();
    var file_command_1 = require_file_command();
    var utils_1 = require_utils4();
    var os = __importStar(require("os"));
    var path = __importStar(require("path"));
    var oidc_utils_1 = require_oidc_utils();
    var ExitCode;
    (function(ExitCode2) {
      ExitCode2[ExitCode2["Success"] = 0] = "Success";
      ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
    })(ExitCode = exports2.ExitCode || (exports2.ExitCode = {}));
    function exportVariable(name, val) {
      const convertedVal = utils_1.toCommandValue(val);
      process.env[name] = convertedVal;
      const filePath = process.env["GITHUB_ENV"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("ENV", file_command_1.prepareKeyValueMessage(name, val));
      }
      command_1.issueCommand("set-env", { name }, convertedVal);
    }
    exports2.exportVariable = exportVariable;
    function setSecret(secret3) {
      command_1.issueCommand("add-mask", {}, secret3);
    }
    exports2.setSecret = setSecret;
    function addPath(inputPath) {
      const filePath = process.env["GITHUB_PATH"] || "";
      if (filePath) {
        file_command_1.issueFileCommand("PATH", inputPath);
      } else {
        command_1.issueCommand("add-path", {}, inputPath);
      }
      process.env["PATH"] = `${inputPath}${path.delimiter}${process.env["PATH"]}`;
    }
    exports2.addPath = addPath;
    function getInput2(name, options) {
      const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
      }
      if (options && options.trimWhitespace === false) {
        return val;
      }
      return val.trim();
    }
    exports2.getInput = getInput2;
    function getMultilineInput(name, options) {
      const inputs2 = getInput2(name, options).split("\n").filter((x) => x !== "");
      if (options && options.trimWhitespace === false) {
        return inputs2;
      }
      return inputs2.map((input) => input.trim());
    }
    exports2.getMultilineInput = getMultilineInput;
    function getBooleanInput(name, options) {
      const trueValue = ["true", "True", "TRUE"];
      const falseValue = ["false", "False", "FALSE"];
      const val = getInput2(name, options);
      if (trueValue.includes(val))
        return true;
      if (falseValue.includes(val))
        return false;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    exports2.getBooleanInput = getBooleanInput;
    function setOutput(name, value3) {
      const filePath = process.env["GITHUB_OUTPUT"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("OUTPUT", file_command_1.prepareKeyValueMessage(name, value3));
      }
      process.stdout.write(os.EOL);
      command_1.issueCommand("set-output", { name }, utils_1.toCommandValue(value3));
    }
    exports2.setOutput = setOutput;
    function setCommandEcho(enabled2) {
      command_1.issue("echo", enabled2 ? "on" : "off");
    }
    exports2.setCommandEcho = setCommandEcho;
    function setFailed(message) {
      process.exitCode = ExitCode.Failure;
      error(message);
    }
    exports2.setFailed = setFailed;
    function isDebug2() {
      return process.env["RUNNER_DEBUG"] === "1";
    }
    exports2.isDebug = isDebug2;
    function debug(message) {
      command_1.issueCommand("debug", {}, message);
    }
    exports2.debug = debug;
    function error(message, properties = {}) {
      command_1.issueCommand("error", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports2.error = error;
    function warning(message, properties = {}) {
      command_1.issueCommand("warning", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports2.warning = warning;
    function notice(message, properties = {}) {
      command_1.issueCommand("notice", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports2.notice = notice;
    function info(message) {
      process.stdout.write(message + os.EOL);
    }
    exports2.info = info;
    function startGroup(name) {
      command_1.issue("group", name);
    }
    exports2.startGroup = startGroup;
    function endGroup() {
      command_1.issue("endgroup");
    }
    exports2.endGroup = endGroup;
    function group(name, fn) {
      return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
          result = yield fn();
        } finally {
          endGroup();
        }
        return result;
      });
    }
    exports2.group = group;
    function saveState(name, value3) {
      const filePath = process.env["GITHUB_STATE"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("STATE", file_command_1.prepareKeyValueMessage(name, value3));
      }
      command_1.issueCommand("save-state", { name }, utils_1.toCommandValue(value3));
    }
    exports2.saveState = saveState;
    function getState(name) {
      return process.env[`STATE_${name}`] || "";
    }
    exports2.getState = getState;
    function getIDToken(aud) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
      });
    }
    exports2.getIDToken = getIDToken;
    var summary_1 = require_summary();
    Object.defineProperty(exports2, "summary", { enumerable: true, get: function() {
      return summary_1.summary;
    } });
    var summary_2 = require_summary();
    Object.defineProperty(exports2, "markdownSummary", { enumerable: true, get: function() {
      return summary_2.markdownSummary;
    } });
    var path_utils_1 = require_path_utils();
    Object.defineProperty(exports2, "toPosixPath", { enumerable: true, get: function() {
      return path_utils_1.toPosixPath;
    } });
    Object.defineProperty(exports2, "toWin32Path", { enumerable: true, get: function() {
      return path_utils_1.toWin32Path;
    } });
    Object.defineProperty(exports2, "toPlatformPath", { enumerable: true, get: function() {
      return path_utils_1.toPlatformPath;
    } });
  }
});

// node_modules/effect/dist/esm/Function.js
var Function_exports = {};
__export(Function_exports, {
  SK: () => SK,
  absurd: () => absurd,
  apply: () => apply,
  compose: () => compose,
  constFalse: () => constFalse,
  constNull: () => constNull,
  constTrue: () => constTrue,
  constUndefined: () => constUndefined,
  constVoid: () => constVoid,
  constant: () => constant,
  dual: () => dual,
  flip: () => flip,
  flow: () => flow,
  hole: () => hole,
  identity: () => identity,
  isFunction: () => isFunction,
  pipe: () => pipe,
  satisfies: () => satisfies,
  tupled: () => tupled,
  unsafeCoerce: () => unsafeCoerce,
  untupled: () => untupled
});
var isFunction = (input) => typeof input === "function";
var dual = function(arity, body) {
  if (typeof arity === "function") {
    return function() {
      if (arity(arguments)) {
        return body.apply(this, arguments);
      }
      return (self2) => body(self2, ...arguments);
    };
  }
  switch (arity) {
    case 0:
    case 1:
      throw new RangeError(`Invalid arity ${arity}`);
    case 2:
      return function(a, b) {
        if (arguments.length >= 2) {
          return body(a, b);
        }
        return function(self2) {
          return body(self2, a);
        };
      };
    case 3:
      return function(a, b, c) {
        if (arguments.length >= 3) {
          return body(a, b, c);
        }
        return function(self2) {
          return body(self2, a, b);
        };
      };
    case 4:
      return function(a, b, c, d) {
        if (arguments.length >= 4) {
          return body(a, b, c, d);
        }
        return function(self2) {
          return body(self2, a, b, c);
        };
      };
    case 5:
      return function(a, b, c, d, e) {
        if (arguments.length >= 5) {
          return body(a, b, c, d, e);
        }
        return function(self2) {
          return body(self2, a, b, c, d);
        };
      };
    default:
      return function() {
        if (arguments.length >= arity) {
          return body.apply(this, arguments);
        }
        const args = arguments;
        return function(self2) {
          return body(self2, ...args);
        };
      };
  }
};
var apply = (a) => (self2) => self2(a);
var identity = (a) => a;
var satisfies = () => (b) => b;
var unsafeCoerce = identity;
var constant = (value3) => () => value3;
var constTrue = /* @__PURE__ */ constant(true);
var constFalse = /* @__PURE__ */ constant(false);
var constNull = /* @__PURE__ */ constant(null);
var constUndefined = /* @__PURE__ */ constant(void 0);
var constVoid = constUndefined;
var flip = (f) => (...b) => (...a) => f(...a)(...b);
var compose = /* @__PURE__ */ dual(2, (ab, bc) => (a) => bc(ab(a)));
var absurd = (_) => {
  throw new Error("Called `absurd` function which should be uncallable");
};
var tupled = (f) => (a) => f(...a);
var untupled = (f) => (...a) => f(a);
function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {
  switch (arguments.length) {
    case 1:
      return a;
    case 2:
      return ab(a);
    case 3:
      return bc(ab(a));
    case 4:
      return cd(bc(ab(a)));
    case 5:
      return de(cd(bc(ab(a))));
    case 6:
      return ef(de(cd(bc(ab(a)))));
    case 7:
      return fg(ef(de(cd(bc(ab(a))))));
    case 8:
      return gh(fg(ef(de(cd(bc(ab(a)))))));
    case 9:
      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));
    default: {
      let ret = arguments[0];
      for (let i = 1; i < arguments.length; i++) {
        ret = arguments[i](ret);
      }
      return ret;
    }
  }
}
function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {
  switch (arguments.length) {
    case 1:
      return ab;
    case 2:
      return function() {
        return bc(ab.apply(this, arguments));
      };
    case 3:
      return function() {
        return cd(bc(ab.apply(this, arguments)));
      };
    case 4:
      return function() {
        return de(cd(bc(ab.apply(this, arguments))));
      };
    case 5:
      return function() {
        return ef(de(cd(bc(ab.apply(this, arguments)))));
      };
    case 6:
      return function() {
        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
      };
    case 7:
      return function() {
        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
      };
    case 8:
      return function() {
        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
      };
    case 9:
      return function() {
        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
      };
  }
  return;
}
var hole = /* @__PURE__ */ unsafeCoerce(absurd);
var SK = (_, b) => b;

// node_modules/effect/dist/esm/Equivalence.js
var make = (isEquivalent) => (self2, that) => self2 === that || isEquivalent(self2, that);
var mapInput = /* @__PURE__ */ dual(2, (self2, f) => make((x, y) => self2(f(x), f(y))));
var array = (item) => make((self2, that) => {
  if (self2.length !== that.length) {
    return false;
  }
  for (let i = 0; i < self2.length; i++) {
    const isEq = item(self2[i], that[i]);
    if (!isEq) {
      return false;
    }
  }
  return true;
});

// node_modules/effect/dist/esm/internal/doNotation.js
var let_ = (map18) => dual(3, (self2, name, f) => map18(self2, (a) => Object.assign({}, a, {
  [name]: f(a)
})));
var bindTo = (map18) => dual(2, (self2, name) => map18(self2, (a) => ({
  [name]: a
})));
var bind = (map18, flatMap12) => dual(3, (self2, name, f) => flatMap12(self2, (a) => map18(f(a), (b) => Object.assign({}, a, {
  [name]: b
}))));

// node_modules/effect/dist/esm/internal/version.js
var moduleVersion = "3.6.5";
var getCurrentVersion = () => moduleVersion;

// node_modules/effect/dist/esm/GlobalValue.js
var globalStoreId = /* @__PURE__ */ Symbol.for(`effect/GlobalValue/globalStoreId/${/* @__PURE__ */ getCurrentVersion()}`);
if (!(globalStoreId in globalThis)) {
  ;
  globalThis[globalStoreId] = /* @__PURE__ */ new Map();
}
var globalStore = globalThis[globalStoreId];
var globalValue = (id, compute) => {
  if (!globalStore.has(id)) {
    globalStore.set(id, compute());
  }
  return globalStore.get(id);
};

// node_modules/effect/dist/esm/Predicate.js
var isString = (input) => typeof input === "string";
var isNumber = (input) => typeof input === "number";
var isBigInt = (input) => typeof input === "bigint";
var isFunction2 = isFunction;
var isRecordOrArray = (input) => typeof input === "object" && input !== null;
var isObject = (input) => isRecordOrArray(input) || isFunction2(input);
var hasProperty = /* @__PURE__ */ dual(2, (self2, property) => isObject(self2) && property in self2);
var isTagged = /* @__PURE__ */ dual(2, (self2, tag) => hasProperty(self2, "_tag") && self2["_tag"] === tag);
var isNullable = (input) => input === null || input === void 0;
var isIterable = (input) => hasProperty(input, Symbol.iterator);
var isPromiseLike = (input) => hasProperty(input, "then") && isFunction2(input.then);

// node_modules/effect/dist/esm/internal/errors.js
var getBugErrorMessage = (message) => `BUG: ${message} - please report an issue at https://github.com/Effect-TS/effect/issues`;

// node_modules/effect/dist/esm/Utils.js
var GenKindTypeId = /* @__PURE__ */ Symbol.for("effect/Gen/GenKind");
var GenKindImpl = class {
  value;
  constructor(value3) {
    this.value = value3;
  }
  /**
   * @since 2.0.0
   */
  get _F() {
    return identity;
  }
  /**
   * @since 2.0.0
   */
  get _R() {
    return (_) => _;
  }
  /**
   * @since 2.0.0
   */
  get _O() {
    return (_) => _;
  }
  /**
   * @since 2.0.0
   */
  get _E() {
    return (_) => _;
  }
  /**
   * @since 2.0.0
   */
  [GenKindTypeId] = GenKindTypeId;
  /**
   * @since 2.0.0
   */
  [Symbol.iterator]() {
    return new SingleShotGen(this);
  }
};
var SingleShotGen = class _SingleShotGen {
  self;
  called = false;
  constructor(self2) {
    this.self = self2;
  }
  /**
   * @since 2.0.0
   */
  next(a) {
    return this.called ? {
      value: a,
      done: true
    } : (this.called = true, {
      value: this.self,
      done: false
    });
  }
  /**
   * @since 2.0.0
   */
  return(a) {
    return {
      value: a,
      done: true
    };
  }
  /**
   * @since 2.0.0
   */
  throw(e) {
    throw e;
  }
  /**
   * @since 2.0.0
   */
  [Symbol.iterator]() {
    return new _SingleShotGen(this.self);
  }
};
var defaultIncHi = 335903614;
var defaultIncLo = 4150755663;
var MUL_HI = 1481765933 >>> 0;
var MUL_LO = 1284865837 >>> 0;
var BIT_53 = 9007199254740992;
var BIT_27 = 134217728;
var PCGRandom = class {
  _state;
  constructor(seedHi, seedLo, incHi, incLo) {
    if (isNullable(seedLo) && isNullable(seedHi)) {
      seedLo = Math.random() * 4294967295 >>> 0;
      seedHi = 0;
    } else if (isNullable(seedLo)) {
      seedLo = seedHi;
      seedHi = 0;
    }
    if (isNullable(incLo) && isNullable(incHi)) {
      incLo = this._state ? this._state[3] : defaultIncLo;
      incHi = this._state ? this._state[2] : defaultIncHi;
    } else if (isNullable(incLo)) {
      incLo = incHi;
      incHi = 0;
    }
    this._state = new Int32Array([0, 0, incHi >>> 0, ((incLo || 0) | 1) >>> 0]);
    this._next();
    add64(this._state, this._state[0], this._state[1], seedHi >>> 0, seedLo >>> 0);
    this._next();
    return this;
  }
  /**
   * Returns a copy of the internal state of this random number generator as a
   * JavaScript Array.
   *
   * @category getters
   * @since 2.0.0
   */
  getState() {
    return [this._state[0], this._state[1], this._state[2], this._state[3]];
  }
  /**
   * Restore state previously retrieved using `getState()`.
   *
   * @since 2.0.0
   */
  setState(state) {
    this._state[0] = state[0];
    this._state[1] = state[1];
    this._state[2] = state[2];
    this._state[3] = state[3] | 1;
  }
  /**
   * Get a uniformly distributed 32 bit integer between [0, max).
   *
   * @category getter
   * @since 2.0.0
   */
  integer(max5) {
    if (!max5) {
      return this._next();
    }
    max5 = max5 >>> 0;
    if ((max5 & max5 - 1) === 0) {
      return this._next() & max5 - 1;
    }
    let num = 0;
    const skew = (-max5 >>> 0) % max5 >>> 0;
    for (num = this._next(); num < skew; num = this._next()) {
    }
    return num % max5;
  }
  /**
   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with
   * 53 bits of precision (every bit of the mantissa is randomized).
   *
   * @category getters
   * @since 2.0.0
   */
  number() {
    const hi = (this._next() & 67108863) * 1;
    const lo = (this._next() & 134217727) * 1;
    return (hi * BIT_27 + lo) / BIT_53;
  }
  /** @internal */
  _next() {
    const oldHi = this._state[0] >>> 0;
    const oldLo = this._state[1] >>> 0;
    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO);
    add64(this._state, this._state[0], this._state[1], this._state[2], this._state[3]);
    let xsHi = oldHi >>> 18;
    let xsLo = (oldLo >>> 18 | oldHi << 14) >>> 0;
    xsHi = (xsHi ^ oldHi) >>> 0;
    xsLo = (xsLo ^ oldLo) >>> 0;
    const xorshifted = (xsLo >>> 27 | xsHi << 5) >>> 0;
    const rot = oldHi >>> 27;
    const rot2 = (-rot >>> 0 & 31) >>> 0;
    return (xorshifted >>> rot | xorshifted << rot2) >>> 0;
  }
};
function mul64(out, aHi, aLo, bHi, bLo) {
  let c1 = (aLo >>> 16) * (bLo & 65535) >>> 0;
  let c0 = (aLo & 65535) * (bLo >>> 16) >>> 0;
  let lo = (aLo & 65535) * (bLo & 65535) >>> 0;
  let hi = (aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16)) >>> 0;
  c0 = c0 << 16 >>> 0;
  lo = lo + c0 >>> 0;
  if (lo >>> 0 < c0 >>> 0) {
    hi = hi + 1 >>> 0;
  }
  c1 = c1 << 16 >>> 0;
  lo = lo + c1 >>> 0;
  if (lo >>> 0 < c1 >>> 0) {
    hi = hi + 1 >>> 0;
  }
  hi = hi + Math.imul(aLo, bHi) >>> 0;
  hi = hi + Math.imul(aHi, bLo) >>> 0;
  out[0] = hi;
  out[1] = lo;
}
function add64(out, aHi, aLo, bHi, bLo) {
  let hi = aHi + bHi >>> 0;
  const lo = aLo + bLo >>> 0;
  if (lo >>> 0 < aLo >>> 0) {
    hi = hi + 1 | 0;
  }
  out[0] = hi;
  out[1] = lo;
}
var YieldWrapTypeId = /* @__PURE__ */ Symbol.for("effect/Utils/YieldWrap");
var YieldWrap = class {
  /**
   * @since 3.0.6
   */
  #value;
  constructor(value3) {
    this.#value = value3;
  }
  /**
   * @since 3.0.6
   */
  [YieldWrapTypeId]() {
    return this.#value;
  }
};
function yieldWrapGet(self2) {
  if (typeof self2 === "object" && self2 !== null && YieldWrapTypeId in self2) {
    return self2[YieldWrapTypeId]();
  }
  throw new Error(getBugErrorMessage("yieldWrapGet"));
}
var structuralRegionState = /* @__PURE__ */ globalValue("effect/Utils/isStructuralRegion", () => ({
  enabled: false,
  tester: void 0
}));
var tracingFunction = (name) => {
  const wrap = {
    [name](body) {
      return body();
    }
  };
  return function(fn) {
    return wrap[name](fn);
  };
};
var internalCall = /* @__PURE__ */ tracingFunction("effect_internal_function");

// node_modules/effect/dist/esm/Hash.js
var randomHashCache = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Hash/randomHashCache"), () => /* @__PURE__ */ new WeakMap());
var symbol = /* @__PURE__ */ Symbol.for("effect/Hash");
var hash = (self2) => {
  if (structuralRegionState.enabled === true) {
    return 0;
  }
  switch (typeof self2) {
    case "number":
      return number(self2);
    case "bigint":
      return string(self2.toString(10));
    case "boolean":
      return string(String(self2));
    case "symbol":
      return string(String(self2));
    case "string":
      return string(self2);
    case "undefined":
      return string("undefined");
    case "function":
    case "object": {
      if (self2 === null) {
        return string("null");
      } else if (self2 instanceof Date) {
        return hash(self2.toISOString());
      } else if (isHash(self2)) {
        return self2[symbol]();
      } else {
        return random(self2);
      }
    }
    default:
      throw new Error(`BUG: unhandled typeof ${typeof self2} - please report an issue at https://github.com/Effect-TS/effect/issues`);
  }
};
var random = (self2) => {
  if (!randomHashCache.has(self2)) {
    randomHashCache.set(self2, number(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)));
  }
  return randomHashCache.get(self2);
};
var combine = (b) => (self2) => self2 * 53 ^ b;
var optimize = (n) => n & 3221225471 | n >>> 1 & 1073741824;
var isHash = (u) => hasProperty(u, symbol);
var number = (n) => {
  if (n !== n || n === Infinity) {
    return 0;
  }
  let h = n | 0;
  if (h !== n) {
    h ^= n * 4294967295;
  }
  while (n > 4294967295) {
    h ^= n /= 4294967295;
  }
  return optimize(h);
};
var string = (str) => {
  let h = 5381, i = str.length;
  while (i) {
    h = h * 33 ^ str.charCodeAt(--i);
  }
  return optimize(h);
};
var structureKeys = (o, keys5) => {
  let h = 12289;
  for (let i = 0; i < keys5.length; i++) {
    h ^= pipe(string(keys5[i]), combine(hash(o[keys5[i]])));
  }
  return optimize(h);
};
var structure = (o) => structureKeys(o, Object.keys(o));
var array2 = (arr) => {
  let h = 6151;
  for (let i = 0; i < arr.length; i++) {
    h = pipe(h, combine(hash(arr[i])));
  }
  return optimize(h);
};
var cached = function() {
  if (arguments.length === 1) {
    const self3 = arguments[0];
    return function(hash3) {
      Object.defineProperty(self3, symbol, {
        value() {
          return hash3;
        },
        enumerable: false
      });
      return hash3;
    };
  }
  const self2 = arguments[0];
  const hash2 = arguments[1];
  Object.defineProperty(self2, symbol, {
    value() {
      return hash2;
    },
    enumerable: false
  });
  return hash2;
};

// node_modules/effect/dist/esm/Equal.js
var symbol2 = /* @__PURE__ */ Symbol.for("effect/Equal");
function equals() {
  if (arguments.length === 1) {
    return (self2) => compareBoth(self2, arguments[0]);
  }
  return compareBoth(arguments[0], arguments[1]);
}
function compareBoth(self2, that) {
  if (self2 === that) {
    return true;
  }
  const selfType = typeof self2;
  if (selfType !== typeof that) {
    return false;
  }
  if (selfType === "object" || selfType === "function") {
    if (self2 !== null && that !== null) {
      if (isEqual(self2) && isEqual(that)) {
        if (hash(self2) === hash(that) && self2[symbol2](that)) {
          return true;
        } else {
          return structuralRegionState.enabled && structuralRegionState.tester ? structuralRegionState.tester(self2, that) : false;
        }
      } else if (self2 instanceof Date && that instanceof Date) {
        return self2.toISOString() === that.toISOString();
      }
    }
    if (structuralRegionState.enabled) {
      if (Array.isArray(self2) && Array.isArray(that)) {
        return self2.length === that.length && self2.every((v, i) => compareBoth(v, that[i]));
      }
      if (Object.getPrototypeOf(self2) === Object.prototype && Object.getPrototypeOf(self2) === Object.prototype) {
        const keysSelf = Object.keys(self2);
        const keysThat = Object.keys(that);
        if (keysSelf.length === keysThat.length) {
          for (const key of keysSelf) {
            if (!(key in that && compareBoth(self2[key], that[key]))) {
              return structuralRegionState.tester ? structuralRegionState.tester(self2, that) : false;
            }
          }
          return true;
        }
      }
      return structuralRegionState.tester ? structuralRegionState.tester(self2, that) : false;
    }
  }
  return structuralRegionState.enabled && structuralRegionState.tester ? structuralRegionState.tester(self2, that) : false;
}
var isEqual = (u) => hasProperty(u, symbol2);
var equivalence = () => equals;

// node_modules/effect/dist/esm/Inspectable.js
var NodeInspectSymbol = /* @__PURE__ */ Symbol.for("nodejs.util.inspect.custom");
var toJSON = (x) => {
  if (hasProperty(x, "toJSON") && isFunction2(x["toJSON"]) && x["toJSON"].length === 0) {
    return x.toJSON();
  } else if (Array.isArray(x)) {
    return x.map(toJSON);
  }
  return x;
};
var format = (x) => JSON.stringify(x, null, 2);
var BaseProto = {
  toJSON() {
    return toJSON(this);
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  toString() {
    return format(this.toJSON());
  }
};
var Class = class {
  /**
   * @since 2.0.0
   */
  [NodeInspectSymbol]() {
    return this.toJSON();
  }
  /**
   * @since 2.0.0
   */
  toString() {
    return format(this.toJSON());
  }
};
var toStringUnknown = (u, whitespace = 2) => {
  try {
    return typeof u === "object" ? stringifyCircular(u, whitespace) : String(u);
  } catch (_) {
    return String(u);
  }
};
var stringifyCircular = (obj, whitespace) => {
  let cache = [];
  const retVal = JSON.stringify(obj, (_key, value3) => typeof value3 === "object" && value3 !== null ? cache.includes(value3) ? void 0 : cache.push(value3) && value3 : value3, whitespace);
  cache = void 0;
  return retVal;
};

// node_modules/effect/dist/esm/Pipeable.js
var pipeArguments = (self2, args) => {
  switch (args.length) {
    case 0:
      return self2;
    case 1:
      return args[0](self2);
    case 2:
      return args[1](args[0](self2));
    case 3:
      return args[2](args[1](args[0](self2)));
    case 4:
      return args[3](args[2](args[1](args[0](self2))));
    case 5:
      return args[4](args[3](args[2](args[1](args[0](self2)))));
    case 6:
      return args[5](args[4](args[3](args[2](args[1](args[0](self2))))));
    case 7:
      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self2)))))));
    case 8:
      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self2))))))));
    case 9:
      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self2)))))))));
    default: {
      let ret = self2;
      for (let i = 0, len = args.length; i < len; i++) {
        ret = args[i](ret);
      }
      return ret;
    }
  }
};

// node_modules/effect/dist/esm/internal/opCodes/effect.js
var OP_ASYNC = "Async";
var OP_COMMIT = "Commit";
var OP_FAILURE = "Failure";
var OP_ON_FAILURE = "OnFailure";
var OP_ON_SUCCESS = "OnSuccess";
var OP_ON_SUCCESS_AND_FAILURE = "OnSuccessAndFailure";
var OP_SUCCESS = "Success";
var OP_SYNC = "Sync";
var OP_TAG = "Tag";
var OP_UPDATE_RUNTIME_FLAGS = "UpdateRuntimeFlags";
var OP_WHILE = "While";
var OP_WITH_RUNTIME = "WithRuntime";
var OP_YIELD = "Yield";
var OP_REVERT_FLAGS = "RevertFlags";

// node_modules/effect/dist/esm/internal/effectable.js
var EffectTypeId = /* @__PURE__ */ Symbol.for("effect/Effect");
var StreamTypeId = /* @__PURE__ */ Symbol.for("effect/Stream");
var SinkTypeId = /* @__PURE__ */ Symbol.for("effect/Sink");
var ChannelTypeId = /* @__PURE__ */ Symbol.for("effect/Channel");
var effectVariance = {
  /* c8 ignore next */
  _R: (_) => _,
  /* c8 ignore next */
  _E: (_) => _,
  /* c8 ignore next */
  _A: (_) => _,
  _V: /* @__PURE__ */ getCurrentVersion()
};
var sinkVariance = {
  /* c8 ignore next */
  _A: (_) => _,
  /* c8 ignore next */
  _In: (_) => _,
  /* c8 ignore next */
  _L: (_) => _,
  /* c8 ignore next */
  _E: (_) => _,
  /* c8 ignore next */
  _R: (_) => _
};
var channelVariance = {
  /* c8 ignore next */
  _Env: (_) => _,
  /* c8 ignore next */
  _InErr: (_) => _,
  /* c8 ignore next */
  _InElem: (_) => _,
  /* c8 ignore next */
  _InDone: (_) => _,
  /* c8 ignore next */
  _OutErr: (_) => _,
  /* c8 ignore next */
  _OutElem: (_) => _,
  /* c8 ignore next */
  _OutDone: (_) => _
};
var EffectPrototype = {
  [EffectTypeId]: effectVariance,
  [StreamTypeId]: effectVariance,
  [SinkTypeId]: sinkVariance,
  [ChannelTypeId]: channelVariance,
  [symbol2](that) {
    return this === that;
  },
  [symbol]() {
    return cached(this, random(this));
  },
  [Symbol.iterator]() {
    return new SingleShotGen(new YieldWrap(this));
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var StructuralPrototype = {
  [symbol]() {
    return cached(this, structure(this));
  },
  [symbol2](that) {
    const selfKeys = Object.keys(this);
    const thatKeys = Object.keys(that);
    if (selfKeys.length !== thatKeys.length) {
      return false;
    }
    for (const key of selfKeys) {
      if (!(key in that && equals(this[key], that[key]))) {
        return false;
      }
    }
    return true;
  }
};
var CommitPrototype = {
  ...EffectPrototype,
  _op: OP_COMMIT
};
var StructuralCommitPrototype = {
  ...CommitPrototype,
  ...StructuralPrototype
};

// node_modules/effect/dist/esm/internal/option.js
var TypeId = /* @__PURE__ */ Symbol.for("effect/Option");
var CommonProto = {
  ...EffectPrototype,
  [TypeId]: {
    _A: (_) => _
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  toString() {
    return format(this.toJSON());
  }
};
var SomeProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(CommonProto), {
  _tag: "Some",
  _op: "Some",
  [symbol2](that) {
    return isOption(that) && isSome(that) && equals(this.value, that.value);
  },
  [symbol]() {
    return cached(this, combine(hash(this._tag))(hash(this.value)));
  },
  toJSON() {
    return {
      _id: "Option",
      _tag: this._tag,
      value: toJSON(this.value)
    };
  }
});
var NoneHash = /* @__PURE__ */ hash("None");
var NoneProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(CommonProto), {
  _tag: "None",
  _op: "None",
  [symbol2](that) {
    return isOption(that) && isNone(that);
  },
  [symbol]() {
    return NoneHash;
  },
  toJSON() {
    return {
      _id: "Option",
      _tag: this._tag
    };
  }
});
var isOption = (input) => hasProperty(input, TypeId);
var isNone = (fa) => fa._tag === "None";
var isSome = (fa) => fa._tag === "Some";
var none = /* @__PURE__ */ Object.create(NoneProto);
var some = (value3) => {
  const a = Object.create(SomeProto);
  a.value = value3;
  return a;
};

// node_modules/effect/dist/esm/internal/either.js
var TypeId2 = /* @__PURE__ */ Symbol.for("effect/Either");
var CommonProto2 = {
  ...EffectPrototype,
  [TypeId2]: {
    _R: (_) => _
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  toString() {
    return format(this.toJSON());
  }
};
var RightProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(CommonProto2), {
  _tag: "Right",
  _op: "Right",
  [symbol2](that) {
    return isEither(that) && isRight(that) && equals(this.right, that.right);
  },
  [symbol]() {
    return combine(hash(this._tag))(hash(this.right));
  },
  toJSON() {
    return {
      _id: "Either",
      _tag: this._tag,
      right: toJSON(this.right)
    };
  }
});
var LeftProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(CommonProto2), {
  _tag: "Left",
  _op: "Left",
  [symbol2](that) {
    return isEither(that) && isLeft(that) && equals(this.left, that.left);
  },
  [symbol]() {
    return combine(hash(this._tag))(hash(this.left));
  },
  toJSON() {
    return {
      _id: "Either",
      _tag: this._tag,
      left: toJSON(this.left)
    };
  }
});
var isEither = (input) => hasProperty(input, TypeId2);
var isLeft = (ma) => ma._tag === "Left";
var isRight = (ma) => ma._tag === "Right";
var left = (left3) => {
  const a = Object.create(LeftProto);
  a.left = left3;
  return a;
};
var right = (right3) => {
  const a = Object.create(RightProto);
  a.right = right3;
  return a;
};
var fromOption = /* @__PURE__ */ dual(2, (self2, onNone) => isNone(self2) ? left(onNone()) : right(self2.value));

// node_modules/effect/dist/esm/Either.js
var right2 = right;
var left2 = left;
var fromOption2 = fromOption;
var isLeft2 = isLeft;
var isRight2 = isRight;
var match = /* @__PURE__ */ dual(2, (self2, {
  onLeft,
  onRight
}) => isLeft2(self2) ? onLeft(self2.left) : onRight(self2.right));
var merge = /* @__PURE__ */ match({
  onLeft: identity,
  onRight: identity
});
var all = (input) => {
  if (Symbol.iterator in input) {
    const out2 = [];
    for (const e of input) {
      if (isLeft2(e)) {
        return e;
      }
      out2.push(e.right);
    }
    return right2(out2);
  }
  const out = {};
  for (const key of Object.keys(input)) {
    const e = input[key];
    if (isLeft2(e)) {
      return e;
    }
    out[key] = e.right;
  }
  return right2(out);
};

// node_modules/effect/dist/esm/internal/array.js
var isNonEmptyArray = (self2) => self2.length > 0;

// node_modules/effect/dist/esm/Order.js
var make2 = (compare) => (self2, that) => self2 === that ? 0 : compare(self2, that);
var number2 = /* @__PURE__ */ make2((self2, that) => self2 < that ? -1 : 1);
var mapInput2 = /* @__PURE__ */ dual(2, (self2, f) => make2((b1, b2) => self2(f(b1), f(b2))));
var lessThan = (O) => dual(2, (self2, that) => O(self2, that) === -1);
var greaterThan = (O) => dual(2, (self2, that) => O(self2, that) === 1);
var lessThanOrEqualTo = (O) => dual(2, (self2, that) => O(self2, that) !== 1);
var greaterThanOrEqualTo = (O) => dual(2, (self2, that) => O(self2, that) !== -1);

// node_modules/effect/dist/esm/Option.js
var none2 = () => none;
var some2 = some;
var isNone2 = isNone;
var isSome2 = isSome;
var match2 = /* @__PURE__ */ dual(2, (self2, {
  onNone,
  onSome
}) => isNone2(self2) ? onNone() : onSome(self2.value));
var getOrElse = /* @__PURE__ */ dual(2, (self2, onNone) => isNone2(self2) ? onNone() : self2.value);
var orElseSome = /* @__PURE__ */ dual(2, (self2, onNone) => isNone2(self2) ? some2(onNone()) : self2);
var fromNullable = (nullableValue) => nullableValue == null ? none2() : some2(nullableValue);
var getOrUndefined = /* @__PURE__ */ getOrElse(constUndefined);
var liftThrowable = (f) => (...a) => {
  try {
    return some2(f(...a));
  } catch (e) {
    return none2();
  }
};
var getOrThrowWith = /* @__PURE__ */ dual(2, (self2, onNone) => {
  if (isSome2(self2)) {
    return self2.value;
  }
  throw onNone();
});
var getOrThrow = /* @__PURE__ */ getOrThrowWith(() => new Error("getOrThrow called on a None"));
var map = /* @__PURE__ */ dual(2, (self2, f) => isNone2(self2) ? none2() : some2(f(self2.value)));
var flatMap = /* @__PURE__ */ dual(2, (self2, f) => isNone2(self2) ? none2() : f(self2.value));
var all2 = (input) => {
  if (Symbol.iterator in input) {
    const out2 = [];
    for (const o of input) {
      if (isNone2(o)) {
        return none2();
      }
      out2.push(o.value);
    }
    return some2(out2);
  }
  const out = {};
  for (const key of Object.keys(input)) {
    const o = input[key];
    if (isNone2(o)) {
      return none2();
    }
    out[key] = o.value;
  }
  return some2(out);
};
var containsWith = (isEquivalent) => dual(2, (self2, a) => isNone2(self2) ? false : isEquivalent(self2.value, a));
var _equivalence = /* @__PURE__ */ equivalence();
var contains = /* @__PURE__ */ containsWith(_equivalence);

// node_modules/effect/dist/esm/Tuple.js
var make3 = (...elements) => elements;

// node_modules/effect/dist/esm/Array.js
var make4 = (...elements) => elements;
var allocate = (n) => new Array(n);
var makeBy = (n, f) => {
  const max5 = Math.max(1, Math.floor(n));
  const out = new Array(max5);
  for (let i = 0; i < max5; i++) {
    out[i] = f(i);
  }
  return out;
};
var fromIterable = (collection) => Array.isArray(collection) ? collection : Array.from(collection);
var ensure = (self2) => Array.isArray(self2) ? self2 : [self2];
var match3 = /* @__PURE__ */ dual(2, (self2, {
  onEmpty,
  onNonEmpty
}) => isNonEmptyReadonlyArray(self2) ? onNonEmpty(self2) : onEmpty());
var prepend = /* @__PURE__ */ dual(2, (self2, head5) => [head5, ...self2]);
var append = /* @__PURE__ */ dual(2, (self2, last3) => [...self2, last3]);
var appendAll = /* @__PURE__ */ dual(2, (self2, that) => fromIterable(self2).concat(fromIterable(that)));
var isArray = Array.isArray;
var isEmptyArray = (self2) => self2.length === 0;
var isEmptyReadonlyArray = isEmptyArray;
var isNonEmptyArray2 = isNonEmptyArray;
var isNonEmptyReadonlyArray = isNonEmptyArray;
var isOutOfBound = (i, as4) => i < 0 || i >= as4.length;
var clamp = (i, as4) => Math.floor(Math.min(Math.max(0, i), as4.length));
var get = /* @__PURE__ */ dual(2, (self2, index) => {
  const i = Math.floor(index);
  return isOutOfBound(i, self2) ? none2() : some2(self2[i]);
});
var unsafeGet = /* @__PURE__ */ dual(2, (self2, index) => {
  const i = Math.floor(index);
  if (isOutOfBound(i, self2)) {
    throw new Error(`Index ${i} out of bounds`);
  }
  return self2[i];
});
var head = /* @__PURE__ */ get(0);
var headNonEmpty = /* @__PURE__ */ unsafeGet(0);
var last = (self2) => isNonEmptyReadonlyArray(self2) ? some2(lastNonEmpty(self2)) : none2();
var lastNonEmpty = (self2) => self2[self2.length - 1];
var tailNonEmpty = (self2) => self2.slice(1);
var spanIndex = (self2, predicate) => {
  let i = 0;
  for (const a of self2) {
    if (!predicate(a, i)) {
      break;
    }
    i++;
  }
  return i;
};
var span = /* @__PURE__ */ dual(2, (self2, predicate) => splitAt(self2, spanIndex(self2, predicate)));
var drop = /* @__PURE__ */ dual(2, (self2, n) => {
  const input = fromIterable(self2);
  return input.slice(clamp(n, input), input.length);
});
var reverse = (self2) => Array.from(self2).reverse();
var sort = /* @__PURE__ */ dual(2, (self2, O) => {
  const out = Array.from(self2);
  out.sort(O);
  return out;
});
var zip = /* @__PURE__ */ dual(2, (self2, that) => zipWith(self2, that, make3));
var zipWith = /* @__PURE__ */ dual(3, (self2, that, f) => {
  const as4 = fromIterable(self2);
  const bs = fromIterable(that);
  if (isNonEmptyReadonlyArray(as4) && isNonEmptyReadonlyArray(bs)) {
    const out = [f(headNonEmpty(as4), headNonEmpty(bs))];
    const len = Math.min(as4.length, bs.length);
    for (let i = 1; i < len; i++) {
      out[i] = f(as4[i], bs[i]);
    }
    return out;
  }
  return [];
});
var _equivalence2 = /* @__PURE__ */ equivalence();
var splitAt = /* @__PURE__ */ dual(2, (self2, n) => {
  const input = Array.from(self2);
  const _n = Math.floor(n);
  if (isNonEmptyReadonlyArray(input)) {
    if (_n >= 1) {
      return splitNonEmptyAt(input, _n);
    }
    return [[], input];
  }
  return [input, []];
});
var splitNonEmptyAt = /* @__PURE__ */ dual(2, (self2, n) => {
  const _n = Math.max(1, Math.floor(n));
  return _n >= self2.length ? [copy(self2), []] : [prepend(self2.slice(1, _n), headNonEmpty(self2)), self2.slice(_n)];
});
var copy = (self2) => self2.slice();
var unionWith = /* @__PURE__ */ dual(3, (self2, that, isEquivalent) => {
  const a = fromIterable(self2);
  const b = fromIterable(that);
  if (isNonEmptyReadonlyArray(a)) {
    if (isNonEmptyReadonlyArray(b)) {
      const dedupe2 = dedupeWith(isEquivalent);
      return dedupe2(appendAll(a, b));
    }
    return a;
  }
  return b;
});
var union = /* @__PURE__ */ dual(2, (self2, that) => unionWith(self2, that, _equivalence2));
var empty = () => [];
var of = (a) => [a];
var map2 = /* @__PURE__ */ dual(2, (self2, f) => self2.map(f));
var flatMap2 = /* @__PURE__ */ dual(2, (self2, f) => {
  if (isEmptyReadonlyArray(self2)) {
    return [];
  }
  const out = [];
  for (let i = 0; i < self2.length; i++) {
    const inner = f(self2[i], i);
    for (let j = 0; j < inner.length; j++) {
      out.push(inner[j]);
    }
  }
  return out;
});
var flatten = /* @__PURE__ */ flatMap2(identity);
var filterMap = /* @__PURE__ */ dual(2, (self2, f) => {
  const as4 = fromIterable(self2);
  const out = [];
  for (let i = 0; i < as4.length; i++) {
    const o = f(as4[i], i);
    if (isSome2(o)) {
      out.push(o.value);
    }
  }
  return out;
});
var getSomes = /* @__PURE__ */ filterMap(identity);
var reduce = /* @__PURE__ */ dual(3, (self2, b, f) => fromIterable(self2).reduce((b2, a, i) => f(b2, a, i), b));
var reduceRight = /* @__PURE__ */ dual(3, (self2, b, f) => fromIterable(self2).reduceRight((b2, a, i) => f(b2, a, i), b));
var unfold = (b, f) => {
  const out = [];
  let next = b;
  let o;
  while (isSome2(o = f(next))) {
    const [a, b2] = o.value;
    out.push(a);
    next = b2;
  }
  return out;
};
var getEquivalence = array;
var dedupeWith = /* @__PURE__ */ dual(2, (self2, isEquivalent) => {
  const input = fromIterable(self2);
  if (isNonEmptyReadonlyArray(input)) {
    const out = [headNonEmpty(input)];
    const rest = tailNonEmpty(input);
    for (const r of rest) {
      if (out.every((a) => !isEquivalent(r, a))) {
        out.push(r);
      }
    }
    return out;
  }
  return [];
});
var dedupe = (self2) => dedupeWith(self2, equivalence());
var join = /* @__PURE__ */ dual(2, (self2, sep) => fromIterable(self2).join(sep));

// node_modules/effect/dist/esm/Boolean.js
var not = (self2) => !self2;

// node_modules/effect/dist/esm/Context.js
var Context_exports = {};
__export(Context_exports, {
  GenericTag: () => GenericTag,
  Tag: () => Tag2,
  add: () => add2,
  empty: () => empty3,
  get: () => get3,
  getOption: () => getOption2,
  isContext: () => isContext2,
  isTag: () => isTag2,
  make: () => make6,
  merge: () => merge3,
  omit: () => omit2,
  pick: () => pick2,
  unsafeGet: () => unsafeGet3,
  unsafeMake: () => unsafeMake
});

// node_modules/effect/dist/esm/internal/context.js
var TagTypeId = /* @__PURE__ */ Symbol.for("effect/Context/Tag");
var STMSymbolKey = "effect/STM";
var STMTypeId = /* @__PURE__ */ Symbol.for(STMSymbolKey);
var TagProto = {
  ...EffectPrototype,
  _tag: "Tag",
  _op: "Tag",
  [STMTypeId]: effectVariance,
  [TagTypeId]: {
    _Service: (_) => _,
    _Identifier: (_) => _
  },
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "Tag",
      key: this.key,
      stack: this.stack
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  of(self2) {
    return self2;
  },
  context(self2) {
    return make5(this, self2);
  }
};
var makeGenericTag = (key) => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 2;
  const creationError = new Error();
  Error.stackTraceLimit = limit;
  const tag = Object.create(TagProto);
  Object.defineProperty(tag, "stack", {
    get() {
      return creationError.stack;
    }
  });
  tag.key = key;
  return tag;
};
var Tag = (id) => () => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 2;
  const creationError = new Error();
  Error.stackTraceLimit = limit;
  function TagClass() {
  }
  Object.setPrototypeOf(TagClass, TagProto);
  TagClass.key = id;
  Object.defineProperty(TagClass, "stack", {
    get() {
      return creationError.stack;
    }
  });
  return TagClass;
};
var TypeId3 = /* @__PURE__ */ Symbol.for("effect/Context");
var ContextProto = {
  [TypeId3]: {
    _Services: (_) => _
  },
  [symbol2](that) {
    if (isContext(that)) {
      if (this.unsafeMap.size === that.unsafeMap.size) {
        for (const k of this.unsafeMap.keys()) {
          if (!that.unsafeMap.has(k) || !equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  },
  [symbol]() {
    return cached(this, number(this.unsafeMap.size));
  },
  pipe() {
    return pipeArguments(this, arguments);
  },
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "Context",
      services: Array.from(this.unsafeMap).map(toJSON)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  }
};
var makeContext = (unsafeMap) => {
  const context5 = Object.create(ContextProto);
  context5.unsafeMap = unsafeMap;
  return context5;
};
var serviceNotFoundError = (tag) => {
  const error = new Error(`Service not found${tag.key ? `: ${String(tag.key)}` : ""}`);
  if (tag.stack) {
    const lines = tag.stack.split("\n");
    if (lines.length > 2) {
      const afterAt = lines[2].match(/at (.*)/);
      if (afterAt) {
        error.message = error.message + ` (defined at ${afterAt[1]})`;
      }
    }
  }
  if (error.stack) {
    const lines = error.stack.split("\n");
    lines.splice(1, 3);
    error.stack = lines.join("\n");
  }
  return error;
};
var isContext = (u) => hasProperty(u, TypeId3);
var isTag = (u) => hasProperty(u, TagTypeId);
var _empty = /* @__PURE__ */ makeContext(/* @__PURE__ */ new Map());
var empty2 = () => _empty;
var make5 = (tag, service3) => makeContext(/* @__PURE__ */ new Map([[tag.key, service3]]));
var add = /* @__PURE__ */ dual(3, (self2, tag, service3) => {
  const map18 = new Map(self2.unsafeMap);
  map18.set(tag.key, service3);
  return makeContext(map18);
});
var unsafeGet2 = /* @__PURE__ */ dual(2, (self2, tag) => {
  if (!self2.unsafeMap.has(tag.key)) {
    throw serviceNotFoundError(tag);
  }
  return self2.unsafeMap.get(tag.key);
});
var get2 = unsafeGet2;
var getOption = /* @__PURE__ */ dual(2, (self2, tag) => {
  if (!self2.unsafeMap.has(tag.key)) {
    return none;
  }
  return some(self2.unsafeMap.get(tag.key));
});
var merge2 = /* @__PURE__ */ dual(2, (self2, that) => {
  const map18 = new Map(self2.unsafeMap);
  for (const [tag, s] of that.unsafeMap) {
    map18.set(tag, s);
  }
  return makeContext(map18);
});
var pick = (...tags) => (self2) => {
  const tagSet = new Set(tags.map((_) => _.key));
  const newEnv = /* @__PURE__ */ new Map();
  for (const [tag, s] of self2.unsafeMap.entries()) {
    if (tagSet.has(tag)) {
      newEnv.set(tag, s);
    }
  }
  return makeContext(newEnv);
};
var omit = (...tags) => (self2) => {
  const newEnv = new Map(self2.unsafeMap);
  for (const tag of tags) {
    newEnv.delete(tag.key);
  }
  return makeContext(newEnv);
};

// node_modules/effect/dist/esm/Context.js
var GenericTag = makeGenericTag;
var unsafeMake = makeContext;
var isContext2 = isContext;
var isTag2 = isTag;
var empty3 = empty2;
var make6 = make5;
var add2 = add;
var get3 = get2;
var unsafeGet3 = unsafeGet2;
var getOption2 = getOption;
var merge3 = merge2;
var pick2 = pick;
var omit2 = omit;
var Tag2 = Tag;

// node_modules/effect/dist/esm/Chunk.js
var TypeId4 = /* @__PURE__ */ Symbol.for("effect/Chunk");
function copy2(src, srcPos, dest, destPos, len) {
  for (let i = srcPos; i < Math.min(src.length, srcPos + len); i++) {
    dest[destPos + i - srcPos] = src[i];
  }
  return dest;
}
var emptyArray = [];
var getEquivalence2 = (isEquivalent) => make((self2, that) => self2.length === that.length && toReadonlyArray(self2).every((value3, i) => isEquivalent(value3, unsafeGet4(that, i))));
var _equivalence3 = /* @__PURE__ */ getEquivalence2(equals);
var ChunkProto = {
  [TypeId4]: {
    _A: (_) => _
  },
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "Chunk",
      values: toReadonlyArray(this).map(toJSON)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  [symbol2](that) {
    return isChunk(that) && _equivalence3(this, that);
  },
  [symbol]() {
    return cached(this, array2(toReadonlyArray(this)));
  },
  [Symbol.iterator]() {
    switch (this.backing._tag) {
      case "IArray": {
        return this.backing.array[Symbol.iterator]();
      }
      case "IEmpty": {
        return emptyArray[Symbol.iterator]();
      }
      default: {
        return toReadonlyArray(this)[Symbol.iterator]();
      }
    }
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var makeChunk = (backing) => {
  const chunk4 = Object.create(ChunkProto);
  chunk4.backing = backing;
  switch (backing._tag) {
    case "IEmpty": {
      chunk4.length = 0;
      chunk4.depth = 0;
      chunk4.left = chunk4;
      chunk4.right = chunk4;
      break;
    }
    case "IConcat": {
      chunk4.length = backing.left.length + backing.right.length;
      chunk4.depth = 1 + Math.max(backing.left.depth, backing.right.depth);
      chunk4.left = backing.left;
      chunk4.right = backing.right;
      break;
    }
    case "IArray": {
      chunk4.length = backing.array.length;
      chunk4.depth = 0;
      chunk4.left = _empty2;
      chunk4.right = _empty2;
      break;
    }
    case "ISingleton": {
      chunk4.length = 1;
      chunk4.depth = 0;
      chunk4.left = _empty2;
      chunk4.right = _empty2;
      break;
    }
    case "ISlice": {
      chunk4.length = backing.length;
      chunk4.depth = backing.chunk.depth + 1;
      chunk4.left = _empty2;
      chunk4.right = _empty2;
      break;
    }
  }
  return chunk4;
};
var isChunk = (u) => hasProperty(u, TypeId4);
var _empty2 = /* @__PURE__ */ makeChunk({
  _tag: "IEmpty"
});
var empty4 = () => _empty2;
var make7 = (...as4) => as4.length === 1 ? of2(as4[0]) : unsafeFromNonEmptyArray(as4);
var of2 = (a) => makeChunk({
  _tag: "ISingleton",
  a
});
var fromIterable2 = (self2) => isChunk(self2) ? self2 : makeChunk({
  _tag: "IArray",
  array: fromIterable(self2)
});
var copyToArray = (self2, array5, initial) => {
  switch (self2.backing._tag) {
    case "IArray": {
      copy2(self2.backing.array, 0, array5, initial, self2.length);
      break;
    }
    case "IConcat": {
      copyToArray(self2.left, array5, initial);
      copyToArray(self2.right, array5, initial + self2.left.length);
      break;
    }
    case "ISingleton": {
      array5[initial] = self2.backing.a;
      break;
    }
    case "ISlice": {
      let i = 0;
      let j = initial;
      while (i < self2.length) {
        array5[j] = unsafeGet4(self2, i);
        i += 1;
        j += 1;
      }
      break;
    }
  }
};
var toArray_ = (self2) => toReadonlyArray(self2).slice();
var toArray2 = toArray_;
var toReadonlyArray_ = (self2) => {
  switch (self2.backing._tag) {
    case "IEmpty": {
      return emptyArray;
    }
    case "IArray": {
      return self2.backing.array;
    }
    default: {
      const arr = new Array(self2.length);
      copyToArray(self2, arr, 0);
      self2.backing = {
        _tag: "IArray",
        array: arr
      };
      self2.left = _empty2;
      self2.right = _empty2;
      self2.depth = 0;
      return arr;
    }
  }
};
var toReadonlyArray = toReadonlyArray_;
var reverseChunk = (self2) => {
  switch (self2.backing._tag) {
    case "IEmpty":
    case "ISingleton":
      return self2;
    case "IArray": {
      return makeChunk({
        _tag: "IArray",
        array: reverse(self2.backing.array)
      });
    }
    case "IConcat": {
      return makeChunk({
        _tag: "IConcat",
        left: reverse2(self2.backing.right),
        right: reverse2(self2.backing.left)
      });
    }
    case "ISlice":
      return unsafeFromArray(reverse(toReadonlyArray(self2)));
  }
};
var reverse2 = reverseChunk;
var get4 = /* @__PURE__ */ dual(2, (self2, index) => index < 0 || index >= self2.length ? none2() : some2(unsafeGet4(self2, index)));
var unsafeFromArray = (self2) => makeChunk({
  _tag: "IArray",
  array: self2
});
var unsafeFromNonEmptyArray = (self2) => unsafeFromArray(self2);
var unsafeGet4 = /* @__PURE__ */ dual(2, (self2, index) => {
  switch (self2.backing._tag) {
    case "IEmpty": {
      throw new Error(`Index out of bounds`);
    }
    case "ISingleton": {
      if (index !== 0) {
        throw new Error(`Index out of bounds`);
      }
      return self2.backing.a;
    }
    case "IArray": {
      if (index >= self2.length || index < 0) {
        throw new Error(`Index out of bounds`);
      }
      return self2.backing.array[index];
    }
    case "IConcat": {
      return index < self2.left.length ? unsafeGet4(self2.left, index) : unsafeGet4(self2.right, index - self2.left.length);
    }
    case "ISlice": {
      return unsafeGet4(self2.backing.chunk, index + self2.backing.offset);
    }
  }
});
var append2 = /* @__PURE__ */ dual(2, (self2, a) => appendAll2(self2, of2(a)));
var prepend2 = /* @__PURE__ */ dual(2, (self2, elem) => appendAll2(of2(elem), self2));
var drop2 = /* @__PURE__ */ dual(2, (self2, n) => {
  if (n <= 0) {
    return self2;
  } else if (n >= self2.length) {
    return _empty2;
  } else {
    switch (self2.backing._tag) {
      case "ISlice": {
        return makeChunk({
          _tag: "ISlice",
          chunk: self2.backing.chunk,
          offset: self2.backing.offset + n,
          length: self2.backing.length - n
        });
      }
      case "IConcat": {
        if (n > self2.left.length) {
          return drop2(self2.right, n - self2.left.length);
        }
        return makeChunk({
          _tag: "IConcat",
          left: drop2(self2.left, n),
          right: self2.right
        });
      }
      default: {
        return makeChunk({
          _tag: "ISlice",
          chunk: self2,
          offset: n,
          length: self2.length - n
        });
      }
    }
  }
});
var appendAll2 = /* @__PURE__ */ dual(2, (self2, that) => {
  if (self2.backing._tag === "IEmpty") {
    return that;
  }
  if (that.backing._tag === "IEmpty") {
    return self2;
  }
  const diff8 = that.depth - self2.depth;
  if (Math.abs(diff8) <= 1) {
    return makeChunk({
      _tag: "IConcat",
      left: self2,
      right: that
    });
  } else if (diff8 < -1) {
    if (self2.left.depth >= self2.right.depth) {
      const nr = appendAll2(self2.right, that);
      return makeChunk({
        _tag: "IConcat",
        left: self2.left,
        right: nr
      });
    } else {
      const nrr = appendAll2(self2.right.right, that);
      if (nrr.depth === self2.depth - 3) {
        const nr = makeChunk({
          _tag: "IConcat",
          left: self2.right.left,
          right: nrr
        });
        return makeChunk({
          _tag: "IConcat",
          left: self2.left,
          right: nr
        });
      } else {
        const nl = makeChunk({
          _tag: "IConcat",
          left: self2.left,
          right: self2.right.left
        });
        return makeChunk({
          _tag: "IConcat",
          left: nl,
          right: nrr
        });
      }
    }
  } else {
    if (that.right.depth >= that.left.depth) {
      const nl = appendAll2(self2, that.left);
      return makeChunk({
        _tag: "IConcat",
        left: nl,
        right: that.right
      });
    } else {
      const nll = appendAll2(self2, that.left.left);
      if (nll.depth === that.depth - 3) {
        const nl = makeChunk({
          _tag: "IConcat",
          left: nll,
          right: that.left.right
        });
        return makeChunk({
          _tag: "IConcat",
          left: nl,
          right: that.right
        });
      } else {
        const nr = makeChunk({
          _tag: "IConcat",
          left: that.left.right,
          right: that.right
        });
        return makeChunk({
          _tag: "IConcat",
          left: nll,
          right: nr
        });
      }
    }
  }
});
var isEmpty = (self2) => self2.length === 0;
var isNonEmpty = (self2) => self2.length > 0;
var head2 = /* @__PURE__ */ get4(0);
var unsafeHead = (self2) => unsafeGet4(self2, 0);
var headNonEmpty2 = unsafeHead;
var tailNonEmpty2 = (self2) => drop2(self2, 1);

// node_modules/effect/dist/esm/Duration.js
var TypeId5 = /* @__PURE__ */ Symbol.for("effect/Duration");
var bigint0 = /* @__PURE__ */ BigInt(0);
var bigint24 = /* @__PURE__ */ BigInt(24);
var bigint60 = /* @__PURE__ */ BigInt(60);
var bigint1e3 = /* @__PURE__ */ BigInt(1e3);
var bigint1e6 = /* @__PURE__ */ BigInt(1e6);
var bigint1e9 = /* @__PURE__ */ BigInt(1e9);
var DURATION_REGEX = /^(-?\d+(?:\.\d+)?)\s+(nanos?|micros?|millis?|seconds?|minutes?|hours?|days?|weeks?)$/;
var decode = (input) => {
  if (isDuration(input)) {
    return input;
  } else if (isNumber(input)) {
    return millis(input);
  } else if (isBigInt(input)) {
    return nanos(input);
  } else if (Array.isArray(input)) {
    if (input.length === 2 && isNumber(input[0]) && isNumber(input[1])) {
      return nanos(BigInt(input[0]) * bigint1e9 + BigInt(input[1]));
    }
  } else if (isString(input)) {
    DURATION_REGEX.lastIndex = 0;
    const match11 = DURATION_REGEX.exec(input);
    if (match11) {
      const [_, valueStr, unit] = match11;
      const value3 = Number(valueStr);
      switch (unit) {
        case "nano":
        case "nanos":
          return nanos(BigInt(valueStr));
        case "micro":
        case "micros":
          return micros(BigInt(valueStr));
        case "milli":
        case "millis":
          return millis(value3);
        case "second":
        case "seconds":
          return seconds(value3);
        case "minute":
        case "minutes":
          return minutes(value3);
        case "hour":
        case "hours":
          return hours(value3);
        case "day":
        case "days":
          return days(value3);
        case "week":
        case "weeks":
          return weeks(value3);
      }
    }
  }
  throw new Error("Invalid DurationInput");
};
var decodeUnknown = /* @__PURE__ */ liftThrowable(decode);
var zeroValue = {
  _tag: "Millis",
  millis: 0
};
var infinityValue = {
  _tag: "Infinity"
};
var DurationProto = {
  [TypeId5]: TypeId5,
  [symbol]() {
    return cached(this, structure(this.value));
  },
  [symbol2](that) {
    return isDuration(that) && equals2(this, that);
  },
  toString() {
    return `Duration(${format2(this)})`;
  },
  toJSON() {
    switch (this.value._tag) {
      case "Millis":
        return {
          _id: "Duration",
          _tag: "Millis",
          millis: this.value.millis
        };
      case "Nanos":
        return {
          _id: "Duration",
          _tag: "Nanos",
          hrtime: toHrTime(this)
        };
      case "Infinity":
        return {
          _id: "Duration",
          _tag: "Infinity"
        };
    }
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var make8 = (input) => {
  const duration3 = Object.create(DurationProto);
  if (isNumber(input)) {
    if (isNaN(input) || input <= 0) {
      duration3.value = zeroValue;
    } else if (!Number.isFinite(input)) {
      duration3.value = infinityValue;
    } else if (!Number.isInteger(input)) {
      duration3.value = {
        _tag: "Nanos",
        nanos: BigInt(Math.round(input * 1e6))
      };
    } else {
      duration3.value = {
        _tag: "Millis",
        millis: input
      };
    }
  } else if (input <= bigint0) {
    duration3.value = zeroValue;
  } else {
    duration3.value = {
      _tag: "Nanos",
      nanos: input
    };
  }
  return duration3;
};
var isDuration = (u) => hasProperty(u, TypeId5);
var zero = /* @__PURE__ */ make8(0);
var nanos = (nanos2) => make8(nanos2);
var micros = (micros2) => make8(micros2 * bigint1e3);
var millis = (millis2) => make8(millis2);
var seconds = (seconds2) => make8(seconds2 * 1e3);
var minutes = (minutes2) => make8(minutes2 * 6e4);
var hours = (hours2) => make8(hours2 * 36e5);
var days = (days2) => make8(days2 * 864e5);
var weeks = (weeks2) => make8(weeks2 * 6048e5);
var toMillis = (self2) => {
  const _self = decode(self2);
  switch (_self.value._tag) {
    case "Infinity":
      return Infinity;
    case "Nanos":
      return Number(_self.value.nanos) / 1e6;
    case "Millis":
      return _self.value.millis;
  }
};
var unsafeToNanos = (self2) => {
  const _self = decode(self2);
  switch (_self.value._tag) {
    case "Infinity":
      throw new Error("Cannot convert infinite duration to nanos");
    case "Nanos":
      return _self.value.nanos;
    case "Millis":
      return BigInt(Math.round(_self.value.millis * 1e6));
  }
};
var toHrTime = (self2) => {
  const _self = decode(self2);
  switch (_self.value._tag) {
    case "Infinity":
      return [Infinity, 0];
    case "Nanos":
      return [Number(_self.value.nanos / bigint1e9), Number(_self.value.nanos % bigint1e9)];
    case "Millis":
      return [Math.floor(_self.value.millis / 1e3), Math.round(_self.value.millis % 1e3 * 1e6)];
  }
};
var matchWith = /* @__PURE__ */ dual(3, (self2, that, options) => {
  const _self = decode(self2);
  const _that = decode(that);
  if (_self.value._tag === "Infinity" || _that.value._tag === "Infinity") {
    return options.onMillis(toMillis(_self), toMillis(_that));
  } else if (_self.value._tag === "Nanos" || _that.value._tag === "Nanos") {
    const selfNanos = _self.value._tag === "Nanos" ? _self.value.nanos : BigInt(Math.round(_self.value.millis * 1e6));
    const thatNanos = _that.value._tag === "Nanos" ? _that.value.nanos : BigInt(Math.round(_that.value.millis * 1e6));
    return options.onNanos(selfNanos, thatNanos);
  }
  return options.onMillis(_self.value.millis, _that.value.millis);
});
var Equivalence = (self2, that) => matchWith(self2, that, {
  onMillis: (self3, that2) => self3 === that2,
  onNanos: (self3, that2) => self3 === that2
});
var greaterThanOrEqualTo2 = /* @__PURE__ */ dual(2, (self2, that) => matchWith(self2, that, {
  onMillis: (self3, that2) => self3 >= that2,
  onNanos: (self3, that2) => self3 >= that2
}));
var equals2 = /* @__PURE__ */ dual(2, (self2, that) => Equivalence(decode(self2), decode(that)));
var format2 = (self2) => {
  const duration3 = decode(self2);
  const parts = [];
  if (duration3.value._tag === "Infinity") {
    return "Infinity";
  }
  const nanos2 = unsafeToNanos(duration3);
  if (nanos2 % bigint1e6) {
    parts.push(`${nanos2 % bigint1e6}ns`);
  }
  const ms = nanos2 / bigint1e6;
  if (ms % bigint1e3 !== bigint0) {
    parts.push(`${ms % bigint1e3}ms`);
  }
  const sec = ms / bigint1e3;
  if (sec % bigint60 !== bigint0) {
    parts.push(`${sec % bigint60}s`);
  }
  const min3 = sec / bigint60;
  if (min3 % bigint60 !== bigint0) {
    parts.push(`${min3 % bigint60}m`);
  }
  const hr = min3 / bigint60;
  if (hr % bigint24 !== bigint0) {
    parts.push(`${hr % bigint24}h`);
  }
  const days2 = hr / bigint24;
  if (days2 !== bigint0) {
    parts.push(`${days2}d`);
  }
  return parts.reverse().join(" ");
};

// node_modules/effect/dist/esm/internal/hashMap/config.js
var SIZE = 5;
var BUCKET_SIZE = /* @__PURE__ */ Math.pow(2, SIZE);
var MASK = BUCKET_SIZE - 1;
var MAX_INDEX_NODE = BUCKET_SIZE / 2;
var MIN_ARRAY_NODE = BUCKET_SIZE / 4;

// node_modules/effect/dist/esm/internal/hashMap/bitwise.js
function popcount(x) {
  x -= x >> 1 & 1431655765;
  x = (x & 858993459) + (x >> 2 & 858993459);
  x = x + (x >> 4) & 252645135;
  x += x >> 8;
  x += x >> 16;
  return x & 127;
}
function hashFragment(shift2, h) {
  return h >>> shift2 & MASK;
}
function toBitmap(x) {
  return 1 << x;
}
function fromBitmap(bitmap, bit) {
  return popcount(bitmap & bit - 1);
}

// node_modules/effect/dist/esm/internal/stack.js
var make9 = (value3, previous) => ({
  value: value3,
  previous
});

// node_modules/effect/dist/esm/internal/hashMap/array.js
function arrayUpdate(mutate4, at, v, arr) {
  let out = arr;
  if (!mutate4) {
    const len = arr.length;
    out = new Array(len);
    for (let i = 0; i < len; ++i) out[i] = arr[i];
  }
  out[at] = v;
  return out;
}
function arraySpliceOut(mutate4, at, arr) {
  const newLen = arr.length - 1;
  let i = 0;
  let g = 0;
  let out = arr;
  if (mutate4) {
    i = g = at;
  } else {
    out = new Array(newLen);
    while (i < at) out[g++] = arr[i++];
  }
  ;
  ++i;
  while (i <= newLen) out[g++] = arr[i++];
  if (mutate4) {
    out.length = newLen;
  }
  return out;
}
function arraySpliceIn(mutate4, at, v, arr) {
  const len = arr.length;
  if (mutate4) {
    let i2 = len;
    while (i2 >= at) arr[i2--] = arr[i2];
    arr[at] = v;
    return arr;
  }
  let i = 0, g = 0;
  const out = new Array(len + 1);
  while (i < at) out[g++] = arr[i++];
  out[at] = v;
  while (i < len) out[++g] = arr[i++];
  return out;
}

// node_modules/effect/dist/esm/internal/hashMap/node.js
var EmptyNode = class _EmptyNode {
  _tag = "EmptyNode";
  modify(edit, _shift, f, hash2, key, size11) {
    const v = f(none2());
    if (isNone2(v)) return new _EmptyNode();
    ++size11.value;
    return new LeafNode(edit, hash2, key, v);
  }
};
function isEmptyNode(a) {
  return isTagged(a, "EmptyNode");
}
function isLeafNode(node) {
  return isEmptyNode(node) || node._tag === "LeafNode" || node._tag === "CollisionNode";
}
function canEditNode(node, edit) {
  return isEmptyNode(node) ? false : edit === node.edit;
}
var LeafNode = class _LeafNode {
  edit;
  hash;
  key;
  value;
  _tag = "LeafNode";
  constructor(edit, hash2, key, value3) {
    this.edit = edit;
    this.hash = hash2;
    this.key = key;
    this.value = value3;
  }
  modify(edit, shift2, f, hash2, key, size11) {
    if (equals(key, this.key)) {
      const v2 = f(this.value);
      if (v2 === this.value) return this;
      else if (isNone2(v2)) {
        ;
        --size11.value;
        return new EmptyNode();
      }
      if (canEditNode(this, edit)) {
        this.value = v2;
        return this;
      }
      return new _LeafNode(edit, hash2, key, v2);
    }
    const v = f(none2());
    if (isNone2(v)) return this;
    ++size11.value;
    return mergeLeaves(edit, shift2, this.hash, this, hash2, new _LeafNode(edit, hash2, key, v));
  }
};
var CollisionNode = class _CollisionNode {
  edit;
  hash;
  children;
  _tag = "CollisionNode";
  constructor(edit, hash2, children) {
    this.edit = edit;
    this.hash = hash2;
    this.children = children;
  }
  modify(edit, shift2, f, hash2, key, size11) {
    if (hash2 === this.hash) {
      const canEdit = canEditNode(this, edit);
      const list = this.updateCollisionList(canEdit, edit, this.hash, this.children, f, key, size11);
      if (list === this.children) return this;
      return list.length > 1 ? new _CollisionNode(edit, this.hash, list) : list[0];
    }
    const v = f(none2());
    if (isNone2(v)) return this;
    ++size11.value;
    return mergeLeaves(edit, shift2, this.hash, this, hash2, new LeafNode(edit, hash2, key, v));
  }
  updateCollisionList(mutate4, edit, hash2, list, f, key, size11) {
    const len = list.length;
    for (let i = 0; i < len; ++i) {
      const child = list[i];
      if ("key" in child && equals(key, child.key)) {
        const value3 = child.value;
        const newValue2 = f(value3);
        if (newValue2 === value3) return list;
        if (isNone2(newValue2)) {
          ;
          --size11.value;
          return arraySpliceOut(mutate4, i, list);
        }
        return arrayUpdate(mutate4, i, new LeafNode(edit, hash2, key, newValue2), list);
      }
    }
    const newValue = f(none2());
    if (isNone2(newValue)) return list;
    ++size11.value;
    return arrayUpdate(mutate4, len, new LeafNode(edit, hash2, key, newValue), list);
  }
};
var IndexedNode = class _IndexedNode {
  edit;
  mask;
  children;
  _tag = "IndexedNode";
  constructor(edit, mask, children) {
    this.edit = edit;
    this.mask = mask;
    this.children = children;
  }
  modify(edit, shift2, f, hash2, key, size11) {
    const mask = this.mask;
    const children = this.children;
    const frag = hashFragment(shift2, hash2);
    const bit = toBitmap(frag);
    const indx = fromBitmap(mask, bit);
    const exists3 = mask & bit;
    const canEdit = canEditNode(this, edit);
    if (!exists3) {
      const _newChild = new EmptyNode().modify(edit, shift2 + SIZE, f, hash2, key, size11);
      if (!_newChild) return this;
      return children.length >= MAX_INDEX_NODE ? expand(edit, frag, _newChild, mask, children) : new _IndexedNode(edit, mask | bit, arraySpliceIn(canEdit, indx, _newChild, children));
    }
    const current = children[indx];
    const child = current.modify(edit, shift2 + SIZE, f, hash2, key, size11);
    if (current === child) return this;
    let bitmap = mask;
    let newChildren;
    if (isEmptyNode(child)) {
      bitmap &= ~bit;
      if (!bitmap) return new EmptyNode();
      if (children.length <= 2 && isLeafNode(children[indx ^ 1])) {
        return children[indx ^ 1];
      }
      newChildren = arraySpliceOut(canEdit, indx, children);
    } else {
      newChildren = arrayUpdate(canEdit, indx, child, children);
    }
    if (canEdit) {
      this.mask = bitmap;
      this.children = newChildren;
      return this;
    }
    return new _IndexedNode(edit, bitmap, newChildren);
  }
};
var ArrayNode = class _ArrayNode {
  edit;
  size;
  children;
  _tag = "ArrayNode";
  constructor(edit, size11, children) {
    this.edit = edit;
    this.size = size11;
    this.children = children;
  }
  modify(edit, shift2, f, hash2, key, size11) {
    let count = this.size;
    const children = this.children;
    const frag = hashFragment(shift2, hash2);
    const child = children[frag];
    const newChild = (child || new EmptyNode()).modify(edit, shift2 + SIZE, f, hash2, key, size11);
    if (child === newChild) return this;
    const canEdit = canEditNode(this, edit);
    let newChildren;
    if (isEmptyNode(child) && !isEmptyNode(newChild)) {
      ;
      ++count;
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
      ;
      --count;
      if (count <= MIN_ARRAY_NODE) {
        return pack(edit, count, frag, children);
      }
      newChildren = arrayUpdate(canEdit, frag, new EmptyNode(), children);
    } else {
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    }
    if (canEdit) {
      this.size = count;
      this.children = newChildren;
      return this;
    }
    return new _ArrayNode(edit, count, newChildren);
  }
};
function pack(edit, count, removed, elements) {
  const children = new Array(count - 1);
  let g = 0;
  let bitmap = 0;
  for (let i = 0, len = elements.length; i < len; ++i) {
    if (i !== removed) {
      const elem = elements[i];
      if (elem && !isEmptyNode(elem)) {
        children[g++] = elem;
        bitmap |= 1 << i;
      }
    }
  }
  return new IndexedNode(edit, bitmap, children);
}
function expand(edit, frag, child, bitmap, subNodes) {
  const arr = [];
  let bit = bitmap;
  let count = 0;
  for (let i = 0; bit; ++i) {
    if (bit & 1) arr[i] = subNodes[count++];
    bit >>>= 1;
  }
  arr[frag] = child;
  return new ArrayNode(edit, count + 1, arr);
}
function mergeLeavesInner(edit, shift2, h1, n1, h2, n2) {
  if (h1 === h2) return new CollisionNode(edit, h1, [n2, n1]);
  const subH1 = hashFragment(shift2, h1);
  const subH2 = hashFragment(shift2, h2);
  if (subH1 === subH2) {
    return (child) => new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), [child]);
  } else {
    const children = subH1 < subH2 ? [n1, n2] : [n2, n1];
    return new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), children);
  }
}
function mergeLeaves(edit, shift2, h1, n1, h2, n2) {
  let stack = void 0;
  let currentShift = shift2;
  while (true) {
    const res = mergeLeavesInner(edit, currentShift, h1, n1, h2, n2);
    if (typeof res === "function") {
      stack = make9(res, stack);
      currentShift = currentShift + SIZE;
    } else {
      let final = res;
      while (stack != null) {
        final = stack.value(final);
        stack = stack.previous;
      }
      return final;
    }
  }
}

// node_modules/effect/dist/esm/internal/hashMap.js
var HashMapSymbolKey = "effect/HashMap";
var HashMapTypeId = /* @__PURE__ */ Symbol.for(HashMapSymbolKey);
var HashMapProto = {
  [HashMapTypeId]: HashMapTypeId,
  [Symbol.iterator]() {
    return new HashMapIterator(this, (k, v) => [k, v]);
  },
  [symbol]() {
    let hash2 = hash(HashMapSymbolKey);
    for (const item of this) {
      hash2 ^= pipe(hash(item[0]), combine(hash(item[1])));
    }
    return cached(this, hash2);
  },
  [symbol2](that) {
    if (isHashMap(that)) {
      if (that._size !== this._size) {
        return false;
      }
      for (const item of this) {
        const elem = pipe(that, getHash(item[0], hash(item[0])));
        if (isNone2(elem)) {
          return false;
        } else {
          if (!equals(item[1], elem.value)) {
            return false;
          }
        }
      }
      return true;
    }
    return false;
  },
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "HashMap",
      values: Array.from(this).map(toJSON)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var makeImpl = (editable, edit, root, size11) => {
  const map18 = Object.create(HashMapProto);
  map18._editable = editable;
  map18._edit = edit;
  map18._root = root;
  map18._size = size11;
  return map18;
};
var HashMapIterator = class _HashMapIterator {
  map;
  f;
  v;
  constructor(map18, f) {
    this.map = map18;
    this.f = f;
    this.v = visitLazy(this.map._root, this.f, void 0);
  }
  next() {
    if (isNone2(this.v)) {
      return {
        done: true,
        value: void 0
      };
    }
    const v0 = this.v.value;
    this.v = applyCont(v0.cont);
    return {
      done: false,
      value: v0.value
    };
  }
  [Symbol.iterator]() {
    return new _HashMapIterator(this.map, this.f);
  }
};
var applyCont = (cont) => cont ? visitLazyChildren(cont[0], cont[1], cont[2], cont[3], cont[4]) : none2();
var visitLazy = (node, f, cont = void 0) => {
  switch (node._tag) {
    case "LeafNode": {
      if (isSome2(node.value)) {
        return some2({
          value: f(node.key, node.value.value),
          cont
        });
      }
      return applyCont(cont);
    }
    case "CollisionNode":
    case "ArrayNode":
    case "IndexedNode": {
      const children = node.children;
      return visitLazyChildren(children.length, children, 0, f, cont);
    }
    default: {
      return applyCont(cont);
    }
  }
};
var visitLazyChildren = (len, children, i, f, cont) => {
  while (i < len) {
    const child = children[i++];
    if (child && !isEmptyNode(child)) {
      return visitLazy(child, f, [len, children, i, f, cont]);
    }
  }
  return applyCont(cont);
};
var _empty3 = /* @__PURE__ */ makeImpl(false, 0, /* @__PURE__ */ new EmptyNode(), 0);
var empty5 = () => _empty3;
var fromIterable3 = (entries2) => {
  const map18 = beginMutation(empty5());
  for (const entry of entries2) {
    set(map18, entry[0], entry[1]);
  }
  return endMutation(map18);
};
var isHashMap = (u) => hasProperty(u, HashMapTypeId);
var isEmpty2 = (self2) => self2 && isEmptyNode(self2._root);
var get5 = /* @__PURE__ */ dual(2, (self2, key) => getHash(self2, key, hash(key)));
var getHash = /* @__PURE__ */ dual(3, (self2, key, hash2) => {
  let node = self2._root;
  let shift2 = 0;
  while (true) {
    switch (node._tag) {
      case "LeafNode": {
        return equals(key, node.key) ? node.value : none2();
      }
      case "CollisionNode": {
        if (hash2 === node.hash) {
          const children = node.children;
          for (let i = 0, len = children.length; i < len; ++i) {
            const child = children[i];
            if ("key" in child && equals(key, child.key)) {
              return child.value;
            }
          }
        }
        return none2();
      }
      case "IndexedNode": {
        const frag = hashFragment(shift2, hash2);
        const bit = toBitmap(frag);
        if (node.mask & bit) {
          node = node.children[fromBitmap(node.mask, bit)];
          shift2 += SIZE;
          break;
        }
        return none2();
      }
      case "ArrayNode": {
        node = node.children[hashFragment(shift2, hash2)];
        if (node) {
          shift2 += SIZE;
          break;
        }
        return none2();
      }
      default:
        return none2();
    }
  }
});
var has = /* @__PURE__ */ dual(2, (self2, key) => isSome2(getHash(self2, key, hash(key))));
var set = /* @__PURE__ */ dual(3, (self2, key, value3) => modifyAt(self2, key, () => some2(value3)));
var setTree = /* @__PURE__ */ dual(3, (self2, newRoot, newSize) => {
  if (self2._editable) {
    ;
    self2._root = newRoot;
    self2._size = newSize;
    return self2;
  }
  return newRoot === self2._root ? self2 : makeImpl(self2._editable, self2._edit, newRoot, newSize);
});
var keys = (self2) => new HashMapIterator(self2, (key) => key);
var size = (self2) => self2._size;
var beginMutation = (self2) => makeImpl(true, self2._edit + 1, self2._root, self2._size);
var endMutation = (self2) => {
  ;
  self2._editable = false;
  return self2;
};
var mutate = /* @__PURE__ */ dual(2, (self2, f) => {
  const transient = beginMutation(self2);
  f(transient);
  return endMutation(transient);
});
var modifyAt = /* @__PURE__ */ dual(3, (self2, key, f) => modifyHash(self2, key, hash(key), f));
var modifyHash = /* @__PURE__ */ dual(4, (self2, key, hash2, f) => {
  const size11 = {
    value: self2._size
  };
  const newRoot = self2._root.modify(self2._editable ? self2._edit : NaN, 0, f, hash2, key, size11);
  return pipe(self2, setTree(newRoot, size11.value));
});
var remove2 = /* @__PURE__ */ dual(2, (self2, key) => modifyAt(self2, key, none2));
var map3 = /* @__PURE__ */ dual(2, (self2, f) => reduce2(self2, empty5(), (map18, value3, key) => set(map18, key, f(value3, key))));
var forEach = /* @__PURE__ */ dual(2, (self2, f) => reduce2(self2, void 0, (_, value3, key) => f(value3, key)));
var reduce2 = /* @__PURE__ */ dual(3, (self2, zero2, f) => {
  const root = self2._root;
  if (root._tag === "LeafNode") {
    return isSome2(root.value) ? f(zero2, root.value.value, root.key) : zero2;
  }
  if (root._tag === "EmptyNode") {
    return zero2;
  }
  const toVisit = [root.children];
  let children;
  while (children = toVisit.pop()) {
    for (let i = 0, len = children.length; i < len; ) {
      const child = children[i++];
      if (child && !isEmptyNode(child)) {
        if (child._tag === "LeafNode") {
          if (isSome2(child.value)) {
            zero2 = f(zero2, child.value.value, child.key);
          }
        } else {
          toVisit.push(child.children);
        }
      }
    }
  }
  return zero2;
});

// node_modules/effect/dist/esm/internal/hashSet.js
var HashSetSymbolKey = "effect/HashSet";
var HashSetTypeId = /* @__PURE__ */ Symbol.for(HashSetSymbolKey);
var HashSetProto = {
  [HashSetTypeId]: HashSetTypeId,
  [Symbol.iterator]() {
    return keys(this._keyMap);
  },
  [symbol]() {
    return cached(this, combine(hash(this._keyMap))(hash(HashSetSymbolKey)));
  },
  [symbol2](that) {
    if (isHashSet(that)) {
      return size(this._keyMap) === size(that._keyMap) && equals(this._keyMap, that._keyMap);
    }
    return false;
  },
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "HashSet",
      values: Array.from(this).map(toJSON)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var makeImpl2 = (keyMap) => {
  const set6 = Object.create(HashSetProto);
  set6._keyMap = keyMap;
  return set6;
};
var isHashSet = (u) => hasProperty(u, HashSetTypeId);
var _empty4 = /* @__PURE__ */ makeImpl2(/* @__PURE__ */ empty5());
var empty6 = () => _empty4;
var fromIterable4 = (elements) => {
  const set6 = beginMutation2(empty6());
  for (const value3 of elements) {
    add3(set6, value3);
  }
  return endMutation2(set6);
};
var make10 = (...elements) => {
  const set6 = beginMutation2(empty6());
  for (const value3 of elements) {
    add3(set6, value3);
  }
  return endMutation2(set6);
};
var has2 = /* @__PURE__ */ dual(2, (self2, value3) => has(self2._keyMap, value3));
var size2 = (self2) => size(self2._keyMap);
var beginMutation2 = (self2) => makeImpl2(beginMutation(self2._keyMap));
var endMutation2 = (self2) => {
  ;
  self2._keyMap._editable = false;
  return self2;
};
var mutate2 = /* @__PURE__ */ dual(2, (self2, f) => {
  const transient = beginMutation2(self2);
  f(transient);
  return endMutation2(transient);
});
var add3 = /* @__PURE__ */ dual(2, (self2, value3) => self2._keyMap._editable ? (set(value3, true)(self2._keyMap), self2) : makeImpl2(set(value3, true)(self2._keyMap)));
var remove3 = /* @__PURE__ */ dual(2, (self2, value3) => self2._keyMap._editable ? (remove2(value3)(self2._keyMap), self2) : makeImpl2(remove2(value3)(self2._keyMap)));
var difference2 = /* @__PURE__ */ dual(2, (self2, that) => mutate2(self2, (set6) => {
  for (const value3 of that) {
    remove3(set6, value3);
  }
}));
var union2 = /* @__PURE__ */ dual(2, (self2, that) => mutate2(empty6(), (set6) => {
  forEach2(self2, (value3) => add3(set6, value3));
  for (const value3 of that) {
    add3(set6, value3);
  }
}));
var forEach2 = /* @__PURE__ */ dual(2, (self2, f) => forEach(self2._keyMap, (_, k) => f(k)));
var reduce3 = /* @__PURE__ */ dual(3, (self2, zero2, f) => reduce2(self2._keyMap, zero2, (z, _, a) => f(z, a)));

// node_modules/effect/dist/esm/HashSet.js
var empty7 = empty6;
var fromIterable5 = fromIterable4;
var make11 = make10;
var has3 = has2;
var size3 = size2;
var add4 = add3;
var remove4 = remove3;
var difference3 = difference2;
var union3 = union2;
var reduce4 = reduce3;

// node_modules/effect/dist/esm/MutableRef.js
var TypeId6 = /* @__PURE__ */ Symbol.for("effect/MutableRef");
var MutableRefProto = {
  [TypeId6]: TypeId6,
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "MutableRef",
      current: toJSON(this.current)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var make12 = (value3) => {
  const ref = Object.create(MutableRefProto);
  ref.current = value3;
  return ref;
};
var compareAndSet = /* @__PURE__ */ dual(3, (self2, oldValue, newValue) => {
  if (equals(oldValue, self2.current)) {
    self2.current = newValue;
    return true;
  }
  return false;
});
var get6 = (self2) => self2.current;
var set2 = /* @__PURE__ */ dual(2, (self2, value3) => {
  self2.current = value3;
  return self2;
});

// node_modules/effect/dist/esm/internal/fiberId.js
var FiberIdSymbolKey = "effect/FiberId";
var FiberIdTypeId = /* @__PURE__ */ Symbol.for(FiberIdSymbolKey);
var OP_NONE = "None";
var OP_RUNTIME = "Runtime";
var OP_COMPOSITE = "Composite";
var emptyHash = /* @__PURE__ */ string(`${FiberIdSymbolKey}-${OP_NONE}`);
var None = class {
  [FiberIdTypeId] = FiberIdTypeId;
  _tag = OP_NONE;
  id = -1;
  startTimeMillis = -1;
  [symbol]() {
    return emptyHash;
  }
  [symbol2](that) {
    return isFiberId(that) && that._tag === OP_NONE;
  }
  toString() {
    return format(this.toJSON());
  }
  toJSON() {
    return {
      _id: "FiberId",
      _tag: this._tag
    };
  }
  [NodeInspectSymbol]() {
    return this.toJSON();
  }
};
var Runtime = class {
  id;
  startTimeMillis;
  [FiberIdTypeId] = FiberIdTypeId;
  _tag = OP_RUNTIME;
  constructor(id, startTimeMillis) {
    this.id = id;
    this.startTimeMillis = startTimeMillis;
  }
  [symbol]() {
    return cached(this, string(`${FiberIdSymbolKey}-${this._tag}-${this.id}-${this.startTimeMillis}`));
  }
  [symbol2](that) {
    return isFiberId(that) && that._tag === OP_RUNTIME && this.id === that.id && this.startTimeMillis === that.startTimeMillis;
  }
  toString() {
    return format(this.toJSON());
  }
  toJSON() {
    return {
      _id: "FiberId",
      _tag: this._tag,
      id: this.id,
      startTimeMillis: this.startTimeMillis
    };
  }
  [NodeInspectSymbol]() {
    return this.toJSON();
  }
};
var Composite = class {
  left;
  right;
  [FiberIdTypeId] = FiberIdTypeId;
  _tag = OP_COMPOSITE;
  constructor(left3, right3) {
    this.left = left3;
    this.right = right3;
  }
  _hash;
  [symbol]() {
    return pipe(string(`${FiberIdSymbolKey}-${this._tag}`), combine(hash(this.left)), combine(hash(this.right)), cached(this));
  }
  [symbol2](that) {
    return isFiberId(that) && that._tag === OP_COMPOSITE && equals(this.left, that.left) && equals(this.right, that.right);
  }
  toString() {
    return format(this.toJSON());
  }
  toJSON() {
    return {
      _id: "FiberId",
      _tag: this._tag,
      left: toJSON(this.left),
      right: toJSON(this.right)
    };
  }
  [NodeInspectSymbol]() {
    return this.toJSON();
  }
};
var none3 = /* @__PURE__ */ new None();
var isFiberId = (self2) => hasProperty(self2, FiberIdTypeId);
var combine2 = /* @__PURE__ */ dual(2, (self2, that) => {
  if (self2._tag === OP_NONE) {
    return that;
  }
  if (that._tag === OP_NONE) {
    return self2;
  }
  return new Composite(self2, that);
});
var ids = (self2) => {
  switch (self2._tag) {
    case OP_NONE: {
      return empty7();
    }
    case OP_RUNTIME: {
      return make11(self2.id);
    }
    case OP_COMPOSITE: {
      return pipe(ids(self2.left), union3(ids(self2.right)));
    }
  }
};
var _fiberCounter = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Fiber/Id/_fiberCounter"), () => make12(0));
var threadName = (self2) => {
  const identifiers = Array.from(ids(self2)).map((n) => `#${n}`).join(",");
  return identifiers;
};
var unsafeMake2 = () => {
  const id = get6(_fiberCounter);
  pipe(_fiberCounter, set2(id + 1));
  return new Runtime(id, Date.now());
};

// node_modules/effect/dist/esm/FiberId.js
var none4 = none3;
var combine3 = combine2;
var threadName2 = threadName;
var unsafeMake3 = unsafeMake2;

// node_modules/effect/dist/esm/HashMap.js
var empty8 = empty5;
var fromIterable6 = fromIterable3;
var isEmpty3 = isEmpty2;
var get7 = get5;
var set3 = set;
var keys2 = keys;
var size4 = size;
var mutate3 = mutate;
var modifyAt2 = modifyAt;
var map5 = map3;
var forEach3 = forEach;
var reduce5 = reduce2;

// node_modules/effect/dist/esm/List.js
var TypeId7 = /* @__PURE__ */ Symbol.for("effect/List");
var toArray3 = (self2) => fromIterable(self2);
var getEquivalence3 = (isEquivalent) => mapInput(getEquivalence(isEquivalent), toArray3);
var _equivalence4 = /* @__PURE__ */ getEquivalence3(equals);
var ConsProto = {
  [TypeId7]: TypeId7,
  _tag: "Cons",
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "List",
      _tag: "Cons",
      values: toArray3(this).map(toJSON)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  [symbol2](that) {
    return isList(that) && this._tag === that._tag && _equivalence4(this, that);
  },
  [symbol]() {
    return cached(this, array2(toArray3(this)));
  },
  [Symbol.iterator]() {
    let done7 = false;
    let self2 = this;
    return {
      next() {
        if (done7) {
          return this.return();
        }
        if (self2._tag === "Nil") {
          done7 = true;
          return this.return();
        }
        const value3 = self2.head;
        self2 = self2.tail;
        return {
          done: done7,
          value: value3
        };
      },
      return(value3) {
        if (!done7) {
          done7 = true;
        }
        return {
          done: true,
          value: value3
        };
      }
    };
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var makeCons = (head5, tail) => {
  const cons2 = Object.create(ConsProto);
  cons2.head = head5;
  cons2.tail = tail;
  return cons2;
};
var NilHash = /* @__PURE__ */ string("Nil");
var NilProto = {
  [TypeId7]: TypeId7,
  _tag: "Nil",
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "List",
      _tag: "Nil"
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  [symbol]() {
    return NilHash;
  },
  [symbol2](that) {
    return isList(that) && this._tag === that._tag;
  },
  [Symbol.iterator]() {
    return {
      next() {
        return {
          done: true,
          value: void 0
        };
      }
    };
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var _Nil = /* @__PURE__ */ Object.create(NilProto);
var isList = (u) => hasProperty(u, TypeId7);
var isNil = (self2) => self2._tag === "Nil";
var isCons = (self2) => self2._tag === "Cons";
var nil = () => _Nil;
var cons = (head5, tail) => makeCons(head5, tail);
var empty9 = nil;
var of3 = (value3) => makeCons(value3, _Nil);
var appendAll3 = /* @__PURE__ */ dual(2, (self2, that) => prependAll(that, self2));
var prepend3 = /* @__PURE__ */ dual(2, (self2, element) => cons(element, self2));
var prependAll = /* @__PURE__ */ dual(2, (self2, prefix) => {
  if (isNil(self2)) {
    return prefix;
  } else if (isNil(prefix)) {
    return self2;
  } else {
    const result = makeCons(prefix.head, self2);
    let curr = result;
    let that = prefix.tail;
    while (!isNil(that)) {
      const temp = makeCons(that.head, self2);
      curr.tail = temp;
      curr = temp;
      that = that.tail;
    }
    return result;
  }
});
var reduce6 = /* @__PURE__ */ dual(3, (self2, zero2, f) => {
  let acc = zero2;
  let these = self2;
  while (!isNil(these)) {
    acc = f(acc, these.head);
    these = these.tail;
  }
  return acc;
});
var reverse3 = (self2) => {
  let result = empty9();
  let these = self2;
  while (!isNil(these)) {
    result = prepend3(result, these.head);
    these = these.tail;
  }
  return result;
};

// node_modules/effect/dist/esm/internal/data.js
var ArrayProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(Array.prototype), {
  [symbol]() {
    return cached(this, array2(this));
  },
  [symbol2](that) {
    if (Array.isArray(that) && this.length === that.length) {
      return this.every((v, i) => equals(v, that[i]));
    } else {
      return false;
    }
  }
});
var Structural = /* @__PURE__ */ function() {
  function Structural2(args) {
    if (args) {
      Object.assign(this, args);
    }
  }
  Structural2.prototype = StructuralPrototype;
  return Structural2;
}();
var struct = (as4) => Object.assign(Object.create(StructuralPrototype), as4);

// node_modules/effect/dist/esm/internal/differ/contextPatch.js
var ContextPatchTypeId = /* @__PURE__ */ Symbol.for("effect/DifferContextPatch");
function variance(a) {
  return a;
}
var PatchProto = {
  ...Structural.prototype,
  [ContextPatchTypeId]: {
    _Value: variance,
    _Patch: variance
  }
};
var EmptyProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto), {
  _tag: "Empty"
});
var _empty5 = /* @__PURE__ */ Object.create(EmptyProto);
var empty10 = () => _empty5;
var AndThenProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto), {
  _tag: "AndThen"
});
var makeAndThen = (first2, second) => {
  const o = Object.create(AndThenProto);
  o.first = first2;
  o.second = second;
  return o;
};
var AddServiceProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto), {
  _tag: "AddService"
});
var makeAddService = (key, service3) => {
  const o = Object.create(AddServiceProto);
  o.key = key;
  o.service = service3;
  return o;
};
var RemoveServiceProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto), {
  _tag: "RemoveService"
});
var makeRemoveService = (key) => {
  const o = Object.create(RemoveServiceProto);
  o.key = key;
  return o;
};
var UpdateServiceProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto), {
  _tag: "UpdateService"
});
var makeUpdateService = (key, update5) => {
  const o = Object.create(UpdateServiceProto);
  o.key = key;
  o.update = update5;
  return o;
};
var diff = (oldValue, newValue) => {
  const missingServices = new Map(oldValue.unsafeMap);
  let patch9 = empty10();
  for (const [tag, newService] of newValue.unsafeMap.entries()) {
    if (missingServices.has(tag)) {
      const old = missingServices.get(tag);
      missingServices.delete(tag);
      if (!equals(old, newService)) {
        patch9 = combine4(makeUpdateService(tag, () => newService))(patch9);
      }
    } else {
      missingServices.delete(tag);
      patch9 = combine4(makeAddService(tag, newService))(patch9);
    }
  }
  for (const [tag] of missingServices.entries()) {
    patch9 = combine4(makeRemoveService(tag))(patch9);
  }
  return patch9;
};
var combine4 = /* @__PURE__ */ dual(2, (self2, that) => makeAndThen(self2, that));
var patch = /* @__PURE__ */ dual(2, (self2, context5) => {
  if (self2._tag === "Empty") {
    return context5;
  }
  let wasServiceUpdated = false;
  let patches = of2(self2);
  const updatedContext = new Map(context5.unsafeMap);
  while (isNonEmpty(patches)) {
    const head5 = headNonEmpty2(patches);
    const tail = tailNonEmpty2(patches);
    switch (head5._tag) {
      case "Empty": {
        patches = tail;
        break;
      }
      case "AddService": {
        updatedContext.set(head5.key, head5.service);
        patches = tail;
        break;
      }
      case "AndThen": {
        patches = prepend2(prepend2(tail, head5.second), head5.first);
        break;
      }
      case "RemoveService": {
        updatedContext.delete(head5.key);
        patches = tail;
        break;
      }
      case "UpdateService": {
        updatedContext.set(head5.key, head5.update(updatedContext.get(head5.key)));
        wasServiceUpdated = true;
        patches = tail;
        break;
      }
    }
  }
  if (!wasServiceUpdated) {
    return makeContext(updatedContext);
  }
  const map18 = /* @__PURE__ */ new Map();
  for (const [tag] of context5.unsafeMap) {
    if (updatedContext.has(tag)) {
      map18.set(tag, updatedContext.get(tag));
      updatedContext.delete(tag);
    }
  }
  for (const [tag, s] of updatedContext) {
    map18.set(tag, s);
  }
  return makeContext(map18);
});

// node_modules/effect/dist/esm/internal/differ/hashSetPatch.js
var HashSetPatchTypeId = /* @__PURE__ */ Symbol.for("effect/DifferHashSetPatch");
function variance2(a) {
  return a;
}
var PatchProto2 = {
  ...Structural.prototype,
  [HashSetPatchTypeId]: {
    _Value: variance2,
    _Key: variance2,
    _Patch: variance2
  }
};
var EmptyProto2 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto2), {
  _tag: "Empty"
});
var _empty6 = /* @__PURE__ */ Object.create(EmptyProto2);
var empty11 = () => _empty6;
var AndThenProto2 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto2), {
  _tag: "AndThen"
});
var makeAndThen2 = (first2, second) => {
  const o = Object.create(AndThenProto2);
  o.first = first2;
  o.second = second;
  return o;
};
var AddProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto2), {
  _tag: "Add"
});
var makeAdd = (value3) => {
  const o = Object.create(AddProto);
  o.value = value3;
  return o;
};
var RemoveProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto2), {
  _tag: "Remove"
});
var makeRemove = (value3) => {
  const o = Object.create(RemoveProto);
  o.value = value3;
  return o;
};
var diff2 = (oldValue, newValue) => {
  const [removed, patch9] = reduce4([oldValue, empty11()], ([set6, patch10], value3) => {
    if (has3(value3)(set6)) {
      return [remove4(value3)(set6), patch10];
    }
    return [set6, combine5(makeAdd(value3))(patch10)];
  })(newValue);
  return reduce4(patch9, (patch10, value3) => combine5(makeRemove(value3))(patch10))(removed);
};
var combine5 = /* @__PURE__ */ dual(2, (self2, that) => makeAndThen2(self2, that));
var patch2 = /* @__PURE__ */ dual(2, (self2, oldValue) => {
  if (self2._tag === "Empty") {
    return oldValue;
  }
  let set6 = oldValue;
  let patches = of2(self2);
  while (isNonEmpty(patches)) {
    const head5 = headNonEmpty2(patches);
    const tail = tailNonEmpty2(patches);
    switch (head5._tag) {
      case "Empty": {
        patches = tail;
        break;
      }
      case "AndThen": {
        patches = prepend2(head5.first)(prepend2(head5.second)(tail));
        break;
      }
      case "Add": {
        set6 = add4(head5.value)(set6);
        patches = tail;
        break;
      }
      case "Remove": {
        set6 = remove4(head5.value)(set6);
        patches = tail;
      }
    }
  }
  return set6;
});

// node_modules/effect/dist/esm/internal/differ/readonlyArrayPatch.js
var ReadonlyArrayPatchTypeId = /* @__PURE__ */ Symbol.for("effect/DifferReadonlyArrayPatch");
function variance3(a) {
  return a;
}
var PatchProto3 = {
  ...Structural.prototype,
  [ReadonlyArrayPatchTypeId]: {
    _Value: variance3,
    _Patch: variance3
  }
};
var EmptyProto3 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto3), {
  _tag: "Empty"
});
var _empty7 = /* @__PURE__ */ Object.create(EmptyProto3);
var empty12 = () => _empty7;
var AndThenProto3 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto3), {
  _tag: "AndThen"
});
var makeAndThen3 = (first2, second) => {
  const o = Object.create(AndThenProto3);
  o.first = first2;
  o.second = second;
  return o;
};
var AppendProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto3), {
  _tag: "Append"
});
var makeAppend = (values3) => {
  const o = Object.create(AppendProto);
  o.values = values3;
  return o;
};
var SliceProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto3), {
  _tag: "Slice"
});
var makeSlice = (from, until) => {
  const o = Object.create(SliceProto);
  o.from = from;
  o.until = until;
  return o;
};
var UpdateProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto3), {
  _tag: "Update"
});
var makeUpdate = (index, patch9) => {
  const o = Object.create(UpdateProto);
  o.index = index;
  o.patch = patch9;
  return o;
};
var diff3 = (options) => {
  let i = 0;
  let patch9 = empty12();
  while (i < options.oldValue.length && i < options.newValue.length) {
    const oldElement = options.oldValue[i];
    const newElement = options.newValue[i];
    const valuePatch = options.differ.diff(oldElement, newElement);
    if (!equals(valuePatch, options.differ.empty)) {
      patch9 = combine6(patch9, makeUpdate(i, valuePatch));
    }
    i = i + 1;
  }
  if (i < options.oldValue.length) {
    patch9 = combine6(patch9, makeSlice(0, i));
  }
  if (i < options.newValue.length) {
    patch9 = combine6(patch9, makeAppend(drop(i)(options.newValue)));
  }
  return patch9;
};
var combine6 = /* @__PURE__ */ dual(2, (self2, that) => makeAndThen3(self2, that));
var patch3 = /* @__PURE__ */ dual(3, (self2, oldValue, differ3) => {
  if (self2._tag === "Empty") {
    return oldValue;
  }
  let readonlyArray2 = oldValue.slice();
  let patches = of(self2);
  while (isNonEmptyArray2(patches)) {
    const head5 = headNonEmpty(patches);
    const tail = tailNonEmpty(patches);
    switch (head5._tag) {
      case "Empty": {
        patches = tail;
        break;
      }
      case "AndThen": {
        tail.unshift(head5.first, head5.second);
        patches = tail;
        break;
      }
      case "Append": {
        for (const value3 of head5.values) {
          readonlyArray2.push(value3);
        }
        patches = tail;
        break;
      }
      case "Slice": {
        readonlyArray2 = readonlyArray2.slice(head5.from, head5.until);
        patches = tail;
        break;
      }
      case "Update": {
        readonlyArray2[head5.index] = differ3.patch(head5.patch, readonlyArray2[head5.index]);
        patches = tail;
        break;
      }
    }
  }
  return readonlyArray2;
});

// node_modules/effect/dist/esm/internal/differ.js
var DifferTypeId = /* @__PURE__ */ Symbol.for("effect/Differ");
var DifferProto = {
  [DifferTypeId]: {
    _P: identity,
    _V: identity
  }
};
var make15 = (params) => {
  const differ3 = Object.create(DifferProto);
  differ3.empty = params.empty;
  differ3.diff = params.diff;
  differ3.combine = params.combine;
  differ3.patch = params.patch;
  return differ3;
};
var environment = () => make15({
  empty: empty10(),
  combine: (first2, second) => combine4(second)(first2),
  diff: (oldValue, newValue) => diff(oldValue, newValue),
  patch: (patch9, oldValue) => patch(oldValue)(patch9)
});
var hashSet = () => make15({
  empty: empty11(),
  combine: (first2, second) => combine5(second)(first2),
  diff: (oldValue, newValue) => diff2(oldValue, newValue),
  patch: (patch9, oldValue) => patch2(oldValue)(patch9)
});
var readonlyArray = (differ3) => make15({
  empty: empty12(),
  combine: (first2, second) => combine6(first2, second),
  diff: (oldValue, newValue) => diff3({
    oldValue,
    newValue,
    differ: differ3
  }),
  patch: (patch9, oldValue) => patch3(patch9, oldValue, differ3)
});
var update = () => updateWith((_, a) => a);
var updateWith = (f) => make15({
  empty: identity,
  combine: (first2, second) => {
    if (first2 === identity) {
      return second;
    }
    if (second === identity) {
      return first2;
    }
    return (a) => second(first2(a));
  },
  diff: (oldValue, newValue) => {
    if (equals(oldValue, newValue)) {
      return identity;
    }
    return constant(newValue);
  },
  patch: (patch9, oldValue) => f(oldValue, patch9(oldValue))
});

// node_modules/effect/dist/esm/internal/runtimeFlagsPatch.js
var BIT_MASK = 255;
var BIT_SHIFT = 8;
var active = (patch9) => patch9 & BIT_MASK;
var enabled = (patch9) => patch9 >> BIT_SHIFT & BIT_MASK;
var make16 = (active2, enabled2) => (active2 & BIT_MASK) + ((enabled2 & active2 & BIT_MASK) << BIT_SHIFT);
var empty13 = /* @__PURE__ */ make16(0, 0);
var enable = (flag) => make16(flag, flag);
var disable = (flag) => make16(flag, 0);
var exclude = /* @__PURE__ */ dual(2, (self2, flag) => make16(active(self2) & ~flag, enabled(self2)));
var andThen = /* @__PURE__ */ dual(2, (self2, that) => self2 | that);
var invert = (n) => ~n >>> 0 & BIT_MASK;

// node_modules/effect/dist/esm/internal/runtimeFlags.js
var None2 = 0;
var Interruption = 1 << 0;
var OpSupervision = 1 << 1;
var RuntimeMetrics = 1 << 2;
var WindDown = 1 << 4;
var CooperativeYielding = 1 << 5;
var cooperativeYielding = (self2) => isEnabled(self2, CooperativeYielding);
var enable2 = /* @__PURE__ */ dual(2, (self2, flag) => self2 | flag);
var interruptible = (self2) => interruption(self2) && !windDown(self2);
var interruption = (self2) => isEnabled(self2, Interruption);
var isEnabled = /* @__PURE__ */ dual(2, (self2, flag) => (self2 & flag) !== 0);
var make17 = (...flags) => flags.reduce((a, b) => a | b, 0);
var none5 = /* @__PURE__ */ make17(None2);
var runtimeMetrics = (self2) => isEnabled(self2, RuntimeMetrics);
var windDown = (self2) => isEnabled(self2, WindDown);
var diff4 = /* @__PURE__ */ dual(2, (self2, that) => make16(self2 ^ that, that));
var patch4 = /* @__PURE__ */ dual(2, (self2, patch9) => self2 & (invert(active(patch9)) | enabled(patch9)) | active(patch9) & enabled(patch9));
var differ = /* @__PURE__ */ make15({
  empty: empty13,
  diff: (oldValue, newValue) => diff4(oldValue, newValue),
  combine: (first2, second) => andThen(second)(first2),
  patch: (_patch, oldValue) => patch4(oldValue, _patch)
});

// node_modules/effect/dist/esm/RuntimeFlagsPatch.js
var empty14 = empty13;
var enable3 = enable;
var disable2 = disable;
var exclude2 = exclude;

// node_modules/effect/dist/esm/internal/blockedRequests.js
var empty15 = {
  _tag: "Empty"
};
var par = (self2, that) => ({
  _tag: "Par",
  left: self2,
  right: that
});
var seq = (self2, that) => ({
  _tag: "Seq",
  left: self2,
  right: that
});
var single = (dataSource, blockedRequest) => ({
  _tag: "Single",
  dataSource,
  blockedRequest
});
var flatten2 = (self2) => {
  let current = of3(self2);
  let updated = empty9();
  while (1) {
    const [parallel4, sequential4] = reduce6(current, [parallelCollectionEmpty(), empty9()], ([parallel5, sequential5], blockedRequest) => {
      const [par2, seq2] = step(blockedRequest);
      return [parallelCollectionCombine(parallel5, par2), appendAll3(sequential5, seq2)];
    });
    updated = merge4(updated, parallel4);
    if (isNil(sequential4)) {
      return reverse3(updated);
    }
    current = sequential4;
  }
  throw new Error("BUG: BlockedRequests.flatten - please report an issue at https://github.com/Effect-TS/effect/issues");
};
var step = (requests) => {
  let current = requests;
  let parallel4 = parallelCollectionEmpty();
  let stack = empty9();
  let sequential4 = empty9();
  while (1) {
    switch (current._tag) {
      case "Empty": {
        if (isNil(stack)) {
          return [parallel4, sequential4];
        }
        current = stack.head;
        stack = stack.tail;
        break;
      }
      case "Par": {
        stack = cons(current.right, stack);
        current = current.left;
        break;
      }
      case "Seq": {
        const left3 = current.left;
        const right3 = current.right;
        switch (left3._tag) {
          case "Empty": {
            current = right3;
            break;
          }
          case "Par": {
            const l = left3.left;
            const r = left3.right;
            current = par(seq(l, right3), seq(r, right3));
            break;
          }
          case "Seq": {
            const l = left3.left;
            const r = left3.right;
            current = seq(l, seq(r, right3));
            break;
          }
          case "Single": {
            current = left3;
            sequential4 = cons(right3, sequential4);
            break;
          }
        }
        break;
      }
      case "Single": {
        parallel4 = parallelCollectionAdd(parallel4, current);
        if (isNil(stack)) {
          return [parallel4, sequential4];
        }
        current = stack.head;
        stack = stack.tail;
        break;
      }
    }
  }
  throw new Error("BUG: BlockedRequests.step - please report an issue at https://github.com/Effect-TS/effect/issues");
};
var merge4 = (sequential4, parallel4) => {
  if (isNil(sequential4)) {
    return of3(parallelCollectionToSequentialCollection(parallel4));
  }
  if (parallelCollectionIsEmpty(parallel4)) {
    return sequential4;
  }
  const seqHeadKeys = sequentialCollectionKeys(sequential4.head);
  const parKeys = parallelCollectionKeys(parallel4);
  if (seqHeadKeys.length === 1 && parKeys.length === 1 && equals(seqHeadKeys[0], parKeys[0])) {
    return cons(sequentialCollectionCombine(sequential4.head, parallelCollectionToSequentialCollection(parallel4)), sequential4.tail);
  }
  return cons(parallelCollectionToSequentialCollection(parallel4), sequential4);
};
var EntryTypeId = /* @__PURE__ */ Symbol.for("effect/RequestBlock/Entry");
var EntryImpl = class {
  request;
  result;
  listeners;
  ownerId;
  state;
  [EntryTypeId] = blockedRequestVariance;
  constructor(request2, result, listeners, ownerId, state) {
    this.request = request2;
    this.result = result;
    this.listeners = listeners;
    this.ownerId = ownerId;
    this.state = state;
  }
};
var blockedRequestVariance = {
  /* c8 ignore next */
  _R: (_) => _
};
var makeEntry = (options) => new EntryImpl(options.request, options.result, options.listeners, options.ownerId, options.state);
var RequestBlockParallelTypeId = /* @__PURE__ */ Symbol.for("effect/RequestBlock/RequestBlockParallel");
var parallelVariance = {
  /* c8 ignore next */
  _R: (_) => _
};
var ParallelImpl = class {
  map;
  [RequestBlockParallelTypeId] = parallelVariance;
  constructor(map18) {
    this.map = map18;
  }
};
var parallelCollectionEmpty = () => new ParallelImpl(empty8());
var parallelCollectionAdd = (self2, blockedRequest) => new ParallelImpl(modifyAt2(self2.map, blockedRequest.dataSource, (_) => orElseSome(map(_, append2(blockedRequest.blockedRequest)), () => of2(blockedRequest.blockedRequest))));
var parallelCollectionCombine = (self2, that) => new ParallelImpl(reduce5(self2.map, that.map, (map18, value3, key) => set3(map18, key, match2(get7(map18, key), {
  onNone: () => value3,
  onSome: (other) => appendAll2(value3, other)
}))));
var parallelCollectionIsEmpty = (self2) => isEmpty3(self2.map);
var parallelCollectionKeys = (self2) => Array.from(keys2(self2.map));
var parallelCollectionToSequentialCollection = (self2) => sequentialCollectionMake(map5(self2.map, (x) => of2(x)));
var SequentialCollectionTypeId = /* @__PURE__ */ Symbol.for("effect/RequestBlock/RequestBlockSequential");
var sequentialVariance = {
  /* c8 ignore next */
  _R: (_) => _
};
var SequentialImpl = class {
  map;
  [SequentialCollectionTypeId] = sequentialVariance;
  constructor(map18) {
    this.map = map18;
  }
};
var sequentialCollectionMake = (map18) => new SequentialImpl(map18);
var sequentialCollectionCombine = (self2, that) => new SequentialImpl(reduce5(that.map, self2.map, (map18, value3, key) => set3(map18, key, match2(get7(map18, key), {
  onNone: () => empty4(),
  onSome: (a) => appendAll2(a, value3)
}))));
var sequentialCollectionKeys = (self2) => Array.from(keys2(self2.map));
var sequentialCollectionToChunk = (self2) => Array.from(self2.map);

// node_modules/effect/dist/esm/internal/opCodes/cause.js
var OP_DIE = "Die";
var OP_EMPTY = "Empty";
var OP_FAIL = "Fail";
var OP_INTERRUPT = "Interrupt";
var OP_PARALLEL = "Parallel";
var OP_SEQUENTIAL = "Sequential";

// node_modules/effect/dist/esm/internal/cause.js
var CauseSymbolKey = "effect/Cause";
var CauseTypeId = /* @__PURE__ */ Symbol.for(CauseSymbolKey);
var variance4 = {
  /* c8 ignore next */
  _E: (_) => _
};
var proto = {
  [CauseTypeId]: variance4,
  [symbol]() {
    return pipe(hash(CauseSymbolKey), combine(hash(flattenCause(this))), cached(this));
  },
  [symbol2](that) {
    return isCause(that) && causeEquals(this, that);
  },
  pipe() {
    return pipeArguments(this, arguments);
  },
  toJSON() {
    switch (this._tag) {
      case "Empty":
        return {
          _id: "Cause",
          _tag: this._tag
        };
      case "Die":
        return {
          _id: "Cause",
          _tag: this._tag,
          defect: toJSON(this.defect)
        };
      case "Interrupt":
        return {
          _id: "Cause",
          _tag: this._tag,
          fiberId: this.fiberId.toJSON()
        };
      case "Fail":
        return {
          _id: "Cause",
          _tag: this._tag,
          failure: toJSON(this.error)
        };
      case "Sequential":
      case "Parallel":
        return {
          _id: "Cause",
          _tag: this._tag,
          left: toJSON(this.left),
          right: toJSON(this.right)
        };
    }
  },
  toString() {
    return pretty(this);
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  }
};
var empty16 = /* @__PURE__ */ (() => {
  const o = /* @__PURE__ */ Object.create(proto);
  o._tag = OP_EMPTY;
  return o;
})();
var fail = (error) => {
  const o = Object.create(proto);
  o._tag = OP_FAIL;
  o.error = error;
  return o;
};
var die = (defect) => {
  const o = Object.create(proto);
  o._tag = OP_DIE;
  o.defect = defect;
  return o;
};
var interrupt = (fiberId3) => {
  const o = Object.create(proto);
  o._tag = OP_INTERRUPT;
  o.fiberId = fiberId3;
  return o;
};
var parallel = (left3, right3) => {
  const o = Object.create(proto);
  o._tag = OP_PARALLEL;
  o.left = left3;
  o.right = right3;
  return o;
};
var sequential = (left3, right3) => {
  const o = Object.create(proto);
  o._tag = OP_SEQUENTIAL;
  o.left = left3;
  o.right = right3;
  return o;
};
var isCause = (u) => hasProperty(u, CauseTypeId);
var isDieType = (self2) => self2._tag === OP_DIE;
var isEmpty5 = (self2) => {
  if (self2._tag === OP_EMPTY) {
    return true;
  }
  return reduce7(self2, true, (acc, cause3) => {
    switch (cause3._tag) {
      case OP_EMPTY: {
        return some2(acc);
      }
      case OP_DIE:
      case OP_FAIL:
      case OP_INTERRUPT: {
        return some2(false);
      }
      default: {
        return none2();
      }
    }
  });
};
var isInterrupted = (self2) => isSome2(interruptOption(self2));
var isInterruptedOnly = (self2) => reduceWithContext(void 0, IsInterruptedOnlyCauseReducer)(self2);
var failures = (self2) => reverse2(reduce7(self2, empty4(), (list, cause3) => cause3._tag === OP_FAIL ? some2(pipe(list, prepend2(cause3.error))) : none2()));
var defects = (self2) => reverse2(reduce7(self2, empty4(), (list, cause3) => cause3._tag === OP_DIE ? some2(pipe(list, prepend2(cause3.defect))) : none2()));
var interruptors = (self2) => reduce7(self2, empty7(), (set6, cause3) => cause3._tag === OP_INTERRUPT ? some2(pipe(set6, add4(cause3.fiberId))) : none2());
var failureOption = (self2) => find(self2, (cause3) => cause3._tag === OP_FAIL ? some2(cause3.error) : none2());
var failureOrCause = (self2) => {
  const option5 = failureOption(self2);
  switch (option5._tag) {
    case "None": {
      return right2(self2);
    }
    case "Some": {
      return left2(option5.value);
    }
  }
};
var interruptOption = (self2) => find(self2, (cause3) => cause3._tag === OP_INTERRUPT ? some2(cause3.fiberId) : none2());
var keepDefects = (self2) => match4(self2, {
  onEmpty: none2(),
  onFail: () => none2(),
  onDie: (defect) => some2(die(defect)),
  onInterrupt: () => none2(),
  onSequential: (left3, right3) => {
    if (isSome2(left3) && isSome2(right3)) {
      return some2(sequential(left3.value, right3.value));
    }
    if (isSome2(left3) && isNone2(right3)) {
      return some2(left3.value);
    }
    if (isNone2(left3) && isSome2(right3)) {
      return some2(right3.value);
    }
    return none2();
  },
  onParallel: (left3, right3) => {
    if (isSome2(left3) && isSome2(right3)) {
      return some2(parallel(left3.value, right3.value));
    }
    if (isSome2(left3) && isNone2(right3)) {
      return some2(left3.value);
    }
    if (isNone2(left3) && isSome2(right3)) {
      return some2(right3.value);
    }
    return none2();
  }
});
var keepDefectsAndElectFailures = (self2) => match4(self2, {
  onEmpty: none2(),
  onFail: (failure) => some2(die(failure)),
  onDie: (defect) => some2(die(defect)),
  onInterrupt: () => none2(),
  onSequential: (left3, right3) => {
    if (isSome2(left3) && isSome2(right3)) {
      return some2(sequential(left3.value, right3.value));
    }
    if (isSome2(left3) && isNone2(right3)) {
      return some2(left3.value);
    }
    if (isNone2(left3) && isSome2(right3)) {
      return some2(right3.value);
    }
    return none2();
  },
  onParallel: (left3, right3) => {
    if (isSome2(left3) && isSome2(right3)) {
      return some2(parallel(left3.value, right3.value));
    }
    if (isSome2(left3) && isNone2(right3)) {
      return some2(left3.value);
    }
    if (isNone2(left3) && isSome2(right3)) {
      return some2(right3.value);
    }
    return none2();
  }
});
var stripFailures = (self2) => match4(self2, {
  onEmpty: empty16,
  onFail: () => empty16,
  onDie: (defect) => die(defect),
  onInterrupt: (fiberId3) => interrupt(fiberId3),
  onSequential: sequential,
  onParallel: parallel
});
var electFailures = (self2) => match4(self2, {
  onEmpty: empty16,
  onFail: (failure) => die(failure),
  onDie: (defect) => die(defect),
  onInterrupt: (fiberId3) => interrupt(fiberId3),
  onSequential: (left3, right3) => sequential(left3, right3),
  onParallel: (left3, right3) => parallel(left3, right3)
});
var flatMap6 = /* @__PURE__ */ dual(2, (self2, f) => match4(self2, {
  onEmpty: empty16,
  onFail: (error) => f(error),
  onDie: (defect) => die(defect),
  onInterrupt: (fiberId3) => interrupt(fiberId3),
  onSequential: (left3, right3) => sequential(left3, right3),
  onParallel: (left3, right3) => parallel(left3, right3)
}));
var flatten3 = (self2) => flatMap6(self2, identity);
var causeEquals = (left3, right3) => {
  let leftStack = of2(left3);
  let rightStack = of2(right3);
  while (isNonEmpty(leftStack) && isNonEmpty(rightStack)) {
    const [leftParallel, leftSequential] = pipe(headNonEmpty2(leftStack), reduce7([empty7(), empty4()], ([parallel4, sequential4], cause3) => {
      const [par2, seq2] = evaluateCause(cause3);
      return some2([pipe(parallel4, union3(par2)), pipe(sequential4, appendAll2(seq2))]);
    }));
    const [rightParallel, rightSequential] = pipe(headNonEmpty2(rightStack), reduce7([empty7(), empty4()], ([parallel4, sequential4], cause3) => {
      const [par2, seq2] = evaluateCause(cause3);
      return some2([pipe(parallel4, union3(par2)), pipe(sequential4, appendAll2(seq2))]);
    }));
    if (!equals(leftParallel, rightParallel)) {
      return false;
    }
    leftStack = leftSequential;
    rightStack = rightSequential;
  }
  return true;
};
var flattenCause = (cause3) => {
  return flattenCauseLoop(of2(cause3), empty4());
};
var flattenCauseLoop = (causes, flattened) => {
  while (1) {
    const [parallel4, sequential4] = pipe(causes, reduce([empty7(), empty4()], ([parallel5, sequential5], cause3) => {
      const [par2, seq2] = evaluateCause(cause3);
      return [pipe(parallel5, union3(par2)), pipe(sequential5, appendAll2(seq2))];
    }));
    const updated = size3(parallel4) > 0 ? pipe(flattened, prepend2(parallel4)) : flattened;
    if (isEmpty(sequential4)) {
      return reverse2(updated);
    }
    causes = sequential4;
    flattened = updated;
  }
  throw new Error(getBugErrorMessage("Cause.flattenCauseLoop"));
};
var find = /* @__PURE__ */ dual(2, (self2, pf) => {
  const stack = [self2];
  while (stack.length > 0) {
    const item = stack.pop();
    const option5 = pf(item);
    switch (option5._tag) {
      case "None": {
        switch (item._tag) {
          case OP_SEQUENTIAL:
          case OP_PARALLEL: {
            stack.push(item.right);
            stack.push(item.left);
            break;
          }
        }
        break;
      }
      case "Some": {
        return option5;
      }
    }
  }
  return none2();
});
var evaluateCause = (self2) => {
  let cause3 = self2;
  const stack = [];
  let _parallel = empty7();
  let _sequential = empty4();
  while (cause3 !== void 0) {
    switch (cause3._tag) {
      case OP_EMPTY: {
        if (stack.length === 0) {
          return [_parallel, _sequential];
        }
        cause3 = stack.pop();
        break;
      }
      case OP_FAIL: {
        _parallel = add4(_parallel, make7(cause3._tag, cause3.error));
        if (stack.length === 0) {
          return [_parallel, _sequential];
        }
        cause3 = stack.pop();
        break;
      }
      case OP_DIE: {
        _parallel = add4(_parallel, make7(cause3._tag, cause3.defect));
        if (stack.length === 0) {
          return [_parallel, _sequential];
        }
        cause3 = stack.pop();
        break;
      }
      case OP_INTERRUPT: {
        _parallel = add4(_parallel, make7(cause3._tag, cause3.fiberId));
        if (stack.length === 0) {
          return [_parallel, _sequential];
        }
        cause3 = stack.pop();
        break;
      }
      case OP_SEQUENTIAL: {
        switch (cause3.left._tag) {
          case OP_EMPTY: {
            cause3 = cause3.right;
            break;
          }
          case OP_SEQUENTIAL: {
            cause3 = sequential(cause3.left.left, sequential(cause3.left.right, cause3.right));
            break;
          }
          case OP_PARALLEL: {
            cause3 = parallel(sequential(cause3.left.left, cause3.right), sequential(cause3.left.right, cause3.right));
            break;
          }
          default: {
            _sequential = prepend2(_sequential, cause3.right);
            cause3 = cause3.left;
            break;
          }
        }
        break;
      }
      case OP_PARALLEL: {
        stack.push(cause3.right);
        cause3 = cause3.left;
        break;
      }
    }
  }
  throw new Error(getBugErrorMessage("Cause.evaluateCauseLoop"));
};
var IsInterruptedOnlyCauseReducer = {
  emptyCase: constTrue,
  failCase: constFalse,
  dieCase: constFalse,
  interruptCase: constTrue,
  sequentialCase: (_, left3, right3) => left3 && right3,
  parallelCase: (_, left3, right3) => left3 && right3
};
var OP_SEQUENTIAL_CASE = "SequentialCase";
var OP_PARALLEL_CASE = "ParallelCase";
var match4 = /* @__PURE__ */ dual(2, (self2, {
  onDie,
  onEmpty,
  onFail,
  onInterrupt: onInterrupt3,
  onParallel,
  onSequential
}) => {
  return reduceWithContext(self2, void 0, {
    emptyCase: () => onEmpty,
    failCase: (_, error) => onFail(error),
    dieCase: (_, defect) => onDie(defect),
    interruptCase: (_, fiberId3) => onInterrupt3(fiberId3),
    sequentialCase: (_, left3, right3) => onSequential(left3, right3),
    parallelCase: (_, left3, right3) => onParallel(left3, right3)
  });
});
var reduce7 = /* @__PURE__ */ dual(3, (self2, zero2, pf) => {
  let accumulator = zero2;
  let cause3 = self2;
  const causes = [];
  while (cause3 !== void 0) {
    const option5 = pf(accumulator, cause3);
    accumulator = isSome2(option5) ? option5.value : accumulator;
    switch (cause3._tag) {
      case OP_SEQUENTIAL: {
        causes.push(cause3.right);
        cause3 = cause3.left;
        break;
      }
      case OP_PARALLEL: {
        causes.push(cause3.right);
        cause3 = cause3.left;
        break;
      }
      default: {
        cause3 = void 0;
        break;
      }
    }
    if (cause3 === void 0 && causes.length > 0) {
      cause3 = causes.pop();
    }
  }
  return accumulator;
});
var reduceWithContext = /* @__PURE__ */ dual(3, (self2, context5, reducer) => {
  const input = [self2];
  const output = [];
  while (input.length > 0) {
    const cause3 = input.pop();
    switch (cause3._tag) {
      case OP_EMPTY: {
        output.push(right2(reducer.emptyCase(context5)));
        break;
      }
      case OP_FAIL: {
        output.push(right2(reducer.failCase(context5, cause3.error)));
        break;
      }
      case OP_DIE: {
        output.push(right2(reducer.dieCase(context5, cause3.defect)));
        break;
      }
      case OP_INTERRUPT: {
        output.push(right2(reducer.interruptCase(context5, cause3.fiberId)));
        break;
      }
      case OP_SEQUENTIAL: {
        input.push(cause3.right);
        input.push(cause3.left);
        output.push(left2({
          _tag: OP_SEQUENTIAL_CASE
        }));
        break;
      }
      case OP_PARALLEL: {
        input.push(cause3.right);
        input.push(cause3.left);
        output.push(left2({
          _tag: OP_PARALLEL_CASE
        }));
        break;
      }
    }
  }
  const accumulator = [];
  while (output.length > 0) {
    const either4 = output.pop();
    switch (either4._tag) {
      case "Left": {
        switch (either4.left._tag) {
          case OP_SEQUENTIAL_CASE: {
            const left3 = accumulator.pop();
            const right3 = accumulator.pop();
            const value3 = reducer.sequentialCase(context5, left3, right3);
            accumulator.push(value3);
            break;
          }
          case OP_PARALLEL_CASE: {
            const left3 = accumulator.pop();
            const right3 = accumulator.pop();
            const value3 = reducer.parallelCase(context5, left3, right3);
            accumulator.push(value3);
            break;
          }
        }
        break;
      }
      case "Right": {
        accumulator.push(either4.right);
        break;
      }
    }
  }
  if (accumulator.length === 0) {
    throw new Error("BUG: Cause.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues");
  }
  return accumulator.pop();
});
var pretty = (cause3, options) => {
  if (isInterruptedOnly(cause3)) {
    return "All fibers interrupted without errors.";
  }
  return prettyErrors(cause3).map(function(e) {
    if (options?.renderErrorCause !== true || e.cause === void 0) {
      return e.stack;
    }
    return `${e.stack} {
${renderErrorCause(e.cause, "  ")}
}`;
  }).join("\n");
};
var renderErrorCause = (cause3, prefix) => {
  const lines = cause3.stack.split("\n");
  let stack = `${prefix}[cause]: ${lines[0]}`;
  for (let i = 1, len = lines.length; i < len; i++) {
    stack += `
${prefix}${lines[i]}`;
  }
  if (cause3.cause) {
    stack += ` {
${renderErrorCause(cause3.cause, `${prefix}  `)}
${prefix}}`;
  }
  return stack;
};
var PrettyError = class _PrettyError extends globalThis.Error {
  span = void 0;
  constructor(originalError) {
    const originalErrorIsObject = typeof originalError === "object" && originalError !== null;
    const prevLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 1;
    super(prettyErrorMessage(originalError), originalErrorIsObject && "cause" in originalError && typeof originalError.cause !== "undefined" ? {
      cause: new _PrettyError(originalError.cause)
    } : void 0);
    if (this.message === "") {
      this.message = "An error has occurred";
    }
    Error.stackTraceLimit = prevLimit;
    this.name = originalError instanceof Error ? originalError.name : "Error";
    if (originalErrorIsObject) {
      if (spanSymbol in originalError) {
        this.span = originalError[spanSymbol];
      }
      Object.keys(originalError).forEach((key) => {
        if (!(key in this)) {
          this[key] = originalError[key];
        }
      });
    }
    this.stack = prettyErrorStack(`${this.name}: ${this.message}`, originalError instanceof Error && originalError.stack ? originalError.stack : "", this.span);
  }
};
var prettyErrorMessage = (u) => {
  if (typeof u === "string") {
    return u;
  }
  if (typeof u === "object" && u !== null && u instanceof Error) {
    return u.message;
  }
  try {
    if (hasProperty(u, "toString") && isFunction2(u["toString"]) && u["toString"] !== Object.prototype.toString && u["toString"] !== globalThis.Array.prototype.toString) {
      return u["toString"]();
    }
  } catch {
  }
  return JSON.stringify(u);
};
var locationRegex = /\((.*)\)/;
var spanToTrace = /* @__PURE__ */ globalValue("effect/Tracer/spanToTrace", () => /* @__PURE__ */ new WeakMap());
var prettyErrorStack = (message, stack, span4) => {
  const out = [message];
  const lines = stack.startsWith(message) ? stack.slice(message.length).split("\n") : stack.split("\n");
  for (let i = 1; i < lines.length; i++) {
    if (lines[i].includes("Generator.next")) {
      break;
    }
    if (lines[i].includes("effect_internal_function")) {
      out.pop();
      break;
    }
    out.push(lines[i].replace(/at .*effect_instruction_i.*\((.*)\)/, "at $1").replace(/EffectPrimitive\.\w+/, "<anonymous>"));
  }
  if (span4) {
    let current = span4;
    let i = 0;
    while (current && current._tag === "Span" && i < 10) {
      const stackFn = spanToTrace.get(current);
      if (typeof stackFn === "function") {
        const stack2 = stackFn();
        if (typeof stack2 === "string") {
          const locationMatch = stack2.match(locationRegex);
          const location = locationMatch ? locationMatch[1] : stack2.replace(/^at /, "");
          out.push(`    at ${current.name} (${location})`);
        } else {
          out.push(`    at ${current.name}`);
        }
      } else {
        out.push(`    at ${current.name}`);
      }
      current = getOrUndefined(current.parent);
      i++;
    }
  }
  return out.join("\n");
};
var spanSymbol = /* @__PURE__ */ Symbol.for("effect/SpanAnnotation");
var prettyErrors = (cause3) => reduceWithContext(cause3, void 0, {
  emptyCase: () => [],
  dieCase: (_, unknownError) => {
    return [new PrettyError(unknownError)];
  },
  failCase: (_, error) => {
    return [new PrettyError(error)];
  },
  interruptCase: () => [],
  parallelCase: (_, l, r) => [...l, ...r],
  sequentialCase: (_, l, r) => [...l, ...r]
});

// node_modules/effect/dist/esm/internal/opCodes/deferred.js
var OP_STATE_PENDING = "Pending";
var OP_STATE_DONE = "Done";

// node_modules/effect/dist/esm/internal/deferred.js
var DeferredSymbolKey = "effect/Deferred";
var DeferredTypeId = /* @__PURE__ */ Symbol.for(DeferredSymbolKey);
var deferredVariance = {
  /* c8 ignore next */
  _E: (_) => _,
  /* c8 ignore next */
  _A: (_) => _
};
var pending = (joiners) => {
  return {
    _tag: OP_STATE_PENDING,
    joiners
  };
};
var done = (effect2) => {
  return {
    _tag: OP_STATE_DONE,
    effect: effect2
  };
};

// node_modules/effect/dist/esm/internal/singleShotGen.js
var SingleShotGen2 = class _SingleShotGen {
  self;
  called = false;
  constructor(self2) {
    this.self = self2;
  }
  next(a) {
    return this.called ? {
      value: a,
      done: true
    } : (this.called = true, {
      value: this.self,
      done: false
    });
  }
  return(a) {
    return {
      value: a,
      done: true
    };
  }
  throw(e) {
    throw e;
  }
  [Symbol.iterator]() {
    return new _SingleShotGen(this.self);
  }
};

// node_modules/effect/dist/esm/internal/tracer.js
var TracerTypeId = /* @__PURE__ */ Symbol.for("effect/Tracer");
var make19 = (options) => ({
  [TracerTypeId]: TracerTypeId,
  ...options
});
var tracerTag = /* @__PURE__ */ GenericTag("effect/Tracer");
var spanTag = /* @__PURE__ */ GenericTag("effect/ParentSpan");
var randomHexString = /* @__PURE__ */ function() {
  const characters = "abcdef0123456789";
  const charactersLength = characters.length;
  return function(length2) {
    let result = "";
    for (let i = 0; i < length2; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  };
}();
var NativeSpan = class {
  name;
  parent;
  context;
  links;
  startTime;
  kind;
  _tag = "Span";
  spanId;
  traceId = "native";
  sampled = true;
  status;
  attributes;
  events = [];
  constructor(name, parent, context5, links, startTime, kind) {
    this.name = name;
    this.parent = parent;
    this.context = context5;
    this.links = links;
    this.startTime = startTime;
    this.kind = kind;
    this.status = {
      _tag: "Started",
      startTime
    };
    this.attributes = /* @__PURE__ */ new Map();
    this.traceId = parent._tag === "Some" ? parent.value.traceId : randomHexString(32);
    this.spanId = randomHexString(16);
  }
  end(endTime, exit4) {
    this.status = {
      _tag: "Ended",
      endTime,
      exit: exit4,
      startTime: this.status.startTime
    };
  }
  attribute(key, value3) {
    this.attributes.set(key, value3);
  }
  event(name, startTime, attributes) {
    this.events.push([name, startTime, attributes ?? {}]);
  }
};
var nativeTracer = /* @__PURE__ */ make19({
  span: (name, parent, context5, links, startTime, kind) => new NativeSpan(name, parent, context5, links, startTime, kind),
  context: (f) => f()
});
var addSpanStackTrace = (options) => {
  if (options?.captureStackTrace === false) {
    return options;
  } else if (options?.captureStackTrace !== void 0 && typeof options.captureStackTrace !== "boolean") {
    return options;
  }
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 3;
  const traceError = new Error();
  Error.stackTraceLimit = limit;
  let cache = false;
  return {
    ...options,
    captureStackTrace: () => {
      if (cache !== false) {
        return cache;
      }
      if (traceError.stack !== void 0) {
        const stack = traceError.stack.split("\n");
        if (stack[3] !== void 0) {
          cache = stack[3].trim();
          return cache;
        }
      }
    }
  };
};

// node_modules/effect/dist/esm/internal/core.js
var EffectErrorSymbolKey = "effect/EffectError";
var EffectErrorTypeId = /* @__PURE__ */ Symbol.for(EffectErrorSymbolKey);
var isEffectError = (u) => hasProperty(u, EffectErrorTypeId);
var makeEffectError = (cause3) => ({
  [EffectErrorTypeId]: EffectErrorTypeId,
  _tag: "EffectError",
  cause: cause3
});
var blocked = (blockedRequests, _continue3) => {
  const effect2 = new EffectPrimitive("Blocked");
  effect2.effect_instruction_i0 = blockedRequests;
  effect2.effect_instruction_i1 = _continue3;
  return effect2;
};
var runRequestBlock = (blockedRequests) => {
  const effect2 = new EffectPrimitive("RunBlocked");
  effect2.effect_instruction_i0 = blockedRequests;
  return effect2;
};
var EffectTypeId2 = /* @__PURE__ */ Symbol.for("effect/Effect");
var RevertFlags = class {
  patch;
  op;
  _op = OP_REVERT_FLAGS;
  constructor(patch9, op) {
    this.patch = patch9;
    this.op = op;
  }
};
var EffectPrimitive = class {
  _op;
  effect_instruction_i0 = void 0;
  effect_instruction_i1 = void 0;
  effect_instruction_i2 = void 0;
  trace = void 0;
  [EffectTypeId2] = effectVariance;
  constructor(_op) {
    this._op = _op;
  }
  [symbol2](that) {
    return this === that;
  }
  [symbol]() {
    return cached(this, random(this));
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
  toJSON() {
    return {
      _id: "Effect",
      _op: this._op,
      effect_instruction_i0: toJSON(this.effect_instruction_i0),
      effect_instruction_i1: toJSON(this.effect_instruction_i1),
      effect_instruction_i2: toJSON(this.effect_instruction_i2)
    };
  }
  toString() {
    return format(this.toJSON());
  }
  [NodeInspectSymbol]() {
    return this.toJSON();
  }
  [Symbol.iterator]() {
    return new SingleShotGen2(new YieldWrap(this));
  }
};
var EffectPrimitiveFailure = class {
  _op;
  effect_instruction_i0 = void 0;
  effect_instruction_i1 = void 0;
  effect_instruction_i2 = void 0;
  trace = void 0;
  [EffectTypeId2] = effectVariance;
  constructor(_op) {
    this._op = _op;
    this._tag = _op;
  }
  [symbol2](that) {
    return exitIsExit(that) && that._op === "Failure" && // @ts-expect-error
    equals(this.effect_instruction_i0, that.effect_instruction_i0);
  }
  [symbol]() {
    return pipe(
      // @ts-expect-error
      string(this._tag),
      // @ts-expect-error
      combine(hash(this.effect_instruction_i0)),
      cached(this)
    );
  }
  get cause() {
    return this.effect_instruction_i0;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
  toJSON() {
    return {
      _id: "Exit",
      _tag: this._op,
      cause: this.cause.toJSON()
    };
  }
  toString() {
    return format(this.toJSON());
  }
  [NodeInspectSymbol]() {
    return this.toJSON();
  }
  [Symbol.iterator]() {
    return new SingleShotGen2(new YieldWrap(this));
  }
};
var EffectPrimitiveSuccess = class {
  _op;
  effect_instruction_i0 = void 0;
  effect_instruction_i1 = void 0;
  effect_instruction_i2 = void 0;
  trace = void 0;
  [EffectTypeId2] = effectVariance;
  constructor(_op) {
    this._op = _op;
    this._tag = _op;
  }
  [symbol2](that) {
    return exitIsExit(that) && that._op === "Success" && // @ts-expect-error
    equals(this.effect_instruction_i0, that.effect_instruction_i0);
  }
  [symbol]() {
    return pipe(
      // @ts-expect-error
      string(this._tag),
      // @ts-expect-error
      combine(hash(this.effect_instruction_i0)),
      cached(this)
    );
  }
  get value() {
    return this.effect_instruction_i0;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
  toJSON() {
    return {
      _id: "Exit",
      _tag: this._op,
      value: toJSON(this.value)
    };
  }
  toString() {
    return format(this.toJSON());
  }
  [NodeInspectSymbol]() {
    return this.toJSON();
  }
  [Symbol.iterator]() {
    return new SingleShotGen2(new YieldWrap(this));
  }
};
var isEffect = (u) => hasProperty(u, EffectTypeId2);
var withFiberRuntime = (withRuntime) => {
  const effect2 = new EffectPrimitive(OP_WITH_RUNTIME);
  effect2.effect_instruction_i0 = withRuntime;
  return effect2;
};
var acquireUseRelease = /* @__PURE__ */ dual(3, (acquire, use, release) => uninterruptibleMask((restore) => flatMap7(acquire, (a) => flatMap7(exit(suspend(() => restore(use(a)))), (exit4) => {
  return suspend(() => release(a, exit4)).pipe(matchCauseEffect({
    onFailure: (cause3) => {
      switch (exit4._tag) {
        case OP_FAILURE:
          return failCause(parallel(exit4.effect_instruction_i0, cause3));
        case OP_SUCCESS:
          return failCause(cause3);
      }
    },
    onSuccess: () => exit4
  }));
}))));
var as = /* @__PURE__ */ dual(2, (self2, value3) => flatMap7(self2, () => succeed(value3)));
var asVoid = (self2) => as(self2, void 0);
var custom = function() {
  const wrapper = new EffectPrimitive(OP_COMMIT);
  switch (arguments.length) {
    case 2: {
      wrapper.effect_instruction_i0 = arguments[0];
      wrapper.commit = arguments[1];
      break;
    }
    case 3: {
      wrapper.effect_instruction_i0 = arguments[0];
      wrapper.effect_instruction_i1 = arguments[1];
      wrapper.commit = arguments[2];
      break;
    }
    case 4: {
      wrapper.effect_instruction_i0 = arguments[0];
      wrapper.effect_instruction_i1 = arguments[1];
      wrapper.effect_instruction_i2 = arguments[2];
      wrapper.commit = arguments[3];
      break;
    }
    default: {
      throw new Error(getBugErrorMessage("you're not supposed to end up here"));
    }
  }
  return wrapper;
};
var unsafeAsync = (register, blockingOn = none4) => {
  const effect2 = new EffectPrimitive(OP_ASYNC);
  let cancelerRef = void 0;
  effect2.effect_instruction_i0 = (resume2) => {
    cancelerRef = register(resume2);
  };
  effect2.effect_instruction_i1 = blockingOn;
  return cancelerRef !== void 0 ? onInterrupt(effect2, (_) => cancelerRef) : effect2;
};
var async = (register, blockingOn = none4) => {
  return custom(register, function() {
    let backingResume = void 0;
    let pendingEffect = void 0;
    function proxyResume(effect3) {
      if (backingResume) {
        backingResume(effect3);
      } else if (pendingEffect === void 0) {
        pendingEffect = effect3;
      }
    }
    const effect2 = new EffectPrimitive(OP_ASYNC);
    effect2.effect_instruction_i0 = (resume2) => {
      backingResume = resume2;
      if (pendingEffect) {
        resume2(pendingEffect);
      }
    };
    effect2.effect_instruction_i1 = blockingOn;
    let cancelerRef = void 0;
    let controllerRef = void 0;
    if (this.effect_instruction_i0.length !== 1) {
      controllerRef = new AbortController();
      cancelerRef = internalCall(() => this.effect_instruction_i0(proxyResume, controllerRef.signal));
    } else {
      cancelerRef = internalCall(() => this.effect_instruction_i0(proxyResume));
    }
    return cancelerRef || controllerRef ? onInterrupt(effect2, (_) => {
      if (controllerRef) {
        controllerRef.abort();
      }
      return cancelerRef ?? void_;
    }) : effect2;
  });
};
var catchAllCause = /* @__PURE__ */ dual(2, (self2, f) => {
  const effect2 = new EffectPrimitive(OP_ON_FAILURE);
  effect2.effect_instruction_i0 = self2;
  effect2.effect_instruction_i1 = f;
  return effect2;
});
var catchAll = /* @__PURE__ */ dual(2, (self2, f) => matchEffect(self2, {
  onFailure: f,
  onSuccess: succeed
}));
var catchIf = /* @__PURE__ */ dual(3, (self2, predicate, f) => catchAllCause(self2, (cause3) => {
  const either4 = failureOrCause(cause3);
  switch (either4._tag) {
    case "Left":
      return predicate(either4.left) ? f(either4.left) : failCause(cause3);
    case "Right":
      return failCause(either4.right);
  }
}));
var catchSome = /* @__PURE__ */ dual(2, (self2, pf) => catchAllCause(self2, (cause3) => {
  const either4 = failureOrCause(cause3);
  switch (either4._tag) {
    case "Left":
      return pipe(pf(either4.left), getOrElse(() => failCause(cause3)));
    case "Right":
      return failCause(either4.right);
  }
}));
var checkInterruptible = (f) => withFiberRuntime((_, status) => f(interruption(status.runtimeFlags)));
var spanSymbol2 = /* @__PURE__ */ Symbol.for("effect/SpanAnnotation");
var originalSymbol = /* @__PURE__ */ Symbol.for("effect/OriginalAnnotation");
var capture = (obj, span4) => {
  if (isSome2(span4)) {
    return new Proxy(obj, {
      has(target, p) {
        return p === spanSymbol2 || p === originalSymbol || p in target;
      },
      get(target, p) {
        if (p === spanSymbol2) {
          return span4.value;
        }
        if (p === originalSymbol) {
          return obj;
        }
        return target[p];
      }
    });
  }
  return obj;
};
var die2 = (defect) => isObject(defect) && !(spanSymbol2 in defect) ? withFiberRuntime((fiber) => failCause(die(capture(defect, currentSpanFromFiber(fiber))))) : failCause(die(defect));
var dieMessage = (message) => failCauseSync(() => die(new RuntimeException(message)));
var dieSync = (evaluate) => flatMap7(sync(evaluate), die2);
var either2 = (self2) => matchEffect(self2, {
  onFailure: (e) => succeed(left2(e)),
  onSuccess: (a) => succeed(right2(a))
});
var exit = (self2) => matchCause(self2, {
  onFailure: exitFailCause,
  onSuccess: exitSucceed
});
var fail2 = (error) => isObject(error) && !(spanSymbol2 in error) ? withFiberRuntime((fiber) => failCause(fail(capture(error, currentSpanFromFiber(fiber))))) : failCause(fail(error));
var failSync = (evaluate) => flatMap7(sync(evaluate), fail2);
var failCause = (cause3) => {
  const effect2 = new EffectPrimitiveFailure(OP_FAILURE);
  effect2.effect_instruction_i0 = cause3;
  return effect2;
};
var failCauseSync = (evaluate) => flatMap7(sync(evaluate), failCause);
var fiberId = /* @__PURE__ */ withFiberRuntime((state) => succeed(state.id()));
var fiberIdWith = (f) => withFiberRuntime((state) => f(state.id()));
var flatMap7 = /* @__PURE__ */ dual(2, (self2, f) => {
  const effect2 = new EffectPrimitive(OP_ON_SUCCESS);
  effect2.effect_instruction_i0 = self2;
  effect2.effect_instruction_i1 = f;
  return effect2;
});
var andThen2 = /* @__PURE__ */ dual(2, (self2, f) => flatMap7(self2, (a) => {
  const b = typeof f === "function" ? f(a) : f;
  if (isEffect(b)) {
    return b;
  } else if (isPromiseLike(b)) {
    return async((resume2) => {
      b.then((a2) => resume2(succeed(a2)), (e) => resume2(fail2(new UnknownException(e))));
    });
  }
  return succeed(b);
}));
var step2 = (self2) => {
  const effect2 = new EffectPrimitive("OnStep");
  effect2.effect_instruction_i0 = self2;
  return effect2;
};
var flatten4 = (self2) => flatMap7(self2, identity);
var flip2 = (self2) => matchEffect(self2, {
  onFailure: succeed,
  onSuccess: fail2
});
var matchCause = /* @__PURE__ */ dual(2, (self2, options) => matchCauseEffect(self2, {
  onFailure: (cause3) => succeed(options.onFailure(cause3)),
  onSuccess: (a) => succeed(options.onSuccess(a))
}));
var matchCauseEffect = /* @__PURE__ */ dual(2, (self2, options) => {
  const effect2 = new EffectPrimitive(OP_ON_SUCCESS_AND_FAILURE);
  effect2.effect_instruction_i0 = self2;
  effect2.effect_instruction_i1 = options.onFailure;
  effect2.effect_instruction_i2 = options.onSuccess;
  return effect2;
});
var matchEffect = /* @__PURE__ */ dual(2, (self2, options) => matchCauseEffect(self2, {
  onFailure: (cause3) => {
    const defects2 = defects(cause3);
    if (defects2.length > 0) {
      return failCause(electFailures(cause3));
    }
    const failures2 = failures(cause3);
    if (failures2.length > 0) {
      return options.onFailure(unsafeHead(failures2));
    }
    return failCause(cause3);
  },
  onSuccess: options.onSuccess
}));
var forEachSequential = /* @__PURE__ */ dual(2, (self2, f) => suspend(() => {
  const arr = fromIterable(self2);
  const ret = allocate(arr.length);
  let i = 0;
  return as(whileLoop({
    while: () => i < arr.length,
    body: () => f(arr[i], i),
    step: (b) => {
      ret[i++] = b;
    }
  }), ret);
}));
var forEachSequentialDiscard = /* @__PURE__ */ dual(2, (self2, f) => suspend(() => {
  const arr = fromIterable(self2);
  let i = 0;
  return whileLoop({
    while: () => i < arr.length,
    body: () => f(arr[i], i),
    step: () => {
      i++;
    }
  });
}));
var if_ = /* @__PURE__ */ dual((args) => typeof args[0] === "boolean" || isEffect(args[0]), (self2, options) => isEffect(self2) ? flatMap7(self2, (b) => b ? options.onTrue() : options.onFalse()) : self2 ? options.onTrue() : options.onFalse());
var interrupt2 = /* @__PURE__ */ flatMap7(fiberId, (fiberId3) => interruptWith(fiberId3));
var interruptWith = (fiberId3) => failCause(interrupt(fiberId3));
var interruptible2 = (self2) => {
  const effect2 = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect2.effect_instruction_i0 = enable3(Interruption);
  effect2.effect_instruction_i1 = () => self2;
  return effect2;
};
var interruptibleMask = (f) => custom(f, function() {
  const effect2 = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect2.effect_instruction_i0 = enable3(Interruption);
  effect2.effect_instruction_i1 = (oldFlags) => interruption(oldFlags) ? internalCall(() => this.effect_instruction_i0(interruptible2)) : internalCall(() => this.effect_instruction_i0(uninterruptible));
  return effect2;
});
var intoDeferred = /* @__PURE__ */ dual(2, (self2, deferred) => uninterruptibleMask((restore) => flatMap7(exit(restore(self2)), (exit4) => deferredDone(deferred, exit4))));
var map8 = /* @__PURE__ */ dual(2, (self2, f) => flatMap7(self2, (a) => sync(() => f(a))));
var mapBoth = /* @__PURE__ */ dual(2, (self2, options) => matchEffect(self2, {
  onFailure: (e) => failSync(() => options.onFailure(e)),
  onSuccess: (a) => sync(() => options.onSuccess(a))
}));
var mapError = /* @__PURE__ */ dual(2, (self2, f) => matchCauseEffect(self2, {
  onFailure: (cause3) => {
    const either4 = failureOrCause(cause3);
    switch (either4._tag) {
      case "Left": {
        return failSync(() => f(either4.left));
      }
      case "Right": {
        return failCause(either4.right);
      }
    }
  },
  onSuccess: succeed
}));
var onError = /* @__PURE__ */ dual(2, (self2, cleanup) => onExit(self2, (exit4) => exitIsSuccess(exit4) ? void_ : cleanup(exit4.effect_instruction_i0)));
var onExit = /* @__PURE__ */ dual(2, (self2, cleanup) => uninterruptibleMask((restore) => matchCauseEffect(restore(self2), {
  onFailure: (cause1) => {
    const result = exitFailCause(cause1);
    return matchCauseEffect(cleanup(result), {
      onFailure: (cause22) => exitFailCause(sequential(cause1, cause22)),
      onSuccess: () => result
    });
  },
  onSuccess: (success) => {
    const result = exitSucceed(success);
    return zipRight(cleanup(result), result);
  }
})));
var onInterrupt = /* @__PURE__ */ dual(2, (self2, cleanup) => onExit(self2, exitMatch({
  onFailure: (cause3) => isInterruptedOnly(cause3) ? asVoid(cleanup(interruptors(cause3))) : void_,
  onSuccess: () => void_
})));
var orElse = /* @__PURE__ */ dual(2, (self2, that) => attemptOrElse(self2, that, succeed));
var orDie = (self2) => orDieWith(self2, identity);
var orDieWith = /* @__PURE__ */ dual(2, (self2, f) => matchEffect(self2, {
  onFailure: (e) => die2(f(e)),
  onSuccess: succeed
}));
var partitionMap2 = (elements, f) => fromIterable(elements).reduceRight(([lefts, rights], current) => {
  const either4 = f(current);
  switch (either4._tag) {
    case "Left": {
      return [[either4.left, ...lefts], rights];
    }
    case "Right": {
      return [lefts, [either4.right, ...rights]];
    }
  }
}, [empty(), empty()]);
var runtimeFlags = /* @__PURE__ */ withFiberRuntime((_, status) => succeed(status.runtimeFlags));
var succeed = (value3) => {
  const effect2 = new EffectPrimitiveSuccess(OP_SUCCESS);
  effect2.effect_instruction_i0 = value3;
  return effect2;
};
var suspend = (effect2) => flatMap7(sync(effect2), identity);
var sync = (evaluate) => {
  const effect2 = new EffectPrimitive(OP_SYNC);
  effect2.effect_instruction_i0 = evaluate;
  return effect2;
};
var tap = /* @__PURE__ */ dual((args) => args.length === 3 || args.length === 2 && !(isObject(args[1]) && "onlyEffect" in args[1]), (self2, f) => flatMap7(self2, (a) => {
  const b = typeof f === "function" ? f(a) : f;
  if (isEffect(b)) {
    return as(b, a);
  } else if (isPromiseLike(b)) {
    return async((resume2) => {
      b.then((_) => resume2(succeed(a)), (e) => resume2(fail2(new UnknownException(e))));
    });
  }
  return succeed(a);
}));
var transplant = (f) => withFiberRuntime((state) => {
  const scopeOverride = state.getFiberRef(currentForkScopeOverride);
  const scope5 = pipe(scopeOverride, getOrElse(() => state.scope()));
  return f(fiberRefLocally(currentForkScopeOverride, some2(scope5)));
});
var attemptOrElse = /* @__PURE__ */ dual(3, (self2, that, onSuccess) => matchCauseEffect(self2, {
  onFailure: (cause3) => {
    const defects2 = defects(cause3);
    if (defects2.length > 0) {
      return failCause(getOrThrow(keepDefectsAndElectFailures(cause3)));
    }
    return that();
  },
  onSuccess
}));
var uninterruptible = (self2) => {
  const effect2 = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect2.effect_instruction_i0 = disable2(Interruption);
  effect2.effect_instruction_i1 = () => self2;
  return effect2;
};
var uninterruptibleMask = (f) => custom(f, function() {
  const effect2 = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect2.effect_instruction_i0 = disable2(Interruption);
  effect2.effect_instruction_i1 = (oldFlags) => interruption(oldFlags) ? internalCall(() => this.effect_instruction_i0(interruptible2)) : internalCall(() => this.effect_instruction_i0(uninterruptible));
  return effect2;
});
var void_ = /* @__PURE__ */ succeed(void 0);
var updateRuntimeFlags = (patch9) => {
  const effect2 = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect2.effect_instruction_i0 = patch9;
  effect2.effect_instruction_i1 = void 0;
  return effect2;
};
var whenEffect = /* @__PURE__ */ dual(2, (self2, condition) => flatMap7(condition, (b) => {
  if (b) {
    return pipe(self2, map8(some2));
  }
  return succeed(none2());
}));
var whileLoop = (options) => {
  const effect2 = new EffectPrimitive(OP_WHILE);
  effect2.effect_instruction_i0 = options.while;
  effect2.effect_instruction_i1 = options.body;
  effect2.effect_instruction_i2 = options.step;
  return effect2;
};
var withConcurrency = /* @__PURE__ */ dual(2, (self2, concurrency) => fiberRefLocally(self2, currentConcurrency, concurrency));
var withRequestBatching = /* @__PURE__ */ dual(2, (self2, requestBatching) => fiberRefLocally(self2, currentRequestBatching, requestBatching));
var withRuntimeFlags = /* @__PURE__ */ dual(2, (self2, update5) => {
  const effect2 = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect2.effect_instruction_i0 = update5;
  effect2.effect_instruction_i1 = () => self2;
  return effect2;
});
var withTracerEnabled = /* @__PURE__ */ dual(2, (effect2, enabled2) => fiberRefLocally(effect2, currentTracerEnabled, enabled2));
var withTracerTiming = /* @__PURE__ */ dual(2, (effect2, enabled2) => fiberRefLocally(effect2, currentTracerTimingEnabled, enabled2));
var yieldNow = (options) => {
  const effect2 = new EffectPrimitive(OP_YIELD);
  return typeof options?.priority !== "undefined" ? withSchedulingPriority(effect2, options.priority) : effect2;
};
var zip2 = /* @__PURE__ */ dual(2, (self2, that) => flatMap7(self2, (a) => map8(that, (b) => [a, b])));
var zipLeft = /* @__PURE__ */ dual(2, (self2, that) => flatMap7(self2, (a) => as(that, a)));
var zipRight = /* @__PURE__ */ dual(2, (self2, that) => flatMap7(self2, () => that));
var zipWith2 = /* @__PURE__ */ dual(3, (self2, that, f) => flatMap7(self2, (a) => map8(that, (b) => f(a, b))));
var never = /* @__PURE__ */ async(() => {
  const interval = setInterval(() => {
  }, 2 ** 31 - 1);
  return sync(() => clearInterval(interval));
});
var interruptFiber = (self2) => flatMap7(fiberId, (fiberId3) => pipe(self2, interruptAsFiber(fiberId3)));
var interruptAsFiber = /* @__PURE__ */ dual(2, (self2, fiberId3) => flatMap7(self2.interruptAsFork(fiberId3), () => self2.await));
var logLevelAll = {
  _tag: "All",
  syslog: 0,
  label: "ALL",
  ordinal: Number.MIN_SAFE_INTEGER,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var logLevelFatal = {
  _tag: "Fatal",
  syslog: 2,
  label: "FATAL",
  ordinal: 5e4,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var logLevelError = {
  _tag: "Error",
  syslog: 3,
  label: "ERROR",
  ordinal: 4e4,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var logLevelWarning = {
  _tag: "Warning",
  syslog: 4,
  label: "WARN",
  ordinal: 3e4,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var logLevelInfo = {
  _tag: "Info",
  syslog: 6,
  label: "INFO",
  ordinal: 2e4,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var logLevelDebug = {
  _tag: "Debug",
  syslog: 7,
  label: "DEBUG",
  ordinal: 1e4,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var logLevelTrace = {
  _tag: "Trace",
  syslog: 7,
  label: "TRACE",
  ordinal: 0,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var logLevelNone = {
  _tag: "None",
  syslog: 7,
  label: "OFF",
  ordinal: Number.MAX_SAFE_INTEGER,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var allLogLevels = [logLevelAll, logLevelTrace, logLevelDebug, logLevelInfo, logLevelWarning, logLevelError, logLevelFatal, logLevelNone];
var FiberRefSymbolKey = "effect/FiberRef";
var FiberRefTypeId = /* @__PURE__ */ Symbol.for(FiberRefSymbolKey);
var fiberRefVariance = {
  /* c8 ignore next */
  _A: (_) => _
};
var fiberRefGet = (self2) => fiberRefModify(self2, (a) => [a, a]);
var fiberRefGetWith = /* @__PURE__ */ dual(2, (self2, f) => flatMap7(fiberRefGet(self2), f));
var fiberRefSet = /* @__PURE__ */ dual(2, (self2, value3) => fiberRefModify(self2, () => [void 0, value3]));
var fiberRefModify = /* @__PURE__ */ dual(2, (self2, f) => withFiberRuntime((state) => {
  const [b, a] = f(state.getFiberRef(self2));
  state.setFiberRef(self2, a);
  return succeed(b);
}));
var RequestResolverSymbolKey = "effect/RequestResolver";
var RequestResolverTypeId = /* @__PURE__ */ Symbol.for(RequestResolverSymbolKey);
var requestResolverVariance = {
  /* c8 ignore next */
  _A: (_) => _,
  /* c8 ignore next */
  _R: (_) => _
};
var RequestResolverImpl = class _RequestResolverImpl {
  runAll;
  target;
  [RequestResolverTypeId] = requestResolverVariance;
  constructor(runAll, target) {
    this.runAll = runAll;
    this.target = target;
  }
  [symbol]() {
    return cached(this, this.target ? hash(this.target) : random(this));
  }
  [symbol2](that) {
    return this.target ? isRequestResolver(that) && equals(this.target, that.target) : this === that;
  }
  identified(...ids3) {
    return new _RequestResolverImpl(this.runAll, fromIterable2(ids3));
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var isRequestResolver = (u) => hasProperty(u, RequestResolverTypeId);
var fiberRefLocally = /* @__PURE__ */ dual(3, (use, self2, value3) => acquireUseRelease(zipLeft(fiberRefGet(self2), fiberRefSet(self2, value3)), () => use, (oldValue) => fiberRefSet(self2, oldValue)));
var fiberRefLocallyWith = /* @__PURE__ */ dual(3, (use, self2, f) => fiberRefGetWith(self2, (a) => fiberRefLocally(use, self2, f(a))));
var fiberRefUnsafeMake = (initial, options) => fiberRefUnsafeMakePatch(initial, {
  differ: update(),
  fork: options?.fork ?? identity,
  join: options?.join
});
var fiberRefUnsafeMakeHashSet = (initial) => {
  const differ3 = hashSet();
  return fiberRefUnsafeMakePatch(initial, {
    differ: differ3,
    fork: differ3.empty
  });
};
var fiberRefUnsafeMakeReadonlyArray = (initial) => {
  const differ3 = readonlyArray(update());
  return fiberRefUnsafeMakePatch(initial, {
    differ: differ3,
    fork: differ3.empty
  });
};
var fiberRefUnsafeMakeContext = (initial) => {
  const differ3 = environment();
  return fiberRefUnsafeMakePatch(initial, {
    differ: differ3,
    fork: differ3.empty
  });
};
var fiberRefUnsafeMakePatch = (initial, options) => ({
  [FiberRefTypeId]: fiberRefVariance,
  initial,
  diff: (oldValue, newValue) => options.differ.diff(oldValue, newValue),
  combine: (first2, second) => options.differ.combine(first2, second),
  patch: (patch9) => (oldValue) => options.differ.patch(patch9, oldValue),
  fork: options.fork,
  join: options.join ?? ((_, n) => n),
  pipe() {
    return pipeArguments(this, arguments);
  }
});
var fiberRefUnsafeMakeRuntimeFlags = (initial) => fiberRefUnsafeMakePatch(initial, {
  differ,
  fork: differ.empty
});
var currentContext = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentContext"), () => fiberRefUnsafeMakeContext(empty3()));
var currentSchedulingPriority = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentSchedulingPriority"), () => fiberRefUnsafeMake(0));
var currentMaxOpsBeforeYield = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentMaxOpsBeforeYield"), () => fiberRefUnsafeMake(2048));
var currentLogAnnotations = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentLogAnnotation"), () => fiberRefUnsafeMake(empty8()));
var currentLogLevel = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentLogLevel"), () => fiberRefUnsafeMake(logLevelInfo));
var currentLogSpan = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentLogSpan"), () => fiberRefUnsafeMake(empty9()));
var withSchedulingPriority = /* @__PURE__ */ dual(2, (self2, scheduler) => fiberRefLocally(self2, currentSchedulingPriority, scheduler));
var withMaxOpsBeforeYield = /* @__PURE__ */ dual(2, (self2, scheduler) => fiberRefLocally(self2, currentMaxOpsBeforeYield, scheduler));
var currentConcurrency = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentConcurrency"), () => fiberRefUnsafeMake("unbounded"));
var currentRequestBatching = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentRequestBatching"), () => fiberRefUnsafeMake(true));
var currentUnhandledErrorLogLevel = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentUnhandledErrorLogLevel"), () => fiberRefUnsafeMake(some2(logLevelDebug)));
var withUnhandledErrorLogLevel = /* @__PURE__ */ dual(2, (self2, level) => fiberRefLocally(self2, currentUnhandledErrorLogLevel, level));
var currentMetricLabels = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentMetricLabels"), () => fiberRefUnsafeMakeReadonlyArray(empty()));
var metricLabels = /* @__PURE__ */ fiberRefGet(currentMetricLabels);
var currentForkScopeOverride = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentForkScopeOverride"), () => fiberRefUnsafeMake(none2(), {
  fork: () => none2(),
  join: (parent, _) => parent
}));
var currentInterruptedCause = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentInterruptedCause"), () => fiberRefUnsafeMake(empty16, {
  fork: () => empty16,
  join: (parent, _) => parent
}));
var currentTracerEnabled = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentTracerEnabled"), () => fiberRefUnsafeMake(true));
var currentTracerTimingEnabled = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentTracerTiming"), () => fiberRefUnsafeMake(true));
var currentTracerSpanAnnotations = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentTracerSpanAnnotations"), () => fiberRefUnsafeMake(empty8()));
var currentTracerSpanLinks = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentTracerSpanLinks"), () => fiberRefUnsafeMake(empty4()));
var ScopeTypeId = /* @__PURE__ */ Symbol.for("effect/Scope");
var CloseableScopeTypeId = /* @__PURE__ */ Symbol.for("effect/CloseableScope");
var scopeAddFinalizer = (self2, finalizer) => self2.addFinalizer(() => asVoid(finalizer));
var scopeAddFinalizerExit = (self2, finalizer) => self2.addFinalizer(finalizer);
var scopeClose = (self2, exit4) => self2.close(exit4);
var scopeFork = (self2, strategy) => self2.fork(strategy);
var YieldableError = /* @__PURE__ */ function() {
  class YieldableError2 extends globalThis.Error {
    commit() {
      return fail2(this);
    }
    toJSON() {
      return {
        ...this
      };
    }
    [NodeInspectSymbol]() {
      if (this.toString !== globalThis.Error.prototype.toString) {
        return this.stack ? `${this.toString()}
${this.stack.split("\n").slice(1).join("\n")}` : this.toString();
      } else if ("Bun" in globalThis) {
        return pretty(fail(this), {
          renderErrorCause: true
        });
      }
      return this;
    }
  }
  Object.assign(YieldableError2.prototype, StructuralCommitPrototype);
  return YieldableError2;
}();
var makeException = (proto6, tag) => {
  class Base2 extends YieldableError {
    _tag = tag;
  }
  Object.assign(Base2.prototype, proto6);
  Base2.prototype.name = tag;
  return Base2;
};
var RuntimeExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/RuntimeException");
var RuntimeException = /* @__PURE__ */ makeException({
  [RuntimeExceptionTypeId]: RuntimeExceptionTypeId
}, "RuntimeException");
var InterruptedExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/InterruptedException");
var InterruptedException = /* @__PURE__ */ makeException({
  [InterruptedExceptionTypeId]: InterruptedExceptionTypeId
}, "InterruptedException");
var isInterruptedException = (u) => hasProperty(u, InterruptedExceptionTypeId);
var IllegalArgumentExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/IllegalArgument");
var IllegalArgumentException = /* @__PURE__ */ makeException({
  [IllegalArgumentExceptionTypeId]: IllegalArgumentExceptionTypeId
}, "IllegalArgumentException");
var NoSuchElementExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/NoSuchElement");
var NoSuchElementException = /* @__PURE__ */ makeException({
  [NoSuchElementExceptionTypeId]: NoSuchElementExceptionTypeId
}, "NoSuchElementException");
var isNoSuchElementException = (u) => hasProperty(u, NoSuchElementExceptionTypeId);
var InvalidPubSubCapacityExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/InvalidPubSubCapacityException");
var InvalidPubSubCapacityException = /* @__PURE__ */ makeException({
  [InvalidPubSubCapacityExceptionTypeId]: InvalidPubSubCapacityExceptionTypeId
}, "InvalidPubSubCapacityException");
var ExceededCapacityExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/ExceededCapacityException");
var ExceededCapacityException = /* @__PURE__ */ makeException({
  [ExceededCapacityExceptionTypeId]: ExceededCapacityExceptionTypeId
}, "ExceededCapacityException");
var TimeoutExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/Timeout");
var TimeoutException = /* @__PURE__ */ makeException({
  [TimeoutExceptionTypeId]: TimeoutExceptionTypeId
}, "TimeoutException");
var timeoutExceptionFromDuration = (duration3) => new TimeoutException(`Operation timed out before the specified duration of '${format2(duration3)}' elapsed`);
var UnknownExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/UnknownException");
var UnknownException = /* @__PURE__ */ function() {
  class UnknownException2 extends YieldableError {
    cause;
    _tag = "UnknownException";
    error;
    constructor(cause3, message) {
      super(message ?? "An unknown error occurred", {
        cause: cause3
      });
      this.cause = cause3;
      this.error = cause3;
    }
  }
  Object.assign(UnknownException2.prototype, {
    [UnknownExceptionTypeId]: UnknownExceptionTypeId,
    name: "UnknownException"
  });
  return UnknownException2;
}();
var exitIsExit = (u) => isEffect(u) && "_tag" in u && (u._tag === "Success" || u._tag === "Failure");
var exitIsFailure = (self2) => self2._tag === "Failure";
var exitIsSuccess = (self2) => self2._tag === "Success";
var exitAs = /* @__PURE__ */ dual(2, (self2, value3) => {
  switch (self2._tag) {
    case OP_FAILURE: {
      return exitFailCause(self2.effect_instruction_i0);
    }
    case OP_SUCCESS: {
      return exitSucceed(value3);
    }
  }
});
var exitAsVoid = (self2) => exitAs(self2, void 0);
var exitCollectAll = (exits, options) => exitCollectAllInternal(exits, options?.parallel ? parallel : sequential);
var exitDie = (defect) => exitFailCause(die(defect));
var exitFail = (error) => exitFailCause(fail(error));
var exitFailCause = (cause3) => {
  const effect2 = new EffectPrimitiveFailure(OP_FAILURE);
  effect2.effect_instruction_i0 = cause3;
  return effect2;
};
var exitFlatMap = /* @__PURE__ */ dual(2, (self2, f) => {
  switch (self2._tag) {
    case OP_FAILURE: {
      return exitFailCause(self2.effect_instruction_i0);
    }
    case OP_SUCCESS: {
      return f(self2.effect_instruction_i0);
    }
  }
});
var exitFlatten = (self2) => pipe(self2, exitFlatMap(identity));
var exitInterrupt = (fiberId3) => exitFailCause(interrupt(fiberId3));
var exitMap = /* @__PURE__ */ dual(2, (self2, f) => {
  switch (self2._tag) {
    case OP_FAILURE:
      return exitFailCause(self2.effect_instruction_i0);
    case OP_SUCCESS:
      return exitSucceed(f(self2.effect_instruction_i0));
  }
});
var exitMatch = /* @__PURE__ */ dual(2, (self2, {
  onFailure,
  onSuccess
}) => {
  switch (self2._tag) {
    case OP_FAILURE:
      return onFailure(self2.effect_instruction_i0);
    case OP_SUCCESS:
      return onSuccess(self2.effect_instruction_i0);
  }
});
var exitMatchEffect = /* @__PURE__ */ dual(2, (self2, {
  onFailure,
  onSuccess
}) => {
  switch (self2._tag) {
    case OP_FAILURE:
      return onFailure(self2.effect_instruction_i0);
    case OP_SUCCESS:
      return onSuccess(self2.effect_instruction_i0);
  }
});
var exitSucceed = (value3) => {
  const effect2 = new EffectPrimitiveSuccess(OP_SUCCESS);
  effect2.effect_instruction_i0 = value3;
  return effect2;
};
var exitVoid = /* @__PURE__ */ exitSucceed(void 0);
var exitZipWith = /* @__PURE__ */ dual(3, (self2, that, {
  onFailure,
  onSuccess
}) => {
  switch (self2._tag) {
    case OP_FAILURE: {
      switch (that._tag) {
        case OP_SUCCESS:
          return exitFailCause(self2.effect_instruction_i0);
        case OP_FAILURE: {
          return exitFailCause(onFailure(self2.effect_instruction_i0, that.effect_instruction_i0));
        }
      }
    }
    case OP_SUCCESS: {
      switch (that._tag) {
        case OP_SUCCESS:
          return exitSucceed(onSuccess(self2.effect_instruction_i0, that.effect_instruction_i0));
        case OP_FAILURE:
          return exitFailCause(that.effect_instruction_i0);
      }
    }
  }
});
var exitCollectAllInternal = (exits, combineCauses) => {
  const list = fromIterable2(exits);
  if (!isNonEmpty(list)) {
    return none2();
  }
  return pipe(tailNonEmpty2(list), reduce(pipe(headNonEmpty2(list), exitMap(of2)), (accumulator, current) => pipe(accumulator, exitZipWith(current, {
    onSuccess: (list2, value3) => pipe(list2, prepend2(value3)),
    onFailure: combineCauses
  }))), exitMap(reverse2), exitMap((chunk4) => toReadonlyArray(chunk4)), some2);
};
var deferredUnsafeMake = (fiberId3) => ({
  [DeferredTypeId]: deferredVariance,
  state: make12(pending([])),
  blockingOn: fiberId3,
  pipe() {
    return pipeArguments(this, arguments);
  }
});
var deferredMake = () => flatMap7(fiberId, (id) => deferredMakeAs(id));
var deferredMakeAs = (fiberId3) => sync(() => deferredUnsafeMake(fiberId3));
var deferredAwait = (self2) => async((resume2) => {
  const state = get6(self2.state);
  switch (state._tag) {
    case OP_STATE_DONE: {
      return resume2(state.effect);
    }
    case OP_STATE_PENDING: {
      state.joiners.push(resume2);
      return deferredInterruptJoiner(self2, resume2);
    }
  }
}, self2.blockingOn);
var deferredComplete = /* @__PURE__ */ dual(2, (self2, effect2) => intoDeferred(effect2, self2));
var deferredCompleteWith = /* @__PURE__ */ dual(2, (self2, effect2) => sync(() => {
  const state = get6(self2.state);
  switch (state._tag) {
    case OP_STATE_DONE: {
      return false;
    }
    case OP_STATE_PENDING: {
      set2(self2.state, done(effect2));
      for (let i = 0, len = state.joiners.length; i < len; i++) {
        state.joiners[i](effect2);
      }
      return true;
    }
  }
}));
var deferredDone = /* @__PURE__ */ dual(2, (self2, exit4) => deferredCompleteWith(self2, exit4));
var deferredFailCause = /* @__PURE__ */ dual(2, (self2, cause3) => deferredCompleteWith(self2, failCause(cause3)));
var deferredInterrupt = (self2) => flatMap7(fiberId, (fiberId3) => deferredCompleteWith(self2, interruptWith(fiberId3)));
var deferredSucceed = /* @__PURE__ */ dual(2, (self2, value3) => deferredCompleteWith(self2, succeed(value3)));
var deferredUnsafeDone = (self2, effect2) => {
  const state = get6(self2.state);
  if (state._tag === OP_STATE_PENDING) {
    set2(self2.state, done(effect2));
    for (let i = 0, len = state.joiners.length; i < len; i++) {
      state.joiners[i](effect2);
    }
  }
};
var deferredInterruptJoiner = (self2, joiner) => sync(() => {
  const state = get6(self2.state);
  if (state._tag === OP_STATE_PENDING) {
    const index = state.joiners.indexOf(joiner);
    if (index >= 0) {
      state.joiners.splice(index, 1);
    }
  }
});
var constContext = /* @__PURE__ */ fiberRefGet(currentContext);
var context = () => constContext;
var contextWithEffect = (f) => flatMap7(context(), f);
var provideContext = /* @__PURE__ */ dual(2, (self2, context5) => fiberRefLocally(currentContext, context5)(self2));
var provideSomeContext = /* @__PURE__ */ dual(2, (self2, context5) => fiberRefLocallyWith(currentContext, (parent) => merge3(parent, context5))(self2));
var mapInputContext = /* @__PURE__ */ dual(2, (self2, f) => contextWithEffect((context5) => provideContext(self2, f(context5))));
var currentSpanFromFiber = (fiber) => {
  const span4 = fiber.getFiberRef(currentContext).unsafeMap.get(spanTag.key);
  return span4 !== void 0 && span4._tag === "Span" ? some2(span4) : none2();
};
var NoopSpanProto = {
  _tag: "Span",
  spanId: "noop",
  traceId: "noop",
  name: "noop",
  sampled: false,
  parent: /* @__PURE__ */ none2(),
  context: /* @__PURE__ */ empty3(),
  status: {
    _tag: "Ended",
    startTime: /* @__PURE__ */ BigInt(0),
    endTime: /* @__PURE__ */ BigInt(0),
    exit: exitVoid
  },
  attributes: /* @__PURE__ */ new Map(),
  links: [],
  kind: "internal",
  attribute() {
  },
  event() {
  },
  end() {
  }
};
var noopSpan = (name) => {
  const span4 = Object.create(NoopSpanProto);
  span4.name = name;
  return span4;
};

// node_modules/effect/dist/esm/Deferred.js
var _await = deferredAwait;
var done2 = deferredDone;
var interrupt3 = deferredInterrupt;
var unsafeMake4 = deferredUnsafeMake;

// node_modules/effect/dist/esm/Exit.js
var isFailure = exitIsFailure;
var flatten5 = exitFlatten;
var succeed2 = exitSucceed;

// node_modules/effect/dist/esm/MutableHashMap.js
var TypeId8 = /* @__PURE__ */ Symbol.for("effect/MutableHashMap");
var MutableHashMapProto = {
  [TypeId8]: TypeId8,
  [Symbol.iterator]() {
    return new MutableHashMapIterator(this);
  },
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "MutableHashMap",
      values: Array.from(this).map(toJSON)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var MutableHashMapIterator = class _MutableHashMapIterator {
  self;
  referentialIterator;
  bucketIterator;
  constructor(self2) {
    this.self = self2;
    this.referentialIterator = self2.referential[Symbol.iterator]();
  }
  next() {
    if (this.bucketIterator !== void 0) {
      return this.bucketIterator.next();
    }
    const result = this.referentialIterator.next();
    if (result.done) {
      this.bucketIterator = new BucketIterator(this.self.buckets.values());
      return this.next();
    }
    return result;
  }
  [Symbol.iterator]() {
    return new _MutableHashMapIterator(this.self);
  }
};
var BucketIterator = class {
  backing;
  constructor(backing) {
    this.backing = backing;
  }
  currentBucket;
  next() {
    if (this.currentBucket === void 0) {
      const result2 = this.backing.next();
      if (result2.done) {
        return result2;
      }
      this.currentBucket = result2.value[Symbol.iterator]();
    }
    const result = this.currentBucket.next();
    if (result.done) {
      this.currentBucket = void 0;
      return this.next();
    }
    return result;
  }
};
var empty17 = () => {
  const self2 = Object.create(MutableHashMapProto);
  self2.referential = /* @__PURE__ */ new Map();
  self2.buckets = /* @__PURE__ */ new Map();
  self2.bucketsSize = 0;
  return self2;
};
var get8 = /* @__PURE__ */ dual(2, (self2, key) => {
  if (isEqual(key) === false) {
    return self2.referential.has(key) ? some2(self2.referential.get(key)) : none2();
  }
  const hash2 = key[symbol]();
  const bucket = self2.buckets.get(hash2);
  if (bucket === void 0) {
    return none2();
  }
  return getFromBucket(self2, bucket, key);
});
var getFromBucket = (self2, bucket, key, remove9 = false) => {
  for (let i = 0, len = bucket.length; i < len; i++) {
    if (key[symbol2](bucket[i][0])) {
      const value3 = bucket[i][1];
      if (remove9) {
        bucket.splice(i, 1);
        self2.bucketsSize--;
      }
      return some2(value3);
    }
  }
  return none2();
};
var has4 = /* @__PURE__ */ dual(2, (self2, key) => isSome2(get8(self2, key)));
var set4 = /* @__PURE__ */ dual(3, (self2, key, value3) => {
  if (isEqual(key) === false) {
    self2.referential.set(key, value3);
    return self2;
  }
  const hash2 = key[symbol]();
  const bucket = self2.buckets.get(hash2);
  if (bucket === void 0) {
    self2.buckets.set(hash2, [[key, value3]]);
    self2.bucketsSize++;
    return self2;
  }
  removeFromBucket(self2, bucket, key);
  bucket.push([key, value3]);
  self2.bucketsSize++;
  return self2;
});
var removeFromBucket = (self2, bucket, key) => {
  for (let i = 0, len = bucket.length; i < len; i++) {
    if (key[symbol2](bucket[i][0])) {
      bucket.splice(i, 1);
      self2.bucketsSize--;
      return;
    }
  }
};
var remove5 = /* @__PURE__ */ dual(2, (self2, key) => {
  if (isEqual(key) === false) {
    self2.referential.delete(key);
    return self2;
  }
  const hash2 = key[symbol]();
  const bucket = self2.buckets.get(hash2);
  if (bucket === void 0) {
    return self2;
  }
  removeFromBucket(self2, bucket, key);
  if (bucket.length === 0) {
    self2.buckets.delete(hash2);
  }
  return self2;
});
var size5 = (self2) => {
  return self2.referential.size + self2.bucketsSize;
};

// node_modules/effect/dist/esm/MutableList.js
var TypeId9 = /* @__PURE__ */ Symbol.for("effect/MutableList");
var MutableListProto = {
  [TypeId9]: TypeId9,
  [Symbol.iterator]() {
    let done7 = false;
    let head5 = this.head;
    return {
      next() {
        if (done7) {
          return this.return();
        }
        if (head5 == null) {
          done7 = true;
          return this.return();
        }
        const value3 = head5.value;
        head5 = head5.next;
        return {
          done: done7,
          value: value3
        };
      },
      return(value3) {
        if (!done7) {
          done7 = true;
        }
        return {
          done: true,
          value: value3
        };
      }
    };
  },
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "MutableList",
      values: Array.from(this).map(toJSON)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var makeNode = (value3) => ({
  value: value3,
  removed: false,
  prev: void 0,
  next: void 0
});
var empty18 = () => {
  const list = Object.create(MutableListProto);
  list.head = void 0;
  list.tail = void 0;
  list._length = 0;
  return list;
};
var isEmpty6 = (self2) => length(self2) === 0;
var length = (self2) => self2._length;
var append3 = /* @__PURE__ */ dual(2, (self2, value3) => {
  const node = makeNode(value3);
  if (self2.head === void 0) {
    self2.head = node;
  }
  if (self2.tail === void 0) {
    self2.tail = node;
  } else {
    self2.tail.next = node;
    node.prev = self2.tail;
    self2.tail = node;
  }
  ;
  self2._length += 1;
  return self2;
});
var shift = (self2) => {
  const head5 = self2.head;
  if (head5 !== void 0) {
    remove6(self2, head5);
    return head5.value;
  }
  return void 0;
};
var remove6 = (self2, node) => {
  if (node.removed) {
    return;
  }
  node.removed = true;
  if (node.prev !== void 0 && node.next !== void 0) {
    node.prev.next = node.next;
    node.next.prev = node.prev;
  } else if (node.prev !== void 0) {
    self2.tail = node.prev;
    node.prev.next = void 0;
  } else if (node.next !== void 0) {
    self2.head = node.next;
    node.next.prev = void 0;
  } else {
    self2.tail = void 0;
    self2.head = void 0;
  }
  if (self2._length > 0) {
    ;
    self2._length -= 1;
  }
};

// node_modules/effect/dist/esm/MutableQueue.js
var TypeId10 = /* @__PURE__ */ Symbol.for("effect/MutableQueue");
var EmptyMutableQueue = /* @__PURE__ */ Symbol.for("effect/mutable/MutableQueue/Empty");
var MutableQueueProto = {
  [TypeId10]: TypeId10,
  [Symbol.iterator]() {
    return Array.from(this.queue)[Symbol.iterator]();
  },
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "MutableQueue",
      values: Array.from(this).map(toJSON)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var make20 = (capacity) => {
  const queue = Object.create(MutableQueueProto);
  queue.queue = empty18();
  queue.capacity = capacity;
  return queue;
};
var unbounded = () => make20(void 0);
var offer = /* @__PURE__ */ dual(2, (self2, value3) => {
  const queueLength = length(self2.queue);
  if (self2.capacity !== void 0 && queueLength === self2.capacity) {
    return false;
  }
  append3(value3)(self2.queue);
  return true;
});
var poll = /* @__PURE__ */ dual(2, (self2, def) => {
  if (isEmpty6(self2.queue)) {
    return def;
  }
  return shift(self2.queue);
});

// node_modules/effect/dist/esm/internal/clock.js
var ClockSymbolKey = "effect/Clock";
var ClockTypeId = /* @__PURE__ */ Symbol.for(ClockSymbolKey);
var clockTag = /* @__PURE__ */ GenericTag("effect/Clock");
var MAX_TIMER_MILLIS = 2 ** 31 - 1;
var globalClockScheduler = {
  unsafeSchedule(task, duration3) {
    const millis2 = toMillis(duration3);
    if (millis2 > MAX_TIMER_MILLIS) {
      return constFalse;
    }
    let completed = false;
    const handle = setTimeout(() => {
      completed = true;
      task();
    }, millis2);
    return () => {
      clearTimeout(handle);
      return !completed;
    };
  }
};
var performanceNowNanos = /* @__PURE__ */ function() {
  const bigint1e62 = /* @__PURE__ */ BigInt(1e6);
  if (typeof performance === "undefined") {
    return () => BigInt(Date.now()) * bigint1e62;
  } else if (typeof performance.timeOrigin === "number" && performance.timeOrigin === 0) {
    return () => BigInt(Math.round(performance.now() * 1e6));
  }
  const origin = /* @__PURE__ */ BigInt(/* @__PURE__ */ Date.now()) * bigint1e62 - /* @__PURE__ */ BigInt(/* @__PURE__ */ Math.round(/* @__PURE__ */ performance.now() * 1e6));
  return () => origin + BigInt(Math.round(performance.now() * 1e6));
}();
var processOrPerformanceNow = /* @__PURE__ */ function() {
  const processHrtime = typeof process === "object" && "hrtime" in process && typeof process.hrtime.bigint === "function" ? process.hrtime : void 0;
  if (!processHrtime) {
    return performanceNowNanos;
  }
  const origin = /* @__PURE__ */ performanceNowNanos() - /* @__PURE__ */ processHrtime.bigint();
  return () => origin + processHrtime.bigint();
}();
var ClockImpl = class {
  [ClockTypeId] = ClockTypeId;
  unsafeCurrentTimeMillis() {
    return Date.now();
  }
  unsafeCurrentTimeNanos() {
    return processOrPerformanceNow();
  }
  currentTimeMillis = /* @__PURE__ */ sync(() => this.unsafeCurrentTimeMillis());
  currentTimeNanos = /* @__PURE__ */ sync(() => this.unsafeCurrentTimeNanos());
  scheduler() {
    return succeed(globalClockScheduler);
  }
  sleep(duration3) {
    return async((resume2) => {
      const canceler = globalClockScheduler.unsafeSchedule(() => resume2(void_), duration3);
      return asVoid(sync(canceler));
    });
  }
};
var make21 = () => new ClockImpl();

// node_modules/effect/dist/esm/Number.js
var Order = number2;

// node_modules/effect/dist/esm/RegExp.js
var escape = (string4) => string4.replace(/[/\\^$*+?.()|[\]{}]/g, "\\$&");

// node_modules/effect/dist/esm/internal/opCodes/configError.js
var OP_AND = "And";
var OP_OR = "Or";
var OP_INVALID_DATA = "InvalidData";
var OP_MISSING_DATA = "MissingData";
var OP_SOURCE_UNAVAILABLE = "SourceUnavailable";
var OP_UNSUPPORTED = "Unsupported";

// node_modules/effect/dist/esm/internal/configError.js
var ConfigErrorSymbolKey = "effect/ConfigError";
var ConfigErrorTypeId = /* @__PURE__ */ Symbol.for(ConfigErrorSymbolKey);
var proto2 = {
  _tag: "ConfigError",
  [ConfigErrorTypeId]: ConfigErrorTypeId
};
var And = (self2, that) => {
  const error = Object.create(proto2);
  error._op = OP_AND;
  error.left = self2;
  error.right = that;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      return `${this.left} and ${this.right}`;
    }
  });
  return error;
};
var Or = (self2, that) => {
  const error = Object.create(proto2);
  error._op = OP_OR;
  error.left = self2;
  error.right = that;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      return `${this.left} or ${this.right}`;
    }
  });
  return error;
};
var InvalidData = (path, message, options = {
  pathDelim: "."
}) => {
  const error = Object.create(proto2);
  error._op = OP_INVALID_DATA;
  error.path = path;
  error.message = message;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      const path2 = pipe(this.path, join(options.pathDelim));
      return `(Invalid data at ${path2}: "${this.message}")`;
    }
  });
  return error;
};
var MissingData = (path, message, options = {
  pathDelim: "."
}) => {
  const error = Object.create(proto2);
  error._op = OP_MISSING_DATA;
  error.path = path;
  error.message = message;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      const path2 = pipe(this.path, join(options.pathDelim));
      return `(Missing data at ${path2}: "${this.message}")`;
    }
  });
  return error;
};
var SourceUnavailable = (path, message, cause3, options = {
  pathDelim: "."
}) => {
  const error = Object.create(proto2);
  error._op = OP_SOURCE_UNAVAILABLE;
  error.path = path;
  error.message = message;
  error.cause = cause3;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      const path2 = pipe(this.path, join(options.pathDelim));
      return `(Source unavailable at ${path2}: "${this.message}")`;
    }
  });
  return error;
};
var Unsupported = (path, message, options = {
  pathDelim: "."
}) => {
  const error = Object.create(proto2);
  error._op = OP_UNSUPPORTED;
  error.path = path;
  error.message = message;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      const path2 = pipe(this.path, join(options.pathDelim));
      return `(Unsupported operation at ${path2}: "${this.message}")`;
    }
  });
  return error;
};
var isConfigError = (u) => hasProperty(u, ConfigErrorTypeId);
var isAnd = (self2) => self2._op === OP_AND;
var isOr = (self2) => self2._op === OP_OR;
var isInvalidData = (self2) => self2._op === OP_INVALID_DATA;
var isMissingData = (self2) => self2._op === OP_MISSING_DATA;
var isSourceUnavailable = (self2) => self2._op === OP_SOURCE_UNAVAILABLE;
var isUnsupported = (self2) => self2._op === OP_UNSUPPORTED;
var prefixed = /* @__PURE__ */ dual(2, (self2, prefix) => {
  switch (self2._op) {
    case OP_AND: {
      return And(prefixed(self2.left, prefix), prefixed(self2.right, prefix));
    }
    case OP_OR: {
      return Or(prefixed(self2.left, prefix), prefixed(self2.right, prefix));
    }
    case OP_INVALID_DATA: {
      return InvalidData([...prefix, ...self2.path], self2.message);
    }
    case OP_MISSING_DATA: {
      return MissingData([...prefix, ...self2.path], self2.message);
    }
    case OP_SOURCE_UNAVAILABLE: {
      return SourceUnavailable([...prefix, ...self2.path], self2.message, self2.cause);
    }
    case OP_UNSUPPORTED: {
      return Unsupported([...prefix, ...self2.path], self2.message);
    }
  }
});
var IsMissingDataOnlyReducer = {
  andCase: (_, left3, right3) => left3 && right3,
  orCase: (_, left3, right3) => left3 && right3,
  invalidDataCase: constFalse,
  missingDataCase: constTrue,
  sourceUnavailableCase: constFalse,
  unsupportedCase: constFalse
};
var reduceWithContext2 = /* @__PURE__ */ dual(3, (self2, context5, reducer) => {
  const input = [self2];
  const output = [];
  while (input.length > 0) {
    const error = input.pop();
    switch (error._op) {
      case OP_AND: {
        input.push(error.right);
        input.push(error.left);
        output.push(left2({
          _op: "AndCase"
        }));
        break;
      }
      case OP_OR: {
        input.push(error.right);
        input.push(error.left);
        output.push(left2({
          _op: "OrCase"
        }));
        break;
      }
      case OP_INVALID_DATA: {
        output.push(right2(reducer.invalidDataCase(context5, error.path, error.message)));
        break;
      }
      case OP_MISSING_DATA: {
        output.push(right2(reducer.missingDataCase(context5, error.path, error.message)));
        break;
      }
      case OP_SOURCE_UNAVAILABLE: {
        output.push(right2(reducer.sourceUnavailableCase(context5, error.path, error.message, error.cause)));
        break;
      }
      case OP_UNSUPPORTED: {
        output.push(right2(reducer.unsupportedCase(context5, error.path, error.message)));
        break;
      }
    }
  }
  const accumulator = [];
  while (output.length > 0) {
    const either4 = output.pop();
    switch (either4._op) {
      case "Left": {
        switch (either4.left._op) {
          case "AndCase": {
            const left3 = accumulator.pop();
            const right3 = accumulator.pop();
            const value3 = reducer.andCase(context5, left3, right3);
            accumulator.push(value3);
            break;
          }
          case "OrCase": {
            const left3 = accumulator.pop();
            const right3 = accumulator.pop();
            const value3 = reducer.orCase(context5, left3, right3);
            accumulator.push(value3);
            break;
          }
        }
        break;
      }
      case "Right": {
        accumulator.push(either4.right);
        break;
      }
    }
  }
  if (accumulator.length === 0) {
    throw new Error("BUG: ConfigError.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues");
  }
  return accumulator.pop();
});
var isMissingDataOnly = (self2) => reduceWithContext2(self2, void 0, IsMissingDataOnlyReducer);

// node_modules/effect/dist/esm/internal/configProvider/pathPatch.js
var empty19 = {
  _tag: "Empty"
};
var andThen3 = /* @__PURE__ */ dual(2, (self2, that) => ({
  _tag: "AndThen",
  first: self2,
  second: that
}));
var mapName = /* @__PURE__ */ dual(2, (self2, f) => andThen3(self2, {
  _tag: "MapName",
  f
}));
var nested = /* @__PURE__ */ dual(2, (self2, name) => andThen3(self2, {
  _tag: "Nested",
  name
}));
var unnested = /* @__PURE__ */ dual(2, (self2, name) => andThen3(self2, {
  _tag: "Unnested",
  name
}));
var patch5 = /* @__PURE__ */ dual(2, (path, patch9) => {
  let input = of3(patch9);
  let output = path;
  while (isCons(input)) {
    const patch10 = input.head;
    switch (patch10._tag) {
      case "Empty": {
        input = input.tail;
        break;
      }
      case "AndThen": {
        input = cons(patch10.first, cons(patch10.second, input.tail));
        break;
      }
      case "MapName": {
        output = map2(output, patch10.f);
        input = input.tail;
        break;
      }
      case "Nested": {
        output = prepend(output, patch10.name);
        input = input.tail;
        break;
      }
      case "Unnested": {
        const containsName = pipe(head(output), contains(patch10.name));
        if (containsName) {
          output = tailNonEmpty(output);
          input = input.tail;
        } else {
          return left2(MissingData(output, `Expected ${patch10.name} to be in path in ConfigProvider#unnested`));
        }
        break;
      }
    }
  }
  return right2(output);
});

// node_modules/effect/dist/esm/internal/opCodes/config.js
var OP_CONSTANT = "Constant";
var OP_FAIL2 = "Fail";
var OP_FALLBACK = "Fallback";
var OP_DESCRIBED = "Described";
var OP_LAZY = "Lazy";
var OP_MAP_OR_FAIL = "MapOrFail";
var OP_NESTED = "Nested";
var OP_PRIMITIVE = "Primitive";
var OP_SEQUENCE = "Sequence";
var OP_HASHMAP = "HashMap";
var OP_ZIP_WITH = "ZipWith";

// node_modules/effect/dist/esm/internal/string-utils.js
var lowerCase = (str) => str.toLowerCase();
var upperCase = (str) => str.toUpperCase();
var replace = (input, re, value3) => re instanceof RegExp ? input.replace(re, value3) : re.reduce((input2, re2) => input2.replace(re2, value3), input);
var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
var noCase = (input, options = {}) => {
  const {
    delimiter = " ",
    splitRegexp = DEFAULT_SPLIT_REGEXP,
    stripRegexp = DEFAULT_STRIP_REGEXP,
    transform: transform2 = lowerCase
  } = options;
  const result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
  let start3 = 0;
  let end3 = result.length;
  while (result.charAt(start3) === "\0") {
    start3++;
  }
  while (result.charAt(end3 - 1) === "\0") {
    end3--;
  }
  return result.slice(start3, end3).split("\0").map(transform2).join(delimiter);
};
var constantCase = (input, options) => noCase(input, {
  delimiter: "_",
  transform: upperCase,
  ...options
});
var kebabCase = (input, options) => noCase(input, {
  delimiter: "-",
  ...options
});
var snakeCase = (input, options) => noCase(input, {
  delimiter: "_",
  ...options
});

// node_modules/effect/dist/esm/internal/configProvider.js
var concat = (l, r) => [...l, ...r];
var ConfigProviderSymbolKey = "effect/ConfigProvider";
var ConfigProviderTypeId = /* @__PURE__ */ Symbol.for(ConfigProviderSymbolKey);
var configProviderTag = /* @__PURE__ */ GenericTag("effect/ConfigProvider");
var FlatConfigProviderSymbolKey = "effect/ConfigProviderFlat";
var FlatConfigProviderTypeId = /* @__PURE__ */ Symbol.for(FlatConfigProviderSymbolKey);
var make22 = (options) => ({
  [ConfigProviderTypeId]: ConfigProviderTypeId,
  pipe() {
    return pipeArguments(this, arguments);
  },
  ...options
});
var makeFlat = (options) => ({
  [FlatConfigProviderTypeId]: FlatConfigProviderTypeId,
  patch: options.patch,
  load: (path, config2, split = true) => options.load(path, config2, split),
  enumerateChildren: options.enumerateChildren
});
var fromFlat = (flat) => make22({
  load: (config2) => flatMap7(fromFlatLoop(flat, empty(), config2, false), (chunk4) => match2(head(chunk4), {
    onNone: () => fail2(MissingData(empty(), `Expected a single value having structure: ${config2}`)),
    onSome: succeed
  })),
  flattened: flat
});
var fromEnv = (config2) => {
  const {
    pathDelim,
    seqDelim
  } = Object.assign({}, {
    pathDelim: "_",
    seqDelim: ","
  }, config2);
  const makePathString = (path) => pipe(path, join(pathDelim));
  const unmakePathString = (pathString) => pathString.split(pathDelim);
  const getEnv = () => typeof process !== "undefined" && "env" in process && typeof process.env === "object" ? process.env : {};
  const load = (path, primitive3, split = true) => {
    const pathString = makePathString(path);
    const current = getEnv();
    const valueOpt = pathString in current ? some2(current[pathString]) : none2();
    return pipe(valueOpt, mapError(() => MissingData(path, `Expected ${pathString} to exist in the process context`)), flatMap7((value3) => parsePrimitive(value3, path, primitive3, seqDelim, split)));
  };
  const enumerateChildren = (path) => sync(() => {
    const current = getEnv();
    const keys5 = Object.keys(current);
    const keyPaths = keys5.map((value3) => unmakePathString(value3.toUpperCase()));
    const filteredKeyPaths = keyPaths.filter((keyPath) => {
      for (let i = 0; i < path.length; i++) {
        const pathComponent = pipe(path, unsafeGet(i));
        const currentElement = keyPath[i];
        if (currentElement === void 0 || pathComponent !== currentElement) {
          return false;
        }
      }
      return true;
    }).flatMap((keyPath) => keyPath.slice(path.length, path.length + 1));
    return fromIterable5(filteredKeyPaths);
  });
  return fromFlat(makeFlat({
    load,
    enumerateChildren,
    patch: empty19
  }));
};
var fromMap = (map18, config2) => {
  const {
    pathDelim,
    seqDelim
  } = Object.assign({
    seqDelim: ",",
    pathDelim: "."
  }, config2);
  const makePathString = (path) => pipe(path, join(pathDelim));
  const unmakePathString = (pathString) => pathString.split(pathDelim);
  const mapWithIndexSplit = splitIndexInKeys(map18, (str) => unmakePathString(str), makePathString);
  const load = (path, primitive3, split = true) => {
    const pathString = makePathString(path);
    const valueOpt = mapWithIndexSplit.has(pathString) ? some2(mapWithIndexSplit.get(pathString)) : none2();
    return pipe(valueOpt, mapError(() => MissingData(path, `Expected ${pathString} to exist in the provided map`)), flatMap7((value3) => parsePrimitive(value3, path, primitive3, seqDelim, split)));
  };
  const enumerateChildren = (path) => sync(() => {
    const keyPaths = fromIterable(mapWithIndexSplit.keys()).map(unmakePathString);
    const filteredKeyPaths = keyPaths.filter((keyPath) => {
      for (let i = 0; i < path.length; i++) {
        const pathComponent = pipe(path, unsafeGet(i));
        const currentElement = keyPath[i];
        if (currentElement === void 0 || pathComponent !== currentElement) {
          return false;
        }
      }
      return true;
    }).flatMap((keyPath) => keyPath.slice(path.length, path.length + 1));
    return fromIterable5(filteredKeyPaths);
  });
  return fromFlat(makeFlat({
    load,
    enumerateChildren,
    patch: empty19
  }));
};
var extend = (leftDef, rightDef, left3, right3) => {
  const leftPad = unfold(left3.length, (index) => index >= right3.length ? none2() : some2([leftDef(index), index + 1]));
  const rightPad = unfold(right3.length, (index) => index >= left3.length ? none2() : some2([rightDef(index), index + 1]));
  const leftExtension = concat(left3, leftPad);
  const rightExtension = concat(right3, rightPad);
  return [leftExtension, rightExtension];
};
var appendConfigPath = (path, config2) => {
  let op = config2;
  if (op._tag === "Nested") {
    const out = path.slice();
    while (op._tag === "Nested") {
      out.push(op.name);
      op = op.config;
    }
    return out;
  }
  return path;
};
var fromFlatLoop = (flat, prefix, config2, split) => {
  const op = config2;
  switch (op._tag) {
    case OP_CONSTANT: {
      return succeed(of(op.value));
    }
    case OP_DESCRIBED: {
      return suspend(() => fromFlatLoop(flat, prefix, op.config, split));
    }
    case OP_FAIL2: {
      return fail2(MissingData(prefix, op.message));
    }
    case OP_FALLBACK: {
      return pipe(suspend(() => fromFlatLoop(flat, prefix, op.first, split)), catchAll((error1) => {
        if (op.condition(error1)) {
          return pipe(fromFlatLoop(flat, prefix, op.second, split), catchAll((error2) => fail2(Or(error1, error2))));
        }
        return fail2(error1);
      }));
    }
    case OP_LAZY: {
      return suspend(() => fromFlatLoop(flat, prefix, op.config(), split));
    }
    case OP_MAP_OR_FAIL: {
      return suspend(() => pipe(fromFlatLoop(flat, prefix, op.original, split), flatMap7(forEachSequential((a) => pipe(op.mapOrFail(a), mapError(prefixed(appendConfigPath(prefix, op.original))))))));
    }
    case OP_NESTED: {
      return suspend(() => fromFlatLoop(flat, concat(prefix, of(op.name)), op.config, split));
    }
    case OP_PRIMITIVE: {
      return pipe(patch5(prefix, flat.patch), flatMap7((prefix2) => pipe(flat.load(prefix2, op, split), flatMap7((values3) => {
        if (values3.length === 0) {
          const name = pipe(last(prefix2), getOrElse(() => "<n/a>"));
          return fail2(MissingData([], `Expected ${op.description} with name ${name}`));
        }
        return succeed(values3);
      }))));
    }
    case OP_SEQUENCE: {
      return pipe(patch5(prefix, flat.patch), flatMap7((patchedPrefix) => pipe(flat.enumerateChildren(patchedPrefix), flatMap7(indicesFrom), flatMap7((indices) => {
        if (indices.length === 0) {
          return suspend(() => map8(fromFlatLoop(flat, patchedPrefix, op.config, true), of));
        }
        return pipe(forEachSequential(indices, (index) => fromFlatLoop(flat, append(prefix, `[${index}]`), op.config, true)), map8((chunkChunk) => {
          const flattened = flatten(chunkChunk);
          if (flattened.length === 0) {
            return of(empty());
          }
          return of(flattened);
        }));
      }))));
    }
    case OP_HASHMAP: {
      return suspend(() => pipe(patch5(prefix, flat.patch), flatMap7((prefix2) => pipe(flat.enumerateChildren(prefix2), flatMap7((keys5) => {
        return pipe(keys5, forEachSequential((key) => fromFlatLoop(flat, concat(prefix2, of(key)), op.valueConfig, split)), map8((matrix) => {
          if (matrix.length === 0) {
            return of(empty8());
          }
          return pipe(transpose(matrix), map2((values3) => fromIterable6(zip(fromIterable(keys5), values3))));
        }));
      })))));
    }
    case OP_ZIP_WITH: {
      return suspend(() => pipe(fromFlatLoop(flat, prefix, op.left, split), either2, flatMap7((left3) => pipe(fromFlatLoop(flat, prefix, op.right, split), either2, flatMap7((right3) => {
        if (isLeft2(left3) && isLeft2(right3)) {
          return fail2(And(left3.left, right3.left));
        }
        if (isLeft2(left3) && isRight2(right3)) {
          return fail2(left3.left);
        }
        if (isRight2(left3) && isLeft2(right3)) {
          return fail2(right3.left);
        }
        if (isRight2(left3) && isRight2(right3)) {
          const path = pipe(prefix, join("."));
          const fail10 = fromFlatLoopFail(prefix, path);
          const [lefts, rights] = extend(fail10, fail10, pipe(left3.right, map2(right2)), pipe(right3.right, map2(right2)));
          return pipe(lefts, zip(rights), forEachSequential(([left4, right4]) => pipe(zip2(left4, right4), map8(([left5, right5]) => op.zip(left5, right5)))));
        }
        throw new Error("BUG: ConfigProvider.fromFlatLoop - please report an issue at https://github.com/Effect-TS/effect/issues");
      })))));
    }
  }
};
var fromFlatLoopFail = (prefix, path) => (index) => left2(MissingData(prefix, `The element at index ${index} in a sequence at path "${path}" was missing`));
var mapInputPath = /* @__PURE__ */ dual(2, (self2, f) => fromFlat(mapInputPathFlat(self2.flattened, f)));
var mapInputPathFlat = (self2, f) => makeFlat({
  load: (path, config2, split = true) => self2.load(path, config2, split),
  enumerateChildren: (path) => self2.enumerateChildren(path),
  patch: mapName(self2.patch, f)
});
var nested2 = /* @__PURE__ */ dual(2, (self2, name) => fromFlat(makeFlat({
  load: (path, config2) => self2.flattened.load(path, config2, true),
  enumerateChildren: (path) => self2.flattened.enumerateChildren(path),
  patch: nested(self2.flattened.patch, name)
})));
var unnested2 = /* @__PURE__ */ dual(2, (self2, name) => fromFlat(makeFlat({
  load: (path, config2) => self2.flattened.load(path, config2, true),
  enumerateChildren: (path) => self2.flattened.enumerateChildren(path),
  patch: unnested(self2.flattened.patch, name)
})));
var orElse2 = /* @__PURE__ */ dual(2, (self2, that) => fromFlat(orElseFlat(self2.flattened, () => that().flattened)));
var orElseFlat = (self2, that) => makeFlat({
  load: (path, config2, split) => pipe(patch5(path, self2.patch), flatMap7((patch9) => self2.load(patch9, config2, split)), catchAll((error1) => pipe(sync(that), flatMap7((that2) => pipe(patch5(path, that2.patch), flatMap7((patch9) => that2.load(patch9, config2, split)), catchAll((error2) => fail2(Or(error1, error2)))))))),
  enumerateChildren: (path) => pipe(patch5(path, self2.patch), flatMap7((patch9) => self2.enumerateChildren(patch9)), either2, flatMap7((left3) => pipe(sync(that), flatMap7((that2) => pipe(patch5(path, that2.patch), flatMap7((patch9) => that2.enumerateChildren(patch9)), either2, flatMap7((right3) => {
    if (isLeft2(left3) && isLeft2(right3)) {
      return fail2(And(left3.left, right3.left));
    }
    if (isLeft2(left3) && isRight2(right3)) {
      return succeed(right3.right);
    }
    if (isRight2(left3) && isLeft2(right3)) {
      return succeed(left3.right);
    }
    if (isRight2(left3) && isRight2(right3)) {
      return succeed(pipe(left3.right, union3(right3.right)));
    }
    throw new Error("BUG: ConfigProvider.orElseFlat - please report an issue at https://github.com/Effect-TS/effect/issues");
  })))))),
  patch: empty19
});
var constantCase2 = (self2) => mapInputPath(self2, constantCase);
var kebabCase2 = (self2) => mapInputPath(self2, kebabCase);
var lowerCase2 = (self2) => mapInputPath(self2, lowerCase);
var snakeCase2 = (self2) => mapInputPath(self2, snakeCase);
var upperCase2 = (self2) => mapInputPath(self2, upperCase);
var within = /* @__PURE__ */ dual(3, (self2, path, f) => {
  const unnest = reduce(path, self2, (provider, name) => unnested2(provider, name));
  const nest = reduceRight(path, f(unnest), (provider, name) => nested2(provider, name));
  return orElse2(nest, () => self2);
});
var splitPathString = (text, delim) => {
  const split = text.split(new RegExp(`\\s*${escape(delim)}\\s*`));
  return split;
};
var parsePrimitive = (text, path, primitive3, delimiter, split) => {
  if (!split) {
    return pipe(primitive3.parse(text), mapBoth({
      onFailure: prefixed(path),
      onSuccess: of
    }));
  }
  return pipe(splitPathString(text, delimiter), forEachSequential((char) => primitive3.parse(char.trim())), mapError(prefixed(path)));
};
var transpose = (array5) => {
  return Object.keys(array5[0]).map((column) => array5.map((row) => row[column]));
};
var indicesFrom = (quotedIndices) => pipe(forEachSequential(quotedIndices, parseQuotedIndex), mapBoth({
  onFailure: () => empty(),
  onSuccess: sort(Order)
}), either2, map8(merge));
var STR_INDEX_REGEX = /(^.+)(\[(\d+)\])$/;
var QUOTED_INDEX_REGEX = /^(\[(\d+)\])$/;
var parseQuotedIndex = (str) => {
  const match11 = str.match(QUOTED_INDEX_REGEX);
  if (match11 !== null) {
    const matchedIndex = match11[2];
    return pipe(matchedIndex !== void 0 && matchedIndex.length > 0 ? some2(matchedIndex) : none2(), flatMap(parseInteger));
  }
  return none2();
};
var splitIndexInKeys = (map18, unmakePathString, makePathString) => {
  const newMap = /* @__PURE__ */ new Map();
  for (const [pathString, value3] of map18) {
    const keyWithIndex = pipe(unmakePathString(pathString), flatMap2((key) => match2(splitIndexFrom(key), {
      onNone: () => of(key),
      onSome: ([key2, index]) => make4(key2, `[${index}]`)
    })));
    newMap.set(makePathString(keyWithIndex), value3);
  }
  return newMap;
};
var splitIndexFrom = (key) => {
  const match11 = key.match(STR_INDEX_REGEX);
  if (match11 !== null) {
    const matchedString = match11[1];
    const matchedIndex = match11[3];
    const optionalString = matchedString !== void 0 && matchedString.length > 0 ? some2(matchedString) : none2();
    const optionalIndex = pipe(matchedIndex !== void 0 && matchedIndex.length > 0 ? some2(matchedIndex) : none2(), flatMap(parseInteger));
    return all2([optionalString, optionalIndex]);
  }
  return none2();
};
var parseInteger = (str) => {
  const parsedIndex = Number.parseInt(str);
  return Number.isNaN(parsedIndex) ? none2() : some2(parsedIndex);
};
var keyName = (name) => ({
  _tag: "KeyName",
  name
});
var keyIndex = (index) => ({
  _tag: "KeyIndex",
  index
});
var fromJson = (json2) => {
  const hiddenDelimiter = "\uFEFF";
  const indexedEntries = map2(getIndexedEntries(json2), ([key, value3]) => [configPathToString(key).join(hiddenDelimiter), value3]);
  return fromMap(new Map(indexedEntries), {
    pathDelim: hiddenDelimiter,
    seqDelim: hiddenDelimiter
  });
};
var configPathToString = (path) => {
  const output = [];
  let i = 0;
  while (i < path.length) {
    const component = path[i];
    if (component._tag === "KeyName") {
      if (i + 1 < path.length) {
        const nextComponent = path[i + 1];
        if (nextComponent._tag === "KeyIndex") {
          output.push(`${component.name}[${nextComponent.index}]`);
          i += 2;
        } else {
          output.push(component.name);
          i += 1;
        }
      } else {
        output.push(component.name);
        i += 1;
      }
    }
  }
  return output;
};
var getIndexedEntries = (config2) => {
  const loopAny = (path, value3) => {
    if (typeof value3 === "string") {
      return make4([path, value3]);
    }
    if (typeof value3 === "number" || typeof value3 === "boolean") {
      return make4([path, String(value3)]);
    }
    if (isArray(value3)) {
      return loopArray(path, value3);
    }
    if (typeof value3 === "object" && value3 !== null) {
      return loopObject(path, value3);
    }
    return empty();
  };
  const loopArray = (path, values3) => match3(values3, {
    onEmpty: () => make4([path, "<nil>"]),
    onNonEmpty: flatMap2((value3, index) => loopAny(append(path, keyIndex(index)), value3))
  });
  const loopObject = (path, value3) => Object.entries(value3).flatMap(([key, value4]) => {
    const newPath = append(path, keyName(key));
    const result = loopAny(newPath, value4);
    if (isEmptyReadonlyArray(result)) {
      return make4([newPath, ""]);
    }
    return result;
  });
  return loopObject(empty(), config2);
};

// node_modules/effect/dist/esm/internal/defaultServices/console.js
var TypeId11 = /* @__PURE__ */ Symbol.for("effect/Console");
var consoleTag = /* @__PURE__ */ GenericTag("effect/Console");
var defaultConsole = {
  [TypeId11]: TypeId11,
  assert(condition, ...args) {
    return sync(() => {
      console.assert(condition, ...args);
    });
  },
  clear: /* @__PURE__ */ sync(() => {
    console.clear();
  }),
  count(label) {
    return sync(() => {
      console.count(label);
    });
  },
  countReset(label) {
    return sync(() => {
      console.countReset(label);
    });
  },
  debug(...args) {
    return sync(() => {
      console.debug(...args);
    });
  },
  dir(item, options) {
    return sync(() => {
      console.dir(item, options);
    });
  },
  dirxml(...args) {
    return sync(() => {
      console.dirxml(...args);
    });
  },
  error(...args) {
    return sync(() => {
      console.error(...args);
    });
  },
  group(options) {
    return options?.collapsed ? sync(() => console.groupCollapsed(options?.label)) : sync(() => console.group(options?.label));
  },
  groupEnd: /* @__PURE__ */ sync(() => {
    console.groupEnd();
  }),
  info(...args) {
    return sync(() => {
      console.info(...args);
    });
  },
  log(...args) {
    return sync(() => {
      console.log(...args);
    });
  },
  table(tabularData, properties) {
    return sync(() => {
      console.table(tabularData, properties);
    });
  },
  time(label) {
    return sync(() => console.time(label));
  },
  timeEnd(label) {
    return sync(() => console.timeEnd(label));
  },
  timeLog(label, ...args) {
    return sync(() => {
      console.timeLog(label, ...args);
    });
  },
  trace(...args) {
    return sync(() => {
      console.trace(...args);
    });
  },
  warn(...args) {
    return sync(() => {
      console.warn(...args);
    });
  },
  unsafe: console
};

// node_modules/effect/dist/esm/internal/random.js
var RandomSymbolKey = "effect/Random";
var RandomTypeId = /* @__PURE__ */ Symbol.for(RandomSymbolKey);
var randomTag = /* @__PURE__ */ GenericTag("effect/Random");
var RandomImpl = class {
  seed;
  [RandomTypeId] = RandomTypeId;
  PRNG;
  constructor(seed) {
    this.seed = seed;
    this.PRNG = new PCGRandom(seed);
  }
  get next() {
    return sync(() => this.PRNG.number());
  }
  get nextBoolean() {
    return map8(this.next, (n) => n > 0.5);
  }
  get nextInt() {
    return sync(() => this.PRNG.integer(Number.MAX_SAFE_INTEGER));
  }
  nextRange(min3, max5) {
    return map8(this.next, (n) => (max5 - min3) * n + min3);
  }
  nextIntBetween(min3, max5) {
    return sync(() => this.PRNG.integer(max5 - min3) + min3);
  }
  shuffle(elements) {
    return shuffleWith(elements, (n) => this.nextIntBetween(0, n));
  }
};
var shuffleWith = (elements, nextIntBounded) => {
  return suspend(() => pipe(sync(() => Array.from(elements)), flatMap7((buffer) => {
    const numbers = [];
    for (let i = buffer.length; i >= 2; i = i - 1) {
      numbers.push(i);
    }
    return pipe(numbers, forEachSequentialDiscard((n) => pipe(nextIntBounded(n), map8((k) => swap(buffer, n - 1, k)))), as(fromIterable2(buffer)));
  })));
};
var swap = (buffer, index1, index2) => {
  const tmp = buffer[index1];
  buffer[index1] = buffer[index2];
  buffer[index2] = tmp;
  return buffer;
};
var make23 = (seed) => new RandomImpl(hash(seed));

// node_modules/effect/dist/esm/internal/defaultServices.js
var liveServices = /* @__PURE__ */ pipe(/* @__PURE__ */ empty3(), /* @__PURE__ */ add2(clockTag, /* @__PURE__ */ make21()), /* @__PURE__ */ add2(consoleTag, defaultConsole), /* @__PURE__ */ add2(randomTag, /* @__PURE__ */ make23(/* @__PURE__ */ Math.random())), /* @__PURE__ */ add2(configProviderTag, /* @__PURE__ */ fromEnv()), /* @__PURE__ */ add2(tracerTag, nativeTracer));
var currentServices = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/DefaultServices/currentServices"), () => fiberRefUnsafeMakeContext(liveServices));
var sleep = (duration3) => {
  const decodedDuration = decode(duration3);
  return clockWith((clock3) => clock3.sleep(decodedDuration));
};
var clockWith = (f) => fiberRefGetWith(currentServices, (services) => f(get3(services, clockTag)));
var currentTimeMillis = /* @__PURE__ */ clockWith((clock3) => clock3.currentTimeMillis);
var currentTimeNanos = /* @__PURE__ */ clockWith((clock3) => clock3.currentTimeNanos);
var withClock = /* @__PURE__ */ dual(2, (effect2, value3) => fiberRefLocallyWith(currentServices, add2(clockTag, value3))(effect2));
var withConfigProvider = /* @__PURE__ */ dual(2, (effect2, value3) => fiberRefLocallyWith(currentServices, add2(configProviderTag, value3))(effect2));
var configProviderWith = (f) => fiberRefGetWith(currentServices, (services) => f(get3(services, configProviderTag)));
var config = (config2) => configProviderWith((_) => _.load(config2));
var randomWith = (f) => fiberRefGetWith(currentServices, (services) => f(get3(services, randomTag)));
var withRandom = /* @__PURE__ */ dual(2, (effect2, value3) => fiberRefLocallyWith(currentServices, add2(randomTag, value3))(effect2));
var tracerWith = (f) => fiberRefGetWith(currentServices, (services) => f(get3(services, tracerTag)));
var withTracer = /* @__PURE__ */ dual(2, (effect2, value3) => fiberRefLocallyWith(currentServices, add2(tracerTag, value3))(effect2));

// node_modules/effect/dist/esm/Clock.js
var sleep2 = sleep;
var currentTimeMillis2 = currentTimeMillis;
var currentTimeNanos2 = currentTimeNanos;
var clockWith2 = clockWith;
var Clock = clockTag;

// node_modules/effect/dist/esm/internal/fiberRefs.js
function unsafeMake5(fiberRefLocals) {
  return new FiberRefsImpl(fiberRefLocals);
}
function empty20() {
  return unsafeMake5(/* @__PURE__ */ new Map());
}
var FiberRefsSym = /* @__PURE__ */ Symbol.for("effect/FiberRefs");
var FiberRefsImpl = class {
  locals;
  [FiberRefsSym] = FiberRefsSym;
  constructor(locals) {
    this.locals = locals;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var findAncestor = (_ref, _parentStack, _childStack, _childModified = false) => {
  const ref = _ref;
  let parentStack = _parentStack;
  let childStack = _childStack;
  let childModified = _childModified;
  let ret = void 0;
  while (ret === void 0) {
    if (isNonEmptyReadonlyArray(parentStack) && isNonEmptyReadonlyArray(childStack)) {
      const parentFiberId = headNonEmpty(parentStack)[0];
      const parentAncestors = tailNonEmpty(parentStack);
      const childFiberId = headNonEmpty(childStack)[0];
      const childRefValue = headNonEmpty(childStack)[1];
      const childAncestors = tailNonEmpty(childStack);
      if (parentFiberId.startTimeMillis < childFiberId.startTimeMillis) {
        childStack = childAncestors;
        childModified = true;
      } else if (parentFiberId.startTimeMillis > childFiberId.startTimeMillis) {
        parentStack = parentAncestors;
      } else {
        if (parentFiberId.id < childFiberId.id) {
          childStack = childAncestors;
          childModified = true;
        } else if (parentFiberId.id > childFiberId.id) {
          parentStack = parentAncestors;
        } else {
          ret = [childRefValue, childModified];
        }
      }
    } else {
      ret = [ref.initial, true];
    }
  }
  return ret;
};
var joinAs = /* @__PURE__ */ dual(3, (self2, fiberId3, that) => {
  const parentFiberRefs = new Map(self2.locals);
  that.locals.forEach((childStack, fiberRef) => {
    const childValue = childStack[0][1];
    if (!childStack[0][0][symbol2](fiberId3)) {
      if (!parentFiberRefs.has(fiberRef)) {
        if (equals(childValue, fiberRef.initial)) {
          return;
        }
        parentFiberRefs.set(fiberRef, [[fiberId3, fiberRef.join(fiberRef.initial, childValue)]]);
        return;
      }
      const parentStack = parentFiberRefs.get(fiberRef);
      const [ancestor, wasModified] = findAncestor(fiberRef, parentStack, childStack);
      if (wasModified) {
        const patch9 = fiberRef.diff(ancestor, childValue);
        const oldValue = parentStack[0][1];
        const newValue = fiberRef.join(oldValue, fiberRef.patch(patch9)(oldValue));
        if (!equals(oldValue, newValue)) {
          let newStack;
          const parentFiberId = parentStack[0][0];
          if (parentFiberId[symbol2](fiberId3)) {
            newStack = [[parentFiberId, newValue], ...parentStack.slice(1)];
          } else {
            newStack = [[fiberId3, newValue], ...parentStack];
          }
          parentFiberRefs.set(fiberRef, newStack);
        }
      }
    }
  });
  return new FiberRefsImpl(parentFiberRefs);
});
var forkAs = /* @__PURE__ */ dual(2, (self2, childId) => {
  const map18 = /* @__PURE__ */ new Map();
  unsafeForkAs(self2, map18, childId);
  return new FiberRefsImpl(map18);
});
var unsafeForkAs = (self2, map18, fiberId3) => {
  self2.locals.forEach((stack, fiberRef) => {
    const oldValue = stack[0][1];
    const newValue = fiberRef.patch(fiberRef.fork)(oldValue);
    if (equals(oldValue, newValue)) {
      map18.set(fiberRef, stack);
    } else {
      map18.set(fiberRef, [[fiberId3, newValue], ...stack]);
    }
  });
};
var fiberRefs = (self2) => fromIterable5(self2.locals.keys());
var setAll = (self2) => forEachSequentialDiscard(fiberRefs(self2), (fiberRef) => fiberRefSet(fiberRef, getOrDefault(self2, fiberRef)));
var delete_ = /* @__PURE__ */ dual(2, (self2, fiberRef) => {
  const locals = new Map(self2.locals);
  locals.delete(fiberRef);
  return new FiberRefsImpl(locals);
});
var get9 = /* @__PURE__ */ dual(2, (self2, fiberRef) => {
  if (!self2.locals.has(fiberRef)) {
    return none2();
  }
  return some2(headNonEmpty(self2.locals.get(fiberRef))[1]);
});
var getOrDefault = /* @__PURE__ */ dual(2, (self2, fiberRef) => pipe(get9(self2, fiberRef), getOrElse(() => fiberRef.initial)));
var updateAs = /* @__PURE__ */ dual(2, (self2, {
  fiberId: fiberId3,
  fiberRef,
  value: value3
}) => {
  if (self2.locals.size === 0) {
    return new FiberRefsImpl(/* @__PURE__ */ new Map([[fiberRef, [[fiberId3, value3]]]]));
  }
  const locals = new Map(self2.locals);
  unsafeUpdateAs(locals, fiberId3, fiberRef, value3);
  return new FiberRefsImpl(locals);
});
var unsafeUpdateAs = (locals, fiberId3, fiberRef, value3) => {
  const oldStack = locals.get(fiberRef) ?? [];
  let newStack;
  if (isNonEmptyReadonlyArray(oldStack)) {
    const [currentId, currentValue] = headNonEmpty(oldStack);
    if (currentId[symbol2](fiberId3)) {
      if (equals(currentValue, value3)) {
        return;
      } else {
        newStack = [[fiberId3, value3], ...oldStack.slice(1)];
      }
    } else {
      newStack = [[fiberId3, value3], ...oldStack];
    }
  } else {
    newStack = [[fiberId3, value3]];
  }
  locals.set(fiberRef, newStack);
};
var updateManyAs = /* @__PURE__ */ dual(2, (self2, {
  entries: entries2,
  forkAs: forkAs2
}) => {
  if (self2.locals.size === 0) {
    return new FiberRefsImpl(new Map(entries2));
  }
  const locals = new Map(self2.locals);
  if (forkAs2 !== void 0) {
    unsafeForkAs(self2, locals, forkAs2);
  }
  entries2.forEach(([fiberRef, values3]) => {
    if (values3.length === 1) {
      unsafeUpdateAs(locals, values3[0][0], fiberRef, values3[0][1]);
    } else {
      values3.forEach(([fiberId3, value3]) => {
        unsafeUpdateAs(locals, fiberId3, fiberRef, value3);
      });
    }
  });
  return new FiberRefsImpl(locals);
});

// node_modules/effect/dist/esm/FiberRefs.js
var get10 = get9;
var getOrDefault2 = getOrDefault;
var joinAs2 = joinAs;
var setAll2 = setAll;
var updateManyAs2 = updateManyAs;
var empty21 = empty20;

// node_modules/effect/dist/esm/LogLevel.js
var LogLevel_exports = {};
__export(LogLevel_exports, {
  All: () => All,
  Debug: () => Debug,
  Error: () => Error2,
  Fatal: () => Fatal,
  Info: () => Info,
  None: () => None3,
  Order: () => Order2,
  Trace: () => Trace,
  Warning: () => Warning,
  allLevels: () => allLevels,
  fromLiteral: () => fromLiteral,
  greaterThan: () => greaterThan2,
  greaterThanEqual: () => greaterThanEqual,
  lessThan: () => lessThan2,
  lessThanEqual: () => lessThanEqual,
  locally: () => locally
});
var All = logLevelAll;
var Fatal = logLevelFatal;
var Error2 = logLevelError;
var Warning = logLevelWarning;
var Info = logLevelInfo;
var Debug = logLevelDebug;
var Trace = logLevelTrace;
var None3 = logLevelNone;
var allLevels = allLogLevels;
var locally = /* @__PURE__ */ dual(2, (use, self2) => fiberRefLocally(use, currentLogLevel, self2));
var Order2 = /* @__PURE__ */ pipe(Order, /* @__PURE__ */ mapInput2((level) => level.ordinal));
var lessThan2 = /* @__PURE__ */ lessThan(Order2);
var lessThanEqual = /* @__PURE__ */ lessThanOrEqualTo(Order2);
var greaterThan2 = /* @__PURE__ */ greaterThan(Order2);
var greaterThanEqual = /* @__PURE__ */ greaterThanOrEqualTo(Order2);
var fromLiteral = (literal3) => {
  switch (literal3) {
    case "All":
      return All;
    case "Debug":
      return Debug;
    case "Error":
      return Error2;
    case "Fatal":
      return Fatal;
    case "Info":
      return Info;
    case "Trace":
      return Trace;
    case "None":
      return None3;
    case "Warning":
      return Warning;
  }
};

// node_modules/effect/dist/esm/internal/logSpan.js
var make24 = (label, startTime) => ({
  label,
  startTime
});
var render = (now) => (self2) => {
  const label = self2.label.replace(/[\s="]/g, "_");
  return `${label}=${now - self2.startTime}ms`;
};

// node_modules/effect/dist/esm/LogSpan.js
var make25 = make24;
var render2 = render;

// node_modules/effect/dist/esm/Readable.js
var TypeId12 = /* @__PURE__ */ Symbol.for("effect/Readable");
var Proto = {
  [TypeId12]: TypeId12,
  pipe() {
    return pipeArguments(this, arguments);
  }
};

// node_modules/effect/dist/esm/internal/ref.js
var RefTypeId = /* @__PURE__ */ Symbol.for("effect/Ref");
var refVariance = {
  /* c8 ignore next */
  _A: (_) => _
};
var RefImpl = class {
  ref;
  [RefTypeId] = refVariance;
  [TypeId12];
  constructor(ref) {
    this.ref = ref;
    this[TypeId12] = TypeId12;
    this.get = sync(() => get6(this.ref));
  }
  get;
  modify(f) {
    return sync(() => {
      const current = get6(this.ref);
      const [b, a] = f(current);
      if (current !== a) {
        set2(a)(this.ref);
      }
      return b;
    });
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var unsafeMake6 = (value3) => new RefImpl(make12(value3));
var make26 = (value3) => sync(() => unsafeMake6(value3));
var get11 = (self2) => self2.get;
var set5 = /* @__PURE__ */ dual(2, (self2, value3) => self2.modify(() => [void 0, value3]));
var getAndSet = /* @__PURE__ */ dual(2, (self2, value3) => self2.modify((a) => [a, value3]));
var modify2 = /* @__PURE__ */ dual(2, (self2, f) => self2.modify(f));
var update2 = /* @__PURE__ */ dual(2, (self2, f) => self2.modify((a) => [void 0, f(a)]));

// node_modules/effect/dist/esm/Ref.js
var make27 = make26;
var get12 = get11;
var getAndSet2 = getAndSet;
var modify3 = modify2;
var update3 = update2;

// node_modules/effect/dist/esm/Tracer.js
var tracerWith2 = tracerWith;

// node_modules/effect/dist/esm/internal/fiberRefs/patch.js
var OP_EMPTY2 = "Empty";
var OP_ADD = "Add";
var OP_REMOVE = "Remove";
var OP_UPDATE = "Update";
var OP_AND_THEN = "AndThen";
var empty22 = {
  _tag: OP_EMPTY2
};
var diff5 = (oldValue, newValue) => {
  const missingLocals = new Map(oldValue.locals);
  let patch9 = empty22;
  for (const [fiberRef, pairs] of newValue.locals.entries()) {
    const newValue2 = headNonEmpty(pairs)[1];
    const old = missingLocals.get(fiberRef);
    if (old !== void 0) {
      const oldValue2 = headNonEmpty(old)[1];
      if (!equals(oldValue2, newValue2)) {
        patch9 = combine7({
          _tag: OP_UPDATE,
          fiberRef,
          patch: fiberRef.diff(oldValue2, newValue2)
        })(patch9);
      }
    } else {
      patch9 = combine7({
        _tag: OP_ADD,
        fiberRef,
        value: newValue2
      })(patch9);
    }
    missingLocals.delete(fiberRef);
  }
  for (const [fiberRef] of missingLocals.entries()) {
    patch9 = combine7({
      _tag: OP_REMOVE,
      fiberRef
    })(patch9);
  }
  return patch9;
};
var combine7 = /* @__PURE__ */ dual(2, (self2, that) => ({
  _tag: OP_AND_THEN,
  first: self2,
  second: that
}));
var patch6 = /* @__PURE__ */ dual(3, (self2, fiberId3, oldValue) => {
  let fiberRefs3 = oldValue;
  let patches = of(self2);
  while (isNonEmptyReadonlyArray(patches)) {
    const head5 = headNonEmpty(patches);
    const tail = tailNonEmpty(patches);
    switch (head5._tag) {
      case OP_EMPTY2: {
        patches = tail;
        break;
      }
      case OP_ADD: {
        fiberRefs3 = updateAs(fiberRefs3, {
          fiberId: fiberId3,
          fiberRef: head5.fiberRef,
          value: head5.value
        });
        patches = tail;
        break;
      }
      case OP_REMOVE: {
        fiberRefs3 = delete_(fiberRefs3, head5.fiberRef);
        patches = tail;
        break;
      }
      case OP_UPDATE: {
        const value3 = getOrDefault(fiberRefs3, head5.fiberRef);
        fiberRefs3 = updateAs(fiberRefs3, {
          fiberId: fiberId3,
          fiberRef: head5.fiberRef,
          value: head5.fiberRef.patch(head5.patch)(value3)
        });
        patches = tail;
        break;
      }
      case OP_AND_THEN: {
        patches = prepend(head5.first)(prepend(head5.second)(tail));
        break;
      }
    }
  }
  return fiberRefs3;
});

// node_modules/effect/dist/esm/internal/metric/label.js
var MetricLabelSymbolKey = "effect/MetricLabel";
var MetricLabelTypeId = /* @__PURE__ */ Symbol.for(MetricLabelSymbolKey);
var MetricLabelImpl = class {
  key;
  value;
  [MetricLabelTypeId] = MetricLabelTypeId;
  _hash;
  constructor(key, value3) {
    this.key = key;
    this.value = value3;
    this._hash = string(MetricLabelSymbolKey + this.key + this.value);
  }
  [symbol]() {
    return this._hash;
  }
  [symbol2](that) {
    return isMetricLabel(that) && this.key === that.key && this.value === that.value;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var make28 = (key, value3) => {
  return new MetricLabelImpl(key, value3);
};
var isMetricLabel = (u) => hasProperty(u, MetricLabelTypeId);

// node_modules/effect/dist/esm/internal/core-effect.js
var annotateLogs = /* @__PURE__ */ dual((args) => isEffect(args[0]), function() {
  const args = arguments;
  return fiberRefLocallyWith(args[0], currentLogAnnotations, typeof args[1] === "string" ? set3(args[1], args[2]) : (annotations) => Object.entries(args[1]).reduce((acc, [key, value3]) => set3(acc, key, value3), annotations));
});
var asSome = (self2) => map8(self2, some2);
var asSomeError = (self2) => mapError(self2, some2);
var try_ = (arg) => {
  let evaluate;
  let onFailure = void 0;
  if (typeof arg === "function") {
    evaluate = arg;
  } else {
    evaluate = arg.try;
    onFailure = arg.catch;
  }
  return sync(() => {
    try {
      return evaluate();
    } catch (error) {
      throw makeEffectError(fail(onFailure ? onFailure(error) : new UnknownException(error)));
    }
  });
};
var _catch = /* @__PURE__ */ dual(3, (self2, tag, options) => catchAll(self2, (e) => {
  if (hasProperty(e, tag) && e[tag] === options.failure) {
    return options.onFailure(e);
  }
  return fail2(e);
}));
var catchAllDefect = /* @__PURE__ */ dual(2, (self2, f) => catchAllCause(self2, (cause3) => {
  const option5 = find(cause3, (_) => isDieType(_) ? some2(_) : none2());
  switch (option5._tag) {
    case "None": {
      return failCause(cause3);
    }
    case "Some": {
      return f(option5.value.defect);
    }
  }
}));
var catchSomeCause = /* @__PURE__ */ dual(2, (self2, f) => matchCauseEffect(self2, {
  onFailure: (cause3) => {
    const option5 = f(cause3);
    switch (option5._tag) {
      case "None": {
        return failCause(cause3);
      }
      case "Some": {
        return option5.value;
      }
    }
  },
  onSuccess: succeed
}));
var catchSomeDefect = /* @__PURE__ */ dual(2, (self2, pf) => catchAllCause(self2, (cause3) => {
  const option5 = find(cause3, (_) => isDieType(_) ? some2(_) : none2());
  switch (option5._tag) {
    case "None": {
      return failCause(cause3);
    }
    case "Some": {
      const optionEffect = pf(option5.value.defect);
      return optionEffect._tag === "Some" ? optionEffect.value : failCause(cause3);
    }
  }
}));
var catchTag = /* @__PURE__ */ dual(3, (self2, k, f) => catchIf(self2, isTagged(k), f));
var catchTags = /* @__PURE__ */ dual(2, (self2, cases) => {
  let keys5;
  return catchIf(self2, (e) => {
    keys5 ??= Object.keys(cases);
    return hasProperty(e, "_tag") && isString(e["_tag"]) && keys5.includes(e["_tag"]);
  }, (e) => cases[e["_tag"]](e));
});
var cause = (self2) => matchCause(self2, {
  onFailure: identity,
  onSuccess: () => empty16
});
var clockWith3 = clockWith2;
var clock = /* @__PURE__ */ clockWith3(succeed);
var delay = /* @__PURE__ */ dual(2, (self2, duration3) => zipRight(sleep2(duration3), self2));
var descriptorWith = (f) => withFiberRuntime((state, status) => f({
  id: state.id(),
  status,
  interruptors: interruptors(state.getFiberRef(currentInterruptedCause))
}));
var allowInterrupt = /* @__PURE__ */ descriptorWith((descriptor3) => size3(descriptor3.interruptors) > 0 ? interrupt2 : void_);
var descriptor = /* @__PURE__ */ descriptorWith(succeed);
var diffFiberRefs = (self2) => summarized(self2, fiberRefs2, diff5);
var diffFiberRefsAndRuntimeFlags = (self2) => summarized(self2, zip2(fiberRefs2, runtimeFlags), ([refs, flags], [refsNew, flagsNew]) => [diff5(refs, refsNew), diff4(flags, flagsNew)]);
var Do = /* @__PURE__ */ succeed({});
var bind2 = /* @__PURE__ */ bind(map8, flatMap7);
var bindTo2 = /* @__PURE__ */ bindTo(map8);
var let_2 = /* @__PURE__ */ let_(map8);
var dropUntil = /* @__PURE__ */ dual(2, (elements, predicate) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const builder = [];
  let next;
  let dropping = succeed(false);
  let i = 0;
  while ((next = iterator.next()) && !next.done) {
    const a = next.value;
    const index = i++;
    dropping = flatMap7(dropping, (bool) => {
      if (bool) {
        builder.push(a);
        return succeed(true);
      }
      return predicate(a, index);
    });
  }
  return map8(dropping, () => builder);
}));
var dropWhile = /* @__PURE__ */ dual(2, (elements, predicate) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const builder = [];
  let next;
  let dropping = succeed(true);
  let i = 0;
  while ((next = iterator.next()) && !next.done) {
    const a = next.value;
    const index = i++;
    dropping = flatMap7(dropping, (d) => map8(d ? predicate(a, index) : succeed(false), (b) => {
      if (!b) {
        builder.push(a);
      }
      return b;
    }));
  }
  return map8(dropping, () => builder);
}));
var contextWith = (f) => map8(context(), f);
var eventually = (self2) => orElse(self2, () => flatMap7(yieldNow(), () => eventually(self2)));
var filterMap3 = /* @__PURE__ */ dual(2, (elements, pf) => map8(forEachSequential(elements, identity), filterMap(pf)));
var filterOrDie = /* @__PURE__ */ dual(3, (self2, predicate, orDieWith3) => filterOrElse(self2, predicate, (a) => dieSync(() => orDieWith3(a))));
var filterOrDieMessage = /* @__PURE__ */ dual(3, (self2, predicate, message) => filterOrElse(self2, predicate, () => dieMessage(message)));
var filterOrElse = /* @__PURE__ */ dual(3, (self2, predicate, orElse9) => flatMap7(self2, (a) => predicate(a) ? succeed(a) : orElse9(a)));
var liftPredicate = /* @__PURE__ */ dual(3, (self2, predicate, orFailWith) => suspend(() => predicate(self2) ? succeed(self2) : fail2(orFailWith(self2))));
var filterOrFail = /* @__PURE__ */ dual((args) => isEffect(args[0]), (self2, predicate, orFailWith) => filterOrElse(self2, predicate, (a) => orFailWith === void 0 ? fail2(new NoSuchElementException()) : failSync(() => orFailWith(a))));
var findFirst3 = /* @__PURE__ */ dual(2, (elements, f) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const next = iterator.next();
  if (!next.done) {
    return findLoop(iterator, 0, f, next.value);
  }
  return succeed(none2());
}));
var findLoop = (iterator, index, f, value3) => flatMap7(f(value3, index), (result) => {
  if (result) {
    return succeed(some2(value3));
  }
  const next = iterator.next();
  if (!next.done) {
    return findLoop(iterator, index + 1, f, next.value);
  }
  return succeed(none2());
});
var firstSuccessOf = (effects) => suspend(() => {
  const list = fromIterable2(effects);
  if (!isNonEmpty(list)) {
    return dieSync(() => new IllegalArgumentException(`Received an empty collection of effects`));
  }
  return pipe(tailNonEmpty2(list), reduce(headNonEmpty2(list), (left3, right3) => orElse(left3, () => right3)));
});
var flipWith = /* @__PURE__ */ dual(2, (self2, f) => flip2(f(flip2(self2))));
var match5 = /* @__PURE__ */ dual(2, (self2, options) => matchEffect(self2, {
  onFailure: (e) => succeed(options.onFailure(e)),
  onSuccess: (a) => succeed(options.onSuccess(a))
}));
var every3 = /* @__PURE__ */ dual(2, (elements, f) => suspend(() => forAllLoop(elements[Symbol.iterator](), 0, f)));
var forAllLoop = (iterator, index, f) => {
  const next = iterator.next();
  return next.done ? succeed(true) : flatMap7(f(next.value, index), (b) => b ? forAllLoop(iterator, index + 1, f) : succeed(b));
};
var forever = (self2) => {
  const loop3 = flatMap7(flatMap7(self2, () => yieldNow()), () => loop3);
  return loop3;
};
var gen = function() {
  let f;
  if (arguments.length === 1) {
    f = arguments[0];
  } else {
    f = arguments[1].bind(arguments[0]);
  }
  return suspend(() => {
    const iterator = f(pipe);
    const state = internalCall(() => iterator.next());
    const run = (state2) => {
      return state2.done ? succeed(state2.value) : flatMap7(yieldWrapGet(state2.value), (val) => run(internalCall(() => iterator.next(val))));
    };
    return run(state);
  });
};
var fiberRefs2 = /* @__PURE__ */ withFiberRuntime((state) => succeed(state.getFiberRefs()));
var head3 = (self2) => flatMap7(self2, (as4) => {
  const iterator = as4[Symbol.iterator]();
  const next = iterator.next();
  if (next.done) {
    return fail2(new NoSuchElementException());
  }
  return succeed(next.value);
});
var ignore = (self2) => match5(self2, {
  onFailure: constVoid,
  onSuccess: constVoid
});
var ignoreLogged = (self2) => matchCauseEffect(self2, {
  onFailure: (cause3) => logDebug(cause3, "An error was silently ignored because it is not anticipated to be useful"),
  onSuccess: () => void_
});
var inheritFiberRefs = (childFiberRefs) => updateFiberRefs((parentFiberId, parentFiberRefs) => joinAs2(parentFiberRefs, parentFiberId, childFiberRefs));
var isFailure2 = (self2) => match5(self2, {
  onFailure: constTrue,
  onSuccess: constFalse
});
var isSuccess = (self2) => match5(self2, {
  onFailure: constFalse,
  onSuccess: constTrue
});
var iterate = (initial, options) => suspend(() => {
  if (options.while(initial)) {
    return flatMap7(options.body(initial), (z2) => iterate(z2, options));
  }
  return succeed(initial);
});
var logWithLevel = (level) => (...message) => {
  const levelOption = fromNullable(level);
  let cause3 = void 0;
  for (let i = 0, len = message.length; i < len; i++) {
    const msg = message[i];
    if (isCause(msg)) {
      if (cause3 !== void 0) {
        cause3 = sequential(cause3, msg);
      } else {
        cause3 = msg;
      }
      message = [...message.slice(0, i), ...message.slice(i + 1)];
      i--;
    }
  }
  if (cause3 === void 0) {
    cause3 = empty16;
  }
  return withFiberRuntime((fiberState) => {
    fiberState.log(message, cause3, levelOption);
    return void_;
  });
};
var log = /* @__PURE__ */ logWithLevel();
var logTrace = /* @__PURE__ */ logWithLevel(Trace);
var logDebug = /* @__PURE__ */ logWithLevel(Debug);
var logInfo = /* @__PURE__ */ logWithLevel(Info);
var logWarning = /* @__PURE__ */ logWithLevel(Warning);
var logError = /* @__PURE__ */ logWithLevel(Error2);
var logFatal = /* @__PURE__ */ logWithLevel(Fatal);
var withLogSpan = /* @__PURE__ */ dual(2, (effect2, label) => flatMap7(currentTimeMillis2, (now) => fiberRefLocallyWith(effect2, currentLogSpan, prepend3(make25(label, now)))));
var logAnnotations = /* @__PURE__ */ fiberRefGet(currentLogAnnotations);
var loop = (initial, options) => options.discard ? loopDiscard(initial, options.while, options.step, options.body) : map8(loopInternal(initial, options.while, options.step, options.body), fromIterable);
var loopInternal = (initial, cont, inc, body) => suspend(() => cont(initial) ? flatMap7(body(initial), (a) => map8(loopInternal(inc(initial), cont, inc, body), prepend3(a))) : sync(() => empty9()));
var loopDiscard = (initial, cont, inc, body) => suspend(() => cont(initial) ? flatMap7(body(initial), () => loopDiscard(inc(initial), cont, inc, body)) : void_);
var mapAccum2 = /* @__PURE__ */ dual(3, (elements, zero2, f) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const builder = [];
  let result = succeed(zero2);
  let next;
  let i = 0;
  while (!(next = iterator.next()).done) {
    const index = i++;
    const value3 = next.value;
    result = flatMap7(result, (state) => map8(f(state, value3, index), ([z, b]) => {
      builder.push(b);
      return z;
    }));
  }
  return map8(result, (z) => [z, builder]);
}));
var mapErrorCause = /* @__PURE__ */ dual(2, (self2, f) => matchCauseEffect(self2, {
  onFailure: (c) => failCauseSync(() => f(c)),
  onSuccess: succeed
}));
var memoize = (self2) => pipe(deferredMake(), flatMap7((deferred) => pipe(diffFiberRefsAndRuntimeFlags(self2), intoDeferred(deferred), once, map8((complete3) => zipRight(complete3, pipe(deferredAwait(deferred), flatMap7(([patch9, a]) => as(zip2(patchFiberRefs(patch9[0]), updateRuntimeFlags(patch9[1])), a))))))));
var merge5 = (self2) => matchEffect(self2, {
  onFailure: (e) => succeed(e),
  onSuccess: succeed
});
var negate = (self2) => map8(self2, (b) => !b);
var none6 = (self2) => flatMap7(self2, (option5) => {
  switch (option5._tag) {
    case "None":
      return void_;
    case "Some":
      return fail2(new NoSuchElementException());
  }
});
var once = (self2) => map8(make27(true), (ref) => asVoid(whenEffect(self2, getAndSet2(ref, false))));
var option = (self2) => matchEffect(self2, {
  onFailure: () => succeed(none2()),
  onSuccess: (a) => succeed(some2(a))
});
var orElseFail = /* @__PURE__ */ dual(2, (self2, evaluate) => orElse(self2, () => failSync(evaluate)));
var orElseSucceed = /* @__PURE__ */ dual(2, (self2, evaluate) => orElse(self2, () => sync(evaluate)));
var parallelErrors = (self2) => matchCauseEffect(self2, {
  onFailure: (cause3) => {
    const errors = fromIterable(failures(cause3));
    return errors.length === 0 ? failCause(cause3) : fail2(errors);
  },
  onSuccess: succeed
});
var patchFiberRefs = (patch9) => updateFiberRefs((fiberId3, fiberRefs3) => pipe(patch9, patch6(fiberId3, fiberRefs3)));
var promise = (evaluate) => evaluate.length >= 1 ? async((resolve, signal) => {
  try {
    evaluate(signal).then((a) => resolve(exitSucceed(a)), (e) => resolve(exitDie(e)));
  } catch (e) {
    resolve(exitDie(e));
  }
}) : async((resolve) => {
  try {
    ;
    evaluate().then((a) => resolve(exitSucceed(a)), (e) => resolve(exitDie(e)));
  } catch (e) {
    resolve(exitDie(e));
  }
});
var provideService = /* @__PURE__ */ dual(3, (self2, tag, service3) => contextWithEffect((env) => provideContext(self2, add2(env, tag, service3))));
var provideServiceEffect = /* @__PURE__ */ dual(3, (self2, tag, effect2) => contextWithEffect((env) => flatMap7(effect2, (service3) => provideContext(self2, pipe(env, add2(tag, service3))))));
var random2 = /* @__PURE__ */ randomWith(succeed);
var reduce8 = /* @__PURE__ */ dual(3, (elements, zero2, f) => fromIterable(elements).reduce((acc, el, i) => flatMap7(acc, (a) => f(a, el, i)), succeed(zero2)));
var reduceRight2 = /* @__PURE__ */ dual(3, (elements, zero2, f) => fromIterable(elements).reduceRight((acc, el, i) => flatMap7(acc, (a) => f(el, a, i)), succeed(zero2)));
var reduceWhile = /* @__PURE__ */ dual(3, (elements, zero2, options) => flatMap7(sync(() => elements[Symbol.iterator]()), (iterator) => reduceWhileLoop(iterator, 0, zero2, options.while, options.body)));
var reduceWhileLoop = (iterator, index, state, predicate, f) => {
  const next = iterator.next();
  if (!next.done && predicate(state)) {
    return flatMap7(f(state, next.value, index), (nextState) => reduceWhileLoop(iterator, index + 1, nextState, predicate, f));
  }
  return succeed(state);
};
var repeatN = /* @__PURE__ */ dual(2, (self2, n) => suspend(() => repeatNLoop(self2, n)));
var repeatNLoop = (self2, n) => flatMap7(self2, (a) => n <= 0 ? succeed(a) : zipRight(yieldNow(), repeatNLoop(self2, n - 1)));
var sandbox = (self2) => matchCauseEffect(self2, {
  onFailure: fail2,
  onSuccess: succeed
});
var setFiberRefs = (fiberRefs3) => suspend(() => setAll2(fiberRefs3));
var sleep3 = sleep2;
var succeedNone = /* @__PURE__ */ succeed(/* @__PURE__ */ none2());
var succeedSome = (value3) => succeed(some2(value3));
var summarized = /* @__PURE__ */ dual(3, (self2, summary5, f) => flatMap7(summary5, (start3) => flatMap7(self2, (value3) => map8(summary5, (end3) => [f(start3, end3), value3]))));
var tagMetrics = /* @__PURE__ */ dual((args) => isEffect(args[0]), function() {
  return labelMetrics(arguments[0], typeof arguments[1] === "string" ? [make28(arguments[1], arguments[2])] : Object.entries(arguments[1]).map(([k, v]) => make28(k, v)));
});
var labelMetrics = /* @__PURE__ */ dual(2, (self2, labels) => fiberRefLocallyWith(self2, currentMetricLabels, (old) => union(old, labels)));
var takeUntil = /* @__PURE__ */ dual(2, (elements, predicate) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const builder = [];
  let next;
  let effect2 = succeed(false);
  let i = 0;
  while ((next = iterator.next()) && !next.done) {
    const a = next.value;
    const index = i++;
    effect2 = flatMap7(effect2, (bool) => {
      if (bool) {
        return succeed(true);
      }
      builder.push(a);
      return predicate(a, index);
    });
  }
  return map8(effect2, () => builder);
}));
var takeWhile = /* @__PURE__ */ dual(2, (elements, predicate) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const builder = [];
  let next;
  let taking = succeed(true);
  let i = 0;
  while ((next = iterator.next()) && !next.done) {
    const a = next.value;
    const index = i++;
    taking = flatMap7(taking, (taking2) => pipe(taking2 ? predicate(a, index) : succeed(false), map8((bool) => {
      if (bool) {
        builder.push(a);
      }
      return bool;
    })));
  }
  return map8(taking, () => builder);
}));
var tapBoth = /* @__PURE__ */ dual(2, (self2, {
  onFailure,
  onSuccess
}) => matchCauseEffect(self2, {
  onFailure: (cause3) => {
    const either4 = failureOrCause(cause3);
    switch (either4._tag) {
      case "Left": {
        return zipRight(onFailure(either4.left), failCause(cause3));
      }
      case "Right": {
        return failCause(cause3);
      }
    }
  },
  onSuccess: (a) => as(onSuccess(a), a)
}));
var tapDefect = /* @__PURE__ */ dual(2, (self2, f) => catchAllCause(self2, (cause3) => match2(keepDefects(cause3), {
  onNone: () => failCause(cause3),
  onSome: (a) => zipRight(f(a), failCause(cause3))
})));
var tapError = /* @__PURE__ */ dual(2, (self2, f) => matchCauseEffect(self2, {
  onFailure: (cause3) => {
    const either4 = failureOrCause(cause3);
    switch (either4._tag) {
      case "Left":
        return zipRight(f(either4.left), failCause(cause3));
      case "Right":
        return failCause(cause3);
    }
  },
  onSuccess: succeed
}));
var tapErrorTag = /* @__PURE__ */ dual(3, (self2, k, f) => tapError(self2, (e) => {
  if (isTagged(e, k)) {
    return f(e);
  }
  return void_;
}));
var tapErrorCause = /* @__PURE__ */ dual(2, (self2, f) => matchCauseEffect(self2, {
  onFailure: (cause3) => zipRight(f(cause3), failCause(cause3)),
  onSuccess: succeed
}));
var timed = (self2) => timedWith(self2, currentTimeNanos2);
var timedWith = /* @__PURE__ */ dual(2, (self2, nanos2) => summarized(self2, nanos2, (start3, end3) => nanos(end3 - start3)));
var tracerWith3 = tracerWith2;
var tracer = /* @__PURE__ */ tracerWith3(succeed);
var tryPromise = (arg) => {
  let evaluate;
  let catcher = void 0;
  if (typeof arg === "function") {
    evaluate = arg;
  } else {
    evaluate = arg.try;
    catcher = arg.catch;
  }
  if (evaluate.length >= 1) {
    return async((resolve, signal) => {
      try {
        evaluate(signal).then((a) => resolve(exitSucceed(a)), (e) => resolve(catcher ? failSync(() => catcher(e)) : fail2(new UnknownException(e))));
      } catch (e) {
        resolve(catcher ? failSync(() => catcher(e)) : fail2(new UnknownException(e)));
      }
    });
  }
  return async((resolve) => {
    try {
      evaluate().then((a) => resolve(exitSucceed(a)), (e) => resolve(catcher ? failSync(() => catcher(e)) : fail2(new UnknownException(e))));
    } catch (e) {
      resolve(catcher ? failSync(() => catcher(e)) : fail2(new UnknownException(e)));
    }
  });
};
var tryMap = /* @__PURE__ */ dual(2, (self2, options) => flatMap7(self2, (a) => try_({
  try: () => options.try(a),
  catch: options.catch
})));
var tryMapPromise = /* @__PURE__ */ dual(2, (self2, options) => flatMap7(self2, (a) => tryPromise({
  try: options.try.length >= 1 ? (signal) => options.try(a, signal) : () => options.try(a),
  catch: options.catch
})));
var unless = /* @__PURE__ */ dual(2, (self2, condition) => suspend(() => condition() ? succeedNone : asSome(self2)));
var unlessEffect = /* @__PURE__ */ dual(2, (self2, condition) => flatMap7(condition, (b) => b ? succeedNone : asSome(self2)));
var unsandbox = (self2) => mapErrorCause(self2, flatten3);
var updateFiberRefs = (f) => withFiberRuntime((state) => {
  state.setFiberRefs(f(state.id(), state.getFiberRefs()));
  return void_;
});
var updateService = /* @__PURE__ */ dual(3, (self2, tag, f) => mapInputContext(self2, (context5) => add2(context5, tag, f(unsafeGet3(context5, tag)))));
var when = /* @__PURE__ */ dual(2, (self2, condition) => suspend(() => condition() ? map8(self2, some2) : succeed(none2())));
var whenFiberRef = /* @__PURE__ */ dual(3, (self2, fiberRef, predicate) => flatMap7(fiberRefGet(fiberRef), (s) => predicate(s) ? map8(self2, (a) => [s, some2(a)]) : succeed([s, none2()])));
var whenRef = /* @__PURE__ */ dual(3, (self2, ref, predicate) => flatMap7(get12(ref), (s) => predicate(s) ? map8(self2, (a) => [s, some2(a)]) : succeed([s, none2()])));
var withMetric = /* @__PURE__ */ dual(2, (self2, metric) => metric(self2));
var serviceFunctionEffect = (getService, f) => (...args) => flatMap7(getService, (a) => f(a)(...args));
var serviceFunction = (getService, f) => (...args) => map8(getService, (a) => f(a)(...args));
var serviceFunctions = (getService) => new Proxy({}, {
  get(_target, prop, _receiver) {
    return (...args) => flatMap7(getService, (s) => s[prop](...args));
  }
});
var serviceConstants = (getService) => new Proxy({}, {
  get(_target, prop, _receiver) {
    return flatMap7(getService, (s) => isEffect(s[prop]) ? s[prop] : succeed(s[prop]));
  }
});
var serviceMembers = (getService) => ({
  functions: serviceFunctions(getService),
  constants: serviceConstants(getService)
});
var serviceOption = (tag) => map8(context(), getOption2(tag));
var serviceOptional = (tag) => flatMap7(context(), getOption2(tag));
var annotateCurrentSpan = function() {
  const args = arguments;
  return ignore(flatMap7(currentSpan, (span4) => sync(() => {
    if (typeof args[0] === "string") {
      span4.attribute(args[0], args[1]);
    } else {
      for (const key in args[0]) {
        span4.attribute(key, args[0][key]);
      }
    }
  })));
};
var annotateSpans = /* @__PURE__ */ dual((args) => isEffect(args[0]), function() {
  const args = arguments;
  return fiberRefLocallyWith(args[0], currentTracerSpanAnnotations, typeof args[1] === "string" ? set3(args[1], args[2]) : (annotations) => Object.entries(args[1]).reduce((acc, [key, value3]) => set3(acc, key, value3), annotations));
});
var currentParentSpan = /* @__PURE__ */ serviceOptional(spanTag);
var currentSpan = /* @__PURE__ */ flatMap7(/* @__PURE__ */ context(), (context5) => {
  const span4 = context5.unsafeMap.get(spanTag.key);
  return span4 !== void 0 && span4._tag === "Span" ? succeed(span4) : fail2(new NoSuchElementException());
});
var linkSpans = /* @__PURE__ */ dual((args) => isEffect(args[0]), (self2, span4, attributes) => fiberRefLocallyWith(self2, currentTracerSpanLinks, append2({
  _tag: "SpanLink",
  span: span4,
  attributes: attributes ?? {}
})));
var bigint02 = /* @__PURE__ */ BigInt(0);
var unsafeMakeSpan = (fiber, name, options) => {
  const enabled2 = fiber.getFiberRef(currentTracerEnabled);
  if (enabled2 === false) {
    return noopSpan(name);
  }
  const context5 = fiber.getFiberRef(currentContext);
  const services = fiber.getFiberRef(currentServices);
  const tracer3 = get3(services, tracerTag);
  const clock3 = get3(services, Clock);
  const timingEnabled = fiber.getFiberRef(currentTracerTimingEnabled);
  const fiberRefs3 = fiber.getFiberRefs();
  const annotationsFromEnv = get10(fiberRefs3, currentTracerSpanAnnotations);
  const linksFromEnv = get10(fiberRefs3, currentTracerSpanLinks);
  const parent = options.parent ? some2(options.parent) : options.root ? none2() : getOption2(context5, spanTag);
  const links = linksFromEnv._tag === "Some" ? options.links !== void 0 ? [...toReadonlyArray(linksFromEnv.value), ...options.links ?? []] : toReadonlyArray(linksFromEnv.value) : options.links ?? empty();
  const span4 = tracer3.span(name, parent, options.context ?? empty3(), links, timingEnabled ? clock3.unsafeCurrentTimeNanos() : bigint02, options.kind ?? "internal");
  if (typeof options.captureStackTrace === "function") {
    spanToTrace.set(span4, options.captureStackTrace);
  }
  if (annotationsFromEnv._tag === "Some") {
    forEach3(annotationsFromEnv.value, (value3, key) => span4.attribute(key, value3));
  }
  if (options.attributes !== void 0) {
    Object.entries(options.attributes).forEach(([k, v]) => span4.attribute(k, v));
  }
  return span4;
};
var makeSpan = (name, options) => {
  options = addSpanStackTrace(options);
  return withFiberRuntime((fiber) => succeed(unsafeMakeSpan(fiber, name, options)));
};
var spanAnnotations = /* @__PURE__ */ fiberRefGet(currentTracerSpanAnnotations);
var spanLinks = /* @__PURE__ */ fiberRefGet(currentTracerSpanLinks);
var endSpan = (span4, exit4, clock3, timingEnabled) => sync(() => {
  if (span4.status._tag === "Ended") {
    return;
  }
  if (exitIsFailure(exit4) && spanToTrace.has(span4)) {
    span4.attribute("code.stacktrace", spanToTrace.get(span4)());
  }
  span4.end(timingEnabled ? clock3.unsafeCurrentTimeNanos() : bigint02, exit4);
});
var useSpan = (name, ...args) => {
  const options = addSpanStackTrace(args.length === 1 ? void 0 : args[0]);
  const evaluate = args[args.length - 1];
  return withFiberRuntime((fiber) => {
    const span4 = unsafeMakeSpan(fiber, name, options);
    const timingEnabled = fiber.getFiberRef(currentTracerTimingEnabled);
    const clock3 = get3(fiber.getFiberRef(currentServices), clockTag);
    return onExit(evaluate(span4), (exit4) => endSpan(span4, exit4, clock3, timingEnabled));
  });
};
var withParentSpan = /* @__PURE__ */ dual(2, (self2, span4) => provideService(self2, spanTag, span4));
var withSpan = function() {
  const dataFirst = typeof arguments[0] !== "string";
  const name = dataFirst ? arguments[1] : arguments[0];
  const options = addSpanStackTrace(dataFirst ? arguments[2] : arguments[1]);
  if (dataFirst) {
    const self2 = arguments[0];
    return useSpan(name, options, (span4) => withParentSpan(self2, span4));
  }
  return (self2) => useSpan(name, options, (span4) => withParentSpan(self2, span4));
};
var functionWithSpan = (options) => function() {
  let captureStackTrace = options.captureStackTrace ?? false;
  if (options.captureStackTrace !== false) {
    const limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 2;
    const error = new Error();
    Error.stackTraceLimit = limit;
    let cache = false;
    captureStackTrace = () => {
      if (cache !== false) {
        return cache;
      }
      if (error.stack) {
        const stack = error.stack.trim().split("\n");
        cache = stack.slice(2).join("\n").trim();
        return cache;
      }
    };
  }
  return suspend(() => {
    const opts = typeof options.options === "function" ? options.options.apply(null, arguments) : options.options;
    return withSpan(suspend(() => internalCall(() => options.body.apply(this, arguments))), opts.name, {
      ...opts,
      captureStackTrace
    });
  });
};
var fromNullable2 = (value3) => value3 == null ? fail2(new NoSuchElementException()) : succeed(value3);
var optionFromOptional = (self2) => catchAll(map8(self2, some2), (error) => isNoSuchElementException(error) ? succeedNone : fail2(error));

// node_modules/effect/dist/esm/Effectable.js
var EffectTypeId3 = EffectTypeId;
var EffectPrototype2 = EffectPrototype;

// node_modules/effect/dist/esm/internal/executionStrategy.js
var OP_SEQUENTIAL2 = "Sequential";
var OP_PARALLEL2 = "Parallel";
var OP_PARALLEL_N = "ParallelN";
var sequential2 = {
  _tag: OP_SEQUENTIAL2
};
var parallel2 = {
  _tag: OP_PARALLEL2
};
var parallelN = (parallelism) => ({
  _tag: OP_PARALLEL_N,
  parallelism
});
var isSequential = (self2) => self2._tag === OP_SEQUENTIAL2;
var isParallel = (self2) => self2._tag === OP_PARALLEL2;

// node_modules/effect/dist/esm/ExecutionStrategy.js
var sequential3 = sequential2;
var parallel3 = parallel2;
var parallelN2 = parallelN;

// node_modules/effect/dist/esm/FiberRefsPatch.js
var diff6 = diff5;
var patch7 = patch6;

// node_modules/effect/dist/esm/internal/fiberStatus.js
var FiberStatusSymbolKey = "effect/FiberStatus";
var FiberStatusTypeId = /* @__PURE__ */ Symbol.for(FiberStatusSymbolKey);
var OP_DONE = "Done";
var OP_RUNNING = "Running";
var OP_SUSPENDED = "Suspended";
var DoneHash = /* @__PURE__ */ string(`${FiberStatusSymbolKey}-${OP_DONE}`);
var Done = class {
  [FiberStatusTypeId] = FiberStatusTypeId;
  _tag = OP_DONE;
  [symbol]() {
    return DoneHash;
  }
  [symbol2](that) {
    return isFiberStatus(that) && that._tag === OP_DONE;
  }
};
var Running = class {
  runtimeFlags;
  [FiberStatusTypeId] = FiberStatusTypeId;
  _tag = OP_RUNNING;
  constructor(runtimeFlags2) {
    this.runtimeFlags = runtimeFlags2;
  }
  [symbol]() {
    return pipe(hash(FiberStatusSymbolKey), combine(hash(this._tag)), combine(hash(this.runtimeFlags)), cached(this));
  }
  [symbol2](that) {
    return isFiberStatus(that) && that._tag === OP_RUNNING && this.runtimeFlags === that.runtimeFlags;
  }
};
var Suspended = class {
  runtimeFlags;
  blockingOn;
  [FiberStatusTypeId] = FiberStatusTypeId;
  _tag = OP_SUSPENDED;
  constructor(runtimeFlags2, blockingOn) {
    this.runtimeFlags = runtimeFlags2;
    this.blockingOn = blockingOn;
  }
  [symbol]() {
    return pipe(hash(FiberStatusSymbolKey), combine(hash(this._tag)), combine(hash(this.runtimeFlags)), combine(hash(this.blockingOn)), cached(this));
  }
  [symbol2](that) {
    return isFiberStatus(that) && that._tag === OP_SUSPENDED && this.runtimeFlags === that.runtimeFlags && equals(this.blockingOn, that.blockingOn);
  }
};
var done3 = /* @__PURE__ */ new Done();
var running = (runtimeFlags2) => new Running(runtimeFlags2);
var suspended = (runtimeFlags2, blockingOn) => new Suspended(runtimeFlags2, blockingOn);
var isFiberStatus = (u) => hasProperty(u, FiberStatusTypeId);
var isDone = (self2) => self2._tag === OP_DONE;

// node_modules/effect/dist/esm/FiberStatus.js
var done4 = done3;
var running2 = running;
var suspended2 = suspended;
var isDone2 = isDone;

// node_modules/effect/dist/esm/Micro.js
var TypeId13 = /* @__PURE__ */ Symbol.for("effect/Micro");
var runSymbol = /* @__PURE__ */ Symbol.for("effect/Micro/runSymbol");
var isMicro = (u) => typeof u === "object" && u !== null && TypeId13 in u;
var MicroCauseTypeId = /* @__PURE__ */ Symbol.for("effect/Micro/MicroCause");
var microCauseVariance = {
  _E: identity
};
var MicroCauseImpl = class extends globalThis.Error {
  _tag;
  traces;
  [MicroCauseTypeId];
  constructor(_tag, originalError, traces) {
    const causeName = `MicroCause.${_tag}`;
    let name;
    let message;
    let stack;
    if (originalError instanceof globalThis.Error) {
      name = `(${causeName}) ${originalError.name}`;
      message = originalError.message;
      const messageLines = message.split("\n").length;
      stack = originalError.stack ? `(${causeName}) ${originalError.stack.split("\n").slice(0, messageLines + 3).join("\n")}` : `${name}: ${message}`;
    } else {
      name = causeName;
      message = toStringUnknown(originalError, 0);
      stack = `${name}: ${message}`;
    }
    if (traces.length > 0) {
      stack += `
    ${traces.join("\n    ")}`;
    }
    super(message);
    this._tag = _tag;
    this.traces = traces;
    this[MicroCauseTypeId] = microCauseVariance;
    this.name = name;
    this.stack = stack;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
  toString() {
    return this.stack;
  }
  [NodeInspectSymbol]() {
    return this.stack;
  }
};
var DieImpl = class extends MicroCauseImpl {
  defect;
  constructor(defect, traces = []) {
    super("Die", defect, traces);
    this.defect = defect;
  }
};
var causeDie = (defect, traces = []) => new DieImpl(defect, traces);
var InterruptImpl = class extends MicroCauseImpl {
  constructor(traces = []) {
    super("Interrupt", "interrupted", traces);
  }
};
var causeInterrupt = (traces = []) => new InterruptImpl(traces);
var exitInterrupt2 = /* @__PURE__ */ left2(/* @__PURE__ */ causeInterrupt());
var exitSucceed2 = right2;
var exitDie2 = (defect) => left2(causeDie(defect));
var EnvTypeId = /* @__PURE__ */ Symbol.for("effect/Micro/Env");
var EnvRefTypeId = /* @__PURE__ */ Symbol.for("effect/Micro/EnvRef");
var EnvProto = {
  [EnvTypeId]: {
    _R: identity
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var envMake = (refs) => {
  const self2 = Object.create(EnvProto);
  self2.refs = refs;
  return self2;
};
var envUnsafeMakeEmpty = () => {
  const controller = new AbortController();
  const refs = /* @__PURE__ */ Object.create(null);
  refs[currentAbortController.key] = controller;
  refs[currentAbortSignal.key] = controller.signal;
  refs[currentScheduler.key] = new MicroSchedulerDefault();
  return envMake(refs);
};
var envGet = /* @__PURE__ */ dual(2, (self2, ref) => ref.key in self2.refs ? self2.refs[ref.key] : ref.initial);
var envSet = /* @__PURE__ */ dual(3, (self2, ref, value3) => {
  const refs = Object.assign(/* @__PURE__ */ Object.create(null), self2.refs);
  refs[ref.key] = value3;
  return envMake(refs);
});
var envMutate = /* @__PURE__ */ dual(2, (self2, f) => envMake(f(Object.assign(/* @__PURE__ */ Object.create(null), self2.refs))));
var setImmediate2 = "setImmediate" in globalThis ? globalThis.setImmediate : (f) => setTimeout(f, 0);
var MicroSchedulerDefault = class {
  tasks = [];
  running = false;
  /**
   * @since 3.5.9
   */
  scheduleTask(task, _priority) {
    this.tasks.push(task);
    if (!this.running) {
      this.running = true;
      setImmediate2(this.afterScheduled);
    }
  }
  /**
   * @since 3.5.9
   */
  afterScheduled = () => {
    this.running = false;
    this.runTasks();
  };
  /**
   * @since 3.5.9
   */
  runTasks() {
    const tasks = this.tasks;
    this.tasks = [];
    for (let i = 0, len = tasks.length; i < len; i++) {
      tasks[i]();
    }
  }
  /**
   * @since 3.5.9
   */
  shouldYield(_env) {
    return false;
  }
  /**
   * @since 3.5.9
   */
  flush() {
    while (this.tasks.length > 0) {
      this.runTasks();
    }
  }
};
var EnvRefProto = {
  [EnvRefTypeId]: EnvRefTypeId
};
var envRefMake = (key, initial) => globalValue(key, () => {
  const self2 = Object.create(EnvRefProto);
  self2.key = key;
  self2.initial = initial();
  return self2;
});
var currentAbortController = /* @__PURE__ */ envRefMake("effect/Micro/currentAbortController", () => void 0);
var currentAbortSignal = /* @__PURE__ */ envRefMake("effect/Micro/currentAbortSignal", () => void 0);
var currentContext2 = /* @__PURE__ */ envRefMake("effect/Micro/currentContext", () => empty3());
var currentConcurrency2 = /* @__PURE__ */ envRefMake("effect/Micro/currentConcurrency", () => "unbounded");
var currentMaxDepthBeforeYield = /* @__PURE__ */ envRefMake("effect/Micro/currentMaxDepthBeforeYield", () => 2048);
var currentInterruptible = /* @__PURE__ */ envRefMake("effect/Micro/currentInterruptible", () => true);
var currentScheduler = /* @__PURE__ */ envRefMake("effect/Micro/currentScheduler", () => new MicroSchedulerDefault());
var MicroProto = {
  ...EffectPrototype2,
  _op: "Micro",
  [TypeId13]: {
    _A: identity,
    _E: identity,
    _R: identity
  },
  [Symbol.iterator]() {
    return new SingleShotGen2(new YieldWrap(this));
  }
};
var microDepthState = /* @__PURE__ */ globalValue("effect/Micro/microDepthState", () => ({
  depth: 0,
  maxDepthBeforeYield: currentMaxDepthBeforeYield.initial
}));
var unsafeMake7 = (run) => {
  const self2 = Object.create(MicroProto);
  self2[runSymbol] = run;
  return self2;
};
var unsafeMakeOptions = (run, checkAbort) => unsafeMake7(function execute(env, onExit3) {
  if (checkAbort && env.refs[currentInterruptible.key] !== false && env.refs[currentAbortSignal.key].aborted) {
    return onExit3(exitInterrupt2);
  }
  microDepthState.depth++;
  if (microDepthState.depth === 1) {
    microDepthState.maxDepthBeforeYield = envGet(env, currentMaxDepthBeforeYield);
  }
  const scheduler = env.refs[currentScheduler.key];
  if (microDepthState.depth >= microDepthState.maxDepthBeforeYield || scheduler.shouldYield(env)) {
    scheduler.scheduleTask(() => execute(env, onExit3), 0);
  } else {
    try {
      run(env, onExit3);
    } catch (err) {
      onExit3(exitDie2(err));
    }
  }
  microDepthState.depth--;
});
var make29 = (run) => unsafeMakeOptions(run, true);
var fromExit = (self2) => make29(function(_env, onExit3) {
  onExit3(self2);
});
var succeed3 = (a) => fromExit(exitSucceed2(a));
var sync2 = (evaluate) => make29(function(_env, onExit3) {
  onExit3(exitSucceed2(evaluate()));
});
var suspend2 = (evaluate) => make29(function(env, onExit3) {
  evaluate()[runSymbol](env, onExit3);
});
var void_2 = /* @__PURE__ */ succeed3(void 0);
var async2 = (register) => make29(function(env, onExit3) {
  let resumed = false;
  const controller = register.length > 1 ? new AbortController() : void 0;
  const signal = envGet(env, currentAbortSignal);
  let cleanup = void 0;
  function onAbort() {
    if (cleanup) {
      resume2(uninterruptible2(andThen4(cleanup, fromExit(exitInterrupt2))));
    } else {
      resume2(fromExit(exitInterrupt2));
    }
    if (controller !== void 0) {
      controller.abort();
    }
  }
  function resume2(effect2) {
    if (resumed) {
      return;
    }
    resumed = true;
    signal.removeEventListener("abort", onAbort);
    effect2[runSymbol](env, onExit3);
  }
  cleanup = controller === void 0 ? register(resume2) : register(resume2, controller.signal);
  if (resumed) return;
  signal.addEventListener("abort", onAbort);
});
var map9 = /* @__PURE__ */ dual(2, (self2, f) => make29(function(env, onExit3) {
  self2[runSymbol](env, function(exit4) {
    onExit3(exit4._tag === "Left" ? exit4 : exitSucceed2(f(exit4.right)));
  });
}));
var flatMap8 = /* @__PURE__ */ dual(2, (self2, f) => make29(function(env, onExit3) {
  self2[runSymbol](env, function(exit4) {
    if (exit4._tag === "Left") {
      return onExit3(exit4);
    }
    f(exit4.right)[runSymbol](env, onExit3);
  });
}));
var andThen4 = /* @__PURE__ */ dual(2, (self2, f) => make29(function(env, onExit3) {
  self2[runSymbol](env, function(exit4) {
    if (exit4._tag === "Left") {
      return onExit3(exit4);
    } else if (envGet(env, currentAbortSignal).aborted) {
      return onExit3(exitInterrupt2);
    }
    const value3 = isMicro(f) ? f : typeof f === "function" ? f(exit4.right) : f;
    if (isMicro(value3)) {
      value3[runSymbol](env, onExit3);
    } else {
      onExit3(exitSucceed2(value3));
    }
  });
}));
var asVoid2 = (self2) => map9(self2, (_) => void 0);
var exit2 = (self2) => make29(function(env, onExit3) {
  self2[runSymbol](env, function(exit4) {
    onExit3(exitSucceed2(exit4));
  });
});
function forkSignal(env) {
  const controller = new AbortController();
  const parentSignal = envGet(env, currentAbortSignal);
  function onAbort() {
    controller.abort();
    parentSignal.removeEventListener("abort", onAbort);
  }
  parentSignal.addEventListener("abort", onAbort);
  const envWithSignal = envMutate(env, function(refs) {
    refs[currentAbortController.key] = controller;
    refs[currentAbortSignal.key] = controller.signal;
    return refs;
  });
  return [envWithSignal, onAbort];
}
var MicroScopeTypeId = /* @__PURE__ */ Symbol.for("effect/Micro/MicroScope");
var MicroScopeImpl = class _MicroScopeImpl {
  [MicroScopeTypeId];
  state = {
    _tag: "Open",
    finalizers: /* @__PURE__ */ new Set()
  };
  constructor() {
    this[MicroScopeTypeId] = MicroScopeTypeId;
  }
  unsafeAddFinalizer(finalizer) {
    if (this.state._tag === "Open") {
      this.state.finalizers.add(finalizer);
    }
  }
  addFinalizer(finalizer) {
    return suspend2(() => {
      if (this.state._tag === "Open") {
        this.state.finalizers.add(finalizer);
        return void_2;
      }
      return finalizer(this.state.exit);
    });
  }
  unsafeRemoveFinalizer(finalizer) {
    if (this.state._tag === "Open") {
      this.state.finalizers.delete(finalizer);
    }
  }
  close(microExit) {
    return suspend2(() => {
      if (this.state._tag === "Open") {
        const finalizers = Array.from(this.state.finalizers).reverse();
        this.state = {
          _tag: "Closed",
          exit: microExit
        };
        return flatMap8(forEach4(finalizers, (finalizer) => exit2(finalizer(microExit))), (exits) => asVoid2(fromExit(all(exits))));
      }
      return void_2;
    });
  }
  get fork() {
    return sync2(() => {
      const newScope = new _MicroScopeImpl();
      if (this.state._tag === "Closed") {
        newScope.state = this.state;
        return newScope;
      }
      function fin(exit4) {
        return newScope.close(exit4);
      }
      this.state.finalizers.add(fin);
      newScope.unsafeAddFinalizer((_) => sync2(() => this.unsafeRemoveFinalizer(fin)));
      return newScope;
    });
  }
};
var uninterruptible2 = (self2) => unsafeMakeOptions(function(env, onExit3) {
  const nextEnv = envMutate(env, function(env2) {
    env2[currentInterruptible.key] = false;
    env2[currentAbortSignal.key] = new AbortController().signal;
    return env2;
  });
  self2[runSymbol](nextEnv, onExit3);
}, false);
var forEach4 = (iterable, f, options) => make29(function(env, onExit3) {
  const concurrencyOption = options?.concurrency === "inherit" ? envGet(env, currentConcurrency2) : options?.concurrency ?? 1;
  const concurrency = concurrencyOption === "unbounded" ? Number.POSITIVE_INFINITY : Math.max(1, concurrencyOption);
  const [envWithSignal, onAbort] = forkSignal(env);
  let result = void 0;
  const items = Array.from(iterable);
  let length2 = items.length;
  const out = options?.discard ? void 0 : new Array(length2);
  let index = 0;
  let inProgress = 0;
  let doneCount = 0;
  let pumping = false;
  function pump() {
    pumping = true;
    while (inProgress < concurrency && index < length2) {
      const currentIndex = index;
      const item = items[currentIndex];
      index++;
      inProgress++;
      try {
        f(item, currentIndex)[runSymbol](envWithSignal, function(exit4) {
          if (exit4._tag === "Left") {
            if (result === void 0) {
              result = exit4;
              length2 = index;
              onAbort();
            }
          } else if (out !== void 0) {
            out[currentIndex] = exit4.right;
          }
          doneCount++;
          inProgress--;
          if (doneCount === length2) {
            onExit3(result ?? right2(out));
          } else if (!pumping && inProgress < concurrency) {
            pump();
          }
        });
      } catch (err) {
        result = exitDie2(err);
        length2 = index;
        onAbort();
      }
    }
    pumping = false;
  }
  pump();
});
var HandleTypeId = /* @__PURE__ */ Symbol.for("effect/Micro/Handle");
var HandleImpl = class {
  parentSignal;
  [HandleTypeId];
  observers = /* @__PURE__ */ new Set();
  _exit = void 0;
  _controller;
  isRoot;
  constructor(parentSignal, controller) {
    this.parentSignal = parentSignal;
    this[HandleTypeId] = HandleTypeId;
    this.isRoot = controller !== void 0;
    this._controller = controller ?? new AbortController();
    if (!this.isRoot) {
      parentSignal.addEventListener("abort", this.unsafeInterrupt);
    }
  }
  unsafePoll() {
    return this._exit ?? null;
  }
  unsafeInterrupt = () => {
    this._controller.abort();
  };
  emit(exit4) {
    if (this._exit) {
      return;
    }
    this._exit = exit4;
    if (!this.isRoot) {
      this.parentSignal.removeEventListener("abort", this.unsafeInterrupt);
    }
    this.observers.forEach((observer) => observer(exit4));
    this.observers.clear();
  }
  addObserver(observer) {
    if (this._exit) {
      return observer(this._exit);
    }
    this.observers.add(observer);
  }
  removeObserver(observer) {
    this.observers.delete(observer);
  }
  get await() {
    return suspend2(() => {
      if (this._exit) {
        return succeed3(this._exit);
      }
      return async2((resume2) => {
        function observer(exit4) {
          resume2(succeed3(exit4));
        }
        this.addObserver(observer);
        return sync2(() => {
          this.removeObserver(observer);
        });
      });
    });
  }
  get join() {
    return flatMap8(this.await, fromExit);
  }
  get interrupt() {
    return suspend2(() => {
      this.unsafeInterrupt();
      return this.await;
    });
  }
};

// node_modules/effect/dist/esm/Scheduler.js
var PriorityBuckets = class {
  /**
   * @since 2.0.0
   */
  buckets = [];
  /**
   * @since 2.0.0
   */
  scheduleTask(task, priority) {
    const length2 = this.buckets.length;
    let bucket = void 0;
    let index = 0;
    for (; index < length2; index++) {
      if (this.buckets[index][0] <= priority) {
        bucket = this.buckets[index];
      } else {
        break;
      }
    }
    if (bucket && bucket[0] === priority) {
      bucket[1].push(task);
    } else if (index === length2) {
      this.buckets.push([priority, [task]]);
    } else {
      this.buckets.splice(index, 0, [priority, [task]]);
    }
  }
};
var MixedScheduler = class {
  maxNextTickBeforeTimer;
  /**
   * @since 2.0.0
   */
  running = false;
  /**
   * @since 2.0.0
   */
  tasks = /* @__PURE__ */ new PriorityBuckets();
  constructor(maxNextTickBeforeTimer) {
    this.maxNextTickBeforeTimer = maxNextTickBeforeTimer;
  }
  /**
   * @since 2.0.0
   */
  starveInternal(depth) {
    const tasks = this.tasks.buckets;
    this.tasks.buckets = [];
    for (const [_, toRun] of tasks) {
      for (let i = 0; i < toRun.length; i++) {
        toRun[i]();
      }
    }
    if (this.tasks.buckets.length === 0) {
      this.running = false;
    } else {
      this.starve(depth);
    }
  }
  /**
   * @since 2.0.0
   */
  starve(depth = 0) {
    if (depth >= this.maxNextTickBeforeTimer) {
      setTimeout(() => this.starveInternal(0), 0);
    } else {
      Promise.resolve(void 0).then(() => this.starveInternal(depth + 1));
    }
  }
  /**
   * @since 2.0.0
   */
  shouldYield(fiber) {
    return fiber.currentOpCount > fiber.getFiberRef(currentMaxOpsBeforeYield) ? fiber.getFiberRef(currentSchedulingPriority) : false;
  }
  /**
   * @since 2.0.0
   */
  scheduleTask(task, priority) {
    this.tasks.scheduleTask(task, priority);
    if (!this.running) {
      this.running = true;
      this.starve();
    }
  }
};
var defaultScheduler = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Scheduler/defaultScheduler"), () => new MixedScheduler(2048));
var SyncScheduler = class {
  /**
   * @since 2.0.0
   */
  tasks = /* @__PURE__ */ new PriorityBuckets();
  /**
   * @since 2.0.0
   */
  deferred = false;
  /**
   * @since 2.0.0
   */
  scheduleTask(task, priority) {
    if (this.deferred) {
      defaultScheduler.scheduleTask(task, priority);
    } else {
      this.tasks.scheduleTask(task, priority);
    }
  }
  /**
   * @since 2.0.0
   */
  shouldYield(fiber) {
    return fiber.currentOpCount > fiber.getFiberRef(currentMaxOpsBeforeYield) ? fiber.getFiberRef(currentSchedulingPriority) : false;
  }
  /**
   * @since 2.0.0
   */
  flush() {
    while (this.tasks.buckets.length > 0) {
      const tasks = this.tasks.buckets;
      this.tasks.buckets = [];
      for (const [_, toRun] of tasks) {
        for (let i = 0; i < toRun.length; i++) {
          toRun[i]();
        }
      }
    }
    this.deferred = true;
  }
};
var currentScheduler2 = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentScheduler"), () => fiberRefUnsafeMake(defaultScheduler));
var withScheduler = /* @__PURE__ */ dual(2, (self2, scheduler) => fiberRefLocally(self2, currentScheduler2, scheduler));

// node_modules/effect/dist/esm/internal/completedRequestMap.js
var currentRequestMap = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentRequestMap"), () => fiberRefUnsafeMake(/* @__PURE__ */ new Map()));

// node_modules/effect/dist/esm/internal/concurrency.js
var match7 = (concurrency, sequential4, unbounded2, bounded) => {
  switch (concurrency) {
    case void 0:
      return sequential4();
    case "unbounded":
      return unbounded2();
    case "inherit":
      return fiberRefGetWith(currentConcurrency, (concurrency2) => concurrency2 === "unbounded" ? unbounded2() : concurrency2 > 1 ? bounded(concurrency2) : sequential4());
    default:
      return concurrency > 1 ? bounded(concurrency) : sequential4();
  }
};
var matchSimple = (concurrency, sequential4, concurrent) => {
  switch (concurrency) {
    case void 0:
      return sequential4();
    case "unbounded":
      return concurrent();
    case "inherit":
      return fiberRefGetWith(currentConcurrency, (concurrency2) => concurrency2 === "unbounded" || concurrency2 > 1 ? concurrent() : sequential4());
    default:
      return concurrency > 1 ? concurrent() : sequential4();
  }
};

// node_modules/effect/dist/esm/internal/fiberMessage.js
var OP_INTERRUPT_SIGNAL = "InterruptSignal";
var OP_STATEFUL = "Stateful";
var OP_RESUME = "Resume";
var OP_YIELD_NOW = "YieldNow";
var interruptSignal = (cause3) => ({
  _tag: OP_INTERRUPT_SIGNAL,
  cause: cause3
});
var stateful = (onFiber) => ({
  _tag: OP_STATEFUL,
  onFiber
});
var resume = (effect2) => ({
  _tag: OP_RESUME,
  effect: effect2
});
var yieldNow2 = () => ({
  _tag: OP_YIELD_NOW
});

// node_modules/effect/dist/esm/internal/fiberScope.js
var FiberScopeSymbolKey = "effect/FiberScope";
var FiberScopeTypeId = /* @__PURE__ */ Symbol.for(FiberScopeSymbolKey);
var Global = class {
  [FiberScopeTypeId] = FiberScopeTypeId;
  fiberId = none4;
  roots = /* @__PURE__ */ new Set();
  add(_runtimeFlags, child) {
    this.roots.add(child);
    child.addObserver(() => {
      this.roots.delete(child);
    });
  }
};
var Local = class {
  fiberId;
  parent;
  [FiberScopeTypeId] = FiberScopeTypeId;
  constructor(fiberId3, parent) {
    this.fiberId = fiberId3;
    this.parent = parent;
  }
  add(_runtimeFlags, child) {
    this.parent.tell(stateful((parentFiber) => {
      parentFiber.addChild(child);
      child.addObserver(() => {
        parentFiber.removeChild(child);
      });
    }));
  }
};
var unsafeMake8 = (fiber) => {
  return new Local(fiber.id(), fiber);
};
var globalScope = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberScope/Global"), () => new Global());

// node_modules/effect/dist/esm/internal/fiber.js
var FiberSymbolKey = "effect/Fiber";
var FiberTypeId = /* @__PURE__ */ Symbol.for(FiberSymbolKey);
var fiberVariance = {
  /* c8 ignore next */
  _E: (_) => _,
  /* c8 ignore next */
  _A: (_) => _
};
var fiberProto = {
  [FiberTypeId]: fiberVariance,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var RuntimeFiberSymbolKey = "effect/Fiber";
var RuntimeFiberTypeId = /* @__PURE__ */ Symbol.for(RuntimeFiberSymbolKey);
var _await2 = (self2) => self2.await;
var inheritAll = (self2) => self2.inheritAll;
var interruptAsFork = /* @__PURE__ */ dual(2, (self2, fiberId3) => self2.interruptAsFork(fiberId3));
var join2 = (self2) => zipLeft(flatten4(self2.await), self2.inheritAll);
var never2 = {
  ...fiberProto,
  id: () => none4,
  await: never,
  children: /* @__PURE__ */ succeed([]),
  inheritAll: never,
  poll: /* @__PURE__ */ succeed(/* @__PURE__ */ none2()),
  interruptAsFork: () => never
};
var currentFiberURI = "effect/FiberCurrent";

// node_modules/effect/dist/esm/internal/logger.js
var LoggerSymbolKey = "effect/Logger";
var LoggerTypeId = /* @__PURE__ */ Symbol.for(LoggerSymbolKey);
var loggerVariance = {
  /* c8 ignore next */
  _Message: (_) => _,
  /* c8 ignore next */
  _Output: (_) => _
};
var makeLogger = (log3) => ({
  [LoggerTypeId]: loggerVariance,
  log: log3,
  pipe() {
    return pipeArguments(this, arguments);
  }
});
var mapInput3 = /* @__PURE__ */ dual(2, (self2, f) => makeLogger((options) => self2.log({
  ...options,
  message: f(options.message)
})));
var mapInputOptions = /* @__PURE__ */ dual(2, (self2, f) => makeLogger((options) => self2.log(f(options))));
var filterLogLevel = /* @__PURE__ */ dual(2, (self2, f) => makeLogger((options) => f(options.logLevel) ? some2(self2.log(options)) : none2()));
var map10 = /* @__PURE__ */ dual(2, (self2, f) => makeLogger((options) => f(self2.log(options))));
var none7 = {
  [LoggerTypeId]: loggerVariance,
  log: constVoid,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var simple = (log3) => ({
  [LoggerTypeId]: loggerVariance,
  log: ({
    message
  }) => log3(message),
  pipe() {
    return pipeArguments(this, arguments);
  }
});
var succeed4 = (value3) => {
  return simple(() => value3);
};
var sync3 = (evaluate) => {
  return simple(evaluate);
};
var zip3 = /* @__PURE__ */ dual(2, (self2, that) => makeLogger((options) => [self2.log(options), that.log(options)]));
var zipLeft2 = /* @__PURE__ */ dual(2, (self2, that) => map10(zip3(self2, that), (tuple2) => tuple2[0]));
var zipRight2 = /* @__PURE__ */ dual(2, (self2, that) => map10(zip3(self2, that), (tuple2) => tuple2[1]));
var stringLogger = /* @__PURE__ */ makeLogger(({
  annotations,
  cause: cause3,
  date: date3,
  fiberId: fiberId3,
  logLevel: logLevel3,
  message,
  spans
}) => {
  const nowMillis = date3.getTime();
  const outputArray = [`timestamp=${date3.toISOString()}`, `level=${logLevel3.label}`, `fiber=${threadName(fiberId3)}`];
  let output = outputArray.join(" ");
  const messageArr = ensure(message);
  for (let i = 0; i < messageArr.length; i++) {
    const stringMessage = toStringUnknown(messageArr[i]);
    if (stringMessage.length > 0) {
      output = output + " message=";
      output = appendQuoted(stringMessage, output);
    }
  }
  if (cause3 != null && cause3._tag !== "Empty") {
    output = output + " cause=";
    output = appendQuoted(pretty(cause3, {
      renderErrorCause: true
    }), output);
  }
  if (isCons(spans)) {
    output = output + " ";
    let first2 = true;
    for (const span4 of spans) {
      if (first2) {
        first2 = false;
      } else {
        output = output + " ";
      }
      output = output + pipe(span4, render2(nowMillis));
    }
  }
  if (size4(annotations) > 0) {
    output = output + " ";
    let first2 = true;
    for (const [key, value3] of annotations) {
      if (first2) {
        first2 = false;
      } else {
        output = output + " ";
      }
      output = output + filterKeyName(key);
      output = output + "=";
      output = appendQuoted(toStringUnknown(value3), output);
    }
  }
  return output;
});
var escapeDoubleQuotes = (str) => `"${str.replace(/\\([\s\S])|(")/g, "\\$1$2")}"`;
var textOnly = /^[^\s"=]+$/;
var appendQuoted = (label, output) => output + (label.match(textOnly) ? label : escapeDoubleQuotes(label));
var logfmtLogger = /* @__PURE__ */ makeLogger(({
  annotations,
  cause: cause3,
  date: date3,
  fiberId: fiberId3,
  logLevel: logLevel3,
  message,
  spans
}) => {
  const nowMillis = date3.getTime();
  const outputArray = [`timestamp=${date3.toISOString()}`, `level=${logLevel3.label}`, `fiber=${threadName(fiberId3)}`];
  let output = outputArray.join(" ");
  const messageArr = ensure(message);
  for (let i = 0; i < messageArr.length; i++) {
    const stringMessage = toStringUnknown(messageArr[i], 0);
    if (stringMessage.length > 0) {
      output = output + " message=";
      output = appendQuotedLogfmt(stringMessage, output);
    }
  }
  if (cause3 != null && cause3._tag !== "Empty") {
    output = output + " cause=";
    output = appendQuotedLogfmt(pretty(cause3, {
      renderErrorCause: true
    }), output);
  }
  if (isCons(spans)) {
    output = output + " ";
    let first2 = true;
    for (const span4 of spans) {
      if (first2) {
        first2 = false;
      } else {
        output = output + " ";
      }
      output = output + pipe(span4, renderLogSpanLogfmt(nowMillis));
    }
  }
  if (size4(annotations) > 0) {
    output = output + " ";
    let first2 = true;
    for (const [key, value3] of annotations) {
      if (first2) {
        first2 = false;
      } else {
        output = output + " ";
      }
      output = output + filterKeyName(key);
      output = output + "=";
      output = appendQuotedLogfmt(toStringUnknown(value3, 0), output);
    }
  }
  return output;
});
var structuredLogger = /* @__PURE__ */ makeLogger(({
  annotations,
  cause: cause3,
  date: date3,
  fiberId: fiberId3,
  logLevel: logLevel3,
  message,
  spans
}) => {
  const now = date3.getTime();
  const annotationsObj = {};
  const spansObj = {};
  if (size4(annotations) > 0) {
    for (const [k, v] of annotations) {
      annotationsObj[k] = structuredMessage(v);
    }
  }
  if (isCons(spans)) {
    for (const span4 of spans) {
      spansObj[span4.label] = now - span4.startTime;
    }
  }
  const messageArr = ensure(message);
  return {
    message: messageArr.length === 1 ? structuredMessage(messageArr[0]) : messageArr.map(structuredMessage),
    logLevel: logLevel3.label,
    timestamp: date3.toISOString(),
    cause: isEmpty5(cause3) ? void 0 : pretty(cause3, {
      renderErrorCause: true
    }),
    annotations: annotationsObj,
    spans: spansObj,
    fiberId: threadName(fiberId3)
  };
});
var structuredMessage = (u) => {
  switch (typeof u) {
    case "bigint":
    case "function":
    case "symbol": {
      return String(u);
    }
    default: {
      return u;
    }
  }
};
var jsonLogger = /* @__PURE__ */ map10(structuredLogger, stringifyCircular);
var filterKeyName = (key) => key.replace(/[\s="]/g, "_");
var escapeDoubleQuotesLogfmt = (str) => JSON.stringify(str);
var appendQuotedLogfmt = (label, output) => output + (label.match(textOnly) ? label : escapeDoubleQuotesLogfmt(label));
var renderLogSpanLogfmt = (now) => (self2) => {
  const label = filterKeyName(self2.label);
  return `${label}=${now - self2.startTime}ms`;
};
var isLogger = (u) => {
  return typeof u === "object" && u != null && LoggerTypeId in u;
};
var withColor = (text, ...colors2) => {
  let out = "";
  for (let i = 0; i < colors2.length; i++) {
    out += `\x1B[${colors2[i]}m`;
  }
  return out + text + "\x1B[0m";
};
var withColorNoop = (text, ..._colors) => text;
var colors = {
  bold: "1",
  red: "31",
  green: "32",
  yellow: "33",
  blue: "34",
  cyan: "36",
  white: "37",
  gray: "90",
  black: "30",
  bgBrightRed: "101"
};
var logLevelColors = {
  None: [],
  All: [],
  Trace: [colors.gray],
  Debug: [colors.blue],
  Info: [colors.green],
  Warning: [colors.yellow],
  Error: [colors.red],
  Fatal: [colors.bgBrightRed, colors.black]
};
var logLevelStyle = {
  None: "",
  All: "",
  Trace: "color:gray",
  Debug: "color:blue",
  Info: "color:green",
  Warning: "color:orange",
  Error: "color:red",
  Fatal: "background-color:red;color:white"
};
var defaultDateFormat = (date3) => `${date3.getHours().toString().padStart(2, "0")}:${date3.getMinutes().toString().padStart(2, "0")}:${date3.getSeconds().toString().padStart(2, "0")}.${date3.getMilliseconds().toString().padStart(3, "0")}`;
var processStdoutIsTTY = typeof process === "object" && process !== null && typeof process.stdout === "object" && process.stdout !== null && process.stdout.isTTY === true;
var hasWindow = typeof window === "object";
var isWorker = typeof self === "object" && self !== null && typeof self.constructor === "function" && /* @__PURE__ */ self.constructor.name.includes("Worker");
var prettyLogger = (options) => {
  const mode_ = options?.mode ?? "auto";
  const mode = mode_ === "auto" ? hasWindow || isWorker ? "browser" : "tty" : mode_;
  const isBrowser = mode === "browser";
  const showColors = typeof options?.colors === "boolean" ? options.colors : processStdoutIsTTY || isBrowser;
  const formatDate = options?.formatDate ?? defaultDateFormat;
  return isBrowser ? prettyLoggerBrowser({
    colors: showColors,
    formatDate
  }) : prettyLoggerTty({
    colors: showColors,
    formatDate,
    stderr: options?.stderr === true
  });
};
var prettyLoggerTty = (options) => {
  const processIsBun = typeof process === "object" && "isBun" in process && process.isBun === true;
  const color = options.colors && processStdoutIsTTY ? withColor : withColorNoop;
  return makeLogger(({
    annotations,
    cause: cause3,
    context: context5,
    date: date3,
    fiberId: fiberId3,
    logLevel: logLevel3,
    message: message_,
    spans
  }) => {
    const services = getOrDefault2(context5, currentServices);
    const console4 = get3(services, consoleTag).unsafe;
    const log3 = options.stderr === true ? console4.error : console4.log;
    const message = ensure(message_);
    let firstLine = color(`[${options.formatDate(date3)}]`, colors.white) + ` ${color(logLevel3.label, ...logLevelColors[logLevel3._tag])} (${threadName(fiberId3)})`;
    if (isCons(spans)) {
      const now = date3.getTime();
      const render3 = renderLogSpanLogfmt(now);
      for (const span4 of spans) {
        firstLine += " " + render3(span4);
      }
    }
    firstLine += ":";
    let messageIndex = 0;
    if (message.length > 0) {
      const firstMaybeString = structuredMessage(message[0]);
      if (typeof firstMaybeString === "string") {
        firstLine += " " + color(firstMaybeString, colors.bold, colors.cyan);
        messageIndex++;
      }
    }
    log3(firstLine);
    if (!processIsBun) console4.group();
    if (!isEmpty5(cause3)) {
      log3(pretty(cause3, {
        renderErrorCause: true
      }));
    }
    if (messageIndex < message.length) {
      for (; messageIndex < message.length; messageIndex++) {
        log3(message[messageIndex]);
      }
    }
    if (size4(annotations) > 0) {
      for (const [key, value3] of annotations) {
        log3(color(`${key}:`, colors.bold, colors.white), value3);
      }
    }
    if (!processIsBun) console4.groupEnd();
  });
};
var prettyLoggerBrowser = (options) => {
  const color = options.colors ? "%c" : "";
  return makeLogger(({
    annotations,
    cause: cause3,
    context: context5,
    date: date3,
    fiberId: fiberId3,
    logLevel: logLevel3,
    message: message_,
    spans
  }) => {
    const services = getOrDefault2(context5, currentServices);
    const console4 = get3(services, consoleTag).unsafe;
    const message = ensure(message_);
    let firstLine = `${color}[${options.formatDate(date3)}]`;
    const firstParams = [];
    if (options.colors) {
      firstParams.push("color:gray");
    }
    firstLine += ` ${color}${logLevel3.label}${color} (${threadName(fiberId3)})`;
    if (options.colors) {
      firstParams.push(logLevelStyle[logLevel3._tag], "");
    }
    if (isCons(spans)) {
      const now = date3.getTime();
      const render3 = renderLogSpanLogfmt(now);
      for (const span4 of spans) {
        firstLine += " " + render3(span4);
      }
    }
    firstLine += ":";
    let messageIndex = 0;
    if (message.length > 0) {
      const firstMaybeString = structuredMessage(message[0]);
      if (typeof firstMaybeString === "string") {
        firstLine += ` ${color}${firstMaybeString}`;
        if (options.colors) {
          firstParams.push("color:deepskyblue");
        }
        messageIndex++;
      }
    }
    console4.groupCollapsed(firstLine, ...firstParams);
    if (!isEmpty5(cause3)) {
      console4.error(pretty(cause3, {
        renderErrorCause: true
      }));
    }
    if (messageIndex < message.length) {
      for (; messageIndex < message.length; messageIndex++) {
        console4.log(message[messageIndex]);
      }
    }
    if (size4(annotations) > 0) {
      for (const [key, value3] of annotations) {
        if (options.colors) {
          console4.log(`%c${key}:`, "color:gray", value3);
        } else {
          console4.log(`${key}:`, value3);
        }
      }
    }
    console4.groupEnd();
  });
};

// node_modules/effect/dist/esm/internal/metric/boundaries.js
var MetricBoundariesSymbolKey = "effect/MetricBoundaries";
var MetricBoundariesTypeId = /* @__PURE__ */ Symbol.for(MetricBoundariesSymbolKey);
var MetricBoundariesImpl = class {
  values;
  [MetricBoundariesTypeId] = MetricBoundariesTypeId;
  constructor(values3) {
    this.values = values3;
    this._hash = pipe(string(MetricBoundariesSymbolKey), combine(array2(this.values)));
  }
  _hash;
  [symbol]() {
    return this._hash;
  }
  [symbol2](u) {
    return isMetricBoundaries(u) && equals(this.values, u.values);
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var isMetricBoundaries = (u) => hasProperty(u, MetricBoundariesTypeId);
var fromIterable7 = (iterable) => {
  const values3 = pipe(iterable, appendAll(of2(Number.POSITIVE_INFINITY)), dedupe);
  return new MetricBoundariesImpl(values3);
};
var exponential = (options) => pipe(makeBy(options.count - 1, (i) => options.start * Math.pow(options.factor, i)), unsafeFromArray, fromIterable7);

// node_modules/effect/dist/esm/internal/metric/keyType.js
var MetricKeyTypeSymbolKey = "effect/MetricKeyType";
var MetricKeyTypeTypeId = /* @__PURE__ */ Symbol.for(MetricKeyTypeSymbolKey);
var CounterKeyTypeSymbolKey = "effect/MetricKeyType/Counter";
var CounterKeyTypeTypeId = /* @__PURE__ */ Symbol.for(CounterKeyTypeSymbolKey);
var FrequencyKeyTypeSymbolKey = "effect/MetricKeyType/Frequency";
var FrequencyKeyTypeTypeId = /* @__PURE__ */ Symbol.for(FrequencyKeyTypeSymbolKey);
var GaugeKeyTypeSymbolKey = "effect/MetricKeyType/Gauge";
var GaugeKeyTypeTypeId = /* @__PURE__ */ Symbol.for(GaugeKeyTypeSymbolKey);
var HistogramKeyTypeSymbolKey = "effect/MetricKeyType/Histogram";
var HistogramKeyTypeTypeId = /* @__PURE__ */ Symbol.for(HistogramKeyTypeSymbolKey);
var SummaryKeyTypeSymbolKey = "effect/MetricKeyType/Summary";
var SummaryKeyTypeTypeId = /* @__PURE__ */ Symbol.for(SummaryKeyTypeSymbolKey);
var metricKeyTypeVariance = {
  /* c8 ignore next */
  _In: (_) => _,
  /* c8 ignore next */
  _Out: (_) => _
};
var CounterKeyType = class {
  incremental;
  bigint;
  [MetricKeyTypeTypeId] = metricKeyTypeVariance;
  [CounterKeyTypeTypeId] = CounterKeyTypeTypeId;
  constructor(incremental, bigint) {
    this.incremental = incremental;
    this.bigint = bigint;
    this._hash = string(CounterKeyTypeSymbolKey);
  }
  _hash;
  [symbol]() {
    return this._hash;
  }
  [symbol2](that) {
    return isCounterKey(that);
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var FrequencyKeyTypeHash = /* @__PURE__ */ string(FrequencyKeyTypeSymbolKey);
var FrequencyKeyType = class {
  preregisteredWords;
  [MetricKeyTypeTypeId] = metricKeyTypeVariance;
  [FrequencyKeyTypeTypeId] = FrequencyKeyTypeTypeId;
  constructor(preregisteredWords) {
    this.preregisteredWords = preregisteredWords;
  }
  [symbol]() {
    return FrequencyKeyTypeHash;
  }
  [symbol2](that) {
    return isFrequencyKey(that);
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var GaugeKeyTypeHash = /* @__PURE__ */ string(GaugeKeyTypeSymbolKey);
var GaugeKeyType = class {
  bigint;
  [MetricKeyTypeTypeId] = metricKeyTypeVariance;
  [GaugeKeyTypeTypeId] = GaugeKeyTypeTypeId;
  constructor(bigint) {
    this.bigint = bigint;
  }
  [symbol]() {
    return GaugeKeyTypeHash;
  }
  [symbol2](that) {
    return isGaugeKey(that);
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var HistogramKeyType = class {
  boundaries;
  [MetricKeyTypeTypeId] = metricKeyTypeVariance;
  [HistogramKeyTypeTypeId] = HistogramKeyTypeTypeId;
  constructor(boundaries) {
    this.boundaries = boundaries;
    this._hash = pipe(string(HistogramKeyTypeSymbolKey), combine(hash(this.boundaries)));
  }
  _hash;
  [symbol]() {
    return this._hash;
  }
  [symbol2](that) {
    return isHistogramKey(that) && equals(this.boundaries, that.boundaries);
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var SummaryKeyType = class {
  maxAge;
  maxSize;
  error;
  quantiles;
  [MetricKeyTypeTypeId] = metricKeyTypeVariance;
  [SummaryKeyTypeTypeId] = SummaryKeyTypeTypeId;
  constructor(maxAge, maxSize, error, quantiles) {
    this.maxAge = maxAge;
    this.maxSize = maxSize;
    this.error = error;
    this.quantiles = quantiles;
    this._hash = pipe(string(SummaryKeyTypeSymbolKey), combine(hash(this.maxAge)), combine(hash(this.maxSize)), combine(hash(this.error)), combine(array2(this.quantiles)));
  }
  _hash;
  [symbol]() {
    return this._hash;
  }
  [symbol2](that) {
    return isSummaryKey(that) && equals(this.maxAge, that.maxAge) && this.maxSize === that.maxSize && this.error === that.error && equals(this.quantiles, that.quantiles);
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var counter = (options) => new CounterKeyType(options?.incremental ?? false, options?.bigint ?? false);
var histogram = (boundaries) => {
  return new HistogramKeyType(boundaries);
};
var isCounterKey = (u) => hasProperty(u, CounterKeyTypeTypeId);
var isFrequencyKey = (u) => hasProperty(u, FrequencyKeyTypeTypeId);
var isGaugeKey = (u) => hasProperty(u, GaugeKeyTypeTypeId);
var isHistogramKey = (u) => hasProperty(u, HistogramKeyTypeTypeId);
var isSummaryKey = (u) => hasProperty(u, SummaryKeyTypeTypeId);

// node_modules/effect/dist/esm/internal/metric/key.js
var MetricKeySymbolKey = "effect/MetricKey";
var MetricKeyTypeId = /* @__PURE__ */ Symbol.for(MetricKeySymbolKey);
var metricKeyVariance = {
  /* c8 ignore next */
  _Type: (_) => _
};
var arrayEquivilence = /* @__PURE__ */ getEquivalence(equals);
var MetricKeyImpl = class {
  name;
  keyType;
  description;
  tags;
  [MetricKeyTypeId] = metricKeyVariance;
  constructor(name, keyType, description, tags = []) {
    this.name = name;
    this.keyType = keyType;
    this.description = description;
    this.tags = tags;
    this._hash = pipe(string(this.name + this.description), combine(hash(this.keyType)), combine(array2(this.tags)));
  }
  _hash;
  [symbol]() {
    return this._hash;
  }
  [symbol2](u) {
    return isMetricKey(u) && this.name === u.name && equals(this.keyType, u.keyType) && equals(this.description, u.description) && arrayEquivilence(this.tags, u.tags);
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var isMetricKey = (u) => hasProperty(u, MetricKeyTypeId);
var counter2 = (name, options) => new MetricKeyImpl(name, counter(options), fromNullable(options?.description));
var histogram2 = (name, boundaries, description) => new MetricKeyImpl(name, histogram(boundaries), fromNullable(description));
var taggedWithLabels = /* @__PURE__ */ dual(2, (self2, extraTags) => extraTags.length === 0 ? self2 : new MetricKeyImpl(self2.name, self2.keyType, self2.description, union(self2.tags, extraTags)));

// node_modules/effect/dist/esm/internal/metric/state.js
var MetricStateSymbolKey = "effect/MetricState";
var MetricStateTypeId = /* @__PURE__ */ Symbol.for(MetricStateSymbolKey);
var CounterStateSymbolKey = "effect/MetricState/Counter";
var CounterStateTypeId = /* @__PURE__ */ Symbol.for(CounterStateSymbolKey);
var FrequencyStateSymbolKey = "effect/MetricState/Frequency";
var FrequencyStateTypeId = /* @__PURE__ */ Symbol.for(FrequencyStateSymbolKey);
var GaugeStateSymbolKey = "effect/MetricState/Gauge";
var GaugeStateTypeId = /* @__PURE__ */ Symbol.for(GaugeStateSymbolKey);
var HistogramStateSymbolKey = "effect/MetricState/Histogram";
var HistogramStateTypeId = /* @__PURE__ */ Symbol.for(HistogramStateSymbolKey);
var SummaryStateSymbolKey = "effect/MetricState/Summary";
var SummaryStateTypeId = /* @__PURE__ */ Symbol.for(SummaryStateSymbolKey);
var metricStateVariance = {
  /* c8 ignore next */
  _A: (_) => _
};
var CounterState = class {
  count;
  [MetricStateTypeId] = metricStateVariance;
  [CounterStateTypeId] = CounterStateTypeId;
  constructor(count) {
    this.count = count;
  }
  [symbol]() {
    return pipe(hash(CounterStateSymbolKey), combine(hash(this.count)), cached(this));
  }
  [symbol2](that) {
    return isCounterState(that) && this.count === that.count;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var arrayEquals = /* @__PURE__ */ getEquivalence(equals);
var FrequencyState = class {
  occurrences;
  [MetricStateTypeId] = metricStateVariance;
  [FrequencyStateTypeId] = FrequencyStateTypeId;
  constructor(occurrences) {
    this.occurrences = occurrences;
  }
  _hash;
  [symbol]() {
    return pipe(string(FrequencyStateSymbolKey), combine(array2(fromIterable(this.occurrences.entries()))), cached(this));
  }
  [symbol2](that) {
    return isFrequencyState(that) && arrayEquals(fromIterable(this.occurrences.entries()), fromIterable(that.occurrences.entries()));
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var GaugeState = class {
  value;
  [MetricStateTypeId] = metricStateVariance;
  [GaugeStateTypeId] = GaugeStateTypeId;
  constructor(value3) {
    this.value = value3;
  }
  [symbol]() {
    return pipe(hash(GaugeStateSymbolKey), combine(hash(this.value)), cached(this));
  }
  [symbol2](u) {
    return isGaugeState(u) && this.value === u.value;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var HistogramState = class {
  buckets;
  count;
  min;
  max;
  sum;
  [MetricStateTypeId] = metricStateVariance;
  [HistogramStateTypeId] = HistogramStateTypeId;
  constructor(buckets, count, min3, max5, sum2) {
    this.buckets = buckets;
    this.count = count;
    this.min = min3;
    this.max = max5;
    this.sum = sum2;
  }
  [symbol]() {
    return pipe(hash(HistogramStateSymbolKey), combine(hash(this.buckets)), combine(hash(this.count)), combine(hash(this.min)), combine(hash(this.max)), combine(hash(this.sum)), cached(this));
  }
  [symbol2](that) {
    return isHistogramState(that) && equals(this.buckets, that.buckets) && this.count === that.count && this.min === that.min && this.max === that.max && this.sum === that.sum;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var SummaryState = class {
  error;
  quantiles;
  count;
  min;
  max;
  sum;
  [MetricStateTypeId] = metricStateVariance;
  [SummaryStateTypeId] = SummaryStateTypeId;
  constructor(error, quantiles, count, min3, max5, sum2) {
    this.error = error;
    this.quantiles = quantiles;
    this.count = count;
    this.min = min3;
    this.max = max5;
    this.sum = sum2;
  }
  [symbol]() {
    return pipe(hash(SummaryStateSymbolKey), combine(hash(this.error)), combine(hash(this.quantiles)), combine(hash(this.count)), combine(hash(this.min)), combine(hash(this.max)), combine(hash(this.sum)), cached(this));
  }
  [symbol2](that) {
    return isSummaryState(that) && this.error === that.error && equals(this.quantiles, that.quantiles) && this.count === that.count && this.min === that.min && this.max === that.max && this.sum === that.sum;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var counter3 = (count) => new CounterState(count);
var frequency2 = (occurrences) => {
  return new FrequencyState(occurrences);
};
var gauge2 = (count) => new GaugeState(count);
var histogram3 = (options) => new HistogramState(options.buckets, options.count, options.min, options.max, options.sum);
var summary2 = (options) => new SummaryState(options.error, options.quantiles, options.count, options.min, options.max, options.sum);
var isCounterState = (u) => hasProperty(u, CounterStateTypeId);
var isFrequencyState = (u) => hasProperty(u, FrequencyStateTypeId);
var isGaugeState = (u) => hasProperty(u, GaugeStateTypeId);
var isHistogramState = (u) => hasProperty(u, HistogramStateTypeId);
var isSummaryState = (u) => hasProperty(u, SummaryStateTypeId);

// node_modules/effect/dist/esm/internal/metric/hook.js
var MetricHookSymbolKey = "effect/MetricHook";
var MetricHookTypeId = /* @__PURE__ */ Symbol.for(MetricHookSymbolKey);
var metricHookVariance = {
  /* c8 ignore next */
  _In: (_) => _,
  /* c8 ignore next */
  _Out: (_) => _
};
var make30 = (options) => ({
  [MetricHookTypeId]: metricHookVariance,
  pipe() {
    return pipeArguments(this, arguments);
  },
  ...options
});
var bigint03 = /* @__PURE__ */ BigInt(0);
var counter4 = (key) => {
  let sum2 = key.keyType.bigint ? bigint03 : 0;
  const canUpdate = key.keyType.incremental ? key.keyType.bigint ? (value3) => value3 >= bigint03 : (value3) => value3 >= 0 : (_value) => true;
  const update5 = (value3) => {
    if (canUpdate(value3)) {
      sum2 = sum2 + value3;
    }
  };
  return make30({
    get: () => counter3(sum2),
    update: update5,
    modify: update5
  });
};
var frequency3 = (key) => {
  const values3 = /* @__PURE__ */ new Map();
  for (const word of key.keyType.preregisteredWords) {
    values3.set(word, 0);
  }
  const update5 = (word) => {
    const slotCount = values3.get(word) ?? 0;
    values3.set(word, slotCount + 1);
  };
  return make30({
    get: () => frequency2(values3),
    update: update5,
    modify: update5
  });
};
var gauge3 = (_key, startAt) => {
  let value3 = startAt;
  return make30({
    get: () => gauge2(value3),
    update: (v) => {
      value3 = v;
    },
    modify: (v) => {
      value3 = value3 + v;
    }
  });
};
var histogram4 = (key) => {
  const bounds = key.keyType.boundaries.values;
  const size11 = bounds.length;
  const values3 = new Uint32Array(size11 + 1);
  const boundaries = new Float32Array(size11);
  let count = 0;
  let sum2 = 0;
  let min3 = Number.MAX_VALUE;
  let max5 = Number.MIN_VALUE;
  pipe(bounds, sort(Order), map2((n, i) => {
    boundaries[i] = n;
  }));
  const update5 = (value3) => {
    let from = 0;
    let to = size11;
    while (from !== to) {
      const mid = Math.floor(from + (to - from) / 2);
      const boundary = boundaries[mid];
      if (value3 <= boundary) {
        to = mid;
      } else {
        from = mid;
      }
      if (to === from + 1) {
        if (value3 <= boundaries[from]) {
          to = from;
        } else {
          from = to;
        }
      }
    }
    values3[from] = values3[from] + 1;
    count = count + 1;
    sum2 = sum2 + value3;
    if (value3 < min3) {
      min3 = value3;
    }
    if (value3 > max5) {
      max5 = value3;
    }
  };
  const getBuckets = () => {
    const builder = allocate(size11);
    let cumulated = 0;
    for (let i = 0; i < size11; i++) {
      const boundary = boundaries[i];
      const value3 = values3[i];
      cumulated = cumulated + value3;
      builder[i] = [boundary, cumulated];
    }
    return builder;
  };
  return make30({
    get: () => histogram3({
      buckets: getBuckets(),
      count,
      min: min3,
      max: max5,
      sum: sum2
    }),
    update: update5,
    modify: update5
  });
};
var summary3 = (key) => {
  const {
    error,
    maxAge,
    maxSize,
    quantiles
  } = key.keyType;
  const sortedQuantiles = pipe(quantiles, sort(Order));
  const values3 = allocate(maxSize);
  let head5 = 0;
  let count = 0;
  let sum2 = 0;
  let min3 = Number.MAX_VALUE;
  let max5 = Number.MIN_VALUE;
  const snapshot = (now) => {
    const builder = [];
    let i = 0;
    while (i !== maxSize - 1) {
      const item = values3[i];
      if (item != null) {
        const [t, v] = item;
        const age = millis(now - t);
        if (greaterThanOrEqualTo2(age, zero) && age <= maxAge) {
          builder.push(v);
        }
      }
      i = i + 1;
    }
    return calculateQuantiles(error, sortedQuantiles, sort(builder, Order));
  };
  const observe = (value3, timestamp) => {
    if (maxSize > 0) {
      head5 = head5 + 1;
      const target = head5 % maxSize;
      values3[target] = [timestamp, value3];
    }
    count = count + 1;
    sum2 = sum2 + value3;
    if (value3 < min3) {
      min3 = value3;
    }
    if (value3 > max5) {
      max5 = value3;
    }
  };
  return make30({
    get: () => summary2({
      error,
      quantiles: snapshot(Date.now()),
      count,
      min: min3,
      max: max5,
      sum: sum2
    }),
    update: ([value3, timestamp]) => observe(value3, timestamp),
    modify: ([value3, timestamp]) => observe(value3, timestamp)
  });
};
var calculateQuantiles = (error, sortedQuantiles, sortedSamples) => {
  const sampleCount = sortedSamples.length;
  if (!isNonEmptyReadonlyArray(sortedQuantiles)) {
    return empty();
  }
  const head5 = sortedQuantiles[0];
  const tail = sortedQuantiles.slice(1);
  const resolvedHead = resolveQuantile(error, sampleCount, none2(), 0, head5, sortedSamples);
  const resolved = of(resolvedHead);
  tail.forEach((quantile) => {
    resolved.push(resolveQuantile(error, sampleCount, resolvedHead.value, resolvedHead.consumed, quantile, resolvedHead.rest));
  });
  return map2(resolved, (rq) => [rq.quantile, rq.value]);
};
var resolveQuantile = (error, sampleCount, current, consumed, quantile, rest) => {
  let error_1 = error;
  let sampleCount_1 = sampleCount;
  let current_1 = current;
  let consumed_1 = consumed;
  let quantile_1 = quantile;
  let rest_1 = rest;
  let error_2 = error;
  let sampleCount_2 = sampleCount;
  let current_2 = current;
  let consumed_2 = consumed;
  let quantile_2 = quantile;
  let rest_2 = rest;
  while (1) {
    if (!isNonEmptyReadonlyArray(rest_1)) {
      return {
        quantile: quantile_1,
        value: none2(),
        consumed: consumed_1,
        rest: []
      };
    }
    if (quantile_1 === 1) {
      return {
        quantile: quantile_1,
        value: some2(lastNonEmpty(rest_1)),
        consumed: consumed_1 + rest_1.length,
        rest: []
      };
    }
    const sameHead = span(rest_1, (n) => n <= rest_1[0]);
    const desired = quantile_1 * sampleCount_1;
    const allowedError = error_1 / 2 * desired;
    const candConsumed = consumed_1 + sameHead[0].length;
    const candError = Math.abs(candConsumed - desired);
    if (candConsumed < desired - allowedError) {
      error_2 = error_1;
      sampleCount_2 = sampleCount_1;
      current_2 = head(rest_1);
      consumed_2 = candConsumed;
      quantile_2 = quantile_1;
      rest_2 = sameHead[1];
      error_1 = error_2;
      sampleCount_1 = sampleCount_2;
      current_1 = current_2;
      consumed_1 = consumed_2;
      quantile_1 = quantile_2;
      rest_1 = rest_2;
      continue;
    }
    if (candConsumed > desired + allowedError) {
      return {
        quantile: quantile_1,
        value: current_1,
        consumed: consumed_1,
        rest: rest_1
      };
    }
    switch (current_1._tag) {
      case "None": {
        error_2 = error_1;
        sampleCount_2 = sampleCount_1;
        current_2 = head(rest_1);
        consumed_2 = candConsumed;
        quantile_2 = quantile_1;
        rest_2 = sameHead[1];
        error_1 = error_2;
        sampleCount_1 = sampleCount_2;
        current_1 = current_2;
        consumed_1 = consumed_2;
        quantile_1 = quantile_2;
        rest_1 = rest_2;
        continue;
      }
      case "Some": {
        const prevError = Math.abs(desired - current_1.value);
        if (candError < prevError) {
          error_2 = error_1;
          sampleCount_2 = sampleCount_1;
          current_2 = head(rest_1);
          consumed_2 = candConsumed;
          quantile_2 = quantile_1;
          rest_2 = sameHead[1];
          error_1 = error_2;
          sampleCount_1 = sampleCount_2;
          current_1 = current_2;
          consumed_1 = consumed_2;
          quantile_1 = quantile_2;
          rest_1 = rest_2;
          continue;
        }
        return {
          quantile: quantile_1,
          value: some2(current_1.value),
          consumed: consumed_1,
          rest: rest_1
        };
      }
    }
  }
  throw new Error("BUG: MetricHook.resolveQuantiles - please report an issue at https://github.com/Effect-TS/effect/issues");
};

// node_modules/effect/dist/esm/internal/metric/pair.js
var MetricPairSymbolKey = "effect/MetricPair";
var MetricPairTypeId = /* @__PURE__ */ Symbol.for(MetricPairSymbolKey);
var metricPairVariance = {
  /* c8 ignore next */
  _Type: (_) => _
};
var unsafeMake9 = (metricKey, metricState) => {
  return {
    [MetricPairTypeId]: metricPairVariance,
    metricKey,
    metricState,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
};

// node_modules/effect/dist/esm/internal/metric/registry.js
var MetricRegistrySymbolKey = "effect/MetricRegistry";
var MetricRegistryTypeId = /* @__PURE__ */ Symbol.for(MetricRegistrySymbolKey);
var MetricRegistryImpl = class {
  [MetricRegistryTypeId] = MetricRegistryTypeId;
  map = /* @__PURE__ */ empty17();
  snapshot() {
    const result = [];
    for (const [key, hook] of this.map) {
      result.push(unsafeMake9(key, hook.get()));
    }
    return result;
  }
  get(key) {
    const hook = pipe(this.map, get8(key), getOrUndefined);
    if (hook == null) {
      if (isCounterKey(key.keyType)) {
        return this.getCounter(key);
      }
      if (isGaugeKey(key.keyType)) {
        return this.getGauge(key);
      }
      if (isFrequencyKey(key.keyType)) {
        return this.getFrequency(key);
      }
      if (isHistogramKey(key.keyType)) {
        return this.getHistogram(key);
      }
      if (isSummaryKey(key.keyType)) {
        return this.getSummary(key);
      }
      throw new Error("BUG: MetricRegistry.get - unknown MetricKeyType - please report an issue at https://github.com/Effect-TS/effect/issues");
    } else {
      return hook;
    }
  }
  getCounter(key) {
    let value3 = pipe(this.map, get8(key), getOrUndefined);
    if (value3 == null) {
      const counter6 = counter4(key);
      if (!pipe(this.map, has4(key))) {
        pipe(this.map, set4(key, counter6));
      }
      value3 = counter6;
    }
    return value3;
  }
  getFrequency(key) {
    let value3 = pipe(this.map, get8(key), getOrUndefined);
    if (value3 == null) {
      const frequency5 = frequency3(key);
      if (!pipe(this.map, has4(key))) {
        pipe(this.map, set4(key, frequency5));
      }
      value3 = frequency5;
    }
    return value3;
  }
  getGauge(key) {
    let value3 = pipe(this.map, get8(key), getOrUndefined);
    if (value3 == null) {
      const gauge5 = gauge3(key, key.keyType.bigint ? BigInt(0) : 0);
      if (!pipe(this.map, has4(key))) {
        pipe(this.map, set4(key, gauge5));
      }
      value3 = gauge5;
    }
    return value3;
  }
  getHistogram(key) {
    let value3 = pipe(this.map, get8(key), getOrUndefined);
    if (value3 == null) {
      const histogram6 = histogram4(key);
      if (!pipe(this.map, has4(key))) {
        pipe(this.map, set4(key, histogram6));
      }
      value3 = histogram6;
    }
    return value3;
  }
  getSummary(key) {
    let value3 = pipe(this.map, get8(key), getOrUndefined);
    if (value3 == null) {
      const summary5 = summary3(key);
      if (!pipe(this.map, has4(key))) {
        pipe(this.map, set4(key, summary5));
      }
      value3 = summary5;
    }
    return value3;
  }
};
var make31 = () => {
  return new MetricRegistryImpl();
};

// node_modules/effect/dist/esm/internal/metric.js
var MetricSymbolKey = "effect/Metric";
var MetricTypeId = /* @__PURE__ */ Symbol.for(MetricSymbolKey);
var metricVariance = {
  /* c8 ignore next */
  _Type: (_) => _,
  /* c8 ignore next */
  _In: (_) => _,
  /* c8 ignore next */
  _Out: (_) => _
};
var globalMetricRegistry = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Metric/globalMetricRegistry"), () => make31());
var make32 = function(keyType, unsafeUpdate, unsafeValue, unsafeModify) {
  const metric = Object.assign((effect2) => tap(effect2, (a) => update4(metric, a)), {
    [MetricTypeId]: metricVariance,
    keyType,
    unsafeUpdate,
    unsafeValue,
    unsafeModify,
    register() {
      this.unsafeValue([]);
      return this;
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  });
  return metric;
};
var counter5 = (name, options) => fromMetricKey(counter2(name, options));
var fromMetricKey = (key) => {
  let untaggedHook;
  const hookCache = /* @__PURE__ */ new WeakMap();
  const hook = (extraTags) => {
    if (extraTags.length === 0) {
      if (untaggedHook !== void 0) {
        return untaggedHook;
      }
      untaggedHook = globalMetricRegistry.get(key);
      return untaggedHook;
    }
    let hook2 = hookCache.get(extraTags);
    if (hook2 !== void 0) {
      return hook2;
    }
    hook2 = globalMetricRegistry.get(taggedWithLabels(key, extraTags));
    hookCache.set(extraTags, hook2);
    return hook2;
  };
  return make32(key.keyType, (input, extraTags) => hook(extraTags).update(input), (extraTags) => hook(extraTags).get(), (input, extraTags) => hook(extraTags).modify(input));
};
var histogram5 = (name, boundaries, description) => fromMetricKey(histogram2(name, boundaries, description));
var tagged = /* @__PURE__ */ dual(3, (self2, key, value3) => taggedWithLabels2(self2, [make28(key, value3)]));
var taggedWithLabels2 = /* @__PURE__ */ dual(2, (self2, extraTags) => {
  return make32(self2.keyType, (input, extraTags1) => self2.unsafeUpdate(input, union(extraTags, extraTags1)), (extraTags1) => self2.unsafeValue(union(extraTags, extraTags1)), (input, extraTags1) => self2.unsafeModify(input, union(extraTags, extraTags1)));
});
var update4 = /* @__PURE__ */ dual(2, (self2, input) => fiberRefGetWith(currentMetricLabels, (tags) => sync(() => self2.unsafeUpdate(input, tags))));

// node_modules/effect/dist/esm/internal/request.js
var RequestSymbolKey = "effect/Request";
var RequestTypeId = /* @__PURE__ */ Symbol.for(RequestSymbolKey);
var requestVariance = {
  /* c8 ignore next */
  _E: (_) => _,
  /* c8 ignore next */
  _A: (_) => _
};
var RequestPrototype = {
  ...StructuralPrototype,
  [RequestTypeId]: requestVariance
};
var isRequest = (u) => hasProperty(u, RequestTypeId);
var complete = /* @__PURE__ */ dual(2, (self2, result) => fiberRefGetWith(currentRequestMap, (map18) => sync(() => {
  if (map18.has(self2)) {
    const entry = map18.get(self2);
    if (!entry.state.completed) {
      entry.state.completed = true;
      deferredUnsafeDone(entry.result, result);
    }
  }
})));
var Listeners = class {
  count = 0;
  observers = /* @__PURE__ */ new Set();
  interrupted = false;
  addObserver(f) {
    this.observers.add(f);
  }
  removeObserver(f) {
    this.observers.delete(f);
  }
  increment() {
    this.count++;
    this.observers.forEach((f) => f(this.count));
  }
  decrement() {
    this.count--;
    this.observers.forEach((f) => f(this.count));
  }
};

// node_modules/effect/dist/esm/internal/redBlackTree/iterator.js
var Direction = {
  Forward: 0,
  Backward: 1 << 0
};
var RedBlackTreeIterator = class _RedBlackTreeIterator {
  self;
  stack;
  direction;
  count = 0;
  constructor(self2, stack, direction) {
    this.self = self2;
    this.stack = stack;
    this.direction = direction;
  }
  /**
   * Clones the iterator
   */
  clone() {
    return new _RedBlackTreeIterator(this.self, this.stack.slice(), this.direction);
  }
  /**
   * Reverse the traversal direction
   */
  reversed() {
    return new _RedBlackTreeIterator(this.self, this.stack.slice(), this.direction === Direction.Forward ? Direction.Backward : Direction.Forward);
  }
  /**
   * Iterator next
   */
  next() {
    const entry = this.entry;
    this.count++;
    if (this.direction === Direction.Forward) {
      this.moveNext();
    } else {
      this.movePrev();
    }
    switch (entry._tag) {
      case "None": {
        return {
          done: true,
          value: this.count
        };
      }
      case "Some": {
        return {
          done: false,
          value: entry.value
        };
      }
    }
  }
  /**
   * Returns the key
   */
  get key() {
    if (this.stack.length > 0) {
      return some2(this.stack[this.stack.length - 1].key);
    }
    return none2();
  }
  /**
   * Returns the value
   */
  get value() {
    if (this.stack.length > 0) {
      return some2(this.stack[this.stack.length - 1].value);
    }
    return none2();
  }
  /**
   * Returns the key
   */
  get entry() {
    return map(last(this.stack), (node) => [node.key, node.value]);
  }
  /**
   * Returns the position of this iterator in the sorted list
   */
  get index() {
    let idx = 0;
    const stack = this.stack;
    if (stack.length === 0) {
      const r = this.self._root;
      if (r != null) {
        return r.count;
      }
      return 0;
    } else if (stack[stack.length - 1].left != null) {
      idx = stack[stack.length - 1].left.count;
    }
    for (let s = stack.length - 2; s >= 0; --s) {
      if (stack[s + 1] === stack[s].right) {
        ;
        ++idx;
        if (stack[s].left != null) {
          idx += stack[s].left.count;
        }
      }
    }
    return idx;
  }
  /**
   * Advances iterator to next element in list
   */
  moveNext() {
    const stack = this.stack;
    if (stack.length === 0) {
      return;
    }
    let n = stack[stack.length - 1];
    if (n.right != null) {
      n = n.right;
      while (n != null) {
        stack.push(n);
        n = n.left;
      }
    } else {
      stack.pop();
      while (stack.length > 0 && stack[stack.length - 1].right === n) {
        n = stack[stack.length - 1];
        stack.pop();
      }
    }
  }
  /**
   * Checks if there is a next element
   */
  get hasNext() {
    const stack = this.stack;
    if (stack.length === 0) {
      return false;
    }
    if (stack[stack.length - 1].right != null) {
      return true;
    }
    for (let s = stack.length - 1; s > 0; --s) {
      if (stack[s - 1].left === stack[s]) {
        return true;
      }
    }
    return false;
  }
  /**
   * Advances iterator to previous element in list
   */
  movePrev() {
    const stack = this.stack;
    if (stack.length === 0) {
      return;
    }
    let n = stack[stack.length - 1];
    if (n != null && n.left != null) {
      n = n.left;
      while (n != null) {
        stack.push(n);
        n = n.right;
      }
    } else {
      stack.pop();
      while (stack.length > 0 && stack[stack.length - 1].left === n) {
        n = stack[stack.length - 1];
        stack.pop();
      }
    }
  }
  /**
   * Checks if there is a previous element
   */
  get hasPrev() {
    const stack = this.stack;
    if (stack.length === 0) {
      return false;
    }
    if (stack[stack.length - 1].left != null) {
      return true;
    }
    for (let s = stack.length - 1; s > 0; --s) {
      if (stack[s - 1].right === stack[s]) {
        return true;
      }
    }
    return false;
  }
};

// node_modules/effect/dist/esm/internal/redBlackTree/node.js
var Color = {
  Red: 0,
  Black: 1 << 0
};
var clone = ({
  color,
  count,
  key,
  left: left3,
  right: right3,
  value: value3
}) => ({
  color,
  key,
  value: value3,
  left: left3,
  right: right3,
  count
});
function swap2(n, v) {
  n.key = v.key;
  n.value = v.value;
  n.left = v.left;
  n.right = v.right;
  n.color = v.color;
  n.count = v.count;
}
var repaint = ({
  count,
  key,
  left: left3,
  right: right3,
  value: value3
}, color) => ({
  color,
  key,
  value: value3,
  left: left3,
  right: right3,
  count
});
var recount = (node) => {
  node.count = 1 + (node.left?.count ?? 0) + (node.right?.count ?? 0);
};

// node_modules/effect/dist/esm/internal/redBlackTree.js
var RedBlackTreeSymbolKey = "effect/RedBlackTree";
var RedBlackTreeTypeId = /* @__PURE__ */ Symbol.for(RedBlackTreeSymbolKey);
var redBlackTreeVariance = {
  /* c8 ignore next */
  _Key: (_) => _,
  /* c8 ignore next */
  _Value: (_) => _
};
var RedBlackTreeProto = {
  [RedBlackTreeTypeId]: redBlackTreeVariance,
  [symbol]() {
    let hash2 = hash(RedBlackTreeSymbolKey);
    for (const item of this) {
      hash2 ^= pipe(hash(item[0]), combine(hash(item[1])));
    }
    return cached(this, hash2);
  },
  [symbol2](that) {
    if (isRedBlackTree(that)) {
      if ((this._root?.count ?? 0) !== (that._root?.count ?? 0)) {
        return false;
      }
      const entries2 = Array.from(that);
      return Array.from(this).every((itemSelf, i) => {
        const itemThat = entries2[i];
        return equals(itemSelf[0], itemThat[0]) && equals(itemSelf[1], itemThat[1]);
      });
    }
    return false;
  },
  [Symbol.iterator]() {
    const stack = [];
    let n = this._root;
    while (n != null) {
      stack.push(n);
      n = n.left;
    }
    return new RedBlackTreeIterator(this, stack, Direction.Forward);
  },
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "RedBlackTree",
      values: Array.from(this).map(toJSON)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var makeImpl3 = (ord, root) => {
  const tree = Object.create(RedBlackTreeProto);
  tree._ord = ord;
  tree._root = root;
  return tree;
};
var isRedBlackTree = (u) => hasProperty(u, RedBlackTreeTypeId);
var findFirst4 = /* @__PURE__ */ dual(2, (self2, key) => {
  const cmp = self2._ord;
  let node = self2._root;
  while (node !== void 0) {
    const d = cmp(key, node.key);
    if (equals(key, node.key)) {
      return some2(node.value);
    }
    if (d <= 0) {
      node = node.left;
    } else {
      node = node.right;
    }
  }
  return none2();
});
var has5 = /* @__PURE__ */ dual(2, (self2, key) => isSome2(findFirst4(self2, key)));
var insert = /* @__PURE__ */ dual(3, (self2, key, value3) => {
  const cmp = self2._ord;
  let n = self2._root;
  const n_stack = [];
  const d_stack = [];
  while (n != null) {
    const d = cmp(key, n.key);
    n_stack.push(n);
    d_stack.push(d);
    if (d <= 0) {
      n = n.left;
    } else {
      n = n.right;
    }
  }
  n_stack.push({
    color: Color.Red,
    key,
    value: value3,
    left: void 0,
    right: void 0,
    count: 1
  });
  for (let s = n_stack.length - 2; s >= 0; --s) {
    const n2 = n_stack[s];
    if (d_stack[s] <= 0) {
      n_stack[s] = {
        color: n2.color,
        key: n2.key,
        value: n2.value,
        left: n_stack[s + 1],
        right: n2.right,
        count: n2.count + 1
      };
    } else {
      n_stack[s] = {
        color: n2.color,
        key: n2.key,
        value: n2.value,
        left: n2.left,
        right: n_stack[s + 1],
        count: n2.count + 1
      };
    }
  }
  for (let s = n_stack.length - 1; s > 1; --s) {
    const p = n_stack[s - 1];
    const n3 = n_stack[s];
    if (p.color === Color.Black || n3.color === Color.Black) {
      break;
    }
    const pp = n_stack[s - 2];
    if (pp.left === p) {
      if (p.left === n3) {
        const y = pp.right;
        if (y && y.color === Color.Red) {
          p.color = Color.Black;
          pp.right = repaint(y, Color.Black);
          pp.color = Color.Red;
          s -= 1;
        } else {
          pp.color = Color.Red;
          pp.left = p.right;
          p.color = Color.Black;
          p.right = pp;
          n_stack[s - 2] = p;
          n_stack[s - 1] = n3;
          recount(pp);
          recount(p);
          if (s >= 3) {
            const ppp = n_stack[s - 3];
            if (ppp.left === pp) {
              ppp.left = p;
            } else {
              ppp.right = p;
            }
          }
          break;
        }
      } else {
        const y = pp.right;
        if (y && y.color === Color.Red) {
          p.color = Color.Black;
          pp.right = repaint(y, Color.Black);
          pp.color = Color.Red;
          s -= 1;
        } else {
          p.right = n3.left;
          pp.color = Color.Red;
          pp.left = n3.right;
          n3.color = Color.Black;
          n3.left = p;
          n3.right = pp;
          n_stack[s - 2] = n3;
          n_stack[s - 1] = p;
          recount(pp);
          recount(p);
          recount(n3);
          if (s >= 3) {
            const ppp = n_stack[s - 3];
            if (ppp.left === pp) {
              ppp.left = n3;
            } else {
              ppp.right = n3;
            }
          }
          break;
        }
      }
    } else {
      if (p.right === n3) {
        const y = pp.left;
        if (y && y.color === Color.Red) {
          p.color = Color.Black;
          pp.left = repaint(y, Color.Black);
          pp.color = Color.Red;
          s -= 1;
        } else {
          pp.color = Color.Red;
          pp.right = p.left;
          p.color = Color.Black;
          p.left = pp;
          n_stack[s - 2] = p;
          n_stack[s - 1] = n3;
          recount(pp);
          recount(p);
          if (s >= 3) {
            const ppp = n_stack[s - 3];
            if (ppp.right === pp) {
              ppp.right = p;
            } else {
              ppp.left = p;
            }
          }
          break;
        }
      } else {
        const y = pp.left;
        if (y && y.color === Color.Red) {
          p.color = Color.Black;
          pp.left = repaint(y, Color.Black);
          pp.color = Color.Red;
          s -= 1;
        } else {
          p.left = n3.right;
          pp.color = Color.Red;
          pp.right = n3.left;
          n3.color = Color.Black;
          n3.right = p;
          n3.left = pp;
          n_stack[s - 2] = n3;
          n_stack[s - 1] = p;
          recount(pp);
          recount(p);
          recount(n3);
          if (s >= 3) {
            const ppp = n_stack[s - 3];
            if (ppp.right === pp) {
              ppp.right = n3;
            } else {
              ppp.left = n3;
            }
          }
          break;
        }
      }
    }
  }
  n_stack[0].color = Color.Black;
  return makeImpl3(self2._ord, n_stack[0]);
});
var keysForward = (self2) => keys3(self2, Direction.Forward);
var keys3 = (self2, direction) => {
  const begin = self2[Symbol.iterator]();
  let count = 0;
  return {
    [Symbol.iterator]: () => keys3(self2, direction),
    next: () => {
      count++;
      const entry = begin.key;
      if (direction === Direction.Forward) {
        begin.moveNext();
      } else {
        begin.movePrev();
      }
      switch (entry._tag) {
        case "None": {
          return {
            done: true,
            value: count
          };
        }
        case "Some": {
          return {
            done: false,
            value: entry.value
          };
        }
      }
    }
  };
};
var removeFirst = /* @__PURE__ */ dual(2, (self2, key) => {
  if (!has5(self2, key)) {
    return self2;
  }
  const ord = self2._ord;
  const cmp = ord;
  let node = self2._root;
  const stack = [];
  while (node !== void 0) {
    const d = cmp(key, node.key);
    stack.push(node);
    if (equals(key, node.key)) {
      node = void 0;
    } else if (d <= 0) {
      node = node.left;
    } else {
      node = node.right;
    }
  }
  if (stack.length === 0) {
    return self2;
  }
  const cstack = new Array(stack.length);
  let n = stack[stack.length - 1];
  cstack[cstack.length - 1] = {
    color: n.color,
    key: n.key,
    value: n.value,
    left: n.left,
    right: n.right,
    count: n.count
  };
  for (let i = stack.length - 2; i >= 0; --i) {
    n = stack[i];
    if (n.left === stack[i + 1]) {
      cstack[i] = {
        color: n.color,
        key: n.key,
        value: n.value,
        left: cstack[i + 1],
        right: n.right,
        count: n.count
      };
    } else {
      cstack[i] = {
        color: n.color,
        key: n.key,
        value: n.value,
        left: n.left,
        right: cstack[i + 1],
        count: n.count
      };
    }
  }
  n = cstack[cstack.length - 1];
  if (n.left !== void 0 && n.right !== void 0) {
    const split = cstack.length;
    n = n.left;
    while (n.right != null) {
      cstack.push(n);
      n = n.right;
    }
    const v = cstack[split - 1];
    cstack.push({
      color: n.color,
      key: v.key,
      value: v.value,
      left: n.left,
      right: n.right,
      count: n.count
    });
    cstack[split - 1].key = n.key;
    cstack[split - 1].value = n.value;
    for (let i = cstack.length - 2; i >= split; --i) {
      n = cstack[i];
      cstack[i] = {
        color: n.color,
        key: n.key,
        value: n.value,
        left: n.left,
        right: cstack[i + 1],
        count: n.count
      };
    }
    cstack[split - 1].left = cstack[split];
  }
  n = cstack[cstack.length - 1];
  if (n.color === Color.Red) {
    const p = cstack[cstack.length - 2];
    if (p.left === n) {
      p.left = void 0;
    } else if (p.right === n) {
      p.right = void 0;
    }
    cstack.pop();
    for (let i = 0; i < cstack.length; ++i) {
      cstack[i].count--;
    }
    return makeImpl3(ord, cstack[0]);
  } else {
    if (n.left !== void 0 || n.right !== void 0) {
      if (n.left !== void 0) {
        swap2(n, n.left);
      } else if (n.right !== void 0) {
        swap2(n, n.right);
      }
      n.color = Color.Black;
      for (let i = 0; i < cstack.length - 1; ++i) {
        cstack[i].count--;
      }
      return makeImpl3(ord, cstack[0]);
    } else if (cstack.length === 1) {
      return makeImpl3(ord, void 0);
    } else {
      for (let i = 0; i < cstack.length; ++i) {
        cstack[i].count--;
      }
      const parent = cstack[cstack.length - 2];
      fixDoubleBlack(cstack);
      if (parent.left === n) {
        parent.left = void 0;
      } else {
        parent.right = void 0;
      }
    }
  }
  return makeImpl3(ord, cstack[0]);
});
var fixDoubleBlack = (stack) => {
  let n, p, s, z;
  for (let i = stack.length - 1; i >= 0; --i) {
    n = stack[i];
    if (i === 0) {
      n.color = Color.Black;
      return;
    }
    p = stack[i - 1];
    if (p.left === n) {
      s = p.right;
      if (s !== void 0 && s.right !== void 0 && s.right.color === Color.Red) {
        s = p.right = clone(s);
        z = s.right = clone(s.right);
        p.right = s.left;
        s.left = p;
        s.right = z;
        s.color = p.color;
        n.color = Color.Black;
        p.color = Color.Black;
        z.color = Color.Black;
        recount(p);
        recount(s);
        if (i > 1) {
          const pp = stack[i - 2];
          if (pp.left === p) {
            pp.left = s;
          } else {
            pp.right = s;
          }
        }
        stack[i - 1] = s;
        return;
      } else if (s !== void 0 && s.left !== void 0 && s.left.color === Color.Red) {
        s = p.right = clone(s);
        z = s.left = clone(s.left);
        p.right = z.left;
        s.left = z.right;
        z.left = p;
        z.right = s;
        z.color = p.color;
        p.color = Color.Black;
        s.color = Color.Black;
        n.color = Color.Black;
        recount(p);
        recount(s);
        recount(z);
        if (i > 1) {
          const pp = stack[i - 2];
          if (pp.left === p) {
            pp.left = z;
          } else {
            pp.right = z;
          }
        }
        stack[i - 1] = z;
        return;
      }
      if (s !== void 0 && s.color === Color.Black) {
        if (p.color === Color.Red) {
          p.color = Color.Black;
          p.right = repaint(s, Color.Red);
          return;
        } else {
          p.right = repaint(s, Color.Red);
          continue;
        }
      } else if (s !== void 0) {
        s = clone(s);
        p.right = s.left;
        s.left = p;
        s.color = p.color;
        p.color = Color.Red;
        recount(p);
        recount(s);
        if (i > 1) {
          const pp = stack[i - 2];
          if (pp.left === p) {
            pp.left = s;
          } else {
            pp.right = s;
          }
        }
        stack[i - 1] = s;
        stack[i] = p;
        if (i + 1 < stack.length) {
          stack[i + 1] = n;
        } else {
          stack.push(n);
        }
        i = i + 2;
      }
    } else {
      s = p.left;
      if (s !== void 0 && s.left !== void 0 && s.left.color === Color.Red) {
        s = p.left = clone(s);
        z = s.left = clone(s.left);
        p.left = s.right;
        s.right = p;
        s.left = z;
        s.color = p.color;
        n.color = Color.Black;
        p.color = Color.Black;
        z.color = Color.Black;
        recount(p);
        recount(s);
        if (i > 1) {
          const pp = stack[i - 2];
          if (pp.right === p) {
            pp.right = s;
          } else {
            pp.left = s;
          }
        }
        stack[i - 1] = s;
        return;
      } else if (s !== void 0 && s.right !== void 0 && s.right.color === Color.Red) {
        s = p.left = clone(s);
        z = s.right = clone(s.right);
        p.left = z.right;
        s.right = z.left;
        z.right = p;
        z.left = s;
        z.color = p.color;
        p.color = Color.Black;
        s.color = Color.Black;
        n.color = Color.Black;
        recount(p);
        recount(s);
        recount(z);
        if (i > 1) {
          const pp = stack[i - 2];
          if (pp.right === p) {
            pp.right = z;
          } else {
            pp.left = z;
          }
        }
        stack[i - 1] = z;
        return;
      }
      if (s !== void 0 && s.color === Color.Black) {
        if (p.color === Color.Red) {
          p.color = Color.Black;
          p.left = repaint(s, Color.Red);
          return;
        } else {
          p.left = repaint(s, Color.Red);
          continue;
        }
      } else if (s !== void 0) {
        s = clone(s);
        p.left = s.right;
        s.right = p;
        s.color = p.color;
        p.color = Color.Red;
        recount(p);
        recount(s);
        if (i > 1) {
          const pp = stack[i - 2];
          if (pp.right === p) {
            pp.right = s;
          } else {
            pp.left = s;
          }
        }
        stack[i - 1] = s;
        stack[i] = p;
        if (i + 1 < stack.length) {
          stack[i + 1] = n;
        } else {
          stack.push(n);
        }
        i = i + 2;
      }
    }
  }
};

// node_modules/effect/dist/esm/RedBlackTree.js
var has6 = has5;
var insert2 = insert;
var keys4 = keysForward;
var removeFirst2 = removeFirst;

// node_modules/effect/dist/esm/SortedSet.js
var TypeId14 = /* @__PURE__ */ Symbol.for("effect/SortedSet");
var SortedSetProto = {
  [TypeId14]: {
    _A: (_) => _
  },
  [symbol]() {
    return pipe(hash(this.keyTree), combine(hash(TypeId14)), cached(this));
  },
  [symbol2](that) {
    return isSortedSet(that) && equals(this.keyTree, that.keyTree);
  },
  [Symbol.iterator]() {
    return keys4(this.keyTree);
  },
  toString() {
    return format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "SortedSet",
      values: Array.from(this).map(toJSON)
    };
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var fromTree = (keyTree) => {
  const a = Object.create(SortedSetProto);
  a.keyTree = keyTree;
  return a;
};
var isSortedSet = (u) => hasProperty(u, TypeId14);
var add5 = /* @__PURE__ */ dual(2, (self2, value3) => has6(self2.keyTree, value3) ? self2 : fromTree(insert2(self2.keyTree, value3, true)));
var remove7 = /* @__PURE__ */ dual(2, (self2, value3) => fromTree(removeFirst2(self2.keyTree, value3)));

// node_modules/effect/dist/esm/internal/supervisor.js
var SupervisorSymbolKey = "effect/Supervisor";
var SupervisorTypeId = /* @__PURE__ */ Symbol.for(SupervisorSymbolKey);
var supervisorVariance = {
  /* c8 ignore next */
  _T: (_) => _
};
var ProxySupervisor = class _ProxySupervisor {
  underlying;
  value0;
  [SupervisorTypeId] = supervisorVariance;
  constructor(underlying, value0) {
    this.underlying = underlying;
    this.value0 = value0;
  }
  get value() {
    return this.value0;
  }
  onStart(context5, effect2, parent, fiber) {
    this.underlying.onStart(context5, effect2, parent, fiber);
  }
  onEnd(value3, fiber) {
    this.underlying.onEnd(value3, fiber);
  }
  onEffect(fiber, effect2) {
    this.underlying.onEffect(fiber, effect2);
  }
  onSuspend(fiber) {
    this.underlying.onSuspend(fiber);
  }
  onResume(fiber) {
    this.underlying.onResume(fiber);
  }
  map(f) {
    return new _ProxySupervisor(this, pipe(this.value, map8(f)));
  }
  zip(right3) {
    return new Zip(this, right3);
  }
};
var Zip = class _Zip {
  left;
  right;
  _tag = "Zip";
  [SupervisorTypeId] = supervisorVariance;
  constructor(left3, right3) {
    this.left = left3;
    this.right = right3;
  }
  get value() {
    return zip2(this.left.value, this.right.value);
  }
  onStart(context5, effect2, parent, fiber) {
    this.left.onStart(context5, effect2, parent, fiber);
    this.right.onStart(context5, effect2, parent, fiber);
  }
  onEnd(value3, fiber) {
    this.left.onEnd(value3, fiber);
    this.right.onEnd(value3, fiber);
  }
  onEffect(fiber, effect2) {
    this.left.onEffect(fiber, effect2);
    this.right.onEffect(fiber, effect2);
  }
  onSuspend(fiber) {
    this.left.onSuspend(fiber);
    this.right.onSuspend(fiber);
  }
  onResume(fiber) {
    this.left.onResume(fiber);
    this.right.onResume(fiber);
  }
  map(f) {
    return new ProxySupervisor(this, pipe(this.value, map8(f)));
  }
  zip(right3) {
    return new _Zip(this, right3);
  }
};
var isZip = (self2) => hasProperty(self2, SupervisorTypeId) && isTagged(self2, "Zip");
var Track = class {
  [SupervisorTypeId] = supervisorVariance;
  fibers = /* @__PURE__ */ new Set();
  get value() {
    return sync(() => Array.from(this.fibers));
  }
  onStart(_context, _effect, _parent, fiber) {
    this.fibers.add(fiber);
  }
  onEnd(_value, fiber) {
    this.fibers.delete(fiber);
  }
  onEffect(_fiber, _effect) {
  }
  onSuspend(_fiber) {
  }
  onResume(_fiber) {
  }
  map(f) {
    return new ProxySupervisor(this, pipe(this.value, map8(f)));
  }
  zip(right3) {
    return new Zip(this, right3);
  }
  onRun(execution, _fiber) {
    return execution();
  }
};
var Const = class {
  effect;
  [SupervisorTypeId] = supervisorVariance;
  constructor(effect2) {
    this.effect = effect2;
  }
  get value() {
    return this.effect;
  }
  onStart(_context, _effect, _parent, _fiber) {
  }
  onEnd(_value, _fiber) {
  }
  onEffect(_fiber, _effect) {
  }
  onSuspend(_fiber) {
  }
  onResume(_fiber) {
  }
  map(f) {
    return new ProxySupervisor(this, pipe(this.value, map8(f)));
  }
  zip(right3) {
    return new Zip(this, right3);
  }
  onRun(execution, _fiber) {
    return execution();
  }
};
var FibersIn = class {
  ref;
  [SupervisorTypeId] = supervisorVariance;
  constructor(ref) {
    this.ref = ref;
  }
  get value() {
    return sync(() => get6(this.ref));
  }
  onStart(_context, _effect, _parent, fiber) {
    pipe(this.ref, set2(pipe(get6(this.ref), add5(fiber))));
  }
  onEnd(_value, fiber) {
    pipe(this.ref, set2(pipe(get6(this.ref), remove7(fiber))));
  }
  onEffect(_fiber, _effect) {
  }
  onSuspend(_fiber) {
  }
  onResume(_fiber) {
  }
  map(f) {
    return new ProxySupervisor(this, pipe(this.value, map8(f)));
  }
  zip(right3) {
    return new Zip(this, right3);
  }
  onRun(execution, _fiber) {
    return execution();
  }
};
var unsafeTrack = () => {
  return new Track();
};
var track = /* @__PURE__ */ sync(unsafeTrack);
var fromEffect = (effect2) => {
  return new Const(effect2);
};
var none8 = /* @__PURE__ */ globalValue("effect/Supervisor/none", () => fromEffect(void_));

// node_modules/effect/dist/esm/Differ.js
var make34 = make15;

// node_modules/effect/dist/esm/internal/supervisor/patch.js
var OP_EMPTY3 = "Empty";
var OP_ADD_SUPERVISOR = "AddSupervisor";
var OP_REMOVE_SUPERVISOR = "RemoveSupervisor";
var OP_AND_THEN2 = "AndThen";
var empty25 = {
  _tag: OP_EMPTY3
};
var combine8 = (self2, that) => {
  return {
    _tag: OP_AND_THEN2,
    first: self2,
    second: that
  };
};
var patch8 = (self2, supervisor) => {
  return patchLoop(supervisor, of2(self2));
};
var patchLoop = (_supervisor, _patches) => {
  let supervisor = _supervisor;
  let patches = _patches;
  while (isNonEmpty(patches)) {
    const head5 = headNonEmpty2(patches);
    switch (head5._tag) {
      case OP_EMPTY3: {
        patches = tailNonEmpty2(patches);
        break;
      }
      case OP_ADD_SUPERVISOR: {
        supervisor = supervisor.zip(head5.supervisor);
        patches = tailNonEmpty2(patches);
        break;
      }
      case OP_REMOVE_SUPERVISOR: {
        supervisor = removeSupervisor(supervisor, head5.supervisor);
        patches = tailNonEmpty2(patches);
        break;
      }
      case OP_AND_THEN2: {
        patches = prepend2(head5.first)(prepend2(head5.second)(tailNonEmpty2(patches)));
        break;
      }
    }
  }
  return supervisor;
};
var removeSupervisor = (self2, that) => {
  if (equals(self2, that)) {
    return none8;
  } else {
    if (isZip(self2)) {
      return removeSupervisor(self2.left, that).zip(removeSupervisor(self2.right, that));
    } else {
      return self2;
    }
  }
};
var toSet2 = (self2) => {
  if (equals(self2, none8)) {
    return empty7();
  } else {
    if (isZip(self2)) {
      return pipe(toSet2(self2.left), union3(toSet2(self2.right)));
    } else {
      return make11(self2);
    }
  }
};
var diff7 = (oldValue, newValue) => {
  if (equals(oldValue, newValue)) {
    return empty25;
  }
  const oldSupervisors = toSet2(oldValue);
  const newSupervisors = toSet2(newValue);
  const added = pipe(newSupervisors, difference3(oldSupervisors), reduce4(empty25, (patch9, supervisor) => combine8(patch9, {
    _tag: OP_ADD_SUPERVISOR,
    supervisor
  })));
  const removed = pipe(oldSupervisors, difference3(newSupervisors), reduce4(empty25, (patch9, supervisor) => combine8(patch9, {
    _tag: OP_REMOVE_SUPERVISOR,
    supervisor
  })));
  return combine8(added, removed);
};
var differ2 = /* @__PURE__ */ make34({
  empty: empty25,
  patch: patch8,
  combine: combine8,
  diff: diff7
});

// node_modules/effect/dist/esm/internal/fiberRuntime.js
var fiberStarted = /* @__PURE__ */ counter5("effect_fiber_started", {
  incremental: true
});
var fiberActive = /* @__PURE__ */ counter5("effect_fiber_active");
var fiberSuccesses = /* @__PURE__ */ counter5("effect_fiber_successes", {
  incremental: true
});
var fiberFailures = /* @__PURE__ */ counter5("effect_fiber_failures", {
  incremental: true
});
var fiberLifetimes = /* @__PURE__ */ tagged(/* @__PURE__ */ histogram5("effect_fiber_lifetimes", /* @__PURE__ */ exponential({
  start: 0.5,
  factor: 2,
  count: 35
})), "time_unit", "milliseconds");
var EvaluationSignalContinue = "Continue";
var EvaluationSignalDone = "Done";
var EvaluationSignalYieldNow = "Yield";
var runtimeFiberVariance = {
  /* c8 ignore next */
  _E: (_) => _,
  /* c8 ignore next */
  _A: (_) => _
};
var absurd2 = (_) => {
  throw new Error(`BUG: FiberRuntime - ${toStringUnknown(_)} - please report an issue at https://github.com/Effect-TS/effect/issues`);
};
var YieldedOp = /* @__PURE__ */ Symbol.for("effect/internal/fiberRuntime/YieldedOp");
var yieldedOpChannel = /* @__PURE__ */ globalValue("effect/internal/fiberRuntime/yieldedOpChannel", () => ({
  currentOp: null
}));
var contOpSuccess = {
  [OP_ON_SUCCESS]: (_, cont, value3) => {
    return internalCall(() => cont.effect_instruction_i1(value3));
  },
  ["OnStep"]: (_, _cont, value3) => {
    return exitSucceed(exitSucceed(value3));
  },
  [OP_ON_SUCCESS_AND_FAILURE]: (_, cont, value3) => {
    return internalCall(() => cont.effect_instruction_i2(value3));
  },
  [OP_REVERT_FLAGS]: (self2, cont, value3) => {
    self2.patchRuntimeFlags(self2._runtimeFlags, cont.patch);
    if (interruptible(self2._runtimeFlags) && self2.isInterrupted()) {
      return exitFailCause(self2.getInterruptedCause());
    } else {
      return exitSucceed(value3);
    }
  },
  [OP_WHILE]: (self2, cont, value3) => {
    internalCall(() => cont.effect_instruction_i2(value3));
    if (internalCall(() => cont.effect_instruction_i0())) {
      self2.pushStack(cont);
      return internalCall(() => cont.effect_instruction_i1());
    } else {
      return void_;
    }
  }
};
var drainQueueWhileRunningTable = {
  [OP_INTERRUPT_SIGNAL]: (self2, runtimeFlags2, cur, message) => {
    self2.processNewInterruptSignal(message.cause);
    return interruptible(runtimeFlags2) ? exitFailCause(message.cause) : cur;
  },
  [OP_RESUME]: (_self, _runtimeFlags, _cur, _message) => {
    throw new Error("It is illegal to have multiple concurrent run loops in a single fiber");
  },
  [OP_STATEFUL]: (self2, runtimeFlags2, cur, message) => {
    message.onFiber(self2, running2(runtimeFlags2));
    return cur;
  },
  [OP_YIELD_NOW]: (_self, _runtimeFlags, cur, _message) => {
    return flatMap7(yieldNow(), () => cur);
  }
};
var runBlockedRequests = (self2) => forEachSequentialDiscard(flatten2(self2), (requestsByRequestResolver) => forEachConcurrentDiscard(sequentialCollectionToChunk(requestsByRequestResolver), ([dataSource, sequential4]) => {
  const map18 = /* @__PURE__ */ new Map();
  const arr = [];
  for (const block of sequential4) {
    arr.push(toReadonlyArray(block));
    for (const entry of block) {
      map18.set(entry.request, entry);
    }
  }
  const flat = arr.flat();
  return fiberRefLocally(invokeWithInterrupt(dataSource.runAll(arr), flat, () => flat.forEach((entry) => {
    entry.listeners.interrupted = true;
  })), currentRequestMap, map18);
}, false, false));
var FiberRuntime = class {
  [FiberTypeId] = fiberVariance;
  [RuntimeFiberTypeId] = runtimeFiberVariance;
  pipe() {
    return pipeArguments(this, arguments);
  }
  _fiberRefs;
  _fiberId;
  _runtimeFlags;
  _queue = /* @__PURE__ */ new Array();
  _children = null;
  _observers = /* @__PURE__ */ new Array();
  _running = false;
  _stack = [];
  _asyncInterruptor = null;
  _asyncBlockingOn = null;
  _exitValue = null;
  _steps = [];
  _supervisor;
  _scheduler;
  _tracer;
  currentOpCount = 0;
  isYielding = false;
  constructor(fiberId3, fiberRefs0, runtimeFlags0) {
    this._runtimeFlags = runtimeFlags0;
    this._fiberId = fiberId3;
    this._fiberRefs = fiberRefs0;
    this._supervisor = this.getFiberRef(currentSupervisor);
    this._scheduler = this.getFiberRef(currentScheduler2);
    if (runtimeMetrics(runtimeFlags0)) {
      const tags = this.getFiberRef(currentMetricLabels);
      fiberStarted.unsafeUpdate(1, tags);
      fiberActive.unsafeUpdate(1, tags);
    }
    this._tracer = get3(this.getFiberRef(currentServices), tracerTag);
  }
  /**
   * The identity of the fiber.
   */
  id() {
    return this._fiberId;
  }
  /**
   * Begins execution of the effect associated with this fiber on in the
   * background. This can be called to "kick off" execution of a fiber after
   * it has been created.
   */
  resume(effect2) {
    this.tell(resume(effect2));
  }
  /**
   * The status of the fiber.
   */
  get status() {
    return this.ask((_, status) => status);
  }
  /**
   * Gets the fiber runtime flags.
   */
  get runtimeFlags() {
    return this.ask((state, status) => {
      if (isDone2(status)) {
        return state._runtimeFlags;
      }
      return status.runtimeFlags;
    });
  }
  /**
   * Returns the current `FiberScope` for the fiber.
   */
  scope() {
    return unsafeMake8(this);
  }
  /**
   * Retrieves the immediate children of the fiber.
   */
  get children() {
    return this.ask((fiber) => Array.from(fiber.getChildren()));
  }
  /**
   * Gets the fiber's set of children.
   */
  getChildren() {
    if (this._children === null) {
      this._children = /* @__PURE__ */ new Set();
    }
    return this._children;
  }
  /**
   * Retrieves the interrupted cause of the fiber, which will be `Cause.empty`
   * if the fiber has not been interrupted.
   *
   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked
   * on this fiber, then values derived from the fiber's state (including the
   * log annotations and log level) may not be up-to-date.
   */
  getInterruptedCause() {
    return this.getFiberRef(currentInterruptedCause);
  }
  /**
   * Retrieves the whole set of fiber refs.
   */
  fiberRefs() {
    return this.ask((fiber) => fiber.getFiberRefs());
  }
  /**
   * Returns an effect that will contain information computed from the fiber
   * state and status while running on the fiber.
   *
   * This allows the outside world to interact safely with mutable fiber state
   * without locks or immutable data.
   */
  ask(f) {
    return suspend(() => {
      const deferred = deferredUnsafeMake(this._fiberId);
      this.tell(stateful((fiber, status) => {
        deferredUnsafeDone(deferred, sync(() => f(fiber, status)));
      }));
      return deferredAwait(deferred);
    });
  }
  /**
   * Adds a message to be processed by the fiber on the fiber.
   */
  tell(message) {
    this._queue.push(message);
    if (!this._running) {
      this._running = true;
      this.drainQueueLaterOnExecutor();
    }
  }
  get await() {
    return async((resume2) => {
      const cb = (exit4) => resume2(succeed(exit4));
      this.tell(stateful((fiber, _) => {
        if (fiber._exitValue !== null) {
          cb(this._exitValue);
        } else {
          fiber.addObserver(cb);
        }
      }));
      return sync(() => this.tell(stateful((fiber, _) => {
        fiber.removeObserver(cb);
      })));
    }, this.id());
  }
  get inheritAll() {
    return withFiberRuntime((parentFiber, parentStatus) => {
      const parentFiberId = parentFiber.id();
      const parentFiberRefs = parentFiber.getFiberRefs();
      const parentRuntimeFlags = parentStatus.runtimeFlags;
      const childFiberRefs = this.getFiberRefs();
      const updatedFiberRefs = joinAs(parentFiberRefs, parentFiberId, childFiberRefs);
      parentFiber.setFiberRefs(updatedFiberRefs);
      const updatedRuntimeFlags = parentFiber.getFiberRef(currentRuntimeFlags);
      const patch9 = pipe(
        diff4(parentRuntimeFlags, updatedRuntimeFlags),
        // Do not inherit WindDown or Interruption!
        exclude2(Interruption),
        exclude2(WindDown)
      );
      return updateRuntimeFlags(patch9);
    });
  }
  /**
   * Tentatively observes the fiber, but returns immediately if it is not
   * already done.
   */
  get poll() {
    return sync(() => fromNullable(this._exitValue));
  }
  /**
   * Unsafely observes the fiber, but returns immediately if it is not
   * already done.
   */
  unsafePoll() {
    return this._exitValue;
  }
  /**
   * In the background, interrupts the fiber as if interrupted from the specified fiber.
   */
  interruptAsFork(fiberId3) {
    return sync(() => this.tell(interruptSignal(interrupt(fiberId3))));
  }
  /**
   * In the background, interrupts the fiber as if interrupted from the specified fiber.
   */
  unsafeInterruptAsFork(fiberId3) {
    this.tell(interruptSignal(interrupt(fiberId3)));
  }
  /**
   * Adds an observer to the list of observers.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  addObserver(observer) {
    if (this._exitValue !== null) {
      observer(this._exitValue);
    } else {
      this._observers.push(observer);
    }
  }
  /**
   * Removes the specified observer from the list of observers that will be
   * notified when the fiber exits.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  removeObserver(observer) {
    this._observers = this._observers.filter((o) => o !== observer);
  }
  /**
   * Retrieves all fiber refs of the fiber.
   *
   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked
   * on this fiber, then values derived from the fiber's state (including the
   * log annotations and log level) may not be up-to-date.
   */
  getFiberRefs() {
    this.setFiberRef(currentRuntimeFlags, this._runtimeFlags);
    return this._fiberRefs;
  }
  /**
   * Deletes the specified fiber ref.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  unsafeDeleteFiberRef(fiberRef) {
    this._fiberRefs = delete_(this._fiberRefs, fiberRef);
  }
  /**
   * Retrieves the state of the fiber ref, or else its initial value.
   *
   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked
   * on this fiber, then values derived from the fiber's state (including the
   * log annotations and log level) may not be up-to-date.
   */
  getFiberRef(fiberRef) {
    if (this._fiberRefs.locals.has(fiberRef)) {
      return this._fiberRefs.locals.get(fiberRef)[0][1];
    }
    return fiberRef.initial;
  }
  /**
   * Sets the fiber ref to the specified value.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  setFiberRef(fiberRef, value3) {
    this._fiberRefs = updateAs(this._fiberRefs, {
      fiberId: this._fiberId,
      fiberRef,
      value: value3
    });
    this.refreshRefCache();
  }
  refreshRefCache() {
    this._tracer = get3(this.getFiberRef(currentServices), tracerTag);
    this._supervisor = this.getFiberRef(currentSupervisor);
    this._scheduler = this.getFiberRef(currentScheduler2);
  }
  /**
   * Wholesale replaces all fiber refs of this fiber.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  setFiberRefs(fiberRefs3) {
    this._fiberRefs = fiberRefs3;
    this.refreshRefCache();
  }
  /**
   * Adds a reference to the specified fiber inside the children set.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  addChild(child) {
    this.getChildren().add(child);
  }
  /**
   * Removes a reference to the specified fiber inside the children set.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  removeChild(child) {
    this.getChildren().delete(child);
  }
  /**
   * On the current thread, executes all messages in the fiber's inbox. This
   * method may return before all work is done, in the event the fiber executes
   * an asynchronous operation.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  drainQueueOnCurrentThread() {
    let recurse = true;
    while (recurse) {
      let evaluationSignal = EvaluationSignalContinue;
      const prev = globalThis[currentFiberURI];
      globalThis[currentFiberURI] = this;
      try {
        while (evaluationSignal === EvaluationSignalContinue) {
          evaluationSignal = this._queue.length === 0 ? EvaluationSignalDone : this.evaluateMessageWhileSuspended(this._queue.splice(0, 1)[0]);
        }
      } finally {
        this._running = false;
        globalThis[currentFiberURI] = prev;
      }
      if (this._queue.length > 0 && !this._running) {
        this._running = true;
        if (evaluationSignal === EvaluationSignalYieldNow) {
          this.drainQueueLaterOnExecutor();
          recurse = false;
        } else {
          recurse = true;
        }
      } else {
        recurse = false;
      }
    }
  }
  /**
   * Schedules the execution of all messages in the fiber's inbox.
   *
   * This method will return immediately after the scheduling
   * operation is completed, but potentially before such messages have been
   * executed.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  drainQueueLaterOnExecutor() {
    this._scheduler.scheduleTask(this.run, this.getFiberRef(currentSchedulingPriority));
  }
  /**
   * Drains the fiber's message queue while the fiber is actively running,
   * returning the next effect to execute, which may be the input effect if no
   * additional effect needs to be executed.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  drainQueueWhileRunning(runtimeFlags2, cur0) {
    let cur = cur0;
    while (this._queue.length > 0) {
      const message = this._queue.splice(0, 1)[0];
      cur = drainQueueWhileRunningTable[message._tag](this, runtimeFlags2, cur, message);
    }
    return cur;
  }
  /**
   * Determines if the fiber is interrupted.
   *
   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked
   * on this fiber, then values derived from the fiber's state (including the
   * log annotations and log level) may not be up-to-date.
   */
  isInterrupted() {
    return !isEmpty5(this.getFiberRef(currentInterruptedCause));
  }
  /**
   * Adds an interruptor to the set of interruptors that are interrupting this
   * fiber.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  addInterruptedCause(cause3) {
    const oldSC = this.getFiberRef(currentInterruptedCause);
    this.setFiberRef(currentInterruptedCause, sequential(oldSC, cause3));
  }
  /**
   * Processes a new incoming interrupt signal.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  processNewInterruptSignal(cause3) {
    this.addInterruptedCause(cause3);
    this.sendInterruptSignalToAllChildren();
  }
  /**
   * Interrupts all children of the current fiber, returning an effect that will
   * await the exit of the children. This method will return null if the fiber
   * has no children.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  sendInterruptSignalToAllChildren() {
    if (this._children === null || this._children.size === 0) {
      return false;
    }
    let told = false;
    for (const child of this._children) {
      child.tell(interruptSignal(interrupt(this.id())));
      told = true;
    }
    return told;
  }
  /**
   * Interrupts all children of the current fiber, returning an effect that will
   * await the exit of the children. This method will return null if the fiber
   * has no children.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  interruptAllChildren() {
    if (this.sendInterruptSignalToAllChildren()) {
      const it = this._children.values();
      this._children = null;
      let isDone5 = false;
      const body = () => {
        const next = it.next();
        if (!next.done) {
          return asVoid(next.value.await);
        } else {
          return sync(() => {
            isDone5 = true;
          });
        }
      };
      return whileLoop({
        while: () => !isDone5,
        body,
        step: () => {
        }
      });
    }
    return null;
  }
  reportExitValue(exit4) {
    if (runtimeMetrics(this._runtimeFlags)) {
      const tags = this.getFiberRef(currentMetricLabels);
      const startTimeMillis = this.id().startTimeMillis;
      const endTimeMillis = Date.now();
      fiberLifetimes.unsafeUpdate(endTimeMillis - startTimeMillis, tags);
      fiberActive.unsafeUpdate(-1, tags);
      switch (exit4._tag) {
        case OP_SUCCESS: {
          fiberSuccesses.unsafeUpdate(1, tags);
          break;
        }
        case OP_FAILURE: {
          fiberFailures.unsafeUpdate(1, tags);
          break;
        }
      }
    }
    if (exit4._tag === "Failure") {
      const level = this.getFiberRef(currentUnhandledErrorLogLevel);
      if (!isInterruptedOnly(exit4.cause) && level._tag === "Some") {
        this.log("Fiber terminated with an unhandled error", exit4.cause, level);
      }
    }
  }
  setExitValue(exit4) {
    this._exitValue = exit4;
    this.reportExitValue(exit4);
    for (let i = this._observers.length - 1; i >= 0; i--) {
      this._observers[i](exit4);
    }
  }
  getLoggers() {
    return this.getFiberRef(currentLoggers);
  }
  log(message, cause3, overrideLogLevel) {
    const logLevel3 = isSome2(overrideLogLevel) ? overrideLogLevel.value : this.getFiberRef(currentLogLevel);
    const minimumLogLevel3 = this.getFiberRef(currentMinimumLogLevel);
    if (greaterThan2(minimumLogLevel3, logLevel3)) {
      return;
    }
    const spans = this.getFiberRef(currentLogSpan);
    const annotations = this.getFiberRef(currentLogAnnotations);
    const loggers = this.getLoggers();
    const contextMap = this.getFiberRefs();
    if (size3(loggers) > 0) {
      const clockService = get3(this.getFiberRef(currentServices), clockTag);
      const date3 = new Date(clockService.unsafeCurrentTimeMillis());
      for (const logger of loggers) {
        logger.log({
          fiberId: this.id(),
          logLevel: logLevel3,
          message,
          cause: cause3,
          context: contextMap,
          spans,
          annotations,
          date: date3
        });
      }
    }
  }
  /**
   * Evaluates a single message on the current thread, while the fiber is
   * suspended. This method should only be called while evaluation of the
   * fiber's effect is suspended due to an asynchronous operation.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  evaluateMessageWhileSuspended(message) {
    switch (message._tag) {
      case OP_YIELD_NOW: {
        return EvaluationSignalYieldNow;
      }
      case OP_INTERRUPT_SIGNAL: {
        this.processNewInterruptSignal(message.cause);
        if (this._asyncInterruptor !== null) {
          this._asyncInterruptor(exitFailCause(message.cause));
          this._asyncInterruptor = null;
        }
        return EvaluationSignalContinue;
      }
      case OP_RESUME: {
        this._asyncInterruptor = null;
        this._asyncBlockingOn = null;
        this.evaluateEffect(message.effect);
        return EvaluationSignalContinue;
      }
      case OP_STATEFUL: {
        message.onFiber(this, this._exitValue !== null ? done4 : suspended2(this._runtimeFlags, this._asyncBlockingOn));
        return EvaluationSignalContinue;
      }
      default: {
        return absurd2(message);
      }
    }
  }
  /**
   * Evaluates an effect until completion, potentially asynchronously.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  evaluateEffect(effect0) {
    this._supervisor.onResume(this);
    try {
      let effect2 = interruptible(this._runtimeFlags) && this.isInterrupted() ? exitFailCause(this.getInterruptedCause()) : effect0;
      while (effect2 !== null) {
        const eff = effect2;
        const exit4 = this.runLoop(eff);
        if (exit4 === YieldedOp) {
          const op = yieldedOpChannel.currentOp;
          yieldedOpChannel.currentOp = null;
          if (op._op === OP_YIELD) {
            if (cooperativeYielding(this._runtimeFlags)) {
              this.tell(yieldNow2());
              this.tell(resume(exitVoid));
              effect2 = null;
            } else {
              effect2 = exitVoid;
            }
          } else if (op._op === OP_ASYNC) {
            effect2 = null;
          }
        } else {
          this._runtimeFlags = pipe(this._runtimeFlags, enable2(WindDown));
          const interruption2 = this.interruptAllChildren();
          if (interruption2 !== null) {
            effect2 = flatMap7(interruption2, () => exit4);
          } else {
            if (this._queue.length === 0) {
              this.setExitValue(exit4);
            } else {
              this.tell(resume(exit4));
            }
            effect2 = null;
          }
        }
      }
    } finally {
      this._supervisor.onSuspend(this);
    }
  }
  /**
   * Begins execution of the effect associated with this fiber on the current
   * thread. This can be called to "kick off" execution of a fiber after it has
   * been created, in hopes that the effect can be executed synchronously.
   *
   * This is not the normal way of starting a fiber, but it is useful when the
   * express goal of executing the fiber is to synchronously produce its exit.
   */
  start(effect2) {
    if (!this._running) {
      this._running = true;
      const prev = globalThis[currentFiberURI];
      globalThis[currentFiberURI] = this;
      try {
        this.evaluateEffect(effect2);
      } finally {
        this._running = false;
        globalThis[currentFiberURI] = prev;
        if (this._queue.length > 0) {
          this.drainQueueLaterOnExecutor();
        }
      }
    } else {
      this.tell(resume(effect2));
    }
  }
  /**
   * Begins execution of the effect associated with this fiber on in the
   * background, and on the correct thread pool. This can be called to "kick
   * off" execution of a fiber after it has been created, in hopes that the
   * effect can be executed synchronously.
   */
  startFork(effect2) {
    this.tell(resume(effect2));
  }
  /**
   * Takes the current runtime flags, patches them to return the new runtime
   * flags, and then makes any changes necessary to fiber state based on the
   * specified patch.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  patchRuntimeFlags(oldRuntimeFlags, patch9) {
    const newRuntimeFlags = patch4(oldRuntimeFlags, patch9);
    globalThis[currentFiberURI] = this;
    this._runtimeFlags = newRuntimeFlags;
    return newRuntimeFlags;
  }
  /**
   * Initiates an asynchronous operation, by building a callback that will
   * resume execution, and then feeding that callback to the registration
   * function, handling error cases and repeated resumptions appropriately.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  initiateAsync(runtimeFlags2, asyncRegister) {
    let alreadyCalled = false;
    const callback = (effect2) => {
      if (!alreadyCalled) {
        alreadyCalled = true;
        this.tell(resume(effect2));
      }
    };
    if (interruptible(runtimeFlags2)) {
      this._asyncInterruptor = callback;
    }
    try {
      asyncRegister(callback);
    } catch (e) {
      callback(failCause(die(e)));
    }
  }
  pushStack(cont) {
    this._stack.push(cont);
    if (cont._op === "OnStep") {
      this._steps.push({
        refs: this.getFiberRefs(),
        flags: this._runtimeFlags
      });
    }
  }
  popStack() {
    const item = this._stack.pop();
    if (item) {
      if (item._op === "OnStep") {
        this._steps.pop();
      }
      return item;
    }
    return;
  }
  getNextSuccessCont() {
    let frame = this.popStack();
    while (frame) {
      if (frame._op !== OP_ON_FAILURE) {
        return frame;
      }
      frame = this.popStack();
    }
  }
  getNextFailCont() {
    let frame = this.popStack();
    while (frame) {
      if (frame._op !== OP_ON_SUCCESS && frame._op !== OP_WHILE) {
        return frame;
      }
      frame = this.popStack();
    }
  }
  [OP_TAG](op) {
    return map8(fiberRefGet(currentContext), (context5) => unsafeGet3(context5, op));
  }
  ["Left"](op) {
    return fail2(op.left);
  }
  ["None"](_) {
    return fail2(new NoSuchElementException());
  }
  ["Right"](op) {
    return exitSucceed(op.right);
  }
  ["Some"](op) {
    return exitSucceed(op.value);
  }
  ["Micro"](op) {
    return unsafeAsync((microResume) => {
      const env = envUnsafeMakeEmpty().pipe(envSet(currentContext2, this.getFiberRef(currentContext)));
      let resume2 = microResume;
      op[runSymbol](env, (result) => {
        if (result._tag === "Right") {
          return resume2(exitSucceed(result.right));
        }
        switch (result.left._tag) {
          case "Interrupt": {
            return resume2(exitFailCause(interrupt(none4)));
          }
          case "Fail": {
            return resume2(fail2(result.left.error));
          }
          case "Die": {
            return resume2(die2(result.left.defect));
          }
        }
      });
      return async((abortResume) => {
        resume2 = (_) => {
          abortResume(void_);
        };
        envGet(env, currentAbortController).abort();
      });
    });
  }
  [OP_SYNC](op) {
    const value3 = internalCall(() => op.effect_instruction_i0());
    const cont = this.getNextSuccessCont();
    if (cont !== void 0) {
      if (!(cont._op in contOpSuccess)) {
        absurd2(cont);
      }
      return contOpSuccess[cont._op](this, cont, value3);
    } else {
      yieldedOpChannel.currentOp = exitSucceed(value3);
      return YieldedOp;
    }
  }
  [OP_SUCCESS](op) {
    const oldCur = op;
    const cont = this.getNextSuccessCont();
    if (cont !== void 0) {
      if (!(cont._op in contOpSuccess)) {
        absurd2(cont);
      }
      return contOpSuccess[cont._op](this, cont, oldCur.effect_instruction_i0);
    } else {
      yieldedOpChannel.currentOp = oldCur;
      return YieldedOp;
    }
  }
  [OP_FAILURE](op) {
    const cause3 = op.effect_instruction_i0;
    const cont = this.getNextFailCont();
    if (cont !== void 0) {
      switch (cont._op) {
        case OP_ON_FAILURE:
        case OP_ON_SUCCESS_AND_FAILURE: {
          if (!(interruptible(this._runtimeFlags) && this.isInterrupted())) {
            return internalCall(() => cont.effect_instruction_i1(cause3));
          } else {
            return exitFailCause(stripFailures(cause3));
          }
        }
        case "OnStep": {
          if (!(interruptible(this._runtimeFlags) && this.isInterrupted())) {
            return exitSucceed(exitFailCause(cause3));
          } else {
            return exitFailCause(stripFailures(cause3));
          }
        }
        case OP_REVERT_FLAGS: {
          this.patchRuntimeFlags(this._runtimeFlags, cont.patch);
          if (interruptible(this._runtimeFlags) && this.isInterrupted()) {
            return exitFailCause(sequential(cause3, this.getInterruptedCause()));
          } else {
            return exitFailCause(cause3);
          }
        }
        default: {
          absurd2(cont);
        }
      }
    } else {
      yieldedOpChannel.currentOp = exitFailCause(cause3);
      return YieldedOp;
    }
  }
  [OP_WITH_RUNTIME](op) {
    return internalCall(() => op.effect_instruction_i0(this, running2(this._runtimeFlags)));
  }
  ["Blocked"](op) {
    const refs = this.getFiberRefs();
    const flags = this._runtimeFlags;
    if (this._steps.length > 0) {
      const frames = [];
      const snap = this._steps[this._steps.length - 1];
      let frame = this.popStack();
      while (frame && frame._op !== "OnStep") {
        frames.push(frame);
        frame = this.popStack();
      }
      this.setFiberRefs(snap.refs);
      this._runtimeFlags = snap.flags;
      const patchRefs = diff6(snap.refs, refs);
      const patchFlags = diff4(snap.flags, flags);
      return exitSucceed(blocked(op.effect_instruction_i0, withFiberRuntime((newFiber) => {
        while (frames.length > 0) {
          newFiber.pushStack(frames.pop());
        }
        newFiber.setFiberRefs(patch7(newFiber.id(), newFiber.getFiberRefs())(patchRefs));
        newFiber._runtimeFlags = patch4(patchFlags)(newFiber._runtimeFlags);
        return op.effect_instruction_i1;
      })));
    }
    return uninterruptibleMask((restore) => flatMap7(forkDaemon(runRequestBlock(op.effect_instruction_i0)), () => restore(op.effect_instruction_i1)));
  }
  ["RunBlocked"](op) {
    return runBlockedRequests(op.effect_instruction_i0);
  }
  [OP_UPDATE_RUNTIME_FLAGS](op) {
    const updateFlags = op.effect_instruction_i0;
    const oldRuntimeFlags = this._runtimeFlags;
    const newRuntimeFlags = patch4(oldRuntimeFlags, updateFlags);
    if (interruptible(newRuntimeFlags) && this.isInterrupted()) {
      return exitFailCause(this.getInterruptedCause());
    } else {
      this.patchRuntimeFlags(this._runtimeFlags, updateFlags);
      if (op.effect_instruction_i1) {
        const revertFlags = diff4(newRuntimeFlags, oldRuntimeFlags);
        this.pushStack(new RevertFlags(revertFlags, op));
        return internalCall(() => op.effect_instruction_i1(oldRuntimeFlags));
      } else {
        return exitVoid;
      }
    }
  }
  [OP_ON_SUCCESS](op) {
    this.pushStack(op);
    return op.effect_instruction_i0;
  }
  ["OnStep"](op) {
    this.pushStack(op);
    return op.effect_instruction_i0;
  }
  [OP_ON_FAILURE](op) {
    this.pushStack(op);
    return op.effect_instruction_i0;
  }
  [OP_ON_SUCCESS_AND_FAILURE](op) {
    this.pushStack(op);
    return op.effect_instruction_i0;
  }
  [OP_ASYNC](op) {
    this._asyncBlockingOn = op.effect_instruction_i1;
    this.initiateAsync(this._runtimeFlags, op.effect_instruction_i0);
    yieldedOpChannel.currentOp = op;
    return YieldedOp;
  }
  [OP_YIELD](op) {
    this.isYielding = false;
    yieldedOpChannel.currentOp = op;
    return YieldedOp;
  }
  [OP_WHILE](op) {
    const check2 = op.effect_instruction_i0;
    const body = op.effect_instruction_i1;
    if (check2()) {
      this.pushStack(op);
      return body();
    } else {
      return exitVoid;
    }
  }
  [OP_COMMIT](op) {
    return internalCall(() => op.commit());
  }
  /**
   * The main run-loop for evaluating effects.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  runLoop(effect0) {
    let cur = effect0;
    this.currentOpCount = 0;
    while (true) {
      if ((this._runtimeFlags & OpSupervision) !== 0) {
        this._supervisor.onEffect(this, cur);
      }
      if (this._queue.length > 0) {
        cur = this.drainQueueWhileRunning(this._runtimeFlags, cur);
      }
      if (!this.isYielding) {
        this.currentOpCount += 1;
        const shouldYield = this._scheduler.shouldYield(this);
        if (shouldYield !== false) {
          this.isYielding = true;
          this.currentOpCount = 0;
          const oldCur = cur;
          cur = flatMap7(yieldNow({
            priority: shouldYield
          }), () => oldCur);
        }
      }
      try {
        if (!("_op" in cur) || !(cur._op in this)) {
          absurd2(cur);
        }
        cur = this._tracer.context(() => {
          if (getCurrentVersion() !== cur[EffectTypeId3]._V) {
            return dieMessage(`Cannot execute an Effect versioned ${cur[EffectTypeId3]._V} with a Runtime of version ${getCurrentVersion()}`);
          }
          return this[cur._op](cur);
        }, this);
        if (cur === YieldedOp) {
          const op = yieldedOpChannel.currentOp;
          if (op._op === OP_YIELD || op._op === OP_ASYNC) {
            return YieldedOp;
          }
          yieldedOpChannel.currentOp = null;
          return op._op === OP_SUCCESS || op._op === OP_FAILURE ? op : exitFailCause(die(op));
        }
      } catch (e) {
        if (isEffectError(e)) {
          cur = exitFailCause(e.cause);
        } else if (isInterruptedException(e)) {
          cur = exitFailCause(sequential(die(e), interrupt(none4)));
        } else {
          cur = die2(e);
        }
      }
    }
  }
  run = () => {
    this.drainQueueOnCurrentThread();
  };
};
var currentMinimumLogLevel = /* @__PURE__ */ globalValue("effect/FiberRef/currentMinimumLogLevel", () => fiberRefUnsafeMake(fromLiteral("Info")));
var loggerWithConsoleLog = (self2) => makeLogger((opts) => {
  const services = getOrDefault2(opts.context, currentServices);
  get3(services, consoleTag).unsafe.log(self2.log(opts));
});
var loggerWithConsoleError = (self2) => makeLogger((opts) => {
  const services = getOrDefault2(opts.context, currentServices);
  get3(services, consoleTag).unsafe.error(self2.log(opts));
});
var defaultLogger = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/defaultLogger"), () => loggerWithConsoleLog(stringLogger));
var jsonLogger2 = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/jsonLogger"), () => loggerWithConsoleLog(jsonLogger));
var logFmtLogger = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/logFmtLogger"), () => loggerWithConsoleLog(logfmtLogger));
var prettyLogger2 = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/prettyLogger"), () => prettyLogger());
var structuredLogger2 = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/structuredLogger"), () => loggerWithConsoleLog(structuredLogger));
var tracerLogger = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/tracerLogger"), () => makeLogger(({
  annotations,
  cause: cause3,
  context: context5,
  fiberId: fiberId3,
  logLevel: logLevel3,
  message
}) => {
  const span4 = flatMap(get9(context5, currentContext), getOption2(spanTag));
  const clockService = map(get9(context5, currentServices), (_) => get3(_, clockTag));
  if (span4._tag === "None" || span4.value._tag === "ExternalSpan" || clockService._tag === "None") {
    return;
  }
  const attributes = Object.fromEntries(map5(annotations, toStringUnknown));
  attributes["effect.fiberId"] = threadName2(fiberId3);
  attributes["effect.logLevel"] = logLevel3.label;
  if (cause3 !== null && cause3._tag !== "Empty") {
    attributes["effect.cause"] = pretty(cause3);
  }
  span4.value.event(String(message), clockService.value.unsafeCurrentTimeNanos(), attributes);
}));
var loggerWithSpanAnnotations = (self2) => mapInputOptions(self2, (options) => {
  const span4 = flatMap(get9(options.context, currentContext), getOption2(spanTag));
  if (span4._tag === "None") {
    return options;
  }
  return {
    ...options,
    annotations: pipe(options.annotations, set3("effect.traceId", span4.value.traceId), set3("effect.spanId", span4.value.spanId), span4.value._tag === "Span" ? set3("effect.spanName", span4.value.name) : identity)
  };
});
var currentLoggers = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentLoggers"), () => fiberRefUnsafeMakeHashSet(make11(defaultLogger, tracerLogger)));
var batchedLogger = /* @__PURE__ */ dual(3, (self2, window2, f) => flatMap7(scope, (scope5) => {
  let buffer = [];
  const flush = suspend(() => {
    if (buffer.length === 0) {
      return void_;
    }
    const arr = buffer;
    buffer = [];
    return f(arr);
  });
  return uninterruptibleMask((restore) => pipe(sleep3(window2), zipRight(flush), forever, restore, forkDaemon, flatMap7((fiber) => scopeAddFinalizer(scope5, interruptFiber(fiber))), zipRight(addFinalizer(() => flush)), as(makeLogger((options) => {
    buffer.push(self2.log(options));
  }))));
}));
var annotateLogsScoped = function() {
  if (typeof arguments[0] === "string") {
    return fiberRefLocallyScopedWith(currentLogAnnotations, set3(arguments[0], arguments[1]));
  }
  const entries2 = Object.entries(arguments[0]);
  return fiberRefLocallyScopedWith(currentLogAnnotations, mutate3((annotations) => {
    for (let i = 0; i < entries2.length; i++) {
      const [key, value3] = entries2[i];
      set3(annotations, key, value3);
    }
    return annotations;
  }));
};
var acquireRelease = /* @__PURE__ */ dual((args) => isEffect(args[0]), (acquire, release) => uninterruptible(tap(acquire, (a) => addFinalizer((exit4) => release(a, exit4)))));
var acquireReleaseInterruptible = /* @__PURE__ */ dual((args) => isEffect(args[0]), (acquire, release) => ensuring(acquire, addFinalizer((exit4) => release(exit4))));
var addFinalizer = (finalizer) => withFiberRuntime((runtime4) => {
  const acquireRefs = runtime4.getFiberRefs();
  const acquireFlags = runtime4._runtimeFlags;
  return flatMap7(scope, (scope5) => scopeAddFinalizerExit(scope5, (exit4) => withFiberRuntime((runtimeFinalizer) => {
    const preRefs = runtimeFinalizer.getFiberRefs();
    const preFlags = runtimeFinalizer._runtimeFlags;
    const patchRefs = diff6(preRefs, acquireRefs);
    const patchFlags = diff4(preFlags, acquireFlags);
    const inverseRefs = diff6(acquireRefs, preRefs);
    runtimeFinalizer.setFiberRefs(patch7(patchRefs, runtimeFinalizer.id(), acquireRefs));
    return ensuring(withRuntimeFlags(finalizer(exit4), patchFlags), sync(() => {
      runtimeFinalizer.setFiberRefs(patch7(inverseRefs, runtimeFinalizer.id(), runtimeFinalizer.getFiberRefs()));
    }));
  })));
});
var daemonChildren = (self2) => {
  const forkScope = fiberRefLocally(currentForkScopeOverride, some2(globalScope));
  return forkScope(self2);
};
var _existsParFound = /* @__PURE__ */ Symbol.for("effect/Effect/existsPar/found");
var exists = /* @__PURE__ */ dual((args) => isIterable(args[0]) && !isEffect(args[0]), (elements, f, options) => matchSimple(options?.concurrency, () => suspend(() => existsLoop(elements[Symbol.iterator](), 0, f)), () => matchEffect(forEach7(elements, (a, i) => if_(f(a, i), {
  onTrue: () => fail2(_existsParFound),
  onFalse: () => void_
}), options), {
  onFailure: (e) => e === _existsParFound ? succeed(true) : fail2(e),
  onSuccess: () => succeed(false)
})));
var existsLoop = (iterator, index, f) => {
  const next = iterator.next();
  if (next.done) {
    return succeed(false);
  }
  return pipe(flatMap7(f(next.value, index), (b) => b ? succeed(b) : existsLoop(iterator, index + 1, f)));
};
var filter4 = /* @__PURE__ */ dual((args) => isIterable(args[0]) && !isEffect(args[0]), (elements, f, options) => {
  const predicate = options?.negate ? (a, i) => map8(f(a, i), not) : f;
  return matchSimple(options?.concurrency, () => suspend(() => fromIterable(elements).reduceRight((effect2, a, i) => zipWith2(effect2, suspend(() => predicate(a, i)), (list, b) => b ? [a, ...list] : list), sync(() => new Array()))), () => map8(forEach7(elements, (a, i) => map8(predicate(a, i), (b) => b ? some2(a) : none2()), options), getSomes));
});
var allResolveInput = (input) => {
  if (Array.isArray(input) || isIterable(input)) {
    return [input, none2()];
  }
  const keys5 = Object.keys(input);
  const size11 = keys5.length;
  return [keys5.map((k) => input[k]), some2((values3) => {
    const res = {};
    for (let i = 0; i < size11; i++) {
      ;
      res[keys5[i]] = values3[i];
    }
    return res;
  })];
};
var allValidate = (effects, reconcile, options) => {
  const eitherEffects = [];
  for (const effect2 of effects) {
    eitherEffects.push(either2(effect2));
  }
  return flatMap7(forEach7(eitherEffects, identity, {
    concurrency: options?.concurrency,
    batching: options?.batching
  }), (eithers) => {
    const none11 = none2();
    const size11 = eithers.length;
    const errors = new Array(size11);
    const successes = new Array(size11);
    let errored = false;
    for (let i = 0; i < size11; i++) {
      const either4 = eithers[i];
      if (either4._tag === "Left") {
        errors[i] = some2(either4.left);
        errored = true;
      } else {
        successes[i] = either4.right;
        errors[i] = none11;
      }
    }
    if (errored) {
      return reconcile._tag === "Some" ? fail2(reconcile.value(errors)) : fail2(errors);
    } else if (options?.discard) {
      return void_;
    }
    return reconcile._tag === "Some" ? succeed(reconcile.value(successes)) : succeed(successes);
  });
};
var allEither = (effects, reconcile, options) => {
  const eitherEffects = [];
  for (const effect2 of effects) {
    eitherEffects.push(either2(effect2));
  }
  if (options?.discard) {
    return forEach7(eitherEffects, identity, {
      concurrency: options?.concurrency,
      batching: options?.batching,
      discard: true
    });
  }
  return map8(forEach7(eitherEffects, identity, {
    concurrency: options?.concurrency,
    batching: options?.batching
  }), (eithers) => reconcile._tag === "Some" ? reconcile.value(eithers) : eithers);
};
var all3 = (arg, options) => {
  const [effects, reconcile] = allResolveInput(arg);
  if (options?.mode === "validate") {
    return allValidate(effects, reconcile, options);
  } else if (options?.mode === "either") {
    return allEither(effects, reconcile, options);
  }
  return options?.discard !== true && reconcile._tag === "Some" ? map8(forEach7(effects, identity, options), reconcile.value) : forEach7(effects, identity, options);
};
var allWith = (options) => (arg) => all3(arg, options);
var allSuccesses = (elements, options) => map8(all3(fromIterable(elements).map(exit), options), filterMap((exit4) => exitIsSuccess(exit4) ? some2(exit4.effect_instruction_i0) : none2()));
var replicate = /* @__PURE__ */ dual(2, (self2, n) => Array.from({
  length: n
}, () => self2));
var replicateEffect = /* @__PURE__ */ dual((args) => isEffect(args[0]), (self2, n, options) => all3(replicate(self2, n), options));
var forEach7 = /* @__PURE__ */ dual((args) => isIterable(args[0]), (self2, f, options) => withFiberRuntime((r) => {
  const isRequestBatchingEnabled = options?.batching === true || options?.batching === "inherit" && r.getFiberRef(currentRequestBatching);
  if (options?.discard) {
    return match7(options.concurrency, () => finalizersMask(sequential3)((restore) => isRequestBatchingEnabled ? forEachConcurrentDiscard(self2, (a, i) => restore(f(a, i)), true, false, 1) : forEachSequentialDiscard(self2, (a, i) => restore(f(a, i)))), () => finalizersMask(parallel3)((restore) => forEachConcurrentDiscard(self2, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false)), (n) => finalizersMask(parallelN2(n))((restore) => forEachConcurrentDiscard(self2, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false, n)));
  }
  return match7(options?.concurrency, () => finalizersMask(sequential3)((restore) => isRequestBatchingEnabled ? forEachParN(self2, 1, (a, i) => restore(f(a, i)), true) : forEachSequential(self2, (a, i) => restore(f(a, i)))), () => finalizersMask(parallel3)((restore) => forEachParUnbounded(self2, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)), (n) => finalizersMask(parallelN2(n))((restore) => forEachParN(self2, n, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)));
}));
var forEachParUnbounded = (self2, f, batching) => suspend(() => {
  const as4 = fromIterable(self2);
  const array5 = new Array(as4.length);
  const fn = (a, i) => flatMap7(f(a, i), (b) => sync(() => array5[i] = b));
  return zipRight(forEachConcurrentDiscard(as4, fn, batching, false), succeed(array5));
});
var forEachConcurrentDiscard = (self2, f, batching, processAll, n) => uninterruptibleMask((restore) => transplant((graft) => withFiberRuntime((parent) => {
  let todos = Array.from(self2).reverse();
  let target = todos.length;
  if (target === 0) {
    return void_;
  }
  let counter6 = 0;
  let interrupted = false;
  const fibersCount = n ? Math.min(todos.length, n) : todos.length;
  const fibers = /* @__PURE__ */ new Set();
  const results = new Array();
  const interruptAll = () => fibers.forEach((fiber) => {
    fiber._scheduler.scheduleTask(() => {
      fiber.unsafeInterruptAsFork(parent.id());
    }, 0);
  });
  const startOrder = new Array();
  const joinOrder = new Array();
  const residual = new Array();
  const collectExits = () => {
    const exits = results.filter(({
      exit: exit4
    }) => exit4._tag === "Failure").sort((a, b) => a.index < b.index ? -1 : a.index === b.index ? 0 : 1).map(({
      exit: exit4
    }) => exit4);
    if (exits.length === 0) {
      exits.push(exitVoid);
    }
    return exits;
  };
  const runFiber = (eff, interruptImmediately = false) => {
    const runnable = uninterruptible(graft(eff));
    const fiber = unsafeForkUnstarted(runnable, parent, parent._runtimeFlags, globalScope);
    parent._scheduler.scheduleTask(() => {
      if (interruptImmediately) {
        fiber.unsafeInterruptAsFork(parent.id());
      }
      fiber.resume(runnable);
    }, 0);
    return fiber;
  };
  const onInterruptSignal = () => {
    if (!processAll) {
      target -= todos.length;
      todos = [];
    }
    interrupted = true;
    interruptAll();
  };
  const stepOrExit = batching ? step2 : exit;
  const processingFiber = runFiber(async((resume2) => {
    const pushResult = (res, index) => {
      if (res._op === "Blocked") {
        residual.push(res);
      } else {
        results.push({
          index,
          exit: res
        });
        if (res._op === "Failure" && !interrupted) {
          onInterruptSignal();
        }
      }
    };
    const next = () => {
      if (todos.length > 0) {
        const a = todos.pop();
        let index = counter6++;
        const returnNextElement = () => {
          const a2 = todos.pop();
          index = counter6++;
          return flatMap7(yieldNow(), () => flatMap7(stepOrExit(restore(f(a2, index))), onRes));
        };
        const onRes = (res) => {
          if (todos.length > 0) {
            pushResult(res, index);
            if (todos.length > 0) {
              return returnNextElement();
            }
          }
          return succeed(res);
        };
        const todo = flatMap7(stepOrExit(restore(f(a, index))), onRes);
        const fiber = runFiber(todo);
        startOrder.push(fiber);
        fibers.add(fiber);
        if (interrupted) {
          fiber._scheduler.scheduleTask(() => {
            fiber.unsafeInterruptAsFork(parent.id());
          }, 0);
        }
        fiber.addObserver((wrapped) => {
          let exit4;
          if (wrapped._op === "Failure") {
            exit4 = wrapped;
          } else {
            exit4 = wrapped.effect_instruction_i0;
          }
          joinOrder.push(fiber);
          fibers.delete(fiber);
          pushResult(exit4, index);
          if (results.length === target) {
            resume2(succeed(getOrElse(exitCollectAll(collectExits(), {
              parallel: true
            }), () => exitVoid)));
          } else if (residual.length + results.length === target) {
            const requests = residual.map((blocked3) => blocked3.effect_instruction_i0).reduce(par);
            resume2(succeed(blocked(requests, forEachConcurrentDiscard([getOrElse(exitCollectAll(collectExits(), {
              parallel: true
            }), () => exitVoid), ...residual.map((blocked3) => blocked3.effect_instruction_i1)], (i) => i, batching, true, n))));
          } else {
            next();
          }
        });
      }
    };
    for (let i = 0; i < fibersCount; i++) {
      next();
    }
  }));
  return asVoid(onExit(flatten4(restore(join2(processingFiber))), exitMatch({
    onFailure: () => {
      onInterruptSignal();
      const target2 = residual.length + 1;
      const concurrency = Math.min(typeof n === "number" ? n : residual.length, residual.length);
      const toPop = Array.from(residual);
      return async((cb) => {
        const exits = [];
        let count = 0;
        let index = 0;
        const check2 = (index2, hitNext) => (exit4) => {
          exits[index2] = exit4;
          count++;
          if (count === target2) {
            cb(getOrThrow(exitCollectAll(exits, {
              parallel: true
            })));
          }
          if (toPop.length > 0 && hitNext) {
            next();
          }
        };
        const next = () => {
          runFiber(toPop.pop(), true).addObserver(check2(index, true));
          index++;
        };
        processingFiber.addObserver(check2(index, false));
        index++;
        for (let i = 0; i < concurrency; i++) {
          next();
        }
      });
    },
    onSuccess: () => forEachSequential(joinOrder, (f2) => f2.inheritAll)
  })));
})));
var forEachParN = (self2, n, f, batching) => suspend(() => {
  const as4 = fromIterable(self2);
  const array5 = new Array(as4.length);
  const fn = (a, i) => map8(f(a, i), (b) => array5[i] = b);
  return zipRight(forEachConcurrentDiscard(as4, fn, batching, false, n), succeed(array5));
});
var fork = (self2) => withFiberRuntime((state, status) => succeed(unsafeFork(self2, state, status.runtimeFlags)));
var forkDaemon = (self2) => forkWithScopeOverride(self2, globalScope);
var forkWithErrorHandler = /* @__PURE__ */ dual(2, (self2, handler) => fork(onError(self2, (cause3) => {
  const either4 = failureOrCause(cause3);
  switch (either4._tag) {
    case "Left":
      return handler(either4.left);
    case "Right":
      return failCause(either4.right);
  }
})));
var unsafeFork = (effect2, parentFiber, parentRuntimeFlags, overrideScope = null) => {
  const childFiber = unsafeMakeChildFiber(effect2, parentFiber, parentRuntimeFlags, overrideScope);
  childFiber.resume(effect2);
  return childFiber;
};
var unsafeForkUnstarted = (effect2, parentFiber, parentRuntimeFlags, overrideScope = null) => {
  const childFiber = unsafeMakeChildFiber(effect2, parentFiber, parentRuntimeFlags, overrideScope);
  return childFiber;
};
var unsafeMakeChildFiber = (effect2, parentFiber, parentRuntimeFlags, overrideScope = null) => {
  const childId = unsafeMake3();
  const parentFiberRefs = parentFiber.getFiberRefs();
  const childFiberRefs = forkAs(parentFiberRefs, childId);
  const childFiber = new FiberRuntime(childId, childFiberRefs, parentRuntimeFlags);
  const childContext = getOrDefault(childFiberRefs, currentContext);
  const supervisor = childFiber._supervisor;
  supervisor.onStart(childContext, effect2, some2(parentFiber), childFiber);
  childFiber.addObserver((exit4) => supervisor.onEnd(exit4, childFiber));
  const parentScope = overrideScope !== null ? overrideScope : pipe(parentFiber.getFiberRef(currentForkScopeOverride), getOrElse(() => parentFiber.scope()));
  parentScope.add(parentRuntimeFlags, childFiber);
  return childFiber;
};
var forkWithScopeOverride = (self2, scopeOverride) => withFiberRuntime((parentFiber, parentStatus) => succeed(unsafeFork(self2, parentFiber, parentStatus.runtimeFlags, scopeOverride)));
var mergeAll = /* @__PURE__ */ dual((args) => isFunction2(args[2]), (elements, zero2, f, options) => matchSimple(options?.concurrency, () => fromIterable(elements).reduce((acc, a, i) => zipWith2(acc, a, (acc2, a2) => f(acc2, a2, i)), succeed(zero2)), () => flatMap7(make27(zero2), (acc) => flatMap7(forEach7(elements, (effect2, i) => flatMap7(effect2, (a) => update3(acc, (b) => f(b, a, i))), options), () => get12(acc)))));
var partition3 = /* @__PURE__ */ dual((args) => isIterable(args[0]), (elements, f, options) => pipe(forEach7(elements, (a, i) => either2(f(a, i)), options), map8((chunk4) => partitionMap2(chunk4, identity))));
var validateAll = /* @__PURE__ */ dual((args) => isIterable(args[0]), (elements, f, options) => flatMap7(partition3(elements, f, {
  concurrency: options?.concurrency,
  batching: options?.batching
}), ([es, bs]) => es.length === 0 ? options?.discard ? void_ : succeed(bs) : fail2(es)));
var raceAll = (all7) => {
  const list = fromIterable2(all7);
  if (!isNonEmpty(list)) {
    return dieSync(() => new IllegalArgumentException(`Received an empty collection of effects`));
  }
  const self2 = headNonEmpty2(list);
  const effects = tailNonEmpty2(list);
  const inheritAll2 = (res) => pipe(inheritAll(res[1]), as(res[0]));
  return pipe(deferredMake(), flatMap7((done7) => pipe(make27(effects.length), flatMap7((fails) => uninterruptibleMask((restore) => pipe(fork(interruptible2(self2)), flatMap7((head5) => pipe(effects, forEachSequential((effect2) => fork(interruptible2(effect2))), map8((fibers) => unsafeFromArray(fibers)), map8((tail) => pipe(tail, prepend2(head5))), tap((fibers) => pipe(fibers, reduce(void_, (effect2, fiber) => pipe(effect2, zipRight(pipe(_await2(fiber), flatMap7(raceAllArbiter(fibers, fiber, done7, fails)), fork, asVoid)))))), flatMap7((fibers) => pipe(restore(pipe(_await(done7), flatMap7(inheritAll2))), onInterrupt(() => pipe(fibers, reduce(void_, (effect2, fiber) => pipe(effect2, zipLeft(interruptFiber(fiber))))))))))))))));
};
var raceAllArbiter = (fibers, winner, deferred, fails) => (exit4) => exitMatchEffect(exit4, {
  onFailure: (cause3) => pipe(modify3(fails, (fails2) => [fails2 === 0 ? pipe(deferredFailCause(deferred, cause3), asVoid) : void_, fails2 - 1]), flatten4),
  onSuccess: (value3) => pipe(deferredSucceed(deferred, [value3, winner]), flatMap7((set6) => set6 ? pipe(fromIterable2(fibers), reduce(void_, (effect2, fiber) => fiber === winner ? effect2 : pipe(effect2, zipLeft(interruptFiber(fiber))))) : void_))
});
var reduceEffect = /* @__PURE__ */ dual((args) => isIterable(args[0]) && !isEffect(args[0]), (elements, zero2, f, options) => matchSimple(options?.concurrency, () => fromIterable(elements).reduce((acc, a, i) => zipWith2(acc, a, (acc2, a2) => f(acc2, a2, i)), zero2), () => suspend(() => pipe(mergeAll([zero2, ...elements], none2(), (acc, elem, i) => {
  switch (acc._tag) {
    case "None": {
      return some2(elem);
    }
    case "Some": {
      return some2(f(acc.value, elem, i));
    }
  }
}, options), map8((option5) => {
  switch (option5._tag) {
    case "None": {
      throw new Error("BUG: Effect.reduceEffect - please report an issue at https://github.com/Effect-TS/effect/issues");
    }
    case "Some": {
      return option5.value;
    }
  }
})))));
var parallelFinalizers = (self2) => contextWithEffect((context5) => match2(getOption2(context5, scopeTag), {
  onNone: () => self2,
  onSome: (scope5) => {
    switch (scope5.strategy._tag) {
      case "Parallel":
        return self2;
      case "Sequential":
      case "ParallelN":
        return flatMap7(scopeFork(scope5, parallel3), (inner) => scopeExtend(self2, inner));
    }
  }
}));
var parallelNFinalizers = (parallelism) => (self2) => contextWithEffect((context5) => match2(getOption2(context5, scopeTag), {
  onNone: () => self2,
  onSome: (scope5) => {
    if (scope5.strategy._tag === "ParallelN" && scope5.strategy.parallelism === parallelism) {
      return self2;
    }
    return flatMap7(scopeFork(scope5, parallelN2(parallelism)), (inner) => scopeExtend(self2, inner));
  }
}));
var finalizersMask = (strategy) => (self2) => contextWithEffect((context5) => match2(getOption2(context5, scopeTag), {
  onNone: () => self2(identity),
  onSome: (scope5) => {
    const patch9 = strategy._tag === "Parallel" ? parallelFinalizers : strategy._tag === "Sequential" ? sequentialFinalizers : parallelNFinalizers(strategy.parallelism);
    switch (scope5.strategy._tag) {
      case "Parallel":
        return patch9(self2(parallelFinalizers));
      case "Sequential":
        return patch9(self2(sequentialFinalizers));
      case "ParallelN":
        return patch9(self2(parallelNFinalizers(scope5.strategy.parallelism)));
    }
  }
}));
var scopeWith = (f) => flatMap7(scopeTag, f);
var scopedEffect = (effect2) => flatMap7(scopeMake(), (scope5) => scopeUse(effect2, scope5));
var sequentialFinalizers = (self2) => contextWithEffect((context5) => match2(getOption2(context5, scopeTag), {
  onNone: () => self2,
  onSome: (scope5) => {
    switch (scope5.strategy._tag) {
      case "Sequential":
        return self2;
      case "Parallel":
      case "ParallelN":
        return flatMap7(scopeFork(scope5, sequential3), (inner) => scopeExtend(self2, inner));
    }
  }
}));
var tagMetricsScoped = (key, value3) => labelMetricsScoped([make28(key, value3)]);
var labelMetricsScoped = (labels) => fiberRefLocallyScopedWith(currentMetricLabels, (old) => union(old, labels));
var using = /* @__PURE__ */ dual(2, (self2, use) => acquireUseRelease(scopeMake(), (scope5) => flatMap7(scopeExtend(self2, scope5), use), (scope5, exit4) => scopeClose(scope5, exit4)));
var validate = /* @__PURE__ */ dual((args) => isEffect(args[1]), (self2, that, options) => validateWith(self2, that, (a, b) => [a, b], options));
var validateWith = /* @__PURE__ */ dual((args) => isEffect(args[1]), (self2, that, f, options) => flatten4(zipWithOptions(exit(self2), exit(that), (ea, eb) => exitZipWith(ea, eb, {
  onSuccess: f,
  onFailure: (ca, cb) => options?.concurrent ? parallel(ca, cb) : sequential(ca, cb)
}), options)));
var validateFirst = /* @__PURE__ */ dual((args) => isIterable(args[0]), (elements, f, options) => flip2(forEach7(elements, (a, i) => flip2(f(a, i)), options)));
var withClockScoped = (value3) => fiberRefLocallyScopedWith(currentServices, add2(clockTag, value3));
var withRandomScoped = (value3) => fiberRefLocallyScopedWith(currentServices, add2(randomTag, value3));
var withConfigProviderScoped = (value3) => fiberRefLocallyScopedWith(currentServices, add2(configProviderTag, value3));
var withEarlyRelease = (self2) => scopeWith((parent) => flatMap7(scopeFork(parent, sequential2), (child) => pipe(self2, scopeExtend(child), map8((value3) => [fiberIdWith((fiberId3) => scopeClose(child, exitInterrupt(fiberId3))), value3]))));
var zipOptions = /* @__PURE__ */ dual((args) => isEffect(args[1]), (self2, that, options) => zipWithOptions(self2, that, (a, b) => [a, b], options));
var zipLeftOptions = /* @__PURE__ */ dual((args) => isEffect(args[1]), (self2, that, options) => {
  if (options?.concurrent !== true && (options?.batching === void 0 || options.batching === false)) {
    return zipLeft(self2, that);
  }
  return zipWithOptions(self2, that, (a, _) => a, options);
});
var zipRightOptions = /* @__PURE__ */ dual((args) => isEffect(args[1]), (self2, that, options) => {
  if (options?.concurrent !== true && (options?.batching === void 0 || options.batching === false)) {
    return zipRight(self2, that);
  }
  return zipWithOptions(self2, that, (_, b) => b, options);
});
var zipWithOptions = /* @__PURE__ */ dual((args) => isEffect(args[1]), (self2, that, f, options) => map8(all3([self2, that], {
  concurrency: options?.concurrent ? 2 : 1,
  batching: options?.batching
}), ([a, a2]) => f(a, a2)));
var withRuntimeFlagsScoped = (update5) => {
  if (update5 === empty14) {
    return void_;
  }
  return pipe(runtimeFlags, flatMap7((runtimeFlags2) => {
    const updatedRuntimeFlags = patch4(runtimeFlags2, update5);
    const revertRuntimeFlags = diff4(updatedRuntimeFlags, runtimeFlags2);
    return pipe(updateRuntimeFlags(update5), zipRight(addFinalizer(() => updateRuntimeFlags(revertRuntimeFlags))), asVoid);
  }), uninterruptible);
};
var scopeTag = /* @__PURE__ */ GenericTag("effect/Scope");
var scope = scopeTag;
var scopeUnsafeAddFinalizer = (scope5, fin) => {
  if (scope5.state._tag === "Open") {
    scope5.state.finalizers.add(fin);
  }
};
var ScopeImplProto = {
  [ScopeTypeId]: ScopeTypeId,
  [CloseableScopeTypeId]: CloseableScopeTypeId,
  pipe() {
    return pipeArguments(this, arguments);
  },
  fork(strategy) {
    return sync(() => {
      const newScope = scopeUnsafeMake(strategy);
      if (this.state._tag === "Closed") {
        newScope.state = this.state;
        return newScope;
      }
      const fin = (exit4) => newScope.close(exit4);
      this.state.finalizers.add(fin);
      scopeUnsafeAddFinalizer(newScope, (_) => sync(() => {
        if (this.state._tag === "Open") {
          this.state.finalizers.delete(fin);
        }
      }));
      return newScope;
    });
  },
  close(exit4) {
    return suspend(() => {
      if (this.state._tag === "Closed") {
        return void_;
      }
      const finalizers = Array.from(this.state.finalizers.values()).reverse();
      this.state = {
        _tag: "Closed",
        exit: exit4
      };
      if (finalizers.length === 0) {
        return void_;
      }
      return isSequential(this.strategy) ? pipe(forEachSequential(finalizers, (fin) => exit(fin(exit4))), flatMap7((results) => pipe(exitCollectAll(results), map(exitAsVoid), getOrElse(() => exitVoid)))) : isParallel(this.strategy) ? pipe(forEachParUnbounded(finalizers, (fin) => exit(fin(exit4)), false), flatMap7((results) => pipe(exitCollectAll(results, {
        parallel: true
      }), map(exitAsVoid), getOrElse(() => exitVoid)))) : pipe(forEachParN(finalizers, this.strategy.parallelism, (fin) => exit(fin(exit4)), false), flatMap7((results) => pipe(exitCollectAll(results, {
        parallel: true
      }), map(exitAsVoid), getOrElse(() => exitVoid))));
    });
  },
  addFinalizer(fin) {
    return suspend(() => {
      if (this.state._tag === "Closed") {
        return fin(this.state.exit);
      }
      this.state.finalizers.add(fin);
      return void_;
    });
  }
};
var scopeUnsafeMake = (strategy = sequential2) => {
  const scope5 = Object.create(ScopeImplProto);
  scope5.strategy = strategy;
  scope5.state = {
    _tag: "Open",
    finalizers: /* @__PURE__ */ new Set()
  };
  return scope5;
};
var scopeMake = (strategy = sequential2) => sync(() => scopeUnsafeMake(strategy));
var scopeExtend = /* @__PURE__ */ dual(2, (effect2, scope5) => mapInputContext(
  effect2,
  // @ts-expect-error
  merge3(make6(scopeTag, scope5))
));
var scopeUse = /* @__PURE__ */ dual(2, (effect2, scope5) => pipe(effect2, scopeExtend(scope5), onExit((exit4) => scope5.close(exit4))));
var fiberRefUnsafeMakeSupervisor = (initial) => fiberRefUnsafeMakePatch(initial, {
  differ: differ2,
  fork: empty25
});
var fiberRefLocallyScoped = /* @__PURE__ */ dual(2, (self2, value3) => asVoid(acquireRelease(flatMap7(fiberRefGet(self2), (oldValue) => as(fiberRefSet(self2, value3), oldValue)), (oldValue) => fiberRefSet(self2, oldValue))));
var fiberRefLocallyScopedWith = /* @__PURE__ */ dual(2, (self2, f) => fiberRefGetWith(self2, (a) => fiberRefLocallyScoped(self2, f(a))));
var currentRuntimeFlags = /* @__PURE__ */ fiberRefUnsafeMakeRuntimeFlags(none5);
var currentSupervisor = /* @__PURE__ */ fiberRefUnsafeMakeSupervisor(none8);
var fiberAwaitAll = (fibers) => asVoid(_await2(fiberAll(fibers)));
var fiberAll = (fibers) => ({
  [FiberTypeId]: fiberVariance,
  id: () => fromIterable(fibers).reduce((id, fiber) => combine3(id, fiber.id()), none4),
  await: exit(forEachParUnbounded(fibers, (fiber) => flatten4(fiber.await), false)),
  children: map8(forEachParUnbounded(fibers, (fiber) => fiber.children, false), flatten),
  inheritAll: forEachSequentialDiscard(fibers, (fiber) => fiber.inheritAll),
  poll: map8(forEachSequential(fibers, (fiber) => fiber.poll), reduceRight(some2(exitSucceed(new Array())), (optionB, optionA) => {
    switch (optionA._tag) {
      case "None": {
        return none2();
      }
      case "Some": {
        switch (optionB._tag) {
          case "None": {
            return none2();
          }
          case "Some": {
            return some2(exitZipWith(optionA.value, optionB.value, {
              onSuccess: (a, chunk4) => [a, ...chunk4],
              onFailure: parallel
            }));
          }
        }
      }
    }
  })),
  interruptAsFork: (fiberId3) => forEachSequentialDiscard(fibers, (fiber) => fiber.interruptAsFork(fiberId3)),
  pipe() {
    return pipeArguments(this, arguments);
  }
});
var raceWith = /* @__PURE__ */ dual(3, (self2, other, options) => raceFibersWith(self2, other, {
  onSelfWin: (winner, loser) => flatMap7(winner.await, (exit4) => {
    switch (exit4._tag) {
      case OP_SUCCESS: {
        return flatMap7(winner.inheritAll, () => options.onSelfDone(exit4, loser));
      }
      case OP_FAILURE: {
        return options.onSelfDone(exit4, loser);
      }
    }
  }),
  onOtherWin: (winner, loser) => flatMap7(winner.await, (exit4) => {
    switch (exit4._tag) {
      case OP_SUCCESS: {
        return flatMap7(winner.inheritAll, () => options.onOtherDone(exit4, loser));
      }
      case OP_FAILURE: {
        return options.onOtherDone(exit4, loser);
      }
    }
  })
}));
var disconnect = (self2) => uninterruptibleMask((restore) => fiberIdWith((fiberId3) => flatMap7(forkDaemon(restore(self2)), (fiber) => pipe(restore(join2(fiber)), onInterrupt(() => pipe(fiber, interruptAsFork(fiberId3)))))));
var race = /* @__PURE__ */ dual(2, (self2, that) => fiberIdWith((parentFiberId) => raceWith(self2, that, {
  onSelfDone: (exit4, right3) => exitMatchEffect(exit4, {
    onFailure: (cause3) => pipe(join2(right3), mapErrorCause((cause22) => parallel(cause3, cause22))),
    onSuccess: (value3) => pipe(right3, interruptAsFiber(parentFiberId), as(value3))
  }),
  onOtherDone: (exit4, left3) => exitMatchEffect(exit4, {
    onFailure: (cause3) => pipe(join2(left3), mapErrorCause((cause22) => parallel(cause22, cause3))),
    onSuccess: (value3) => pipe(left3, interruptAsFiber(parentFiberId), as(value3))
  })
})));
var raceFibersWith = /* @__PURE__ */ dual(3, (self2, other, options) => withFiberRuntime((parentFiber, parentStatus) => {
  const parentRuntimeFlags = parentStatus.runtimeFlags;
  const raceIndicator = make12(true);
  const leftFiber = unsafeMakeChildFiber(self2, parentFiber, parentRuntimeFlags, options.selfScope);
  const rightFiber = unsafeMakeChildFiber(other, parentFiber, parentRuntimeFlags, options.otherScope);
  return async((cb) => {
    leftFiber.addObserver(() => completeRace(leftFiber, rightFiber, options.onSelfWin, raceIndicator, cb));
    rightFiber.addObserver(() => completeRace(rightFiber, leftFiber, options.onOtherWin, raceIndicator, cb));
    leftFiber.startFork(self2);
    rightFiber.startFork(other);
  }, combine3(leftFiber.id(), rightFiber.id()));
}));
var completeRace = (winner, loser, cont, ab, cb) => {
  if (compareAndSet(true, false)(ab)) {
    cb(cont(winner, loser));
  }
};
var ensuring = /* @__PURE__ */ dual(2, (self2, finalizer) => uninterruptibleMask((restore) => matchCauseEffect(restore(self2), {
  onFailure: (cause1) => matchCauseEffect(finalizer, {
    onFailure: (cause22) => failCause(sequential(cause1, cause22)),
    onSuccess: () => failCause(cause1)
  }),
  onSuccess: (a) => as(finalizer, a)
})));
var invokeWithInterrupt = (self2, entries2, onInterrupt3) => fiberIdWith((id) => flatMap7(flatMap7(forkDaemon(interruptible2(self2)), (processing) => async((cb) => {
  const counts = entries2.map((_) => _.listeners.count);
  const checkDone = () => {
    if (counts.every((count) => count === 0)) {
      if (entries2.every((_) => {
        if (_.result.state.current._tag === "Pending") {
          return true;
        } else if (_.result.state.current._tag === "Done" && exitIsExit(_.result.state.current.effect) && _.result.state.current.effect._tag === "Failure" && isInterrupted(_.result.state.current.effect.cause)) {
          return true;
        } else {
          return false;
        }
      })) {
        cleanup.forEach((f) => f());
        onInterrupt3?.();
        cb(interruptFiber(processing));
      }
    }
  };
  processing.addObserver((exit4) => {
    cleanup.forEach((f) => f());
    cb(exit4);
  });
  const cleanup = entries2.map((r, i) => {
    const observer = (count) => {
      counts[i] = count;
      checkDone();
    };
    r.listeners.addObserver(observer);
    return () => r.listeners.removeObserver(observer);
  });
  checkDone();
  return sync(() => {
    cleanup.forEach((f) => f());
  });
})), () => suspend(() => {
  const residual = entries2.flatMap((entry) => {
    if (!entry.state.completed) {
      return [entry];
    }
    return [];
  });
  return forEachSequentialDiscard(residual, (entry) => complete(entry.request, exitInterrupt(id)));
})));
var makeSpanScoped = (name, options) => {
  options = addSpanStackTrace(options);
  return uninterruptible(withFiberRuntime((fiber) => {
    const scope5 = unsafeGet3(fiber.getFiberRef(currentContext), scopeTag);
    const span4 = unsafeMakeSpan(fiber, name, options);
    const timingEnabled = fiber.getFiberRef(currentTracerTimingEnabled);
    const clock_ = get3(fiber.getFiberRef(currentServices), clockTag);
    return as(scopeAddFinalizerExit(scope5, (exit4) => endSpan(span4, exit4, clock_, timingEnabled)), span4);
  }));
};
var withTracerScoped = (value3) => fiberRefLocallyScopedWith(currentServices, add2(tracerTag, value3));
var withSpanScoped = function() {
  const dataFirst = typeof arguments[0] !== "string";
  const name = dataFirst ? arguments[1] : arguments[0];
  const options = addSpanStackTrace(dataFirst ? arguments[2] : arguments[1]);
  if (dataFirst) {
    const self2 = arguments[0];
    return flatMap7(makeSpanScoped(name, addSpanStackTrace(options)), (span4) => provideService(self2, spanTag, span4));
  }
  return (self2) => flatMap7(makeSpanScoped(name, addSpanStackTrace(options)), (span4) => provideService(self2, spanTag, span4));
};

// node_modules/effect/dist/esm/internal/cache.js
var complete2 = (key, exit4, entryStats, timeToLiveMillis) => struct({
  _tag: "Complete",
  key,
  exit: exit4,
  entryStats,
  timeToLiveMillis
});
var pending2 = (key, deferred) => struct({
  _tag: "Pending",
  key,
  deferred
});
var refreshing = (deferred, complete3) => struct({
  _tag: "Refreshing",
  deferred,
  complete: complete3
});
var MapKeyTypeId = /* @__PURE__ */ Symbol.for("effect/Cache/MapKey");
var MapKeyImpl = class {
  current;
  [MapKeyTypeId] = MapKeyTypeId;
  previous = void 0;
  next = void 0;
  constructor(current) {
    this.current = current;
  }
  [symbol]() {
    return pipe(hash(this.current), combine(hash(this.previous)), combine(hash(this.next)), cached(this));
  }
  [symbol2](that) {
    if (this === that) {
      return true;
    }
    return isMapKey(that) && equals(this.current, that.current) && equals(this.previous, that.previous) && equals(this.next, that.next);
  }
};
var makeMapKey = (current) => new MapKeyImpl(current);
var isMapKey = (u) => hasProperty(u, MapKeyTypeId);
var KeySetImpl = class {
  head = void 0;
  tail = void 0;
  add(key) {
    if (key !== this.tail) {
      if (this.tail === void 0) {
        this.head = key;
        this.tail = key;
      } else {
        const previous = key.previous;
        const next = key.next;
        if (next !== void 0) {
          key.next = void 0;
          if (previous !== void 0) {
            previous.next = next;
            next.previous = previous;
          } else {
            this.head = next;
            this.head.previous = void 0;
          }
        }
        this.tail.next = key;
        key.previous = this.tail;
        this.tail = key;
      }
    }
  }
  remove() {
    const key = this.head;
    if (key !== void 0) {
      const next = key.next;
      if (next !== void 0) {
        key.next = void 0;
        this.head = next;
        this.head.previous = void 0;
      } else {
        this.head = void 0;
        this.tail = void 0;
      }
    }
    return key;
  }
};
var makeKeySet = () => new KeySetImpl();
var makeCacheState = (map18, keys5, accesses, updating, hits, misses) => ({
  map: map18,
  keys: keys5,
  accesses,
  updating,
  hits,
  misses
});
var initialCacheState = () => makeCacheState(empty17(), makeKeySet(), unbounded(), make12(false), 0, 0);
var CacheSymbolKey = "effect/Cache";
var CacheTypeId = /* @__PURE__ */ Symbol.for(CacheSymbolKey);
var cacheVariance = {
  /* c8 ignore next */
  _Key: (_) => _,
  /* c8 ignore next */
  _Error: (_) => _,
  /* c8 ignore next */
  _Value: (_) => _
};
var ConsumerCacheSymbolKey = "effect/ConsumerCache";
var ConsumerCacheTypeId = /* @__PURE__ */ Symbol.for(ConsumerCacheSymbolKey);
var consumerCacheVariance = {
  /* c8 ignore next */
  _Key: (_) => _,
  /* c8 ignore next */
  _Error: (_) => _,
  /* c8 ignore next */
  _Value: (_) => _
};
var makeCacheStats = (options) => options;
var makeEntryStats = (loadedMillis) => ({
  loadedMillis
});
var CacheImpl = class {
  capacity;
  context;
  fiberId;
  lookup;
  timeToLive;
  [CacheTypeId] = cacheVariance;
  [ConsumerCacheTypeId] = consumerCacheVariance;
  cacheState;
  constructor(capacity, context5, fiberId3, lookup, timeToLive) {
    this.capacity = capacity;
    this.context = context5;
    this.fiberId = fiberId3;
    this.lookup = lookup;
    this.timeToLive = timeToLive;
    this.cacheState = initialCacheState();
  }
  get(key) {
    return map8(this.getEither(key), merge);
  }
  get cacheStats() {
    return sync(() => makeCacheStats({
      hits: this.cacheState.hits,
      misses: this.cacheState.misses,
      size: size5(this.cacheState.map)
    }));
  }
  getOption(key) {
    return suspend(() => match2(get8(this.cacheState.map, key), {
      onNone: () => {
        const mapKey = makeMapKey(key);
        this.trackAccess(mapKey);
        this.trackMiss();
        return succeed(none2());
      },
      onSome: (value3) => this.resolveMapValue(value3)
    }));
  }
  getOptionComplete(key) {
    return suspend(() => match2(get8(this.cacheState.map, key), {
      onNone: () => {
        const mapKey = makeMapKey(key);
        this.trackAccess(mapKey);
        this.trackMiss();
        return succeed(none2());
      },
      onSome: (value3) => this.resolveMapValue(value3, true)
    }));
  }
  contains(key) {
    return sync(() => has4(this.cacheState.map, key));
  }
  entryStats(key) {
    return sync(() => {
      const option5 = get8(this.cacheState.map, key);
      if (isSome2(option5)) {
        switch (option5.value._tag) {
          case "Complete": {
            const loaded = option5.value.entryStats.loadedMillis;
            return some2(makeEntryStats(loaded));
          }
          case "Pending": {
            return none2();
          }
          case "Refreshing": {
            const loaded = option5.value.complete.entryStats.loadedMillis;
            return some2(makeEntryStats(loaded));
          }
        }
      }
      return none2();
    });
  }
  getEither(key) {
    return suspend(() => {
      const k = key;
      let mapKey = void 0;
      let deferred = void 0;
      let value3 = getOrUndefined(get8(this.cacheState.map, k));
      if (value3 === void 0) {
        deferred = unsafeMake4(this.fiberId);
        mapKey = makeMapKey(k);
        if (has4(this.cacheState.map, k)) {
          value3 = getOrUndefined(get8(this.cacheState.map, k));
        } else {
          set4(this.cacheState.map, k, pending2(mapKey, deferred));
        }
      }
      if (value3 === void 0) {
        this.trackAccess(mapKey);
        this.trackMiss();
        return map8(this.lookupValueOf(key, deferred), right2);
      } else {
        return flatMap7(this.resolveMapValue(value3), match2({
          onNone: () => this.getEither(key),
          onSome: (value4) => succeed(left2(value4))
        }));
      }
    });
  }
  invalidate(key) {
    return sync(() => {
      remove5(this.cacheState.map, key);
    });
  }
  invalidateWhen(key, when3) {
    return sync(() => {
      const value3 = get8(this.cacheState.map, key);
      if (isSome2(value3) && value3.value._tag === "Complete") {
        if (value3.value.exit._tag === "Success") {
          if (when3(value3.value.exit.value)) {
            remove5(this.cacheState.map, key);
          }
        }
      }
    });
  }
  get invalidateAll() {
    return sync(() => {
      this.cacheState.map = empty17();
    });
  }
  refresh(key) {
    return clockWith3((clock3) => suspend(() => {
      const k = key;
      const deferred = unsafeMake4(this.fiberId);
      let value3 = getOrUndefined(get8(this.cacheState.map, k));
      if (value3 === void 0) {
        if (has4(this.cacheState.map, k)) {
          value3 = getOrUndefined(get8(this.cacheState.map, k));
        } else {
          set4(this.cacheState.map, k, pending2(makeMapKey(k), deferred));
        }
      }
      if (value3 === void 0) {
        return asVoid(this.lookupValueOf(key, deferred));
      } else {
        switch (value3._tag) {
          case "Complete": {
            if (this.hasExpired(clock3, value3.timeToLiveMillis)) {
              const found = getOrUndefined(get8(this.cacheState.map, k));
              if (equals(found, value3)) {
                remove5(this.cacheState.map, k);
              }
              return asVoid(this.get(key));
            }
            return pipe(this.lookupValueOf(key, deferred), when(() => {
              const current = getOrUndefined(get8(this.cacheState.map, k));
              if (equals(current, value3)) {
                const mapValue = refreshing(deferred, value3);
                set4(this.cacheState.map, k, mapValue);
                return true;
              }
              return false;
            }), asVoid);
          }
          case "Pending": {
            return _await(value3.deferred);
          }
          case "Refreshing": {
            return _await(value3.deferred);
          }
        }
      }
    }));
  }
  set(key, value3) {
    return clockWith3((clock3) => sync(() => {
      const now = clock3.unsafeCurrentTimeMillis();
      const k = key;
      const lookupResult = succeed2(value3);
      const mapValue = complete2(makeMapKey(k), lookupResult, makeEntryStats(now), now + toMillis(decode(this.timeToLive(lookupResult))));
      set4(this.cacheState.map, k, mapValue);
    }));
  }
  get size() {
    return sync(() => {
      return size5(this.cacheState.map);
    });
  }
  get values() {
    return sync(() => {
      const values3 = [];
      for (const entry of this.cacheState.map) {
        if (entry[1]._tag === "Complete" && entry[1].exit._tag === "Success") {
          values3.push(entry[1].exit.value);
        }
      }
      return values3;
    });
  }
  get entries() {
    return sync(() => {
      const values3 = [];
      for (const entry of this.cacheState.map) {
        if (entry[1]._tag === "Complete" && entry[1].exit._tag === "Success") {
          values3.push([entry[0], entry[1].exit.value]);
        }
      }
      return values3;
    });
  }
  get keys() {
    return sync(() => {
      const keys5 = [];
      for (const entry of this.cacheState.map) {
        if (entry[1]._tag === "Complete" && entry[1].exit._tag === "Success") {
          keys5.push(entry[0]);
        }
      }
      return keys5;
    });
  }
  resolveMapValue(value3, ignorePending = false) {
    return clockWith3((clock3) => {
      switch (value3._tag) {
        case "Complete": {
          this.trackAccess(value3.key);
          if (this.hasExpired(clock3, value3.timeToLiveMillis)) {
            remove5(this.cacheState.map, value3.key.current);
            return succeed(none2());
          }
          this.trackHit();
          return map8(value3.exit, some2);
        }
        case "Pending": {
          this.trackAccess(value3.key);
          this.trackHit();
          if (ignorePending) {
            return succeed(none2());
          }
          return map8(_await(value3.deferred), some2);
        }
        case "Refreshing": {
          this.trackAccess(value3.complete.key);
          this.trackHit();
          if (this.hasExpired(clock3, value3.complete.timeToLiveMillis)) {
            if (ignorePending) {
              return succeed(none2());
            }
            return map8(_await(value3.deferred), some2);
          }
          return map8(value3.complete.exit, some2);
        }
      }
    });
  }
  trackHit() {
    this.cacheState.hits = this.cacheState.hits + 1;
  }
  trackMiss() {
    this.cacheState.misses = this.cacheState.misses + 1;
  }
  trackAccess(key) {
    offer(this.cacheState.accesses, key);
    if (compareAndSet(this.cacheState.updating, false, true)) {
      let loop3 = true;
      while (loop3) {
        const key2 = poll(this.cacheState.accesses, EmptyMutableQueue);
        if (key2 === EmptyMutableQueue) {
          loop3 = false;
        } else {
          this.cacheState.keys.add(key2);
        }
      }
      let size11 = size5(this.cacheState.map);
      loop3 = size11 > this.capacity;
      while (loop3) {
        const key2 = this.cacheState.keys.remove();
        if (key2 !== void 0) {
          if (has4(this.cacheState.map, key2.current)) {
            remove5(this.cacheState.map, key2.current);
            size11 = size11 - 1;
            loop3 = size11 > this.capacity;
          }
        } else {
          loop3 = false;
        }
      }
      set2(this.cacheState.updating, false);
    }
  }
  hasExpired(clock3, timeToLiveMillis) {
    return clock3.unsafeCurrentTimeMillis() > timeToLiveMillis;
  }
  lookupValueOf(input, deferred) {
    return clockWith3((clock3) => suspend(() => {
      const key = input;
      return pipe(this.lookup(input), provideContext(this.context), exit, flatMap7((exit4) => {
        const now = clock3.unsafeCurrentTimeMillis();
        const stats = makeEntryStats(now);
        const value3 = complete2(makeMapKey(key), exit4, stats, now + toMillis(decode(this.timeToLive(exit4))));
        set4(this.cacheState.map, key, value3);
        return zipRight(done2(deferred, exit4), exit4);
      }), onInterrupt(() => zipRight(interrupt3(deferred), sync(() => {
        remove5(this.cacheState.map, key);
      }))));
    }));
  }
};
var unsafeMakeWith = (capacity, lookup, timeToLive) => new CacheImpl(capacity, empty3(), none3, lookup, (exit4) => decode(timeToLive(exit4)));

// node_modules/effect/dist/esm/Cause.js
var empty26 = empty16;
var fail3 = fail;
var die3 = die;
var isInterruptedOnly2 = isInterruptedOnly;
var failureOrCause2 = failureOrCause;

// node_modules/effect/dist/esm/Effect.js
var Effect_exports = {};
__export(Effect_exports, {
  Do: () => Do2,
  EffectTypeId: () => EffectTypeId4,
  Tag: () => Tag3,
  acquireRelease: () => acquireRelease2,
  acquireReleaseInterruptible: () => acquireReleaseInterruptible2,
  acquireUseRelease: () => acquireUseRelease2,
  addFinalizer: () => addFinalizer2,
  all: () => all4,
  allSuccesses: () => allSuccesses2,
  allWith: () => allWith2,
  allowInterrupt: () => allowInterrupt2,
  andThen: () => andThen6,
  annotateCurrentSpan: () => annotateCurrentSpan2,
  annotateLogs: () => annotateLogs3,
  annotateLogsScoped: () => annotateLogsScoped2,
  annotateSpans: () => annotateSpans3,
  ap: () => ap,
  as: () => as3,
  asSome: () => asSome2,
  asSomeError: () => asSomeError2,
  asVoid: () => asVoid3,
  async: () => async3,
  asyncEffect: () => asyncEffect2,
  awaitAllChildren: () => awaitAllChildren2,
  bind: () => bind3,
  bindTo: () => bindTo3,
  blocked: () => blocked2,
  cacheRequestResult: () => cacheRequestResult,
  cached: () => cached3,
  cachedFunction: () => cachedFunction2,
  cachedInvalidateWithTTL: () => cachedInvalidateWithTTL2,
  cachedWithTTL: () => cachedWithTTL,
  catch: () => _catch2,
  catchAll: () => catchAll3,
  catchAllCause: () => catchAllCause3,
  catchAllDefect: () => catchAllDefect2,
  catchIf: () => catchIf2,
  catchSome: () => catchSome2,
  catchSomeCause: () => catchSomeCause2,
  catchSomeDefect: () => catchSomeDefect2,
  catchTag: () => catchTag2,
  catchTags: () => catchTags2,
  cause: () => cause2,
  checkInterruptible: () => checkInterruptible2,
  clock: () => clock2,
  clockWith: () => clockWith4,
  configProviderWith: () => configProviderWith2,
  console: () => console3,
  consoleWith: () => consoleWith2,
  context: () => context3,
  contextWith: () => contextWith2,
  contextWithEffect: () => contextWithEffect2,
  currentParentSpan: () => currentParentSpan2,
  currentSpan: () => currentSpan2,
  custom: () => custom2,
  daemonChildren: () => daemonChildren2,
  delay: () => delay2,
  descriptor: () => descriptor2,
  descriptorWith: () => descriptorWith2,
  die: () => die5,
  dieMessage: () => dieMessage2,
  dieSync: () => dieSync3,
  diffFiberRefs: () => diffFiberRefs2,
  disconnect: () => disconnect2,
  dropUntil: () => dropUntil2,
  dropWhile: () => dropWhile2,
  either: () => either3,
  ensuring: () => ensuring2,
  ensuringChild: () => ensuringChild2,
  ensuringChildren: () => ensuringChildren2,
  eventually: () => eventually2,
  every: () => every4,
  exists: () => exists2,
  exit: () => exit3,
  fail: () => fail6,
  failCause: () => failCause4,
  failCauseSync: () => failCauseSync3,
  failSync: () => failSync3,
  fiberId: () => fiberId2,
  fiberIdWith: () => fiberIdWith2,
  filter: () => filter6,
  filterMap: () => filterMap4,
  filterOrDie: () => filterOrDie2,
  filterOrDieMessage: () => filterOrDieMessage2,
  filterOrElse: () => filterOrElse2,
  filterOrFail: () => filterOrFail2,
  finalizersMask: () => finalizersMask2,
  findFirst: () => findFirst5,
  firstSuccessOf: () => firstSuccessOf2,
  flatMap: () => flatMap10,
  flatten: () => flatten7,
  flip: () => flip3,
  flipWith: () => flipWith2,
  forEach: () => forEach8,
  forever: () => forever3,
  fork: () => fork3,
  forkAll: () => forkAll2,
  forkDaemon: () => forkDaemon2,
  forkIn: () => forkIn2,
  forkScoped: () => forkScoped2,
  forkWithErrorHandler: () => forkWithErrorHandler2,
  fromFiber: () => fromFiber2,
  fromFiberEffect: () => fromFiberEffect2,
  fromNullable: () => fromNullable3,
  functionWithSpan: () => functionWithSpan2,
  gen: () => gen2,
  getFiberRefs: () => getFiberRefs,
  getRuntimeFlags: () => getRuntimeFlags,
  head: () => head4,
  if: () => if_2,
  ignore: () => ignore2,
  ignoreLogged: () => ignoreLogged2,
  inheritFiberRefs: () => inheritFiberRefs2,
  interrupt: () => interrupt4,
  interruptWith: () => interruptWith2,
  interruptible: () => interruptible3,
  interruptibleMask: () => interruptibleMask2,
  intoDeferred: () => intoDeferred2,
  isEffect: () => isEffect2,
  isFailure: () => isFailure4,
  isSuccess: () => isSuccess2,
  iterate: () => iterate2,
  labelMetrics: () => labelMetrics2,
  labelMetricsScoped: () => labelMetricsScoped2,
  let: () => let_3,
  liftPredicate: () => liftPredicate2,
  linkSpans: () => linkSpans2,
  locally: () => locally2,
  locallyScoped: () => locallyScoped,
  locallyScopedWith: () => locallyScopedWith,
  locallyWith: () => locallyWith,
  log: () => log2,
  logAnnotations: () => logAnnotations2,
  logDebug: () => logDebug2,
  logError: () => logError2,
  logFatal: () => logFatal2,
  logInfo: () => logInfo2,
  logTrace: () => logTrace2,
  logWarning: () => logWarning2,
  logWithLevel: () => logWithLevel2,
  loop: () => loop2,
  makeSemaphore: () => makeSemaphore2,
  makeSpan: () => makeSpan2,
  makeSpanScoped: () => makeSpanScoped2,
  map: () => map13,
  mapAccum: () => mapAccum3,
  mapBoth: () => mapBoth2,
  mapError: () => mapError3,
  mapErrorCause: () => mapErrorCause2,
  mapInputContext: () => mapInputContext2,
  match: () => match9,
  matchCause: () => matchCause3,
  matchCauseEffect: () => matchCauseEffect2,
  matchEffect: () => matchEffect2,
  merge: () => merge7,
  mergeAll: () => mergeAll3,
  metricLabels: () => metricLabels2,
  negate: () => negate2,
  never: () => never3,
  none: () => none9,
  onError: () => onError2,
  onExit: () => onExit2,
  onInterrupt: () => onInterrupt2,
  once: () => once2,
  option: () => option2,
  optionFromOptional: () => optionFromOptional2,
  orDie: () => orDie3,
  orDieWith: () => orDieWith2,
  orElse: () => orElse4,
  orElseFail: () => orElseFail2,
  orElseSucceed: () => orElseSucceed2,
  parallelErrors: () => parallelErrors2,
  parallelFinalizers: () => parallelFinalizers2,
  partition: () => partition4,
  patchFiberRefs: () => patchFiberRefs2,
  patchRuntimeFlags: () => patchRuntimeFlags,
  promise: () => promise2,
  provide: () => provide2,
  provideService: () => provideService2,
  provideServiceEffect: () => provideServiceEffect2,
  race: () => race2,
  raceAll: () => raceAll2,
  raceFirst: () => raceFirst2,
  raceWith: () => raceWith2,
  random: () => random3,
  randomWith: () => randomWith2,
  reduce: () => reduce10,
  reduceEffect: () => reduceEffect2,
  reduceRight: () => reduceRight3,
  reduceWhile: () => reduceWhile2,
  repeat: () => repeat,
  repeatN: () => repeatN2,
  repeatOrElse: () => repeatOrElse,
  replicate: () => replicate2,
  replicateEffect: () => replicateEffect2,
  request: () => request,
  retry: () => retry2,
  retryOrElse: () => retryOrElse,
  runCallback: () => runCallback,
  runFork: () => runFork,
  runPromise: () => runPromise,
  runPromiseExit: () => runPromiseExit,
  runRequestBlock: () => runRequestBlock2,
  runSync: () => runSync,
  runSyncExit: () => runSyncExit,
  runtime: () => runtime3,
  sandbox: () => sandbox2,
  schedule: () => schedule,
  scheduleForked: () => scheduleForked2,
  scheduleFrom: () => scheduleFrom,
  scope: () => scope3,
  scopeWith: () => scopeWith2,
  scoped: () => scoped2,
  sequentialFinalizers: () => sequentialFinalizers2,
  serviceConstants: () => serviceConstants2,
  serviceFunction: () => serviceFunction2,
  serviceFunctionEffect: () => serviceFunctionEffect2,
  serviceFunctions: () => serviceFunctions2,
  serviceMembers: () => serviceMembers2,
  serviceOption: () => serviceOption2,
  serviceOptional: () => serviceOptional2,
  setFiberRefs: () => setFiberRefs2,
  sleep: () => sleep4,
  spanAnnotations: () => spanAnnotations2,
  spanLinks: () => spanLinks2,
  step: () => step3,
  succeed: () => succeed7,
  succeedNone: () => succeedNone2,
  succeedSome: () => succeedSome2,
  summarized: () => summarized2,
  supervised: () => supervised2,
  suspend: () => suspend4,
  sync: () => sync5,
  tagMetrics: () => tagMetrics2,
  tagMetricsScoped: () => tagMetricsScoped2,
  takeUntil: () => takeUntil2,
  takeWhile: () => takeWhile2,
  tap: () => tap3,
  tapBoth: () => tapBoth2,
  tapDefect: () => tapDefect2,
  tapError: () => tapError3,
  tapErrorCause: () => tapErrorCause3,
  tapErrorTag: () => tapErrorTag2,
  timed: () => timed2,
  timedWith: () => timedWith2,
  timeout: () => timeout2,
  timeoutFail: () => timeoutFail2,
  timeoutFailCause: () => timeoutFailCause2,
  timeoutOption: () => timeoutOption2,
  timeoutTo: () => timeoutTo2,
  tracer: () => tracer2,
  tracerWith: () => tracerWith4,
  transplant: () => transplant2,
  try: () => try_2,
  tryMap: () => tryMap2,
  tryMapPromise: () => tryMapPromise2,
  tryPromise: () => tryPromise2,
  uninterruptible: () => uninterruptible3,
  uninterruptibleMask: () => uninterruptibleMask2,
  unless: () => unless2,
  unlessEffect: () => unlessEffect2,
  unsafeMakeSemaphore: () => unsafeMakeSemaphore2,
  unsandbox: () => unsandbox2,
  updateFiberRefs: () => updateFiberRefs2,
  updateService: () => updateService2,
  useSpan: () => useSpan2,
  using: () => using2,
  validate: () => validate2,
  validateAll: () => validateAll2,
  validateFirst: () => validateFirst2,
  validateWith: () => validateWith2,
  void: () => _void,
  when: () => when2,
  whenEffect: () => whenEffect2,
  whenFiberRef: () => whenFiberRef2,
  whenRef: () => whenRef2,
  whileLoop: () => whileLoop2,
  withClock: () => withClock2,
  withClockScoped: () => withClockScoped2,
  withConcurrency: () => withConcurrency2,
  withConfigProvider: () => withConfigProvider2,
  withConfigProviderScoped: () => withConfigProviderScoped2,
  withConsole: () => withConsole2,
  withConsoleScoped: () => withConsoleScoped2,
  withEarlyRelease: () => withEarlyRelease2,
  withFiberRuntime: () => withFiberRuntime2,
  withLogSpan: () => withLogSpan2,
  withMaxOpsBeforeYield: () => withMaxOpsBeforeYield2,
  withMetric: () => withMetric2,
  withParentSpan: () => withParentSpan3,
  withRandom: () => withRandom2,
  withRandomScoped: () => withRandomScoped2,
  withRequestBatching: () => withRequestBatching2,
  withRequestCache: () => withRequestCache2,
  withRequestCaching: () => withRequestCaching2,
  withRuntimeFlagsPatch: () => withRuntimeFlagsPatch,
  withRuntimeFlagsPatchScoped: () => withRuntimeFlagsPatchScoped,
  withScheduler: () => withScheduler2,
  withSchedulingPriority: () => withSchedulingPriority2,
  withSpan: () => withSpan3,
  withSpanScoped: () => withSpanScoped2,
  withTracer: () => withTracer2,
  withTracerEnabled: () => withTracerEnabled2,
  withTracerScoped: () => withTracerScoped2,
  withTracerTiming: () => withTracerTiming2,
  withUnhandledErrorLogLevel: () => withUnhandledErrorLogLevel2,
  yieldNow: () => yieldNow3,
  zip: () => zip5,
  zipLeft: () => zipLeft3,
  zipRight: () => zipRight3,
  zipWith: () => zipWith4
});

// node_modules/effect/dist/esm/internal/schedule/interval.js
var IntervalSymbolKey = "effect/ScheduleInterval";
var IntervalTypeId = /* @__PURE__ */ Symbol.for(IntervalSymbolKey);
var empty27 = {
  [IntervalTypeId]: IntervalTypeId,
  startMillis: 0,
  endMillis: 0
};
var make35 = (startMillis, endMillis) => {
  if (startMillis > endMillis) {
    return empty27;
  }
  return {
    [IntervalTypeId]: IntervalTypeId,
    startMillis,
    endMillis
  };
};
var lessThan3 = /* @__PURE__ */ dual(2, (self2, that) => min2(self2, that) === self2);
var min2 = /* @__PURE__ */ dual(2, (self2, that) => {
  if (self2.endMillis <= that.startMillis) return self2;
  if (that.endMillis <= self2.startMillis) return that;
  if (self2.startMillis < that.startMillis) return self2;
  if (that.startMillis < self2.startMillis) return that;
  if (self2.endMillis <= that.endMillis) return self2;
  return that;
});
var isEmpty7 = (self2) => {
  return self2.startMillis >= self2.endMillis;
};
var intersect = /* @__PURE__ */ dual(2, (self2, that) => {
  const start3 = Math.max(self2.startMillis, that.startMillis);
  const end3 = Math.min(self2.endMillis, that.endMillis);
  return make35(start3, end3);
});
var after = (startMilliseconds) => {
  return make35(startMilliseconds, Number.POSITIVE_INFINITY);
};

// node_modules/effect/dist/esm/ScheduleInterval.js
var empty28 = empty27;
var lessThan4 = lessThan3;
var isEmpty8 = isEmpty7;
var intersect2 = intersect;
var after2 = after;

// node_modules/effect/dist/esm/internal/schedule/intervals.js
var IntervalsSymbolKey = "effect/ScheduleIntervals";
var IntervalsTypeId = /* @__PURE__ */ Symbol.for(IntervalsSymbolKey);
var make37 = (intervals) => {
  return {
    [IntervalsTypeId]: IntervalsTypeId,
    intervals
  };
};
var intersect3 = /* @__PURE__ */ dual(2, (self2, that) => intersectLoop(self2.intervals, that.intervals, empty4()));
var intersectLoop = (_left, _right, _acc) => {
  let left3 = _left;
  let right3 = _right;
  let acc = _acc;
  while (isNonEmpty(left3) && isNonEmpty(right3)) {
    const interval = pipe(headNonEmpty2(left3), intersect2(headNonEmpty2(right3)));
    const intervals = isEmpty8(interval) ? acc : pipe(acc, prepend2(interval));
    if (pipe(headNonEmpty2(left3), lessThan4(headNonEmpty2(right3)))) {
      left3 = tailNonEmpty2(left3);
    } else {
      right3 = tailNonEmpty2(right3);
    }
    acc = intervals;
  }
  return make37(reverse2(acc));
};
var start = (self2) => {
  return pipe(self2.intervals, head2, getOrElse(() => empty28)).startMillis;
};
var end = (self2) => {
  return pipe(self2.intervals, head2, getOrElse(() => empty28)).endMillis;
};
var lessThan5 = /* @__PURE__ */ dual(2, (self2, that) => start(self2) < start(that));
var isNonEmpty3 = (self2) => {
  return isNonEmpty(self2.intervals);
};

// node_modules/effect/dist/esm/ScheduleIntervals.js
var make38 = make37;
var intersect4 = intersect3;
var start2 = start;
var end2 = end;
var lessThan6 = lessThan5;
var isNonEmpty4 = isNonEmpty3;

// node_modules/effect/dist/esm/internal/schedule/decision.js
var OP_CONTINUE = "Continue";
var OP_DONE2 = "Done";
var _continue = (intervals) => {
  return {
    _tag: OP_CONTINUE,
    intervals
  };
};
var continueWith = (interval) => {
  return {
    _tag: OP_CONTINUE,
    intervals: make38(of2(interval))
  };
};
var done5 = {
  _tag: OP_DONE2
};
var isContinue = (self2) => {
  return self2._tag === OP_CONTINUE;
};
var isDone3 = (self2) => {
  return self2._tag === OP_DONE2;
};

// node_modules/effect/dist/esm/ScheduleDecision.js
var _continue2 = _continue;
var continueWith2 = continueWith;
var done6 = done5;
var isContinue2 = isContinue;
var isDone4 = isDone3;

// node_modules/effect/dist/esm/Scope.js
var Scope = scopeTag;
var close = scopeClose;
var fork2 = scopeFork;

// node_modules/effect/dist/esm/internal/schedule.js
var ScheduleSymbolKey = "effect/Schedule";
var ScheduleTypeId = /* @__PURE__ */ Symbol.for(ScheduleSymbolKey);
var isSchedule = (u) => hasProperty(u, ScheduleTypeId);
var ScheduleDriverSymbolKey = "effect/ScheduleDriver";
var ScheduleDriverTypeId = /* @__PURE__ */ Symbol.for(ScheduleDriverSymbolKey);
var scheduleVariance = {
  /* c8 ignore next */
  _Out: (_) => _,
  /* c8 ignore next */
  _In: (_) => _,
  /* c8 ignore next */
  _R: (_) => _
};
var scheduleDriverVariance = {
  /* c8 ignore next */
  _Out: (_) => _,
  /* c8 ignore next */
  _In: (_) => _,
  /* c8 ignore next */
  _R: (_) => _
};
var ScheduleImpl = class {
  initial;
  step;
  [ScheduleTypeId] = scheduleVariance;
  constructor(initial, step4) {
    this.initial = initial;
    this.step = step4;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var ScheduleDriverImpl = class {
  schedule;
  ref;
  [ScheduleDriverTypeId] = scheduleDriverVariance;
  constructor(schedule2, ref) {
    this.schedule = schedule2;
    this.ref = ref;
  }
  get state() {
    return map8(get11(this.ref), (tuple2) => tuple2[1]);
  }
  get last() {
    return flatMap7(get11(this.ref), ([element, _]) => {
      switch (element._tag) {
        case "None": {
          return failSync(() => new NoSuchElementException());
        }
        case "Some": {
          return succeed(element.value);
        }
      }
    });
  }
  get reset() {
    return set5(this.ref, [none2(), this.schedule.initial]);
  }
  next(input) {
    return pipe(map8(get11(this.ref), (tuple2) => tuple2[1]), flatMap7((state) => pipe(currentTimeMillis2, flatMap7((now) => pipe(suspend(() => this.schedule.step(now, input, state)), flatMap7(([state2, out, decision]) => {
      const setState = set5(this.ref, [some2(out), state2]);
      if (isDone4(decision)) {
        return zipRight(setState, fail2(none2()));
      }
      const millis2 = start2(decision.intervals) - now;
      if (millis2 <= 0) {
        return as(setState, out);
      }
      return pipe(setState, zipRight(sleep3(millis(millis2))), as(out));
    }))))));
  }
};
var makeWithState = (initial, step4) => new ScheduleImpl(initial, step4);
var check = /* @__PURE__ */ dual(2, (self2, test3) => checkEffect(self2, (input, out) => sync(() => test3(input, out))));
var checkEffect = /* @__PURE__ */ dual(2, (self2, test3) => makeWithState(self2.initial, (now, input, state) => flatMap7(self2.step(now, input, state), ([state2, out, decision]) => {
  if (isDone4(decision)) {
    return succeed([state2, out, done6]);
  }
  return map8(test3(input, out), (cont) => cont ? [state2, out, decision] : [state2, out, done6]);
})));
var driver = (self2) => pipe(make26([none2(), self2.initial]), map8((ref) => new ScheduleDriverImpl(self2, ref)));
var intersect5 = /* @__PURE__ */ dual(2, (self2, that) => intersectWith(self2, that, intersect4));
var intersectWith = /* @__PURE__ */ dual(3, (self2, that, f) => makeWithState([self2.initial, that.initial], (now, input, state) => pipe(zipWith2(self2.step(now, input, state[0]), that.step(now, input, state[1]), (a, b) => [a, b]), flatMap7(([[lState, out, lDecision], [rState, out2, rDecision]]) => {
  if (isContinue2(lDecision) && isContinue2(rDecision)) {
    return intersectWithLoop(self2, that, input, lState, out, lDecision.intervals, rState, out2, rDecision.intervals, f);
  }
  return succeed([[lState, rState], [out, out2], done6]);
}))));
var intersectWithLoop = (self2, that, input, lState, out, lInterval, rState, out2, rInterval, f) => {
  const combined = f(lInterval, rInterval);
  if (isNonEmpty4(combined)) {
    return succeed([[lState, rState], [out, out2], _continue2(combined)]);
  }
  if (pipe(lInterval, lessThan6(rInterval))) {
    return flatMap7(self2.step(end2(lInterval), input, lState), ([lState2, out3, decision]) => {
      if (isDone4(decision)) {
        return succeed([[lState2, rState], [out3, out2], done6]);
      }
      return intersectWithLoop(self2, that, input, lState2, out3, decision.intervals, rState, out2, rInterval, f);
    });
  }
  return flatMap7(that.step(end2(rInterval), input, rState), ([rState2, out22, decision]) => {
    if (isDone4(decision)) {
      return succeed([[lState, rState2], [out, out22], done6]);
    }
    return intersectWithLoop(self2, that, input, lState, out, lInterval, rState2, out22, decision.intervals, f);
  });
};
var map11 = /* @__PURE__ */ dual(2, (self2, f) => mapEffect(self2, (out) => sync(() => f(out))));
var mapEffect = /* @__PURE__ */ dual(2, (self2, f) => makeWithState(self2.initial, (now, input, state) => flatMap7(self2.step(now, input, state), ([state2, out, decision]) => map8(f(out), (out2) => [state2, out2, decision]))));
var passthrough = (self2) => makeWithState(self2.initial, (now, input, state) => pipe(self2.step(now, input, state), map8(([state2, _, decision]) => [state2, input, decision])));
var recurs = (n) => whileOutput(forever2, (out) => out < n);
var unfold2 = (initial, f) => makeWithState(initial, (now, _, state) => sync(() => [f(state), state, continueWith2(after2(now))]));
var untilInputEffect = /* @__PURE__ */ dual(2, (self2, f) => checkEffect(self2, (input, _) => negate(f(input))));
var whileInputEffect = /* @__PURE__ */ dual(2, (self2, f) => checkEffect(self2, (input, _) => f(input)));
var whileOutput = /* @__PURE__ */ dual(2, (self2, f) => check(self2, (_, out) => f(out)));
var ScheduleDefectTypeId = /* @__PURE__ */ Symbol.for("effect/Schedule/ScheduleDefect");
var ScheduleDefect = class {
  error;
  [ScheduleDefectTypeId];
  constructor(error) {
    this.error = error;
    this[ScheduleDefectTypeId] = ScheduleDefectTypeId;
  }
};
var isScheduleDefect = (u) => hasProperty(u, ScheduleDefectTypeId);
var scheduleDefectWrap = (self2) => catchAll(self2, (e) => die2(new ScheduleDefect(e)));
var scheduleDefectRefail = (self2) => catchAllCause(self2, (cause3) => match2(find(cause3, (_) => isDieType(_) && isScheduleDefect(_.defect) ? some2(_.defect) : none2()), {
  onNone: () => failCause(cause3),
  onSome: (error) => fail2(error.error)
}));
var repeat_Effect = /* @__PURE__ */ dual(2, (self2, schedule2) => repeatOrElse_Effect(self2, schedule2, (e, _) => fail2(e)));
var repeat_combined = /* @__PURE__ */ dual(2, (self2, options) => {
  if (isSchedule(options)) {
    return repeat_Effect(self2, options);
  }
  const base = options.schedule ?? passthrough(forever2);
  const withWhile = options.while ? whileInputEffect(base, (a) => {
    const applied = options.while(a);
    if (typeof applied === "boolean") {
      return succeed(applied);
    }
    return scheduleDefectWrap(applied);
  }) : base;
  const withUntil = options.until ? untilInputEffect(withWhile, (a) => {
    const applied = options.until(a);
    if (typeof applied === "boolean") {
      return succeed(applied);
    }
    return scheduleDefectWrap(applied);
  }) : withWhile;
  const withTimes = options.times ? intersect5(withUntil, recurs(options.times)).pipe(map11((intersectionPair) => intersectionPair[0])) : withUntil;
  return scheduleDefectRefail(repeat_Effect(self2, withTimes));
});
var repeatOrElse_Effect = /* @__PURE__ */ dual(3, (self2, schedule2, orElse9) => flatMap7(driver(schedule2), (driver2) => matchEffect(self2, {
  onFailure: (error) => orElse9(error, none2()),
  onSuccess: (value3) => repeatOrElseEffectLoop(self2, driver2, orElse9, value3)
})));
var repeatOrElseEffectLoop = (self2, driver2, orElse9, value3) => {
  return matchEffect(driver2.next(value3), {
    onFailure: () => orDie(driver2.last),
    onSuccess: (b) => matchEffect(self2, {
      onFailure: (error) => orElse9(error, some2(b)),
      onSuccess: (value4) => repeatOrElseEffectLoop(self2, driver2, orElse9, value4)
    })
  });
};
var retry_Effect = /* @__PURE__ */ dual(2, (self2, policy) => retryOrElse_Effect(self2, policy, (e, _) => fail2(e)));
var retry_combined = /* @__PURE__ */ dual(2, (self2, options) => {
  if (isSchedule(options)) {
    return retry_Effect(self2, options);
  }
  const base = options.schedule ?? forever2;
  const withWhile = options.while ? whileInputEffect(base, (e) => {
    const applied = options.while(e);
    if (typeof applied === "boolean") {
      return succeed(applied);
    }
    return scheduleDefectWrap(applied);
  }) : base;
  const withUntil = options.until ? untilInputEffect(withWhile, (e) => {
    const applied = options.until(e);
    if (typeof applied === "boolean") {
      return succeed(applied);
    }
    return scheduleDefectWrap(applied);
  }) : withWhile;
  const withTimes = options.times ? intersect5(withUntil, recurs(options.times)) : withUntil;
  return scheduleDefectRefail(retry_Effect(self2, withTimes));
});
var retryOrElse_Effect = /* @__PURE__ */ dual(3, (self2, policy, orElse9) => flatMap7(driver(policy), (driver2) => retryOrElse_EffectLoop(self2, driver2, orElse9)));
var retryOrElse_EffectLoop = (self2, driver2, orElse9) => {
  return catchAll(self2, (e) => matchEffect(driver2.next(e), {
    onFailure: () => pipe(driver2.last, orDie, flatMap7((out) => orElse9(e, out))),
    onSuccess: () => retryOrElse_EffectLoop(self2, driver2, orElse9)
  }));
};
var schedule_Effect = /* @__PURE__ */ dual(2, (self2, schedule2) => scheduleFrom_Effect(self2, void 0, schedule2));
var scheduleFrom_Effect = /* @__PURE__ */ dual(3, (self2, initial, schedule2) => flatMap7(driver(schedule2), (driver2) => scheduleFrom_EffectLoop(self2, initial, driver2)));
var scheduleFrom_EffectLoop = (self2, initial, driver2) => matchEffect(driver2.next(initial), {
  onFailure: () => orDie(driver2.last),
  onSuccess: () => flatMap7(self2, (a) => scheduleFrom_EffectLoop(self2, a, driver2))
});
var forever2 = /* @__PURE__ */ unfold2(0, (n) => n + 1);

// node_modules/effect/dist/esm/internal/effect/circular.js
var Semaphore = class {
  permits;
  waiters = /* @__PURE__ */ new Set();
  taken = 0;
  constructor(permits) {
    this.permits = permits;
  }
  get free() {
    return this.permits - this.taken;
  }
  take = (n) => async((resume2) => {
    if (this.free < n) {
      const observer = () => {
        if (this.free < n) {
          return;
        }
        this.waiters.delete(observer);
        this.taken += n;
        resume2(succeed(n));
      };
      this.waiters.add(observer);
      return sync(() => {
        this.waiters.delete(observer);
      });
    }
    this.taken += n;
    return resume2(succeed(n));
  });
  updateTaken = (f) => withFiberRuntime((fiber) => {
    this.taken = f(this.taken);
    if (this.waiters.size > 0) {
      fiber.getFiberRef(currentScheduler2).scheduleTask(() => {
        const iter = this.waiters.values();
        let item = iter.next();
        while (item.done === false && this.free > 0) {
          item.value();
          item = iter.next();
        }
      }, fiber.getFiberRef(currentSchedulingPriority));
    }
    return succeed(this.free);
  });
  release = (n) => this.updateTaken((taken) => taken - n);
  releaseAll = /* @__PURE__ */ this.updateTaken((_) => 0);
  withPermits = (n) => (self2) => uninterruptibleMask((restore) => flatMap7(restore(this.take(n)), (permits) => ensuring(restore(self2), this.release(permits))));
};
var unsafeMakeSemaphore = (permits) => new Semaphore(permits);
var makeSemaphore = (permits) => sync(() => unsafeMakeSemaphore(permits));
var awaitAllChildren = (self2) => ensuringChildren(self2, fiberAwaitAll);
var cached2 = /* @__PURE__ */ dual(2, (self2, timeToLive) => map8(cachedInvalidateWithTTL(self2, timeToLive), (tuple2) => tuple2[0]));
var cachedInvalidateWithTTL = /* @__PURE__ */ dual(2, (self2, timeToLive) => {
  const duration3 = decode(timeToLive);
  return flatMap7(context(), (env) => map8(makeSynchronized(none2()), (cache) => [provideContext(getCachedValue(self2, duration3, cache), env), invalidateCache(cache)]));
});
var computeCachedValue = (self2, timeToLive, start3) => {
  const timeToLiveMillis = toMillis(decode(timeToLive));
  return pipe(deferredMake(), tap((deferred) => intoDeferred(self2, deferred)), map8((deferred) => some2([start3 + timeToLiveMillis, deferred])));
};
var getCachedValue = (self2, timeToLive, cache) => uninterruptibleMask((restore) => pipe(clockWith3((clock3) => clock3.currentTimeMillis), flatMap7((time) => updateSomeAndGetEffectSynchronized(cache, (option5) => {
  switch (option5._tag) {
    case "None": {
      return some2(computeCachedValue(self2, timeToLive, time));
    }
    case "Some": {
      const [end3] = option5.value;
      return end3 - time <= 0 ? some2(computeCachedValue(self2, timeToLive, time)) : none2();
    }
  }
})), flatMap7((option5) => isNone2(option5) ? dieMessage("BUG: Effect.cachedInvalidate - please report an issue at https://github.com/Effect-TS/effect/issues") : restore(deferredAwait(option5.value[1])))));
var invalidateCache = (cache) => set5(cache, none2());
var ensuringChild = /* @__PURE__ */ dual(2, (self2, f) => ensuringChildren(self2, (children) => f(fiberAll(children))));
var ensuringChildren = /* @__PURE__ */ dual(2, (self2, children) => flatMap7(track, (supervisor) => pipe(supervised(self2, supervisor), ensuring(flatMap7(supervisor.value, children)))));
var forkAll = /* @__PURE__ */ dual((args) => isIterable(args[0]), (effects, options) => options?.discard ? forEachSequentialDiscard(effects, fork) : map8(forEachSequential(effects, fork), fiberAll));
var forkIn = /* @__PURE__ */ dual(2, (self2, scope5) => uninterruptibleMask((restore) => flatMap7(scope5.fork(sequential2), (child) => pipe(restore(self2), onExit((exit4) => child.close(exit4)), forkDaemon, tap((fiber) => child.addFinalizer(() => fiberIdWith((fiberId3) => equals(fiberId3, fiber.id()) ? void_ : asVoid(interruptFiber(fiber)))))))));
var forkScoped = (self2) => scopeWith((scope5) => forkIn(self2, scope5));
var fromFiber = (fiber) => join2(fiber);
var fromFiberEffect = (fiber) => suspend(() => flatMap7(fiber, join2));
var memoKeySymbol = /* @__PURE__ */ Symbol.for("effect/Effect/memoizeFunction.key");
var Key = class {
  a;
  eq;
  [memoKeySymbol] = memoKeySymbol;
  constructor(a, eq) {
    this.a = a;
    this.eq = eq;
  }
  [symbol2](that) {
    if (hasProperty(that, memoKeySymbol)) {
      if (this.eq) {
        return this.eq(this.a, that.a);
      } else {
        return equals(this.a, that.a);
      }
    }
    return false;
  }
  [symbol]() {
    return this.eq ? 0 : cached(this, hash(this.a));
  }
};
var cachedFunction = (f, eq) => {
  return pipe(sync(() => empty17()), flatMap7(makeSynchronized), map8((ref) => (a) => pipe(ref.modifyEffect((map18) => {
    const result = pipe(map18, get8(new Key(a, eq)));
    if (isNone2(result)) {
      return pipe(deferredMake(), tap((deferred) => pipe(diffFiberRefs(f(a)), intoDeferred(deferred), fork)), map8((deferred) => [deferred, pipe(map18, set4(new Key(a, eq), deferred))]));
    }
    return succeed([result.value, map18]);
  }), flatMap7(deferredAwait), flatMap7(([patch9, b]) => pipe(patchFiberRefs(patch9), as(b))))));
};
var raceFirst = /* @__PURE__ */ dual(2, (self2, that) => pipe(exit(self2), race(exit(that)), (effect2) => flatten4(effect2)));
var scheduleForked = /* @__PURE__ */ dual(2, (self2, schedule2) => pipe(self2, schedule_Effect(schedule2), forkScoped));
var supervised = /* @__PURE__ */ dual(2, (self2, supervisor) => {
  const supervise = fiberRefLocallyWith(currentSupervisor, (s) => s.zip(supervisor));
  return supervise(self2);
});
var timeout = /* @__PURE__ */ dual(2, (self2, duration3) => timeoutFail(self2, {
  onTimeout: () => timeoutExceptionFromDuration(duration3),
  duration: duration3
}));
var timeoutFail = /* @__PURE__ */ dual(2, (self2, {
  duration: duration3,
  onTimeout
}) => flatten4(timeoutTo(self2, {
  onTimeout: () => failSync(onTimeout),
  onSuccess: succeed,
  duration: duration3
})));
var timeoutFailCause = /* @__PURE__ */ dual(2, (self2, {
  duration: duration3,
  onTimeout
}) => flatten4(timeoutTo(self2, {
  onTimeout: () => failCauseSync(onTimeout),
  onSuccess: succeed,
  duration: duration3
})));
var timeoutOption = /* @__PURE__ */ dual(2, (self2, duration3) => timeoutTo(self2, {
  duration: duration3,
  onSuccess: some2,
  onTimeout: none2
}));
var timeoutTo = /* @__PURE__ */ dual(2, (self2, {
  duration: duration3,
  onSuccess,
  onTimeout
}) => fiberIdWith((parentFiberId) => raceFibersWith(self2, interruptible2(sleep3(duration3)), {
  onSelfWin: (winner, loser) => flatMap7(winner.await, (exit4) => {
    if (exit4._tag === "Success") {
      return flatMap7(winner.inheritAll, () => as(interruptAsFiber(loser, parentFiberId), onSuccess(exit4.value)));
    } else {
      return flatMap7(interruptAsFiber(loser, parentFiberId), () => exitFailCause(exit4.cause));
    }
  }),
  onOtherWin: (winner, loser) => flatMap7(winner.await, (exit4) => {
    if (exit4._tag === "Success") {
      return flatMap7(winner.inheritAll, () => as(interruptAsFiber(loser, parentFiberId), onTimeout()));
    } else {
      return flatMap7(interruptAsFiber(loser, parentFiberId), () => exitFailCause(exit4.cause));
    }
  }),
  otherScope: globalScope
})));
var SynchronizedSymbolKey = "effect/Ref/SynchronizedRef";
var SynchronizedTypeId = /* @__PURE__ */ Symbol.for(SynchronizedSymbolKey);
var synchronizedVariance = {
  /* c8 ignore next */
  _A: (_) => _
};
var SynchronizedImpl = class {
  ref;
  withLock;
  [SynchronizedTypeId] = synchronizedVariance;
  [RefTypeId] = refVariance;
  [TypeId12];
  constructor(ref, withLock) {
    this.ref = ref;
    this.withLock = withLock;
    this[TypeId12] = TypeId12;
    this.get = get11(this.ref);
  }
  get;
  modify(f) {
    return this.modifyEffect((a) => succeed(f(a)));
  }
  modifyEffect(f) {
    return this.withLock(pipe(flatMap7(get11(this.ref), f), flatMap7(([b, a]) => as(set5(this.ref, a), b))));
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var makeSynchronized = (value3) => sync(() => unsafeMakeSynchronized(value3));
var unsafeMakeSynchronized = (value3) => {
  const ref = unsafeMake6(value3);
  const sem = unsafeMakeSemaphore(1);
  return new SynchronizedImpl(ref, sem.withPermits(1));
};
var updateSomeAndGetEffectSynchronized = /* @__PURE__ */ dual(2, (self2, pf) => self2.modifyEffect((value3) => {
  const result = pf(value3);
  switch (result._tag) {
    case "None": {
      return succeed([value3, value3]);
    }
    case "Some": {
      return map8(result.value, (a) => [a, a]);
    }
  }
}));

// node_modules/effect/dist/esm/internal/opCodes/layer.js
var OP_EXTEND_SCOPE = "ExtendScope";
var OP_FOLD = "Fold";
var OP_FRESH = "Fresh";
var OP_FROM_EFFECT = "FromEffect";
var OP_SCOPED = "Scoped";
var OP_SUSPEND = "Suspend";
var OP_PROVIDE = "Provide";
var OP_PROVIDE_MERGE = "ProvideMerge";
var OP_ZIP_WITH2 = "ZipWith";

// node_modules/effect/dist/esm/Fiber.js
var interruptAs = interruptAsFiber;

// node_modules/effect/dist/esm/internal/runtime.js
var unsafeFork2 = (runtime4) => (self2, options) => {
  const fiberId3 = unsafeMake3();
  const fiberRefUpdates = [[currentContext, [[fiberId3, runtime4.context]]]];
  if (options?.scheduler) {
    fiberRefUpdates.push([currentScheduler2, [[fiberId3, options.scheduler]]]);
  }
  let fiberRefs3 = updateManyAs2(runtime4.fiberRefs, {
    entries: fiberRefUpdates,
    forkAs: fiberId3
  });
  if (options?.updateRefs) {
    fiberRefs3 = options.updateRefs(fiberRefs3, fiberId3);
  }
  const fiberRuntime = new FiberRuntime(fiberId3, fiberRefs3, runtime4.runtimeFlags);
  let effect2 = self2;
  if (options?.scope) {
    effect2 = flatMap7(fork2(options.scope, sequential2), (closeableScope) => zipRight(scopeAddFinalizer(closeableScope, fiberIdWith((id) => equals(id, fiberRuntime.id()) ? void_ : interruptAsFiber(fiberRuntime, id))), onExit(self2, (exit4) => close(closeableScope, exit4))));
  }
  const supervisor = fiberRuntime._supervisor;
  if (supervisor !== none8) {
    supervisor.onStart(runtime4.context, effect2, none2(), fiberRuntime);
    fiberRuntime.addObserver((exit4) => supervisor.onEnd(exit4, fiberRuntime));
  }
  globalScope.add(runtime4.runtimeFlags, fiberRuntime);
  if (options?.immediate === false) {
    fiberRuntime.resume(effect2);
  } else {
    fiberRuntime.start(effect2);
  }
  return fiberRuntime;
};
var unsafeRunCallback = (runtime4) => (effect2, options = {}) => {
  const fiberRuntime = unsafeFork2(runtime4)(effect2, options);
  if (options.onExit) {
    fiberRuntime.addObserver((exit4) => {
      options.onExit(exit4);
    });
  }
  return (id, cancelOptions) => unsafeRunCallback(runtime4)(pipe(fiberRuntime, interruptAs(id ?? none4)), {
    ...cancelOptions,
    onExit: cancelOptions?.onExit ? (exit4) => cancelOptions.onExit(flatten5(exit4)) : void 0
  });
};
var unsafeRunSync = (runtime4) => (effect2) => {
  const result = unsafeRunSyncExit(runtime4)(effect2);
  if (result._tag === "Failure") {
    throw fiberFailure(result.effect_instruction_i0);
  } else {
    return result.effect_instruction_i0;
  }
};
var AsyncFiberExceptionImpl = class extends Error {
  fiber;
  _tag = "AsyncFiberException";
  constructor(fiber) {
    super(`Fiber #${fiber.id().id} cannot be resolved synchronously. This is caused by using runSync on an effect that performs async work`);
    this.fiber = fiber;
    this.name = this._tag;
    this.stack = this.message;
  }
};
var asyncFiberException = (fiber) => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 0;
  const error = new AsyncFiberExceptionImpl(fiber);
  Error.stackTraceLimit = limit;
  return error;
};
var FiberFailureId = /* @__PURE__ */ Symbol.for("effect/Runtime/FiberFailure");
var FiberFailureCauseId = /* @__PURE__ */ Symbol.for("effect/Runtime/FiberFailure/Cause");
var FiberFailureImpl = class extends Error {
  [FiberFailureId];
  [FiberFailureCauseId];
  constructor(cause3) {
    super();
    this[FiberFailureId] = FiberFailureId;
    this[FiberFailureCauseId] = cause3;
    const prettyErrors2 = prettyErrors(cause3);
    if (prettyErrors2.length > 0) {
      const head5 = prettyErrors2[0];
      this.name = head5.name;
      this.message = head5.message;
      this.stack = head5.stack;
    }
    this.name = `(FiberFailure) ${this.name}`;
    if (this.message === void 0 || this.message.length === 0) {
      this.message = "An error has occurred";
    }
  }
  toJSON() {
    return {
      _id: "FiberFailure",
      cause: this[FiberFailureCauseId].toJSON()
    };
  }
  toString() {
    return "(FiberFailure) " + (this.stack ?? this.message);
  }
  [NodeInspectSymbol]() {
    return this.toString();
  }
};
var fiberFailure = (cause3) => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 0;
  const error = new FiberFailureImpl(cause3);
  Error.stackTraceLimit = limit;
  return error;
};
var fastPath = (effect2) => {
  const op = effect2;
  switch (op._op) {
    case "Failure":
    case "Success": {
      return op;
    }
    case "Left": {
      return exitFail(op.left);
    }
    case "Right": {
      return exitSucceed(op.right);
    }
    case "Some": {
      return exitSucceed(op.value);
    }
    case "None": {
      return exitFail(NoSuchElementException());
    }
  }
};
var unsafeRunSyncExit = (runtime4) => (effect2) => {
  const op = fastPath(effect2);
  if (op) {
    return op;
  }
  const scheduler = new SyncScheduler();
  const fiberRuntime = unsafeFork2(runtime4)(effect2, {
    scheduler
  });
  scheduler.flush();
  const result = fiberRuntime.unsafePoll();
  if (result) {
    return result;
  }
  throw asyncFiberException(fiberRuntime);
};
var unsafeRunPromise = (runtime4) => (effect2, options) => unsafeRunPromiseExit(runtime4)(effect2, options).then((result) => {
  switch (result._tag) {
    case OP_SUCCESS: {
      return result.effect_instruction_i0;
    }
    case OP_FAILURE: {
      throw fiberFailure(result.effect_instruction_i0);
    }
  }
});
var unsafeRunPromiseExit = (runtime4) => (effect2, options) => new Promise((resolve) => {
  const op = fastPath(effect2);
  if (op) {
    resolve(op);
  }
  const fiber = unsafeFork2(runtime4)(effect2);
  fiber.addObserver((exit4) => {
    resolve(exit4);
  });
  if (options?.signal !== void 0) {
    if (options.signal.aborted) {
      fiber.unsafeInterruptAsFork(fiber.id());
    } else {
      options.signal.addEventListener("abort", () => {
        fiber.unsafeInterruptAsFork(fiber.id());
      }, {
        once: true
      });
    }
  }
});
var RuntimeImpl = class {
  context;
  runtimeFlags;
  fiberRefs;
  constructor(context5, runtimeFlags2, fiberRefs3) {
    this.context = context5;
    this.runtimeFlags = runtimeFlags2;
    this.fiberRefs = fiberRefs3;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var make39 = (options) => new RuntimeImpl(options.context, options.runtimeFlags, options.fiberRefs);
var runtime2 = () => withFiberRuntime((state, status) => succeed(new RuntimeImpl(state.getFiberRef(currentContext), status.runtimeFlags, state.getFiberRefs())));
var defaultRuntimeFlags = /* @__PURE__ */ make17(Interruption, CooperativeYielding, RuntimeMetrics);
var defaultRuntime = /* @__PURE__ */ make39({
  context: /* @__PURE__ */ empty3(),
  runtimeFlags: defaultRuntimeFlags,
  fiberRefs: /* @__PURE__ */ empty21()
});
var unsafeRunEffect = /* @__PURE__ */ unsafeRunCallback(defaultRuntime);
var unsafeForkEffect = /* @__PURE__ */ unsafeFork2(defaultRuntime);
var unsafeRunPromiseEffect = /* @__PURE__ */ unsafeRunPromise(defaultRuntime);
var unsafeRunPromiseExitEffect = /* @__PURE__ */ unsafeRunPromiseExit(defaultRuntime);
var unsafeRunSyncEffect = /* @__PURE__ */ unsafeRunSync(defaultRuntime);
var unsafeRunSyncExitEffect = /* @__PURE__ */ unsafeRunSyncExit(defaultRuntime);
var asyncEffect = (register) => suspend(() => {
  let cleanup = void 0;
  return flatMap7(deferredMake(), (deferred) => flatMap7(runtime2(), (runtime4) => uninterruptibleMask((restore) => zipRight(fork(restore(matchCauseEffect(register((cb) => unsafeRunCallback(runtime4)(intoDeferred(cb, deferred))), {
    onFailure: (cause3) => deferredFailCause(deferred, cause3),
    onSuccess: (cleanup_) => {
      cleanup = cleanup_;
      return void_;
    }
  }))), restore(onInterrupt(deferredAwait(deferred), () => cleanup ?? void_))))));
});

// node_modules/effect/dist/esm/internal/synchronizedRef.js
var modifyEffect = /* @__PURE__ */ dual(2, (self2, f) => self2.modifyEffect(f));

// node_modules/effect/dist/esm/internal/layer.js
var LayerSymbolKey = "effect/Layer";
var LayerTypeId = /* @__PURE__ */ Symbol.for(LayerSymbolKey);
var layerVariance = {
  /* c8 ignore next */
  _RIn: (_) => _,
  /* c8 ignore next */
  _E: (_) => _,
  /* c8 ignore next */
  _ROut: (_) => _
};
var proto3 = {
  [LayerTypeId]: layerVariance,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
var MemoMapTypeIdKey = "effect/Layer/MemoMap";
var MemoMapTypeId = /* @__PURE__ */ Symbol.for(MemoMapTypeIdKey);
var isLayer = (u) => hasProperty(u, LayerTypeId);
var isFresh = (self2) => {
  return self2._tag === OP_FRESH;
};
var MemoMapImpl = class {
  ref;
  [MemoMapTypeId];
  constructor(ref) {
    this.ref = ref;
    this[MemoMapTypeId] = MemoMapTypeId;
  }
  /**
   * Checks the memo map to see if a layer exists. If it is, immediately
   * returns it. Otherwise, obtains the layer, stores it in the memo map,
   * and adds a finalizer to the `Scope`.
   */
  getOrElseMemoize(layer, scope5) {
    return pipe(modifyEffect(this.ref, (map18) => {
      const inMap = map18.get(layer);
      if (inMap !== void 0) {
        const [acquire, release] = inMap;
        const cached4 = pipe(acquire, flatMap7(([patch9, b]) => pipe(patchFiberRefs(patch9), as(b))), onExit(exitMatch({
          onFailure: () => void_,
          onSuccess: () => scopeAddFinalizerExit(scope5, release)
        })));
        return succeed([cached4, map18]);
      }
      return pipe(make26(0), flatMap7((observers) => pipe(deferredMake(), flatMap7((deferred) => pipe(make26(() => void_), map8((finalizerRef) => {
        const resource = uninterruptibleMask((restore) => pipe(scopeMake(), flatMap7((innerScope) => pipe(restore(flatMap7(makeBuilder(layer, innerScope, true), (f) => diffFiberRefs(f(this)))), exit, flatMap7((exit4) => {
          switch (exit4._tag) {
            case OP_FAILURE: {
              return pipe(deferredFailCause(deferred, exit4.effect_instruction_i0), zipRight(scopeClose(innerScope, exit4)), zipRight(failCause(exit4.effect_instruction_i0)));
            }
            case OP_SUCCESS: {
              return pipe(set5(finalizerRef, (exit5) => pipe(scopeClose(innerScope, exit5), whenEffect(modify2(observers, (n) => [n === 1, n - 1])), asVoid)), zipRight(update2(observers, (n) => n + 1)), zipRight(scopeAddFinalizerExit(scope5, (exit5) => pipe(sync(() => map18.delete(layer)), zipRight(get11(finalizerRef)), flatMap7((finalizer) => finalizer(exit5))))), zipRight(deferredSucceed(deferred, exit4.effect_instruction_i0)), as(exit4.effect_instruction_i0[1]));
            }
          }
        })))));
        const memoized = [pipe(deferredAwait(deferred), onExit(exitMatchEffect({
          onFailure: () => void_,
          onSuccess: () => update2(observers, (n) => n + 1)
        }))), (exit4) => pipe(get11(finalizerRef), flatMap7((finalizer) => finalizer(exit4)))];
        return [resource, isFresh(layer) ? map18 : map18.set(layer, memoized)];
      }))))));
    }), flatten4);
  }
};
var makeMemoMap = /* @__PURE__ */ suspend(() => map8(makeSynchronized(/* @__PURE__ */ new Map()), (ref) => new MemoMapImpl(ref)));
var build = (self2) => scopeWith((scope5) => buildWithScope(self2, scope5));
var buildWithScope = /* @__PURE__ */ dual(2, (self2, scope5) => flatMap7(makeMemoMap, (memoMap) => flatMap7(makeBuilder(self2, scope5), (run) => run(memoMap))));
var buildWithMemoMap = /* @__PURE__ */ dual(3, (self2, memoMap, scope5) => flatMap7(makeBuilder(self2, scope5), (run) => run(memoMap)));
var makeBuilder = (self2, scope5, inMemoMap = false) => {
  const op = self2;
  switch (op._tag) {
    case "Locally": {
      return sync(() => (memoMap) => op.f(memoMap.getOrElseMemoize(op.self, scope5)));
    }
    case "ExtendScope": {
      return sync(() => (memoMap) => scopeWith((scope6) => memoMap.getOrElseMemoize(op.layer, scope6)));
    }
    case "Fold": {
      return sync(() => (memoMap) => pipe(memoMap.getOrElseMemoize(op.layer, scope5), matchCauseEffect({
        onFailure: (cause3) => memoMap.getOrElseMemoize(op.failureK(cause3), scope5),
        onSuccess: (value3) => memoMap.getOrElseMemoize(op.successK(value3), scope5)
      })));
    }
    case "Fresh": {
      return sync(() => (_) => pipe(op.layer, buildWithScope(scope5)));
    }
    case "FromEffect": {
      return inMemoMap ? sync(() => (_) => op.effect) : sync(() => (memoMap) => memoMap.getOrElseMemoize(self2, scope5));
    }
    case "Provide": {
      return sync(() => (memoMap) => pipe(memoMap.getOrElseMemoize(op.first, scope5), flatMap7((env) => pipe(memoMap.getOrElseMemoize(op.second, scope5), provideContext(env)))));
    }
    case "Scoped": {
      return inMemoMap ? sync(() => (_) => scopeExtend(op.effect, scope5)) : sync(() => (memoMap) => memoMap.getOrElseMemoize(self2, scope5));
    }
    case "Suspend": {
      return sync(() => (memoMap) => memoMap.getOrElseMemoize(op.evaluate(), scope5));
    }
    case "ProvideMerge": {
      return sync(() => (memoMap) => pipe(memoMap.getOrElseMemoize(op.first, scope5), zipWith2(memoMap.getOrElseMemoize(op.second, scope5), op.zipK)));
    }
    case "ZipWith": {
      return sync(() => (memoMap) => pipe(memoMap.getOrElseMemoize(op.first, scope5), zipWithOptions(memoMap.getOrElseMemoize(op.second, scope5), op.zipK, {
        concurrent: true
      })));
    }
  }
};
var catchAll2 = /* @__PURE__ */ dual(2, (self2, onFailure) => match8(self2, {
  onFailure,
  onSuccess: succeedContext
}));
var catchAllCause2 = /* @__PURE__ */ dual(2, (self2, onFailure) => matchCause2(self2, {
  onFailure,
  onSuccess: succeedContext
}));
var die4 = (defect) => failCause2(die3(defect));
var dieSync2 = (evaluate) => failCauseSync2(() => die3(evaluate()));
var discard = (self2) => map12(self2, () => empty3());
var context2 = () => fromEffectContext(context());
var extendScope = (self2) => {
  const extendScope3 = Object.create(proto3);
  extendScope3._tag = OP_EXTEND_SCOPE;
  extendScope3.layer = self2;
  return extendScope3;
};
var fail4 = (error) => failCause2(fail3(error));
var failSync2 = (evaluate) => failCauseSync2(() => fail3(evaluate()));
var failCause2 = (cause3) => fromEffectContext(failCause(cause3));
var failCauseSync2 = (evaluate) => fromEffectContext(failCauseSync(evaluate));
var flatMap9 = /* @__PURE__ */ dual(2, (self2, f) => match8(self2, {
  onFailure: fail4,
  onSuccess: f
}));
var flatten6 = /* @__PURE__ */ dual(2, (self2, tag) => flatMap9(self2, get3(tag)));
var fresh = (self2) => {
  const fresh3 = Object.create(proto3);
  fresh3._tag = OP_FRESH;
  fresh3.layer = self2;
  return fresh3;
};
var fromEffect2 = /* @__PURE__ */ dual(2, (a, b) => {
  const tagFirst = isTag2(a);
  const tag = tagFirst ? a : b;
  const effect2 = tagFirst ? b : a;
  return fromEffectContext(map8(effect2, (service3) => make6(tag, service3)));
});
var fromEffectDiscard = (effect2) => fromEffectContext(map8(effect2, () => empty3()));
function fromEffectContext(effect2) {
  const fromEffect3 = Object.create(proto3);
  fromEffect3._tag = OP_FROM_EFFECT;
  fromEffect3.effect = effect2;
  return fromEffect3;
}
var fiberRefLocally2 = /* @__PURE__ */ dual(3, (self2, ref, value3) => locallyEffect(self2, fiberRefLocally(ref, value3)));
var locallyEffect = /* @__PURE__ */ dual(2, (self2, f) => {
  const locally4 = Object.create(proto3);
  locally4._tag = "Locally";
  locally4.self = self2;
  locally4.f = f;
  return locally4;
});
var fiberRefLocallyWith2 = /* @__PURE__ */ dual(3, (self2, ref, value3) => locallyEffect(self2, fiberRefLocallyWith(ref, value3)));
var fiberRefLocallyScoped2 = (self2, value3) => scopedDiscard(fiberRefLocallyScoped(self2, value3));
var fiberRefLocallyScopedWith2 = (self2, value3) => scopedDiscard(fiberRefLocallyScopedWith(self2, value3));
var fromFunction = (tagA, tagB, f) => fromEffectContext(map8(tagA, (a) => make6(tagB, f(a))));
var launch = (self2) => scopedEffect(zipRight(scopeWith((scope5) => pipe(self2, buildWithScope(scope5))), never));
var map12 = /* @__PURE__ */ dual(2, (self2, f) => flatMap9(self2, (context5) => succeedContext(f(context5))));
var mapError2 = /* @__PURE__ */ dual(2, (self2, f) => catchAll2(self2, (error) => failSync2(() => f(error))));
var matchCause2 = /* @__PURE__ */ dual(2, (self2, {
  onFailure,
  onSuccess
}) => {
  const fold = Object.create(proto3);
  fold._tag = OP_FOLD;
  fold.layer = self2;
  fold.failureK = onFailure;
  fold.successK = onSuccess;
  return fold;
});
var match8 = /* @__PURE__ */ dual(2, (self2, {
  onFailure,
  onSuccess
}) => matchCause2(self2, {
  onFailure: (cause3) => {
    const failureOrCause3 = failureOrCause2(cause3);
    switch (failureOrCause3._tag) {
      case "Left": {
        return onFailure(failureOrCause3.left);
      }
      case "Right": {
        return failCause2(failureOrCause3.right);
      }
    }
  },
  onSuccess
}));
var memoize2 = (self2) => scopeWith((scope5) => map8(memoize(buildWithScope(self2, scope5)), fromEffectContext));
var merge6 = /* @__PURE__ */ dual(2, (self2, that) => zipWith3(self2, that, (a, b) => merge3(a, b)));
var mergeAll2 = (...layers) => {
  let final = layers[0];
  for (let i = 1; i < layers.length; i++) {
    final = merge6(final, layers[i]);
  }
  return final;
};
var orDie2 = (self2) => catchAll2(self2, (defect) => die4(defect));
var orElse3 = /* @__PURE__ */ dual(2, (self2, that) => catchAll2(self2, that));
var passthrough2 = (self2) => merge6(context2(), self2);
var project = /* @__PURE__ */ dual(4, (self2, tagA, tagB, f) => map12(self2, (context5) => make6(tagB, f(unsafeGet3(context5, tagA)))));
var retry = /* @__PURE__ */ dual(2, (self2, schedule2) => suspend3(() => {
  const stateTag = GenericTag("effect/Layer/retry/{ state: unknown }");
  return pipe(succeed5(stateTag, {
    state: schedule2.initial
  }), flatMap9((env) => retryLoop(self2, schedule2, stateTag, pipe(env, get3(stateTag)).state)));
}));
var retryLoop = (self2, schedule2, stateTag, state) => {
  return pipe(self2, catchAll2((error) => pipe(retryUpdate(schedule2, stateTag, error, state), flatMap9((env) => fresh(retryLoop(self2, schedule2, stateTag, pipe(env, get3(stateTag)).state))))));
};
var retryUpdate = (schedule2, stateTag, error, state) => {
  return fromEffect2(stateTag, pipe(currentTimeMillis2, flatMap7((now) => pipe(schedule2.step(now, error, state), flatMap7(([state2, _, decision]) => isDone4(decision) ? fail2(error) : pipe(sleep2(millis(start2(decision.intervals) - now)), as({
    state: state2
  })))))));
};
var scoped = /* @__PURE__ */ dual(2, (a, b) => {
  const tagFirst = isTag2(a);
  const tag = tagFirst ? a : b;
  const effect2 = tagFirst ? b : a;
  return scopedContext(map8(effect2, (service3) => make6(tag, service3)));
});
var scopedDiscard = (effect2) => scopedContext(pipe(effect2, as(empty3())));
var scopedContext = (effect2) => {
  const scoped4 = Object.create(proto3);
  scoped4._tag = OP_SCOPED;
  scoped4.effect = effect2;
  return scoped4;
};
var scope2 = /* @__PURE__ */ scopedContext(/* @__PURE__ */ map8(/* @__PURE__ */ acquireRelease(/* @__PURE__ */ scopeMake(), (scope5, exit4) => scope5.close(exit4)), (scope5) => make6(Scope, scope5)));
var service = (tag) => fromEffect2(tag, tag);
var succeed5 = /* @__PURE__ */ dual(2, (a, b) => {
  const tagFirst = isTag2(a);
  const tag = tagFirst ? a : b;
  const resource = tagFirst ? b : a;
  return fromEffectContext(succeed(make6(tag, resource)));
});
var succeedContext = (context5) => {
  return fromEffectContext(succeed(context5));
};
var empty30 = /* @__PURE__ */ succeedContext(/* @__PURE__ */ empty3());
var suspend3 = (evaluate) => {
  const suspend8 = Object.create(proto3);
  suspend8._tag = OP_SUSPEND;
  suspend8.evaluate = evaluate;
  return suspend8;
};
var sync4 = /* @__PURE__ */ dual(2, (a, b) => {
  const tagFirst = isTag2(a);
  const tag = tagFirst ? a : b;
  const evaluate = tagFirst ? b : a;
  return fromEffectContext(sync(() => make6(tag, evaluate())));
});
var syncContext = (evaluate) => {
  return fromEffectContext(sync(evaluate));
};
var tap2 = /* @__PURE__ */ dual(2, (self2, f) => flatMap9(self2, (context5) => fromEffectContext(as(f(context5), context5))));
var tapError2 = /* @__PURE__ */ dual(2, (self2, f) => catchAll2(self2, (e) => fromEffectContext(flatMap7(f(e), () => fail2(e)))));
var tapErrorCause2 = /* @__PURE__ */ dual(2, (self2, f) => catchAllCause2(self2, (cause3) => fromEffectContext(flatMap7(f(cause3), () => failCause(cause3)))));
var toRuntime = (self2) => pipe(scopeWith((scope5) => buildWithScope(self2, scope5)), flatMap7((context5) => pipe(runtime2(), provideContext(context5))));
var toRuntimeWithMemoMap = /* @__PURE__ */ dual(2, (self2, memoMap) => flatMap7(scopeWith((scope5) => buildWithMemoMap(self2, memoMap, scope5)), (context5) => pipe(runtime2(), provideContext(context5))));
var provide = /* @__PURE__ */ dual(2, (that, self2) => suspend3(() => {
  const provideTo = Object.create(proto3);
  provideTo._tag = OP_PROVIDE;
  provideTo.first = Object.create(proto3, {
    _tag: {
      value: OP_PROVIDE_MERGE,
      enumerable: true
    },
    first: {
      value: context2(),
      enumerable: true
    },
    second: {
      value: self2
    },
    zipK: {
      value: (a, b) => pipe(a, merge3(b))
    }
  });
  provideTo.second = that;
  return provideTo;
}));
var provideMerge = /* @__PURE__ */ dual(2, (that, self2) => {
  const zipWith8 = Object.create(proto3);
  zipWith8._tag = OP_PROVIDE_MERGE;
  zipWith8.first = self2;
  zipWith8.second = provide(that, self2);
  zipWith8.zipK = (a, b) => {
    return pipe(a, merge3(b));
  };
  return zipWith8;
});
var zipWith3 = /* @__PURE__ */ dual(3, (self2, that, f) => suspend3(() => {
  const zipWith8 = Object.create(proto3);
  zipWith8._tag = OP_ZIP_WITH2;
  zipWith8.first = self2;
  zipWith8.second = that;
  zipWith8.zipK = f;
  return zipWith8;
}));
var unwrapEffect = (self2) => {
  const tag = GenericTag("effect/Layer/unwrapEffect/Layer.Layer<R1, E1, A>");
  return flatMap9(fromEffect2(tag, self2), (context5) => get3(context5, tag));
};
var unwrapScoped = (self2) => {
  const tag = GenericTag("effect/Layer/unwrapScoped/Layer.Layer<R1, E1, A>");
  return flatMap9(scoped(tag, self2), (context5) => get3(context5, tag));
};
var annotateLogs2 = /* @__PURE__ */ dual((args) => isLayer(args[0]), function() {
  const args = arguments;
  return fiberRefLocallyWith2(args[0], currentLogAnnotations, typeof args[1] === "string" ? set3(args[1], args[2]) : (annotations) => Object.entries(args[1]).reduce((acc, [key, value3]) => set3(acc, key, value3), annotations));
});
var annotateSpans2 = /* @__PURE__ */ dual((args) => isLayer(args[0]), function() {
  const args = arguments;
  return fiberRefLocallyWith2(args[0], currentTracerSpanAnnotations, typeof args[1] === "string" ? set3(args[1], args[2]) : (annotations) => Object.entries(args[1]).reduce((acc, [key, value3]) => set3(acc, key, value3), annotations));
});
var withSpan2 = function() {
  const dataFirst = typeof arguments[0] !== "string";
  const name = dataFirst ? arguments[1] : arguments[0];
  const options = addSpanStackTrace(dataFirst ? arguments[2] : arguments[1]);
  if (dataFirst) {
    const self2 = arguments[0];
    return unwrapScoped(map8(options?.onEnd ? tap(makeSpanScoped(name, options), (span4) => addFinalizer((exit4) => options.onEnd(span4, exit4))) : makeSpanScoped(name, options), (span4) => withParentSpan2(self2, span4)));
  }
  return (self2) => unwrapScoped(map8(options?.onEnd ? tap(makeSpanScoped(name, options), (span4) => addFinalizer((exit4) => options.onEnd(span4, exit4))) : makeSpanScoped(name, options), (span4) => withParentSpan2(self2, span4)));
};
var withParentSpan2 = /* @__PURE__ */ dual(2, (self2, span4) => provide(self2, succeedContext(make6(spanTag, span4))));
var provideSomeLayer = /* @__PURE__ */ dual(2, (self2, layer) => acquireUseRelease(scopeMake(), (scope5) => flatMap7(buildWithScope(layer, scope5), (context5) => provideSomeContext(self2, context5)), (scope5, exit4) => scopeClose(scope5, exit4)));
var provideSomeRuntime = /* @__PURE__ */ dual(2, (self2, rt) => {
  const patchRefs = diff6(defaultRuntime.fiberRefs, rt.fiberRefs);
  const patchFlags = diff4(defaultRuntime.runtimeFlags, rt.runtimeFlags);
  return uninterruptibleMask((restore) => withFiberRuntime((fiber) => {
    const oldContext = fiber.getFiberRef(currentContext);
    const oldRefs = fiber.getFiberRefs();
    const newRefs = patch7(fiber.id(), oldRefs)(patchRefs);
    const oldFlags = fiber._runtimeFlags;
    const newFlags = patch4(patchFlags)(oldFlags);
    const rollbackRefs = diff6(newRefs, oldRefs);
    const rollbackFlags = diff4(newFlags, oldFlags);
    fiber.setFiberRefs(newRefs);
    fiber._runtimeFlags = newFlags;
    return ensuring(provideSomeContext(restore(self2), merge3(oldContext, rt.context)), withFiberRuntime((fiber2) => {
      fiber2.setFiberRefs(patch7(fiber2.id(), fiber2.getFiberRefs())(rollbackRefs));
      fiber2._runtimeFlags = patch4(rollbackFlags)(fiber2._runtimeFlags);
      return void_;
    }));
  }));
});
var effect_provide = /* @__PURE__ */ dual(2, (self2, source) => isLayer(source) ? provideSomeLayer(self2, source) : isContext2(source) ? provideSomeContext(self2, source) : provideSomeRuntime(self2, source));

// node_modules/effect/dist/esm/internal/console.js
var console2 = /* @__PURE__ */ map8(/* @__PURE__ */ fiberRefGet(currentServices), /* @__PURE__ */ get3(consoleTag));
var consoleWith = (f) => fiberRefGetWith(currentServices, (services) => f(get3(services, consoleTag)));
var withConsole = /* @__PURE__ */ dual(2, (effect2, value3) => fiberRefLocallyWith(effect2, currentServices, add2(consoleTag, value3)));
var withConsoleScoped = (console4) => fiberRefLocallyScopedWith(currentServices, add2(consoleTag, console4));

// node_modules/effect/dist/esm/internal/query.js
var currentCache = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentCache"), () => fiberRefUnsafeMake(unsafeMakeWith(65536, () => map8(deferredMake(), (handle) => ({
  listeners: new Listeners(),
  handle
})), () => seconds(60))));
var currentCacheEnabled = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentCacheEnabled"), () => fiberRefUnsafeMake(false));
var fromRequest = (request2, dataSource) => flatMap7(isEffect(dataSource) ? dataSource : succeed(dataSource), (ds) => fiberIdWith((id) => {
  const proxy = new Proxy(request2, {});
  return fiberRefGetWith(currentCacheEnabled, (cacheEnabled) => {
    if (cacheEnabled) {
      const cached4 = fiberRefGetWith(currentCache, (cache) => flatMap7(cache.getEither(proxy), (orNew) => {
        switch (orNew._tag) {
          case "Left": {
            if (orNew.left.listeners.interrupted) {
              return flatMap7(cache.invalidateWhen(proxy, (entry) => entry.handle === orNew.left.handle), () => cached4);
            }
            orNew.left.listeners.increment();
            return uninterruptibleMask((restore) => flatMap7(exit(blocked(empty15, restore(deferredAwait(orNew.left.handle)))), (exit4) => {
              orNew.left.listeners.decrement();
              return exit4;
            }));
          }
          case "Right": {
            orNew.right.listeners.increment();
            return uninterruptibleMask((restore) => flatMap7(exit(blocked(single(ds, makeEntry({
              request: proxy,
              result: orNew.right.handle,
              listeners: orNew.right.listeners,
              ownerId: id,
              state: {
                completed: false
              }
            })), restore(deferredAwait(orNew.right.handle)))), () => {
              orNew.right.listeners.decrement();
              return deferredAwait(orNew.right.handle);
            }));
          }
        }
      }));
      return cached4;
    }
    const listeners = new Listeners();
    listeners.increment();
    return flatMap7(deferredMake(), (ref) => ensuring(blocked(single(ds, makeEntry({
      request: proxy,
      result: ref,
      listeners,
      ownerId: id,
      state: {
        completed: false
      }
    })), deferredAwait(ref)), sync(() => listeners.decrement())));
  });
}));
var cacheRequest = (request2, result) => {
  return fiberRefGetWith(currentCacheEnabled, (cacheEnabled) => {
    if (cacheEnabled) {
      return fiberRefGetWith(currentCache, (cache) => flatMap7(cache.getEither(request2), (orNew) => {
        switch (orNew._tag) {
          case "Left": {
            return void_;
          }
          case "Right": {
            return deferredComplete(orNew.right.handle, result);
          }
        }
      }));
    }
    return void_;
  });
};
var withRequestCaching = /* @__PURE__ */ dual(2, (self2, strategy) => fiberRefLocally(self2, currentCacheEnabled, strategy));
var withRequestCache = /* @__PURE__ */ dual(
  2,
  // @ts-expect-error
  (self2, cache) => fiberRefLocally(self2, currentCache, cache)
);

// node_modules/effect/dist/esm/Request.js
var isRequest2 = isRequest;

// node_modules/effect/dist/esm/Effect.js
var EffectTypeId4 = EffectTypeId2;
var isEffect2 = isEffect;
var cachedWithTTL = cached2;
var cachedInvalidateWithTTL2 = cachedInvalidateWithTTL;
var cached3 = memoize;
var cachedFunction2 = cachedFunction;
var once2 = once;
var all4 = all3;
var allWith2 = allWith;
var allSuccesses2 = allSuccesses;
var dropUntil2 = dropUntil;
var dropWhile2 = dropWhile;
var every4 = every3;
var exists2 = exists;
var filter6 = filter4;
var filterMap4 = filterMap3;
var findFirst5 = findFirst3;
var firstSuccessOf2 = firstSuccessOf;
var forEach8 = forEach7;
var head4 = head3;
var mergeAll3 = mergeAll;
var partition4 = partition3;
var reduce10 = reduce8;
var reduceEffect2 = reduceEffect;
var reduceRight3 = reduceRight2;
var reduceWhile2 = reduceWhile;
var replicate2 = replicate;
var replicateEffect2 = replicateEffect;
var takeUntil2 = takeUntil;
var takeWhile2 = takeWhile;
var validateAll2 = validateAll;
var validateFirst2 = validateFirst;
var async3 = async;
var asyncEffect2 = asyncEffect;
var custom2 = custom;
var withFiberRuntime2 = withFiberRuntime;
var fail6 = fail2;
var failSync3 = failSync;
var failCause4 = failCause;
var failCauseSync3 = failCauseSync;
var die5 = die2;
var dieMessage2 = dieMessage;
var dieSync3 = dieSync;
var gen2 = gen;
var never3 = never;
var none9 = none6;
var promise2 = promise;
var succeed7 = succeed;
var succeedNone2 = succeedNone;
var succeedSome2 = succeedSome;
var suspend4 = suspend;
var sync5 = sync;
var _void = void_;
var yieldNow3 = yieldNow;
var _catch2 = _catch;
var catchAll3 = catchAll;
var catchAllCause3 = catchAllCause;
var catchAllDefect2 = catchAllDefect;
var catchIf2 = catchIf;
var catchSome2 = catchSome;
var catchSomeCause2 = catchSomeCause;
var catchSomeDefect2 = catchSomeDefect;
var catchTag2 = catchTag;
var catchTags2 = catchTags;
var cause2 = cause;
var eventually2 = eventually;
var ignore2 = ignore;
var ignoreLogged2 = ignoreLogged;
var parallelErrors2 = parallelErrors;
var sandbox2 = sandbox;
var retry2 = retry_combined;
var retryOrElse = retryOrElse_Effect;
var try_2 = try_;
var tryMap2 = tryMap;
var tryMapPromise2 = tryMapPromise;
var tryPromise2 = tryPromise;
var unsandbox2 = unsandbox;
var allowInterrupt2 = allowInterrupt;
var checkInterruptible2 = checkInterruptible;
var disconnect2 = disconnect;
var interrupt4 = interrupt2;
var interruptWith2 = interruptWith;
var interruptible3 = interruptible2;
var interruptibleMask2 = interruptibleMask;
var onInterrupt2 = onInterrupt;
var uninterruptible3 = uninterruptible;
var uninterruptibleMask2 = uninterruptibleMask;
var liftPredicate2 = liftPredicate;
var as3 = as;
var asSome2 = asSome;
var asSomeError2 = asSomeError;
var asVoid3 = asVoid;
var flip3 = flip2;
var flipWith2 = flipWith;
var map13 = map8;
var mapAccum3 = mapAccum2;
var mapBoth2 = mapBoth;
var mapError3 = mapError;
var mapErrorCause2 = mapErrorCause;
var merge7 = merge5;
var negate2 = negate;
var acquireRelease2 = acquireRelease;
var acquireReleaseInterruptible2 = acquireReleaseInterruptible;
var acquireUseRelease2 = acquireUseRelease;
var addFinalizer2 = addFinalizer;
var ensuring2 = ensuring;
var onError2 = onError;
var onExit2 = onExit;
var parallelFinalizers2 = parallelFinalizers;
var finalizersMask2 = finalizersMask;
var sequentialFinalizers2 = sequentialFinalizers;
var scope3 = scope;
var scopeWith2 = scopeWith;
var scoped2 = scopedEffect;
var using2 = using;
var withEarlyRelease2 = withEarlyRelease;
var awaitAllChildren2 = awaitAllChildren;
var daemonChildren2 = daemonChildren;
var descriptor2 = descriptor;
var descriptorWith2 = descriptorWith;
var diffFiberRefs2 = diffFiberRefs;
var ensuringChild2 = ensuringChild;
var ensuringChildren2 = ensuringChildren;
var fiberId2 = fiberId;
var fiberIdWith2 = fiberIdWith;
var fork3 = fork;
var forkDaemon2 = forkDaemon;
var forkAll2 = forkAll;
var forkIn2 = forkIn;
var forkScoped2 = forkScoped;
var forkWithErrorHandler2 = forkWithErrorHandler;
var fromFiber2 = fromFiber;
var fromFiberEffect2 = fromFiberEffect;
var supervised2 = supervised;
var transplant2 = transplant;
var withConcurrency2 = withConcurrency;
var withScheduler2 = withScheduler;
var withSchedulingPriority2 = withSchedulingPriority;
var withMaxOpsBeforeYield2 = withMaxOpsBeforeYield;
var clock2 = clock;
var clockWith4 = clockWith3;
var withClockScoped2 = withClockScoped;
var withClock2 = withClock;
var console3 = console2;
var consoleWith2 = consoleWith;
var withConsoleScoped2 = withConsoleScoped;
var withConsole2 = withConsole;
var delay2 = delay;
var sleep4 = sleep3;
var timed2 = timed;
var timedWith2 = timedWith;
var timeout2 = timeout;
var timeoutOption2 = timeoutOption;
var timeoutFail2 = timeoutFail;
var timeoutFailCause2 = timeoutFailCause;
var timeoutTo2 = timeoutTo;
var configProviderWith2 = configProviderWith;
var withConfigProvider2 = withConfigProvider;
var withConfigProviderScoped2 = withConfigProviderScoped;
var context3 = context;
var contextWith2 = contextWith;
var contextWithEffect2 = contextWithEffect;
var mapInputContext2 = mapInputContext;
var provide2 = effect_provide;
var provideService2 = provideService;
var provideServiceEffect2 = provideServiceEffect;
var serviceFunction2 = serviceFunction;
var serviceFunctionEffect2 = serviceFunctionEffect;
var serviceFunctions2 = serviceFunctions;
var serviceConstants2 = serviceConstants;
var serviceMembers2 = serviceMembers;
var serviceOption2 = serviceOption;
var serviceOptional2 = serviceOptional;
var updateService2 = updateService;
var Do2 = Do;
var bind3 = bind2;
var bindTo3 = bindTo2;
var let_3 = let_2;
var either3 = either2;
var exit3 = exit;
var intoDeferred2 = intoDeferred;
var option2 = option;
var if_2 = if_;
var filterOrDie2 = filterOrDie;
var filterOrDieMessage2 = filterOrDieMessage;
var filterOrElse2 = filterOrElse;
var filterOrFail2 = filterOrFail;
var unless2 = unless;
var unlessEffect2 = unlessEffect;
var when2 = when;
var whenEffect2 = whenEffect;
var whenFiberRef2 = whenFiberRef;
var whenRef2 = whenRef;
var flatMap10 = flatMap7;
var andThen6 = andThen2;
var flatten7 = flatten4;
var raceAll2 = raceAll;
var race2 = race;
var raceFirst2 = raceFirst;
var raceWith2 = raceWith;
var summarized2 = summarized;
var tap3 = tap;
var tapBoth2 = tapBoth;
var tapDefect2 = tapDefect;
var tapError3 = tapError;
var tapErrorTag2 = tapErrorTag;
var tapErrorCause3 = tapErrorCause;
var forever3 = forever;
var iterate2 = iterate;
var loop2 = loop;
var repeat = repeat_combined;
var repeatN2 = repeatN;
var repeatOrElse = repeatOrElse_Effect;
var schedule = schedule_Effect;
var scheduleForked2 = scheduleForked;
var scheduleFrom = scheduleFrom_Effect;
var whileLoop2 = whileLoop;
var getFiberRefs = fiberRefs2;
var inheritFiberRefs2 = inheritFiberRefs;
var locally2 = fiberRefLocally;
var locallyWith = fiberRefLocallyWith;
var locallyScoped = fiberRefLocallyScoped;
var locallyScopedWith = fiberRefLocallyScopedWith;
var patchFiberRefs2 = patchFiberRefs;
var setFiberRefs2 = setFiberRefs;
var updateFiberRefs2 = updateFiberRefs;
var isFailure4 = isFailure2;
var isSuccess2 = isSuccess;
var match9 = match5;
var matchCause3 = matchCause;
var matchCauseEffect2 = matchCauseEffect;
var matchEffect2 = matchEffect;
var log2 = log;
var logWithLevel2 = (level, ...message) => logWithLevel(level)(...message);
var logTrace2 = logTrace;
var logDebug2 = logDebug;
var logInfo2 = logInfo;
var logWarning2 = logWarning;
var logError2 = logError;
var logFatal2 = logFatal;
var withLogSpan2 = withLogSpan;
var annotateLogs3 = annotateLogs;
var annotateLogsScoped2 = annotateLogsScoped;
var logAnnotations2 = logAnnotations;
var withUnhandledErrorLogLevel2 = withUnhandledErrorLogLevel;
var orDie3 = orDie;
var orDieWith2 = orDieWith;
var orElse4 = orElse;
var orElseFail2 = orElseFail;
var orElseSucceed2 = orElseSucceed;
var random3 = random2;
var randomWith2 = randomWith;
var withRandom2 = withRandom;
var withRandomScoped2 = withRandomScoped;
var runtime3 = runtime2;
var getRuntimeFlags = runtimeFlags;
var patchRuntimeFlags = updateRuntimeFlags;
var withRuntimeFlagsPatch = withRuntimeFlags;
var withRuntimeFlagsPatchScoped = withRuntimeFlagsScoped;
var tagMetrics2 = tagMetrics;
var labelMetrics2 = labelMetrics;
var tagMetricsScoped2 = tagMetricsScoped;
var labelMetricsScoped2 = labelMetricsScoped;
var metricLabels2 = metricLabels;
var withMetric2 = withMetric;
var unsafeMakeSemaphore2 = unsafeMakeSemaphore;
var makeSemaphore2 = makeSemaphore;
var runFork = unsafeForkEffect;
var runCallback = unsafeRunEffect;
var runPromise = unsafeRunPromiseEffect;
var runPromiseExit = unsafeRunPromiseExitEffect;
var runSync = unsafeRunSyncEffect;
var runSyncExit = unsafeRunSyncExitEffect;
var validate2 = validate;
var validateWith2 = validateWith;
var zip5 = zipOptions;
var zipLeft3 = zipLeftOptions;
var zipRight3 = zipRightOptions;
var zipWith4 = zipWithOptions;
var ap = /* @__PURE__ */ dual(2, (self2, that) => zipWith4(self2, that, (f, a) => f(a)));
var blocked2 = blocked;
var runRequestBlock2 = runRequestBlock;
var step3 = step2;
var request = /* @__PURE__ */ dual((args) => isRequest2(args[0]), fromRequest);
var cacheRequestResult = cacheRequest;
var withRequestBatching2 = withRequestBatching;
var withRequestCaching2 = withRequestCaching;
var withRequestCache2 = withRequestCache;
var tracer2 = tracer;
var tracerWith4 = tracerWith;
var withTracer2 = withTracer;
var withTracerScoped2 = withTracerScoped;
var withTracerEnabled2 = withTracerEnabled;
var withTracerTiming2 = withTracerTiming;
var annotateSpans3 = annotateSpans;
var annotateCurrentSpan2 = annotateCurrentSpan;
var currentSpan2 = currentSpan;
var currentParentSpan2 = currentParentSpan;
var spanAnnotations2 = spanAnnotations;
var spanLinks2 = spanLinks;
var linkSpans2 = linkSpans;
var makeSpan2 = makeSpan;
var makeSpanScoped2 = makeSpanScoped;
var useSpan2 = useSpan;
var withSpan3 = withSpan;
var functionWithSpan2 = functionWithSpan;
var withSpanScoped2 = withSpanScoped;
var withParentSpan3 = withParentSpan;
var fromNullable3 = fromNullable2;
var optionFromOptional2 = optionFromOptional;
var Tag3 = (id) => () => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 2;
  const creationError = new Error();
  Error.stackTraceLimit = limit;
  function TagClass() {
  }
  Object.setPrototypeOf(TagClass, TagProto);
  TagClass.key = id;
  Object.defineProperty(TagClass, "stack", {
    get() {
      return creationError.stack;
    }
  });
  const cache = /* @__PURE__ */ new Map();
  const done7 = new Proxy(TagClass, {
    get(_target, prop, _receiver) {
      if (prop === "use") {
        return (body) => andThen2(TagClass, body);
      }
      if (prop in TagClass) {
        return TagClass[prop];
      }
      if (cache.has(prop)) {
        return cache.get(prop);
      }
      const fn = (...args) => (
        // @ts-expect-error
        andThen2(TagClass, (s) => {
          if (typeof s[prop] === "function") {
            cache.set(prop, (...args2) => andThen2(TagClass, (s2) => s2[prop](...args2)));
            return s[prop](...args);
          }
          cache.set(prop, andThen2(TagClass, (s2) => s2[prop]));
          return s[prop];
        })
      );
      const cn = andThen2(TagClass, (s) => s[prop]);
      Object.assign(fn, cn);
      Object.setPrototypeOf(fn, Object.getPrototypeOf(cn));
      cache.set(prop, fn);
      return fn;
    }
  });
  return done7;
};

// node_modules/effect/dist/esm/Layer.js
var Layer_exports = {};
__export(Layer_exports, {
  LayerTypeId: () => LayerTypeId2,
  MemoMapTypeId: () => MemoMapTypeId2,
  annotateLogs: () => annotateLogs4,
  annotateSpans: () => annotateSpans4,
  build: () => build2,
  buildWithMemoMap: () => buildWithMemoMap2,
  buildWithScope: () => buildWithScope2,
  catchAll: () => catchAll4,
  catchAllCause: () => catchAllCause4,
  context: () => context4,
  die: () => die6,
  dieSync: () => dieSync4,
  discard: () => discard2,
  effect: () => effect,
  effectContext: () => effectContext,
  effectDiscard: () => effectDiscard,
  empty: () => empty31,
  extendScope: () => extendScope2,
  fail: () => fail7,
  failCause: () => failCause5,
  failCauseSync: () => failCauseSync4,
  failSync: () => failSync4,
  fiberRefLocallyScopedWith: () => fiberRefLocallyScopedWith3,
  flatMap: () => flatMap11,
  flatten: () => flatten8,
  fresh: () => fresh2,
  function: () => fromFunction2,
  isFresh: () => isFresh2,
  isLayer: () => isLayer2,
  launch: () => launch2,
  locally: () => locally3,
  locallyEffect: () => locallyEffect2,
  locallyScoped: () => locallyScoped2,
  locallyWith: () => locallyWith2,
  makeMemoMap: () => makeMemoMap2,
  map: () => map14,
  mapError: () => mapError4,
  match: () => match10,
  matchCause: () => matchCause4,
  memoize: () => memoize3,
  merge: () => merge8,
  mergeAll: () => mergeAll4,
  orDie: () => orDie4,
  orElse: () => orElse5,
  parentSpan: () => parentSpan2,
  passthrough: () => passthrough3,
  project: () => project2,
  provide: () => provide3,
  provideMerge: () => provideMerge2,
  retry: () => retry3,
  scope: () => scope4,
  scoped: () => scoped3,
  scopedContext: () => scopedContext2,
  scopedDiscard: () => scopedDiscard2,
  service: () => service2,
  setClock: () => setClock,
  setConfigProvider: () => setConfigProvider2,
  setRequestBatching: () => setRequestBatching,
  setRequestCache: () => setRequestCache,
  setRequestCaching: () => setRequestCaching,
  setScheduler: () => setScheduler,
  setTracer: () => setTracer2,
  setTracerEnabled: () => setTracerEnabled,
  setTracerTiming: () => setTracerTiming,
  setUnhandledErrorLogLevel: () => setUnhandledErrorLogLevel,
  span: () => span3,
  succeed: () => succeed8,
  succeedContext: () => succeedContext2,
  suspend: () => suspend5,
  sync: () => sync6,
  syncContext: () => syncContext2,
  tap: () => tap4,
  tapError: () => tapError4,
  tapErrorCause: () => tapErrorCause4,
  toRuntime: () => toRuntime2,
  toRuntimeWithMemoMap: () => toRuntimeWithMemoMap2,
  unwrapEffect: () => unwrapEffect2,
  unwrapScoped: () => unwrapScoped2,
  withParentSpan: () => withParentSpan4,
  withSpan: () => withSpan4,
  zipWith: () => zipWith5
});

// node_modules/effect/dist/esm/internal/layer/circular.js
var minimumLogLevel = (level) => scopedDiscard(fiberRefLocallyScoped(currentMinimumLogLevel, level));
var withMinimumLogLevel = /* @__PURE__ */ dual(2, (self2, level) => fiberRefLocally(currentMinimumLogLevel, level)(self2));
var addLogger = (logger) => scopedDiscard(fiberRefLocallyScopedWith(currentLoggers, add4(logger)));
var addLoggerEffect = (effect2) => unwrapEffect(map8(effect2, addLogger));
var addLoggerScoped = (effect2) => unwrapScoped(map8(effect2, addLogger));
var removeLogger = (logger) => scopedDiscard(fiberRefLocallyScopedWith(currentLoggers, remove4(logger)));
var replaceLogger = /* @__PURE__ */ dual(2, (self2, that) => flatMap9(removeLogger(self2), () => addLogger(that)));
var replaceLoggerEffect = /* @__PURE__ */ dual(2, (self2, that) => flatMap9(removeLogger(self2), () => addLoggerEffect(that)));
var replaceLoggerScoped = /* @__PURE__ */ dual(2, (self2, that) => flatMap9(removeLogger(self2), () => addLoggerScoped(that)));
var setConfigProvider = (configProvider) => scopedDiscard(withConfigProviderScoped(configProvider));
var parentSpan = (span4) => succeedContext(make6(spanTag, span4));
var span2 = (name, options) => {
  options = addSpanStackTrace(options);
  return scoped(spanTag, options?.onEnd ? tap(makeSpanScoped(name, options), (span4) => addFinalizer((exit4) => options.onEnd(span4, exit4))) : makeSpanScoped(name, options));
};
var setTracer = (tracer3) => scopedDiscard(withTracerScoped(tracer3));

// node_modules/effect/dist/esm/Layer.js
var LayerTypeId2 = LayerTypeId;
var MemoMapTypeId2 = MemoMapTypeId;
var isLayer2 = isLayer;
var isFresh2 = isFresh;
var annotateLogs4 = annotateLogs2;
var annotateSpans4 = annotateSpans2;
var build2 = build;
var buildWithScope2 = buildWithScope;
var catchAll4 = catchAll2;
var catchAllCause4 = catchAllCause2;
var context4 = context2;
var die6 = die4;
var dieSync4 = dieSync2;
var discard2 = discard;
var effect = fromEffect2;
var effectDiscard = fromEffectDiscard;
var effectContext = fromEffectContext;
var empty31 = empty30;
var extendScope2 = extendScope;
var fail7 = fail4;
var failSync4 = failSync2;
var failCause5 = failCause2;
var failCauseSync4 = failCauseSync2;
var flatMap11 = flatMap9;
var flatten8 = flatten6;
var fresh2 = fresh;
var fromFunction2 = fromFunction;
var launch2 = launch;
var map14 = map12;
var mapError4 = mapError2;
var match10 = match8;
var matchCause4 = matchCause2;
var memoize3 = memoize2;
var merge8 = merge6;
var mergeAll4 = mergeAll2;
var orDie4 = orDie2;
var orElse5 = orElse3;
var passthrough3 = passthrough2;
var project2 = project;
var locallyEffect2 = locallyEffect;
var locally3 = fiberRefLocally2;
var locallyWith2 = fiberRefLocallyWith2;
var locallyScoped2 = fiberRefLocallyScoped2;
var fiberRefLocallyScopedWith3 = fiberRefLocallyScopedWith2;
var retry3 = retry;
var scope4 = scope2;
var scoped3 = scoped;
var scopedDiscard2 = scopedDiscard;
var scopedContext2 = scopedContext;
var service2 = service;
var succeed8 = succeed5;
var succeedContext2 = succeedContext;
var suspend5 = suspend3;
var sync6 = sync4;
var syncContext2 = syncContext;
var tap4 = tap2;
var tapError4 = tapError2;
var tapErrorCause4 = tapErrorCause2;
var toRuntime2 = toRuntime;
var toRuntimeWithMemoMap2 = toRuntimeWithMemoMap;
var provide3 = provide;
var provideMerge2 = provideMerge;
var zipWith5 = zipWith3;
var unwrapEffect2 = unwrapEffect;
var unwrapScoped2 = unwrapScoped;
var setClock = (clock3) => scopedDiscard2(fiberRefLocallyScopedWith(currentServices, add2(clockTag, clock3)));
var setConfigProvider2 = setConfigProvider;
var parentSpan2 = parentSpan;
var setRequestBatching = (requestBatching) => scopedDiscard2(fiberRefLocallyScoped(currentRequestBatching, requestBatching));
var setRequestCaching = (requestCaching) => scopedDiscard2(fiberRefLocallyScoped(currentCacheEnabled, requestCaching));
var setRequestCache = (cache) => scopedDiscard2(isEffect(cache) ? flatMap7(cache, (x) => fiberRefLocallyScoped(currentCache, x)) : fiberRefLocallyScoped(currentCache, cache));
var setScheduler = (scheduler) => scopedDiscard2(fiberRefLocallyScoped(currentScheduler2, scheduler));
var span3 = span2;
var setTracer2 = setTracer;
var setTracerEnabled = (enabled2) => scopedDiscard2(fiberRefLocallyScoped(currentTracerEnabled, enabled2));
var setTracerTiming = (enabled2) => scopedDiscard2(fiberRefLocallyScoped(currentTracerTimingEnabled, enabled2));
var setUnhandledErrorLogLevel = (level) => scopedDiscard2(fiberRefLocallyScoped(currentUnhandledErrorLogLevel, level));
var withSpan4 = withSpan2;
var withParentSpan4 = withParentSpan2;
var makeMemoMap2 = makeMemoMap;
var buildWithMemoMap2 = buildWithMemoMap;

// node_modules/effect/dist/esm/Config.js
var Config_exports = {};
__export(Config_exports, {
  ConfigTypeId: () => ConfigTypeId2,
  all: () => all6,
  array: () => array4,
  boolean: () => boolean2,
  chunk: () => chunk3,
  date: () => date2,
  duration: () => duration2,
  fail: () => fail9,
  hashMap: () => hashMap3,
  hashSet: () => hashSet3,
  integer: () => integer2,
  isConfig: () => isConfig2,
  literal: () => literal2,
  logLevel: () => logLevel2,
  map: () => map16,
  mapAttempt: () => mapAttempt2,
  mapOrFail: () => mapOrFail2,
  nested: () => nested4,
  number: () => number4,
  option: () => option4,
  orElse: () => orElse7,
  orElseIf: () => orElseIf2,
  primitive: () => primitive2,
  redacted: () => redacted2,
  repeat: () => repeat3,
  secret: () => secret2,
  string: () => string3,
  succeed: () => succeed10,
  suspend: () => suspend7,
  sync: () => sync8,
  unwrap: () => unwrap2,
  validate: () => validate4,
  withDefault: () => withDefault2,
  withDescription: () => withDescription2,
  zip: () => zip7,
  zipWith: () => zipWith7
});

// node_modules/effect/dist/esm/ConfigError.js
var ConfigError_exports = {};
__export(ConfigError_exports, {
  And: () => And2,
  ConfigErrorTypeId: () => ConfigErrorTypeId2,
  InvalidData: () => InvalidData2,
  MissingData: () => MissingData2,
  Or: () => Or2,
  SourceUnavailable: () => SourceUnavailable2,
  Unsupported: () => Unsupported2,
  isAnd: () => isAnd2,
  isConfigError: () => isConfigError2,
  isInvalidData: () => isInvalidData2,
  isMissingData: () => isMissingData2,
  isMissingDataOnly: () => isMissingDataOnly2,
  isOr: () => isOr2,
  isSourceUnavailable: () => isSourceUnavailable2,
  isUnsupported: () => isUnsupported2,
  prefixed: () => prefixed2,
  reduceWithContext: () => reduceWithContext3
});
var ConfigErrorTypeId2 = ConfigErrorTypeId;
var And2 = And;
var Or2 = Or;
var MissingData2 = MissingData;
var InvalidData2 = InvalidData;
var SourceUnavailable2 = SourceUnavailable;
var Unsupported2 = Unsupported;
var isConfigError2 = isConfigError;
var isAnd2 = isAnd;
var isOr2 = isOr;
var isInvalidData2 = isInvalidData;
var isMissingData2 = isMissingData;
var isMissingDataOnly2 = isMissingDataOnly;
var isSourceUnavailable2 = isSourceUnavailable;
var isUnsupported2 = isUnsupported;
var prefixed2 = prefixed;
var reduceWithContext3 = reduceWithContext2;

// node_modules/effect/dist/esm/internal/redacted.js
var RedactedSymbolKey = "effect/Redacted";
var redactedRegistry = /* @__PURE__ */ globalValue("effect/Redacted/redactedRegistry", () => /* @__PURE__ */ new WeakMap());
var RedactedTypeId = /* @__PURE__ */ Symbol.for(RedactedSymbolKey);
var proto4 = {
  [RedactedTypeId]: {
    _A: (_) => _
  },
  pipe() {
    return pipeArguments(this, arguments);
  },
  toString() {
    return "<redacted>";
  },
  toJSON() {
    return "<redacted>";
  },
  [symbol]() {
    return pipe(hash(RedactedSymbolKey), combine(hash(redactedRegistry.get(this))), cached(this));
  },
  [symbol2](that) {
    return isRedacted(that) && equals(redactedRegistry.get(this), redactedRegistry.get(that));
  }
};
var isRedacted = (u) => hasProperty(u, RedactedTypeId);
var make40 = (value3) => {
  const redacted3 = Object.create(proto4);
  redactedRegistry.set(redacted3, value3);
  return redacted3;
};
var value = (self2) => {
  if (redactedRegistry.has(self2)) {
    return redactedRegistry.get(self2);
  } else {
    throw new Error("Unable to get redacted value");
  }
};
var unsafeWipe = (self2) => redactedRegistry.delete(self2);

// node_modules/effect/dist/esm/internal/secret.js
var SecretSymbolKey = "effect/Secret";
var SecretTypeId = /* @__PURE__ */ Symbol.for(SecretSymbolKey);
var make41 = (bytes) => {
  const secret3 = /* @__PURE__ */ Object.create({
    ...proto4,
    [SecretTypeId]: SecretTypeId
  });
  Object.defineProperty(secret3, "toString", {
    enumerable: false,
    value() {
      return "Secret(<redacted>)";
    }
  });
  Object.defineProperty(secret3, "toJSON", {
    enumerable: false,
    value() {
      return "<redacted>";
    }
  });
  Object.defineProperty(secret3, "raw", {
    enumerable: false,
    value: bytes
  });
  redactedRegistry.set(secret3, bytes.map((byte) => String.fromCharCode(byte)).join(""));
  return secret3;
};
var fromString = (text) => {
  return make41(text.split("").map((char) => char.charCodeAt(0)));
};

// node_modules/effect/dist/esm/internal/config.js
var ConfigSymbolKey = "effect/Config";
var ConfigTypeId = /* @__PURE__ */ Symbol.for(ConfigSymbolKey);
var configVariance = {
  /* c8 ignore next */
  _A: (_) => _
};
var proto5 = {
  ...CommitPrototype,
  [ConfigTypeId]: configVariance,
  commit() {
    return config(this);
  }
};
var boolean = (name) => {
  const config2 = primitive("a boolean property", (text) => {
    switch (text) {
      case "true":
      case "yes":
      case "on":
      case "1": {
        return right2(true);
      }
      case "false":
      case "no":
      case "off":
      case "0": {
        return right2(false);
      }
      default: {
        const error = InvalidData([], `Expected a boolean value but received ${text}`);
        return left2(error);
      }
    }
  });
  return name === void 0 ? config2 : nested3(config2, name);
};
var array3 = (config2, name) => {
  return pipe(chunk2(config2, name), map15(toArray2));
};
var chunk2 = (config2, name) => {
  return map15(name === void 0 ? repeat2(config2) : nested3(repeat2(config2), name), unsafeFromArray);
};
var date = (name) => {
  const config2 = primitive("a date property", (text) => {
    const result = Date.parse(text);
    if (Number.isNaN(result)) {
      return left2(InvalidData([], `Expected a Date value but received ${text}`));
    }
    return right2(new Date(result));
  });
  return name === void 0 ? config2 : nested3(config2, name);
};
var fail8 = (message) => {
  const fail10 = Object.create(proto5);
  fail10._tag = OP_FAIL2;
  fail10.message = message;
  fail10.parse = () => left2(Unsupported([], message));
  return fail10;
};
var number3 = (name) => {
  const config2 = primitive("a number property", (text) => {
    const result = Number.parseFloat(text);
    if (Number.isNaN(result)) {
      return left2(InvalidData([], `Expected a number value but received ${text}`));
    }
    return right2(result);
  });
  return name === void 0 ? config2 : nested3(config2, name);
};
var integer = (name) => {
  const config2 = primitive("an integer property", (text) => {
    const result = Number.parseInt(text, 10);
    if (Number.isNaN(result)) {
      return left2(InvalidData([], `Expected an integer value but received ${text}`));
    }
    return right2(result);
  });
  return name === void 0 ? config2 : nested3(config2, name);
};
var literal = (...literals) => (name) => {
  const valuesString = literals.map(String).join(", ");
  const config2 = primitive(`one of (${valuesString})`, (text) => {
    const found = literals.find((value3) => String(value3) === text);
    if (found === void 0) {
      return left2(InvalidData([], `Expected one of (${valuesString}) but received ${text}`));
    }
    return right2(found);
  });
  return name === void 0 ? config2 : nested3(config2, name);
};
var logLevel = (name) => {
  const config2 = mapOrFail(string2(), (value3) => {
    const label = value3.toUpperCase();
    const level = allLogLevels.find((level2) => level2.label === label);
    return level === void 0 ? left2(InvalidData([], `Expected a log level but received ${value3}`)) : right2(level);
  });
  return name === void 0 ? config2 : nested3(config2, name);
};
var duration = (name) => {
  const config2 = mapOrFail(string2(), (value3) => {
    const duration3 = decodeUnknown(value3);
    return fromOption2(duration3, () => InvalidData([], `Expected a duration but received ${value3}`));
  });
  return name === void 0 ? config2 : nested3(config2, name);
};
var map15 = /* @__PURE__ */ dual(2, (self2, f) => mapOrFail(self2, (a) => right2(f(a))));
var mapAttempt = /* @__PURE__ */ dual(2, (self2, f) => mapOrFail(self2, (a) => {
  try {
    return right2(f(a));
  } catch (error) {
    return left2(InvalidData([], error instanceof Error ? error.message : `${error}`));
  }
}));
var mapOrFail = /* @__PURE__ */ dual(2, (self2, f) => {
  const mapOrFail3 = Object.create(proto5);
  mapOrFail3._tag = OP_MAP_OR_FAIL;
  mapOrFail3.original = self2;
  mapOrFail3.mapOrFail = f;
  return mapOrFail3;
});
var nested3 = /* @__PURE__ */ dual(2, (self2, name) => {
  const nested7 = Object.create(proto5);
  nested7._tag = OP_NESTED;
  nested7.name = name;
  nested7.config = self2;
  return nested7;
});
var orElse6 = /* @__PURE__ */ dual(2, (self2, that) => {
  const fallback = Object.create(proto5);
  fallback._tag = OP_FALLBACK;
  fallback.first = self2;
  fallback.second = suspend6(that);
  fallback.condition = constTrue;
  return fallback;
});
var orElseIf = /* @__PURE__ */ dual(2, (self2, options) => {
  const fallback = Object.create(proto5);
  fallback._tag = OP_FALLBACK;
  fallback.first = self2;
  fallback.second = suspend6(options.orElse);
  fallback.condition = options.if;
  return fallback;
});
var option3 = (self2) => {
  return pipe(self2, map15(some2), orElseIf({
    orElse: () => succeed9(none2()),
    if: isMissingDataOnly2
  }));
};
var primitive = (description, parse2) => {
  const primitive3 = Object.create(proto5);
  primitive3._tag = OP_PRIMITIVE;
  primitive3.description = description;
  primitive3.parse = parse2;
  return primitive3;
};
var repeat2 = (self2) => {
  const repeat4 = Object.create(proto5);
  repeat4._tag = OP_SEQUENCE;
  repeat4.config = self2;
  return repeat4;
};
var secret = (name) => {
  const config2 = primitive("a secret property", (text) => right2(fromString(text)));
  return name === void 0 ? config2 : nested3(config2, name);
};
var redacted = (name) => {
  const config2 = primitive("a redacted property", (text) => right2(make40(text)));
  return name === void 0 ? config2 : nested3(config2, name);
};
var hashSet2 = (config2, name) => {
  const newConfig = map15(chunk2(config2), fromIterable5);
  return name === void 0 ? newConfig : nested3(newConfig, name);
};
var string2 = (name) => {
  const config2 = primitive("a text property", right2);
  return name === void 0 ? config2 : nested3(config2, name);
};
var all5 = (arg) => {
  if (Array.isArray(arg)) {
    return tuple(arg);
  } else if (Symbol.iterator in arg) {
    return tuple([...arg]);
  }
  return struct2(arg);
};
var struct2 = (r) => {
  const entries2 = Object.entries(r);
  let result = pipe(entries2[0][1], map15((value3) => ({
    [entries2[0][0]]: value3
  })));
  if (entries2.length === 1) {
    return result;
  }
  const rest = entries2.slice(1);
  for (const [key, config2] of rest) {
    result = pipe(result, zipWith6(config2, (record, value3) => ({
      ...record,
      [key]: value3
    })));
  }
  return result;
};
var succeed9 = (value3) => {
  const constant2 = Object.create(proto5);
  constant2._tag = OP_CONSTANT;
  constant2.value = value3;
  constant2.parse = () => right2(value3);
  return constant2;
};
var suspend6 = (config2) => {
  const lazy = Object.create(proto5);
  lazy._tag = OP_LAZY;
  lazy.config = config2;
  return lazy;
};
var sync7 = (value3) => {
  return suspend6(() => succeed9(value3()));
};
var hashMap2 = (config2, name) => {
  const table = Object.create(proto5);
  table._tag = OP_HASHMAP;
  table.valueConfig = config2;
  return name === void 0 ? table : nested3(table, name);
};
var isConfig = (u) => hasProperty(u, ConfigTypeId);
var tuple = (tuple2) => {
  if (tuple2.length === 0) {
    return succeed9([]);
  }
  if (tuple2.length === 1) {
    return map15(tuple2[0], (x) => [x]);
  }
  let result = map15(tuple2[0], (x) => [x]);
  for (let i = 1; i < tuple2.length; i++) {
    const config2 = tuple2[i];
    result = pipe(result, zipWith6(config2, (tuple3, value3) => [...tuple3, value3]));
  }
  return result;
};
var unwrap = (wrapped) => {
  if (isConfig(wrapped)) {
    return wrapped;
  }
  return struct2(Object.fromEntries(Object.entries(wrapped).map(([k, a]) => [k, unwrap(a)])));
};
var validate3 = /* @__PURE__ */ dual(2, (self2, {
  message,
  validation
}) => mapOrFail(self2, (a) => {
  if (validation(a)) {
    return right2(a);
  }
  return left2(InvalidData([], message));
}));
var withDefault = /* @__PURE__ */ dual(2, (self2, def) => orElseIf(self2, {
  orElse: () => succeed9(def),
  if: isMissingDataOnly2
}));
var withDescription = /* @__PURE__ */ dual(2, (self2, description) => {
  const described = Object.create(proto5);
  described._tag = OP_DESCRIBED;
  described.config = self2;
  described.description = description;
  return described;
});
var zip6 = /* @__PURE__ */ dual(2, (self2, that) => zipWith6(self2, that, (a, b) => [a, b]));
var zipWith6 = /* @__PURE__ */ dual(3, (self2, that, f) => {
  const zipWith8 = Object.create(proto5);
  zipWith8._tag = OP_ZIP_WITH;
  zipWith8.left = self2;
  zipWith8.right = that;
  zipWith8.zip = f;
  return zipWith8;
});

// node_modules/effect/dist/esm/Config.js
var ConfigTypeId2 = ConfigTypeId;
var all6 = all5;
var array4 = array3;
var boolean2 = boolean;
var chunk3 = chunk2;
var date2 = date;
var fail9 = fail8;
var number4 = number3;
var integer2 = integer;
var literal2 = literal;
var logLevel2 = logLevel;
var duration2 = duration;
var isConfig2 = isConfig;
var map16 = map15;
var mapAttempt2 = mapAttempt;
var mapOrFail2 = mapOrFail;
var nested4 = nested3;
var orElse7 = orElse6;
var orElseIf2 = orElseIf;
var option4 = option3;
var primitive2 = primitive;
var repeat3 = repeat2;
var secret2 = secret;
var redacted2 = redacted;
var hashSet3 = hashSet2;
var string3 = string2;
var succeed10 = succeed9;
var suspend7 = suspend6;
var sync8 = sync7;
var hashMap3 = hashMap2;
var unwrap2 = unwrap;
var validate4 = validate3;
var withDefault2 = withDefault;
var withDescription2 = withDescription;
var zip7 = zip6;
var zipWith7 = zipWith6;

// node_modules/effect/dist/esm/ConfigProvider.js
var ConfigProvider_exports = {};
__export(ConfigProvider_exports, {
  ConfigProvider: () => ConfigProvider,
  ConfigProviderTypeId: () => ConfigProviderTypeId2,
  FlatConfigProviderTypeId: () => FlatConfigProviderTypeId2,
  constantCase: () => constantCase3,
  fromEnv: () => fromEnv2,
  fromFlat: () => fromFlat2,
  fromJson: () => fromJson2,
  fromMap: () => fromMap2,
  kebabCase: () => kebabCase3,
  lowerCase: () => lowerCase3,
  make: () => make42,
  makeFlat: () => makeFlat2,
  mapInputPath: () => mapInputPath2,
  nested: () => nested5,
  orElse: () => orElse8,
  snakeCase: () => snakeCase3,
  unnested: () => unnested3,
  upperCase: () => upperCase3,
  within: () => within2
});
var ConfigProviderTypeId2 = ConfigProviderTypeId;
var FlatConfigProviderTypeId2 = FlatConfigProviderTypeId;
var ConfigProvider = configProviderTag;
var make42 = make22;
var makeFlat2 = makeFlat;
var fromEnv2 = fromEnv;
var fromFlat2 = fromFlat;
var fromJson2 = fromJson;
var fromMap2 = fromMap;
var constantCase3 = constantCase2;
var mapInputPath2 = mapInputPath;
var kebabCase3 = kebabCase2;
var lowerCase3 = lowerCase2;
var nested5 = nested2;
var orElse8 = orElse2;
var unnested3 = unnested2;
var snakeCase3 = snakeCase2;
var upperCase3 = upperCase2;
var within2 = within;

// node_modules/effect/dist/esm/ConfigProviderPathPatch.js
var ConfigProviderPathPatch_exports = {};
__export(ConfigProviderPathPatch_exports, {
  andThen: () => andThen7,
  empty: () => empty32,
  mapName: () => mapName2,
  nested: () => nested6,
  unnested: () => unnested4
});
var empty32 = empty19;
var andThen7 = andThen3;
var mapName2 = mapName;
var nested6 = nested;
var unnested4 = unnested;

// node_modules/effect/dist/esm/Logger.js
var Logger_exports = {};
__export(Logger_exports, {
  LoggerTypeId: () => LoggerTypeId2,
  add: () => add6,
  addEffect: () => addEffect,
  addScoped: () => addScoped,
  batched: () => batched,
  defaultLogger: () => defaultLogger2,
  filterLogLevel: () => filterLogLevel2,
  isLogger: () => isLogger2,
  json: () => json,
  jsonLogger: () => jsonLogger3,
  logFmt: () => logFmt,
  logfmtLogger: () => logfmtLogger2,
  make: () => make43,
  map: () => map17,
  mapInput: () => mapInput4,
  mapInputOptions: () => mapInputOptions2,
  minimumLogLevel: () => minimumLogLevel2,
  none: () => none10,
  pretty: () => pretty2,
  prettyLogger: () => prettyLogger3,
  remove: () => remove8,
  replace: () => replace2,
  replaceEffect: () => replaceEffect,
  replaceScoped: () => replaceScoped,
  simple: () => simple2,
  stringLogger: () => stringLogger2,
  structured: () => structured,
  structuredLogger: () => structuredLogger3,
  succeed: () => succeed11,
  sync: () => sync9,
  test: () => test2,
  tracerLogger: () => tracerLogger2,
  withConsoleError: () => withConsoleError,
  withConsoleLog: () => withConsoleLog,
  withMinimumLogLevel: () => withMinimumLogLevel2,
  withSpanAnnotations: () => withSpanAnnotations,
  zip: () => zip8,
  zipLeft: () => zipLeft4,
  zipRight: () => zipRight4
});

// node_modules/effect/dist/esm/internal/logger-circular.js
var test = /* @__PURE__ */ dual(2, (self2, input) => self2.log({
  fiberId: none3,
  logLevel: logLevelInfo,
  message: input,
  cause: empty26,
  context: empty20(),
  spans: empty9(),
  annotations: empty8(),
  date: /* @__PURE__ */ new Date()
}));

// node_modules/effect/dist/esm/Logger.js
var LoggerTypeId2 = LoggerTypeId;
var make43 = makeLogger;
var add6 = addLogger;
var addEffect = addLoggerEffect;
var addScoped = addLoggerScoped;
var mapInput4 = mapInput3;
var mapInputOptions2 = mapInputOptions;
var filterLogLevel2 = filterLogLevel;
var map17 = map10;
var batched = batchedLogger;
var withConsoleLog = loggerWithConsoleLog;
var withConsoleError = loggerWithConsoleError;
var none10 = none7;
var remove8 = removeLogger;
var replace2 = replaceLogger;
var replaceEffect = replaceLoggerEffect;
var replaceScoped = replaceLoggerScoped;
var simple2 = simple;
var succeed11 = succeed4;
var sync9 = sync3;
var test2 = test;
var withMinimumLogLevel2 = withMinimumLogLevel;
var withSpanAnnotations = loggerWithSpanAnnotations;
var zip8 = zip3;
var zipLeft4 = zipLeft2;
var zipRight4 = zipRight2;
var defaultLogger2 = defaultLogger;
var jsonLogger3 = jsonLogger;
var logfmtLogger2 = logfmtLogger;
var stringLogger2 = stringLogger;
var prettyLogger3 = prettyLogger;
var structuredLogger3 = structuredLogger;
var tracerLogger2 = tracerLogger;
var json = /* @__PURE__ */ replace2(defaultLogger, jsonLogger2);
var logFmt = /* @__PURE__ */ replace2(defaultLogger, logFmtLogger);
var pretty2 = /* @__PURE__ */ replace2(defaultLogger, prettyLogger2);
var structured = /* @__PURE__ */ replace2(defaultLogger, structuredLogger2);
var minimumLogLevel2 = minimumLogLevel;
var isLogger2 = isLogger;

// node_modules/effect/dist/esm/Redacted.js
var Redacted_exports = {};
__export(Redacted_exports, {
  RedactedTypeId: () => RedactedTypeId2,
  getEquivalence: () => getEquivalence4,
  isRedacted: () => isRedacted2,
  make: () => make44,
  unsafeWipe: () => unsafeWipe2,
  value: () => value2
});
var RedactedTypeId2 = RedactedTypeId;
var isRedacted2 = isRedacted;
var make44 = make40;
var value2 = value;
var unsafeWipe2 = unsafeWipe;
var getEquivalence4 = (isEquivalent) => make((x, y) => isEquivalent(value2(x), value2(y)));

// src/error-handling.ts
var ActionError = class extends Error {
  title;
  messages;
  exit;
  constructor(params) {
    const fullMessage = [params.title, ...params.messages ?? []].join("\n    ");
    super(fullMessage, { cause: params.cause });
    this.title = params.title;
    this.messages = params.messages ?? [];
    this.exit = params.exit ?? "failure";
  }
};
function transformToActionError(title) {
  return (error) => {
    if (error instanceof Error) {
      return new ActionError({
        title,
        messages: [error.message],
        cause: error
      });
    }
    return new ActionError({
      title,
      messages: [error],
      cause: error
    });
  };
}

// src/services/github-client.ts
var github = __toESM(require_github());

// src/utils.ts
var objectEntriesUnsafe = Object.entries;
function tapLogTrace(message, transform2 = Function_exports.identity) {
  return Effect_exports.tap((value3) => {
    const transformedValue = transform2(value3);
    const traceMessages = Array.isArray(transformedValue) ? transformedValue : [transformedValue];
    return Effect_exports.logTrace(message, ...traceMessages);
  });
}

// src/services/inputs.ts
var Inputs = class extends Context_exports.Tag("Inputs")() {
};
var inputs = validateConfig({
  githubToken: Config_exports.redacted("github-token"),
  linearToken: Config_exports.redacted("linear-token").pipe(
    Config_exports.mapAttempt((linearToken) => {
      if (Redacted_exports.value(linearToken).startsWith("lin_api_")) {
        return {
          type: "personal-api-key",
          token: linearToken
        };
      }
      if (Redacted_exports.value(linearToken).startsWith("lin_oauth_")) {
        return {
          type: "oauth-access-token",
          token: linearToken
        };
      }
      throw new Error("Could not parse Linear token.");
    })
  ),
  linearCommentBody: Config_exports.string("linear-comment-body"),
  deployedCommitSha: Config_exports.string("deployed-commit-sha"),
  workflowRepository: Config_exports.string("workflow-repository").pipe(
    Config_exports.mapAttempt((ownerAndRepo) => {
      const match11 = /^([^/]+)\/([^/]+)$/.exec(ownerAndRepo);
      if (!match11) {
        throw new Error(`Could not parse owner and repo, received "${ownerAndRepo}"`);
      }
      return {
        owner: match11[1],
        repo: match11[2]
      };
    })
  ),
  workflowFileName: Config_exports.string("workflow-file-name").pipe(
    Config_exports.mapAttempt((value3) => {
      const match11 = /^.*?([^/]+\.ya?ml)(@.+)?$/.exec(value3);
      if (!match11) {
        throw new Error(`Could not parse file name, received "${value3}"`);
      }
      return match11[1];
    })
  ),
  workflowJobName: Config_exports.string("workflow-job-name"),
  isDryRun: Config_exports.boolean("dry-run"),
  logLevel: getLogLevelConfig({ shouldNotLogError: true })
}).pipe(
  Effect_exports.tap((inputs2) => Effect_exports.logDebug("Inputs", inputs2)),
  Effect_exports.mapError(
    (configErrors) => new ActionError({
      title: configErrors.length === 1 ? "There was an error with an input" : `There were ${configErrors.length} errors with inputs`,
      messages: configErrors.map(getConfigErrorMessage)
    })
  )
);
var InputsLive = Layer_exports.effect(Inputs, inputs);
function getLogLevelConfig(options) {
  return Config_exports.logLevel("log-level").pipe(
    recoverFromConfigErrorWithDefault(LogLevel_exports.Info, options)
  );
}
function validateConfig(config2) {
  const entries2 = objectEntriesUnsafe(config2);
  return Effect_exports.validateAll(entries2, (entry) => entry[1]).pipe(
    Effect_exports.map(
      (values3) => Object.fromEntries(entries2.map((entry, index) => [entry[0], values3[index]]))
    )
  );
}
function getConfigErrorMessage(error) {
  if (isMissingData2(error)) {
    return `Input "${error.path.join("-")}" is missing`;
  }
  if (isInvalidData2(error)) {
    return `Input "${error.path.join("-")}" is invalid: ${error.message}`;
  }
  throw new Error(`Unexpected error: ${error}`);
}
function recoverFromConfigErrorWithDefault(defaultValue, options = {}) {
  return Effect_exports.catchAll((configError) => {
    if (!isMissingData2(configError) && !isInvalidData2(configError)) {
      throw new Error(`Unexpected error: ${configError}`);
    }
    if (options.shouldNotLogError) {
      return Effect_exports.succeed(defaultValue);
    }
    const inputPath = configError.path.join("-");
    const stringifiedDefaultValue = typeof defaultValue === "string" || typeof defaultValue === "boolean" || typeof defaultValue === "number" ? JSON.stringify(defaultValue) : JSON.stringify(defaultValue.label.toLowerCase());
    return Effect_exports.logError(
      `There was a recoverable error with the ${inputPath} input`,
      getConfigErrorMessage(configError),
      `Using ${inputPath} ${stringifiedDefaultValue} instead`
    ).pipe(Effect_exports.map(() => defaultValue));
  });
}

// src/services/github-client.ts
var GithubClient = class extends Context_exports.Tag("GithubClient")() {
};
var githubClient = Inputs.pipe(
  Effect_exports.andThen((inputs2) => {
    const octokit = github.getOctokit(Redacted_exports.value(inputs2.githubToken));
    return {
      listWorkflowRuns: () => Effect_exports.tryPromise({
        try: () => octokit.rest.actions.listWorkflowRuns({
          ...inputs2.workflowRepository,
          workflow_id: inputs2.workflowFileName,
          per_page: 10
        }),
        catch: transformToActionError("Could not list workflow runs")
      }).pipe(tapLogTrace("GitHub listWorkflowRuns response")),
      listJobsForWorkflowRun: (runId) => Effect_exports.tryPromise({
        try: () => octokit.rest.actions.listJobsForWorkflowRun({
          ...inputs2.workflowRepository,
          run_id: runId
        }),
        catch: transformToActionError(`Could not list jobs for workflow run ${runId}`)
      }).pipe(tapLogTrace(`GitHub listJobsForWorkflowRun with runId ${runId} response`)),
      compareToCurrentDeployCommit: (head5) => Effect_exports.tryPromise({
        try: () => octokit.rest.repos.compareCommitsWithBasehead({
          ...inputs2.workflowRepository,
          basehead: `${inputs2.deployedCommitSha}...${head5}`
        }),
        catch: transformToActionError(
          `Could not compare commits ${inputs2.deployedCommitSha}...${head5}`
        )
      }).pipe(
        tapLogTrace(`GitHub compareToCurrentDeployCommit with head ${head5} response`)
      ),
      listCommits: (sha, perPage) => Effect_exports.tryPromise({
        try: () => octokit.rest.repos.listCommits({
          ...inputs2.workflowRepository,
          sha,
          per_page: perPage
        }),
        catch: transformToActionError(`Could not list commits for SHA ${sha}`)
      }).pipe(
        tapLogTrace(
          `GitHub listCommits with sha ${sha} and perPage ${perPage} response`
        )
      ),
      listPullRequestsAssociatedWithCommit: (commitSha) => Effect_exports.tryPromise({
        try: () => octokit.rest.repos.listPullRequestsAssociatedWithCommit({
          ...inputs2.workflowRepository,
          commit_sha: commitSha
        }),
        catch: transformToActionError(
          `Could not list pull requests associated with commit ${commitSha}`
        )
      }).pipe(
        tapLogTrace(
          `GitHub listPullRequestsAssociatedWithCommit with commitSha ${commitSha} response`
        )
      )
    };
  })
);
var GithubClientLive = Layer_exports.effect(GithubClient, githubClient);

// src/prs-merged-since-previous-deploy.ts
var pRsMergedSincePreviousDeploy = Effect_exports.void.pipe(
  Effect_exports.andThen(getWorkflowRuns),
  Effect_exports.andThen(getComparisonWithPreviousDeploy),
  Effect_exports.andThen(getCommitsBetweenCurrentAndPreviousDeploy),
  Effect_exports.andThen(getMergedPrsForCommits),
  Effect_exports.map(
    (pullRequests) => pullRequests.map((pullRequest) => ({
      url: pullRequest.html_url,
      title: pullRequest.title
    }))
  )
);
function getWorkflowRuns() {
  return GithubClient.pipe(
    Effect_exports.andThen((githubClient2) => githubClient2.listWorkflowRuns()),
    Effect_exports.tap(
      (workflowRunsResponse) => workflowRunsResponse.data.workflow_runs.length === 0 ? Effect_exports.fail(new ActionError({ title: "No workflow runs found", exit: "success" })) : Effect_exports.logDebug(
        `${workflowRunsResponse.data.total_count} total workflow runs found`,
        `Processing first ${workflowRunsResponse.data.workflow_runs.length}`
      )
    ),
    Effect_exports.map((workflowRunsResponse) => workflowRunsResponse.data.workflow_runs)
  );
}
function getComparisonWithPreviousDeploy(workflowRuns) {
  return Effect_exports.all(
    workflowRuns.map(
      (workflowRun) => wasDeploySuccessful(workflowRun).pipe(
        Effect_exports.andThen(
          (wasDeploySuccessful2) => wasDeploySuccessful2 ? getComparisonToDeployedCommitSha(workflowRun.head_sha) : Effect_exports.succeed(null)
        )
      )
    ),
    { concurrency: "unbounded" }
  ).pipe(
    Effect_exports.map((results) => results.filter((result) => result !== null)),
    Effect_exports.tap(
      (comparisons) => comparisons.length === 0 ? Effect_exports.fail(
        new ActionError({
          title: "No previous successful deploys found",
          exit: "success"
        })
      ) : Effect_exports.void
    ),
    Effect_exports.map(
      (comparisons) => comparisons.reduce(
        (closest, current) => current.behind_by < closest.behind_by ? current : closest
      )
    ),
    Effect_exports.tap(
      (closestComparison) => Effect_exports.logDebug(
        `Closest comparison with commit ${closestComparison.merge_base_commit.sha.substring(0, 7)}`,
        `Status ${closestComparison.status}, behind by ${closestComparison.behind_by} and ahead by ${closestComparison.ahead_by}`
      )
    )
  );
}
function wasDeploySuccessful(workflowRun) {
  const commitSha = workflowRun.head_sha;
  const shortCommitSha = commitSha.substring(0, 7);
  if (workflowRun.conclusion === "success") {
    return Effect_exports.logDebug(
      `Workflow run at commit ${shortCommitSha} completed successfully`,
      "Processing commit further"
    ).pipe(Effect_exports.map(() => true));
  }
  return Effect_exports.all([GithubClient, Inputs]).pipe(
    Effect_exports.andThen(([githubClient2, inputs2]) => {
      return githubClient2.listJobsForWorkflowRun(workflowRun.id).pipe(
        Effect_exports.map(
          (jobsResponse) => jobsResponse.data.jobs.find((job) => job.name === inputs2.workflowJobName)
        ),
        Effect_exports.tap(
          (job) => job ? job.conclusion === "success" ? Effect_exports.logDebug(
            `Job at commit ${shortCommitSha} completed successfully`,
            "Processing commit further"
          ) : Effect_exports.logDebug(
            `Job at commit ${shortCommitSha} did not complete successfully`,
            "Dropping commit"
          ) : Effect_exports.logDebug(
            `Job with name ${inputs2.workflowJobName} not found in workflow run at commit ${shortCommitSha}`,
            "Dropping commit"
          )
        ),
        Effect_exports.map((job) => job?.conclusion === "success")
      );
    })
  );
}
function getComparisonToDeployedCommitSha(commitSha) {
  return GithubClient.pipe(
    Effect_exports.andThen(
      (githubClient2) => githubClient2.compareToCurrentDeployCommit(commitSha).pipe(
        Effect_exports.map((compareResponse) => compareResponse.data),
        Effect_exports.tap((comparison) => {
          const shortCommitSha = commitSha.substring(0, 7);
          if (comparison.status === "behind") {
            return Effect_exports.logDebug(
              `Commit ${shortCommitSha} is behind deployed commit by ${comparison.behind_by} commits`,
              "Processing commit further"
            );
          }
          if (comparison.status === "identical") {
            return Effect_exports.logDebug(
              `Commit ${shortCommitSha} is identical to deployed commit`,
              "Dropping commit"
            );
          }
          if (comparison.status === "diverged") {
            return Effect_exports.logDebug(
              `Commit ${shortCommitSha} is diverged from deployed commit, ${comparison.ahead_by} ahead and ${comparison.behind_by} behind`,
              "Dropping commit"
            );
          }
          if (comparison.status === "ahead") {
            return Effect_exports.logDebug(
              `Commit ${shortCommitSha} is ahead of deployed commit by ${comparison.ahead_by} commits`,
              "Dropping commit"
            );
          }
        }),
        Effect_exports.map((comparison) => comparison.status === "behind" ? comparison : null)
      )
    )
  );
}
function getCommitsBetweenCurrentAndPreviousDeploy(comparison) {
  return GithubClient.pipe(
    Effect_exports.andThen((githubClient2) => {
      const lastCommitSha = comparison.merge_base_commit.sha;
      if (comparison.commits.length === comparison.behind_by) {
        return Effect_exports.succeed({
          commits: comparison.commits,
          lastCommitSha,
          lastCommitBehindBy: comparison.behind_by
        });
      }
      if (comparison.behind_by >= 100) {
        return Effect_exports.logDebug(
          `Commit from closest comparison is too far behind, only checking last 100 commits`
        ).pipe(
          Effect_exports.andThen(
            () => githubClient2.listCommits(comparison.merge_base_commit.sha, 100)
          ),
          Effect_exports.map((commitsResponse) => ({
            commits: commitsResponse.data,
            lastCommitSha,
            lastCommitBehindBy: comparison.behind_by
          }))
        );
      }
      return githubClient2.listCommits(comparison.base_commit.sha, comparison.behind_by + 1).pipe(
        Effect_exports.map((commitsResponse) => ({
          commits: commitsResponse.data,
          lastCommitSha,
          lastCommitBehindBy: comparison.behind_by
        }))
      );
    }),
    Effect_exports.andThen(({ commits, lastCommitSha, lastCommitBehindBy }) => {
      const lastCommitIndex = commits.findIndex((commit) => commit.sha === lastCommitSha);
      if (lastCommitIndex === -1) {
        return Effect_exports.logWarning(
          `Could not find commit ${lastCommitSha} from last deployment that is behind by ${lastCommitBehindBy} commits`,
          "Some associated pull requests may be left out"
        ).pipe(Effect_exports.map(() => commits));
      }
      return Effect_exports.succeed(commits.slice(0, lastCommitIndex));
    }),
    Effect_exports.tap(
      (commits) => commits.length === 0 ? Effect_exports.fail(
        new ActionError({
          title: "No commits found since previous deploy",
          exit: "success"
        })
      ) : Effect_exports.logDebug(`${commits.length} commits found since previous deploy`)
    )
  );
}
function getMergedPrsForCommits(commits) {
  return GithubClient.pipe(
    Effect_exports.andThen(
      (githubClient2) => Effect_exports.all(
        commits.map(
          (commit) => githubClient2.listPullRequestsAssociatedWithCommit(commit.sha).pipe(
            Effect_exports.map(
              (pullRequestsResponse) => pullRequestsResponse.data.filter(
                (pullRequest) => pullRequest.state === "closed" && pullRequest.merged_at?.length !== 0
              )
            ),
            Effect_exports.tap(
              (pullRequests) => Effect_exports.logDebug(
                `${pullRequests.length} merged pull request${pullRequests.length === 1 ? "" : "s"} found associated with commit ${commit.sha.substring(0, 7)}`
              )
            )
          )
        ),
        { concurrency: "unbounded" }
      )
    ),
    Effect_exports.map((pullRequestsForCommits) => pullRequestsForCommits.flat()),
    Effect_exports.map((pullRequestsWithDuplicates) => {
      const prMap = new Map(pullRequestsWithDuplicates.map((pr) => [pr.html_url, pr]));
      return Array.from(prMap.values());
    }),
    Effect_exports.tap(
      (pullRequests) => Effect_exports.logInfo(
        `Found ${pullRequests.length} pull request${pullRequests.length === 1 ? "" : "s"} associated with current deployment`,
        ...pullRequests.map(
          (pullRequest) => `${pullRequest.html_url} \u2192 ${pullRequest.title}`
        )
      )
    )
  );
}

// src/services/linear-client.ts
var import_sdk = __toESM(require_index_cjs_min());
var LinearClient = class extends Context_exports.Tag("LinearClient")() {
};
var linearClient = Inputs.pipe(
  Effect_exports.andThen((inputs2) => {
    const linear = new import_sdk.LinearClient({
      apiKey: inputs2.linearToken.type === "personal-api-key" ? Redacted_exports.value(inputs2.linearToken.token) : void 0,
      accessToken: inputs2.linearToken.type === "oauth-access-token" ? Redacted_exports.value(inputs2.linearToken.token) : void 0
    });
    function createCommentLive(issueId, body) {
      return Effect_exports.tryPromise({
        try: () => linear.createComment({
          issueId,
          body,
          doNotSubscribeToIssue: true
        }).then((response) => {
          if (!response.success) {
            throw new Error("Request was not successful");
          }
        }),
        catch: transformToActionError(`Could not create comment for issue ${issueId}`)
      });
    }
    function createCommentDryRun(issueId, body) {
      return Effect_exports.logInfo(`Dry run: Would have created comment for issue ${issueId}`, body);
    }
    return {
      getIssueViewForAttachmentUrl: (url, commentBody) => Effect_exports.tryPromise({
        try: () => linear.client.request(issueViewForAttachmentQuery, {
          url,
          commentBody
        }),
        catch: transformToActionError(
          `Could not get issue view for attachment URL ${url}`
        )
      }).pipe(tapLogTrace("Linear query IssueViewForAttachmentUrl response")),
      createComment: inputs2.isDryRun ? createCommentDryRun : createCommentLive
    };
  })
);
var LinearClientLive = Layer_exports.effect(LinearClient, linearClient);
var gql = String.raw;
var issueViewForAttachmentQuery = gql`
    query IssueViewForAttachmentUrl($url: String!, $commentBody: String!) {
        attachmentsForURL(url: $url) {
            nodes {
                issue {
                    id
                    identifier
                    comments(filter: { body: { eq: $commentBody } }, first: 1, orderBy: createdAt) {
                        nodes {
                            id
                        }
                    }
                }
            }
        }
    }
`;

// src/report-deployed-prs-to-linear.ts
function reportDeployedPrsToLinear(pullRequests) {
  return LinearClient.pipe(
    Effect_exports.andThen(
      (linearClient2) => Effect_exports.all(
        pullRequests.map(
          (pullRequest) => getCommentBody(pullRequest).pipe(
            Effect_exports.andThen(
              (commentBody) => linearClient2.getIssueViewForAttachmentUrl(pullRequest.url, commentBody).pipe(
                Effect_exports.map((issueView) => issueView.attachmentsForURL.nodes),
                Effect_exports.tap(
                  (attachments) => attachments.length === 0 ? Effect_exports.logInfo(
                    `No Linear attachments found for pull request ${pullRequest.url}`
                  ) : Effect_exports.logDebug(
                    `${attachments.length} Linear attachment${attachments.length === 1 ? "" : "s"} found for pull request ${pullRequest.url}`,
                    `Belonging to issue${attachments.length === 1 ? "" : "s"} ${attachments.map((attachment) => attachment.issue.identifier).join(", ")}`
                  )
                ),
                Effect_exports.andThen(
                  (attachments) => Effect_exports.all(
                    attachments.map(
                      (attachment) => attachment.issue.comments.nodes.length === 0 ? linearClient2.createComment(
                        attachment.issue.id,
                        commentBody
                      ).pipe(
                        Effect_exports.andThen(
                          () => Effect_exports.logInfo(
                            `Added comment to issue ${attachment.issue.identifier}`,
                            "Comment body:",
                            commentBody
                          )
                        )
                      ) : Effect_exports.logInfo(
                        `Not adding comment to issue ${attachment.issue.identifier} because it already has deploy comment`,
                        "Comment body:",
                        commentBody
                      )
                    ),
                    { concurrency: "unbounded" }
                  )
                )
              )
            )
          )
        ),
        { concurrency: "unbounded" }
      )
    )
  );
}
function getCommentBody(pullRequest) {
  return Inputs.pipe(
    Effect_exports.map(
      (inputs2) => inputs2.linearCommentBody.replace(/{{\s*(.+?)\s*}}/g, (match11, captureGroup) => {
        if (captureGroup === "pullRequest.url") {
          return pullRequest.url;
        }
        if (captureGroup === "pullRequest.title") {
          return pullRequest.title;
        }
        return match11;
      })
    )
  );
}

// src/services/logger.ts
var LoggerLive = getLogLevelConfig().pipe(
  Effect_exports.andThen(Logger_exports.minimumLogLevel),
  Layer_exports.unwrapEffect,
  Layer_exports.provide(Logger_exports.pretty)
);

// src/program.ts
function createProgram(params) {
  return Effect_exports.void.pipe(
    Effect_exports.andThen(() => pRsMergedSincePreviousDeploy),
    Effect_exports.andThen(reportDeployedPrsToLinear),
    Effect_exports.provide(params.linearClient),
    Effect_exports.provide(params.githubClient),
    Effect_exports.provide(InputsLive),
    Effect_exports.catchIf(
      (error) => error.exit === "success",
      (error) => Effect_exports.logInfo(error.title, ...error.messages)
    ),
    Effect_exports.tapBoth({
      onSuccess: () => Effect_exports.logInfo("Action completed successfully"),
      onFailure: (error) => Effect_exports.logError(error.title, ...error.messages).pipe(
        Effect_exports.andThen(Effect_exports.logInfo("Action aborted"))
      )
    }),
    Effect_exports.tapDefect((defect) => Effect_exports.logError("Action died unexpectedly", defect)),
    Effect_exports.provide(LoggerLive),
    Effect_exports.provide(params.configProvider)
  );
}

// src/run-main.ts
var core = __toESM(require_core());

// node_modules/@effect/platform-node/dist/esm/NodeRuntime.js
var NodeRuntime_exports = {};
__export(NodeRuntime_exports, {
  runMain: () => runMain3
});

// node_modules/@effect/platform/dist/esm/Runtime.js
var defaultTeardown = (exit4, onExit3) => {
  onExit3(isFailure(exit4) && !isInterruptedOnly2(exit4.cause) ? 1 : 0);
};

// node_modules/@effect/platform-node-shared/dist/esm/internal/runtime.js
var runMain = (effect2, options) => {
  const teardown = options?.teardown ?? defaultTeardown;
  const keepAlive = setInterval(() => {
  }, 2 ** 31 - 1);
  const fiber = runFork(options?.disableErrorReporting === true ? effect2 : tapErrorCause3(effect2, (cause3) => {
    if (isInterruptedOnly2(cause3)) {
      return _void;
    }
    return logError2(cause3);
  }));
  fiber.addObserver((exit4) => {
    clearInterval(keepAlive);
    teardown(exit4, (code) => {
      process.exit(code);
    });
  });
  function onSigint() {
    process.removeListener("SIGINT", onSigint);
    process.removeListener("SIGTERM", onSigint);
    fiber.unsafeInterruptAsFork(fiber.id());
  }
  process.once("SIGINT", onSigint);
  process.once("SIGTERM", onSigint);
};

// node_modules/@effect/platform-node-shared/dist/esm/NodeRuntime.js
var runMain2 = runMain;

// node_modules/@effect/platform-node/dist/esm/NodeRuntime.js
var runMain3 = runMain2;

// src/run-main.ts
function runMainLive(effect2) {
  return NodeRuntime_exports.runMain(effect2, { disableErrorReporting: !core.isDebug() });
}

// src/services/config-provider.ts
var core2 = __toESM(require_core());
var pathDelimiter = "-";
var sequenceDelimiterRegex = /\s*,\s*/;
var githubActionConfigProvider = ConfigProvider_exports.fromFlat(
  ConfigProvider_exports.makeFlat({
    load(path, primitive3, split) {
      const pathString = path.join(pathDelimiter);
      const inputValue = core2.getInput(pathString);
      if (!inputValue) {
        return Effect_exports.fail(
          ConfigError_exports.MissingData(
            path,
            "Expected input parameter is missing",
            { pathDelim: pathDelimiter }
          )
        );
      }
      if (split) {
        return pipe(
          inputValue.split(sequenceDelimiterRegex),
          Effect_exports.forEach(primitive3.parse),
          Effect_exports.mapError(ConfigError_exports.prefixed(path))
        );
      }
      return pipe(
        primitive3.parse(inputValue),
        Effect_exports.mapBoth({
          onSuccess: Array.of,
          onFailure: ConfigError_exports.prefixed(path)
        })
      );
    },
    enumerateChildren(path) {
      return Effect_exports.fail(
        ConfigError_exports.Unsupported(
          path,
          "Enumerating input children is not supported in GitHub Actions",
          { pathDelim: pathDelimiter }
        )
      );
    },
    patch: ConfigProviderPathPatch_exports.empty
  })
);
var ConfigProviderLive = Layer_exports.setConfigProvider(githubActionConfigProvider);

// src/index.ts
createProgram({
  configProvider: ConfigProviderLive,
  githubClient: GithubClientLive,
  linearClient: LinearClientLive
}).pipe(runMainLive);
/*! Bundled license information:

undici/lib/fetch/body.js:
  (*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

undici/lib/websocket/frame.js:
  (*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> *)
*/
//# sourceMappingURL=index.js.map
